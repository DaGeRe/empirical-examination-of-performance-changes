{
  "commons-compress": {
    "1cd7e07d": "Bump actions/cache from 3.3.0 to 3.3.1",
    "bd5dce92": "Bump actions/cache from 3.2.6 to 3.3.0",
    "cdebb8f9": "Bump actions/cache from 3.2.5 to 3.2.6",
    "7332d3b6": "Bump actions/cache from 3.2.4 to 3.2.5",
    "db975045": "Bump actions/cache from 3.2.3 to 3.2.4",
    "79479d20": "Bump actions/cache from 3.2.2 to 3.2.3",
    "4af908f3": "Bump actions/cache from 3.2.0 to 3.2.2 (#347)",
    "f81a9b7c": "Bump actions/cache from 3.0.11 to 3.2.0",
    "910bfc05": "Bump actions/cache from 3.0.10 to 3.0.11",
    "ad1437d9": "Bump actions/cache from 3.0.8 to 3.0.10",
    "c73f0711": "Use GitHub cache for CodeQL",
    "602a74c5": "Bump actions/cache from 3.0.7 to 3.0.8",
    "aeb1defc": "Bump actions/cache from 3.0.6 to 3.0.7",
    "7cae698b": "Bump actions/cache from 3.0.5 to 3.0.6",
    "b76b3502": "Bump actions/cache from 3.0.4 to 3.0.5",
    "977462bf": "Bump actions/cache from 3.0.3 to 3.0.4",
    "689368e9": "Bump actions/cache from 3.0.2 to 3.0.3",
    "0541a5a2": "Bump actions/cache from 3 to 3.0.2",
    "bb9fb14f": "Bump actions/cache from 2.1.7 to 3",
    "11468a17": "Bump actions/cache from 2.1.6 to 2.1.7",
    "017317f5": "Bump actions/cache from 2.1.4 to 2.1.6 #200.",
    "e1e5635d": "Bump actions/cache from 2.1.4 to 2.1.6 (#200)",
    "6a72242a": "tiny performance improvement",
    "56720646": "update XZ for Java to get access to improved performance",
    "d8aece0b": "Bump actions/cache from v2 to v2.1.4 #164 Bump junit from 4.13.1 to 4.13.2 #167 Bump mockito-core from 3.7.7 to 3.8.0 #170",
    "06ab954d": "Bump actions/cache from v2 to v2.1.4 (#164)",
    "1c54c06a": "Simplify. Don't cache Maven itself.",
    "7c17493a": "set fail-fast as false for GH actions",
    "204faf58": "maybe we can add a break here Hi. Can we add a break here? Also, should we try implement a data structure or something for doing this? a loop like this sounds slow. If you don't mind I will give it a try several hours later (if I still have some time).",
    "243bfff8": "use StandardCharsets. In most cases using StandardCharsets is faster. You can get more information at `decode(String charsetName, byte[] ba, int off, int len)`` and `decode(Charset cs, byte[] ba, int off, int len)` in class java.lang.StringCoding",
    "9d2a2f4a": "generic version of Arrays.copyOf is slower than copying manually",
    "34c3311d": "hasRemaining may be faster that actually counting elements",
    "e2175822": "Substituting 'synchronized' with faster and fully thread-safe collections 'ConcurrentLinkedDeque' and iterators.",
    "d5f61b43": "reading from the cache doesn't need to throw an exception",
    "135dd48f": "COMPRESS-438 buffer bounded streams in ZipFile for better performance",
    "605c88ca": "Enable maven cache for in travis config",
    "daa69a59": "COMPRESS-388: Improve stream performance with wrapped buffers",
    "7e89c9cc": "COMPRESS-388: Fix concurrent reads performance",
    "2f56fb5c": "ByteBuffer looks convenient but is slow (manual method is 50% faster)",
    "ed3c605f": "COMPRESS-381 working in memory only may improve performance",
    "eec6f0b5": "small optimization",
    "daeb0745": "COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization",
    "87f0f2ec": "COMPRESS-327 write 7z archives to arbirary SeekableByteChannels - needs optimization",
    "516c38fd": "Changed ZipArchiveEntry to use more optimized data structure for an overall performance improvement of about 10% for the use case 'many small files', for instance a jar file.",
    "b7af8b37": "Minor optimizations.",
    "14187056": "Cut overall object instantiation in half by changing file header generation algorithm, for a 10-15 percent performance improvement when archive contains lots of small files.",
    "840a20e1": "cache bit masks",
    "c7beb9fc": "COMPRESS-285 optionally cache whether XZ for Java is available",
    "f525a2ab": "micro-optimization",
    "a671a703": "COMPRESS-234 read/skip performance improvements to TarArchiveInputStream - patch by BELUGA BEHR",
    "d2bcb037": "COMPRESS-233 performance and readability tweak for TarBuffer",
    "21148e7b": "micro optimization",
    "f36320ac": "some formatting and javadoc tweaks, minor optimization",
    "4e767256": "tiny performance tweak",
    "86590883": "minor optimization"
  },
  "commons-csv": {
    "ca788568": "Bump actions/cache from 3.3.0 to 3.3.1",
    "f90939b5": "Bump actions/cache from 3.2.6 to 3.3.0",
    "89ef8f54": "Merge pull request #310 from apache/dependabot/github_actions/actions/cache-3.2.6",
    "01c6a17e": "Bump actions/cache from 3.2.5 to 3.2.6",
    "420cd15c": "Bump actions/cache from 3.2.4 to 3.2.5",
    "201679d7": "Bump actions/cache from 3.2.3 to 3.2.4",
    "a1517e54": "Merge pull request #300 from apache/dependabot/github_actions/actions/cache-3.2.3",
    "656132c5": "Bump actions/cache from 3.2.2 to 3.2.3",
    "3f1b4f9e": "Merge pull request #296 from apache/dependabot/github_actions/actions/cache-3.2.2",
    "4c9ac9c0": "Bump actions/cache from 3.2.1 to 3.2.2",
    "86b2bfa9": "Merge pull request #294 from apache/dependabot/github_actions/actions/cache-3.2.1",
    "734482d4": "Bump actions/cache from 3.0.11 to 3.2.1",
    "827a1fcc": "Bump actions/cache from 3.0.10 to 3.0.11",
    "76b4637c": "Bump actions/cache from 3.0.9 to 3.0.10 #271",
    "6d80ca8f": "Merge pull request #271 from apache/dependabot/github_actions/actions/cache-3.0.10",
    "ee2e3c11": "Bump actions/cache from 3.0.9 to 3.0.10",
    "6e551730": "Bump actions/cache from 3.0.8 to 3.0.9 #267",
    "7f8b74c0": "Merge pull request #267 from apache/dependabot/github_actions/actions/cache-3.0.9",
    "84a91755": "Bump actions/cache from 3.0.8 to 3.0.9",
    "4ed942fc": "Use GitHub cache for CodeQL",
    "226628ab": "Bump actions/cache from 3.0.7 to 3.0.8",
    "2236a52b": "Bump actions/cache from 3.0.6 to 3.0.7",
    "8077cdcf": "Bump actions/cache from 3.0.5 to 3.0.6",
    "0455edb8": "Bump actions/cache from 3.0.4 to 3.0.5",
    "e8f24e86": "Bump actions/cache 3.0.4 to 3.0.5",
    "ce569c14": "Bump actions/cache from 3.0.3 to 3.0.4",
    "2850581b": "Bump actions/cache from 3.0.2 to 3.0.3",
    "3450f8e6": "Bump actions/cache from 3 to 3.0.2",
    "6a7e9f91": "Bump actions/cache from 2.1.7 to 3 #223",
    "ef6c1a14": "Bump actions/cache from 2.1.7 to 3 (#223)",
    "ebbd432f": "Bump actions/cache from 2.1.6 to 2.1.7",
    "6dad95b2": "Bump actions/cache from 2.1.4 to 2.1.6 #153.",
    "7b99bdcc": "Bump actions/cache from 2.1.4 to 2.1.6 (#153)",
    "e995b189": "Bump actions/cache from v2 to v2.1.4 (#132)",
    "536c18d4": "Use Character cache.",
    "d6778b74": "Fix typo performance test #55.",
    "883a0e91": "Allow performance test to traverse column values (optional).",
    "db374369": "Better performance tests. Provide a test CSV file to work with. Tests depends on Commons IO to help decompress the large-ish CSV test file.",
    "19ba389f": "Checking the token type seems to be quite slow",
    "ff41f78e": "Temporary copy of original CSVLexer for performance comparison.",
    "afc831bc": "Optimized ExtendedBufferedReader as suggested by Bob Smith in CSV-42 (improves the performance by 30%)",
    "94b9f8dc": "Minor performance improvement (~2%)",
    "740a1b69": "Removed the volatile modifier on the fields in CSVFormat to improve the performances"
  },
  "commons-dbcp": {
    "a80e6fe0": "Bump actions/cache from 3.2.6 to 3.3.1 (#269)",
    "772a9bc9": "Bump actions/cache from 3.2.5 to 3.2.6 (#265)",
    "778c83a1": "Bump actions/cache from 3.2.4 to 3.2.5 (#263)",
    "e0a31949": "Bump actions/cache from 3.2.3 to 3.2.4 (#259)",
    "a54e00f1": "Bump actions/cache from 3.2.2 to 3.2.3 (#257)",
    "3ea4fe65": "Bump actions/cache from 3.2.0 to 3.2.2 (#251)",
    "05084c77": "Bump actions/cache from 3.0.11 to 3.2.0 (#249)",
    "c3c30d2f": "Bump actions/cache from 3.0.8 to 3.0.11 (#226)",
    "52201fa2": "Use GitHub cache for CodeQL",
    "a23ca4d1": "Bump actions/cache from 3.0.7 to 3.0.8",
    "f70a2965": "Bump actions/cache from 3.0.6 to 3.0.7",
    "e73e851c": "Bump actions/cache from 3.0.5 to 3.0.6",
    "8649b8eb": "Bump actions/cache 3.0.4 to 3.0.5",
    "c001b5ef": "Bump actions/cache 3.0.4 to 3.0.5",
    "c3a37b42": "Bump actions/cache from 3.0.3 to 3.0.4",
    "e21b52aa": "Bump actions/cache from 3.0.2 to 3.0.3",
    "50b78a7e": "Bump actions/cache from 3 to 3.0.2",
    "07834b22": "Bump actions/cache from 2.1.7 to 3 #176",
    "7bb561ab": "Bump actions/cache from 2.1.7 to 3 (#176)",
    "79d498e5": "Bump actions/cache from 2.1.6 to 2.1.7 #147.",
    "c2096206": "Bump actions/cache from 2.1.6 to 2.1.7 (#147)",
    "8f5eb1bc": "Bump actions/cache from 2.1.4 to 2.1.6 #108.",
    "38370176": "Bump actions/cache from 2.1.4 to 2.1.6 (#108)",
    "254a1e1b": "Bump actions/cache from v2 to v2.1.4 (#90)",
    "2535b94a": "[DBCP-568] ManagedConnection must clear its cached state after transaction completes #75 (#75)",
    "b53521ba": "- [DBCP-427] Examines 'SQLException's thrown by underlying connections or statements for fatal (disconnection) errors. - [DBCP-507] Change default for fail-fast connections from false to true.",
    "43a6189c": "Ensure that the cacheState setting is used when statement pooling is disabled.",
    "d53e67a4": "Added fastFailValidation property to PC, BDS. JIRA: DBCP-427.",
    "a127eaf6": "Another small performance tweak.",
    "63a2276b": "Small performance tweak. The improvement is just about visible.",
    "ddf17a1b": "Fix problem identified while performance testing validation queries.",
    "c7cb7b5b": "Use a PreparedStatement for the validation query to improve performance. Testing suggests a ~15% improvement with a very basic validation query.",
    "fee5cc30": "Prep for fixing a FindBugs issue in a sub-class - Add a short-cut to equals for the same object - Use explicit tests rather than exception handling (should be faster) - Use all of the fields for the hashCode to improve performance when used in HashTables etc.",
    "3c2b1e0c": "Fix. Problem with r1101837. cacheState was not being set for conenctions obtained via this factory.",
    "b60e741d": "Eliminated poolKeys cache from PerUserPoolDataSource. JIRA: DBCP-320.",
    "ad71c16a": "DBCP-321 SharedPoolDataSource does not need userKeys LRUMap cache",
    "c9393b26": "Added test case verifying that prepared statement pool acts as LRU cache.",
    "ea8497a5": "1) Modified fix applied in r598045: CODE_OF_CONDUCT.md CONTRIBUTING.md dbcp-pre-RC.sh dbcp-RC.sh dbcp-release.sh doc LICENSE.txt NOTICE.txt pom.xml README.md RELEASE-NOTES.txt SECURITY.md src Removed workaround to prevent ConcurrentModificationExceptions generated by PooledConnectionImpl's notifyListeners method. CODE_OF_CONDUCT.md CONTRIBUTING.md dbcp-pre-RC.sh dbcp-RC.sh dbcp-release.sh doc LICENSE.txt NOTICE.txt pom.xml README.md RELEASE-NOTES.txt SECURITY.md src Changed PooledConnectionImpl notifyListeners to copy listeners and iterate over the copy instead of directly iterating over failfast Vector iterator.",
    "5d520ebd": "Change hard Transation reference to a weak reference so TransactionContext can be garbagecollected from caches WeakHashMap in TransactionManager",
    "0de3a5b8": "Change hard Transation reference to a weak reference so TransactionContext can be garbagecollected from caches WeakHashMap in TransactionManager",
    "04495acf": "Bugzilla Bug 29963: BasicDataSource does not work with getConnection(String, String) - fail fast (throw UnsupportedOperationException) - update javadoc",
    "3c3a74f6": "JUnit test for Bugzilla Bug 27246 PreparedStatement cache should be different depending on the Catalog",
    "76200b39": "Bugzilla Bug 27246: PreparedStatement cache should be different depending on the Catalog (Ludovic Dubost)",
    "2c6f62fc": "When updating to start testing the latest DBCP with bug fixes I found several performance optimizations in my source tree."
  },
  "commons-fileupload": {
    "76e1e8e": "Fail fast when a repository contains a null character.",
    "9111714": "Bump actions/cache from 3.3.0 to 3.3.1 (#207)",
    "383243c": "Bump actions/cache from 3.2.6 to 3.3.0 (#205)",
    "1d275ea": "Bump actions/cache from 3.2.4 to 3.2.6 (#204)",
    "04f20fc": "Bump actions/cache from 3.2.3 to 3.2.4 (#199)",
    "dac6178": "Bump actions/cache from 3.2.2 to 3.2.3 (#197)",
    "34eb241": "Bump actions/cache from 3.2.1 to 3.2.2 (#193)",
    "d3c5f37": "Bump actions/cache from 3.2.0 to 3.2.1 (#192)",
    "f1127eb": "Bump actions/cache from 3.0.11 to 3.2.0 (#190)",
    "b172f26": "Bump actions/cache from 3.0.10 to 3.0.11 (#173)",
    "b6787ec": "Bump actions/cache from 3.0.8 to 3.0.10 (#170)",
    "ad12a62": "Use GitHub cache for CodeQL",
    "b007743": "Bump actions/cache from 3.0.7 to 3.0.8",
    "07ec972": "Bump actions/cache from 3.0.6 to 3.0.7",
    "a7d75b4": "Bump actions/cache from 3.0.5 to 3.0.6",
    "c56fdca": "Bump actions/cache 3.0.4 to 3.0.5",
    "275d5d8": "Bump actions/cache 3.0.4 to 3.0.5",
    "c913836": "Bump actions/cache from 3.0.3 to 3.0.4",
    "0c03955": "Bump actions/cache from 3.0.2 to 3.0.3",
    "527fe84": "Bump actions/cache from 3 to 3.0.2",
    "38e4fe9": "Bump actions/cache from 2.1.7 to 3 #140",
    "d372b29": "Bump actions/cache from 2.1.7 to 3 (#140)",
    "6eb6d66": "Bump actions/cache from 2.1.6 to 2.1.7 #128.",
    "da0d434": "Bump actions/cache from 2.1.6 to 2.1.7 (#128)",
    "8bfd763": "Merge pull request #98 from apache/dependabot/github_actions/actions/cache-2.1.6",
    "44032e6": "Bump actions/cache from 2.1.5 to 2.1.6",
    "ee6493a": "Merge pull request #66 from apache/dependabot/github_actions/actions/cache-v2.1.5",
    "1e5b6ab": "Bump actions/cache from v2.1.4 to v2.1.5",
    "6a9f8bb": "Merge pull request #56 from apache/dependabot/github_actions/actions/cache-v2.1.4",
    "97b14cf": "Bump actions/cache from v2 to v2.1.4",
    "afdedc9": "Improve performance for large multi-part boundaries. Patch provided by Felix Schumacher.",
    "774ef16": "Fix a performance issue with large boundaries leading to a Denial of Service (CVE-2016-3092)",
    "651283e": "[FILEUPLOAD-207] #comment enhanced read performances #resolve",
    "a2a5b05": "Document the fact that the FileItem.write() method is only guaranteed to work once for each file item. This restriction is a compromise that allows for significant performance gain in the case that an implementation uses a disk file for temporary storage, and uses file renaming to implement the write() method. The only cost of this restriction is that multiple calls to write() for the same file item -- an unlikely requirement in any case -- would fail. (Bug #19369, reported by Thierry De Leeuw)"
  },
  "commons-imaging": {
    "24ffd332": "[IMAGING-345] perform tests in memory instead of disk making them faster",
    "60c2d26b": "Bump actions/cache from 3.3.0 to 3.3.1",
    "8215a495": "Bump actions/cache from 3.2.6 to 3.3.0",
    "be31e073": "Bump actions/cache from 3.2.5 to 3.2.6",
    "aca5f431": "Bump actions/cache from 3.2.4 to 3.2.5",
    "ab2a97a0": "Merge pull request #274 from apache/dependabot/github_actions/actions/cache-3.2.4",
    "4dd03ece": "Bump actions/cache from 3.2.3 to 3.2.4",
    "a099b11a": "Bump actions/cache from 3.2.2 to 3.2.3",
    "76176767": "Bump actions/cache from 3.2.1 to 3.2.2",
    "603df88d": "Bump actions/cache from 3.2.0 to 3.2.1",
    "8dfb62d5": "Merge pull request #258 from apache/dependabot/github_actions/actions/cache-3.2.0",
    "c70df48d": "Bump actions/cache from 3.0.11 to 3.2.0",
    "a1fdb45a": "Bump actions/cache from 3.0.10 to 3.0.11",
    "71a3a93c": "Bump actions/cache from 3.0.9 to 3.0.10",
    "18daa8b2": "Bump actions/cache from 3.0.8 to 3.0.9",
    "7c3356ee": "Use GitHub cache for CodeQL",
    "7eb9f8df": "Bump actions/cache from 3.0.7 to 3.0.8",
    "3ee44575": "Bump actions/cache from 3.0.6 to 3.0.7",
    "1701db18": "Bump actions/cache from 3.0.5 to 3.0.6",
    "21b2eedc": "Bump actions/cache from 3.0.4 to 3.0.5",
    "01d92fa2": "Remove CheckStyle cacheFile property from TreeWalker",
    "b39f72dd": "Use HashMap instead of HashTable since HashTable is synchronized which makes it slower than HashMap",
    "6ebe1429": "Some more TIFF performance enhancements. Make getSamplesAsBytes() use a preallocated array instead of allocating a new one on each pixel. Also simplifies an if statement so there's less work done per pixel. This reduces the running time by about 20%, and shortens the total time taken by tests run by 'mvn package' by about 5%.",
    "061b73d2": "refactored 'byte sources,' improving performance around reading from input streams. Also moved 'byte sources' into their own package."
  },
  "commons-io": {
    "7972af75": "Bump actions/cache from 3.3.0 to 3.3.1 (#440)",
    "f74d5bd8": "Bump actions/cache from 3.2.6 to 3.3.0 (#437)",
    "78a7211b": "Bump actions/cache from 3.2.5 to 3.2.6 (#436)",
    "26a6ae56": "Bump actions/cache from 3.2.4 to 3.2.5",
    "e7ad0af8": "Bump actions/cache from 3.2.3 to 3.2.4 (#429)",
    "3289f985": "Bump actions/cache from 3.2.2 to 3.2.3",
    "3c216661": "Bump actions/cache from 3.2.0 to 3.2.2 (#419)",
    "3bd96590": "Bump actions/cache from 3.0.11 to 3.2.0",
    "30775ac0": "Bump actions/cache from 3.0.10 to 3.0.11",
    "6aaa732b": "Bump actions/cache from 3.0.8 to 3.0.10",
    "d503c604": "Use GitHub cache for CodeQL",
    "e5683eec": "Bump actions/cache from 3.0.7 to 3.0.8",
    "cb208538": "Bump actions/cache from 3.0.6 to 3.0.7",
    "29b990b3": "Bump actions/cache@v3.0.5 to 3.0.6",
    "07eeb93a": "Bump actions/cache from 3.0.5 to 3.0.6",
    "3eb537cb": "Increase timeout for when build are super slow (on my GitHub at least)",
    "783f2b47": "Increase timeout for when build are super slow (on my PC at least)",
    "9327a98a": "Bump actions/cache 3.0.4 to 3.0.5",
    "1cfd1abe": "Bump actions/cache from 3.0.3 to 3.0.4",
    "d36b67fd": "Bump actions/cache from 3.0.2 to 3.0.3",
    "72e3fbe4": "Bump actions/cache from 3 to 3.0.2",
    "20da0fda": "Bump actions/cache from 2.1.7 to 3 #337",
    "53a81d04": "Bump actions/cache from 2.1.7 to 3 (#337)",
    "44a0dfec": "Bump actions/cache from 2.1.6 to 2.1.7",
    "1259081a": "Bump actions/cache from 2.1.5 to 2.1.6 #238.",
    "4cd754cf": "Bump actions/cache from 2.1.5 to 2.1.6 (#238)",
    "2b028680": "Bump actions/cache from 2.1.4 to 2.1.5 #228.",
    "50f28a2c": "Bump actions/cache from 2.1.4 to 2.1.5 (#228)",
    "9cbfdcda": "Bump actions/cache from v2 to v2.1.4 #202.",
    "a68536ca": "Bump actions/cache from v2 to v2.1.4 (#202)",
    "aa04779e": "Improve performance of IOUtils.contentEquals(Reader, Reader).",
    "5bed26f6": "Improved performance of IOUtils.contentEquals(InputStream, InputStream).",
    "89d0c2d6": "Add JMH to POM to factlitate performance testing and avoid future and current PRs to clash in the POM.",
    "55661498": "Tiny performance improvement in FileUtils#moveDirectoryToDirectory() #174.",
    "9e8d03a2": "Tiny performance improvement in FileUtils#moveDirectoryToDirectory() (#174)",
    "75b79c72": "Tiny performance improvements. (#163)",
    "eedfc2d8": "refine travis-ci scripts(add cache)",
    "7f15b0e5": "IO-383 FileUtils.doCopyFile caches the file size; needs to be documented",
    "59ffcad1": "[IO-332] Improve tailer's reading performance.",
    "6ab58439": "IO-296 ReaderInputStream optimization: more efficient reading of small chunks of data",
    "c658828d": "IO-97 - ByteArrayOutputStream performance enhancements, from Holger Hoffstatte",
    "6eca4c05": "IO-97 - ByteArrayOutputStream performance enhancements, from Holger Hoffstatte",
    "d3d4c594": "Code changed so it compiles. Tests don't pass, but its a step anyway. Problems are probably all caused by my slow-refactoring."
  },
  "commons-pool": {
    "1d0e1c76": "Bump actions/cache from 3.3.0 to 3.3.1 (#215)",
    "02996b87": "Allow slower builds on busy setups",
    "8169eaa7": "Bump actions/cache from 3.2.6 to 3.3.0",
    "66d46b4f": "Bump actions/cache from 3.2.5 to 3.2.6 (#213)",
    "63c5f61c": "Bump actions/cache from 3.2.4 to 3.2.5",
    "e5477e98": "Bump actions/cache from 3.2.3 to 3.2.4",
    "6886fc70": "Bump actions/cache from 3.2.2 to 3.2.3",
    "60ab766c": "[POOL-393] Improve BaseGenericObjectPool's JMX Register performance (#199)",
    "d029ccc3": "Bump actions/cache from 3.2.1 to 3.2.2",
    "42c00276": "Bump actions/cache from 3.0.11 to 3.2.1 (#201)",
    "5209f42d": "Bump actions/cache from 3.0.10 to 3.0.11 (#183)",
    "8f96e89f": "Fail-fast on null input for DefaultPooledObjectInfo.DefaultPooledObjectInfo(PooledObject) with a NullPointerException.",
    "7ab845ab": "Bump actions/cache from 3.0.9 to 3.0.10 #178",
    "e0ad220e": "Bump actions/cache from 3.0.9 to 3.0.10 (#178)",
    "43ead9e9": "Bump actions/cache from 3.0.8 to 3.0.9 #174",
    "6e7ff12c": "Bump actions/cache from 3.0.8 to 3.0.9 (#174)",
    "41ab9ce1": "Use GitHub cache for CodeQL",
    "7951ee73": "Be a little more patient for slow builds",
    "9793b385": "Be a little more patient for slow builds",
    "e1137260": "Bump actions/cache from 3.0.7 to 3.0.8",
    "752b7186": "Bump actions/cache from 3.0.6 to 3.0.7",
    "251e973c": "Bump actions/cache from 3.0.5 to 3.0.6",
    "bd8093d2": "Bump actions/cache from 3.0.4 to 3.0.5",
    "dbdd662f": "Bump actions/cache 3.0.4 to 3.0.5",
    "a580464b": "Bump actions/cache from 3.0.3 to 3.0.4",
    "f758193f": "Bump actions/cache from 3.0.2 to 3.0.3",
    "1250146c": "Bump actions/cache from 3 to 3.0.2",
    "81145e7a": "Bump actions/cache from 2.1.7 to 3 #138",
    "e210e6db": "Bump actions/cache from 2.1.7 to 3 (#138)",
    "6b5c9429": "Bump actions/cache from 2.1.6 to 2.1.7",
    "c2d92313": "Bump actions/cache from 2.1.5 to 2.1.6 #84.",
    "75e81ec2": "Bump actions/cache from 2.1.5 to 2.1.6 (#84)",
    "f06e8159": "Bump actions/cache from 2.1.4 to 2.1.5 #75.",
    "cfef1419": "Minor performances Improvement: (#60)",
    "3e0788f1": "Bump actions/cache from v2 to v2.1.4 (#65)",
    "923aef47": "Make Phil's suggested changes to (hopefully) fix issues when testing with commons-performance",
    "f7a6d7ae": "Add the ability to register an interest in a key to prevent the associated ObjectDeque being removed from under methods that expect it to remain available for the life of the method. Fixes the issues found by commons-performance",
    "a2d6fa88": "restored generics to performance test classes",
    "6979917d": "Move allocate() calls outside sync blocks to address performance issues identified in Phil's testing",
    "1d9e3909": "Move allocate() calls outside sync blocks to address performance issues identified in Phil's testing",
    "6d817166": "Either I have a *really* slow machine or we have more tests.",
    "20cf9cd8": "Fix compiler warning: Access to enclosing constructor GenericKeyedObjectPool.ObjectQueue() is emulated by a synthetic accessor method. Increasing its visibility will improve your performance",
    "094266f6": "Reduced synchronization in GenericObjectPool, GenericKeyedObjectPool. Factory method activations within synchronized blocks were causing performance problems in DBCP and other applications where factory methods could block.",
    "7f4df47c": "The calls to BaseObjectPool.close() and BaseKeyedObjectPool.close() should not by synchronized. Those methods are implicitly thread-safe and requiring synchronization while calling them can introduce a high latency while trying to close a pool when a slow [Keyed]PoolableObjectFactory is being used, eg: one that does network IO.",
    "7839ec6d": "Fix: optimization where EvictInvalidFrequencyMillis is less than EvictIdleMillis could be optimized out had the comparison backwards.",
    "4b5e60ae": "Changes neesed for 'CompositeKeyedObjectPool's to work: Detect when making new objects is relatively slow or expensive. When it is, try to anticipate demand and create idle objects while allowing concurrent pool access. The idea came from a discussion with Peter Steijn on ways to reduce pool latency.",
    "b4af7a17": "Detect when making new objects is relatively slow or expensive. When it is, try to anticipate demand and create idle objects while allowing concurrent pool access. The idea came from a discussion with Peter Steijn on ways to reduce pool latency.",
    "93cbbc6f": "Multi-thread performance test",
    "161f3b9b": "Bugzilla Bug 19614: [DBCP] Poor performance under load Bugzilla Bug 22229: [DBCP] Foul connection causes livelock of all pool operations"
  },
  "commons-text": {
    "db250413": "Bump actions/cache from 3.3.0 to 3.3.1",
    "0220ec1d": "Bump actions/cache from 3.2.6 to 3.3.0 (#416)",
    "f4959c32": "Bump actions/cache from 3.2.5 to 3.2.6 (#415)",
    "1eb28c83": "Bump actions/cache from 3.2.4 to 3.2.5 (#413)",
    "33244d8d": "Bump actions/cache from 3.2.3 to 3.2.4 (#411)",
    "ead94e41": "Bump actions/cache from 3.2.2 to 3.2.3",
    "fb4ff295": "Bump actions/cache from 3.2.1 to 3.2.2",
    "48869ba6": "Bump actions/cache from 3.0.11 to 3.2.1 (#398)",
    "77aa9001": "Bump actions/cache from 3.0.10 to 3.0.11",
    "94914aef": "Bump actions/cache from 3.0.9 to 3.0.10",
    "7999069b": "Bump actions/cache from 3.0.8 to 3.0.9",
    "1c034069": "Use GitHub cache for CodeQL",
    "c97c1632": "Bump actions/cache from 3.0.7 to 3.0.8",
    "a14d04f2": "Bump actions/cache from 3.0.6 to 3.0.7",
    "c13307fb": "Bump actions/cache from 3.0.5 to 3.0.6",
    "31ecd2f8": "Bump actions/cache from 3.0.4 to 3.0.5",
    "09f5834c": "use setup-java v2 cache",
    "64253eb6": "Bump actions/cache from 2.1.5 to 2.1.6",
    "4a987de2": "Bump actions/cache from v2.1.4 to v2.1.5",
    "308ed889": "Bump actions/cache from v2 to v2.1.4",
    "6b85ebeb": "Add optimization to limited levenshtein distance",
    "61cbf0af": "WordUtils: use StringBuilder#append(CharSequence, int, int) were possible to improve performance"
  },
  "jackson-core": {
    "527fd82f": "use fastdoubleparser 0.9.0 and include its META-INF license and notice files (#1006)",
    "7c11ed00": "undo merge changes to fastdoubleparser license",
    "a21fe7bf": "Merge pull request #1005 from pjfanning/fastdouble-license",
    "d2608589": "Fix #967 (#973): BigDecimalParser performance for edge cases",
    "079a81b7": "Fix #967 (#973): BigDecimalParser performance for edge cases",
    "0b1a48c8": "osgi: add osgi.import value that excludes ch.randelshofer.fastdoubleparser (#957)",
    "35df70f0": "missing check of fast num parsing feature (#895)",
    "cb15c278": "support latest fastdoubleparser release 0.6.0 (#888)",
    "4983e030": "avoid instance creations in fast parser code (#886)",
    "725b3596": "Use shaded fastdoubleparser jar (#843)",
    "60e3f1a4": "change release note about fast double parsing (#836)",
    "3d7185d7": "improve performance with parsing bigints with lots of digits (#826)",
    "e95fee5b": "uptake latest fast double parser code (#806)",
    "84dd12aa": "fast float/double writer option (#749)",
    "c85fcd3e": "Add feature to enable fast double parsing (#747)",
    "159355ef": "add fast parser code from wrandelshofer/FastDoubleParser (#766)",
    "b6c54cf0": "More work for #488, now handling coercions to `double`, `float` better to avoid drastic performance issue as per suggestions by @wujimin",
    "9dcd38ba": "Minor performance improvent for `int`/`long` encoding in `NumberOutput`",
    "833de411": "JsonFactory optimization",
    "e22dbdb8": "improve JSON String value writing performance",
    "ad3a43eb": "Minor performance optimization that helps with untyped (Map) serialization, ObjectNode",
    "50ac8533": "Fixes to diagnostics, minor improvement to 2-quad hashing cache",
    "48b57265": "minor optimization of nextFieldName()",
    "ef860da5": "Undo one bad optimization for byte-based parser (-10% regression for one of the tests)",
    "8fc4243d": "minor optimization for name writing"
  },
  "k-9": {
    "73bf84662": "Change ContactRepository to allow nullable values to be cached",
    "90539b5e4": "Merge pull request #6655 from thundernest/add_cache",
    "4c648ecd7": "Add GitHub workflow to update the Gradle build cache",
    "ad43f3b88": "Merge pull request #6268 from thundernest/cache_fast_path",
    "034eac884": "Add fast path to `MessageListRepository` to bypass an empty cache",
    "207e9db88": "Add changelog entry for 5.905 to fastlane metadata structure",
    "d96641d7a": "Remove optimization to reduce the number of times a wakelock is acquired",
    "0554dfcd0": "Clear local message cache when UIDVALIDITY value changes",
    "925b24e63": "Merge pull request #4563 from Bubu/fastlane_icon",
    "2ef2b43db": "add app icon to fastlane structure",
    "959b022ee": "Enabling Web cache unconditionally",
    "f24cb76d9": "Improve accessibility, correctness and performance",
    "f610be227": "Add configured background color of fallback contact picture to cache key",
    "5e9dfa365": "Merge pull request #3520 from k9mail/fix_backend_manager_cache",
    "7d11244df": "Merge pull request #3508 from k9mail/contacts_cache",
    "4fe8c417a": "Add navigation drawer for faster folder switching",
    "4d9dc9f2e": "Merge pull request #3349 from k9mail/cache-decrypted-subjects",
    "929f91ab5": "Merge pull request #2170 from philipwhiuk/cacheTests",
    "97e9e3267": "make MessageCryptoHelper slightly more fail-fast in weird states",
    "8def88afc": "Merge pull request #1565 from k9mail/boundary_generator_optimization",
    "22e8f4ced": "don't cache decoded message over configurations",
    "08ef3d5ce": "clean up TextBody, make it slightly more failfast",
    "99f65f338": "compose: hand cached decryption result back to OpenKeychain",
    "e19fd5e5f": "experimental update to openpgp api for cached session keys",
    "ed628ae67": "make FileProviderDeferredFileOutputStream fail faster",
    "7cb6fa102": "stream performance optimizations",
    "8f4ac55d6": "don't rely on cached metadata from database for attachment info",
    "31f6deb47": "small performance optimizations",
    "4bd6f36eb": "Don't invalidate the options menu from the message list as we open a message. We also invalidate it (twice) as we show the message. It turns out to have measurable performance impact on 2.3 thanks to ABS",
    "75823b0e8": "Add IMAP provider info for fastmail.fm",
    "94b5758ee": "Use cache when marking message as read on view",
    "a364d6262": "Fix cache cleanup",
    "3b8421a9a": "Tweak animations to use the (Slightly slower) android default animation speed. Remove the fadeout to make things look a little less weird Make the animations slide in from the edge. (See the aforementioned comment about jankyness)",
    "d30cda26f": "Fix database version cache logic",
    "3799ecfb2": "Check message uids first when comparing messages. message uids are less likely to be the same than folders, so it's a slight optimization",
    "d5f739030": "Always save all headers. Not doing so is kind of a crazy space microoptimization and can get a little messy",
    "fb36389d2": "Create database in a transaction (for performance)",
    "028d07e59": "Revert 'Better explain what 'recreate an account' means and that it now resets' now that Dan has added a cache of these settings into the user's preferences database",
    "ed60cdfa5": "replace constant lookups of the MessagingController instance with a locally cached one",
    "db7649c9a": "move folderlist initialization into an asynctask, so it's not so slow to populate",
    "fa510f2da": "Turns out that UUID generation is expensive. deferring it until first access improves startup performance.",
    "d64d9c460": "Disable webview cache and javascript. (Mail + Javascript == scary)",
    "c5f7dbf02": "Execute LocalMessage.appendMessage() & LocalMessage.setFlag() in the same transaction for small message storing in order to speed up DB update. This is a per message basis optimization. More improved speed could be attained by batching several messages in the same transaction.",
    "c79ea226a": "Remove 'throws' declarations that didn't actually get thrown. Remove a couple of try blocks that only caught throws we didn't throw. IntelliJ optimization.",
    "43cef54ad": "We don't cache positive DNS lokups. We shouldn't cache negative DNS lookups either",
    "675651286": "Added the ability to completely wipe the localy cached messages of a syncced folder.",
    "43cb54594": "Push the webview's renderpriority from NORMAL to HIGH - it's cargo-cult performance improvement, but it certainly doesn't hurt",
    "d02ddda19": "When doing a message search, break it into 'first 10' and 'more' - because a long SQL query takes more time before starting to return results, K-9 was increasingly slow on large folders.",
    "e05784d41": "Running heavy operations on the UI thread makes K-9's UI slow and freezy. addOrUpdateMessages is very heavy. and very common.",
    "f1d413ce7": "Optimization: extracted populate() outside MessageInfoHolder in order to properly cache DateFormat (avoid useless DateFormat costly lookup at each population)",
    "8bb6eb146": "Optimizations: - Don't instantiate an empty Address array just to throw it away (less gabarge collection) - Use a StringBuilder rather than a StringBuffer (faster as it isn't synchronized)",
    "842a5ee12": "Update issue 2144 Use setSpan() instead of Html.fromHtml() Should clear cached name of contacts at MessageView#onClickSender().",
    "7bd8fc359": "When we sync messages and are displaying a messagelist, do the listview updates on the UI thread rather than the sync thread. This is a huge performance boost (based on simple empirical testing) for initial syncs as we now do more work as we add messages to message lists",
    "89dcc3646": "Database version bump to clear bogus cached attachments",
    "d4695636f": "It turns out that a big part of our perceptible message switching time was loading the 'loading...' file into the WebView. Since it doesn't take that long to load the real content, replacing the 'Loading...' file with 'blank the view' seems to actually feel a heck of a lot faster.",
    "19a06d39a": "With all the other performance work we've been doing, getting a message into the messagelist is now much, much faster. Intentionally loading the whole mailbox before we let the user interact with the list is increasingly painful. A 250 message mailbox takes 2+ seconds to 'unlock' on a modern phone.",
    "a75bf8668": "K-9 wasn't properly clearing the thumbnail/tmpfile cache. We now properly clear it up on start, which causes K-9 to leak less flash memory AND fixes the 'Wrong thumbnail' bug.",
    "2ee5b49cf": "When marking a message as read as we're opening it from the message list, don't 'bother' sorting the messagelist again before opening the message, it adds a _bit_ of slowness when we don't need it and we'll sort again when we get back to the message list.",
    "7464a1527": "Convert for loops to 'enhanced' syntax per SDK performance guidelines (Automatic with Eclipse)",
    "d3cc1fdfd": "Rather than doing a full count of all the unread messages in each and every folder for each message downloaded in a session, factor the 'unread messages' count out into the calling code. It's slightly less clean, but a pretty huge performance gain.",
    "ff62ae5c2": "Don't construct a listenerset clone if we don't need to. danapple++ suggested the optimization",
    "e22f3d2c1": "Provide user control over the account size measurement and search result counting that are displayed in the Accouts Activity. These can both be slow, so some users may opt-out.",
    "6fb59467b": "Changed SmtpTransport.writeLine() to only use one OutputStream.write() call. Apparently some servers got the 'be liberal in what you accept from others' part of the robustness principle wrong. When we used multiple calls in writeLine() (command + CR + LF) a separate TCP packet was send each time. It appears that those broken servers accepted the DATA command after DATA + CR and interpreted the LF as part of the actual data. This caused our headers to become part of the body because that LF was interpreted as the empty line that separates headers and body. As a side effect of this fix sending mail could be slightly faster now due to less packets being sent.",
    "d95705af4": "Speed up the page-flip animation now that we load message views so much faster.",
    "828576650": "Now that messageview is faster, don't start displaying the new message until _after_ we flip.",
    "462d4098e": "Removed debugging log messages that clutter and slow the runtime app",
    "91ad70cd5": "Killed a bunch of debug logging that clutters (and slows) production apps",
    "f94823cba": "Enable the new synchronous messagelist population. Perhaps counter-intuitive, but it's a whole lot faster",
    "dc543fa9e": "now that we have more messages coming out of the database faster, there's less use in special-casing the first 5",
    "48e1f31b4": "Revert commit 829 @gcode - it was a performance optimization which added nontrivial code complexity for what's now a nil performance gain",
    "34c111eb4": "Kill the no-op Welcome activity to improve startup performance",
    "a1302afe7": "Initial implementation of loading only 25 rows from the message list from SQLite at once. The hope is that this will improve perceived performance on large folders by starting message display sooner.",
    "647dc827d": "Replace MessageList's outdated message-passing mechanism with runOnUiThread for improved code clarity and performance.",
    "514b4cf12": "Fixes Issue 844 Definitely, some optimizations could be made",
    "fc9160342": "Major IMAP IDLE rework: 1) Actual message sync on MessagingController uses same connection as IDLE for faster and more efficient push operation. Uses fewer connections to the server.",
    "35ab566f4": "Cleanup of the LocalFolder perf optimization from last night.",
    "719f7dcd2": "Enable fast scroll from 'pick a folder' dialogs",
    "02e41e6da": "Minor perf optimization using addHeader() instead of setHeader()",
    "b7a846492": "Minor performance optimization",
    "d8724784d": ". Minor memory usage optimization of how we HTMLize plain text emails",
    "435e2c353": "Fixed issue 404: . Free up memory as we go in MessagingController.synchronizeMailboxSynchronous() . IMAP: We only do a partial fetch of the text body of large messages during background sync. This allow for faster syncs and avoid expensive parsing that lead to OutOfMemoryError",
    "42194562c": "Minor optimization to avoid the OutOfMemoryError we have been getting",
    "97a4f97b6": "Issue 234 Fix POP3 deletes. Verizon uses - in their POP3 UIDs, and K9 was assuming that only Local UIDs have -. Removed that assumption. Also, after issuing DELE on POP3 connection, need to also issue a QUIT. The delete code in MessagingController now closes the folder after deleting a message, which will slow down IMAP deletes, but also conserve connections, so is probably a net benefit.",
    "d20fbc09f": "Stop using a custom WebViewClient - it caused keybinding and url-opening bugs. If anything the new version feels a bit faster",
    "f2fa5ae2f": "FolderMessageList performance improvement from debauchedsloth++ (Partial application of his patch from Issue 285)",
    "2dda46925": "MessageView performance improvlements by debauchedsloth++ (This includes all changes from Issue 285's MessageView.java patch)",
    "65bbc7e68": "Improved synchronization timing and WakeLock algorithm. This new approach should guarantee that the syncing never stalls just because a single attempt exceeds the (currently 10 minute) WakeLock timeout. At the sync frequency, K-9 will wakeup again and refresh the WakeLock for another go at syncing. This should make synchronization much more reliable in the face of slow or unavailable connections, in particular ones which hit the socket read timeouts.",
    "d9dd06a62": "Make folder unread counters work properly with new faster delete and marking",
    "453406a5a": "Added change to populate the url for the mailbox each time authentication occurs (url is in the response). Updated initial message population to use reverse order so initial display has newest first (only noticeable on slow connections).",
    "8d3579fe7": "More performance improvements. Still get occasional connection errors with 50+ messages viewable due to timeout issues.",
    "852e51328": "Modified fetch() to call fetchEnvelope() which runs recursively, grabbing message ENVELOPEs 10 at a time rather than attempting all 100 at once. Shows a significant performance increase and a significant reduction in memory usage.",
    "5feb435b0": "removing that empty call to the heavy query helps performance even more."
  }
}
