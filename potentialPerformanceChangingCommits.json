{ "--": {
  "": ""
}, "99-problems": {
  "": ""
}, "ActionBarSherlock": {
  "36bc1f2": "Use the faster FloatMath!",
  "9979546": "Fail fast without a proper theme. Closes #222.",
  "3d9fd82": "Quick optimization.",
  "2acdf43": "Add fail-fast check for support action bar init.",
  "0c856d0": "Make interface static for optimization."
}, "ActiveAndroid": {
  "7d557f3": "Merge pull request #178 from harward/cache_is_initialized",
  "494fa08": "Switch to LruCache for entity cache.",
  "0da0e00": "Use SparseArray for better performance",
  "aa5d8d3": "Small optimizations. Migrations on create. Attached db.",
  "5a9dff8": "Speed optimizations.",
  "8257c87": "Added type serializers. Speed optimizations.",
  "7360c0f": "Speed/code optimizations."
}, "Activiti": {
  "e43d0dc0": "Enable cache for Maven repository",
  "94a42536": "Merge pull request #177 from Activiti/almerico-travis-cache-2849",
  "09a58c6c": "Merge pull request #102 from Activiti/almerico-travis-cache-2849",
  "aafdf5a5": "Merge pull request #72 from Activiti/almerico-travis-cache-2849",
  "75a2a683": "Merge pull request #140 from Activiti/almerico-travis-cache-2849",
  "d161cc70": "Merge pull request #133 from Activiti/almerico-travis-cache-2849",
  "6c8f13e9": "Update .travis.yml to use cached .m2",
  "198a6c08": "increase the waiting time, (just to wait enough also for slow machines)",
  "b40b9bae": "Merge branch 'm4ng0-orQuery-optimizations-new'",
  "c5b3ff61": "Merge branch 'hi-varinst-orQuery-optimization2' of https://github.com/m4ng0/Activiti",
  "52f6142e": "Switch == comparision to equals as per https://forums.activiti.org/content/parallel-gateway-problem-when-using-hazelcast-process-definition-cache",
  "b8fd0959": "Refactoring of DbSqlSession with some major changes: - The deleteOperations are no more. Now, the deleted objects are kept in a map, consistent with the inserted object. This removes the need for looping over all deleteOperations in quite a few places. - The ordering of executions before the insert/delete flush has been removed, the logic inserts/delete always in the correct order and there is no need for extra housekeeping anymore. - Flushing has become more consistent, for inserts/deletes/updates - No need for calling cache remove anymore",
  "192bc6be": "Throw exception if databaseType is not set when using MsMtProcessEngineConfiguration + added msmt enabled proc def cache",
  "934eaf48": "Fixing configJTA QA build: tests that boot up a new process engine fail, due to the XaDataSource already being registered. Made all the tests use the same, cached, process engine",
  "78aba739": "Removing AsyncExecutorQueueOverflowTest, as it slows down the engine test execution. Added a more elaborate test in a new project, dedicated to async executor testing: https://github.com/Activiti/activiti-async-executor-tests",
  "08049d98": "Fixes a bug in the DefaultAsyncExecutor when the job queue is full, which fixes performance stalling in high concurrency situations.",
  "b88e5f8a": "Add support for populating localization values into the DynamicBpmnService cache from activiti extension elements on deployment of a process definition.",
  "5a7b140c": "Db fixes for process definition info cache",
  "97146436": "Add definition info cache property to qa activiti.cfg.xml files",
  "b630ebb4": "Making entity manager interfaces consistent: removing duplicate methods (findById/getEntity/..) and make sure they pass the entity cache",
  "0461a49d": "Refactoring entity manager usage: making the entity manager instances engine-scoped instead of a Session implementation (ie command scoped). This way, all the previous Context.getXXX calls can be replaced by direct invocations. Won't influence performance that much, but still nicer from an architectural point of view.",
  "d7437025": "Refactoring EventSubscriptionEntityManagerImpl: use the getList that goes to the cache instead of use a local list (needed to make entityManager classes engine scoped, instead of command scoped.",
  "e49c06d4": "Enhancing getList() to use cached objects without needing to create an extra list internally.",
  "7d3c4cbd": "Addition CDI fixes. Made the ExecutionContext CDI only, which means that for non-CDI usage that thread local is not used (yay, microperformance).",
  "8a027c26": "use Collections.singletonList() for performance",
  "0a51d389": "- Fixing manual job execution (not 100% happy yet, should be done differently, but test work now) - Support for subclasses (eg Timer/Message > Job) when doing a getList on the cache",
  "6f4ff44e": "Improve cache lookup for historic activity instances",
  "9f596ddc": "Refactor ProcessDefinition cache usage: - removed BpmnModelCache, and made the BpmnModel part of the procesDefinitionCache - Introduced ProcessDefinitionUtil, which should be the basis for all things needed a Process definition (entity or BpmnModel counterpart)",
  "b3303b55": "- Added support for parallel gateway (+ simple test) - Introduced AbstractEntityManager as parent class for all EntityManager classes (and removed methods from AbstractManager) - Introduced new getList method on AbstractEntityManager, that replaces data from the db with data in the cache (which can be more up to date) for correcter results",
  "13ac6f53": "Introduced BpmnModel cache",
  "5ca5933d": "Fix for ACT-1900 RuntimeService.getVariables(String, Collection) fetches all variables from DB + various optimization when accessing variables. Docs will follow.",
  "b8184122": "Cleanup in bpmn cache cmd concurrency and db tests",
  "b45f4522": "Serialization support in order to use hazelcast as distributed cache.",
  "62eee7c4": "Fix race condition in DefaultDeploymentCache (see http://forums.activiti.org/content/race-hazard-defaultdeploymentcache)",
  "efdcdf99": "Removing distinct from task query to see impact on Jenkins (initiated by http://forums.activiti.org/content/activiti-sql-query-performance)",
  "694dcac8": "Optimize CdiTaskListener to get ProcessDefinition from cache and not execute an additional command.",
  "dda4815f": "Fixed ACT-1686: Using exists instead of inner-join (which is way faster than a distinct on the whole RES.* result set)",
  "24cddba6": "A little extra docs on the process definition cache.",
  "9743ec2e": "Added docs for deployment cache config",
  "542d1e8a": "ACT-1493: made some classes Serializable, as otherwise the process definitions are not storable in a distributed cache",
  "924b7a64": "ACT-1493: make deploymentcache pluggable + introduce cache limit",
  "ad3bf6b8": "Re-introducing caching now we found the culprit (overzealous caching in the ResourceActivitiTestCase, where it would add an in-memory H2 driven process engine, which would then be picked up by the PluggableActivitiTestCase). This makes running the tests again faster.",
  "2b90b1eb": "Trying to fix strange cache issue on QA",
  "ecb113ba": "ACT-1257 renaming beanStore to cachedVariables, preventing scoped associations from being used from activiti commands",
  "110e1a01": "ACT-714: Using concurrentHashmap to prevent concur-mod exceptions for cache of simple-names",
  "f5ba588e": "ACT-834 JavaDelegate instances should not be cached",
  "f3d0e2c4": "ACT-745: update user cache in case of user details changes",
  "4a2376de": "ACT-543: (coding before breakfast) added capturing initiator to KickStart because it makes the examples so much better",
  "4b778453": "ACT-543: (coding before breakfast) added capturing initiator to KickStart because it makes the examples so much better",
  "3972ebbf": "ACT:505: bugfix for process definition cache when using multiple process engines",
  "39005511": "Add maven test flag to prevent CI build from failing fast"
}, "actor-platform": {
  "170b5f0": "Merge branch 'adnroid/attach_menu_fast_share_as_bottom_sheet'",
  "56915b2": "feat(android): attach menu fast share as bottom sheet",
  "7998e64": "fix(server:group,rpc): reduce members load with GroupV2 optimization",
  "7320f36": "fix(android): drop group cache after delete",
  "623750c": "fix(server:groups): update drop cache",
  "05a9752": "fix(server: groups): seq optimization for new updates, remove service messages for inviter in channels",
  "97b6b9d": "fix(core): Fixing dropping chat cache",
  "f21d274": "feat(core+iOS): Drop cache update support, can view and join permissions, improvements on chat deletions",
  "19a658c": "perf(android): Micro optimizations of Android for slow devices",
  "acc596d": "fix(android): faster gallery scanner",
  "9d4d7e6": "feat(android): set fast thumb for downloaded animations",
  "c82ffd8": "fix(core): RequestLoadGroupedDialogs with optimizations - fixes dying ApiBroker",
  "6295dd9": "fix(server:push): google push stream optimization",
  "6eb7202": "fix(server:push): google push stream optimization",
  "e64cf93": "feat(server:group): GroupFull and STRIP_ENTITIES group optimizations",
  "39b962d": "wip(core+android): Bunch of micro optimizations, starting to implement async SDK initialization.",
  "853b68d": "perf(core+android): Bunch of micro optimizations",
  "a73268a": "perf(core+android): Bunch of micro optimizations",
  "75d0247": "fix(core): findUsers working with optimizations",
  "3894939": "fix(scheme): Adding optimizations to load grouped dialogs method",
  "3783db4": "perf(server:messaging): faster messaging using forward instead of ask",
  "d6cf33a": "perf(server:messaging): faster DialogRootState",
  "3b7c771": "feat(scheme): Adding GROUPS_V2 optimization",
  "b440871": "feat(scheme): Adding optimizations to Contacts Import/Load",
  "eebf85a": "feat(scheme): Adding COMPACT_USERS optimizations",
  "3ae2ad7": "design(android): new round checkbox for fast share",
  "55e59a8": "ref(core): Remove unsued conversation vm cache",
  "68e157d": "fix(android): fast share media permission on M",
  "94c2abd": "Merge pull request #440 from actorapp/android/recover_fast_share",
  "5c760a3": "fix(android): recover + optimize fast share, disable by default",
  "247d809": "perf(android): Temporary disable fast picker, disabled custom layouting",
  "1d20f41": "fix(android): Fixing compilation error, faster chat loading",
  "ec79fdf": "feat(android): fast share menu send",
  "2ed3f4c": "feat(android): add fast share menu",
  "25a1e43": "perf(iOS): Multiple small chat performance optimizations",
  "4d3a525": "perf(core+ios): iOS Loading performance, Download Manager performance",
  "be8b166": "perf+fix(core+ios): Performance optimizations and bug fixing",
  "87a1c9f": "fix(server:session,server:raw): don't cache big responses; raw services no longer require auth",
  "7039017": "perf(iOS): Various performance optimizations",
  "eef8e61": "feat(iOS): Avatar Binding performance",
  "50ebc3c": "perf(iOS): Dialog List performance and Managed Table bugfixes",
  "db4e3a6": "perf(iOS): Fixed row tables performance optimizations",
  "eeff54c": "fix(iOS): Fixing Managed Tables performance",
  "11a9743": "perf(iOS): More text rendering performance optimizations",
  "e1129cb": "Merge branch 'android/call_performance'",
  "9d32f89": "fix(android) calls performance",
  "023082b": "perf(core): Precached Kuznechik encryption tables",
  "67bdcd1": "perf(core): Precached Kuznechik encryption tables",
  "cd5428b": "feat(webrtc): Codec parameters optimization",
  "a015698": "feat(core): Strip entities optimization support",
  "ff65c4a": "feat(core): New kuznechik fast engine",
  "8aa4181": "refactor(server:sequence): move optimization logic to private methods",
  "d6e2ac6": "feat+perf(server:sequence): STRIP_ENTITIES difference optimization",
  "ba64be0": "feat(scheme): Adding difference performance optimizations",
  "4ea366a": "fix(server:sequence): temporary disable push reduce optimization (incompatible with clients)",
  "600d0de": "perf(server): much faster user accessHash checking",
  "2c286a6": "perf(server:frontend): fixed performance problem of kuznechik",
  "666759b": "feat(runtime): Kuznechik encryption optimization",
  "4703dcb": "fix(server:frontend): fixed connection hangup for slow clients",
  "ed01b3d": "fix(android): stickers send fast thumb",
  "0627f9c": "wip(core): Stashing book import optimizations",
  "571e691": "feat(android): stickers use fast thumb",
  "d792523": "chore(circle): Enabling cache for dist directory",
  "f9679ec": "perf(server:sequence): faster migration",
  "73af0e8": "fix(js): Revert list optimizations",
  "9f7edfc": "perf(web): Improve list performance",
  "d47687c": "perf(server:auth): faster ContactRegistered logic",
  "f52911f": "perf(server:messaging): faster grouped dialogs",
  "342ebdc": "feat(web): rename fast switch and add styles to it",
  "1523fa6": "feat(web): fast switcher search in contacts and add suggestion to create dialog if nothing found.",
  "00f0169": "feat(web): use classname for active element in the fast switcher results list",
  "9848c8a": "fix+refactor(web): fix focus on fast switcher input, rename some functions.",
  "09a13a9": "feat(web): make search work in fastswitch component and add styles for it.",
  "198bdcb": "feat(web): add fast switcher component.",
  "95ec607": "fix(sdk): Fixing styles, fixing minded cells, faster build",
  "2df58d7": "fix(server): fast hack to wrong concurrent modifications",
  "ddd7a17": "fix(web): leave emoji dropdown in DOM for faster showing",
  "40e2e83": "chore(web): enable js optimizations",
  "9b4688c": "chore(web): faster lib compile in gulp dev",
  "c224cfa": "feat(iOS): Enable swift optimizations",
  "1a3034a": "feat(iOS): Enable swift optimizations",
  "56d57a8": "chore(iOS): Disabled optimizations",
  "8178039": "perf(web): faster dialog switching",
  "2646c6d": "perf(iOS): Enabled compilation optimization",
  "bba7c47": "fix(server:build): bring back cached resolution",
  "d642298": "perf(iOS): Avatar optimizations",
  "9bd0ea4": "perf(iOS): Struct optimizations",
  "7c6ce5d": "feat(iOS): Enabled swif optimization, introduction of parameters in j2objc, various internal optimizations in core and iOS",
  "700a25b": "feat(core): Optimize get difference performance",
  "f434cad": "chore(server): upgrde sbt to 0.13.9 and enable cachedResolution",
  "138c88a": "Revert 'perf(server): more optimization by using plain sql'",
  "a201ad3": "Revert 'perf(server): history query optimization'",
  "65a782a": "perf(server): more optimization by using plain sql",
  "9b4b613": "perf(server): history query optimization",
  "30c8657": "fix(iOS): Multiple list optimizations",
  "cd9282a": "fix(server): cache send results in GroupOffice",
  "8525747": "fix(web): disable appcache manifest generation and disable track web sockets by pace.",
  "36d6217": "fix(web): remove appcache manifest from html, fix login page z-index;",
  "7607813": "fix-chore+refactor(web): enable inline source maps for dev, disable appcache.",
  "e8a8018": "chore(web): exclude .map files from appcache;",
  "14bfdbc": "Merge branch 'feature/application_cache' into web/develop",
  "c32c5bb": "feat(web): check appcache for updates every 10 minutes;",
  "9b3da17": "feat+chore(web): remove .htaccess, implement AppCache class for check application cache updates;",
  "5357527": "feat+chore(web): enable application cache, generate cache manifest.",
  "220367a": "perf(server): optimizations on history-related queries",
  "07dc048": "fix(server): changed MessageRead and MessageReceived optimization condition",
  "56a481a": "feat(server:peer-managers): use group members cache for operations",
  "25c32ac": "fix(server): fixed slow files uploading",
  "a8717a9": "feat(iOS): iPad optimizations",
  "84d7a03": "wip(iOS): caching layout, speed up messages list scrolling, better optimizations for iPad.",
  "291b1da": "fix(messaging): invalidate cache for request completed with an error",
  "e2e4b2a": "fix(rpc): cache responses",
  "092c566": "wip(js): Improving file loading performance",
  "bcb1b21": "fix(js): Fixing url cache",
  "76a2b7e": "Merge pull request #48 from actorapp/feature/rpc-cache",
  "b789466": "feat(rpc): basic cache implementation for message sending",
  "df75391": "chore(build): add utils cache subproject",
  "5a1dfb7": "perf(common+js): Performance optimizations",
  "2de5ab1": "fix(web): disable appcache because it causes some charset issues with russian locale",
  "c37f0eb": "fix(web): removed meta charset utf8 because if breaks appcache",
  "043673c": "chore(web): Rename mainfest file to 'app.appcache'",
  "dd84cd9": "perf(web): way faster messages rendering",
  "9217f67": "perf(web): some optimizations on messages rendering",
  "d81da90": "perf(web): fasten messages rendering",
  "739fdbd": "feat(common): Serialization optimizations",
  "543eb2e": "perf(web): some messages scroll optimizations",
  "1d9ab54": "perf(web): faster messages rendering using lazy messages loading",
  "97370ab": "chore(web): faster browserify using watchify",
  "7e74b23": "feat(web): Enabled optimizations for js",
  "1db3a1a": "feat(dashboard): departments tests, move json implicits from controllers to separate classes, test code optimizations",
  "01dee93": "fix(dashboard): optimized imports, only token check in auth action, tests optimizations, .gitignore remove unnecessary entries, rename migration files to convention V<YYMMddHHmm>_<change>.sql, routes fix",
  "96aed4a": "Revert 'chore(build): add sbt cached resolution to build'",
  "07f9078": "chore(build): add sbt cached resolution to build",
  "70094cd": "feat(iOS): SplitView size optimizations",
  "cd28b86": "design(android): Dark design improvements, rendering speed optimizations",
  "8c2e19d": "chore(*): added .ensime_cache to .gitignore"
}, "Aegis": {
  "9c5726c": "Use glide to load and cache icons",
  "a540b3c": "Add icon to fastlane metadata",
  "9fabd7f": "Prepare fastlane structure for F-Droid"
}, "aeron": {
  "217ee0c7": "[C] Group fields for better cache locality in common usage.",
  "67a198fa": "[Java] Group hot fields for better cache locality.",
  "632694fb": "[Java] Group hot fields for better cache locality.",
  "15c94412": "[C] Increase timeout for the slow tests to 1 hour.",
  "1292cb62": "[Java] Reduce time taken for elections for faster leader hand over during hot deploy.",
  "8577919f": "[Java] Send OK response after it is appended to the log rather than waiting for the next slow tick cycle. Issue #1351.",
  "34aee089": "[CI] Enable GCC 12 for the slow build.",
  "9cbac4cf": "[CI] Enable GCC 12 for the fast build.",
  "a86ddc58": "[Java] Make all the service message tests slow tests and increase timeout to 30 seconds.",
  "1187c485": "[CMake] Try disabling -Ofast specifically for Clang 9.",
  "9fdc1bd7": "[CMake] Try disabling -Ofast to determine build error.",
  "c076d3f4": "[Java] Increase timeout for the slow test + decrease the one for the fast test.",
  "e2bd96ea": "[Java]: Update name resolver cache entry if address changes.",
  "ae7db614": "[Java] Enable high performance event timers on Windows for raw tests.",
  "ab1a2480": "[C] Add cacheline padding to duty cycle tracker.",
  "1d4959b1": "[Java] Simplify use of cluster clock in slow tick work.",
  "66fc409c": "[C] Correct uses of cached clock.",
  "bd8c718d": "[Java] Fix slow tests broken by changes to RecordingLog. Add more explicit tests for no operations on sorting of recording logs.",
  "3bfb78a5": "[C++] Reduce cache traffic when polling recording signals with adapter.",
  "8730f305": "[Java] Reduce cache traffic when polling recording signals with adapter.",
  "6fa381b4": "[C++] Reduce cache traffic when polling and make polling operations consistent in the archive client.",
  "d38a2e5b": "[Java] Reduce cache traffic when polling channels plus make them consistent.",
  "d06cac0b": "[Java] Fix error in slow tests and tweak error log reporting.",
  "fa2b8b5b": "[C] Enable C driver in slow tests. (#1217)",
  "94c076f7": "[CI] Add slow tests build using Clang.",
  "99680930": "[Java] Make `AsyncResourceTest.shouldDetectUnknownHost` a slow test and increase wait timeout, because the test depends on the failing DNS resolution that can take arbitrary long time.",
  "748ab692": "[Java] Fail fast on trying to replicate to an already active recording.",
  "c4ade94b": "[CI] Add Clang sanitise build to the slow tests build.",
  "a395e8e5": "[C++] Add `-fno-omit-frame-pointer -g -O2` to the sanitise build, i.e. improve stacktrace quality and ensure enough optimizations are done to offset the overhead of sanitizers.",
  "61d92d5c": "[Java] Mark some slow tests.",
  "0b9c17e9": "[Java] Reduce fences and cache traffic in fast path of Cubic congestion control.",
  "7f1aff39": "[Java] Organise data to be more cache friendly.",
  "41a9fb40": "[CI] Add manual trigger for the slow tests build.",
  "67604263": "[C] Correct message for enabling slow system tests.",
  "bd58581a": "[C] Use deadlines and cached clock in name resolver to simplify checks and make code more efficient.",
  "e9a5e29b": "[C++] Use MMAP_POPULATE for faster prefaulting on Linux (#1127)",
  "d29ae07f": "[C] Add slow tests to sanitise build.",
  "2a31d18e": "GCC 10 slow test does not need to be a sanitise build.",
  "3e1bf5e9": "[C] Provide sender and receiver their own cached clocks so heartbeats and status messages can clocked even when driver conductor takes an unexpected pause.",
  "7305dd0a": "[Java] Provide each of the receiver and sender their own cached nano clock so that heartbeats and status messages can be clock even if the conductor takes an unexpected pause.",
  "ecf46846": "[Java] Decouple use of conductor cached clock from publications and images.",
  "67b2bd28": "[C] Update loss report with un-cached clock.",
  "147b0110": "[Java] Record loss with un-cached clock.",
  "2daa6097": "[Java] Check for low storage space errors from archive in slow tick cycle.",
  "60e977d6": "[Java] Use deadlines rather than time of last values to simplify fast path code and fix issue with cluster markfile being updated too frequently.",
  "fea34710": "[Java] Increase cluster termination timeout in StartFromTruncatedRecordingLogTest to allow for slow CI.",
  "68d1f904": "[Java] Avoid possible allocation using integer cache.",
  "8f7c599f": "[Java] No need to send catchup position once the replay log has been joined, plus reduce the branching in the fast path for replay and transitions.",
  "0ed15d45": "[Java] Pulse out append position when catching up but stalled due to a slow service. This helps maintain quorum in the cluster if the catching up follower is required.",
  "70a5a5d0": "[C] Remove the indirection when freeing the cached clock and fix naming.",
  "2f9317a9": "[C/C++] Small performance improvement. Statically link examples corr… (#1104)",
  "9811928d": "[C++] Improve Throughput sample performance and error reporting.",
  "2b24d400": "[Java] Use RethrowingErrorHandler for subscribers in Archive and ConsensusModule which can provide for faster abort or throwing an AgentTerminationException.",
  "42b8add4": "[Java] Use RethrowingErrorHandler for subscribers in ClusteredServiceContainer which can provide for faster abort or throwing an AgentTerminationException.",
  "0e05bb91": "[Java] Change Java 14 to 15 for slowTests in CI.",
  "76dca5fc": "[C++] Account for looping retry of load operation in AtomicArrayUpdater with fences plus move the array out of the padded block in Subscription to avoid unnecessary cache misses.",
  "c8310187": "[Java] Schedule status messages with ordered write rather than volatile write to improve performance.",
  "5dc50fd5": "[Java] Check for archive error except when in slow tick and dynamic join and abort duty cycle except when election can be re-initialised.",
  "e2716eac": "[Java] Generate new tags for log subscriptions for each usage and handle error from the archive during slowTick when an election is in progress.",
  "4dc4f6ab": "[Java] Run slow tests on Windows.",
  "664b5486": "[C] Enable `--c-warnings-as-errors --cxx-warnings-as-errors` for slow tests + copy crash logs from native builds.",
  "252912ce": "[C] Move clock cache structure to header and use it inline in tests.",
  "68047d95": "[C] Use cached clock in counters manager.",
  "a289e16e": "[Java] Use cachedEpochClock for counters manger.",
  "24753af9": "[C] Change approach to cache-line alignment of buffers in driver name resolver.",
  "e4ffb122": "[C] Only update active transport count when change to avoid unnecessary cache invalidations.",
  "e2dabc35": "[Java] Fix wrap condition on active transport connection liveness test and only update on change to avoid cache invalidation.",
  "d8940c44": "[C] Formatting, includes, and padding on cached clocks.",
  "0e9555c7": "[Java] Reduce footprint for MultiRcvDestination and use cached clock for activity time on sending and not the non-cached clock.",
  "2fc6c250": "[Java] Switch to actions/cache@v2.",
  "381c0b22": "[C] Add slow systems tests support to Windows build.",
  "91c20f87": "[C] Align Gradle invocation from CMake script and fix slow tests cleanup.",
  "fd442015": "[Java] No need to recreate RecordingLog in ClusterBackupAgent and extract slow tick work and do on 10ms cycle.",
  "dd06aebc": "[Java] Reduce default max file IO operation length in the archive to improve performance.",
  "86db47e5": "[Java] Correct timeout calculation on receiver side for name resolution and use cached clocks explicitly.",
  "6133f39a": "[Java] Check timeouts in client after sending a command for fast catch of unblock.",
  "aa5fe568": "[C] publication_image_test, java_system_tests_c_media_driver and java_slow_system_tests_c_media_driver can only be running in serial. (#925)",
  "0ad78851": "[C] Enable sanitise build for slow system tests.",
  "61c36ff1": "[C++] Use GCC version 10 for slow tests",
  "2e784ae1": "[C]: cache and re-use log buffer mappings.",
  "ddf46156": "[C] Configure slow system tests against the C media driver and enable as part of low cadence CI run.",
  "b6079d78": "[Java] Clarify use for time of last slow tick in consensus module.",
  "cfeabad8": "[Java]: Add re-resolution check interval config. Which can also turn off re-resolution now when set to 0. Redo update of cache entry address/port to keep its own copy and guard by change detection. Javadoc for new configs. Clean up some tests.",
  "28395dc3": "[Java]: change asserts on cache entries into awaits to avoid race..",
  "db495fa4": "[Java]: remove update of addr/port in cache. Add TestMediaDriver and unsported on C.",
  "7405cd3d": "[Java]: add basic timeout test. Make sure that address and port are updated in the cache.",
  "1f9d101c": "[Java]: add driver name to cache entries counter label.",
  "e2e38515": "[C] Remove TODOs as code is sufficient for cached clock.",
  "65a2a7db": "[Java] Add upload of the crash logs for the slow tests",
  "3a6d130d": "Revert '[Java] Experimental commit to see if using sleep as opposed to yield improves CI slow tests.'",
  "f196d3a2": "[Java] Experimental commit to see if using sleep as opposed to yield improves CI slow tests.",
  "23fe341a": "[Java] Allow slow tests to be triggered by a repository dispatch event.",
  "1886533c": "[Java] Mark TaggedMulticastFlowControlTest as a slow test.",
  "86dcdf9c": "[Java] Mark as slow test.",
  "ab3e8cb5": "[Java] Only run the slow tests on Linux, move to 12 hourly cadence.",
  "20861e85": "[Java] Move slow tests to lower cadence job.",
  "104b2083": "[Java] Rename slow tests build, use jdk 8.",
  "4b9e750b": "[Java] Add slow test build target (linux, jdk11 only).",
  "39e4e773": "Merge pull request #825 from mikeb01/use-slow-tests",
  "4b3f51b4": "[Java] Add aeron-test-support module. Add @SlowTest annotation to make tests that take a long time. Filter our the main tests to exclude the 'slow' tag. Add separate gradle tasks for slow tests. Convert most of the @Disabled to @SlowTest.",
  "770e79a3": "[Java] Optimise the snapshot restore to use direct indexing into the entryCache. Ensure that removeEntry (testing only) restores to the correct state by reloading all of the caches. Inefficient, but not called from production code.",
  "530bff06": "[Java] In RecordingLog, hold a cache of invalidated snapshots and when calling appendSnapshot scan for matching entries and if the new snapshot matches the appropriate fields then restore the snapshot previously marked with a tombstone.",
  "4f1a92d3": "[Java] Change RecordingLog to retain entries that are marked with a tombstone so that they may be made valid later. Uses the top bit of the entry type field to indicate the tombstone and preserve the entry type. Term fields marked with a tombstone are removed from the cache. Bump minor version on ClusterMarkFile.",
  "0e22f529": "[Java] Separate Gradle wrapper and dependency caches",
  "fa94a249": "Merge pull request #800 from mikeb01/cached-clocks-3",
  "7f259a03": "[Java] Use ExclusivePublication explicitly in fast path for enable better optimisations.",
  "88a89faa": "[C] Free the cached clock.",
  "49a2903b": "[C] Use the cached clock in more places through the conductor and publications.",
  "fa636470": "[C] Explicit test for the update of the cached clock.",
  "f997f9e2": "[C] Use cached clocks from all of the appropriate places. Remove unused epoch and nano clocks.",
  "a220d477": "[C] Add clock cache and update from the conductor thread.",
  "b1540017": "[C] Reduce the cache line padding in driver to save memory as the latest processors do not be some impacted by adjacent cache line pre-fetching.",
  "bda7f35d": "[Java] Don't linger replay publications for follower catchup to allow for faster reuse of what would be a clashing subscription and to free resources sooner. This is safe due to live endpoint being added.",
  "52aea1d0": "[C++] Perform faster checks first in HeartbeatTimestamp.h.",
  "00a9f0ca": "[Java] Improve the performance of getting the position in a fragment headers.",
  "85da196a": "[Java] Use cached clocks in archive sessions.",
  "9f288827": "[Java] Add keep alive request to archive session which initially can be used to activate the session. Could be used in future for session liveness over time. Plus use cache epoch clock in session.",
  "7af8c70f": "[Java] Allow for agent logging tests to be run without forking for faster tests.",
  "7f3652d2": "[Java] Used cached clock classes rather than clock interfaces in publications and images in the driver to avoid virtual calls.",
  "c07ac5d8": "[Java] Network buffers only need alignment to cachelines.",
  "d3ded6bf": "[Java] Network buffers for pollers only need to be cache line aligned given they are now max size for UDP packets.",
  "c08fe5d3": "[Java] Reduce cache line padding to prevent false sharing as more recent CPUs do not prefetch so aggressively with with adjacent cacheline prefetcher.",
  "26995b83": "[C++] Fix spelling and reduce cache line padding.",
  "f9a9a640": "[C++]: add reset of subscription and counter caches to onClose for #717.",
  "ac7a644e": "[C++] Reduce update rate on m_timeOfLastDoWorkMs to help reduce cache invalidation.",
  "58264d6b": "[C]: allow images to transition out of linger faster if no subscribables present.",
  "48fb6635": "[Java] Update scripts to consider Java 11 for performance.",
  "9af032b1": "[Java] Do faster division by 2 in code that will not get jitted.",
  "07578f64": "[C++] Swap unordered_map for map when managing resources for faster lookup.",
  "a951db8b": "[Java] Added configurable idle strategies to performance samples.",
  "b39b54a8": "[Java] Use Parallel Old GC for faster builds on Java 11.",
  "10635e01": "[Java] Move checking of termination position to slow tick cycle.",
  "60498cfc": "[Java] Move checking of leader heartbeat to slow tick duty cycle and only enter election when in active state.",
  "0623c4b5": "[Java] Enable build cache.",
  "880ff66a": "[Java] Small build performance improvement and use scan only as build option so question is not asked each time.",
  "3179e128": "[Java] Use static method when instance state is not required and cache field lookup when a volatile read prevents optimisation.",
  "37f71c5c": "[Java] Minor performance refinements to SubscriptionLink.",
  "a74535b6": "[Java] Fix test so it does not wait on a starved out 'fast' consumer who is not preferred and remove ignored test.",
  "11a30c12": "[Java] Change InterfaceSearchAddress to avoid the use of regex and do its own parsing which is faster and reduces allocation.",
  "08399bf4": "[C] Fix missing update of head cache.",
  "168f5c9a": "[Java]: make cluster termination timeout configurable. Test for termination on slow tick.",
  "3a84cb6e": "[Java] Rework archive replay to not use memory mapped files so reads can be batched for major performance improvement in throughput and latency.",
  "761c89a5": "[Java] Simplify archive performance tests.",
  "3a726fef": "[C++] Add option to enable Ofast in release builds.",
  "a575b976": "[Java] Improve performance of replay and avoid biased locking revocation when dedicated threading mode is used in archive. This is a the first of a number of steps to improve replay performance.",
  "78306a06": "[Java] Modify flow control test for change in behaviour due to slow consumer and formatting.",
  "b445bd81": "[Java] Consistent padding to 2 cachelines and avoid use of magic numbers.",
  "c4bd7c2e": "[Java] Reduce sleep time for faster reacting test.",
  "674295fe": "[Java] Add java.net.preferIPv4Stack=true to samples config for increased performance.",
  "2cf5ec7a": "[Java] Move archive client response stream to a different stream id to avoid clash and throttling effect which caused this slow down on issue #565.",
  "ab64edf9": "[Java] Use cached clock for lastActivity on redirected sessions.",
  "9c803984": "[Java] Move timer processing for slow tick to fast tick for processing higher volumes of timers.",
  "4359bf3e": "[Java] Replace cached clock with a simple field in the sequencer.",
  "86e5f5f3": "[Java] Track missed timer cancellations in replay that have yet to be schedule by a slow follower service and apply them when possible.",
  "ca34b57f": "[Java] Small tweak to all of faster join of the log between sequencer and service.",
  "c3f4cc33": "[Java] Move checking for new active log to the slow tick cycle.",
  "6273a342": "[Java] Move polling of service control to the slow tick cycle.",
  "0b7cea36": "[Java] Move service control polling out of slow tick cycle.",
  "76d7a57f": "[Java] Use cached clock when taking snapshot.",
  "61242be5": "[Java] Invoke client conductor on slow tick in archive duty cycle.",
  "0c95d3c2": "[Java]: set initial value of cached clocks so that any pending commands on startup of driver don't use 0 clock values.... like client liveness. Rework test so that timing of initial message to the network image is more coordinated.",
  "86861481": "[Java] Consistent use of fastUnorderedRemove.",
  "92693e26": "[Java] Remove cached clock from consensus module context.",
  "9e1c76be": "[Java] Remove cached clock from consensus module context.",
  "81c0db96": "[Java] Apply cached epoch clock in archive.",
  "6eefcfc5": "[Java] Keep archive session open in sequencer and check for errors on slow tick cycle.",
  "e7f5e08e": "[Java] Extract slow tick cycle from sequencer duty cycle.",
  "7025746c": "[Java] Move the reading of timer scheduled events to the slow tick rather than the fast tick in the scheduler.",
  "ec81ff44": "[Java] Use the original recordingSummary.startPosition when extending a recording rather then the cached one which could have been updated since the request to extend, and change error messages to the same format as recording subscription keys.",
  "ed3901f3": "[Java] Use cached clocks in the media driver so the system takes less timestamps. The cached clocks are update once per millisecond if the conductor can keep up.",
  "295c562a": "[Java] Separate fast and slow operations in sequencer work loop.",
  "b938ca8f": "[Java] Update cached clock with log timestamp to be consistent.",
  "e599854d": "[Java] Increase test timeout values for slower machines.",
  "137ab880": "[Java] Avoid writing to the archive catalog and dirtying the page cache when listing recording descriptors.",
  "caf6e081": "[Java] Use cached epoch clock which is updated once per duty cycle in cluster sequencer.",
  "55f6877e": "[Java] Address performance regression related to PR #422 plus correctly handling tryClaim and the use of BufferClaim objects.",
  "74c49f12": "[C]: update unblock logic to align with Java. Modify is_connected logic to be faster. Add spies.simulate.connection env variable and config.",
  "58e770a0": "[Java]: cache producer position.",
  "fc28df84": "[Java] Reduce cache traffic tracking connected state of network publications.",
  "1d7a44b6": "[Java] Increase default gradle build cache size.",
  "03f17eeb": "[Java] Add vectored exclusive ipc sample to test performance.",
  "43f7bb64": "[C++]: tweaks for optimizations.",
  "4db22582": "[C++]: optimizations.",
  "4f9e01a3": "[Java] Do not cache clock values for now.",
  "49573dff": "[Java] Improve slow offer code in recording load test.",
  "b5ff54a3": "[Java] Reorder conditions for performance.",
  "3b01dc4d": "[C++]: add Subscription::controlledPoll for #382. Used Java method of looping in polls so counted loop optimizations could be leveraged.",
  "bb57cdc3": "[Java] Don't force catalog unless settings indicate it is required to allow for faster CI.",
  "fa6fd904": "[Java] Do the faster check first when matching subscriptions to fail fast and move on.",
  "a8c6b94b": "[Java] Reuse direct ByteBuffer across ListRecordingSessions To avoid allocation and keep the cache hot. Control responses should happen from the same thread.",
  "e1adbaea": "[C++]: rely on compiler optimization of modulo PARTITION_COUNT.",
  "5532206b": "[Java] Cache SO rcv buffer length to faster validation AND to avoid biased lock inflation when socket options are read from another thread.",
  "213d2692": "[C]: optimizations",
  "ed11c500": "[C++]: optimizations.",
  "e3ef0702": "[Java] Reduce duplicate work in exclusive publication and term appender to increase performance.",
  "6f2e9fdb": "[Java] Avoid the atomic instruction for incrementing the tail with exclusive publication for first performance boost.",
  "248ca766": "[Java] Reorder checks for faster discrimination.",
  "04646ce4": "[Java] Only update direct publication counters for tracking limits when necessary to reduce cache traffic.",
  "82b1608e": "[Java] Organise fields by agent usage for cache locality.",
  "69e6041d": "[Java] Perform a conditional write on loss detection to reduce cache traffic when nothing has moved.",
  "055d68f9": "[Java] Increase false sharing padding to allow for the adjacent cache line prefetcher.",
  "99ebefd9": "[Java] Place the active partition index in the same cache line as the tail counters within the log.",
  "6bb00ba4": "[Java] Pull out NetworkPublication SM and HEARTBEAT buffers and flyweights into thread locals for reuse to save memory and cache misses for high numbers of connections.",
  "d9551d8f": "[Java] Allocated SM and NAK buffer and flyweights as static in ReceiveChannelEndpoint to save on memory usages, cache misses, and connection setup time.",
  "d9aea57c": "[Java] Pull out receive buffers and flyweights from channel endpoints to transport pollers so that buffers can be reused to reduce memory footprint and cache misses.",
  "8129d62d": "[Java] Align channel transport receive ByteBuffer to be cache line length times 2 to enable better copy performance and avoid false sharing including the MLC prefetcher.",
  "4592a3bc": "[C++]: use -j arg to make for faster compiles.",
  "30a4e3e5": "[Java] Remove coupling of ClientProxy to RawLog and transmit event to client before logging for faster connection setup.",
  "0ceb1542": "[Java] Use loop rather than lambda to improve connection start performance.",
  "0a8ea061": "[Java]: Clarify the primary goal of Aeron being performance on the readme.",
  "3f74a7f8": "[C++]: fix layout of ManyToOneRingBuffer to account for head cache.",
  "de9a06d7": "[Java]: Reorder fields for cache locality.",
  "90ef2e27": "[Java]: Take the NOT_CONNECT check out of the fast path for the Publication offer.",
  "98392c6b": "[Java]: attempt to reduce cache missing on limit update",
  "9f8eea80": "[Java]: Set new log length when creating file to make the creation faster.",
  "68c5310a": "[Java]: Reorder liveness checks of faster detection of dead clients.",
  "66ebbe81": "[Java]: Allow reference equality checks in DataPacketDispatcher for performance and clarity.",
  "b1478ae5": "[C++]: manually use fastMod3 for indexBy functions. Add DISABLE_BOUNDS_CHECKS define for turning off boundsCheck in AtomicBuffer. Added DISABLE_BOUNDS_CHECKS to Release builds.",
  "5cc736b8": "[Java]: Don't rely on escape analysis to be GC free when iterating publication links and allow for faster iteration in the common case.",
  "993bcc90": "Add throughput test for jenkins' post-build performance testing",
  "25c48bd4": "[Java]: Move connection inactivity checking to the receiver so reduce cache traffic due to timeOfLastPacket.",
  "046256b1": "[Java] Register cache common used field.",
  "c82ecb66": "Changed rate controller iterations to be a long to match with PubSubOptions. Added support for subscriber-side rate control to SubscriberTool to allow simulation of slow receivers. Fixed a bug in PublisherTool that threw an exception if more threads than channels were specified. Added support for the --iterations option to PublisherTool and SubscriberTool.",
  "0318b328": "[Java]: Added EmbeddedThroughput performance test that is useful to full system profiling in a single process.",
  "abebc3d3": "[Java] Improve performance of term rotation code.",
  "7fbde426": "[Java]: added ClosedByInterruptException handling and reworked some paths for optimization.",
  "c861efd5": "[Java] Inline simple method that would not have been in the fast path.",
  "684aabd8": "[Java]: Avoid branch mis-prediction on frames being available and keep the code cache warm.",
  "b8c84f0a": "[Java] Make NioSelector construction faster and allow speculation rather than a data dependent load on the fast path for select.",
  "688932ad": "[Java] Reordered code to removed IDE warning and respect instruction cache.",
  "9447ad88": "[Java:] Move log buffer status field onto its own cacheline.",
  "85bc974d": "[Java:] Use the faster discriminator first.",
  "6861029b": "[Java]: Tidy up sequence to offset calculation in fast flow queue.",
  "b8b7bbb1": "[Java]: Introduced fast flow queue implementation for one-to-one queue needs within the media driver."
}, "afinal": {
  "640d0a2": "use hasmap for SoftMemoryCacheImpl cache",
  "9ea7f9a": "fix bug : clear cache can not load bitmap (must restart app)"
}, "AgentWeb": {
  "3d5f804": "refactor(download): update sample,optimization download",
  "b43c977": "refactor(download): update sample,optimization download",
  "87e71b6": "docs(README.md): update README.md for clean agentweb cache.",
  "7466847": "docs(README.md): update README.md for clean agentweb cache.",
  "30703a5": "optimization"
}, "agera": {
  "3b1697c": "Tidied up BaseObservable and improved performance (#59)",
  "5f7a7f3": "Improved performance on SimpleRepository (#57)",
  "b3654b2": "Added travis cache",
  "e0313d4": "Improved performance by reducing redundant updates"
}, "ahbottomnavigation": {
  "8066ddf": "Merge pull request #28 from Ben834/optimization"
}, "AlgoDS": {
  "1ad45cd": "LRU cache alternative solution and simple permutation sna subsets",
  "e4590ed": "valid anagram and some optimization",
  "5a9d875": "some optimization in code"
}, "Algorithms": {
  "6d8bb42": "Boyer-Moore minor optimizations",
  "9954fa2": "Tweak test parameters to run faster",
  "c9057fd": "Topsort optimization",
  "c526c8f": "Topsort optimization",
  "08df536": "BFS performance"
}, "algs4": {
  "5729bbb": "optimization to balance() in RedBlackBST",
  "ca26b74": "making performance guarantees in API more precise"
}, "Alink": {
  "": ""
}, "allure2": {
  "3e6beaa": "improve report generation performance (via #1982)",
  "4a3d665": "configure cache for npm task (fixes #95, via #99)"
}, "alluxio": {
  "d9f7bb44": "Enable bucket cache in v2 s3 proxy",
  "8e743439": "Improve the performance of MountTable.getMountPoint",
  "76626d47": "Add metric for cached block location",
  "b5518aba": "cherry-pick empty commit because the change was added to dora in #16570: Remove the restriction of UFS for local cache",
  "0b20044e": "Reduce useless async cache request when read from remote worker",
  "d320249e": "Fix the flaky test in the two-choice random cache eviction policy",
  "45c60b5d": "Add cache TTL enforcement",
  "e15d0b0e": "cherry-pick and resolve location conflict: Add the two-choice random cache eviction policy",
  "fa05bc25": "Make stale labeling faster",
  "48c7d8e9": "Fix metric worker.cacheBlockSize increases when cache already existed",
  "4bc6317f": "Add ttl support for ListStatus() in-memory cache",
  "9d80d8e6": "Set Metadata cache TTL to 48 hours",
  "9edee227": "Fix slow S3 read",
  "3dd2a12a": "Use position reader based local cache file in stream",
  "5324e284": "Fix of updating and invalidating metadata cache",
  "4ee84502": "Implement Dora list status cache",
  "63e6bfa9": "Change the netty default value for better performance",
  "317523a6": "Report cache usage for files in Dora worker",
  "7d650123": "Cache directory status in distributed cache",
  "9980f10c": "Fix client side cache sequence",
  "cc1839f6": "Enable Dora metastore cache",
  "3210ea41": "Fix the bug that cannot cache file with block store when using netty",
  "71a59d10": "Fix bug that paged block store can neither write nor cache after reading",
  "368a55a5": "Fix data not being cached by dora worker",
  "f0a9d8ba": "Implement local cache invalidate method",
  "c7a272f1": "Fix Fuse SDK with local cache",
  "459d766c": "Enable default metadata cache for FUSE SDK",
  "a5ea9c8e": "Support S3 range read with buffer cache",
  "7052240f": "Add new Alluxio-FUSE as local cache solution with UFS gateway",
  "70bcee1c": "Ignore no_cache setting for 'load' command",
  "82d1f5d6": "Fix worker fuse metadata cache",
  "a1e1e330": "Optimize MasterWorkerInfo memory usage by introducing fastutil Set",
  "1ad93de6": "[DOCFIX] Update the posix api doc cache tuning",
  "16a60f89": "Make async cache check stable",
  "9cfba09a": "Fix fuse mount options and refactor path cache loader",
  "f6cce536": "Separate page store configuration from client cache",
  "e5692d22": "Optimize getFileBlockLocations performance",
  "7395bed3": "Support size encoding for clock cuckoo filter in shadowcache",
  "d6f18a56": "Implement zero copy local cache interface",
  "b3c091f9": "Run async write in caller thread when queue is full for local cache",
  "0e53f84b": "Disable passive cache for pinned files",
  "5c091c20": "Use no fallback options for cache test in DefaultBlockWorkerTest",
  "47d7da54": "Fix getNewContainerId() in DefaultBlockMaster performance",
  "a04c9a97": "Fix rockdb iterator leak for local cache",
  "52d62433": "Implement append for local cache manager",
  "fa19bf49": "Implement multiple dir support in local cache",
  "3b23f341": "Improve eviction on cache retrieval if cache is full",
  "9a1a5e4e": "Use wakeupEvictThread call while cache is full",
  "3b1bdb3b": "Add cache for CapacityBaseRandomPolicy",
  "18486b80": "Change the default value of async write for local cache",
  "e26e635d": "Print worker for loadCommand while cache failed",
  "401e5619": "Support shadow cache with clock cuckoo filter",
  "9545c3e8": "Add a reading buffer to local cache for tiny read",
  "acc5dadd": "Remove duplicate metric for absent cache",
  "6d813840": "Fix metric for ufs status cache can be negative",
  "ba38f80a": "Fix absent cache stats are always zero",
  "fb30ad42": "Fix fuse shell drop metadata cache",
  "8dcbc105": "Improve Fuse.statfs to avoid copyProperties and cache on client side",
  "312b2d6c": "Add a default implementation of cache filter to local cache",
  "8e38ed90": "Set passive cache as default for distributedLoad",
  "18e01c35": "Disable jvm dns cache in java11 in dockerfile-dev",
  "bc104a99": "Stop copying Alluxio configs in cacheThroughRead",
  "534e7d47": "Display cache hit and miss",
  "30991a93": "Support store client cache to multidisk",
  "d102512a": "Support to cache data in memory when using Alluxio Local Cache",
  "f4ace8f1": "Update cache manager error message",
  "3cf9434e": "Register local cache read metrics",
  "c218714d": "Fix default value and description for inode cache property key",
  "80cbd8de": "Fix incorrect calc of cacheHitRatio",
  "9311d6a9": "Update log4j configuration for performance",
  "94389c7c": "Fix isMounted should not invoke ufs, if not /metrics page very slowly",
  "e765c843": "Update DistributedLoad using cache request",
  "b892c642": "Add clear metadata cache logic",
  "f5ebcc2a": "Add Alluxio POSIX API troubleshooting and performance investigation doc",
  "a25f0a1e": "Fix load command trigger cache block fail in container env",
  "0d565aee": "[DOCFIX] Add nfs attribute cache config to our NFS guide",
  "5339349a": "Catch errors during explicit cache cleanup",
  "3a5bd25e": "[DOCFIX] Improve Async cache docs",
  "05e081d1": "Update load command using new cache request",
  "e2ee9531": "Add metadata cache metric",
  "6ad1e4fe": "Fix IndexOutOfBoundsException on async cache",
  "c4bd0243": "Add read time metrics for client local cache",
  "40aea2a7": "Implement durable MEM-type worker cache",
  "3422cb6d": "Improve the metric of shadow cache for relatively small working set",
  "7d707143": "Fix async cache error",
  "183552b7": "Invalidate cache after write operation",
  "2539a05a": "Support cache Not exist status",
  "0d8d17bf": "Add cluster_cache_hit_rate metric",
  "439fcb1d": "Improve client cache metrics description",
  "6d501cab": "Fix metrics performance regression",
  "f34b6156": "Fix throw CCE when using Fuse while enable client cache bug",
  "89f89716": "Handle client cache failure on 'no space left on device'",
  "bd7c631b": "Document libfuse auto_cache option",
  "aab820c7": "Reduce default inode cache size",
  "a7f53499": "Add absent cache metrics",
  "c60f20b2": "Do not use maven cache in certain cases and make sure build passes",
  "6b08e3e7": "[DOCFIX] Clean up performance tuning doc",
  "0844f355": "Change some metastore cache metrics from gauge to counter",
  "797ece17": "Add logging on slow UFS calls",
  "a4d1c1b1": "Retry on benign racing for local cache",
  "d0b28d04": "Cleanup counters in local client cache",
  "33b564bd": "Support table quota for Local cache",
  "9cc73697": "Add a configuration parameter for async cache manager workqueue size",
  "eaed75bf": "Add logging for slow reads/closes",
  "5f1279ac": "[DOCFIX] Add title and nickname translation for cache in caching cn doc",
  "679bd896": "Enable faster PR builds via github actions",
  "15db4f3c": "Add configuration for Ratis retry cache expiry time",
  "fec93133": "Implement concurrent ufs input stream cache",
  "52b97566": "Add a GH action to default branch to utilize build cache",
  "182e08bf": "Use longer remote io timeouts to account for slow operations",
  "d8193189": "Log slow remote reads and writes",
  "a98c6dbe": "Support passing FileOpener for local cache",
  "2ea72220": "[DOCFIX] Update the metrics doc with cluster performance metrics",
  "57c9b33a": "[DOCFIX] Update performance tuning documentation",
  "d0518c62": "Fix local cache if bufferSize >= bytesToRead",
  "f03ace94": "Fix slow and contented local cache restart",
  "ffcabeab": "Improve async cache message and reduce spamminess",
  "d3cedb0d": "Increase master serving timeout for slower machines",
  "e3669cbf": "Fix local cache locking",
  "cf3092fc": "Add counter metrics for cache used and pages stored",
  "3d27edb6": "Fix ClosedByInterruptException issue in local cache",
  "dcc3b768": "Cleanup metrics for local cache",
  "94002d90": "Fix a bug in LocalcacheFileSystem",
  "0a3994c5": "Fix bug in meta cache in MetadataCachingBaseFileSystem",
  "1253be49": "Add minor RPC optimizations",
  "63fae67e": "Add a cache for PropertyKey.isValid",
  "e4adac3f": "Throw exception when fail to create local cache",
  "b5c61434": "Add docs/.jekyll-cache to .gitignore",
  "94696c94": "Improve alluxio client local cache",
  "66abfcf6": "Improve performance of sasl authentication",
  "77f754c1": "Fix single master startup time optimization",
  "408952af": "Implement LFU evictor for client cache",
  "c5a7d770": "Enable local cache only when the process type is client",
  "ba9756c5": "Implement async write into local cache",
  "ea687c2e": "[DOCFIX] Update performance tuning docs",
  "799e4ded": "Add getWorkerAddresses and invalidate cache when registering worker",
  "0b0082f8": "Add additional metrics for client cache",
  "22d58bcf": "Use floormod for file bucket calculation in client cache",
  "1da58d10": "Add buckets for client cache on local page store",
  "58e9305b": "Use meter for io metrics in client cache",
  "294ddccc": "Improve client cache metrics",
  "e2c84be7": "Add more debug or info log to local cache",
  "01f360c3": "Improve performance of MetricsHeartbeatContextTest",
  "8da13301": "[DOCFIX] Add performance tuning doc for ufs instream",
  "91e2d1d1": "Configure faster persists for tests",
  "63aeb926": "Use different session IDs for async cache requests",
  "3157562c": "Reduce intervals for faster persist tests",
  "d43e368b": "Decrease timeout for faster test",
  "22a5e937": "Set networkaddress.cache.ttl=0 at docker fuse image build time",
  "2614112c": "Disable DNS cache at docker build instead of entrypoint",
  "b880cef2": "Improve sync cache to consider recursive sync of ancestors",
  "9ae77495": "Change journal tool test to use must cache instead of async",
  "adbf4257": "Fix performance tuning doc",
  "cb89828d": "Optimize read and write performance of LocalUnderFileSystem",
  "d6447cff": "Refactor Inode cache logic",
  "418d9116": "Increase default low water mark for inode cache. (#8538)",
  "dc5162d9": "Update scalability and performance tuning docs (#8461)",
  "2db8d819": "Support flushing cached data to the backing store (#8451)",
  "34d1dadb": "display detailed file number in slow fs ls command (#8364)",
  "b9acb5ff": "Remove FSContext from Hadoop Client and cache client instances (#8332)",
  "5e445a30": "change default max lock cache size to 100k. (#8347)",
  "0ba44095": "Use netty ByteBuf for better performance (#8300)",
  "26826b2d": "[SMALLFIX] reference counted lock cache implementation (#8269)",
  "8e49baf8": "[SMALLFIX] improve fuse locking performance (#8264)",
  "f982e5e2": "[SMALLFIX] various performance tuning changes (#8246)",
  "04551699": "Improve FileSystemMasterTest performance (#8255)",
  "a258913c": "[SMALLFIX] optimizations for ufs sync to get fingerprint through getStatus bulk api (#7924)",
  "6e4ae4fe": "Use cached threadpools for masters (#7908)",
  "9306cbfc": "[ALLUXIO-3276] further optimization for ACL performance (#7670)",
  "cd265222": "Slight performance optimizations. (#7494)",
  "87dd9130": "[SMALLFIX] Improve async cache (#6933)",
  "2aaf4de2": "[SMALLFIX] Fix async cache manager: shared among different handlers (#6922)",
  "1cae12c7": "[SMALLFIX] No response returned from server side of async cache",
  "a27402b7": "[SMALLFIX] Ignore exceptions on submitting async cache request on worker and make client call nonblocking",
  "981cc8d9": "[SMALLFIX] No response returned from server side of async cache",
  "e67a05d0": "[SMALLFIX] Ignore exceptions on submitting async cache request on worker and make client call nonblocking",
  "f39743de": "Merge pull request #6625 from yupeng9/ufs-instream-cache",
  "a82cb383": "Merge remote-tracking branch 'upstream/master' into ufs-instream-cache",
  "1908ec8f": "Add async cache for pread.",
  "e0537ec6": "Add test for pread async cache.",
  "50b2046c": "[ALLUXIO-3069] Add more info into log warn when failed to async cache a block",
  "18d0b687": "[ALLUXIO-3069] Return without async cache if block source is already local",
  "c5694f9f": "[ALLUXIO-3069] Change return type of async cache helper functions to be boolean from void",
  "5fe7866f": "Fix sync metadata cache update",
  "9171eb7f": "Merge remote-tracking branch 'upstream/master' into ufs-instream-cache",
  "b3f8be8c": "move cache related annotations to cached input stream class",
  "d57fc5c6": "Merge remote-tracking branch 'upstream/master' into ufs-instream-cache",
  "38c65649": "set configurable max size of the cache",
  "41321e38": "Make partial cache default.",
  "4f55aaba": "Pass open ufs block options to async cache request.",
  "a799d2ee": "add UnderFileInputStreamsManager to cache ufs instreams",
  "affd1799": "Add a dummy async cache handler.",
  "9ee78716": "Add async cache request to rpc message.",
  "73bdde46": "Skeleton for async cache request manager.",
  "f0c333e3": "Add async cache logic to FileInStream.",
  "f3f3ef52": "Separate async cache from the read path.",
  "d5a976ec": "Add async cache option proto.",
  "73e0e616": "Fix fingerprint update and rename sync cache method",
  "e9c625bd": "Add TODO for optimization",
  "cfffc58a": "Remove the division optimization which will be done by JIT compilation.",
  "cb93b4e4": "Further optimizations.",
  "f8d20171": "Address comment, explicitly setting the cache location policy to LocalFirstPolicy",
  "f8698f77": "Allow path absent cache threadpool size to decrease",
  "1abcf218": "Modify chinese version of passive.cache introduce",
  "a317dac1": "[DOCFIX] Passive.cache more concrete and",
  "23b23543": "[SMALLFIX] Clean up block writer when failed to cache data read from UFS",
  "e7283881": "Merge pull request #5556 from gpang/ufs_path_cache",
  "bf046e5a": "Unittest absent path cache factory",
  "ce859c7e": "Merge pull request #5530 from aaudiber/improve-cache-hit-metric-names",
  "b8f4eb9d": "Do not cache a block if nothing is read/seeked from it.",
  "cdb6f33a": "Improve cache hit metrics naming",
  "b23c9e6e": "Enable disabling the ufs path cache",
  "ea4f27e9": "Merge pull request #5526 from gpang/path_cache_invalidate",
  "69817299": "Make async cache path thread pool configurable",
  "2e5c8dec": "Improve efficiency of async path cache",
  "090e91d6": "Do not passively cache remotely",
  "b81d4378": "Fail fast if write fails",
  "3c92ce02": "Update absent cache interface",
  "682cf3bd": "Improve concurrency control and use guava cache",
  "51ab0603": "Proper fast cleanup.",
  "bd6511ce": "Have async cache implement the interface, remove sync cache",
  "bb9e9115": "Create interface for absent path cache",
  "6f11a950": "Rename to sync cache",
  "6ec1a564": "Unittest for absent async cache",
  "b2bfe1fa": "Don't clean up sessions on ufs read path until cache logic is isolated.",
  "80928632": "Async version of the absent cache",
  "3e994035": "Use absent path cache in FSM for loading metadata",
  "a4e3b408": "Make unavailable test fast",
  "e266c076": "Remove slow test",
  "d0b444af": "[ALLUXIO-2743] Use conf as part of ufs cache key",
  "7b09374b": "Disable secondary master in the integreation tests for now as it slows down the tests.",
  "8df17bf0": "Remove unused replay cache",
  "ece6ee46": "Remove unused replay cache",
  "296bcf40": "Fix cacheable and op time state",
  "04da5e5d": "Only cache locally when reading from remote",
  "3cf282c8": "Do not cache back to the worker you are reading from",
  "cd7a1319": "Mention the config value of `alluxio.user.file.cache.partially.read.block` determines whether the block needs to be read completely when the readType set to CACHE_PROMOTE.",
  "51e14940": "(cn version) Mention the config value of `alluxio.user.file.cache.partially.read.block` determines whether the block needs to be read completely when the readType set to CACHE_PROMOTE.",
  "b4049374": "(cn version) Mention the config value of `alluxio.user.file.cache.partially.read.block` determines whether the block needs to be read completely when the readType set to CACHE.",
  "5d5821fb": "Mention the config value of `alluxio.user.file.cache.partially.read.block` determines whether the block needs to be read completely when the readType set to CACHE.",
  "4fa9c92e": "Mention the config value of `alluxio.user.file.cache.partially.read.block` determines whether the block needs to be read completely when the readType set to CACHE.",
  "146297d1": "Fix loadMetadata performance",
  "7d5e993f": "UFS list optimization",
  "619b0429": "Use faster low-level Zookeeper API for inquire client",
  "fc3a4563": "Remove optimization, add unit test for last modification time.",
  "cefe7605": "Discuss performance implications.",
  "448268a0": "Add a fast but less strict consistency check for startup.",
  "1e5e1e2d": "Merge pull request #4007 from calvinjia/delegation-create-optimization",
  "cc4e39b8": "Merge pull request #3910 from aaudiber/fix-slow-netty-data-server-test",
  "adaa8fc1": "Fix slowness in Netty data server test",
  "d8192ad5": "Disabled the HDFS cache in HDFS under storage file system",
  "c630102e": "Input stream with range query to improve close performance when block is read.",
  "24938765": "Merge pull request #3809 from calvinjia/s3a-delegation-read-optimization",
  "4dc00919": "Fix failing integration tests by reseting the global cache in minicluster.",
  "b1fdd3d8": "[Branch-1.2] Remove user/group in UnderFileSystem object and cache to avoid expensive calls to Configuration.get",
  "1ea429e9": "Add performance TODO",
  "afb3f62b": "[ALLUXIO-2021] Add user/group in UFS object and cache. Also update the UFS interface with create/mkdir/setOwner/setGroup/setPermission.",
  "c75f0b2f": "after optimization",
  "67af272c": "[SMALLFIX] Handle S3 differently for skip, use openAtPosition for better performance.",
  "91d34efe": "remove cache in HdfsUnderFSFactory",
  "deb0018d": "Add UFS cache",
  "c4cd886d": "Turn on alluxio.user.file.cache.partially.read.block by default",
  "26aaa10e": "Set the partially read blocks cache to be false by default since it breaks the integration test",
  "f1b9b1fa": "Add an option to cache incomplete blocks during seek.",
  "cddd0eee": "Avoid cache blocks remotely if we read them remotely",
  "d1299218": "Improve writing performance: use NIO, pre-create tmp directories etc",
  "b37b447d": "[ALLUXIO-1861] Extend compile alluxio timeout to 30min, due to slow vb downloading.",
  "e683431d": "Merge pull request #2939 from jsimsa/performance-fix",
  "8d42a06e": "Don't cache to a worker which already has the block",
  "b115170a": "Revert '[SMALLFIX] Fix a few minor performance issues.'",
  "9afa92f0": "[SMALLFIX] Fix a few minor performance issues.",
  "b96c663d": "Merge pull request #40 from TachyonNexus/cache-promote-fix",
  "8a6bed76": "Add a unit test checking block size of cache stream after skipping.",
  "72cbbf0d": "Increase cluster ready timeout to accomodate for slower under storage.",
  "5e57a102": "Clarify which parts of mvn command are only for performance purposes",
  "0c7e223e": "[SMALLFIX] Specify faster tachyon compilation command in EC2-Yarn doc",
  "4947e0c2": "Merge pull request #2192 from aaudiber/cache-FileSystems",
  "f744b05a": "[TACHYON-1304] Refactor WorkClient for method cacheBlock",
  "faf083bd": "[TACHYON-1238] Update LOG.debug message formats in tachyon-common to avoid string concatenation performance hit",
  "fee840a0": "[TACHYON-1238] Update LOG.warn message formats in tachyon-common to avoid performance hit from string concatenation when logging is off",
  "2eb2119f": "[TACHYON-1238] Update LOG.info message formats in tachyon-common to avoid performance hit from string concatenation when logging is off",
  "5c42dea7": "Increase replay cache timeout to 30 seconds",
  "c43bb31c": "Add replay cache for handling retried RPCs",
  "13a390a2": "Merge pull request #1974 from aaudiber/fasterIntegrationTests",
  "0a59c211": "fix cache remote blocks",
  "dde35160": "Make string constants for faster preconditions.",
  "3f9ead56": "add cache method for some block store",
  "fa8fbbf3": "Merge pull request #1540 from calvinjia/cache-promote",
  "e742376e": "Merge branch 'master' into cache-promote",
  "e17c2668": "Initial implementation of cache promote.",
  "8a351726": "Add cache promote TachyonStoreType.",
  "e69c1a5f": "[TACHYON-813] cancel recache when remote worker is found",
  "6990557e": "[TACHYON-813] RemoteBlockInstream read should only cache locally",
  "1503b7ca": "[TACHYON-815] Move the setting/removal of fs.hdfs.impl.disable.cache into LocalTachyonCluster.start()/stop()",
  "121837af": "overload cache",
  "845c4f92": "Disable/enable cache in after/before class",
  "c9b14408": "Disable hdfs client cache correctly",
  "be112784": "TACHYON-597: recache() allocates too much memory",
  "ad29311e": "remote or local block output for recache",
  "175799fa": "remove blockId from cache only when necessary",
  "9debd2ba": "remove cache when blocks are removed",
  "ea079cf7": "Enable the hdfs client cache by default and disable it in certain integration tests.",
  "8eabe84f": "Add cacheblock rpc call to commit block.",
  "b7adf10f": "faster shutdown for integration test",
  "2064a93b": "Use jets3t version 0.8.1 because 0.9.3 has performance issues on http inputstream close.",
  "b06e9784": "add performance test script for AWS",
  "a0e69377": "Create Dummy UnderFS: This is used when we use Tachyon as pure cache without any backing store",
  "28e0a305": "Set user remote read buffer size to 8MB for better performance",
  "36bdef36": "Merge pull request #702 from calvinjia/fail_fast_remote_read_0.6",
  "ab8670c9": "remove SuspectedFileSizeException for cacheBlock in MasterInfo and WorkerStorage - non-thrift change",
  "3f8f36d3": "remove SuspectedFileSizeException for cacheBlock in MasterInfo and WorkerStorage - thrift change",
  "3653c17c": "Check the exception in cacheBlockCancelTest",
  "56ef57f5": "fix bug and refactor recache in TachyonFile",
  "3d8b0a8d": "remove cached information for worker's directory on client side - non-thrift change",
  "050da26c": "remove cached information for worker's directory on client side - thrift change",
  "59a00711": "move cached info from TachyonFS to WorkerClient",
  "36dbcd24": "removed sync group since it slowed things down",
  "062ca0e9": "Add a unit test for cacheBlock",
  "fdba53ae": "remove fasterxml.jackson dependency from the client library",
  "edd9b4e9": "documented cache block",
  "eb99ca7a": "Merge pull request #138 from GraceH/disablecache",
  "0a9bc733": "disable instance cache in minidfscluster",
  "db5e1f2c": "Disable the hdfs client instance cache for JournalTest",
  "561649e5": "Make disable.cache=true only work for test.",
  "3a0caf10": "Disable the client instance cache in hdfs to avoid certain FileSystem closed exception issue.",
  "56f08f52": "Merge pull request #85 from GraceH/trycachefailure",
  "8fa65c68": "To cache IOException when isTryCache",
  "51458286": "consolidate clear-cache, format, and gen",
  "47b855e9": "CommonUtils: replaced if to switch statement among line 186-198 to make the code more legible. MasterInfo: corrected mWorkerAddressToId.remove() to remove the key instead of the value. UnderFileSystemHdfs: replaced the manual array copy with system library function to improve the performance",
  "0ee00b67": "update performance",
  "d330690f": "1. masterlogwrite provide option to not flush. 2. preliminary version for client side metacache. 3. more tests.",
  "642a6228": "more unit tests. add read_no_cache.",
  "17d341e0": "Clean the performance example",
  "c73f1995": "seperate addcheckpoint and cachefile api.",
  "0cba85f4": "Add ready api into TachyonFile. Tune the code. Tachyon recache the cache internally in HadoopFS interface.",
  "70b6e24e": "Recache evicated data."
}, "AmazeFileManager": {
  "2acc980": "Merge pull request #3483 from TeamAmaze/update-fastlane",
  "496914e": "fastlane: add icon",
  "bd917af": "fastlane: update metadata",
  "213adc9": "fastlane: add phone screenshots",
  "8f8f860": "Merge pull request #3469 from TeamAmaze/feature/listing-cache",
  "fb454f3": "Merge pull request #3467 from TeamAmaze/feature/listing-cache",
  "f77dc3a": "Allow to force reload when list is cached",
  "575e3a9": "Merge pull request #3427 from TeamAmaze/feature/listing-cache",
  "453ba49": "Implement cache for improved listing performance",
  "b44332e": "Merge pull request #3414 from linsui/fastlane",
  "5465dd0": "Add fastlane for F-Droid",
  "d81160b": "Remove redundant caches",
  "be573ca": "ci: add cache in build job",
  "f15fee0": "ci: enable cache of set java",
  "8a11fc5": "Merge pull request #2597 from TeamAmaze/emmanuelmess/fix/fastrun",
  "d06ebef": "Separate CI for into feature and fast",
  "ce64064": "Added use of parallel GC for faster builds (2 min to 45 seconds in my PC)",
  "8e7266d": "(Silly) optimizations for ZipHelperTask",
  "b43df8d": "Add declaration of cache folder for FileProvider",
  "85de462": "Add r/o phrase to toolbar title for cache file",
  "ef7aa8a": "Disallow opening soft keyboard in cache editor files",
  "1781f98": "Small optimization of ProcessViewer chart",
  "0c5aed9": "Fix removal of decrypted files from cache",
  "e929995": "optimization, removed uneefective code",
  "f64d3ff": "Clarity , optimization, doc fix",
  "0ae5b6c": "EXT: Add a cache path to open compressed file",
  "8d604db": "Improved fastscroll for grid",
  "3838e23": "Improved fastscroller Fixed apk backup",
  "dee9364": "Implemented fastscroll with coordinatorlayout",
  "9432d08": "fix for zipViewer not deleting unknown file from cache",
  "cda6af0": "minor fix while deleting cache file",
  "9e51961": "little performance fix for drawer",
  "0f6bd2a": "Some performance improvements",
  "2c7401e": "Minor bug fixes and performance improvements",
  "12f60b3": "many ui changes and performance improvements"
}, "AndEngine": {
  "ba267e4": "Minor optimization in FontUtils.",
  "3b2aff9": "Reverted use of PositionTextureCoordinatesUniformColorShaderProgram in Sprite, since PositionColorTextureCoordinatesShaderProgram is faster in the average case (average case == mixture of 'color is never updating' and 'color is updating every frame').",
  "3d2164b": "Minor optimization in AStarPathFinder.",
  "09697b6": "Reverted SmartList to extend from ArrayList, until performance gain of ShiftList/CircularList is proven.",
  "d813243": "Minor optimization to CircularQueue.clear().",
  "16bf63e": "Minor performance improvement in SortedQueue.",
  "9c3907c": "Revert 'Made ConcurrentShiftQueue use java internal method of copying an Array, for eventually better performance.'",
  "c35860c": "Made ConcurrentShiftQueue use java internal method of copying an Array, for eventually better performance.",
  "e7f7bbb": "Minor optimization in TiledTextureRegion.",
  "efa4d87": "Improved AStarPathFinder performance by using better suiting datastructures.",
  "e1bd59a": "Improved performance of unbatched AnimatedSprites really hard, by putting all frames into one VBO instead of updating the VBO on every frame change.",
  "ddf1ae9": "Minor optimizations.",
  "4211376": "Minor optimizations.",
  "5c9914f": "Started performance optimizations.",
  "c7968ee": "Added a few performance tweaks.",
  "081371f": "Refactoring where TextureCoordinates are calculated. (Minor performance increase possible on some devices.)",
  "cbf9d6b": "Minor optimization by removing function call with field access.",
  "42a8699": "Removed axis aligned rectangle collision detection optimization, as it cannot be used anymore with the new full scenegraph api. (Thx to blings)",
  "5f80e19": "Micro optimization.",
  "599d751": "Added possibility to read BogoMIPS of the CPU as a ___VERY ROUGH__ performance indicator!!!",
  "6f44a2f": "ColorBackground can have its color disabled, to save some performance.",
  "667f259": "Improved ParticleSystems performance by about 5%.",
  "dc76089": "First optimization to TMXLayer.",
  "3ca7cd1": "Minor optimization in BufferObject.",
  "981114e": "'Improved' the Range-Checks for setting the background-color of a Scene. Assuming the background-color of a Scene doesn't change frequently, this should have no impact on the performance.",
  "ad2637b": "Minor optimizations to Modifiers-Handling in ParticleSystem and Shape.",
  "61711d2": "Minor optimization.",
  "ca6387d": "Reworked ParticleSystems. Now making a difference between ParticleInitializers(new) and ParticleModifiers. Should improve ParticleSystem performance a little. Added RotateModifier and RotateInitializer.",
  "3b0598e": "Changed most '/ 2' to '* 0.5f' due to slightly better performance.",
  "8ff8ae2": "AndEngine now used DepthSize = 0 for the GLSurfaceView. (Might increase performance-bug on the Droid/Milestone)",
  "e811ca2": "Minor optimization.",
  "03c263a": "(float)Math.random() --> MathUtils.RANDOM.nextFloat(). 3x faster!",
  "c928f5b": "Minor optimizations.",
  "9703e97": "Tiny optimization."
}, "andOTP": {
  "4fbd940": "resize ubnt thumbnail for performance reasons",
  "65b89bd": "use build caching for faster builds and output gradle warning",
  "5215308": "Reset cacheEncKey after use",
  "937e2bb": "(FIX #435) add thumbnail for fastmail using official icon",
  "a677850": "Merge pull request #177 from jaller94/fastlane",
  "c96c7d9": "Load the encryption key just once and cache it inside the adapter"
}, "AndPermission": {
  "12c9cec": "Some optimizations.",
  "2d83794": "Reasonable optimization."
}, "AndResGuard": {
  "c3d2f6a": "clear 'ARSCDecoder.mMergeDuplicatedResCount' cache (#364)"
}, "android": {
  "8b41d313": "Code optimization for favorites shown twice in menu.",
  "8c4d140b": "Merge pull request #11452 from nextcloud/dependabot/github_actions/actions/cache-3.3.1",
  "6982775e": "Build(deps): Bump actions/cache from 3.2.6 to 3.3.1",
  "bd704294": "Merge pull request #11422 from nextcloud/dependabot/github_actions/actions/cache-3.2.6",
  "93de30fc": "Build(deps): Bump actions/cache from 3.2.5 to 3.2.6",
  "21a46b92": "Build(deps): Bump actions/cache from 3.2.4 to 3.2.5 (#11377)",
  "44ac4ccb": "Merge pull request #11353 from nextcloud/dependabot/github_actions/actions/cache-3.2.4",
  "38a9590b": "Move per-flavor fastlane metadata to top-level src/ folder",
  "328f9267": "Build(deps): Bump actions/cache from 3.2.3 to 3.2.4",
  "36c8b404": "Merge pull request #11267 from nextcloud/dependabot/gradle/me.zhanghai.android.fastscroll-library-1.2.0",
  "ed303b61": "Build(deps): Bump me.zhanghai.android.fastscroll:library",
  "7dc3ee49": "Merge pull request #11301 from nextcloud/chore/fastlane-remove-screenshot-check",
  "d092c789": "Merge pull request #11237 from nextcloud/dependabot/github_actions/actions/cache-3.2.3",
  "1149b37d": "Build(deps): Bump actions/cache from 3.2.2 to 3.2.3",
  "26b5b36c": "Merge pull request #11214 from nextcloud/dependabot/github_actions/actions/cache-3.2.2",
  "edbf1cad": "Build(deps): Bump actions/cache from 3.0.11 to 3.2.2",
  "08155e3a": "Add fastlane icon for F-Droid",
  "a2198d3b": "CONTRIBUTING.md: add performance section",
  "c1ce2546": "GalleryFragment: fix crash when scrolling slowly until the end of the list",
  "08e20067": "Merge pull request #10996 from nextcloud/cache-walled-check",
  "fb52b3f2": "Merge pull request #10985 from nextcloud/fastlane-skip-apk",
  "e924e10b": "fastlane: add skip_upload_apk to play store config",
  "c3e4f394": "Merge pull request #10819 from nextcloud/fix/cache-crash-tests",
  "787804d2": "ThumbnailsCacheManager: null out cache when clearing it",
  "a8750d39": "GalleryFragment: disable fast scroll",
  "2bf3cbe4": "AuthenticatorActivity: after login, immediately cache color in OCCapability",
  "5cf85fd2": "Theme fast scrollbars",
  "8c62cb1c": "FileMenuFilter: reorder conditionals for performance (Spotbugs)",
  "190c4a11": "Merge pull request #10510 from nextcloud/chore/update-fastlane",
  "ff86c530": "Update fastlane plugins",
  "e78a1019": "Update fastlane",
  "a981db22": "When thumbnail update enforced, do not use any cached version",
  "a7877ceb": "Make fast scroll bar and popup use the theme color",
  "e644b12a": "Merge pull request #10355 from nextcloud/fix/synced-folders-adapter-performance",
  "db85ebba": "Merge pull request #10174 from nextcloud/new-fastscroll-lib",
  "be79e3cf": "Merge pull request #10152 from nextcloud/chore/update_fastlane",
  "ea4222a1": "FileDisplayActivity: fix appbar for fast scroll",
  "09b95951": "Fix fast scroll in gallery",
  "12312393": "Replace fastscroll library",
  "1b021a9e": "fastlane: huawei: Add delay before review",
  "ad5769c9": "Update fastlane and plugins",
  "31dda2e0": "Merge pull request #9985 from nextcloud/fastscrollWithLib",
  "ce6bb704": "Merge remote-tracking branch 'origin/fastscrollWithLib' into fastscrollWithLib",
  "16662242": "Merge pull request #10025 from nextcloud/fix/fastlane-artifact-number",
  "2dc9ec21": "fastlane: Increase number of expected artifacts to 4",
  "95046c4b": "AccountRemovalWork: remove cached owncloudClient after removing account",
  "5cfa23c1": "Update fastlane",
  "042b6aa3": "fastlane: Sign the app bundle, and use it for google play upload",
  "ae0840e5": "fastlane: Build AAB for gplayRelease in addition to APK",
  "380585ea": "Merge pull request #9998 from nextcloud/dependabot/github_actions/actions/cache-3",
  "efd6d881": "Bump actions/cache from 2 to 3",
  "05bd7751": "only have one place for capability update cache entry",
  "f3563114": "Update fastlane for new structurUpdate fastlane for new structure",
  "87e508d2": "Restore fast forward/rewind buttons in fullscreen video",
  "fa737258": "Pin: use activity paused also, as stopped is sometimes too slow",
  "2476be69": "Merge pull request #9737 from nextcloud/chore/bump-fastlane",
  "93f973cd": "Bump versions for fastlane and plugins",
  "84507a39": "Merge pull request #9719 from nextcloud/fix/ipv4-cache",
  "7299b598": "Clear DNS cache on network changes",
  "c6731093": "Merge pull request #9559 from nextcloud/fix/fastlane-check-apk",
  "edb1e9c3": "fastlane: Check some basic requirements before starting release phase 2",
  "1e7bfcc7": "Update fastlane and plugins",
  "1036eaa0": "when re-logging in too fast, we stored an empty auth token",
  "dd7b76ea": "Merge pull request #9150 from nextcloud/fix-fastlane-rc",
  "e40d2910": "fastlane: Restore version prompt for RC releases",
  "8f7bfd9b": "Merge pull request #9118 from nextcloud/fastlane-rename-fix",
  "33c6aab7": "Merge pull request #9103 from nextcloud/dependabot/gradle/tools.fastlane-screengrab-2.1.1",
  "2a7ebcea": "fastlane: makeReleases: call androidVersion directly instead of getting from parameter",
  "93207426": "fastlane: Don't use rename command",
  "cfa12f3c": "Merge pull request #8638 from nextcloud/dependabot/gradle/tools.fastlane-screengrab-2.1.0",
  "7dd08fb7": "Merge pull request #8759 from nextcloud/fastlaneUpdate",
  "be29f9aa": "Merge pull request #8290 from grote/saf-optimization",
  "723d81e8": "Merge pull request #7868 from nextcloud/ezaquarii/migrate-thumbnail-cache-manager-to-user-model",
  "8a5d58a6": "Merge pull request #6725 from grote/is-child-performance",
  "e8870334": "Improve performance of DocumentsProvider#isChildDocument()",
  "d521a9f3": "Merge pull request #6599 from nextcloud/fastlaneOrder",
  "1d3c2e98": "change order of fastlane lanes",
  "0aed8aaa": "#6247 View Binding - Fix new SpotBugs performance warning (unread field)",
  "3baa9fe5": "Merge pull request #5118 from nextcloud/fastlane",
  "ee6e7ce5": "fix fastlane RC",
  "d2313702": "Merge pull request #4829 from nextcloud/dependabot/gradle/tools.fastlane-screengrab-2.0.0",
  "866d163a": "Add fastlane scripts",
  "9a023c64": "Check if app is excluded from battery optimization (#3589)",
  "3d9126a6": "Use reloading on photo view - cache query for 30s - show progressbar if loading more",
  "5c686ef3": "Merge pull request #4041 from nextcloud/ezaquarii/fix-weak-ref-dereference-npe-in-thumbnails-cache-manager",
  "0bc6e536": "add changelog to fdroid via fastlane",
  "f208e3d4": "show snackbar after 10s when cool is loading to slow",
  "3527b2b7": "migrate thumbnail cache from external to internal cache location",
  "cb1bff1c": "add battery optimization warning",
  "1e443545": "codacy: String.indexOf(char) is faster than String.indexOf(String).",
  "a4eafbf7": "codacy: String.indexOf(char) is faster than String.indexOf(String).",
  "68ea0890": "Merge pull request #2993 from nextcloud/dependabot/gradle/tools.fastlane-screengrab-1.2.0",
  "d52d97b1": "codacy: fix issues about String performance and for loops",
  "77dc1b4b": "add 3.2.1 metadata adapt to fastlane",
  "48992266": "minor size optimizations",
  "4ce39000": "Merge pull request #2548 from nextcloud/lastindexof_performance",
  "9916aecf": "lint: fix set android:baselineAligned='false' on this element for better performance",
  "ceff2df0": "change order as file.getFileID() is faster than file.getRemotePath() enhance finding of encrypted ancestor",
  "36253cce": "Screenshots with fastlane screengrab",
  "40c30357": "replace '\n' from transifex/strings.xml with real linespace for fastlane/fdroid",
  "6574af54": "extract authority to image_cache_provider_authority",
  "98876c6b": "transifex -> fastlane converter",
  "a7381b75": "lint: Use a layout_width of 0dp instead of @dimen/zero for better performance",
  "b121f8a6": "re-use existing view for better performance",
  "58c9a7dd": "remove authority cache",
  "15b4c8a4": "replace complex LinearLayouts with table layout for better performance",
  "9745b152": "Don’t cache changing deps",
  "3662aaa8": "Don’t cache changing deps",
  "acc5912e": "Don’t cache changing deps",
  "1815ace4": "Don’t cache changing deps",
  "fa81cf7e": "performance: only do further processing if not a Nc app folder",
  "c7a23106": "minot layout optimization so the German 'skip' (überspringen) fits in a single line",
  "c2b813c8": "no pre-dexing on travis (performance)",
  "d2d8352b": "recyclerview/media-folder optimized thumbnail cache/async task implementation",
  "b607a770": "minor layout optimization",
  "89a14e87": "Improved performance and simpler source code",
  "aac14ed0": "slight whitespace optimizations in accordance with material design guidelines",
  "fe357bb3": "small layout optimizations",
  "fadb79ae": "minor code optimization",
  "68849c73": "code review: fixed minor layout optimizations, set generic preference methods to private visibility",
  "7fe4de73": "search view using AppCompat implementation + layout optimizations",
  "337191ff": "minor code optimizations",
  "e8eda963": "flipped the if/else for performance optimization",
  "ddac353a": "Delay load of cached information about folder (mLocalFolder) until the operation is really run",
  "299ad36b": "Thumbnails cache initialized in MainApp context to grant it is done even if the app wasn't opened, for the case of background synchronizations",
  "395ad324": "Creation of ThumbnailsCacheManager class, grouping all the methods needed to access the thumbnails cache",
  "06758342": "Use hash ok keys as actual key in thumbnails cache instead of custom transformed key",
  "e72555f2": "Protect the app against crashes when opening the thumbnails cache",
  "7dd56705": "Merge pull request #615 from owncloud/fast_account_selection",
  "d3a99fff": "Fixed bug it is not possible to login using two accounts in saml server. Clear webview cache.",
  "b246cf70": "Improved cancellation of downloads: fast abort of operation and fixed thread synchronization",
  "153dbb03": "Be sure that root directoriy is listed when the synchronization is really fast",
  "d4f8391f": "Trying to improve synchronization performance with database batched operations",
  "2b00ff1c": "cached instant upload",
  "e8c9e5b0": "Filelisting using intents and OCFile.getId() instead of string matching in db which can be very very slow if there are lots of files",
  "cb8761f6": "New Layout for FileDetailsFragment (needs to be redone with RelativeLayout for better performance), Fix AppCrashes on rotation change",
  "020d2885": "Tablet fixes. Goal is to get tapping on a file to display its details. Does not work yet - WIP. Also code optimization: Make FileDetailFragment less complex by passing in a OCFile directly instead of reconstructing it.",
  "8db0692d": "small optimization for ocfile"
}, "Android": {
  "": ""
}, "android-adDialog": {
  "": ""
}, "android-advancedrecyclerview": {
  "e52ef0e": "Tweak Gradle settings to improve build performance"
}, "androidannotations": {
  "ef545b7": "Properly cache Gradle plugin in Travis"
}, "AndroidAsync": {
  "fb7695c": "prevent double handled on requests with slow bodies",
  "0268d7f": "AsyncHttpServer: fix up 304 caching to work on any package. remove unnecessary map cache. manifest serves that purpose.",
  "d94a75d": "AsyncHttpServer: clean up unused 304 streams. do not send anything but the 304 on cache hit.",
  "0163167": "AsyncHttpServer: add etag/if-none-match cache support for android assets.",
  "46f5c11": "ResponseCacheMiddleware: method to remove one url from the cache",
  "d69769a": "Fix thread affinity issue with cancelling cached responses.",
  "547a5ed": "cache middleware sample",
  "520640b": "cache middleware sample",
  "9bbb4bc": "Response cache close should clean up the cached stream.",
  "255ff98": "Fix crash bug when cancelling requests being cached.",
  "54ef12d": "Move all cache related stuff into subpackage. Contain libcore.",
  "e62122d": "Add new growing smart allocator to consolidate code. Refactor 304 responses and cached responses in http response cache.",
  "8655df9": "Fix bug in conditional cache response if content-length exists. More careful location error handling.",
  "63f931e": "FileCache: do not delete files during initial load (cache resize, etc).",
  "1803f69": "Fix cache corruption.",
  "992127c": "Simple optimization to the framing code to remove an additional math operation",
  "acd3c91": "switch to jakewharton disklrucache.",
  "0d6b6e5": "When reading from a cached response, read the entire thing vs in chunks.",
  "df3e03f": "Fix cached responses coming in with the incorrect encodings and content length.",
  "8735c94": "fix responses served entirely from cache",
  "9fc7e27": "Fix bug where calling AsyncHttpClient.execute would violate strict mode if caches were enabled. Fix bug where a socket connect timeout would not cancel the connect request.",
  "ec81133": "remove all internal access to ByteBuffer objects from ByteBufferList. Could potentially put cached remaining value out of sync.",
  "1f0cfef": "ByteBufferList: keep a calculated remaining value cached so as to prevent unnecessary relculations and list iteration all over the place...",
  "a395c3d": "move the connect callback invocation out to a little later so that cached responses provide the proper cached headers instead of providing the 304 headers.",
  "a26eb86": "rename refactor some classes. minor stats and fixes for cache code."
}, "android-async-http": {
  "0834d17": "Store array/list size in a local variable for performance",
  "c53f350": "Thread pool reverted, cached thread pool contains keepAlive timeout 60seconds and behaves better, Fixes #382",
  "687ced3": "Remove prefetch cache reference"
}, "android-autofittextview": {
  "": ""
}, "AndroidAutoLayout": {
  "": ""
}, "AndroidAutoSize": {
  "": ""
}, "Android-BluetoothKit": {
  "3e912bc": "add refresh cache"
}, "Android-Bootstrap": {
  "8eff669": "draw stripey bar & cache bitmap"
}, "android-butterknife-zelezny": {
  "": ""
}, "AndroidChromium": {
  "": ""
}, "Android-CleanArchitecture": {
  "76f66e7": "Added simple implementation of disk cache and simple api. Refactored and added internet permissions."
}, "android-common": {
  "3e83088": "HttpCache support thread cache",
  "78c3604": "update http cache info",
  "6ac76d9": "support cache-control is no-store in http request",
  "edd2ee5": "support cache-control is no-cache in http request",
  "0a977ef": "add setRequestProperties for imagecache"
}, "Android-ConvenientBanner": {
  "": ""
}, "android-crop": {
  "": ""
}, "Android_Data": {
  "": ""
}, "Android-Debug-Database": {
  "": ""
}, "android-floating-action-button": {
  "": ""
}, "android-gif-drawable": {
  "3d38bdc": "native memory allocation optimizations",
  "0e7eecd": "travis cache enabled",
  "c6c457a": "minor native code optimizations",
  "c32a99c": "GifTexImage2D optimizations",
  "5357c9f": "GifTexImage2D optimizations",
  "1d0f9c8": "Native code cleanup and optimizations",
  "947561d": "travis cache enabled",
  "2534a46": "travis cache enabled",
  "cf2ad6c": "animation restarting fixed #208, #209 `GifTextureView` memory usage optimizations native code size cleaning",
  "4e438af": "surface rendering optimizations",
  "c39dd6c": "native code cleaning and optimizations",
  "761d8b8": "minor optimizations and code cleaning",
  "8493414": "native code optimizations",
  "f8058ec": "native code optimizations",
  "2f64e3a": "native code optimizations, #146 done",
  "f023ed7": "decoding optimizations",
  "41cf565": "memset optimizations",
  "250aeb8": "drawing performance tweaks, minor bugfixes",
  "5997f4e": "performance tweaks, minor bugfixes",
  "3b3e6e7": "decoding performance improving started",
  "e3f1b11": "seekToTime fixed, switch to OOME thrown in all no-memory cases, minor bugfixes and optimizations",
  "600bf66": "surface lifecycle optimizations",
  "6d1fb5d": "surface optimization",
  "e373710": "GifTextureView updated, centerCrop scaletype added, native code optimizations",
  "e5ca522": "GifTextureView optimizations",
  "8c4879d": "executor optimizations",
  "7960bf7": "#105: GifLib version bump to 5.1.1, native code optimizations",
  "963114c": "optimization for #105, code reformatted",
  "8d2e2d0": "#98 fixed, minor other optimizations",
  "822ec97": "native methods moved to GifInfoHandle, builder added, minor optimizations, #90 done",
  "987485e": "#88 finished, minor native optimizations and nullchecks added",
  "5e05c14": "getAllocationByteCount() added getByteCount() renamed to getFrameByteCount() minor frame buffer allocation optimization for dispose to previous disposal method",
  "909ec38": "getNumBytes() added condition for previous frame backup added minor native code optimizations",
  "537fbf0": "color index computing fixes, including https://code.google.com/p/skia/source/detail?r=12786 throwing exceptions for errors during initializing moved to native code input stream closing moved to native code screen size checking changed to handle overflows minor performance improvements in native code",
  "d089dbe": "InputStream buffer optimization, manifest cleanup",
  "02745ad": "Optimized streamReadFun() to cache it's read buff",
  "be7d599": "performance tweaks, better extension handling and many other improvements"
}, "android-gpuimage": {
  "65c76bd": "Merge pull request #417 from cats-oss/fix-camera-performance",
  "91e5977": "- On 2.2 phones the armeabi folder is required - Add function for easy loading image from File - Allow getting a picture with multiple filters applied faster"
}, "android-hidden-api": {
  "": ""
}, "AndroidHttpCapture": {
  "": ""
}, "android-iconify": {
  "": ""
}, "Android-Image-Cropper": {
  "b6af385": "add optimization for orientation to save the already loaded bitmap and reuse it in state restore",
  "c5dd1a8": "Merge pull request #10 from edmodo/performance_refactor",
  "5d7a99f": "Performance optimization during draw cycle."
}, "AndroidImageSlider": {
  "": ""
}, "Android-IMSI-Catcher-Detector": {
  "9ebfae6": "let travis cache the downloaded gradle-wrapper and jars",
  "04ed7a9": "Map Viewer UX issues #228 Ability of cache of tiles has been switched on Version of the library for maps has been updated"
}, "android-interview-questions": {
  "": ""
}, "android-job": {
  "9c3047a": "Don't cache the database",
  "ccdc9c5": "Only cache 20 finished jobs to free up memory",
  "3928244": "Don't cache the JobScheduler. The binder in JobSchedulerImpl can be null (see referenced crashes)."
}, "android-lifecycle": {
  "": ""
}, "android-maps-utils": {
  "5dd9738": "Retain the bitmap cache (#381)",
  "5cab856": "Merge branch 'quad-tree-optimizations' of https://github.com/jeffdgr8/android-maps-utils",
  "dd74028": "Revert buffering for convolve (copying over made it slower)",
  "c0be7db": "Now using json input for demo (faster) and doing timings",
  "e37eb62": "Don't kick off new threads to fetch clusters if they're already in the cache.",
  "010dbd9": "Perform up to 10 tasks at once. This is reasonable on a fast phone, but perhaps needs to be re-evaluated for slower phones.",
  "bd1c98c": "Use Precache decorator for default algorithm",
  "91faa20": "PointQuadTree returns a Collection, instead of a Set. Add an optimization - Bounds.contains(Bounds)",
  "b5c5938": "Add a decorator Algorithm that quantizes zoom level, fetches and caches (with LruCache) the clusters for the two adjacent zoom levels.",
  "48eadc7": "PointQuadTree returns a Collection, instead of a Set. Add an optimization - Bounds.contains(Bounds)",
  "d6d5bc2": "Add another simple algorithm that has much nicer results and O(m*lg n) performance",
  "8364c4b": "Add another simple algorithm that has much nicer results and O(m*lg n) performance"
}, "androidmvp": {
  "": ""
}, "android-mvp-architecture": {
  "": ""
}, "android-mvp-mvvm-flytour": {
  "684518c": "readme optimization",
  "28d84f8": "code optimization",
  "034c379": "readme optimization",
  "a36968b": "network request optimization"
}, "AndroidNote": {
  "": ""
}, "Android-ObservableScrollView": {
  "940356a": "Limited connectedCheck task to 'library' project to make CI a little bit faster.",
  "ec1e774": "Fix Toolbar blinks when scrolling fast. #38",
  "770da69": "Fix toolbar title visibility becomes wrong when sliding up and down fast in SlidingUp examples. #32",
  "af147ad": "Add example of flexible space with filling gap effect. (It's not working nicely when scrolling fast)"
}, "AndroidPdfViewer": {
  "dbaa980": "Update PdfiumAndroid to 1.6.0 Add method fitToWidth() Fix rare IllegalArgumentException while rendering Add OnRenderListener Add Configurator.enableAntialiasing() Modify engine to not block UI when big documents are loaded Change Constants interface and inner interfaces to classes Change default cache size to 150 parts Update gradle version Update build tools version",
  "187fbf5": "Fix loading document from subfolder in assets directory Fix scroll handle NPE after document loading error (improvement of 2.0.3 fix) Fix incorrect scroll handle position with additional views in RelativeLayout Improve cache usage and fix bug with rendering when zooming Update gradle version Update gradle plugin and maven gradle plugin Update README and CHANGELOG Update version"
}, "AndroidPerformanceMonitor": {
  "": ""
}, "AndroidPicker": {
  "dbee86a": "fastjson使用maven依赖",
  "6c2a483": "fastjson使用maven依赖"
}, "Android-PickerView": {
  "1562e05": "optimization code",
  "be03f45": "optimization code",
  "bd30290": "optimization code",
  "1ecd67a": "optimization top bar"
}, "android-priority-jobqueue": {
  "d3a14b9": "New NetworkUtil API with WIFI support. More tests around WIFI requirement. Ethernet is also considered as WIFI since it is usually meant to be used for unmetered/fast connection #62",
  "6714622": "keep running jobs in an ordered list to help improve performance. cache queries",
  "d653dc3": "cache layers for queues to improve performance"
}, "android-process-button": {
  "": ""
}, "AndroidProject": {
  "": ""
}, "android-saripaar": {
  "": ""
}, "Android-skin-support": {
  "": ""
}, "AndroidSlidingUpPanel": {
  "b32ba48": "Recompute slide offset from sliding view top when drag state becomes idle. Some slower devices were missing the final onPanelDragged events so the onPanelExpanded, onPanelAnchored & onPanelCollapsed events were not being fired.",
  "b1953ee": "Fixed issue where a fling on a view which was not the drag view could collapse the sliding panel (for example, if there was a list under the drag view and the user tries to scroll up on the list view fast enough it will trigger a collapse)."
}, "Android-SpinKit": {
  "": ""
}, "android-stackblur": {
  "43908e0": "Merge pull request #11 from Dr-Emann/fast_blur",
  "3e6224b": "Merge branch 'master' into fast_blur",
  "de4362d": "Make JavaBlur faster",
  "74b8150": "Make native blur faster"
}, "AndroidStaggeredGrid": {
  "": ""
}, "AndroidSwipeLayout": {
  "": ""
}, "android-times-square": {
  "c5ffdc9": "included feedback stuff of @edenman and some optimizations",
  "8e7c477": "Merge pull request #14 from square/edenman/more-performance-enhancements",
  "2b66971": "More performance enhancements"
}, "Android-Tips": {
  "": ""
}, "android-tips-tricks": {
  "522d339": "added: tip about using only one resource config for faster builds",
  "b62303c": "added tip regarding cleaning up the gradle cache",
  "b56b818": "[+] added tip about making your builds faster by building offline",
  "46104a3": "[+] added tip about clearing gradle cache"
}, "AndroidTutorialForBeginners": {
  "": ""
}, "Android-Universal-Image-Loader": {
  "81eb429": "[#1084] Used 'cached images' executor for local files (assets, drawables).",
  "9098964": "Merge pull request #789 from mente/cache-error",
  "4f0065f": "Consider largeHeap param while define memory cache size",
  "faaeb11": "Sample: Removed broken URLs, limit disk cache",
  "fc09ba1": "Micro optimization in ImageSizeUtils",
  "b7b58fd": "Merge branch 'new_disk_cache_api'",
  "fec71ee": "do not used bitmap from memory cache if the bitmap is recycled",
  "b9d55fe": "Merge branch 'master' into new_disk_cache_api",
  "e3f9275": "Merge branch 'master' into new_disk_cache_api",
  "625c297": "Merge branch 'master' into new_disk_cache_api",
  "70fb9cb": "Merge branch 'master' into new_disk_cache_api",
  "87052e3": "Use LruDiscCache as default limited cache",
  "1ef1672": "Merge branch 'master' into new_disk_cache_api",
  "2b13bdd": "Fixed LruDiscCache: close steam, recreate cache after delete().",
  "8f68f1c": "Merge branch 'master' into new_disk_cache_api",
  "9ad887a": "Merge branch 'master' into new_disk_cache_api",
  "ba107eb": "Merge branch 'master' into new_disk_cache_api",
  "0c04779": "Merge branch 'master' into new_disk_cache_api",
  "433afbf": "Merge branch 'master' into new_disk_cache_api",
  "4e839da": "Issue #81 - Stop using memory cache with weak references by default for Android < 2.3. Always use LryMemoryCache on strong references.",
  "6e9ce78": "Merge branch 'master' into new_disk_cache_api",
  "4a00c2c": "Merge branch 'master' into new_disk_cache_api",
  "12079bd": "Merge branch 'master' into new_disk_cache_api",
  "3197b2e": "Merge master -> new_disc_cache_api",
  "9d77de9": "Merge master -> new_disc_cache_api",
  "59c0255": "Refactored LoadAndDisplayImageTask. Changed logic for size-limited images in disc cache: download, then resize.",
  "66042fe": "Prevent NPE of Context.getCacheDir() for reserve disc cache",
  "38df1bf": "Issue #392 - Hardcode cache dir path if Context.getCacheDir() return null",
  "9df7c42": "Issue #379 - Delete corrupted cache files (if loading failed)",
  "08fe96d": "Revert merge New disc cache API",
  "ee1fdc0": "Merge branch 'new_disk_cache_api' of https://github.com/nostra13/Android-Universal-Image-Loader",
  "bf79f2a": "New Disc cache API",
  "ddf34ed": "Issue #252 - Introduced DisplayImageOptions.cacheInMemory(boolean), .cacheOnDisc(boolean), resetViewBeforeLoading(boolean) Deprecated appropriate methods without boolean param",
  "85808ab": "Issue #309 - Introduced bitmap processor for disc cache (in ImageLoaderConfiguration.discCacheExtraOptions(...))",
  "dc6fb95": "There was an issue where 'lastUsageDates' in LimitedDiscCache had some cache files that were not in cache directory, so LimitedDiscCache wasn't removing the cache files.",
  "c0604b9": "Issue #259 - PostProcessor gives recycled bitmap Prevent recycling of cached in memory images.",
  "a4782c2": "Issue #244 - Low performance of MemoryCacheUtil.generateKey Optimized String work (avoid String.format(...)) Optimized methods with var-args",
  "435faf2": "Sample: Use default memory cache",
  "3ff9e58": "Use LruMemoryCache as default memory cache for API >= 9 Use LRULimitedMemoryCache as default memory cache for API < 9 Default memory cache size - 1/8 of available app memory",
  "8a4a7cf": "Fixed bug: .denyCacheImageMultipleSizesInMemory doesn't work if own memory cache is set",
  "c483276": "Try loading image from URI if disk cache throws an exception",
  "1f718bc": "Update Readme about disc caches",
  "6d399fb": "Fixed usage of encoded URI. Use original incoming URI for callbacks, disc cache's file name generator. (Affects URIs with special/local UTF-8 symbols)",
  "2e38d7a": "Sample: Set memory cache depending on Android version",
  "116590c": "Java Docs for disc caches",
  "531941d": "Pre-process images even if they won't be cached in memory",
  "eadb4b7": "Sample: Set memory cache size as 1/8 available app memory",
  "969e80c": "Try to cache image on disc first if it can't be decoded directly from network",
  "74926ca": "Issue 129 - Filesystem access from main thread Issue 154 - ANR while accessing to disk cache Not make I/O operations on main thread.",
  "f66aba0": "Issue #143 - 'Can't create '.nomedia' file' logs Create '.nomedia' in cache dir, not in data. L.e -> L.i",
  "734fe78": "LimitedAgeDiscCache: do not precache modified date. fixes GH-102",
  "12778d3": "Issue #108 - cacheKeysForImageViews consumes a lot of memory Map key: ImageView -> ImageView.hashcode(). Remove map entry after successful displaying.",
  "763a171": "Added util methods for work with memory cache (MemoryCacheUtil): find key and Bitmaps for some image URI, remove cached Bitmaps in memory cache for some image URI",
  "0e8e7f1": "Issue #78 - Show log warning if memory cache size is too large or disc cache size is too small",
  "8d788b6": "Example: Increase memory cache limit",
  "71cc118": "Fixed bug 'double displaying' if image is cached in memory",
  "85c7607": "Multithread displaying of cached images. Introduced BitmapDisplayer, DisplayImageOptions.displayer() option. Refatoring, created DefaultConfiguration factory. Made FileNameGenerator an interface (instead of abstract class)",
  "91b8662": "Multithread displaying of cached images (instead of single-thread)",
  "734507d": "Issue #41 - Disc cache directory is changed after app reinstall",
  "89717b6": "Changed API: DecodingType -> ImageScaleType DisplayImageOptions.decodingType() -> .imageScaleType() Implemented possibility to define parameters of images cached on disc (size, compress format, quality) - ImageLoaderConfiguration.discCahceExtraOptions() Refactored ImageLoaderConfiguration. Removed maxImageWidthForMemoryCache, maxImageHeightForMemoryCache, httpConnectTimeout, httpReadTimeout parameters. Added memoryCacheExtraOptions, discCacheExtraOptions.",
  "f0bde37": "Fixed cache dir path for unlimited disc cache. Add Java Docs.",
  "a3b4f8e": "Added StorageUtils.getOwnCacheDirectory(context, dirPath) for creation of own cache folder at SD card's root",
  "e62e2a4": "Introduce FileNameGenerator for disc cache",
  "bfd2892": "Returned FailReason to ImageLoadingListener.onLoadingFailed() Added possibility to retrieve memory and disc caches with ImageLoader.",
  "77003d3": "Issue #26 - Filecache not limited",
  "9cf00a0": "Fixed individual cache dir bug (thanks to Pavel Vodrážka)",
  "49f4b24": "Merge pull request #20 from ligi/memcache_also_trigger_ImageLoadingListener",
  "076484d": "If the image was cached in memory - also invoke ImageLoadingListener",
  "ca93899": "Add methods into ImageLoaderConfiguration for convenient disc cache tuning. Use individual cache directory for limited disc caches.",
  "bd2de50": "Cache refactoring. Implemented disc cache limited by cache size and by file count. Thank @ligi for the idea.",
  "1366ee2": "Introduce versioned Jar library Not use ImageView tags, use cacheKeyForImageView map. Android API level 1.6 -> 1.5",
  "8851bf4": "Issue #18 - Cash directory path Disc cache is at '/mnt/sdcard/Android/[app_package_name]/cache' now by default",
  "ff62a10": "Issue #9 - One image cached in memory for different ImageViews Consider target ImageView size during image getting from memory cache. Now memory cache can contain different sizes of one image.",
  "e7560ef": "Issue #13 - Consider screen orientation Default max image size for memory cache equals device's screen size",
  "bf910d3": "Issue #12 - Crash on clear cache",
  "6387a0c": "Global cache refactoring. Implement ImageLoaderConfiguration usage.",
  "87e0f14": "Joined loading stacks (for cached and for not cached images) into one stack. Cached images are pushed onto the top of the stack. Not cached images are pushed into the bottom of the stack.",
  "7def87b": "Refactoring Added menu for caches cleaning"
}, "AndroidUtilCode": {
  "": ""
}, "AndroidVideoCache": {
  "ba6ba4e": "fix reporting cached percentage",
  "f5dd92e": "allow user to create a custom DiskUsage class (or extend LruDiskUsage class) to implement custom cache keep/delete rules",
  "01bba67": "#112: touch file to check is cache trimming is required after cache completion",
  "e0ee4a7": "tests for cache trimming (#112, PR 114)",
  "9353cde": ":package: 2.6.3: return file:// proxy uri for fully cached files",
  "0f522f2": "notify CacheListener after cache is completed with original file",
  "71c6301": ":metal: cache source's info in db to increase performance (#41, #45)",
  "6c996ea": ":bug: don't close source after processing partial request without cache #43",
  "582832f": "fix default cache size",
  "cd0b411": "ability to check was content fully cached to file or not",
  "c5cf254": "fix cleaning cache in 'sample' app",
  "e7f4719": "explain how to use cache limits",
  "d32e88f": "add disk usage limits (total cache size, total files, unlimited) #5",
  "6125478": "fix :bug: available cache percents callback",
  "f4b9e5c": "fix too long file name for cache. Md5FileNameGenerator tests",
  "5115b96": "allow to use shared proxy with shared cache for multiple clients",
  "983ae8d": "add more samples: multiple video, gallery with preloading, shared cache",
  "39c9ab2": "add ability to know what the file is used for file cache (FileCache.getFile())"
}, "AndroidViewAnimations": {
  "": ""
}, "android-viewbadger": {
  "": ""
}, "AndroidViewHover": {
  "": ""
}, "android-volley": {
  "2bffbe7": "Merge 'Stop logging slow requests outside of debug logs.'",
  "3b4fb45": "Stop logging slow requests outside of debug logs.",
  "564c635": "Merge 'Use a BufferedOutputStream to write cache entries.'",
  "19c4ec0": "Use a BufferedOutputStream to write cache entries.",
  "8f9cb5e": "am 84a0ff18: am 1cd7f9e9: Merge 'Copy cache header for 304 response'",
  "8dabf9f": "am 1cd7f9e9: Merge 'Copy cache header for 304 response'",
  "84a0ff1": "am 1cd7f9e9: Merge 'Copy cache header for 304 response'",
  "1cd7f9e": "Merge 'Copy cache header for 304 response'",
  "19a4037": "Copy cache header for 304 response",
  "d038ae6": "am 7cee5709: Merge 'Improve DiskBasedCache initial scan performance'",
  "7cee570": "Merge 'Improve DiskBasedCache initial scan performance'",
  "aab3ca2": "Improve DiskBasedCache initial scan performance",
  "d36a10a": "am 1593ad9b: Merge 'Volley to create valid NetworkResponse object when cache is disabled'",
  "a2327f3": "am a0ef298f: am 1593ad9b: Merge 'Volley to create valid NetworkResponse object when cache is disabled'",
  "a0ef298": "am 1593ad9b: Merge 'Volley to create valid NetworkResponse object when cache is disabled'",
  "1593ad9": "Merge 'Volley to create valid NetworkResponse object when cache is disabled'",
  "c7e6423": "Volley to create valid NetworkResponse object when cache is disabled",
  "33e2590": "Merge 'Ensure that the cache folder exists'",
  "fc88bb5": "Ensure that the cache folder exists"
}, "Android-Week-View": {
  "dbf464e": "Don't check if already cached",
  "2a67bdb": "improve scroll performance",
  "3f7404f": "improve scroll/fling performance",
  "5dd30d7": "fix cacheEvent",
  "1ff6067": "Option to slow down the speed of horizontal scrolling"
}, "AndroidWiFiADB": {
  "": ""
}, "Android-ZBLibrary": {
  "7845ade": "同步eclipse版至studio版；解决二维码扫描界面开启闪光灯后进入其它界面（onPause），再回来（onResume）闪光灯需要点击两次才能亮；fastjson升级到1.2.24"
}, "android-zxingLibrary": {
  "": ""
}, "AndServer": {
  "8ce4cd4": "Add cache support for AssetsWebsite.",
  "27442ce": "Increase Http cache protocol."
}, "angel": {
  "460a0f3": "Fix partition sort & add lock for responce cache",
  "94359aa": "previous implementation of reindex has performance issue when nodes are not uniform distribution cross [Long.MinValue, Long.MaxValue] we sample nodes to determinate the range that each ps partition responsible for",
  "59c9966": "add param to contril gradient cache",
  "d986237": "[sona]implement modularity optimization",
  "9efb3f8": "[sona]implement modularity optimization",
  "63b5ce8": "ftrl fast",
  "15d9c10": "memory optimization, add conf",
  "94df6fa": "add disk-cache",
  "f14324f": "fast speed for ftrl",
  "340e7cc": "performance optimization for FTRL",
  "576905b": "cache context vector",
  "d6f5798": "[Release-1.5.0] Use FTRL in LR to improve performance",
  "51fbdff": "[ISSUE-307] remove cache for single task in a worker on BSP mode",
  "e9803e4": "Fix slow task check",
  "7b393e0": "[ISSUE-187] improvement l1loss performance for sparse double vector",
  "7595a41": "[BugFix] fix matrix cache manager Syncer",
  "a4be693": "[DOCS] lda performance"
}, "animate": {
  "": ""
}, "ansj_seg": {
  "ff5c38a": "fastindex准备开工"
}, "AntennaPod": {
  "0b3e664": "Prompt for battery optimization (#6362)",
  "cac231a": "Merge pull request #6153 from ByteHamster/fast-document-file",
  "25dd490": "Make loading DocumentFiles faster",
  "45e625d": "Merge pull request #6053 from ByteHamster/database-optimizations",
  "ec92722": "Merge pull request #6039 from ByteHamster/statistics-performance",
  "5e04955": "Merge pull request #5658 from ByteHamster/faster-checkstyle",
  "114a2c1": "Make checkstyle CI faster",
  "e8b712e": "Merge pull request #5577 from ByteHamster/fast-deletion",
  "607b1fd": "Make feed deletions faster",
  "63c00a1": "Recode images to save cache space",
  "324761f": "Merge pull request #5308 from ByteHamster/remove-cache-size",
  "6d63186": "Remove image cache size setting and choose size automatically",
  "ff8461f": "Fix bug leading to cache miss in de.danoeh.antennapod.core.glide.FastBlurTransformation (#5289)",
  "8c73bd6": "Merge pull request #5089 from ByteHamster/episode-cache-touch",
  "d8ca965": "Add link to relevant settings screen in 'Episode cache full' dialog (#5088)",
  "a35694e": "Increase touch target size of episode cache warning button",
  "3e4e638": "Merge pull request #4588 from ByteHamster/recent-pubdate-performance",
  "cd100aa": "Improve performance and memory usage of 'recent pubdate' feed sort option",
  "e091b80": "Merge pull request #4528 from ByteHamster/cache-no-store",
  "983c0a4": "Set cache-control to no-cache",
  "3bb2e2a": "Add custom rewind and fast forward for Android Auto",
  "5017877": "Merge pull request #4271 from ByteHamster/disable-cache",
  "e525177": "Do not cache feeds",
  "98a2567": "Merge pull request #4199 from ByteHamster/playback-service-optimizations",
  "d7772b8": "Made fragment transition a bit faster",
  "69085ae": "Merge pull request #3997 from ByteHamster/more-performance",
  "cc45c78": "Merge pull request #3995 from ByteHamster/fast-scroll",
  "ae81648": "Added fast scrolling to all episode lists",
  "31e02d8": "Merge pull request #3992 from ByteHamster/performance",
  "9ff4687": "Do not cache images, accept old iTunes responses",
  "c0a688c": "Merge pull request #3930 from ByteHamster/cache",
  "41af487": "Increased search performance",
  "6e35861": "Made playback speed test faster",
  "ee737d5": "Merge pull request #3405 from ByteHamster/disable-fast-scroll",
  "c012ac9": "Revert 'Added fast scroll to item list'",
  "1e1cc3e": "Merge pull request #3355 from ByteHamster/fast-scroll",
  "be6c8c7": "Added fast scroll to episodes fragment",
  "b147b3c": "Added fast scroll to item list",
  "2ff4632": "Merge pull request #3313 from ByteHamster/episode-cache-size",
  "3331b66": "Merge pull request #3213 from fabolhak/add_episode_cache_summary",
  "605e02f": "add pref_episode_cache_summary",
  "a338949": "ensure the service continues to run in the event it takes a long time for the service to load the media to play, e.g., streaming over a slow network.",
  "d6d01c5": "also cache .gradle",
  "b156458": "Merge pull request #2646 from vimsick/fast-forward",
  "57b7b09": "Merge pull request #2623 from ByteHamster/webview-cache",
  "8016a35": "Even use expired cache if there is no network",
  "f3ceccf": "add a 'rewind' and 'fast forward' button for android Wear",
  "a8539dd": "Remove cached feed file after parsing",
  "a788f61": "Added tests for preference settings to customize fastforward and rewind delta.",
  "970d41b": "Added preference settings to customize fastforward and rewind delta. Closes #2129. Minor: Fixes title case in preference setting titles Minor: Fixes typo in naming of UserPreferences.getFastFowardSecs to UserPreferences.getFastForwardSecs.",
  "bc7fc3c": "Merge pull request #2030 from mfietz/issue/2026-cache-dialog",
  "405630e": "Merge pull request #2001 from domingos86/flavors-optimization",
  "4ebf9ed": "Improve performance",
  "f1b7839": "Merge pull request #1967 from mfietz/issue/1962-slow-filtered-feed",
  "889ae22": "Merge pull request #1963 from mfietz/issue/1962-slow-filtered-feed",
  "0876061": "Address potential performance issue",
  "8a0f6cb": "Merge pull request #1810 from mfietz/issue/1749-db-performance",
  "4d3fb36": "Merge pull request #1669 from mfietz/issue/1654-default-cache-size",
  "1378b09": "Set default episode cache size to 25",
  "6a6860d": "Merge pull request #1715 from mfietz/issue/1714-icon-unlimited-cache",
  "0677c70": "Do not show full disk icon if cache size is unlimited",
  "6467fc1": "rewind/fastforward labels on videoplayeractivity layout",
  "4f6ba23": "Video Player: Add rewind and fast forward buttons",
  "dfc421a": "Merge pull request #1543 from mfietz/issue/1528-indicator-full-cache",
  "a0488ff": "Merge pull request #1548 from mfietz/move_cache_size_pref",
  "f145a4d": "Move episode cache preference to auto download sub-menu",
  "e5b7f12": "Indicate that episode cache is exhausted",
  "f08f5f8": "Merge pull request #1419 from mfietz/issue/1412-performance",
  "1ae2e82": "Merge pull request #1387 from mfietz/issue/1386-cached-queue",
  "b332942": "Merge pull request #1071 from TomHennen/cacheallimages",
  "83bf67a": "Merge pull request #766 from mfietz/issue/736-episode-cache-too-many-entries",
  "1781400": "Merge pull request #953 from mfietz/issue/946-cache-simpledateformat",
  "33778e3": "Don't cache shared preferences anymore. Some refactoring.",
  "0eab73d": "Merge pull request #896 from mfietz/fix/slow_list_loading",
  "f8fb13e": "Fixes slow loading times.",
  "5fe65f4": "Reorganize episode cache size values",
  "7829ddc": "Show URL in feed info, layout optimizations",
  "85ace6f": "Layout changes and optimizations",
  "fd30ec8": "Set fast forward and rewind time",
  "31e68cc": "more options for episode cache size",
  "ce9f87f": "Removed cachedDescription and cachedContentEncoded",
  "99ac62f": "Automatic download didn't work if episode cache size was set to unlimited",
  "d086579": "Episode cache size can now be set to 'unlimited'",
  "6a784b7": "Added episode cache size preference",
  "825ccd2": "Improved performance of FeedItemMenuHandler's prepare method",
  "ac64bf5": "contentEncoded wasn't loaded if description was still in the cache",
  "6214026": "Save only one image in the cover cache",
  "6fc11c7": "Added cachedDescription and cachedContentEncoded",
  "24775b9": "Created AsyncTask for loading miroguide thumbnails from the disk cache",
  "d593d12": "split image cache into thumbnail- and cover-cache",
  "ac18572": "improved startup performance",
  "96d9421": "Improved startup performance",
  "ebb9e0b": "Improved performance when inserting new feeds into the database",
  "18e8212": "Improved performance when removing something",
  "a66580b": "Improved performance when marking all feeditems of a feed as read",
  "a974358": "Improved feedparser performance",
  "f54593e": "Fixed bug in the feedparser and improved performance of date parsing"
}, "antlr4": {
  "d2db753": "feat: Used dedicated map for visit cache - improves memory and speed in some cases",
  "bec4ec6": "feat: Adds memory optimizations and compile time optional statistics",
  "ce241de": "Merge branch 'jimidle-feature/performance' into dev",
  "2e93c77": "Merge branch 'dev' into feature/performance",
  "2f396b3": "fix: Correct config cache comparators improvie performance",
  "4196a07": "feat: Incorporate predefined variables for empty cache into the one place",
  "c6bbbd3": "feat: Another 50%+ performance improvement",
  "c4a4442": "fix: Change codegen and runtime to eliminate panic() and recover() as flowcontrol - 50% performance improvement",
  "bf37980": "feat: Improve the runtime performance of the go test suite",
  "28ef5b2": "fix: Massive performance improvement by fixing comparison functions",
  "58121d5": "feat: Fix up the parsing cache",
  "4a364b2": "fix: Unbeliveably, the PredictionContext cache did not work!",
  "15670af": "feat: Incorporate predefined variables for empty cache into the one place",
  "adbe946": "feat: Another 50%+ performance improvement",
  "c0f6ece": "fix: Change codegen and runtime to eliminate panic() and recover() as flowcontrol - 50% performance improvement",
  "ea780b7": "feat: Improve the runtime performance of the go test suite",
  "748cefb": "fix: Massive performance improvement by fixing comparison functions",
  "7c72850": "feat: Fix up the parsing cache",
  "62fe420": "fix: Unbeliveably, the PredictionContext cache did not work!",
  "fd4f5fb": "fix: #3758 Extrememly poor performance on poorly written grammars",
  "f403c81": "Add caching support for maven & dependencies. Also, include caching for cpp builds using actions/ccache.",
  "3445718": "Add caching support for maven & dependencies. Also, include caching for cpp builds using actions/ccache.",
  "432aff8": "Add caching support for maven & dependencies. Also, include caching for cpp builds using actions/ccache.",
  "c43982e": "Implement fast parallel lock-free in-process testing for Java",
  "0037a11": "[C++] Cleanup DFA, DFAState, LexerAction, and yet more performance improvements (#3615)",
  "4978f0d": "[C++] Refactor PredictionContext and yet more performance improvements (#3608)",
  "7e4b48b": "[C++] Devirtualize hand rolled RTTI for performance (#3609)",
  "1e35007": "[C++] Drastically improve multi-threaded performance (#3550)",
  "dc95a7d": "[C++] Improve multithreaded performance, fix TSAN error, and fix profiling ATN simulator setup bug",
  "6040190": "Implement Java-specific ATN data optimization (+-2 shift)",
  "ba876a2": "Node was too slow to run this test.",
  "f0391eb": "Python too slow for these tests",
  "b6c9d4e": "Merge pull request #3425 from KvanTTT/swift-runtime-tests-optimization",
  "8b60f21": "[C++] Improve MurmurHash performance for Clang",
  "e811330": "Merge pull request #3365 from KvanTTT/csharp-runtime-tests-performance",
  "d49facf": "Go runtime tests: cache go.mod file, don't run go mod command every test",
  "1493859": "Merge pull request #3326 from jcking/cpp-guid-cache",
  "d3cd381": "Improve C# runtime tests performance: compile C# runtime once per session and use .dll in test projects",
  "7fb7373": "Merge branch 'master' into cpp-guid-cache",
  "18f2471": "[C++] Upstream various performance, build, and best practice fixes",
  "dabdfd0": "[C++] Use faster alternative to dynamic_cast when not testing inheritance",
  "367505e": "add cacheDartPackageConfig",
  "d152440": "javascript performance optimization",
  "6990edd": "Improve python3 performance via addition of __slots__",
  "19adda3": "Add thread_local again in StringUtils.h due to better performance",
  "7cb0d42": "dart test performance with aot compilation",
  "d82697d": "Merge pull request #2657 from lmy269/miliu/fixjscache",
  "1736cdd": "Merge branch 'miliu/fixbyhashcode' into miliu/fixjscache",
  "16ce084": "Revert 'fix cache issue'",
  "5d4c1e2": "fix cache issue",
  "06cee86": "Made converters thread_local instead of local to function for performance",
  "f3157d9": "Made converters thread_local instead of local to function for performance",
  "e6feaeb": "Enable some performance tests on Swift.",
  "b594b24": "csharp target builds faster so use it for main test",
  "f8e63d5": "[Swift] Remove HashMap and fix Parser caches.",
  "bd4f1a9": "Merge pull request #2122 from ewanmellor/swift-remove-recognizer-caches",
  "633de4a": "Merge pull request #2118 from ewanmellor/swift-let-sharedcontextcache",
  "5809f71": "Merge pull request #2091 from ewanmellor/travis-cache-dotnet-osx",
  "4bff008": "Merge pull request #2082 from ewanmellor/appveyor-cache",
  "1813da0": "Merge pull request #2079 from ewanmellor/travis-dont-cache-antlr",
  "a465f77": "Add cache entries to appveyor.yml.",
  "6b504fe": "Remove ~/.m2/repository/org/antlr from the Travis cache.",
  "242dbe0": "Add cache entries to .travis.yml.",
  "3a7c6a6": "Merge pull request #1910 from mike-lischke/optimizations",
  "cdfe310": "Merge branch 'optimizations' of https://github.com/mike-lischke/antlr4",
  "35cf1ba": "Merge pull request #1907 from mike-lischke/optimizations",
  "3095de9": "All tests passing. But slow.",
  "5fffe4b": "[dotnet] try to get test run faster; update from 1.0.1 to 1.0.3; fix test dir removal not recursive",
  "9a13551": "Fix performance issue in PredicitionMode",
  "e810ca6": "Fixed regression introduced by wrong optimization. Fixes #1708.",
  "1cf2885": "Merge branch 'master_upstream' into optimizations",
  "c874ab6": "Merge branch 'master' into optimizations",
  "5e936de": "Merge branch 'LR-loop-fix' into optimizations",
  "e1fb0b6": "C++ implementation of the LR-loop optimization.",
  "1eeaf20": "Initial implementation of the LR loop optimization in the C++ target.",
  "1f953da": "Merge pull request #1441 from ericvergnaud/poor-left-recursive-rule-performance",
  "d9f04b0": "Merge branch 'poor-left-recursive-rule-performance' into optimize-javascript-runtime",
  "595fb08": "Merge pull request #1427 from ericvergnaud/poor-left-recursive-rule-performance",
  "bd7df07": "start with the slow builds",
  "fdee94d": "Merge pull request #1404 from parrt/expr-performance-test",
  "c182e3d": "Fixes #994 poor performance in left-recursive expressions with very large expression input phrases; builds off of @sharwell solution that explicitly checks for key return states in expr rules",
  "a4e3438": "Some small optimizations.",
  "9766dff": "Javascript performance. Was add new string.hash function - murmurhash3_gc.js (https://github.com/garycourt/murmurhash-js/blob/master/murmurhash3_gc.js). Performance of the function increased in two times",
  "6f62821": "More optimizations of the runtime.",
  "47e268d": "Merge pull request #1218 from ericvergnaud/python-performance-issue",
  "b8fcb5f": "More performance increase for C++ target (25% now).",
  "8127946": "JS: LexerActionExecutor cached hash string name clashes with function",
  "4617daa": "Merge pull request #987 from ericvergnaud/improve-hashing-performance",
  "27855f7": "remove slow asserts",
  "cfb557c": "add performance test",
  "c70c1ba": "Disable annotation processors during testing for performance",
  "75486e0": "Added performance testing for atomic operations",
  "a8f461f": "add performance testing for atomic operations",
  "6c531dc": "Merge pull request #720 from sharwell/cache-java-templates",
  "1d2a153": "slight performance improvement",
  "4b78737": "Remove logging code which has a detrimental performance impact on processing recursive imports",
  "fd194f0": "add parrt summary of conversation with Sam about precedence DFA optimization",
  "4c8b233": "Updated .gitignore (profiling results, test results, and Roslyn cache as a directory)",
  "407b568": "Merge pull request #51 from sharwell/roslyn-cache",
  "9a3900c": "Ignore the Roslyn IDE cache",
  "95596b4": "Update ParserFactory.getLL1EBNFBlock to ensure it is correct even if additional ATN optimizations are implemented",
  "336a119": "Add a comment describing a possible future optimization to applyPrecedenceFilter",
  "cc045fb": "Improve CommonToken cloning performance, and update documentation",
  "2f54b35": "Mark field PredictionContextCache.cache final",
  "14107cc": "Add regression test for expression performance (closes #192)",
  "9432bfb": "Do not cache the results of a failed predicate evaluation in the DFA (fixes #398)",
  "611e5eb": "Significantly improve the performance of JavaUnicodeInputStream.LA(1)",
  "cb1ea47": "Merge pull request #231 from sharwell/performance-tweaks",
  "ebf8cd5": "Remove automatic left factoring declaration from Java.g4 since the processing is currently very slow",
  "843fc1c": "No need to cache Interval instances now that it's a struct",
  "c522578": "Merge branch 'testperformance'",
  "069652c": "Merge branch 'basetest' into testperformance",
  "5729578": "Ant build.xml: Improve build performance avoiding an unnecessary directory copy",
  "fb865ce": "Maven builds: if mvn is not run with -Psonatype-oss-release, then 1) javadocs are not generated, 2) source jar is not generated, 3) artifacts are not signed, 4) shaded (complete) jar is not generated. Development cycle install ~4:1 faster, clean+install ~2:1 faster",
  "c99703e": "Remove call to hashCode that was slowing down equals",
  "64a4114": "Make debug fields compile-time constants to improve release runtime performance",
  "a0dd1b4": "Merge branch 'test-performance-features' of git://github.com/sharwell/antlr4",
  "12b2c34": "Lexer uses strictly-ordered alternatives within a rule. Simplifies code, increases performance when non-terminal (lexer rules) depth is limited, and actually fixes non-greedy behavior",
  "01bbce6": "full LL is always correct now, if slower. Stops prediction when resolvesToJustOneViableAlt(). SLL always uses heuristic",
  "e7ece0e": "got fast prediction termination with exactAmbig option that forces ANTLR to scan ahead until it identifies the true ambiguity.",
  "78d8002": "allow atn state optimization; sam fixed.",
  "c2b49bd": "pull in Sam's ATN alt collapsing optimizations with optimizeStates off as it causes a class cast exception.",
  "c7d1ea7": "Merge remote-tracking branch 'sharwell/atn-optimization'",
  "88dedbd": "added mergeArray cache, which didnt help java much but made massive diff to Go grammar. a file, nat.go, went from 2min to 3s in speed. Fixed bug where SLL had preds but they ORd to NONE. made it resolve to min alt. DoubleKeyMap moved to runtime.",
  "75dcb75": "added mergeArray cache, which didn't help java much but made massive diff to Go grammar. a file, nat.go, went from 2min to 3s in speed.",
  "5019278": "Add ATN optimization to collapse multiple alternatives to a single SetTransition where possible. Currently disabled for parser grammars since the code generator doesn't support set transitions.",
  "1f4df2e": "Add ATN optimization to remove null state entries and renumber the remaining states",
  "f9bacf5": "Add ATN optimizer (currently doesn't provide optimizations)",
  "06d7c15": "slow again since i had to remove full LL context->alt cache (wasn't correct). But, threaded now makes bigger diff than before.",
  "b0c9a9c": "tried optimization concerning recomputing DFA states in DFA, but didn't help much. left in as comment for now.",
  "79594a9": "synchronized lexer. just as fast now to build new parser/lexer each iter in TestJavaLR",
  "680df17": "rm transient context cache for closure computations; slight speed improvement maybe. less complex.",
  "eda95f7": "DFA cache on again; dropped from 25 to 16M!!!",
  "2ee5a2f": "release entire ConfigHashSet upon readonly. sames some mem and is faster.",
  "8279c3d": "turn on local context cache.",
  "faafe8d": "no local/shared predctx caches. remove spurious array creation.",
  "86a4f26": "still has dfa and local predict ctx cache, but doesn't help much, and takes time. Eval preds as we pass them in full ctx mode; no sempred ctx in configs then. removed LANDMINE!!!!!!!!! some lame code that uses fields like _startIndex; fix that. added bail option to testjavalr. 18s to parse java.* with javalr full ctx now.",
  "2ae4d4e": "add ctx cache to merge op. now i get optimal graph it seems. doesn't seem longer for java.* with JavaLR. still landmine in Pattern.java, Foo.java. Made toDOTString sort predctx nodes by id for repeatable tests. updated unit tests.",
  "ac4f005": "add ctx cache.",
  "760c403": "Use arrays T[] instead of List<T> to save memory in the cached DFA",
  "344a56f": "finished inter-dfa-state-context-cache but doesn't fix landmine. add debug_list_atn_decisions field.",
  "54d2306": "merge of array and $ for rootIsWildcard was broken. Fixed JavaLR parsing. Still sticks on Pattern.java but not 5 hours anymore--faster up til that landmine.",
  "4c1e9b4": "Improve performance of equals",
  "f80166b": "Rewrote the unbuffered token stream to use a type-adjusted version of the unbuffered character stream. Simpler and I get to remove fast queue and lookahead string classes. These unbuffered streams always prime the pump with the 1st single.",
  "dd0944b": "Simplify and improve performance of BufferedTokenStream.fill",
  "5018082": "Add boolean field ParserATNSimulator.reportAmbiguities (default true). When false, ambiguous alts aren't reported which allows usage of (the faster) incomplete semantic predicate evaluation even within execATN.",
  "5fb389b": "Improve lexer performance during warm-up by tracking DFA states within exec (ATN) and using existing edges when available",
  "d589011": "Small fixes to the Java grammars used in the performance test",
  "dc82eda": "Summary: we can have lexer commands like -> skip now. moved model.actions package to chunk type(foo) didn't match. ATNBuilder.g now tracks the outer alternative number and calls new factory commands on the lexer commands. Removed unnecessary resolveWithPredicate field from ATNConfig Added lexerActionIndex field to ATNConfig since we need to track whether we passed an action in an alternative will rule in the lexer. Renamed ruleIndex in DFAState and added the lexer action index so that we can execute lexer actions from the DFA. added functions to the grammar tree visitor for the lexer commands. Added templates for the lexer commands. Augmented the lexer ATN factory so that it constructs plain old actions from the lexer commands it finds. That way, the code generator doesn't know any different and generates an action. Augmented the lexer ATN simulator so that it fires a proper action index now. previously it only used the rule index, which of course doesn't work when you have more than one action in a rule. rm'd dup code from OutputModelController altered the epsilon edge removal optimization so that it could not remove actions in lexer rules. Added list of valid lexer commands in Rule.",
  "a923ad8": "Major update to v4. I backed out a change I made on Christmas then mistakenly prevented any lexer DFA creation. Per http://www.antlr.org/wiki/display/~admin/2011/12/29/Flaw+in+ANTLR+v3+LL%28*%29+analysis+algorithm I fixed a major flaw in ANTLR's notion of context. To do that, I needed to create a new LoopEndState, with all of its fanout to the serialization and parser ATN construction. got a very good start on ParserATNPathFinder, which uses basic recursion to find all possible paths and return a tree with the possibilities. I left it in the condition where he would sometimes loop forever; it needs to track sets of configurations in the busy set; it using states at the moment. added a new signal from the interpreter: reportAttemptingFullContext. I fixed a bug where configuration sets derived from a configuration that had reachesIntoOuterContext>0 were not being considered as dipping into the outer context. The ambiguity checker needed to switch so that a check for exact matches not suffixes when doing full context. It's faster at the very least for full context. added some more support routines to DFA. Added TraceTree in support of the new ParserATNPathFinder.",
  "af8e1ed": "v4: Run unit tests in same process (30% performance improvement)",
  "ae74881": "strip epsilons between alternative elements and also stripped the final epsilons before block ends. added an ATN visitor for general use. updated all of the unit tests so they pass new smaller ATNs. had to do some work in the serialization and deserialization to handle state numbers without state information. did not want to reorder state numbers during optimization.",
  "38c69af": "v4: Back out changelist 9507 (PredictionContext optimization)",
  "11b6fa1": "v4: PredictionContext optimization",
  "1ba52d6": "v4: Add configurable performance unit test",
  "fb3de17": "v4: Add BaseRecognizer.isExpectedToken - *massive* performance improvement in DefaultErrorStrategy.sync()",
  "919e3a1": "Small optimization",
  "c18898a": "PDA for lexers are too slow; working DFA back in. DFA construction was nondeterministic due to sets not ordered sets.",
  "a017bb8": "NOT eval was messed up; handles java lexer now (slowly)",
  "c310c3b": "optimization: don't add intermediate closure addrs to closure; did same for parser DFA construction as i did for NFA VM.",
  "62aa952": "optimization: don't add intermediate closure addrs to closure; we ignore them during reach anyway. saves time/space.",
  "2faaf7b": "added cached hashcode check to equals"
}, "Ant-Media-Server": {
  "1b3516c": "Merge pull request #3758 from ant-media/refactor/improve-mapdb-performance",
  "c27246b": "Merge pull request #2689 from ant-media/refactor/rtmp-optimization",
  "8449e2b": "Merge remote-tracking branch 'origin/master' into refactor/rtmp-optimization",
  "a37afce": "Increase tomcat process cache",
  "d4174ad": "cache added for total webrtc viewer count",
  "daa6109": "compiled and added Apache Portable Runtime (APR) based Native library for Tomcat for https://www.fatalerrors.org/a/springboot-solves-apr-based-apache-tomcat-native-library-tips-under-linux.html for performance",
  "0dc0f77": "Remove Thread.sleep and make some optimizations",
  "ea8ce00": "Refactor code optimizations.",
  "03bd7eb": "Update webrtc lib for linux with optimization in sendinv dieo/audio streams",
  "94325b6": "Update webrtc lib with optimization in sending video/audio streams",
  "65d3ad8": "Merge pull request #1163 from ant-media/feature/performance_improvement",
  "c10776e": "Merge branch 'master' into feature/performance_improvement",
  "5af7a5d": "Merge branch 'feature/performance_improvement' of https://github.com/ant-media/Ant-Media-Server.git into feature/performance_improvement",
  "7fe0db8": "Update native linux lib(improved performance)",
  "e34170c": "Update native mac lib(improved performance)",
  "b96bbd1": "Merge pull request #1129 from ant-media/fix/performance",
  "ee4862e": "Update native lib for mac that improves performance",
  "a9342f3": "Merge branch 'fix/performance' of https://github.com/ant-media/Ant-Media-Server.git into fix/performance",
  "741ba55": "Update native library has improved performance",
  "4a986ad": "Merge pull request #1093 from ant-media/fix/performance",
  "9f159bb": "Merge remote-tracking branch 'origin/master' into fix/performance",
  "6adad58": "Update native libraries that has better performance",
  "98c8c53": "code optimization improved.",
  "d73da38": "Disable creating javadoc in order to have faster build"
}, "APIJSON": {
  "813c2dc": "Merge pull request #414 from Tencent/dependabot/maven/APIJSONORM/com.alibaba-fastjson-1.2.83",
  "7c2443d": "Bump fastjson from 1.2.79 to 1.2.83 in /APIJSONORM",
  "5525eab": "完善对 APP JOIN 同层和跨层的校验；完善对 APP JOIN 的 SQL 执行与缓存次数统计；解决同层 JOIN 新增的报错 bug；解决 APP JOIN 副表返回内部字段 @RAW@LIST；fastjson2 改为 1.2.79",
  "c041000": "Merge pull request #401 from NeoGitCrt1/fastjson2",
  "89accda": "fastjson up2 2.0.4",
  "d803766": "升级自身, fastjson 版本分别为 5.0.0, 1.2.79",
  "1f52927": "fastjson 版本降到 1.2.74；项目版本升到 4.5.1",
  "1530864": "Upgrade fastjson",
  "c416514": "升级 fastjson 版本为 1.2.74（测试 1.2.75 下载不了 Maven 依赖）",
  "2b2633f": "删除 APIJSONFramework，只用 apijson-framework； APIJSONORM：fastjson 升级到最新建议稳定版 1.2.73；自身版本提高到 4.2.1",
  "7aee498": "Server：统一 pom.xml 中的 apijson-orm，apijson-framework，fastjson 依赖",
  "6b62775": "Server：解决全局默认的 @explain 或 @cache 放到子查询内导致 SQL 语法报错",
  "9d2460c": "APIJSONFinal: 与 APIJSONBoot 同步代码和依赖；APIJSONBoot: 升级 fastjson 版本；纠正版本号",
  "772c2f9": "Server:新增全局默认的 @explain 和 @cache；优化 AbstractSQLExecutor 的缓存",
  "f59a653": "Server:去除数组关键词 explain 和 cache",
  "fa79888": "Server:JSONObject 新增对象关键词 @explain 和 @cache 替代 JSONRequest 里的数组关键词 explain 和 cache",
  "38b09a8": "Server:新增数组关键词 cache 和 explain；解决 id{} 和 id 同时存在有时候 contains 因为类型不一致导致判断错误而 throw NotExistException；SQLConfig 删除多余的 cacheStatic",
  "ea982f1": "Server:fastjson升级为1.2.55；打包apijson-server3.4.8.jar",
  "b90ac05": "Server:与客户端同步JSON, JSONObject,JSONRequest,JSONResponse；Client：优化JSONObject，解决get返回null和多层encode问题；fastjson版本升级到1.2.24；"
}, "api-samples": {
  "": ""
}, "Apktool": {
  "545ba6a": "fix: remove max-parallel and allow fast fail",
  "3b31189": "build: cache gradle based on java version",
  "5d383e4": "Basically, on import getResSpec is called multiple times and very often throws an exception. Returning null is much faster and therefore in cases where the caller does not rely on a thrown exception, it may use the new getResSpecUnsafe method.",
  "285da38": "Merge pull request #1187 from dnault/bugfix/1186-framework-parsing-performance",
  "237283c": "cache travis deps & allow failure for openjdk while travis fixes it",
  "f3582b6": "buildUnknownFiles optimization",
  "bd566f2": "Merge branch 'thuxnder-performance'",
  "c836995": "optimizations to ApkDecoder regarding reading compression of resources.arsc"
}, "apollo": {
  "0b8d655": "Fix the issue of case sensitivity when matching keys with cache enabled (#4820)",
  "e11854f": "Improve the documentation for the config-service.cache.enabled configuration property. (#4810)",
  "cf99a85": "Update the documentation description for 'config-service.cache.enabled' (#4785)",
  "98511a8": "upgrade fastjson to 1.2.83",
  "0f7dc80": "Optimize performance of '/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces' interface queries (#4473)",
  "0ca7eb0": "optimization apolloconfigdb-v190-v200-after.sql (#4470)",
  "96ee53a": "Allow disable apollo client cache (#4199)",
  "75f9950": "optimization omits unnecessary time conversion (#4118)",
  "e638728": "add spring configuration metadata for property names cache (#3879)",
  "8d82dc1": "support setting apollo.cacheDir from app.properties (#2317)",
  "ea60157": "fix the performance issue when calling getHostName (#2152)",
  "41450a5": "adjust wait timeout for tests which might be slower than others",
  "d80537a": "Merge pull request #1535 from nobodyiam/adjust-cache-control",
  "2a537f4": "adjust cache control so that entry htmls are not cached, as we need them to trigger 302 in case user is not logged in",
  "5258ba1": "support setting apollo.meta, app.id, apollo.cacheDir and apollo.cluster from spring boot configuration files, e.g. application.properties, bootstrap.properties, etc",
  "612f196": "Merge pull request #1274 from nobodyiam/config-local-cache-dir",
  "92ee12c": "Merge pull request #1002 from nobodyiam/portal-cache-control",
  "7926091": "portal add static resource cache control",
  "e2b5f08": "write builder function for entity App and optimization some null judge",
  "4ff0f79": "refactor the ResourceUtils for performance",
  "2a83482": "Merge pull request #719 from nobodyiam/configservice-cache-merge",
  "699009f": "Config service cache and namespace name normalization",
  "25df182": "enlarge instance config cache limit",
  "95cf37c": "dramatically improve the apollo client unit test performance",
  "6a5f57e": "store parse result in cache",
  "b86e754": "Merge pull request #525 from nobodyiam/apollo-client-performance",
  "998bcf7": "optimize ConfigService.getConfig performance",
  "1eaf379": "Use cache for notification controller",
  "c40f8ff": "add client local cache dir",
  "525a2b8": "add spport for windows local cache dir",
  "80ed393": "remove mvn site for travis ci since it is too slow",
  "d3168bb": "Merge pull request #338 from nobodyiam/configfile-cache-hit",
  "ab38ec3": "record cache hit statistics",
  "5136361": "adjust local cache directory logic",
  "eb9ebe2": "Merge pull request #254 from nobodyiam/startup-faster",
  "8130146": "improve startup performance",
  "be11851": "Merge pull request #249 from lepdou/adminservicecache",
  "c5e0ca6": "Merge pull request #227 from lepdou/optimization",
  "4ef524e": "Merge pull request #225 from lepdou/optimization",
  "761b9bb": "Merge pull request #224 from lepdou/optimization",
  "5346a55": "Merge pull request #223 from lepdou/optimization",
  "41ca65f": "Merge pull request #222 from lepdou/optimization",
  "d6a65c5": "remove active env cache",
  "dc49379": "Merge pull request #185 from nobodyiam/performance-tuning-merge",
  "d259b37": "Merge pull request #176 from nobodyiam/tomcat-concurrent-performance",
  "12f0586": "Fix service caches bugs",
  "4c0a488": "Merge pull request #70 from nobodyiam/client-local-cache",
  "b73ecac": "Add local cache file persistence"
}, "AppUpdate": {
  "baefffd": "1，去掉对fastjson的依赖 2，简化json协议 3，新增自定义接口协议"
}, "archi": {
  "": ""
}, "Arduino": {
  "c432669": "UpdateCheck microoptimization",
  "1d21f0c": "CommandHistory optimization",
  "324a9bc": "Merge pull request #9023 from mattiabertorello/add-file-cache",
  "9ce5101": "Merge branch 'master' into add-file-cache",
  "4da41f7": "Complete disable cache if the file is not a *_indexes",
  "2d04282": "Delete cached file if the signature verify fail",
  "a8c7184": "Do not cache the core or the library because are too big and will be downloaded only one time",
  "a7d395f": "Add cache.json file and improve stability",
  "207128d": "fix the misleading exception throw on windows - The file will be close before delete it - Some refactoring of the downloader cache",
  "6592c42": "Add the file downloader cache to make faster the library/boards manager",
  "bf42f26": "Merge pull request #7935 from facchinm/fix_osx_slow_menus",
  "986d67f": "Serial monitor timestamp: cache newline status",
  "8128525": "Improve performance on serial monitor 'Show timestamp'",
  "cba0435": "Add missing translation string (cached core)",
  "5b6adec": "add preference checkbox for core cache",
  "7e9f19c": "MacOSX: faster startup, fixed double clicking on a .ino file. Fixes #4057",
  "5b84aef": "Build path is now a function of sketch path. This allows to recycle previously compiled files even when working with different sketches at the same time. In such cases, recompiling is way faster",
  "64e52d8": "Implement bitbang SPI for slow clock devices. (Sylvan Butler).",
  "9f1b95d": "Windows: IDE startup feels faster",
  "e15ba64": "New console: replaces previous EditorConsoleStream with one that's faster and doesn't discard end chars. See #2798",
  "9165af4": "By omitting curly braces, your code won't run faster. Your colleague will run slower.",
  "1064554": "Stepper: optimization on timing calculations",
  "8c83281": "Do not cache PrinterJob instances. Cache is evil",
  "bd8f793": "Saving a couple of variables won't make the IDE any faster, but will make the dev slower",
  "fd3ec25": "Merge pull request #2268 from arduino/ide-1.5.x-slowed-down-consoleread",
  "98da28a": "Bridge: slowing down ConsoleRead a bit to keep the python side of the Bridge from consuming 100% of the CPU",
  "44a6cbf": "Enabling link-time optimization. See #660",
  "88a2ca1": "Print.print optimization. Closes #1760",
  "0d07ff9": "First (slow) implementation of 'copy everything from sketch www folder to yun's www/sketch folder, if available'",
  "0d47f22": "working on #223: Auto-detection of serial ports. Mac version ready even if a bit slow",
  "99f2a27": "Stream '_timeout' field and related methods are now protected instead of private. This allows better optimization on classes that extends Stream without losing timeout capabilities.",
  "6bbc7b2": "faster LED breathing animation in bootloader",
  "8c0fdf1": "Small optimization in HardwareSerial.",
  "13e3ba8": "Small optimization in HardwareSerial.",
  "6750e67": "Building sketch first (so errors appear faster).",
  "a403c19": "Cast to encourage optimization of Serial ring buffer index calculations.",
  "722b93d": "Changing String::toCharArray() and getBytes() to accept a buffer, rather than return one. That way they don't expose the internal representation of the String class, allowing future optimization. Thanks to Paul Stoffregen.",
  "3ea0196": "Resynced with Processing/Wiring IDE code: improved auto-format, better performance for EditorConsole, etc...",
  "aa9ed15": "Implemented PWM on pin 11; slowed PWM frequency on pins 9 and 10; documented changes in readme.txt."
}, "Aria": {
  "e23a4d9": "忽略cache"
}, "armeria": {
  "9e7c016": "Return cached aggregated message for following withPooledObjects call (#4449)",
  "94a1bf4": "Revamp DNS resolver and DNS cache (#4133)",
  "2caa0f8": "Add a benchmark that measures gRPC server performance with `ghz` (#3814)",
  "d78b52f": "Cache `Endpoint`s for better performance (#3772)",
  "e08b6ea": "Invalidate `RequestLog.toString*()` cache when sanitizer functions are different (#3758)",
  "54b7090": "Make HttpHeaders more cacheable (#3714)",
  "3ba7240": "Add fastutil dependency to fix fastutil linkage error (#3713)",
  "627cd4e": "Allow to change GitHub actions cache key with secrets (#3655)",
  "c54e200": "Fix localArmerialPortMetadata cachekey (#3301)",
  "8d86b4b": "Clean up cacheSpec and backoffSpec documentation (#3165)",
  "587efe7": "Use hard links for build caches (#2929)",
  "fe60cd5": "Fix a bug where causes cache misses from RouteCache (#2358)",
  "0b37664": "Make `QueryString{Encoder,Decoder}` even faster (#2336)",
  "bdecd1e": "Improve the performance of query string encoding/decoding (#2333)",
  "ef3b70e": "Fix not to cache DNS failure when timed out (#2231)",
  "25561af": "Fix a bug where .appveyor.sh fails to update the build cache",
  "3564f8a": "Use negotiation cache to check if an endpoint does not support … (#2086)",
  "7f27eeb": "Fail fast when configuring a server for TLS but HTTP/2 is not available. (#1774)",
  "f5251f1": "Invalidate HttpFileService cache if file's lastModifiedMillis is changed (#1404)",
  "9c98a02": "Remove unnecessary firstFrame optimization. (#1391)",
  "f5cc473": "Remove unused cache",
  "6089330": "Add Yarn cache directory to CI settings",
  "80cd274": "Add a simple benchmark to check retrofit performance. (#1238)",
  "d3334ce": "Only cache non-exact path mappings when opted-in by the service. (#981)",
  "83cd15a": "Add a cache to parsed path+query / validation. (#856)",
  "8c6c6c6": "Replace HttpVfs entry cache to Caffeine cache (#689)",
  "7b2e523": "Add a function that removes inside caches when the last subscriber starts to subscribe to StreamMessageDuplicator (#701)",
  "8bed902": "Do not cache the files that are not useful",
  "8ea7e35": "Do not cache PathMappingResult when query string exists (#588)",
  "1b928f9": "Add support for slow JSON GRPC marshalling. (#544)",
  "22b709f": "Do not let Travis CI cache .lock files",
  "b18e28a": "Use localCheckout option for maven-release-plugin for faster release"
}, "ARouter": {
  "38c0eea": "update fastjson version.",
  "b523c55": "Update annotation package support cache inject config.",
  "071b48d": "Fix autowired performance issues and use alias name replace field name when inject.",
  "4716119": "Architecture optimization, use ‘ARouter service’ implements interceptor logic."
}, "arthas": {
  "90e3eb2": "upgrade fastjson to 2.0.31 #2498",
  "b73475f": "upgrade to fastjson2. #2498",
  "e96f927": "upgrade fastjson to 1.2.83_noneautotype. #2199",
  "572282c": "upgrade fastjson to 1.2.83",
  "a4be43d": "Revert 'fastjson IgnoreNonFieldGetter'",
  "fc37ff7": "upgrade fastjson to 1.2.80-fix. #2153",
  "c214f2f": "fastjson IgnoreNonFieldGetter",
  "bbb5082": "shade fastjson (#2104)",
  "50a2e98": "fastjosn ignore getter error. #1661",
  "cf279a9": "upgrade fastjson to 1.2.75, fix http api ClassNotFoundException: java.time.LocalDateTime. #1619",
  "1fca980": "Add dateformat option for fastjson (#1623)",
  "e392950": "disable fastjson circular reference feature. #1614",
  "6a3d9fa": "Some code optimization (#1608)",
  "4f772c3": "upgrade fastjson to 1.2.71. #1255",
  "f63aa14": "only load xterm device, memory optimization (#1217)",
  "3a12237": "optimization of tunnel server README.md (#1149)",
  "ae2c372": "Upgrade fastjson to 1.2.68 (#1188)",
  "9a98cc9": "Upgrade fastjson to 1.2.67(#1071)",
  "b48aa0c": "fix job redirect cache location. #695",
  "f73bf96": "make MathGame faster"
}, "ASimpleCache": {
  "17fa385": "Adding example of using the file cache.",
  "ee9601b": "Adding example of using the file cache.",
  "d8c3a68": "Creating 'get' method to get the stream data saved in cache.",
  "5eb7af8": "Implementing a cache using 'FileOutputStream'."
}, "async-http-client": {
  "d4f1e58": "Cookiejar optimization, close #1580 (#1708)",
  "5995bba": "Realm.Builder doesn't properly reset inner cached MessageDigests, close #1196",
  "dfc01fa": "Fix NPE on scheduleReadTimeout on fast requests, close #1068",
  "c555e45": "Initial cut of a way to fast read ByteBufs",
  "027edd6": "lenta.ru is too slow",
  "1b7c9e1": "New options for configuring SSLSession cache, close #837",
  "53206a1": "Exit fast on 'Connection reset by peer', close #821",
  "f95a4e3": "Made logger static to improve performance. Fixed logger name, back port #749",
  "d05f0cf": "Made logger static to improve performance. Fixed logger name.",
  "028ede3": "Don't depend on cache key for determining if ssl, close #690",
  "a7410fe": "Drop sync connect as it's a performance killer with Netty 4",
  "586ed3e": "Status instances are not cached by the codec (message might change)",
  "b3a95b9": "Use cached HttpMethod instances",
  "8f7752d": "- Rework previous fix. - Switch from cached thread pool to fixed thread pool.",
  "ce896c8": "Reset cached uri vars on setUrl",
  "2d70a39": "Added an option for netty connection pool to limit the time when connection can be put back to pool. In case of Amazon Cloud DNS records can change in seconds, and taking into account that AHC caches already resolved connection and never re-resolve DNS records if response if ok, introducing option to limit life for cached connection, to be able to gracefully route traffic to new host in case dns records changed.",
  "eb48ad5": "added performances page",
  "5f8ba4c": "+ Minor cleanup to the get() calls. + Add connection pool logging. + Fix cleanup() method to remove the HttpTransactionContext before offering the connection to the pool. + Switch queue implementations in the pool. + Performance changes: - make methods/classes of nested classes package private to eliminate parent class access. - cache the result of Request.getUrl() within HttpTransactionContext. - make the population of the AHC headers map lazy instead of performing the initialization during construction.",
  "01a0416": "Ensure we mark the connection as not-to-be-cached if the server response includes Connection: close.",
  "fb05cd6": "Do not invoke the HostVerifier if we already know we will allow it anyway. Calling getHostname() is a performance bottleneck",
  "8d46c77": "Do not invoke the HostVerifier if we already know we will allow it anyway. Calling getHostname() is a performance bottleneck",
  "39485c1": "Small optimization for issue 99",
  "07336d5": "Drain channel and cache it if the keep-alive header is there, close it if not",
  "83e5fdd": "Improve ConnectionsPool implementation and performance. Patch provided by Laurent Quérel",
  "abd79df": "Wrap the cached bytes as toByteBuffer doesn't return the exact bytes",
  "e65f06f": "Make the test more robust as it may not fail on slow machine",
  "91819d9": "Do not use the polling value for setting keep alive. Also use a non Connections pool when set to false to improve performance",
  "d75c2d4": "Small optimization, do not set the Range value when there is no bytes transferred.",
  "4545968": "Disable those tests for now as they aren't predictable. The server may reply faster than 3 seconds",
  "d0a9280": "Invoking setReadable may throw a ClosedChannelException. In that case make sure the channel is never cached",
  "3f6119b": "Fix for http://github.com/AsyncHttpClient/async-http-client/issues#issue/16 ('NettyAsyncProvider optimization: avoid invoking onStatusReceived and onHeadersReceived multiple time per transaction')",
  "cb64317": "Make sure we decrement the active count when Netty times out our idle cached connections",
  "95fd4d3": "Fix Thread Race issue that ends up with corrupted response. The problem occurs when a Channel cached and re-used from the connection pool, where many requests could potentially by handled by the same Channel and erasing each other Future and response. The fix consisted of making sure a Channel is alive with a single request",
  "1835e28": "Make sure the Channel is always valid when we retrieve it from the cache"
}, "atlas": {
  "ce3c94b": "disable pro guard cache",
  "b9032e3": "修复mtl.fastProguard=false时，只读取consumerProguard中keep规则的逻辑",
  "9d5e07f": "dexcache",
  "d0c85e6": "[atlas-gradle-plugin] no need to judge string size for fastmultidex",
  "e8b2f6c": "[atlas-graddle-plugin] keep java res when fastproguard",
  "8feb282": "[atlas-graddle-plugin] bugfix fastmultidex",
  "3d14c59": "[atlas-graddle-plugin] perf for fastproguard",
  "ff31187": "Merge branch 'gradle/fast_tpatch' into dev",
  "df9c9a1": "Merge branch 'dev' into gradle/fast_tpatch",
  "a112501": "Merge branch 'dev' into gradle/fast_tpatch",
  "3dbbd6c": "Merge branch 'atlasplugin/fast_proguard' into dev",
  "f281b91": "Merge branch 'atlasplugin/fast_proguard' of https://github.com/alibaba/atlas into atlasplugin/fast_proguard",
  "e8134c8": "Merge branch 'atlasplugin/fast_proguard' of https://github.com/alibaba/atlas into atlasplugin/fast_proguard",
  "c8b4f8d": "Merge branch 'atlasplugin/fast_proguard' of https://github.com/alibaba/atlas into atlasplugin/fast_proguard",
  "803ccb9": "[atlas-gradle-plugin] add oss cache to proguard",
  "e453441": "[atlas-gradle-plugin] add oss cache to proguard",
  "1b3e82e": "[atlas-graddle-plugin] 优化 fast multidex dexmerge",
  "f14c395": "[atlas-graddle-plugin] main dex cache",
  "d38f286": "[atlas-gradle-plugin] fast proguard can package out apk only",
  "273c93a": "[atlas-gradle-plugin] add oss cache to proguard",
  "8682c71": "[atlas-gradle-plugin] add oss cache to proguard",
  "39b5140": "[atlas-graddle-plugin] 优化 fast multidex dexmerge",
  "0b89ef7": "[atlas-graddle-plugin] main dex cache",
  "c21f410": "[atlas-gradle-plugin] fast proguard can package out apk only",
  "c2aa60b": "[atlas-gradle-plugin] fastmultidex add custom first dex class config",
  "396eae8": "[atlas-gradle-plugin] fastmultidex add custom first dex class config",
  "344eecb": "[atlas-gradle-plugin] fastmultidex add custom first dex class config",
  "8a4f8b3": "[dex_patch]dexpatch build improve performance",
  "f9907ea": "[atlas-graddle-plugin] add fastmultidex feature",
  "ff2918c": "[atlas-gradle-plugin] fastMultiDex",
  "6eba248": "[atlas-gradle-plugin] fastMultiDex",
  "2575756": "Merge branch 'feature/gradle2.3.1_atlas' into feature/gradle2.3.1_fastmultidex",
  "a4763ad": "[atlas-gradle-plugin] open build cache"
}, "atmosphere": {
  "8a0a5df": "add profile fastinstall to skip tests, checkstyle, pmd",
  "f19a1a8": "Performance optimization for #2008, #2009, #2010, #2011 and #2012",
  "dbad861": "- cleaned up / fixed cache handling in DefaultBroadcaster",
  "4c40151": "Improve logging, Improve performance",
  "9384aad": "Remove message ID from clientQueue when clearing the message from the cache",
  "a25eb15": "Improve performance by preventing dead connection from being processed",
  "78b1b30": "Small performance fixe",
  "0d19239": "Rollback #1320 as it cause major performance regression. Add support for externalizing destroy operation",
  "2fcae40": "Reduce the time messages stay in the cache by default",
  "9e5c365": "Reduce the wait time to improve performance",
  "078cb68": "Performance optimization of annotation processing/handling",
  "13e9ac9": "Small optimization",
  "82d5a60": "If we fail to write cached messages, cache the original messages, not the filtered one",
  "af10a22": "Simplify logic, let the messages be cached later",
  "46cdbf7": "Make sure nothing got added inbetween checking the cache and suspend",
  "3d6d0e4": "Fix concurrent cache issue with State Recovery",
  "7ca97d4": "Force message to get cached, no matter what happens with the resource. The current code doesn't work because the resource may have been re-added or the resource becomes available after the call to isAtmosphereResourceValid called",
  "65f3c63": "Re-add the code that prevent suspending a connection when cached messages are found",
  "7910f2b": "Make sure we never recover when we founc cached messages",
  "1a625f1": "When recovering, do not add resource to any broadcaster unless no cached messages are found",
  "b7be263": "With StateRecovery, make sure all cached message are retrived in once and then sent to the client when long-polling",
  "32131a5": "Reconnect as fast as we can when streaming",
  "8ce88d9": "More API for manipulating cache #1051",
  "b45b278": "Incremental Fixes for #1029: make sure there is no deadlock or OOM with outOfOrder set to true. Still much slower than false with unbounded executors",
  "5f0f11d": "Make sure the cache is cleared entirely before resuming a long-polling connection",
  "52b1699": "Handle cached message",
  "bfd866c": "Small optimization when no valid cache is used",
  "16306ea": "Small optimization for #1003",
  "f0355dc": "More fix for #864: Make sure we don't suspend if we found something in the cache",
  "9806fdb": "Fix for #779 [performance] Allow out of order broadcast delivery",
  "9a829be": "Do not cache message when retrieving them from the cache!",
  "4243a5d": "Fix for #607 Allow BroadcasterCache to discard some message. Also clean the DefaultBroadcaster's local instance of cache",
  "1621a10": "Fix for #631 org.atmosphere.cpr.Meteor, cache Memory Leak",
  "8244fc7": "Fix for #631 org.atmosphere.cpr.Meteor, cache Memory Leak",
  "9c09e6e": "Incremental fix for #631 org.atmosphere.cpr.Meteor, cache Memory Leak",
  "37a3ebe": "Small optimization",
  "6a14445": "Fix for #534 [jQuery] streaming, cached messages not passing through _trackMessageSize",
  "34610c6": "Fix for #572 [runtime] cached messages missed when using exclude resource",
  "40d8c0e": "Small optimization",
  "9df119c": "Fix for #534 [jQuery] streaming, cached messages not passing through _trackMessageSize",
  "ea550c1": "Fix for #572 [runtime] cached messages missed when using exclude resource",
  "992389c": "Tentative fix for $479 [Spring] java.lang.ClassNotFoundException: > org.atmosphere.cache.HeaderBroadcasterCache",
  "5f4ac9e": "Fix for #300 [runtime] NPE on SessionBroadcasterCache.cache()",
  "c8988f6": "Fix for #263 [performance] Reduce the wrapping of Request",
  "4a3f716": "Improve performance of this method",
  "53d334e": "IDEA cached a wrong version of that file, hence the last commit is wrong",
  "965e5d5": "Little optimization",
  "becd2c5": "Small optimization, only check when the session is supported",
  "0a6a3d3": "Add hash code to AtmosphereResourceImpl so it can be uniquely cached",
  "300cc0a": "Add hash code to AtmosphereResourceImpl so it can be uniquely cached",
  "a85eff0": "Improve the sync block performance",
  "6648eca": "Improve the sync block performance",
  "b62b35e": "Allow more time for slow machine",
  "1cf7181": "Incase of several threads broadcasting concurrently, make sure the cache is updated by only one thread at the time.",
  "0f1c33c": "Bring back the cached thread pool as it will hangs if more than one broadcaster are created",
  "9a1ff6c": "Fix for https://atmosphere.dev.java.net/issues/show_bug.cgi?id=67 (' Meteor shouldn't be cached using the HttpServletRequest ')",
  "a4d2c09": "Make sure we remove the cache when resuming."
}, "aurora-imui": {
  "4672417": "advance vide message performance",
  "45a9447": "Optimize video message performance"
}, "austin": {
  "712de46": "!45 使用fastJson消息转换器解决接口返回String 类型转换异常 Merge pull request !45 from kl/master",
  "0147f8f": "使用fastJson消息转换器解决接口返回String 类型转换异常",
  "0500a20": "!38 Optimize ConcurrentHashMap#computeIfAbsent have performance problem in jdk1.8 Merge pull request !38 from kl/master",
  "927cbc7": "Optimize ConcurrentHashMap#computeIfAbsent have performance problem in jdk1.8",
  "ca47710": "升级fastjson版本",
  "a708dcb": "fix: 对非对象字符串使用JSON#parseObject()报错com.alibaba.fastjson.JSONException: syntax error"
}, "auto": {
  "00fe738": "Bump actions/cache from 2.1.7 to 3",
  "0b21d83": "Bump actions/cache from 2.1.6 to 2.1.7",
  "64b9ecc": "Bump actions/cache from 2.1.5 to 2.1.6",
  "d363f91": "Bump actions/cache from v2.1.4 to v2.1.5",
  "660337c": "Check for instance equality before attempting to check for the @Memoized hashCode optimization",
  "1820660": "Adds the transient modifier to the cache field. This tells serialization to avoid serializing such fields. Not having this causes serialization to be nondeterministic, depending on whether or not the memoized accessor has been called.",
  "34a6a03": "When hashCode() is @Memoized, check the hash code before checking equality as an optimization",
  "7b7d371": "Bump IT version of the jar plugin to 2.5 to avoid terrible jar performance on ubuntu due to a bug in pre-2.5 ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=117743218",
  "b1db512": "Rely on Guava 19.0 and use CharMatcher.whitespace() since CharMatcher.WHITESPACE is now soft-deprecated and will be removed in a future version of Guava (improves performance on android - not relevant to auto-value, but still nicer).",
  "d0becb0": "Use Guava 18 so FluentIterable.join(Joiner) can be used, and bump jar plugins to 2.5 to be faster on ubuntu",
  "3e1210c": "Disable the MoreTypes.equal optimization of returning true when TypeMirror.equals is true, for the specific case of ExecutableType. The javac implementation of ExecutableType does not take thrown exceptions into account when comparing for equality.",
  "3c21fa6": "Add an optimization to MoreTypes.equal that also avoids an infinite recursion in our friend Eclipse. That infinite recursion shows up with AutoValue's CompileWithEclipseTest when trying to compile a class with a variable of type <K extends Comparable<K>>. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=77200817",
  "5fa46c9": "Remove the cacheHashCode option of the @AutoValue annotation, and fix its two current uses.",
  "8296e8d": "Change the default for @AutoValue(cacheHashCode) from true to false. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=59204629",
  "72366b4": "Introduce cachedHashCode element in @AutoValue, and only cache the computed hashCode of an AutoValue class if it is true, which it is not by default. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=58941056"
}, "AutoDispose": {
  "": ""
}, "aviatorscript": {
  "13627fb": "support execute with specified cache key",
  "9f35c93": "(feat) Improve array accessing performance",
  "546fe9a": "Fix global cache not valid in AviatorEvaluator.execute",
  "7bc99ab": "(feat) Introduce EvalMode option, and improve logic operator performance in asm mode",
  "96cc7a0": "(feat) fast way to get properties instead of beanutils.",
  "0f644b5": "(feat) Use absolute path as module cache key",
  "1d6c6b6": "(fix) try to fix issue #212 and tweak performance",
  "66f3bbd": "(feat) faster string concatenating",
  "8687e1f": "(fix) Literal expression performance issue, #96",
  "8073669": "(feat) faster compile, bump java source version to 1.7",
  "e335bf1": "Fixed memory leak when doesn't using cache.",
  "9f03603": "Adding Expression#getVariableNames() to return expression's all variable names,adding AviatorEvaluator#getCompiledExpression to get compiled exression in cache",
  "81e3f59": "Fixed DateFormat cache could not work",
  "a757833": "Turnning invoke method's performance",
  "092685b": "Turnning invoke method performance"
}, "AVLoadingIndicatorView": {
  "": ""
}, "awaitility": {
  "fc45eb7": "Fail fast conditions can now be specified with assertions",
  "24ad19d": "Added fail-fast condition support",
  "3d5491c": "feature: Fail fast - fixes #178 (#193)"
}, "awesome-java-leetcode": {
  "": ""
}, "aws-doc-sdk-examples": {
  "7a42dd12": "Bump http-cache-semantics from 4.1.0 to 4.1.1 in /javascriptv3 (#4351)",
  "cdab32d7": "fix(sec): upgrade com.fasterxml.jackson.core:jackson-databind to 2.14.0-rc1 (#4290)",
  "f2dc1b15": "Merge pull request #3837 from awsdocs/dependabot/maven/javav2/example_code/lookoutvision/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "7f21b558": "Merge pull request #3838 from awsdocs/dependabot/maven/javav2/example_code/s3/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "ee4e57d9": "Merge pull request #3839 from awsdocs/dependabot/maven/javav2/example_code/kendra/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "5d1970aa": "Merge pull request #3840 from awsdocs/dependabot/maven/javav2/example_code/memorydb/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "47266e94": "Merge pull request #3841 from awsdocs/dependabot/maven/javav2/example_code/dynamodb/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "63d1e869": "Merge pull request #3844 from awsdocs/dependabot/maven/javav2/example_code/firehose/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "780e2839": "Merge pull request #3843 from awsdocs/dependabot/maven/javav2/example_code/codepipeline/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "fb8ca77d": "Merge pull request #3842 from awsdocs/dependabot/maven/javav2/example_code/kinesis/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "b34cef60": "Merge pull request #3845 from awsdocs/dependabot/maven/javav2/example_code/rekognition/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "0983eaa3": "Merge pull request #3846 from awsdocs/dependabot/maven/javav2/example_code/opensearch/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "13af8de8": "Merge branch 'main' into dependabot/maven/javav2/example_code/opensearch/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "740d44ea": "Merge branch 'main' into dependabot/maven/javav2/example_code/lookoutvision/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "ff9d8ece": "update com.fasterxml.jackson.core:jackson-databind 2.13.2 to 2.13.2.1",
  "aac786b9": "Merge pull request #3749 from awsdocs/dependabot/maven/javav2/example_code/memorydb/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "1ddf75c4": "Merge branch 'main' into dependabot/maven/javav2/example_code/memorydb/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "b30f8a27": "Merge pull request #3748 from awsdocs/dependabot/maven/javav2/example_code/opensearch/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "8e7ac496": "Merge branch 'main' into dependabot/maven/javav2/example_code/opensearch/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "d115ef7a": "Merge pull request #3747 from awsdocs/dependabot/maven/javav2/example_code/s3/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "39a2f359": "Merge branch 'main' into dependabot/maven/javav2/example_code/s3/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "af0e1347": "Merge pull request #3746 from awsdocs/dependabot/maven/javav2/example_code/codepipeline/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "0e892eaf": "Merge branch 'main' into dependabot/maven/javav2/example_code/codepipeline/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "1883188b": "Merge pull request #3745 from awsdocs/dependabot/maven/javav2/example_code/rekognition/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "2786dfdb": "Merge branch 'main' into dependabot/maven/javav2/example_code/rekognition/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "1a87ce42": "Merge pull request #3744 from awsdocs/dependabot/maven/javav2/example_code/kinesis/com.fasterxml.jackson.core-jackson-databind-2.12.6.1",
  "8c5c1d22": "Merge branch 'main' into dependabot/maven/javav2/example_code/kinesis/com.fasterxml.jackson.core-jackson-databind-2.12.6.1",
  "c0427c0b": "Merge pull request #3743 from awsdocs/dependabot/maven/javav2/example_code/firehose/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "4f472417": "Merge branch 'main' into dependabot/maven/javav2/example_code/firehose/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "229bb85f": "Merge pull request #3742 from awsdocs/dependabot/maven/javav2/example_code/kendra/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "23a8cd5d": "Merge branch 'main' into dependabot/maven/javav2/example_code/kendra/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "ef030f2c": "Merge pull request #3741 from awsdocs/dependabot/maven/javav2/example_code/dynamodb/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "b219f8d3": "Merge branch 'main' into dependabot/maven/javav2/example_code/dynamodb/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "5113f944": "Merge branch 'main' into dependabot/maven/javav2/example_code/dynamodb/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "27b0d494": "Revert 'Remove cached SPM data'",
  "b48978dc": "Remove cached SPM data Removes cached SPM data from the FindOrCreateIdentityPool example and adds the .swiftpm directory to the ignore list for Git.",
  "5837e5ab": "Added unit tests for Amazon CloudFront distribution deletion and cached object invalidation.",
  "923a8979": "Edit for comments in thing_performance.py",
  "05fcb5a4": "Added IoT thing performance code example for use in AWS IoT SiteWise tutorial",
  "5dab7860": "Added __pycache__ to .gitignore. This folder is created when Python code runs and should never be checked in to the repo."
}, "AxonFramework": {
  "dd21932": "Use fail-fast: false throughout consistently",
  "baf23a2": "Add test to validate result is handled properly even after an error has been cached.",
  "a1c7b6c": "Fix concurrency issue on the CachingSagaStore by introducing synchronization on the associations cache",
  "cd14ac5": "Wrap result of cache retrieval in a new HashSet",
  "5d32c2c": "Fix caches being able to produce a NPE upon read. Also now throws an exception if the value supplier returns null to differentiate between faulty cache and faulty saga stores",
  "4b51d5e": "Fix caching mechanism for Sagas. They were no longer being cached properly, as well as leading to NPE",
  "90794ed": "Add cache action to share the release notes markdown file",
  "baa1a50": "Merge pull request #2386 from AxonFramework/dependabot/maven/axon-4.6.x/com.fasterxml.jackson-jackson-bom-2.13.4",
  "9312091": "Disable batch optimization for token-based event reading",
  "fa02bcf": "Move to trace name supplier and move String.format calls to string concatenation for improved performance",
  "61c02f1": "Merge pull request #2235 from AxonFramework/dependabot/maven/axon-4.5.x/com.fasterxml.jackson-jackson-bom-2.12.7",
  "ed1275a": "Merge pull request #2165 from AxonFramework/dependabot/maven/axon-4.5.x/com.fasterxml.jackson-jackson-bom-2.12.6.20220326",
  "438efdd": "Merge pull request #2152 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.2.20220324",
  "f590693": "Merge pull request #2126 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.2",
  "8a116d6": "Merge pull request #2054 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.1",
  "1715f53": "Merge pull request #2027 from AxonFramework/fix-cache-not-always-invalidated",
  "3013304": "Ensure cached aggregates are invalidated on failures",
  "63205a9": "Merge pull request #2019 from AxonFramework/dependabot/github_actions/actions/cache-2.1.7",
  "38ab2d7": "Bump actions/cache from 2.1.6 to 2.1.7",
  "7d660ac": "Merge pull request #1961 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.0",
  "995a24f": "Merge pull request #1946 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.5",
  "55da9ea": "Merge pull request #1921 from AxonFramework/dependabot/maven/axon-4.5.x/com.fasterxml.jackson-jackson-bom-2.12.5",
  "7bcdc7d": "Merge pull request #1888 from AxonFramework/dependabot/maven/axon-4.5.x/com.fasterxml.jackson-jackson-bom-2.12.4",
  "ccf22b0": "Merge pull request #1864 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.4",
  "412b439": "Fixes issue that event is not applied when using create if missing policy Adds aggregate to the cache after commit (Distruptor Command Bus)",
  "f854093": "Merge pull request #1767 from AxonFramework/dependabot/maven/net.sf.ehcache-ehcache-2.10.9.2",
  "1ef4a0c": "Bump ehcache from 2.10.6 to 2.10.9.2",
  "e946c82": "Merge pull request #1754 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.3",
  "9b09f24": "Merge pull request #1726 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.2",
  "c49f4fc": "Merge pull request #1667 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.1",
  "d350455": "Merge pull request #1619 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.0",
  "91423ea": "Merge pull request #1565 from AxonFramework/dependabot/maven/javax.cache-cache-api-1.1.1",
  "8af0e99": "Bump cache-api from 1.0.0 to 1.1.1",
  "4fb1628": "Merge pull request #1548 from AxonFramework/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.11.3",
  "32779e6": "Merge pull request #1510 from AxonFramework/snapshot-optimization",
  "39d90fe": "Code simplification and performance improvement",
  "f405fc0": "Merge pull request #1209 from quaso/fix/springbootcache",
  "83d2941": "Merge branch 'master' into fix/springbootcache",
  "715ca37": "defaulting to not using a Cache, even if a cache has been configured",
  "4f7564c": "Merge pull request #1172 from AxonFramework/tracking-processor-optimization",
  "f8d6a11": "Some more attempts to fix timing issues in tests on slow machines",
  "266fcb9": "Minor optimization in claim release verification",
  "c905a37": "performance",
  "3bd3cbd": "isClosed of DisposableLock should be volatile as different threads read and update the value. The thread reading isClosed might never observe the change as it's legal to cache the value of non-volatile variables.",
  "6e2b464": "Fix for inefficient first level cache in the disruptor command bus",
  "4a083e6": "Fix for inefficient first level cache in the disruptor command bus",
  "bd5bba6": "Prolong sleep period to fix certain slow builds",
  "ceebe59": "Removed command stream option as no real performance gain.",
  "fb94c46": "Removed command stream option as no real performance gain.",
  "72b52cb": "Limit the amount of rows returned by adding a WHERE clause, because PreparedStatement.setMaxRows(int) only discards rows and does not improve database performance.",
  "fb55396": "CachingSagaStore should not attempt to cache Saga when not found in backing storage",
  "211237a": "Cache maven directory for faster building",
  "8112813": "Optimize event storing and tracking performance",
  "04b31c6": "Refactor event store benchmark and benchmark tracking performance as well",
  "8a5123f": "Minor optimization in AnnotatedAggregate",
  "53e0cd8": "Minor optimizations in Message implementations",
  "630b5dd": "Fixed issue in gap-detection and slow consumer removal",
  "296c1d9": "Spring parameter resolvers no longer cache resources",
  "a61c957": "Added clear method to facilitate clearing of cache for tests",
  "5509f6a": "Added clear method to facilitate clearing of cache for tests",
  "09c429c": "Add an optional HashChangeListener to the JGroupsConnector to manage domain caches.",
  "596f783": "Replaced javax.cache API with custom api",
  "76026fe": "Minor optimizations, code style and javadoc",
  "dcb0cee": "Increased timeout on a test to allow slower machines to pass the test",
  "1eff072": "Changed Cache API to javax.cache.Cache",
  "c3b4d17": "Added test for cache clearing on failed commit",
  "5675eda": "Minor performance improvement",
  "a403c2a": "Improved performance of visit-all-events query",
  "2a59419": "Increased the timeout for the test to give slower CPU's a chance to run this test with a positive result as well.",
  "8983459": "Major improvement of JpaEventStore performance on adding events",
  "328cce4": "Major improvement of annotated handler performance",
  "6a4e1a1": "Updated SagaRepository to prevent use of first level cache in SagaEntry",
  "5c88c7f": "Added cache configuration to DisruptorCommandBus",
  "595ce82": "Improved performance of InMemorySagaRepository",
  "cd78087": "Minor performance improvement in AggregateSnapshotter",
  "f3a7c36": "Made some (performance) improvements to disruptor command bus benchmark",
  "49c9d56": "Added section about performance tuning to reference guide.",
  "6375956": "Update issue #178 Initial commit of a disruptor based command bus. Far from optimal, but performance is good. Still needs heavy refactoring and testing",
  "022296c": "A number of minor changes that improve performance.",
  "43fb7ed": "Update issue #191 Fix in 1.2 development branch Visit events now uses the same optimization mechanism",
  "6386e6d": "Fixes issue #191 JPA now only reads the serialized event itself, not the entire entity. This prevents entities from being held by the first level cache.",
  "5b3ad3c": "Fixes issue #180 Added logic to throw an exception when a deleted aggregate is retrieved from a cache. Thanks to Ted Steen for providing the patch.",
  "eb89140": "Changed the way annotated handler methods are resolved. It is now the same strategy as in the beginning, but much faster.",
  "64f866f": "Relates to issue #129 Previous implementation was fast, but not guaranteed correct according to the JVM specification of the Comparator. This could result in calls to wrong handler methods.",
  "82adaff": "Relates to issue #129 Nice example of how removing a 5 microsecond method call can increase performance by 10% (in the benchmark test).",
  "d515ba2": "Fixes issue #129 Annotation Handler invokers inspect the annotated class on creation time and maintain a smart-ordered list of handler methods. This makes resolution of method to invoke a lot faster. Benchmarks show processing of 100k items per second, against 8k earlier.",
  "b0fd0bf": "Fixes issue #29 The filesystem event store now stores a version number on each entry to allow to change the layout of each entry. Furthermore, each entry now has a timestamp stored, to allow faster lookup based on date and time.",
  "d8ff0c9": "Fixed compatibility issue with ehcache 1.7.2 in the 'NoCache' strategy",
  "9625327": "Added dependency management to ehcache 1.7.2, which is the latest version at the moment (1.7.0 was transitively included)"
}, "azkaban": {
  "dacd258": "Update the log message to info from error when a project is not found in cache during server startup. (#2918)",
  "f7d2cef": "Remove hard-coded HDFS scheme from the Thin Zip cache URI validation. (#2815)",
  "304593d": "Improve slow flow loading (#2386)",
  "50f93f7": "Add logging for the case when project cache still has enough buffer (#2239)",
  "2d1550c": "Percentage-based project cache size (#2147)",
  "e37d11c": "Project cache hit ratio metrics enhancement (#2137)",
  "e8e531c": "Optimize slow test TriggerInstanceProcessorTest#testProcessTermination (#2116)",
  "344416b": "AZNewDispatchingLogic - Switch fetching running flows from cache to DB. (#2057)",
  "05ab2fe": "Expose hit ratio of project dir cache as metrics (#2035)",
  "1d251bc": "Project dir cache enhancement (#2017)",
  "aac4cdc": "Ignore Flaky test FlowTriggerServiceTest & slow tests (#1982)",
  "0408919": "project LRU cache part 2 (#1865)",
  "79fd83d": "project LRU cache part 1 (#1848)",
  "4b9dcce": "Revert changes related to project LRU cache (#1841)",
  "bb24a72": "Disable or optimize slow unit tests (#1662)",
  "3008a61": "Change project cache to case insensitive. (#1657)",
  "5e20aee": "retrieve running trigger from db instead of cache in flow trigger service (#1670)",
  "30c3eef": "Enable gradle build cache for faster build (#1309)",
  "5b35029": "Ignore the slow TriggerManager tests (#1229)",
  "5506278": "Fix slow BasicTimeCheckerTest (#1211)",
  "6d9e0a8": "Remove recently finished flows cache (#1093)",
  "770f67c": "Revert running flows cache (#1121)",
  "e57ed8a": "Remove runningFlows cache in ExecutorManager. Added unit tests for ExecutorManager and JdbcExecutorLoader. (#1048)",
  "7b304d2": "Remove state out of web servers - remove Project cache (#956)",
  "157fa35": "disable cache fetch when it is looking for job state. (#780)",
  "6cdef83": "Merge pull request #558 from davidzchen/guava-cache",
  "a200ae5": "Removing cached EXecutorInfos and changing default params for maxDispatchingErrors",
  "e7ef9a0": "switch the process to collect statistics data back into single thread mode as the atomic procedule is now fast enough.",
  "8e56673": "updated the method fetching meminfo with a more faster/ optimized approach.",
  "fce8f42": "change the implementation of how to collect system load, which is faster and more accurate.",
  "e2bed75": "Update code according to the code review comment, fixed a unit test error in cacheTest which periodically fails couple of the tests.",
  "0a3d501": "add filters as per the discussion from the sync up meeting, expose new stastics and add param for the servlet to disable the 1 sec cache.",
  "09b3abe": "Add cache logic in StatisticsSevelet and add corresponding test cases.",
  "ec52914": "Plumb counters and distributed cache info to flow summary.",
  "56bae31": "Adding unit tests for the cache.",
  "48af3de": "Removing ehcache.jar",
  "5266e51": "Client side optimizations, combines anything less-or-equal to one hour into a continuous event, sort for better table fitting."
}, "BackgroundLibrary": {
  "": ""
}, "BadgeView": {
  "": ""
}, "banner": {
  "": ""
}, "BannerViewPager": {
  "cf431c6": "Improve Indicator draw performance"
}, "barcodescanner": {
  "": ""
}, "baritone": {
  "ff17320": "vid is outdated and doesn't get to the point fast enough, so let's move it lower down",
  "c1a9621": "Merge pull request #3768 from wagyourtail/1.12/fasterworldscanner",
  "746faf6": "faster section reorder",
  "853dadd": "Merge remote-tracking branch 'origin/master' into 1.12/fasterworldscanner",
  "c04eb06": "Update src/main/java/baritone/cache/FasterWorldScanner.java",
  "1697293": "Merge pull request #3479 from scorbett123/caching_performance_upgrade",
  "1736f2f": "replace the world scanner with a 500x faster one",
  "4699b46": "Merge branch 'master' into caching_performance_upgrade",
  "80a4757": "baritone complies faster if the files are less bytes",
  "0c1fec5": "crucial performance optimization",
  "54617bf": "reorder for performance",
  "c880f71": "Clear caches of schematics when moving them",
  "a732e76": "crucial performance optimization",
  "0b2bab6": "Clean up performance Mixins",
  "a75b90f": "crucial performance optimization",
  "efa2433": "Make scanChunkInto even faster",
  "a6726f4": "extend cache on threshold",
  "b6c91b5": "speed up cache stuff",
  "fe47245": "Fix searchWorld cache and also speed and stuff",
  "9046eb5": "crucial performance optimization",
  "a98677d": "crucial performance optimization",
  "4c935fc": "epicer cached bedrock level pathing",
  "0fd241a": "crucial performance optimization",
  "ee6796d": "crucial performance optimization (pt. 2)",
  "81d7f3c": "crucial performance optimization",
  "39a231e": "crucial performance optimization",
  "2e2f4ae": "critical performance enhancement",
  "d60a0be": "move this behind the toolset cache for performance",
  "0927e0e": "fix performance issues with explore",
  "9118e0b": "one byte savings means faster load times",
  "b64154e": "meme for cached blocks that arent packed yet",
  "343bb20": "fix weird cache behavior at chunk edge",
  "867c01f": "crucial performance optimization",
  "aada973": "more resiliency to invalid cache files",
  "a73f5c1": "crapton of performance improvements",
  "826f378": "performance improvement and no allocation promise",
  "2133ab3": "better cache, needs more testing",
  "eb9f755": "disable rendercachedchunks in singleplayer, fixes #331",
  "99cb7f5": "crucial performance optimization",
  "7017e9e": "crucial performance optimization",
  "e37a09a": "makes mining faster, fixes #330",
  "ee23d59": "now we can cache flowing water properly",
  "5382d26": "crucial performance optimization",
  "b005ce8": "mega cancer render cached chunks",
  "9dfcef6": "crucial performance optimization",
  "5f29bb3": "gotta go fast",
  "8b6d621": "crucial performance optimization",
  "d41aa5f": "epicly fast",
  "807d6a0": "crucial performance optimization",
  "cc04342": "epic performance",
  "17207d4": "pick map over hybrid, due to performance",
  "6d1130d": "favored lookup performance",
  "5aa78cd": "crucial performance optimization",
  "70f8d1d": "fix bsi creation on wrong thread, cache chunks, fixes #210",
  "e5184ef": "fix cached path loop",
  "d59c7cb": "temporarily disable cached region ram pruning",
  "3cac37d": "cached regions in ram should not expand without bound",
  "65ce5ca": "fix nullpointerexception in cachedworld",
  "1bd7c84": "crucial performance optimization",
  "6986f17": "it's not much of an improvement, but it won't make it slower",
  "de6d6c8": "cached chunks expiration setting, fixes #181",
  "f28cdc5": "this will really help performance a lot",
  "d7a0d26": "Optimize game settings for better travis performance",
  "ce39183": "Add more fast methods to BetterBlockPos",
  "2a8575c": "Begin to create interfaces in api for cached World and Region",
  "65672b5": "gotta go fast lol",
  "758e9c5": "tiny optimization",
  "9e27a59": "cache on load check",
  "1a6b7d1": "cache chunk load check through block state interface",
  "3c4708f": "performance is key",
  "139d05d": "disable mergeinterfacesaggressively for jit performance",
  "30fc72a": "scan loaded if not cached",
  "43cf206": "locations cache",
  "e383064": "only fail on movement cost increase if calced through cached, fixes #165",
  "35ed0f6": "refactor chunk to cache",
  "075ad3f": "almost forgot crucial performance numbers",
  "07b0e2c": "block state interface cache region too",
  "a8ef421": "epic performance",
  "439ff92": "crucial performance optimization",
  "3fd1063": "cache on block not blockstate",
  "dd1a20a": "final makes things faster",
  "f75188b": "fix cost cache overwrite in path executor",
  "c63ccc3": "can walk through should be cached as air, fixes #124",
  "da54604": "segment based timeout, and slowpath warning",
  "8d62f75": "crucial performance optimization",
  "a93af34": "cache chunk in BlockStateInterface, fixes #113",
  "be303f2": "crucial performance optimization",
  "cebdd76": "node map performance, fixes #107",
  "0342136": "fix chunk cache check performance, fixes #106",
  "fb04ec6": "chunk check optimization",
  "8d1570a": "cherry pick 3x faster cache check",
  "e553ee9": "20% improvement to cached chunk check performance",
  "d4d2fb3": "small optimization",
  "342bb86": "fix passable and replacable checks for snow in cached chunks, fixes #87",
  "9a065f5": "some more blocks to cache",
  "c4cc0c6": "cleanup to cachedregion",
  "4c0d581": "crucial performance optimization",
  "eb34c1f": "unneeded slowdown",
  "d3bd6ae": "crucial performance optimization",
  "ff108a5": "performance and testing",
  "c67c958": "Thanks IntelliJ for that amazingly helpful performance optimization suggestion",
  "8b63a3a": "Fixed cached chunks not loading from file properly",
  "f047dd0": "Fix bad block lookups with cached chunks",
  "25663c5": "more binary heap performance optims",
  "95086bd": "slowpath option",
  "98f94f0": "slowpath rendering",
  "f252e20": "peephole optimization",
  "a858882": "performance optim",
  "9dc1f2a": "helpers and optimizations",
  "8250338": "Remove cached chunk development code"
}, "baseAdapter": {
  "": ""
}, "BasePopup": {
  "": ""
}, "bazel": {
  "8ef0a519": "Run SkyKeyComputeState cache removalListener immediately on drop",
  "87d6e9ab": "Support `--unix_digest_hash_attribute_name` in repository cache",
  "261cf200": "A new documentation page about iterative build performance.",
  "fe97f209": "Make `--incompatible_remote_build_event_upload_respect_no_cache` a no-op",
  "0a47a1fb": "Escalate the 'analysis cache discarded' message from 'info' to 'warn', and add some text to advise that discarding the analysis cache may be expensive.",
  "763f1d97": "Use ctime in file digest cache key",
  "0cdd4097": "Rename `--experimental_remote_cache_compression` to `--remote_cache_compression`",
  "49a238a8": "Rename `--experimental_action_cache_store_output_metadata` to `--action_cache_store_output_metadata`",
  "278988c7": "Move performance pages to locations that mirror the navigation.",
  "9353955f": "Unconditionally clear the syscall cache at the end of the build.",
  "24b45890": "Automatically retry the build if encountered remote cache eviction error",
  "79e22a32": "Update docs on cached print statement behavior",
  "187f3e49": "Add a cache for command lines of tools in Java toolchain.",
  "7bb153a6": "chore: restore warning about git_repository being uncached",
  "49a95023": "Clear all remote metadata if any of them are evicted from remote cache",
  "5f434fc7": "[Skymeld] Drop the syscall cache during analysis finished callback.",
  "c1168e13": "Handle remote cache eviction when uploading inputs for remote actions.",
  "32e4f23e": "Also handle remote cache eviction for tree artifacts.",
  "0ac339aa": "docs: add default to repository_cache flag help",
  "963640a8": "Cleanup stale state when remote cache evicted",
  "b31da0c9": "Set default value of `--experimental_throttle_action_cache_check` to true.",
  "1278a5de": "documentation: clarify combined cache",
  "99cff33e": "Exit with code 39 if remote cache evicted blobs that Bazel need during an invocation",
  "6115d94c": "Retry on HTTP remote cache fetch failure",
  "2c2a9037": "Move `AbstractSkyKey` hash code caching into a separate class so that subclasses can opt into or out of hash code caching. If the argument's hash code is already fast, opting out of caching saves memory.",
  "44782dc6": "An array-based task queue to address performance regressions.",
  "d658908d": "Documentation: Add contents of 'Build performance metrics' blog post",
  "5f2866f8": "Do the AC integrity check for disk part of the combined cache.",
  "b0c5eb30": "Dont query remote cache but always use bytestream protocol",
  "4ec0757f": "Use `EnumSet` for collection of profiled types for better performance.",
  "3d29b2e1": "Add option to throttle the action cache checks.",
  "704027e3": "Starlark: faster stmt/expr switch in the interpreter",
  "610b56f5": "Add local action cache hits to the chrome trace profile as stacked chart.",
  "2e4694dd": "Starlark: faster parameter type check for Object",
  "2fc7ab9a": "Starlark: faster kwargs population in StarlarkFunction",
  "8a53b0e5": "Make references to syscall caches less confusing.",
  "2647bccf": "Make C++ compiler autodetection a bit faster.",
  "8a26713d": "Remove --[no]use_action_cache from user manual because it is misleading",
  "40846718": "Add support for crosstool feature to prefer PIC compiles even for optimized binaries. This can have performance penalty, but in configurations where dynamic linking is used for tests can lead to a substantially better sharing of artifacts between tests and binaries. In contrast to the existing --force_pic, this can be enabled per crosstool and respects whether PIC is available for the used crosstool.",
  "4e8c4f2a": "Replace no-cache for no-remote-cache",
  "2baa5a42": "Keep credentials cached across build commands.",
  "23ffce53": "Update GetActionResult for disk cache to check referenced files when …",
  "3b5eef58": "Fix performance issue with `rdeps(E1, E2, k)` in graphless query.",
  "afee267f": "[Skymeld] Fix a bug with action cache being re-loaded despite using --nouse_action_cache.",
  "25558ada": "Add --experimental_action_cache_store_output_metadata to the expansio…",
  "128d833f": "[remote] Respect whether the server supports action cache updates",
  "7cc4812b": "When a dep transitions from done to dirty on a node in error, defer setting the error regardless of whether or not we 'should' fail fast.",
  "f71bbcfd": "Check whether the remote cache accepts absolute symlinks before uploading them.",
  "7b141c1e": "Fallback to download with HttpDownloader if assets not found in remote cache",
  "96084140": "Add -no_deduplicate for darwin dbg/fastbuild",
  "92f5e8f3": "Allow positional arguments in local bytecode optimization's param file.",
  "f904e876": "Label visitation optimizations",
  "a0f45628": "Verify gRPC cache downloads after flushing the output.",
  "d55c3314": "Refactor combined cache.",
  "05ed9253": "Reduce the scope of the static cache in `StarlarkRuleTransitionProvider`.",
  "fbb68e9b": "Add a property to disable the bootstrap classpath cache.",
  "74dce49e": "Remote: Fix performance regression in 'upload missing inputs'.",
  "8f82c21b": "Docs should mention the new no-remote-cache-upload tag",
  "dcd85855": "Make --discard_analysis_cache work with Skymeld.",
  "b0c91c19": "Use `ConcurrentHashMap` to discard unnecessary analysis cache data in parallel.",
  "695d855d": "Introduce `SkyframeExecutor#processDiscardAndDetermineRemoval` to modularize analysis cache node removal logic.",
  "2b44482e": "Add flag to support splitting optimization pass into N parts.",
  "d63b75ee": "Load output metadata from action cache if outputService is available.",
  "fbf92779": "Track how long it takes to discard the analysis cache by posting `AnalysisCacheClearEvent` to the `EventBus` upon completion.",
  "ee5cd577": "Remove mention of `no-remote-cache` from internal docs.",
  "ff68b0a9": "When rewinding actions that produce tree artifacts, invalidate the cached directory creation.",
  "93029d8f": "Store start/end timestamps of locally executed actions in the disk cache.",
  "9ad35114": "Add test for remote cache early return during compressed blob upload",
  "317375dd": "Fix checking remote cache for omitted files in buildevent file",
  "68ffdd27": "Permit action rewinding in eligible builds (no incremental state, no action cache).",
  "76fac817": "Add Blaze support for 'local' optimization of individual Java libraries.",
  "a229bed6": "Improve action conflict checker's performance with Skymeld.",
  "03656459": "Document the tradeoffs of the `Dict` memory optimization opportunity in a code comment.",
  "2c25f738": "Sort resources to produce consistent zip and help cache hit",
  "e2853223": "Replace most usages of SyscallCache with the weaker XattrProvider. SyscallCache is unsafe to use with files that may change over the course of the build, like outputs and files in external repositories. The weaker XattrProvider type helps to ensure that a stale cached value is not used.",
  "a73aa12b": "Remote: Fix crashes with InterruptedException when using http cache.",
  "b1bf9d6c": "merkle_tree_cache: change default size to 1000",
  "873bf0a0": "Change FileSystemValueChecker to use a SyscallCache when computing new values. This cache is not expected to help too much, since the new value is injected into Skyframe, but for stat operations that need to repeated by non-Skyframe globbing, this benefits caching a bit.",
  "50d26d17": "Modify contract of SyscallCache#getType to allow the cache to do no work if it prefers. This prevents SyscallCache#NO_CACHE from being less efficient in codepaths that call #getType than just not using a cache at all.",
  "9a8cac76": "Force local spawns to work around remote cache problem / spurious test failure",
  "152e705e": "Always explicitly specify the syscall cache for UnixGlob, instead of defaulting to SyscallCache.NO_CACHE.",
  "bbc50679": "Pass syscall cache into PathPackageLocator#getWorkspaceFile: again, not strictly necessary for the goal of using the syscall cache for all getFastDigest calls, but good to get rid of NO_CACHE.",
  "3b7e65a8": "Use --noremote_accept_cached during postsubmit.",
  "c6a40446": "Optimize the check for 'msvc' includes: getting a substring generates garbage. I suspect msvc is only used for Windows, but doesn't seem worth checking for the OS in this part of the code, checking raw chars should be so fast as to not be noticeable.",
  "d097c968": "Make slowRemoteTime take a Duration rather than an integer number of seconds.",
  "fc1d79ce": "Clean up FilesystemCalls: rename to SyscallCache, move to a top-level class, and get rid of AtomicReference wherever possible. Use a SyscallCache for any command-scoped classes, and Supplier<SyscallCache> for others. This change should have no runtime-observable effects (all underlying caches are the same).",
  "51d29fc7": "performance optimization: copy with 1 MB blocks instead of 128K blocks (-60ms)",
  "d2dfe6c8": "Remote: Remove old http cache put deduplication",
  "4697ff12": "Rolling forward https://github.com/bazelbuild/bazel/commit/ceece65abd46833fe277a43fded9ee9f387bab14 with fix to continue requesting deps for shared actions. The diffbase fix to Skyframe to clear cache state is also necessary.",
  "9f288e2a": "Check for cache hits in all cases of executing actions remotely under dynamic execution.",
  "f9882e41": "Add --experimental_repository_cache_urls_as_default_canonical_id to help detect broken repository URLs",
  "8ef29dd5": "Don't unconditionally update ExternalFilesHelper tracking data at the end of handleDiffsWithMissingDiffInformation: we may skip a full-graph traversal in various circumstances. If that happens, we must preserve existing knowledge for next time. This doesn't have a severe impact on performance because the original goal, of not doing repeated scans when a file had fallen out of the graph, is still met.",
  "820c8872": "Verify that --use_action_cache works with merged Skyframe phases.",
  "7d8d55ac": "Starlark: faster dict.keys",
  "2edab739": "Avoid too verbose warnings in terminal when cache issues",
  "adc9bcfb": "Remote: Make --incompatible_remote_build_event_upload_respect_no_cache working with --incompatible_remote_results_ignore_disk.",
  "3ea70282": "Remote: Make `--incompatible_remote_build_event_upload_respect_no_cache` working with alias.",
  "58ea4dde": "Remote: Don't upload BES referenced blobs to disk cache.",
  "aaf65b97": "Remote: Support client TLS authentication for remote caches over HTTP",
  "c68908ff": "Replace the per-`SkyKey` caches used by `PackageFunction` with the new `SkyKeyComputeState` mechanism.",
  "f4bf6f6a": "Clear GlobFunction's Pattern cache at the end of each command. GlobFunction has an unbounded map that was retained for the lifetime of the Blaze server, unnecessarily holding onto memory.",
  "f40d0864": "Fix theoretical performance issue in `PackageLookupFunction#findPackageByBuildFile` using the new `SkyKeyComputeState` mechanism.",
  "2ec457df": "Remote: Ignore blobs referenced in BEP if the generating action cannot be cached remotely.",
  "0d7d44d5": "Remote: Add support for tag no-remote-cache-upload.",
  "af155437": "Move fragment cache infra from BuildConfigurationFunction to new FragmentFactory",
  "c8d83aec": "Improve error handling in case of failure to read cached TestResultData",
  "d84f7998": "Fix remote spawn tests for remote_merkle_tree_cache=true",
  "82b30a44": "Filter out Object#wait calls (often coming from AbstractQueueVisitor) when selecting the longest stack trace to attach to a slow interrupt.",
  "c9b7e227": "Remote: Don't load remote metadata from action cache if remote cache is disabled.",
  "8c2c78cd": "Remote: Use Action's salt field to differentiate cache across workspaces.",
  "ed689332": "Remote: Invalidate actions if previous build used BwoB and remote cache is changed from enabled to disabled.",
  "6da8086e": "Remote: Add support for compression on gRPC cache",
  "f5cf8b07": "Remote: Fixes an issue when --experimental_remote_cache_async encounter flaky tests.",
  "fe644bee": "Fix cache leak when applying transitions when only a rule's attributes change.",
  "de4da646": "Remove test_remote_https_cache.",
  "6c73a2e2": "Exempt the Hilt processor from strict java deps and from the reduced classpath optimization.",
  "04754efc": "Only set local execution delay in dynamic execution when getting a cache hit from remote. There is no reason to delay after getting a remote execution.",
  "dec8b5a8": "Switch to bespoke attribute name iterator to improve --experimental_existing_rules_immutable_view performance",
  "503d56ed": "C++: Fix performance issue on cc_binary depending on cc_shared_libraries",
  "1da8f4cc": "Improve the prototype's performance with an additional thread pool.",
  "29e44fec": "Fix remote-exec with disk cache.",
  "415ca59c": "Remove optimization in LibraryToLink that is no longer needed.",
  "c32fa616": "Add modules to runtimeBuilder in BuildIntegrationTestCase for Bazel tests. A fast follow-up will remove these from tests that have already added them in Overriden methods.",
  "b5bbe28c": "Fix typo in the cache directory name on macOS",
  "72f5c122": "Add setup calls to BazelAnalysisMock. This was previously done in @Before methods in SubcommandEventTest and ShutdownCommandTest. A fast follow-up will be to remove those calls from the aforementioned tests.",
  "cf57d036": "Remote: Allow disk cache with remote exec",
  "7c015cda": "Add ability for BlazeModule to set the slow interrupt message.",
  "8ce6710d": "Stop including synthetic exception with longest stack trace in bug report for slow interrupts: the exceptions are not being aggregated properly by the server.",
  "0d52ca80": "Make some performance optimizations by reusing a canonical `ReqiuiredConfigFragmentsProvider#EMPTY` instance and avoiding a copy if merging with `EMPTY`.",
  "7e01f401": "When remotely logging the longest stack trace from a slow interrupt, restrict to stack traces that do not end in 'Unsafe#park': Unsafe#park is interruptible, so it cannot be the cause of the slow interrupt.",
  "fe6645d1": "Make action cache concurrency-friendly to avoid high contention. Use ConcurrentHashMap so there's no need for locking. Keep entries to be written to disk in a concurrent queue, and look their values up in the canonical map when writing them. This avoids races around writing data to the maps, although I don't know how big a deal that is anyway.",
  "d86762c5": "Introduce a new NodeEntry#removeReverseDepsFromDoneEntryDueToDeletion method and use it when deleting nodes from the Skyframe graph. We sacrifice some correctness checks for performance: rather than either keeping the rdeps as a set and removing from them one by one, or queuing the removed rdeps and doing the removal once (both of these use memory/are complex), we just filter the rdeps by the set of all keys we've visited during deletion.",
  "5b1c12fa": "Temporary extra debugging info for super-slow occasional builds.",
  "46c3f171": "Remote: Cleanup the code that determines whether the spawn should accept/upload results from/to remote cache.",
  "3ea75594": "Optimize some parts of Skyframe node deletion, especially for the case of discarding the analysis cache on a configuration change:",
  "4e29042f": "Save remote output metadata to ActionCache and load them before checking action cache",
  "8eba4887": "When outputting a thread dump for a slow interruption, group threads with the same stack trace together, sort the dump by stack length (longer stacks are more likely to be interesting), and insert the longest stack in the remote bug report, for easier triage. Also log stack traces and thread names in one single logline: makes it much easier to read these lines and to search over them. The length should still be manageable, and if there are thousands of threads for a single stack trace, it's unlikely they're doing anything very interesting.",
  "f880948e": "Replace remote_cache_hits with more detailed runner_count.",
  "4d5f3548": "Drop reference to the action cache for `--nouse_action_cache` builds.",
  "f7267329": "Don't cache delegating DefaultInfo provider.",
  "f43f0686": "Create a cache for Starlark rule transition instances.",
  "28c6ed36": "Remove errant bracket in performance docs",
  "18c82168": "Remote: Do not upload empty output to remote cache.",
  "0f812eb5": "Remote: Display download progress when actions are downloading outputs from remote cache.",
  "4ccb2cce": "Delete `ImmutableSortedKeyMap` in favor of `ImmutableSortedMap`, which is essentially the same thing but likely less prone to performance issues.",
  "5ee91df3": "Objc: Improve Starlark objc_library performance",
  "d968acdc": "Make the `EqualsWrapper` key for the weak-valued cache in `NestedSetCodecWithStore` not retain a strong reference to the `NestedSet`.",
  "41c4daef": "Improve performance of `checkForDuplicateLabels`.",
  "2c4ad7b2": "Replace most remaining uses of the Guava cache with Caffeine.",
  "a612634f": "Centralize action cache behavior on IOExceptions inside CompactPersistentActionCache. Don't log I/O errors here to remote logging: they are expected from time to time, and these I/O errors are preserved in the failure detail, so we can detect increases in them if there is an issue.",
  "b254c80d": "Fix global cache javadoc in `DigestUtils`",
  "ba5b2a7c": "when writing to local disk cache, open files later in order to avoid 'too many open files'",
  "367b19eb": "Fix starlark action with shadowed_action inputs cache test",
  "4801bf52": "Improve performance of artifact conflict detection.",
  "f0983dfd": "Remote: Report checking cache status before the action is scheduled to run remotely.",
  "e49a69e9": "Make an optimization of using a singleton `ArtifactNestedSetValue` if value-based change pruning is disabled.",
  "d05f92ea": "Use syscall cache for loose headers check in CppCompileAction.",
  "6dc941e5": "Remove restriction on generate_pdb_file to be only used in dbg and fastbuild mode",
  "f24d02f2": "Remove stale entries from nested set key->value cache when errors are encountered. Otherwise, it's possible that these values will be incorrectly read by a downstream consumer, giving contradictory results for a node: the artifact nested set node that depends on it will have an error, but it will have a value in the persistent map.",
  "20996f64": "Remote: Fixed a bug that remote cache is missed due to executable bit is changed",
  "82fdbf29": "Properly propagate loading-phase exceptions encountered during resolution of action-cached artifacts.",
  "34bf4418": "Fix performance regression in https://github.com/bazelbuild/bazel/commit/94602f05b34fda2556287797a14b7dac64f2f041.",
  "6c5a3ee0": "Remote: Add AsyncTaskCache which is used to deduplicate task executions and cache the results.",
  "2adf7d13": "Store Starlark action's inputs in action cache if it shadows an action that discovers inputs.",
  "2f00d4f5": "Properly return separate module as an allowed derived input. Otherwise, the action cache does not properly understand these inputs.",
  "d202bd50": "Reduce needless contention in the include scanner's fileParseCache. The computeIfAbsent() function of ConcurrentHashMap is supposed to have a fast implementation and the map will then allow ~number of processors concurrent writes. However, reading a file and extracting the include lines can be a costly IO operation that does not fit this bill. Use futures instead.",
  "8346d166": "Skip a disk read if possible when considering whether the test action is cacheable.",
  "1b2481d8": "When a test produces multiple actions, cache runfiles inputs across actions.",
  "f30cae44": "Use IncludeScanningHeaderData as proper abstraction, not just data container. This will make subsequent optimizations easier.",
  "7b5677e5": "Optimize computation of flattened transitive sets in CcCompilationContext. The optimization implemented here merely re-uses the flattened set of a single dependency if possible. This is currently used for the three different sets of include paths as well as #defines.",
  "1f0ef073": "Do not attempt to cache structured variable lookup in the case of the name not suggesting a structured variable (containing a '.'). This just needlessly consumes memory at no runtime or garbage overhead.",
  "52bf46b3": "Reduce needless contention in the include scanner's fileParseCache. The computeIfAbsent() function of ConcurrentHashMap is supposed to have a fast implementation and the map will then allow ~number of processors concurrent writes. However, reading a file and extracting the include lines can be a costly IO operation that does not fit this bill. Use futures instead.",
  "97879916": "Reduce contention in PathExistenceCache.directoryExists()/fileExists(). A ConcurrentHashMap locks an entire shard and so with a high job count, we create needless contention here. As per the documentation of ConcurrentHashMap, the computeIfAbsent() implementation needs to be fast which a file stat might not always be. Instead accept that we might be doing the underlying stat multiple times. Another alternative would be to use futures, but experiments suggest that the marginal reduction in stats is not worth the extra complexity and memory overhead.",
  "8555789d": "Fix the classic query package-loading cutoff optimization with external workspaces.",
  "8f97db11": "Starlark: faster str(int)",
  "09f26fda": "Reduce needless contention in the include scanner's fileParseCache. The computeIfAbsent() function of ConcurrentHashMap is supposed to have a fast implementation and the map will then allow ~number of processors concurrent writes. However, reading a file and extracting the include lines can be a costly IO operation that does not fit this bill. Use futures instead.",
  "91018584": "Fix cumulative typo on performance docs",
  "2217b525": "Reduce the number of stats performed when creating the output directories. The Path.createDirectoryAndParents() function generally walks up the given output path, static for each path segment until it finds one that exists, the walks back down creating the directories. checkSymlinks does the same walk checking for symlinks along the way. Combining the two functions conserves ~half of the stats (more in reality as an in-memory cache is used).",
  "8974ba25": "starlark resolver: implement 'flat globals' optimization",
  "cf0fd44e": "starlark: implement 'flat frames' optimization",
  "2bbae6af": "Fix action cache checking for missing constant-metadata artifacts.",
  "c05c1e27": "Fix NPE with netrc and disk cache",
  "02838a1b": "Avoid the spawn cache if executing dynamically.",
  "718dfa2d": "starlark eval: avoid ImmutableSortedMap, which is slow",
  "07cb1610": "Compile macOS toolchain tools with optimizations",
  "e44e43b6": "Deflake MemoizingEvaluatorTest#shutDownBuildOnCachedError_Done: the test is trying to prevent B-fail-fast-parent from starting to build until either (a) the build is interrupted or (b) A-slow-set-value-parent tries to set its value (which would be unexpected). However, we don't do an isDirty() check in AbstractParallelEvaluator$Evaluate#run anymore, so the synchronization was just wrong.",
  "0c36f98d": "Propagate InterruptedException through transition API instead of catching. These come from starlark transition evaluations. Catching and returning the default seemed to be leading to Skyframe cacheing deterministic errors in nondeterministic situations like a user ctrl+c-ing in the middle of a starlark transition evaluation.",
  "05650ff0": "UnixFileSystem: read cached hashes from extended attributes",
  "a3652a33": "Pass PathFragment for 'offset' in target patterns, rather than a raw string. Since the PathFragment wraps a String anyway, calling PathFragment#getPathString repeatedly should be fine from a performance standpoint, and the code is clearer this way.",
  "54b062c9": "Support verboseFailures/BTECNF in remote cache",
  "25e58ffc": "Set --remote_cache to --remote_executor if it is empty.",
  "fff96af6": "Change disk cache to create sub folders for entries",
  "b39d24c3": "Fix bug that renders a cache ~useless and causes traversing up a significant chunk of every output file's path doing an uncached stat at every point.",
  "f963c805": "More gracefully handle a corrupt action cache entry that incorrectly says it has a negative number of discovered inputs.",
  "9f583458": "Remove some references to nonexistent 'optimization mode'.",
  "e2a3b0f7": "Let --remote_{cache,executor} support gRPC over UNIX sockets",
  "7acdd343": "bazel packages: fix bug in CallStack prefix-sharing optimization",
  "e6cce762": "Fix false sharing in action cache due to incorrect key computation for custom Starlark command lines.",
  "636fb5e2": "Fix massive performance problem in BzlLoadFunction's inlining implementation.",
  "e128e808": "Fix disabling the repository cache after the server has started.",
  "981c0d47": "Update `--remote_http_cache` to `--remote_cache`",
  "db3082db": "Starlark: better reflection cache in CallUtils",
  "2983d045": "Skip unnecessary extra attempts to get fast digests.",
  "8a9ae830": "Document OutputFormatterCallback#close's fail-fast mode",
  "920b0933": "bazel packages: prep for AttributeContainer optimization",
  "9ca7c366": "Only add a file path into the action cache if it's non-mandatory.",
  "fe90eb78": "remove `--nobuild` from build performance example",
  "aea28a84": "Add section about memory and performance concerns to SBC bazel docs.",
  "8977861b": "Move knowledge about slowest instances count from ProfilerTask to aggregator.",
  "f922dca8": "Mitigate CDS image creation performance issues with long classpaths",
  "e088bd01": "Bazel break up the build/lib:packages-internal rule into proper sub-packages 'packages' and 'pkgcache'",
  "84441239": "If a TreeFileArtifact is not explicitly in ActionExecutionValue's metadata map, check its TreeArtifactValue cache and return a value if it's there. Much of the time, a TreeFileArtifact's metadata will be in the main map: if it was the output of a templated action, it will be in the main map. It will also be there if it was explicitly statted/injected, either from Google-internal remote execution or as part of local execution.",
  "4019199b": "When a fetch for an Object[] returns, cache the unwrapped contents.",
  "8ce7fd12": "Fix error in LegacyIncludeScanner where we cached a prior lookup result that had an Artifact that was not a legal input to the current compile. We can easily avoid that situation. Also explicitly call out a bug (and add a disabled test case) where the reverse situation happens.",
  "ba153553": "Improve the performance of createFileSystem in WorkerExecRoot",
  "bf06b807": "Note default cache directory root on macOS",
  "9807e506": "Fail reduced classpath compilations faster",
  "eb2d38d9": "Actually run action cache tests.",
  "8f94afaa": "performance optimization: copy with 128K blocks instead of 8K blocks",
  "1ae2832e": "Add logging for slow nested set expansions in CppCompileAction.",
  "937a5cf5": "Prevent discarding of analysis cache on Bazel CI.",
  "a423ac29": "Make the bazel_java_test_* tests 2x faster.",
  "5756b357": "Query performance: Skip aspect handling if none",
  "e0d325b4": "'Stream' action cache digest computations.",
  "8b20d1d0": "Deleting unreachable logic (cache == null).",
  "47b6b8d8": "Fix combined http/grpc cache tests",
  "972ade8b": "bazel syntax: fast calling convention",
  "f1d6b1fc": "Add a note about stdout/stderr using remote cache",
  "4e2b4958": "bazel syntax: remove unsound x.f() optimization",
  "e8102278": "Report on download cache look up and archive extraction",
  "5cfb0b36": "Invalidate the analysis cache if a starlark option changes.",
  "5f4d6995": "Enable combined disk cache for grpc caching protocol.",
  "6056609d": "Refactor remote package to only have one remote cache impl.",
  "dd5fdb20": "bazel syntax: simplify cache of information about annotated classes",
  "c92e0da9": "Remove DigestHashFunction.MD5. MD5 collisions are easily generated, so we have stopped using MD5 for security-relevant hashes. Nor is MD5 is a good choice for a fast-but-insecure hash.",
  "f72f46a7": "Replace Md5Digest class with byte[]. Supports digests of any length in the action cache rather than silently truncating them to 16 bytes.",
  "ebb77e41": "Update doc to reflect that remote cache spawning is not experimental",
  "8769f843": "Reinstate external documentation performance.md",
  "c7682441": "Bazel client: faster startup flag diff'ing",
  "38af41d2": "A flag --remote_default_platform_properties should invalidate the action cache",
  "1c2128be": "Perform the resource name obfuscation optimization based on presence of ProGuard specs, rather than `-c opt`.",
  "b66f3f58": "Remove resource path shortening optimization from Aapt2ResourcePackagingAction.",
  "f7a31b30": "Prevent action-cache duplicate suppression",
  "935e0bb3": "Wire up the resource optimization config file from shrinker to optimizer.",
  "5fe144a7": "Wire up the resource name obfuscation optimization as performed by AAPT2.",
  "8b0bfaf6": "Include cc configure headers in the cache key",
  "e2a9e4a3": "Add support for thin LTO optimization in Bazel",
  "4648d86f": "Update Starlark args performance docs with args.add[_all]('--foo', ...).",
  "d62f8924": "Improve performance of string methods count and split",
  "54a96cd0": "Improve performance of string.replace",
  "31262056": "Force inlined starlark values to always load and cache the entire downwards transitive closure. We never want to load the same bzl twice in the context of a single package, even if we use a cached value that transitively loads a bzl file that is no longer explicitly keyed in the cache.",
  "b7d300c6": "Fix incorrect stdout/stderr in remote action cache. Fixes #9072",
  "c5c078cb": "Introduce top-down action caching in Bazel. The top-down cache may be provided by a Bazel module.",
  "a9cdc3dd": "Move ProguardHelper to android and remove support for unused --java_optimization_mode flag",
  "5af49c0e": "Update performance doc related to depsets",
  "1d897e26": "Write documentation on optimizing build performance for Android app builds.",
  "8860c3ee": "Add no-remote-cache and no-remote-exec execution requirements",
  "172bf720": "Don't say 'checking cached actions' until execution begins.",
  "8bce4496": "Tell Proguard to keep all members of caffeine cache in JavaBuilder proguarded jar.",
  "781b0887": "Allow passing extra HTTP headers to remote cache",
  "594c32d8": "Move up discarding the analysis cache so that it is done prior to invoking executionPhaseStarting on any ActionContextProvider.",
  "7c0cb0ad": "bazel_repository_cache_test: explicitly allow unverified downloads from localhost",
  "60df9051": "add ubuntu1604 and ubuntu1804 as rbe platforms - use rbe_autoconfig - mark slow tests as highcpu",
  "e9521d32": "Query performance: compute hashCode just-in-time",
  "6a8759f7": "BEP async mixed mode: If upload mode is set to async, we still block on 'fast' upload protocols. We consider local file writes with local uri references to be fast enough for this.",
  "ebca24c5": "Query performance: Reverse output buffering",
  "89a6ff59": "Have Extrema support non-Comparable types, so that it can potentially be used in more places in the codebase. Also clean up javadoc and document the performance characteristics.",
  "c2d088f5": "Remove incorrect cache in AndroidLocalTest.java",
  "1cf2f7b5": "Query performance: don't copy on every eval call",
  "13bf21bd": "Query performance: Add flag for graphless genquery",
  "368b6d37": "Let StarlarkSemantics memoize the hashCode(). This is used as part of the MethodDescriptorKey of a FuncallExpression and thus performance is critical.",
  "29981f32": "Deflake //src/test/shell/integration:test_test by ensuring that the test we want to be skipped will actually be skipped: ensure the action that generates its source file will never get a cache hit, and increase the sleep time so that it will not be built before the other action fails.",
  "2ecaf8aa": "Properly setup package cache before doing starlark options parsing.",
  "1ef910b2": "Query performance: Support length-delimited protos",
  "f718a424": "Fix performance regression with manual trimming.",
  "b7eca20d": "Only cache structured variable lookups.",
  "da125a85": "Fixed instructions for GCS remote cache",
  "5260019f": "Query performance: use a custom Iterator impl",
  "78e0da20": "Fixed hyperlink in skylark/performance.",
  "6c0dc363": "Allow interrupts while accessing the cache",
  "c917ab20": "Implement artificial cache sepration",
  "7aa6692f": "Query performance: avoid printf",
  "e1803d10": "Query performance: avoid unnecessary operations",
  "3926e9a8": "repository cache: add entries atomically",
  "0c2ddc49": "Query performance: skip attributes w/o labels",
  "a1ea487e": "Do not pre-cache changed files under managed directories",
  "a03479fa": "More package performance: Avoid copies when doing Target enumeration in package. By using a BiMap we efficiently retrieve the Set of all Targets.",
  "8b23eeca": "Query performance: ForkJoinPool for LabelVisitor",
  "7615e1a7": "Package loading micro-optimizations. - avoid unnecessary target copies - avoid unnecessary loop iterations - don't use java streams in hot code",
  "c96839f6": "Query performance: resolve simple patterns directly",
  "ce62e55a": "Add option to switch ExecutorService to ForkJoinPool for potentially better performance.",
  "a565f08d": "select(): fail fast and more precisely on empty dictionaries.",
  "794a020b": "Weave the trimming cache into Skyframe, but do not use it yet.",
  "ab96caa0": "Include execution info in TestRunner cache key.",
  "742ca888": "[Docs] Fix path of /cas/ example in remote cache docs",
  "37beb424": "fix discard_analysis_cachetest.sh to properly depend on $(JAVABASE)",
  "9c0a633c": "Remove debugging for b/128541100, since the cause is now understood and benign (nonexistence of a node is cached in a SkyFunctionEnvironment for the duration of the SkyFunction evaluation).",
  "207528cc": "Improve performance of BuildOptions#diff. Improvements come from:",
  "19a151fa": "Improve performance of OptionsBase#asMap.",
  "d8ba2695": "renamed --remote_cache_proxy to --remote_proxy to make it more generic",
  "1f4d1af1": "Implement upload timeout for remote HTTP cache.",
  "e038a267": "remote: remote_http_cache flag renamed to remote_cache",
  "7faa0efc": "Introduce a FileSystemCalls.getType() function that just returns the type of a file in question. In quite a few places that is sufficient and we might be able to get the result based on a previously existing readdir() or stat() request if we have either of them cached.",
  "e07f9e3b": "Allow for empty value in --remote_http_cache",
  "da146d2b": "skip_cache_lookup after download cache not found",
  "b1c3c777": "remote: removed deprecated flag experimental_remote_spawn_cache.",
  "1d59e25b": "Add methods to allow for getting the children and a collection view of NestedSets that propagate an InterruptedException. This should have no performance impact because the iterator for a NestedSet already calls .toCollection.",
  "d087fe27": "Fix reuse of cached static ConfiguredRuleClassProvider in tests",
  "973542e9": "Add black box test for package loading cached by benign workspace change",
  "62f54588": "Treat cache failure action as a cache miss",
  "ec1b22e2": "Lazily initialize cache for variable lookup. Many instances of toolchain variables never lookup named variables and thus don't need this cache.",
  "76370d54": "Implement combined disk and HTTP cache",
  "16972192": "add user-agent header for remote cache (http)",
  "f0a1597c": "remote: properly reset state when using remote cache. Fixes #7555",
  "7567fb38": "Use a ForkJoinPool instead of a ThreadPoolExecutor for the globbing. This makes the multi-thread more efficient, especially when --legacy_globbing_threads is dialed up on slow file systems.",
  "c51d0ee5": "Handle --discard_analysis_cache when not storing transitive packages in aspects.",
  "c163c91f": "Add an import label to visitedNested only after we check for a cached value. Otherwise we may add the label to the set of visited items but not remove it.",
  "39ffd978": "Always register dependencies as we encounter them with skylark import lookup caching. Otherwise a nested load statement may throw an exception prior to us having registered the dependencies while using cached values.",
  "5074b7c3": "Add a boolean to the AnalysisPhaseCompleteEvent to specify if the analysis cache was dropped or not prior to the analysis phase starting.",
  "6dbfafe6": "In Parser, dedupe the String instances referred to by StringLiteral instances. Implement the same optimization in the serialization code.",
  "b430df1e": "testenv.sh: Fix wrong path to bazelrc for shared repo caches.",
  "0b84634f": "Move discard analysis cache behavior into SkyframeExecutor proper, so that it can be shared by all Skyframe implementations.",
  "92eb0037": "Add fast paths to PrerequisiteArtifacts.get(). Most often, ruleContext.getPrerequisites() returns 0 or 1 FileProvider instance. In these cases, there is no need to ever create a HashSet for deduplication.",
  "31cc0936": "Allow using a shared repository cache and install base for our integration tests.",
  "288a6923": "Ignore failure during touchFile on a cached file in the repository cache.",
  "f157053a": "Do not upload artifacts from the local execution of no-cache spawns.",
  "bb1c2a13": "Do not upload artifacts from the local execution of no-cache spawns.",
  "0a4c24e9": "Remove TODO regarding slow sandboxfs unmounts.",
  "fbf8fb97": "Use minimal JDK, which is cached on bazel-mirror.",
  "cff660bd": "Check if action cache should be updated only if it's enabled",
  "a3a5975d": "Fix a race condition in remote cache",
  "ba07b808": "Move BuildEventServiceClient lifetime management in to the BuildEventServiceModule implementations, allowing them to cache connections to a backend across blaze invocations.",
  "3942687e": "Remove SkyFunction ConfigurationFragmentFunction. It's nothing more than a cache of fragments, and can be stored in the only place it's used, BuildConfigurationFunction.",
  "61020a70": "Add a BigIntegerFingerprint class to create a fast non-cryptographcially secure fingerprinting scheme for ActionExecutionValues.",
  "fea6ab40": "Passing cache results priority through to the remote server.",
  "01930193": "Fix race in BuildEventServiceGrpcClient where we could spuriously return null on fast stream responses.",
  "2f985444": "Fix flakiness in cache stats tests.",
  "dbca768a": "Add a new option --xbinary_fdo to enable xbinaryfdo optimization instead of using --fdo_optimize.",
  "88c44108": "Remove --incompatible_use_per_action_file_cache",
  "d96c908d": "Documentation for cache hit debugging for local execution. Mostly reference to the similar doc for remote execution, but changes a few accents.",
  "9e61fdf3": "Use gsha256 if available on macOS, because it's much faster than shasum.",
  "2af641cb": "Documentation for cache hit debugging for remote execution. Remote cache debugging would include this but has its own quirks that I'm planning to explain in a separate doc.",
  "8bbc058a": "Reuse the pre-computed spawnSummary. Add an integration test for remote cache hits status line.",
  "b7ae7b06": "Make incompatible_use_per_action_file_cache a no-op",
  "bff6b111": "Flip the default for incompatible_use_per_action_file_cache in Bazel",
  "5d13aab2": "Scope the cache lifetimes in NestedSetCache to the lifetimes of the underlying contents of NestedSet: either an Object[] or a ListenableFuture<Object[]>, rather than wrapping Object[] in a future. This fixes a bug where the wrapping future goes out of scope, leading us to not dedup deserialized nested set contents that are still in memory.",
  "6cf6278a": "Display the names of changed options when dropping the analysis cache.",
  "6a267fa3": "Fixing HTTP cache bug in RemoteWorker -- no cache hits were ever possible because the cache was recreated on every request.",
  "79d5ac37": "Remove online computation of slowest components",
  "69abf23f": "Merge CcCompilationContext.getUsedModules() and CcCompilactionContext.removeDeclaredIncludes() for increased performance (avoid iterating over a large NestedSet twice). Also slightly tweak implementation.",
  "1568cfd2": "Split key and value arrays of ActionInputMap to improve performance. I am not entirely sure what the original motivation for this was, but I think on average, it is more effective to split the two arrays.",
  "6b4a261d": "Address TarFileWriter.add_tar performance issue",
  "64823dd9": "Querying the remote Capabilities service for remote execution/cache builds.",
  "e8881503": "Support disabling the repository cache",
  "5184cb79": "Document the repository cache and the --distdir option",
  "6e9af754": "Implement a MinimalOutputStore that caches less data.",
  "bf6a63d6": "Fixes #6219. Don't rethrow any remote cache failures on either download or upload, only warn. Added more tests.",
  "1e68ace8": "Presize the inputs array when reading an action cache entry.",
  "eb817074": "Tolerate a resolved artifact having a different source root than the one we would normally find by searching. Such situations can arise legitimately when the artifact was resolved using the PackageRootResolver, which does direct filesystem access to find containing packages, as opposed to ArtifactFactory's #findSourceRoot, which uses the static collection of packages loaded during analysis. These two can differ when a package is not part of the build, so isn't in the static collection, but an artifact from that package is resolved while reading back from the action cache.",
  "82472f45": "Uses the fingerprint cache to compute the key for getDeclaredIncludeDirs in CppCompileAction.",
  "bfe9743a": "Avoid traversing cached skylark import lookup value deps multiple times when registering dependencies with skylark import lookup function caching. Can lead to exponential blow up (for example, a chain made of diamonds).",
  "a205ed85": "Rephrase InMemoryFileSystem in terms of error codes rather than exceptions, enabling better performance on statIfFound() / statNullable() calls.",
  "3fc3ddbc": "Skip __init__.py in __pycache__ dir.",
  "dfcf0ba6": "Reintroduce proper action prioritization that got accidentally disabled. This now always creates the AtomicInteger globalEnqueueIndex, even when ForkJoinPools are used. I think the performance benefit not doing that does not justify the additional complexity doing it selectively.",
  "42389d94": "Update the comment in SpawnExec since we've changed the behaviour: on remote cache hits, rather than leaving the runner empty we set it to 'remote cache hit'.",
  "19d692c5": "Avoid re-clearing the analysis cache (and saying so) after cleans.",
  "0bd89dc4": "Don't use SkyFunction.Environment#registerDependencies optimization when using MAX_CHILD_VERSIONS evaluation behavior: the versions must be known to avoid over-evaluating.",
  "a6d7dc78": "Use a ForkJoinPool instead of a PriorityBlockingQueue-based ThreadPoolExecutor for the analysis phase. During the analysis phase, lots of very short actions are executed (File, FileState, ...) and contention in the executor has a substantial performance impact.",
  "11c08030": "GroupedListHelper#addItem microoptimization",
  "c7afc531": "Use lock-free synchronization in the fast paths of ExperimentalEventHandler. Experiments have shown that these can cause a substantial amount of contention.",
  "1d6d4a7c": "Skip __init__.py in __pycache__ dir.",
  "90729a57": "Fix lock contention in Reporter.startTask/.finishTask by: - Using a thread-safe container to store handlers. - Using a ThreadLocal NumberFormat to produce readable action counts. NumberFormat (or rather the default implementation DecimalFormat) use internal state and locking. - Adding a lock-free fast path for START and FINISH events in ExperimentalEventHandler.",
  "077ef5b5": "Disables ActionFS sandboxing of discovered derived inputs for performance reasons.",
  "d1a203bb": "Add support for VirtualActionInputs to the remote cache.",
  "f29f78d1": "Keep the analysis cache between builds when only trimmed test options change.",
  "bbb32f3f": "[Skylark] Improve Skylark interpreter performance.",
  "9c9b85f3": "Slightly improve UnixGlob implementation. For recursive patterns, the current implementation leads to two identical recursive calls. This isn't harmful as there is a cache that will make the second call very cheap, but does not seem right.",
  "ccb74569": "Improve artifact->owner label accounting in two ways. First, don't do the full mapping unless requested. This gets rid of any performance issue for the vast majority of builds. Second, if requested, use a custom data structure so that we don't have to create a full HashSet for artifacts whose only owning labels are their own owner labels.",
  "4c33a66a": "As a slight optimization in PackageFunction, treat as PERSISTENT any io errors encountered during the Skyframe part of hybrid globbing. The underlying transience of these is already handled by the Skyframe transience mechanism.",
  "d8a2d524": "Read a byte array instead of a certain number of bytes that are indicated by a preceding integer when serializing BuildOptions.DiffForReconstruction. Reorder the cache map inserts due to a subtle race condition that can occur.",
  "84bfb9af": "Sort expansions of aggregating middlemen by exec file path. These commonly contain a large set of files required for a particular toolchain that are added to every single compile action. Some exeutors in turn sort all action inputs in order to properly cache, deduplicate and serialize them.",
  "bb781f95": "Remove the 'slow read' warning when using multi-threaded digesting.",
  "3520d0df": "Restructure the NestedSet usage in CcCompilationContext. Goals: - Don't use NestedSets of NestedSets. Not sure whether this is a performance improvement or has serialization benefits, but it does make understanding the structure a lot easier. - Use the same large NestedSet for all header information (whether or not they are modular and what pregrepped headers might exist). This speeds up the include scanner calls getLegalGeneratedScannerFileMap and getModularHeaders because they now iterate over just a single NestedSet and the second evaluation of a NestedSet is much cheaper. In a subsequent change, we can likely fold all three iterations over this NestedSet into one (in getLegalGeneratedScannerFileMap, getModularHeaders and getUsedModules).",
  "8f168798": "Make loading/analysis phase a lot faster.",
  "0feb714b": "Don't unnecessarily create a NestedSet and remove a stale comment. We do want to use input discovery when building modules for performance reasons.",
  "49eaa8f0": "Bazel,client: actually cache directory creations",
  "c7a2a3dc": "Fix missing newline after repository_cache value in info command output.",
  "f5043d68": "Windows,client: extract embedded binaries faster",
  "da917307": "Windows,Bazel client: check embedded tools faster",
  "61044a00": "Delete switch for nested set serialization. It's fast enough to be on by default.",
  "a9b55855": "Let ConfiguredRuleClassProvider decide whether to drop the analysis cache.",
  "d1544032": "ActionFS supports fast digests. Add test coverage for this and some file metadata operations.",
  "de2623cc": "Remove CcCompilationContext.TransitiveModuleHeaders#getTransitiveModules. This information is persisted for testing only, and considerably slows NestedSet serialization.",
  "522f76ae": "Remove SerializationConstants.VALIDATE_CONFIGURED_TARGET_VALUE, since ConfiguredTargetValue is no longer prohibitively slow.",
  "6b163527": "Allow disabling the simple blob caches via CLI flag overrides.",
  "52fa20f5": "Build support for enabling cross binary FDO optimization.",
  "745232b1": "Add hacky method to InMemoryNodeEntry for fast but unsafe iteration over in-progress reverse deps.",
  "95010e41": "Add cache to NestedSetCodecWithStore to merge NestedSets that should be reference-equal on deserialization. We cannot just intern NestedSets because NestedSets with the same underlying children may still not be equal, so we wrap them in an object that does consider their children when calculating equality.",
  "b3390117": "Do not cache RepositoryResolvedEvents",
  "cdf118a6": "Enable --experimental_remote_spawn_cache by default",
  "628e2acb": "Hand-roll PathFragment$Codec, to squeeze a bit of performance out of it.",
  "a08bfba6": "Remove string prefix optimization. With new UnsafeJdk9StringCodec, it's no longer worth it.",
  "88f0f85f": "When using JDK9, replace naive StringCodec with an optimized codec that uses the String's underlying raw bytes. This avoids byte copying and UTF interpretation. Experiments show it is approximately 15(!) times faster than the naive StringCodec for serialization and 2 times faster for deserialization (10 times faster for non-ASCII strings).",
  "1b333a2c": "Fix Cpp{Compile,Link}Action environment and cache key computation",
  "cc0f41dc": "Build support for passing a software cache prefetching hints file.",
  "d0561c72": "Make inclusion of the zipper executable in CcToolchain depend solely on whether FDO optimization is used (--fdo_optimize or --fdo_profile)",
  "0015d18f": "Optimizes performance of ActionFS staging and eliminates ActionFS updates.",
  "150a9065": "DynamicCodec tweaks to make it into a super fast String serializer.",
  "43181c93": "Add a fast path for validating include directives. Most -isystem directives are actually added for cc_library's include-attribute. For these, the same path is present on the command line, but also ignored. For N of those directives, we currently do O(N^2) prefix checks, which is unnecessarily expensive.",
  "36bc96e2": "Use com.google.common.cache instead of MapMaker.",
  "dd3ddb0e": "Allow banning symlink action outputs from being uploaded to a remote cache.",
  "53af74ad": "Harden Profiler slow tasks capping test",
  "4ee7f114": "remote: introduce --disk_cache_flag",
  "e0d80356": "repository_cache: touch files on cache hit",
  "8a1b4ab0": "Fix profiler slow task limiting",
  "538c3ebb": "HttpDownloader: also cache files downloaded without provided hash",
  "c49f9d8b": "Repository cache: add a put method determining the key itself",
  "48813899": "Test repository cache with Skylark version of http_archive",
  "1a2ab6d5": "Relax the assertion in Desugar for checking the calls to $closeResource(...). It is possible that $closeResource(...) is not used as the calls to it might be eliminated by some optimization tools, such as Proguard.",
  "9dd14499": "Add an info-key for the repository cache",
  "840d5add": "repository_ctx.download_and_extract: mention cache in documentation",
  "b1280de5": "Remove old name for --repository_cache",
  "489f0e89": "Remove 'experimenatal' tag from option repository_cache",
  "b4897fc0": "Save the lookup and write of the codec index when the object is memoized, as well as the NEW_VALUE/BACKREF enum write. Probably doesn't actually take much space/time, but free optimization.",
  "a8023b79": "Add stats about cache hits and execution strategies to Bazel's UI.",
  "52859b45": "Change profiling to only accept strings for its 'description' argument. Profiling can hold onto objects for the duration of the build, and some of those objects may be temporary that should not be persisted. In particular, UnixGlob and its inner classes should not outlive loading and analysis. For the most part, care was taken in this CL to only use strings that required no additional construction, mainly to minimize garbage (retaining references to newly created strings is not as great a concern since only the strings corresponding to the slowest K tasks are retained, for some relatively small values of K). Action descriptions for actually executing actions are eagerly expanded because that work is minimal compared to the work of actually executing an action.",
  "b5e893a5": "Improve performance and output of bazel_determinism_test.",
  "460e0cf2": "Remove `--swift_whole_module_optimization` flag.",
  "4465dae2": "Only allow regular files and directories spawn outputs to be uploaded to a remote cache.",
  "656a0bab": "Big round of sandbox fixes / performance improvements.",
  "7fff2bf3": "Don't bound the method and field name caches in FuncallExpression.",
  "f3130e11": "Memoize non-rule configured targets. This is probably a good idea in general, but especially necessary because OutputFileConfiguredTarget (which is not a RuleConfiguredTarget) contains a reference to its generating configured target, so all the optimizations needed for RuleConfiguredTarget apply to OutputFileConfiguredTarget.",
  "4bf49ca0": "Allow optimization related features to be ignored when unsupported as opposed to reporting errors",
  "deccc485": "remote/http: support refresh of oauth2 tokens in the remote cache.",
  "c7e31d3c": "As a micro-optimization, inline the 'Callstack.enabled' guard. The java-land function call overhead of the morally no-op Callstack#push/pop was profiled to be ~1.4% CPU in a benchmark of loading a BUILD file that was particularly heavy in Skylark function calls.",
  "2838dd9f": "Remove unnecessary I/O operations from handling remotely executed actions (fixes performance regression #4749). Also adding Skylark tests for input/output directories.",
  "a2fc4e34": "Fix PackageFunction's call to Package.Builder.Helper#onLoadingComplete to pass along the wall time of the load, even when the package in question was in PackageFunction's internal cache (e.g. the current #compute call is a PackageFunction Skyframe restart).",
  "b7dad967": "Split up action graph cache into multiple classes for cleaner code.",
  "7b1b4a41": "In TransitiveBaseTraversalFunction, only process the deps once we have all the information we need. It is a waste of CPU time otherwise as we will just lose the state. Note that we don't pass the env directly into the processDeps function so this wasn't a skyframe restart optimization. Also, none of the state recorded in the processDeps for the direct label deps is used in computing the aspect deps, as we immediately call targetAndErrorIfAny#getTarget.",
  "2dca40b3": "Fix typo in cache download failure warning",
  "e5c9bdf9": "Propagating whether there was a cache hit in the SpawnResult.",
  "14dbe139": "Get rid of the last reference to getAttributeMapper by keeping packages which are referenced by TopLevelTargets when we discard the analysis cache.",
  "157caed0": "experimental_repository_cache: support relative paths",
  "149e95b3": "Converts wrapped_clang from a bash script to a C++ source file which is compiled as part of bazel's repository bootstrap. This should make crosstool's clang invocations faster. An added benefit of this is that wrapped_clang.cc supports the 'DSYM_HINT' flags specified through the CROSSTOOL, so with this change, apple_binary gets support for the --apple_generate_dsym flag.",
  "ac03ccfc": "Use nested set cache in key computation for CustomCommandLine.",
  "15bf148e": "Add a test verifying --experimental_repository_cache",
  "a39a5628": "Introduce a wrapper around the ImmutableSortedSet<Class<? extends BuildConfiguration.Fragment>> set of Fragment classes that is part of the BuildConfigurationValue.Key. This class allows us to compute a fingerprint of the wrapped ImmutableSortedSet, making equality comparisons fast. The number of additional wrapper objects is the number of distinct sets of fragment classes, so 1. (In fact, we don't even need to compute a fingerprint, since reference equality does the job for us here, but we do it just to be conservative.)",
  "8896d2e2": "Prevent broken cache entries on concurrent file changes",
  "534191b7": "Remove BuildConfigurationValue#Key#enableActions field. Saves 8 bytes of memory and some work: BuildOptions#equals and #hashCode already take that value into account, so pulling it out does nothing but slow us down during Key construction.",
  "4b6f10cf": "Memoize equals and hashCode operations for BuildOptions. Currently, equality is so slow that if we have to compare many of them, the build can basically never finish. This is needed for a follow-up in which BuildOptions are part of many SkyKeys.",
  "5eb4cb88": "Remove some code leftover from back when BUILD file preprocessing was a thing. Also remove some TODOs that were leftover from before we added the caches used after a PackageFunction restart.",
  "6dcc1393": "Some performance improvements to AbstractPackageLoader.",
  "62dfea75": "Remove cached version of FileSystemUtils#createDirectoryAndParents.",
  "b30b9335": "Improve testing for miss details on action cache stats.",
  "a0ea569f": "ParallelEvaluator: report events early for cache hits",
  "16c36c3f": "Enable syscall cache and eager sub-directory globbing in AbstractPackageLoader.",
  "905e3072": "remote: Rename --remote_rest_cache to --remote_http_cache",
  "30ffe79e": "remote: deprecate --remote_rest_cache_pool_size",
  "e440c7e7": "remote: fix rest cache documentation. Fixes #4246",
  "28341132": "Remove hyperthreading multiplier to improve performance.",
  "5a3c7ab1": "Remove hyperthreading multiplier to improve performance.",
  "a22d0e9c": "Fix: uploading artifacts of failed actions to remote cache stopped working.",
  "ff4f5229": "BEP: In the TestResult meta data, allow reporting remote cache hits",
  "581c197e": "remote: Have --remote_rest_cache respect --remote_timeout.",
  "d0227d3c": "Add some minor debugging messages to discard_analysis_cache_test, purportedly to diagnose issue #4181.",
  "71fc9c67": "Change error on adding a directory to the remote cache to be non-fatal",
  "7585dcd6": "Windows CROSSTOOL: Define DEBUG in fastbuild and dbg mode",
  "a13ac58a": "Shard android_integration_test's sdk, proguard and aar tests out to improve performance.",
  "b92dae93": "Show the used client env digest in bazel dump --action_cache.",
  "72cbef72": "More resilient to remote spawn cache errors",
  "6b1b8a9d": "RELNOTES: --keep_incrementality_data flag allows Bazel servers to be run in memory-saving non-incremental mode independent of --batch and --discard_analysis_cache.",
  "f75eadea": "Add docs to Skylark performance about len(depset) vs. if depset.",
  "430612b1": "Fix up Skylark performance doc.",
  "daa394d7": "Add performance section to Skylark docs.",
  "b80c21a3": "Memoize configuration supplier in InfoCommand. Previous implementation never actually assigned to the configuration, so we were redoing Skyframe graph setup each time. We still cached actual loading/analysis work, but unnecessarily injected precomputed values each time.",
  "5de01e5e": "Stream rest cache file uploads.",
  "d8a5753a": "In PerActionFileCache, tolerate requests for Artifacts that are not in the cache if we're doing input discovery: input discovery may find new artifacts we don't yet know about. Similarly, in SingleBuildFileCache, use the Artifact's path if it's available, rather than the poor man's route of the execRoot.",
  "b0c1ac86": "Couple of Fileset micro-optimizations: 1. Prevent a redundant map.get() in SkyframeFilesetManifestAction#establishSkyframeDependencies 2. Make a more memory efficient FilesetEntrykey instead of reusing the LegacySkyKey.",
  "e7af2092": "Rather than logging the amount of free physical memory on Linux systems, log the amount of *available* physical memory. This includes memory used as cache or buffer that will be evicted if an application requests memory, and is a much more realistic metric of utilization than free memory, which is usually <1% of memory available to the machine.",
  "97a2330f": "Show --experimental_repository_cache in Bazel options : https://github.com/search?q=experimental_repository_cache&type=Issues&utf8=%E2%9C%93)",
  "9573a0d3": "Collect action cache hits, misses, and reasons for the misses.",
  "c6122b6a": "Make local_action_cache_test.sh executable.",
  "2f08a180": "Include all test output files (e.g. undeclared outputs) for non-cached test executions and tests with multiple attempts. Previously, non-cached test execution would incorrectly only include test.log and test.xml.",
  "7744b86e": "Uploading failed action outputs to the remote cache, because even if the tests fails, we still want to be able to download the logs and other outputs from CAS.",
  "aeb863a9": "CI slow-tests: fix parameters for non docker",
  "88614eed": "CI slow-tests: Add '+' to enforce the tag presence",
  "c2d0d96b": "CI: Add missing comma to the docker-slow-test config",
  "f5dc80b3": "Move bazel_determinism_test to bazel-slow-test job",
  "987f09f0": "Move caching of OptionDefinitions to be static, and remove uncached extractions of OptionDefinitions.",
  "c2917264": "remote/http: distinquish between action cache and cas",
  "59787f15": "Refactor collection of action cache statistics.",
  "89b314c9": "Enforce that there should be no RuleConfiguredTarget objects on the heap during execution when using --discard_analysis_cache.",
  "cc28a1c3": "Added JVM option -XX:+UseParallelGC to make J2ObjC faster",
  "3ca2a10d": "Delete cachedSymbols from LoadStatement.",
  "65e0f78e": "Fixing #3552: re-execute cached orphaned Actions.",
  "c69dbf8e": "Use cached values for option converter types.",
  "2efea9dd": "remote: Provide a clear error message if the remote cache is in an invalid state.",
  "9626bb49": "remote: Refactor RemoteSpawnRunner to distinquish between remote executor, remote cache and local executor errors.",
  "49b4bd3d": "Micro-optimization - presize internal Selector map",
  "77e8b03f": "Minor optimization to function arg parsing",
  "2266a6f8": "Micro-optimization for TransitiveBaseTraversalFunction",
  "04304925": "BEP: expose the number of cached test action in the summary",
  "4c55898e": "Replace create_embedded_tools.sh with a faster Python version.",
  "562fcf9f": "remote: Don't upload failed action to cache. Fixes #3452",
  "9f7edd7a": "remote: Don't cache test if marked 'external'. Fixes #3362",
  "480d6038": "Add minSdkVersion optimization to Blaze.",
  "9ef1521c": "Enable connection pooling for the remote REST cache",
  "716b5272": "Only create a single per-build instance of the remote cache / executor",
  "2347169c": "Document --nouse_action_cache",
  "ba8d95ff": "Small optimization to avoid allocating strings in the bind mount loop.",
  "c1e0ca22": "sandbox: Create more compact sandbox profiles faster.",
  "889bbe55": "Add a custom interface for cache hit processing in actions",
  "f49f2be4": "Add a custom interface for cache hit processing in actions",
  "92bad298": "sandbox: Precache writable directories in DarwinSandboxedStrategy.",
  "8725fe43": "Add a javac-turbine option for the reduced classpath optimization",
  "902af4e0": "Reduce the time for the slow test",
  "dd99e4b9": "Also download stdout & stderr in case of a cache hit",
  "f4408f6b": "Fix RemoteSpawnStrategy to upload stdout/stderr to the remote cache",
  "7a90b9a4": "Write stdout and stderr to the remote cache",
  "91e4dedd": "Add ordering semantics for cached options data",
  "95d42809": "When tracking the critical path, if not keeping incremental state, don't keep references to actions indefinitely. Instead, once an action is finished executing, keep just some metadata about it. This allows actions to be unconditionally dropped when running with --batch, --discard_analysis_cache, and --keep_going, even if profiling is enabled.",
  "93e3eead": "If --batch, --keep_going, --discard_analysis_cache, and the new --noexperimental_enable_critical_path_profiling flags are all specified, then Bazel will delete Actions from ActionLookupValues as they are executed in order to save memory.",
  "833fd12f": "Improve glob prefetching performance by providing a more realistic environment.",
  "31654bd4": "Drop loading-phase values if --discard_analysis_cache is true and we're not keeping incremental state.",
  "9ec917f1": "Actually clear the per-build syscall cache after loading. Setting it to null doesn't work because the PackageFactory keeps a reference to it.",
  "db4dec23": "Clear AspectValues when discarding analysis cache, along with ConfiguredTargetValues. Also clear transitive packages for both, even for top-level targets.",
  "05e5b86e": "Remove the remote_cache_test target, which refers to a non-existing file.",
  "67019326": "Fix --nouse_action_cache for tests.",
  "a6ee96f9": "Fix inadvertent performance regression introduced by the recent rewrite of 'blaze query'.",
  "58a5a7d5": "Remove experimental Java min classpath optimization",
  "ad7fa4db": "Merging remote_cache and remote_worker into a single binary.",
  "12e9947d": "Topic describing 'what is Bazel' at a high-level, with a focus on: build files and their language, the dependency graph, and Bazel being fast/correct/reproducible.",
  "399ff5b3": "Adding a small flag allowing to control remote caching without remote execution. Usually it is enabled, and will be triggered whenever a remote_cache is specified, but a remote_worker is not; however, this flag allows to specifically disable it for the cases where remote_worker is defined, but something went wrong and we were forced to execute locally. This is useful to save time when the remote API does not actually support setting the remote action result.",
  "2f111920": "Convert --use_action_cache to a regular option",
  "564be0d1": "Remove the first result in benchmark, since it's slower than others. And a little refactor.",
  "c10e0648": "Disable cache for /file_list.",
  "8973201e": "Switch J2ObjC to use compile-time jars (interface and header jars) instead of actual class jars. This should improve the action cache hit for J2ObjC translation actions.",
  "4afb4b51": "BEP: Also report the xml file in cached test",
  "a2d61fa3": "Skip computing digests when --use_action_cache=false.",
  "7914e145": "Activate the 'dbg', 'fastbuild', and 'opt' features in the objc CROSSTOOL.",
  "45282686": "Ensure test results are also reported for cached test",
  "226724a8": "Adds --[no]use_action_cache startup option to disable the action cache.",
  "64200b40": "Make aar_import fail fast if no android_sdk is set up.",
  "f1813e48": "Java template windows performance",
  "67a53d22": "Benchmark part 2 (preparation for benchmark) Builders: tools to benchmark the performance. BuildCases: provide all targets for Builders to build.",
  "1f2caa59": "Simplify the Action interface by asking it a set of allowed inputs instead of to resolve exec paths found in the action cache.",
  "fe90b364": "Benchmark part 2 (preparation for benchmark) Builders: tools to benchmark the performance. BuildCases: provide all targets for Builders to build.",
  "bbfa9fa5": "Java template windows performance",
  "09f42d58": "Fix an issue with cached EventHandlers in SkyQueryEnvironment's resolver",
  "71a22b1b": "Make --hazelcast_node and --remote_cache options mutually exclusive",
  "8063f294": "Make the Path to FileSystem cache non-static for persistent workers",
  "0d1dc553": "Improve performance and semantics of union of Skylark sets",
  "86045da9": "Fix an analysis phase performance regression with dynamic configurations.",
  "7a131776": "Windows, JNI: build the DLL with /O2 optimization",
  "1c44aa65": "Debugging flag (will rarely be used by actual users) that disables remote execution cache.",
  "3875712c": "Compute module file compile command line flags right before executing the action. This removes flattening of nested sets (for the transitive/top-level header modules) in the analysis phase making it about 10% faster. Also remove the calculation of top-level modules entirely as it doesn't seem to be necessary and doing it might actually lead to unexpected results when actions are restored from cache and thus the module input flags are computed from the actually used inputs (determined from .d files).",
  "4c678079": "Improve reliability/performance of Bazel downloads",
  "7f8e0456": "Improve reliability/performance of Bazel downloads",
  "39dbc980": "Adding an option to set the digest function that everything uses. Minor refactoring: enabling potential fast digest computation of more than one digest function type. Usage: bazel --host_jvm_args='-Dbazel.DigestFunction=SHA1' build ...",
  "5e946732": "Stop including the size of the action cache file in our crash message. I've never seen a case it was useful, and it adds to startup latency by putting a file stat on the critical path of every command.",
  "b7eeaa37": "Remove fail-fast check in NamedForkJoinWorkerThreadFactory constructor. Costs CPU for what should be catchable by tests.",
  "b9ee4b6d": "Remove module file flags from a CppCompileAction's cache key.",
  "63edbd3f": "In SkyQueryEnvironment, cache some more objects that are just functions of final fields.",
  "34c3dc81": "Implement action cache resolution for ObjcCompileAction. This allows for correct behavior in dotd pruning after a bazel shutdown - the action will realize that its inputs are not known and will consult the on-disk action cache.",
  "a0b1e35b": "Declare bazel_repository_cache_test as large",
  "1396286e": "Upload empty files to remote execution. I was too eager to optimize empty files away -- Bazel should still work with remote execution servers that don't have that optimization.",
  "4b4a53e1": "Syncing up the latest protos with the internal version. Adding UNSUPPORTED option to setting remote execution cache.",
  "a1c7534d": "Provide a file action cache for action executor in TimestampBuilderTestCase.",
  "341e5dda": "Refactor in preparation for adding minimum classpath optimization.",
  "87c6d915": "Bridged --experimental_repository_cache value to HttpDownloader. Created HttpCache skeleton to implement caching logic of HttpDownloadValues as the first step (more types of caches will come later).",
  "239d995e": "Implemented a '--experimental_repository_cache' option as the first step to caching external repositories.",
  "366cb3de": "Implemented a '--experimental_repository_cache' option as the first step to caching external repositories (go/bazel-cache)",
  "ad1a77e2": "Eliminates performance overhead of --experimental_dynamic_configs=notrim.",
  "a19dc90c": "Prevent interleaved slow interrupt stack traces",
  "68e55515": "Tolerate the rare state where a dependent of a previously cached shared action sees a different shared action that is in the midst of being an action cache hit.",
  "48859c1d": "Move hash computation from bash script to a python script because calling md5 repeatedly from bash is too slow.",
  "3aa7d63c": "Remove the --show_cached_analysis_results command line option, which was a no-op.",
  "6e2142af": "Adding a remote gRPC cache server to wrap Hazelcast. Useful to test the prototype.",
  "de32ae7e": "Basic implementation of a remote gRPC based cache.",
  "a95b3efd": "Open source discard_analysis_cache_test.",
  "374f7391": "Fix formatting of help text for --cache_test_results.",
  "8ebfb431": "Some optimizations in Type#flatten (used under the covers by AggregatingAttributeMapper#visitLabels): -Rename Type#flatten to Type#extractLabels. -Change the return type of Type#extractLabels from Collection to Iterable. This way we don't need to create and concatenate large lists. -Add an internal-only Type#containsLabels so this way ListType and DictType can have efficient implementations of Type#extractLabels.",
  "525b6d8d": "Fix slow hostname lookup",
  "641c1327": "Be more lenient with slow-to-react servers.",
  "4994cb35": "Substituted NoSuchVariableException with manual checks for performance purposes",
  "c8ced06a": "Refactor JavaCompileAction in preparation for adding minimum classpath optimization, second attempt.",
  "5f35e523": "Use std::string instead of const char* in InputJar::Open and MappedFile::Open. Move not performance-critical code to the input_jar.cc.",
  "cd4af5a5": "Rename MemcacheActionCache to ConcurrentMapActionCache",
  "81c9dc94": "Simple REST URL cache",
  "b47f3445": "Improve performance of absurdly large range()s",
  "6dbe2df5": "When crashing, exit with the OOM exit code if the root cause of the exception that caused the crash is an OOM. Too many systems wrap Errors in other exceptions, for instance https://github.com/google/guava/blob/master/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java#L267",
  "5e9ac252": "In keep-going mode, don't fail-fast on the evaluation of an individual SkyFunction if it throws an exception but still has missing deps. Instead, pretend it didn't throw, and restart it when its known deps are all done, presumably to throw the same exception. This removes a basic source of non-determinism.",
  "528623a0": "Use fast-path compiler for android_binary R.classes",
  "e0e76fd8": "Micro-optimizations to Digest.fromMetadata():",
  "13fbc2d2": "Fix/work around bad interaction between interface deps and LIPO. Previously looking at the declared include srcs of all transitive deps was sufficient as these contained all headers possibly relevant even with LIPO optimizations. With interface deps, we cut off dependencies (and thus headers) that aren't directly includable. To still make those available to LIPO, we need to also supply the declared include sources coming from lipo scannables.",
  "611e7cd4": "Fix analysis performance regression caused by header compilation",
  "761fbe61": "Let Java header compilation run locally when --experimental_persistent_javac is used (otherwise Javac might run locally, but header compilation might use remote execution, which kills performance due to copying files back and forth).",
  "e9b41c66": "Fix action cache save save time reporting: We were giving the time in nanos and saying it was in ms.",
  "eb2f5ea1": "Make persistent action cache work on Windows",
  "4f72b2c7": "Add --experimental_multi_threaded_digest which lets DigestUtils use multiple threads when calculating the MD5 hash even for large files. Might improve performance when using an SSD.",
  "9c9a28ca": "Clarify that input/output names should be in cache key.",
  "102a9a10": "Precompute Label#hashCode and use it to implement a fast-path for #equals. Label#equals was a cpu hotspot revealed during profiling.",
  "4d63ef0b": "With incremental dexing copy java resources from deploy jar into APKs (instead of jar generated by shuffle_jar tool). This helps with bazel mobile-install performance",
  "dd61520f": "When we don't have an OutputService, precompute and cache the assumed-to-be-immutable filesystem type of output_base.",
  "b8e2d49b": "Add workspace name to runfiles cache invalidation criteria",
  "8bc7f437": "Fix cache invalidation problem in CppModuleMapAction.",
  "803ef939": "Log whenever a periodic flush of the action cache is slow.",
  "89844df7": "Set -fmodules-cache-path to be rooted in the genfiles directory whenever modules are enabled. Also warn when -fmodules-cache-path is explicitly set by the user (either in configuration or rule attributes)",
  "d6dcde6b": "Set -fmodules-cache-path to be rooted in the genfiles directory whenever modules are enabled. Also warn when -fmodules-cache-path is explicitly set by the user (either in configuration or rule attributes)",
  "3ae80a76": "Fix glob performance regression introduced by commit 3a95f353704dc2f7061e2c0786c2459ac1db0fd1.",
  "3f8fe0de": "Prevent new evaluations from starting if a done child's error is discovered. Also delete some code that's been dead for a while, now that we eagerly shut down evaluation when we come across a child in error during a fail-fast evaluation.",
  "4aa76cc7": "Fixes NullPointerException in pkgcaches_test on ci.bazel.io",
  "7896c3aa": "Turbine, a tool for improving Java build performance",
  "3a95f353": "Use a clever hybrid approach for evaluating globs during package loading: first try to get a skyframe cache-hit; otherwise, fall back to legacy globbing. This gives us the best of both worlds: no extra skyframe restarts on glob-dep-misses, and much better incremental performance in the common case that a package's globs haven't changed. See the class-comment for PackageFunction.SkyframeHybridGlobber for a detailed description and explanation.",
  "b795e6bd": "Have GlobFunction make use of the assumption that the glob's package exists by having it not declare a dep on the PackageLookupValue for the package. This optimization means that a BUILD file edit doesn't (necessarily) invalidate all the globs in the package; the PackageLookupValue node would get change-pruned but we still pay the very small cost of invalidating unnecessarily.",
  "4cd47091": "Clear up some confusion about glob prefetching (the old comment was wrong). Also add some TODOs for potentially improving package loading performance.",
  "1a34a248": "Improve space efficiency of Blaze action cache: For actions that don't perform input discovery, there is no need to store the full set of edges in the action cache. This data is only used to formulate the set of input files for an action prior to checking the validity of a cache entry. For non-input-discovering actions, the set of input files is known statically and the action cache data is not used.",
  "42f67cb8": "Add a Java property to influence symlinking strategy so that we can test what kind of performance we could get from how we imagine it would work under Windows.",
  "e3ce21fa": "support hidden --java_optimization_mode flag in java_test rule.",
  "64fa3515": "cache SDKROOT value for local execution of actions using apple toolkit",
  "a5d8d090": "Don't print 'Building complete' (and save the action caches) if we're about to crash or exit abruptly. It just confuses users and could potentially cause other problems.",
  "b0d1313e": "add optimization modes that require implicit proguard spec",
  "f6db7dc3": "Presize invalidation sets for better performance",
  "9190c840": "Get rid of compression when zipping up files to improve local compilation performance.",
  "659f80ee": "When getting package roots for exec paths, don't start with the file, which is guaranteed not to be a package. Instead, start with its parent. This will be faster and take less memory.",
  "8af7fe1f": "Include the Globber in the PackageFunction AstAfterPreprocessing cache. Otherwise we have potential correctness and performance problems on a missing Skylark import dep.",
  "026de57e": "workers: Pass a map of input filenames -> digest of file contents to workers so that they can cache and reuse state for unchanged inputs over multiple builds.",
  "70b5130a": "Increase the concurrency level of the filesystem call caches used in legacy package loading from the LoadingCache default of 4 to value of --legacy_globbing_threads.",
  "b6551679": "Skylark interpreter optimization",
  "d7795f42": "Memory optimizations for Skylark.",
  "72744dac": "Avoid unbounded growth in the GlobFunction cache. The cache is now given a maximum size, based off a reasonably larged sized benchmark.",
  "3f032c99": "Make 'blaze query --output=build' 25 times faster.",
  "5a9b6991": "Only open and read the BUILD file when we don't have a cached preprocessing result.",
  "829d118b": "Fix PackageFunction#loadPackage preprocessing result cache memory leak on error from SkylarkImportResult dep.",
  "2627b9f3": "Intern PackageIdentifiers as a memory optimization.",
  "f5d6a024": "Improve performance of Sky query.",
  "ee56459b": "Add self-time relative to total time in HTML profiling output, enables finding optimizable functions faster.",
  "1c289af2": "Fail fast on a crash in an InvalidatingNodeVisitor worker thread, just like we do in ParallelEvaluator.",
  "96be0c17": "Minor simple optimization in FileFunction: don't bother getting a FileStateValue for a path realpath 'parent/child' if 'parent' is known to not exist. This saves a stat for each ancestor path.",
  "d9b51217": "Use another cache to store preprocessing results instead of redoing the work.",
  "5c54bdcc": "Allow for customization of the per-build system call caches used in Skyframe.",
  "6d9ca5b5": "Prefetch children of node being checked for cycles, in case graph implementation caches batched results.",
  "718eb921": "Change blaze default arguments for ObjC 'fastbuild' to match better -DDEBUG=1 (from -DDEBUG).",
  "b29cfdcf": "Stop checking package roots for incompatible changes after loading phase. Instead we can just recreate artifact in ArtifactFactory if source root has changed. Additional optimization is to save with Artifact's some unique id of build when they have been created. If the build is the same we should not check source root changes.",
  "a6d8cbee": "Add '--experimental_allow_fastbuild_debug' which when set, adds flag'-DDEBUG=1' to 'fastbuild' for objc.",
  "b01b1fd5": "Some additional timing logging for discarding analysis cache, multi group accounting, and artifact conflicts.",
  "b84c87ea": "Record time spent loading action cache in INFO log.",
  "d4d99932": "Actions can now request Skyframe dependencies and bypass action cache checking.",
  "f64f2117": "Implementation of realpath for Mac OS X. This will allow us to move some of our tools (ibtool, actool etc) to shell scripts which should be faster and easier to maintain.",
  "cf492941": "Remove BuildConfiguration.cacheKey() and replace .shortCacheKey() with a .checksum() method that is computed from the checksum of the build options. Also remove Fragment.cacheKey() and Fragment.getName().",
  "adc4a02d": "Add two binary size optimizations when --compilation_mode=opt and --objc_enable_binary_stripping are specified: 1. Symbol strippings. A new strip action is registered that uses Darwin tool /usr/bin/strip to remove the symbol table of the linked binary. 2. Dead-code strippings, which uses linker flag '--dead_strip' to remove unreachable code in binary link action.",
  "6af85020": "Add two binary size optimizations when --compilation_mode=opt is specified: 1. Symbol strippings. A new strip action is registered that uses Darwin tool /usr/bin/strip to remove the symbol table of the linked binary. 2. Dead-code strippings, which uses linker flag '--dead_strip' to remove unreachable code in binary link action.",
  "e03758bb": "Fix a bug in the ActionCacheChecker where the code that intended to remove outdated keys from the cache actually removed the correct one, so the cache never got cleaned up.",
  "1cad714e": "Removed deprecated API features from ZipCombiner and improves slow read testing and support.",
  "35e57cf0": "Make the PackageFunction cache an actual Cache.",
  "dee781c6": "Add runfiles to metadata caches and make them isFile aware",
  "ca96e111": "Get the code cache directory for stub application from the Context instead of hard-coding it and move the incremental deployment directory from /sdcard/incrementaldeployment to /data/local/tmp/incrementaldeployment.",
  "5821646f": "Rewrite of ZipCombiner to improve performance and maintainability",
  "0fdaf75b": "Stop updating shadowed action's inputs in case of an action cache hit for the extra action.",
  "906f2559": "Make SkyKey cached hash code transient",
  "90f3d344": "Resolve inputs that were stored in action cache ahead of time so metadata for them can be retrieved with other inputs, avoiding a restart.",
  "e3f04b8b": "Move action-cache updating to inside ActionExecutionFunction, in preparation for allowing it to be restarted in case of missing deps.",
  "bad29940": "Fix bug where inputs are updated from action cache but not tracked in Skyframe.",
  "46af79d4": "Recursively create cache dir",
  "343d77a7": "Include generateSubmodules in the cache key.",
  "9396335f": "Use OS-specific caches for output root",
  "16bff488": "Don't print out action cache if it has more than 1000 entries. This prevents IDE OOMing when a large action cache is in scope during debugging.",
  "a7c84b50": "Delay updating inputs of an action when processing the action cache until it is known that the action is a cache hit.",
  "5db7899d": "Make include scanning faster when a target has many include scannables.",
  "20c9cde2": "Don't define DEBUG for fastbuild.",
  "c766ee45": "fix accumulating logic around cached tests",
  "98f9af50": "Fix cache key generation of CppModuleMapAction."
}, "beam": {
  "42a763a3c": "Update cachetools requirement in /sdks/python (#26339)",
  "b6fa96ab7": "Merge pull request #26313: Prevent hashmap growing too large. Improves performance for too many Unique Keys cases.",
  "c52d9231d": "Prevent hashmap growing too large. Improves performance for too many Unique Keys cases.",
  "36c9c738f": "Merge pull request #26114: [AWS2] Fix performance issue of S3 filesystem when reading large files",
  "db656bfec": "(AWS S3 FS) Fix performance issue of S3 filesystem when reading large files (fixes #25991)",
  "b6d8ac3d3": "Optimize counters by reducing allocations - use forEach instead of requiring Iterator/UnmodifiableIterator/Iterables.concat overhead - optimize shortId cache hashing by just using MetricName as stepName is fixed - reduce MetricKey objects - avoid MetricsUpdate construction in getMonitoringData by directly processing maps",
  "60ec8e57c": "adding cache expire for example catalog (#25760)",
  "0d804d102": "Use credential for mongodb performance tests (#25631)",
  "c65e777d6": "Optimize PGBK table to only update cache when there is a large enough size change. #21250 (#25219)",
  "b1c9d8aec": "Optimize to use cached output receiver instead of creating one on DoFn invocation #21250 (#25245)",
  "1ecb4ef6d": "Merge pull request #25159: Fix inconsistent cache bug",
  "e8484a790": "Fix inconsistent cache bug",
  "453490476": "Fix kafka performance test write failing due to server overwhelmed (#24964)",
  "c8bf5d55f": "Add Python xlang KafkaIO performance test (#24633)",
  "820839fe8": "Remove slow review label after processing commands to avoid race (#24765)",
  "cb31ea2ef": "Fix SingleStoreIO performance test job (#24753)",
  "fb06ef3ab": "Bump to Hadoop 3.3.4 for performance tests (#24550)",
  "c0a328ffa": "Merge pull request #24335: [Metrics] Add 'performance tests' tag to JMH dashboard",
  "9bfffb78b": "[Metrics] Add 'performance tests' tag to JMH dashboard (related to #22238)",
  "2a8842b7d": "Merge pull request #24032: [Metrics] Add new performance dashboard for Java JMH benchmarks",
  "2dc6e2f8c": "[Metrics] Add new performance dashboard for Java JMH benchmarks (closes #22238)",
  "45100d708": "Add files then check cached diff to get untracked files",
  "9f33da1f3": "[Playground] [Backend] Update playground cache component to increase fault tolerance (#23461)",
  "2d8423300": "Merge pull request #23578: Remove artificial timeout in FirestoreV1IT, Dataflow runner is very slow",
  "b681a6367": "Remove artificial timeout in FirestoreV1IT, Dataflow runner is very slow",
  "0e61b026e": "[fixes #23000] Update the Python SDK harness state cache to be a loading cache (#23046)",
  "0f7eedf5f": "Add fastener dependency.",
  "b59df6c76": "Update state cache to not fail when measuring object sizes. (#23391)",
  "9287b92c5": "Fix Kafka performance test sourceOption to match expected hash (#23274)",
  "30a48f05c": "Improve the performance of TextSource by reducing how many byte[]s are copied (fixes #23193) (#23196)",
  "07439a0ab": "Assert pipeline results in performance tests (#23027)",
  "25c6ed74c": "[#19857] Migrate to using a memory aware cache within the Python SDK harness (#22924)",
  "fbe61507c": "[BEAM-13015, #22050] Make SDK harness msec counters faster using ordered puts (#22103)",
  "692bbb1f6": "Merge pull request #22186 from Fix testKafkaIOReadsAndWritesCorrectlyInStreaming failing for kafka performance test",
  "ed118a168": "Fix testKafkaIOReadsAndWritesCorrectlyInStreaming failing for kafka performance test",
  "a3b3182e3": "[BEAM-13015, #21250, fixes #22053] Improve PCollectionConsumerRegistry performance by swapping element count and sampled byte size to use a faster counter. (#22002)",
  "7c47893de": "[BEAM-14166] Push logic in RowWithGetters down into getters and use TreeMap to reduce memory footprint of field value cache. (#17172)",
  "47d8bce7e": "Vortex performance improvement: Enable multiple stream clients per worker (#17550)",
  "5b81d1406": "[BEAM-13015] Update the SDK harness grouping table to be memory bounded based upon the amount of assigned cache memory and to use an LRU eviction policy. (#17327)",
  "52c3f07aa": "Merge pull request #17417: [BEAM-14388] Address some performance problems with the storage API",
  "4d8e62f1f": "BEAM-14231: bypass schema cache for test_schema_with_bad_field_raises_helpful_error",
  "e7d752522": "Merge pull request #17187: [BEAM-14181] Make sure to evict connections from cache after closing them",
  "4ab97a540": "[BEAM-13015] Avoid repeated weighing of StateKey in StateFetchingIterator cache usage. (#17121)",
  "58f8bef66": "[BEAM-13925] Add ability to get metrics on pr-bot performance (#16985)",
  "2a45a5b6c": "Merge pull request #16826 from [BEAM-13870] [Playground] Increase test coverage for the cache package",
  "87f10bbe7": "[BEAM-12976] Log projection pushdown optimizations.",
  "38541aec0": "[BEAM-13734] Support cache directories that use GCS buckets",
  "db83b7545": "[BEAM-13777] Accept cache capacity as input parameter instead of default max integer (#16652)",
  "f54f52778": "[BEAM-13734] Support cache directories that use GCS buckets",
  "4e5db10b8": "Merge pull request #16493 from [BEAM-13632][Playground] Save catalog data to the cache",
  "1129d919d": "[BEAM-13736] Make lifting cache exact. (#16603)",
  "75a588f57": "[BEAM-10897] Update the fastavro lower bound due to an issue on Windows (#16553)",
  "737be255d": "[BEAM-13685] Enable users to specify cache directory under Interactive Beam options",
  "33ae0301b": "Merge pull request #16519 from [BEAM-13639] [Playground] Add notification to Log/Output tabs about cached example",
  "6b5a98fc5": "[BEAM-13015] Add state caching capability to be used as hint for runners to not duplicate cached data if the SDK can do it for user state and side inputs. (#16525)",
  "1200a221d": "bson and fast-deep-equal should not be listed as devdependency",
  "17485eec6": "[BEAM-13015] Plumb through process wide and bundle cache through the FnApiStateAccessor. (#16423)",
  "3bbe6fffe": "Fixed empty labels treated as wildcard when matching cache files (#16440)",
  "2a4a4cd61": "[BEAM-13601] Don't cache Row types for a schema. (#16427)",
  "3e2d839c4": "Further optimizations for common case of components in order.",
  "da5b6b15c": "RowCoder optimizations.",
  "cdc9065e5": "Merge pull request #16286: [BEAM-13443] Avoid blocking put to Kinesis records queue to shutdown readers faster",
  "cd74e9f8e": "[BEAM-13443] Avoid blocking put to Kinesis records queue to shutdown readers faster",
  "97a2acc59": "Merge pull request #16121 from [BEAM-13334][Playground] Save Go logs to the cache",
  "025779281": "Merge pull request #16120 from [BEAM-13333][Playground] Save Python logs to the cache",
  "6e2d39f82": "[BEAM-13015] Plumb the cache through contexts and transform executors. (#16188)",
  "7082da241": "[BEAM-13424][Playground] add a check before setting the value to the cache for localCache",
  "94eddabea": "[BEAM-13424][Playground] Set float64 to the cache instead of int Change converting to float64 instead of int",
  "774008de2": "[BEAM-13015] Start integrating a process wide cache. (#16130)",
  "85eaae88a": "Merge pull request #16109 from [BEAM-13330][Playground] Save Java logs to the cache",
  "207025697": "Merge pull request #16084 from [BEAM-13347][Playground] [Bugfix] Backend doesn't send correct status when use Redis cache instead of local cache",
  "93e5e6106": "Merge pull request #15959 from [BEAM-13224][Playground] Local cache creates an forever used goroutine",
  "28c3d1c65": "[BEAM-13224][Playground] Add using context to local cache to stop goroutine",
  "90a48ee47": "[adhoc] Speedup slow tests for AWS IO modules (#15899)",
  "4af1e5280": "[BEAM-13015] Use a network based channel instead of an inmemory one which allows us to more faithfully mirror performance/overhead of the SDK harness.",
  "f41cdf40f": "[BEAM-13015] Use a network based channel instead of an inmemory one which allows us to more faithfully mirror performance/overhead of the SDK harness.",
  "837e11c5b": "Merge pull request #15721 from [BEAM-13023][Playground] Implement Redis cache for pipelines' states",
  "47a9b3fe4": "Merge pull request #15714 from [BEAM-13005] [Playground] Implement local cache for pipelines' states",
  "aa26b53f6": "Add environment_service.go and structures for beam sdk, network envs, cache and application envs",
  "8c143ab8d": "Merge pull request #15777: [BEAM-12830] Avoiding read-only Go module cache in Gradle config.",
  "30d119158": "Avoiding read-only Go module cache in Gradle config.",
  "a9120e083": "[BEAM-11097] Update cache with metrics counting, windowing (#15717)",
  "935abae48": "[BEAM-12979, BEAM-11097] Change cache to store ReStreams, clean up to… (#15639)",
  "6beeafff4": "Merge pull request #15621: [BEAM-12356] Fixed last non-cached usage of DatasetService in BigQuery WriteTables",
  "067f7a7e2": "[BEAM-12356] Fixed last non-cached usage of DatasetService in BigQuery WriteFiles",
  "919fdef01": "Merge pull request #15518 from KevinGG/beam_sql_out_cache",
  "17237459c": "Merge pull request #15490 from KevinGG/beam_sql_out_cache",
  "d930983d1": "[BEAM-12153] revert 'implement GroupByKey with CombinePerKey with Concatenate CombineFn' because of performance issues. (#15508)",
  "25c67cdba": "[BEAM-11097] Add implementation of side input cache (#15483)",
  "7acadb633": "[BEAM-10708] Support streaming cache in beam_sql magic",
  "de7e7d3e8": "[BEAM-7745] Avoid uncached state fetches for streaming side-inputs (#15235)",
  "6e54d4c5a": "[BEAM-12652] revving JS filename to bust cache (#15209)",
  "aa9eae577": "Merge pull request #15180 from rohdesamuel/int-df-cache-2",
  "085667c85": "[BEAM-12602] Put reader back into the cache after getProgress()",
  "ca360f42c": "[BEAM-12546] Swap to use ArrayBlockingQueue to improve performance of QueueingBeamFnDataClient",
  "c7858c859": "[BEAM-12546] Swap to use ArrayBlockingQueue to improve performance of QueueingBeamFnDataClient",
  "ed76a9846": "Merge pull request #15062 from [BEAM-12524] Ensure that failed BundleProcessor objects are not re-added to the cache.",
  "727844eea": "[BEAM-12524] Ensure that failed BundleProcessor objects are not re-added to the cache.",
  "19aaad2d7": "Fixed the cache_manager write implementation.",
  "2a86ae963": "Merge pull request #15012 from [BEAM-12068] Run Dataflow V2 performance benchmarks on Java 11",
  "8922c1cf2": "Fix flaky test on slow remote systems by adding `afterIterations` to Watch.Growth (#14878)",
  "07e7613ad": "Merge pull request #14704: [BEAM-12253] Change Read.UnboundedSourceAsSDFRestrictionTracker.getSplitBacklog to use the reader cache",
  "79ea6dd3b": "[BEAM-12253] Change Read.UnboundedSourceAsSDFRestrictionTracker to use the cache.",
  "47cfbcb63": "[BEAM-12127] More optimizations for PCollectionConsumerRegistry: cache monitoring container, avoid randomInt for sampling if resevoir is empty (#14601)",
  "ff1e3e8d0": "[BEAM-10029] Spanner IO read and write performance tests (#13857)",
  "d40cdc49e": "Revert build cache change",
  "66c93a288": "No build cache",
  "31825af14": "Merge pull request #13862: [BEAM-11707] Change WindmillStateCache cache invalidation to be based…",
  "3f01950ec": "[BEAM-11707] Change WindmillStateCache cache invalidation to be based upon reference invalidation instead of expensive set management. Reduce operations of shared cache by caching per-key object sets locally and flushing as groups to shared cache. Remove byte tracking which could be racy based upon background evictions in favor of just iterating for rendering the status page. This also lets us capture more stats.",
  "66a8a4c5e": "Adding performance improvements to ApproximateQuantiles. (#13175)",
  "f09f2afa2": "Merge pull request #13909 [BEAM-11760] Cleanup interactive cache just once.",
  "022a2ab46": "Merge pull request #13893 from [BEAM-11752] Using LoadingCache instead of Map to cache BundleProcessor",
  "804bc2831": "Using LoadingCache instead of Map to cache BundleProcessor",
  "3bb529c29": "Merge remote-tracking branch 'origin/double_cache' into double_cache",
  "fa3dddba6": "[BEAM-11760] Cleanup interactive cache just once.",
  "9297cf18d": "[BEAM-11760] Cleanup interactive cache just once.",
  "34ecb8bc9": "Merge pull request #13824 from [BEAM-11700] Fix PortableRunner skipping optimizations",
  "80248d00a": "Merge pull request #13318: [BEAM-11300] Improve Nexmark performance:",
  "db848637b": "Adding combiner packing optimization for Portable Runner",
  "edc087efc": "[BEAM-11312] Log cloud build url and enable kaniko cache in sdk_container_builder",
  "7d88858e9": "[BEAM-11300] Improve Nexmark performance:",
  "17beb6685": "Merge pull request #13282: [BEAM-11172] Enable KafkaIO performance test for Dataflow runner v2 with SDF.",
  "730e7c064": "[BEAM-11172] Enable KafkaIO performance test for runner v2 with SDF.",
  "88d1696b6": "Merge pull request #13293: [BEAM-11216] Fix ReaderCache to not resume from a cached reader for w…",
  "c4316c556": "[BEAM-11216] Fix ReaderCache to not resume from a cached reader for work item retries.",
  "483693776": "[BEAM-11146] Add fasterCopy option to Flink runner (#13240)",
  "ebd65e531": "Do not read dependency report from cache",
  "f05f3f106": "Merge pull request #13159 from sjvanrossum/update-fastjson",
  "339ea7796": "Change imports of org.codehaus.jackson to com.fasterxml.jackson",
  "73aee9ef8": "Fix Jackson being imported from both org.codehaus.jackson (old) and com.fasterxml.jackson (new)",
  "7cd61b5e1": "Merge pull request #13125 from [BEAM-11069] Improving performance of file deletion in ReadFromBQ",
  "3755a153d": "Improving performance of file deletion in ReadFromBQ",
  "41791d553": "Bound the size of the process bundle descriptor cache.",
  "5fd0010e5": "Merge pull request #12759: [BEAM-10760] Generalize state cleanup optimization for global window",
  "26b087bcd": "[BEAM-10760] Generalize state cleanup optimization for global window",
  "c9bed1e24": "[BEAM-10549] Improve runtime type checking performance for the Python SDK (#12352)",
  "e6db419c9": "[BEAM-10766] Fix flake where ByteString coercion could modify cached type hints (#12654)",
  "919ade723": "Merge pull request #12414 from [BEAM-10603] Fix BCJ to stop caching when the cache signature has changed.",
  "3a0f6160c": "Fix BCJ to stop caching when the cache signature has changed.",
  "36cf93576": "Merge pull request #12489 from [BEAM-6064] Add an option to avoid insert_ids on BQ in exchange for faster insertions",
  "10da26fd9": "Merge pull request #12485 from [BEAM-6064] Improvements to BQ streaming insert performance",
  "9dc1bf76c": "Merge pull request #12411: [BEAM-10603] Add ElementLimiters which allows the cache to prematurely based on read elements.",
  "29ea00e7c": "[BEAM-10631] Fix performance of Schema#indexOf (#12456)",
  "0a25b7a0c": "Add ElementLimiters which allows the cache to prematurely based on read elements.",
  "cd6d904a1": "[BEAM-10514] Restrict cache file path length",
  "613edd392": "Make tracking/cleanup of cache and in-environment states per pipeline (#12249)",
  "1d189e546": "[BEAM-10303] Add support for the non-window observing optimization to DoFn execution in portable Beam Java (#12093)",
  "bd38c983b": "Merge pull request #12062: [BEAM-10305] Let InMemoryBagUserStateFactory only use a single cache token",
  "5d65ed6d4": "[BEAM-10305] Let StateRequestHandler for user state only use a single cache token",
  "c30629e6b": "[BEAM-10260] Remove is_cached parameter from CachingStateHandler",
  "a85cc8102": "[BEAM-10260] Fix continuation token support with statecache",
  "c328d2ac0": "Merge pull request #11997: [BEAM-10249] Populate state cache with initial values before appending",
  "c8eb5acef": "[BEAM-10249] Populate state cache with initial values before appending",
  "42faa44e0": "Merge pull request #11931 from [BEAM-10145] Delete persistent disks after every KafkaIO performance test run",
  "46bac7419": "[BEAM-10145] Delete persistent disks after every KafkaIO performance test run",
  "56e853e72": "[BEAM-7774] Add python wordcount performance test grafana dashboard",
  "cf93a2841": "[BEAM-7774] Remove Perfkit Benchmarking tool from python wordcount performance tests jobs",
  "79dcab9ca": "[BEAM-10073] Add pubsub performance tests results to the grafana dashboards (#11809)",
  "97776b5d5": "Update fastavro_it_test.py",
  "836d0ad5b": "Merge pull request #11274: [BEAM-9633] Add PubsubIO performance test",
  "7525bdf50": "[BEAM-9633] Add pubsubio performance tests",
  "45ddff8b7": "Return empty iterator on empty cache",
  "79a66fdb6": "Merge pull request #11590: [BEAM-8944] Improve UnboundedThreadPoolExecutor performance",
  "a0d215c2c": "[BEAM-8944] Improve UnboundedThreadPoolExecutor performance",
  "ef267d97a": "[BEAM-9701] Increments fastavro version range upper bound to 0.24. (#11506)",
  "7acbff408": "Merge pull request #11440 from [BEAM-9767] Add a timeout to the TestStream GRPC and fix the Streaming cache timeout",
  "623c5ed9a": "Merge pull request #11483 from apache/revert-10418-cachesizebytes",
  "6663da88e": "Revert '[BEAM-9014] CachingShuffleBatchReader use bytes to limit cache size.'",
  "fc37a04f4": "Add a timeout to the TestStream GRPC and fix the Streaming cache timeout",
  "0595f79f6": "[BEAM-9650] Add PeriodicImpulse Transform and slowly changing side input documentation (#11182)",
  "40903f279": "Merge pull request #11408 from ibzib/performance-region",
  "6eeed6954": "Merge pull request #11401 from ibzib/performance-region",
  "79b2d87b5": "[BEAM-9085] Fix performance regression in SyntheticSource on Python 3 (#11092)",
  "24108f9d3": "[BEAM-9721]Conditionally add Dataflow region to Dataflow-based performance tests (#11344)",
  "ad91850cc": "Merge pull request #11172 from Add dependency comment in streaming cache",
  "589a3037f": "Merge pull request #11237: [BEAM-9566] Mitigate performance issue for output timestamp watermark holds",
  "73f682f7f": "[BEAM-9566] Mitigate performance issue for output timestamp watermark holds",
  "1844f8249": "Add dependency comment in streaming cache",
  "df63e8ab1": "[BEAM-9490] Use the lock that belongs to the cache when bundle load balancing is enabled",
  "0cd545d96": "Merge pull request #11051 from ibzib/log-cache",
  "9457e8d3f": "Fix a bug in performance test for reading data from BigQuery (#11062)",
  "5bdaada4b": "Downgrade cache log level from warn->info.",
  "47f7ddf0b": "[BEAM-9448] Fix log message for job server cache.",
  "8abc90bb1": "Merge pull request #11025: [BEAM-6428] Improve select performance with codegen",
  "060975f17": "[BEAM-8327] Override Gradle cache for community metrics prober",
  "fdaf5d84b": "Revert '[BEAM-9085] Fix performance regression in SyntheticSource (#10885)' (#10924)",
  "b4668a1a1": "[BEAM-9085] Fix performance regression in SyntheticSource (#10885)",
  "b1a02e946": "[BEAM-9289] Improve performance for metrics update of samza runner (#10833)",
  "cd58afe37": "Fix state cache test.",
  "a4929a914": "[BEAM-8298] Support side input cache tokens.",
  "05d8830b5": "Perform bundle-level caching if no cache token is given.",
  "203ca10ef": "Only cache first page of paginated state.",
  "f19b8cb34": "[BEAM-9188] CassandraIO split performance improvement - cache size of table",
  "fc66772cc": "Better conversion performance",
  "1e88385af": "Merge pull request #10573: [BEAM-8844] Update data source for SQL performance tests",
  "80e2c2e2a": "[BEAM-7746] Remove reference to missing attribute in statesampler_slow.StateSampler.reset()",
  "101240849": "Update data source for SQL performance tests",
  "a109cb582": "[BEAM-8935] Fail fast if sdk harness startup failed.",
  "fc935255a": "[BEAM-8935] Fail fast if sdk harness startup failed.",
  "bf5b96e73": "[BEAM-7949] Introduce PeriodicThread for time-based cache threshold support.",
  "99f9f3957": "[BEAM-9014] CachingShuffleBatchReader use bytes to limit cache size.",
  "1b2d9ae9f": "[BEAM-7949] Add time-based cache threshold support in the data service of the Python SDK harness.",
  "b7e464b65": "[BEAM-8920] Go SDK: faster transforms/filter.Distinct with CombinePerKey",
  "a729037c8": "Don't override default for environment_cache_millis",
  "c1e759c10": "Merge pull request #10249: Fixed flaky BigQueryIO read performance test",
  "3a79080d2": "[BEAM-8832] Allow GCS staging upload chunk size to be increased >1M when setting GcsUploadBufferSizeBytes pipeline option, to improve performance",
  "a320d848b": "[BEAM-8832] Allow GCS staging upload chunk size to be increased >1M when setting GcsUploadBufferSizeBytes pipeline option, to improve performance",
  "4c18cb4ad": "[BEAM-7948] Add time-based cache threshold support in the Java data s… (#9949)",
  "a448cfbde": "[BEAM-8470] Improve performance of source: the mapper already calls windowedValueCoder.decode, no need to call it also in the Spark encoder",
  "7a30c5a59": "[BEAM-8470] Improve Pardo translation performance: avoid calling a filter transform when there is only one output tag",
  "d02433550": "[BEAM-8470] After testing performance and correctness, launch pipeline with dataset.foreach(). Make both test mode and production mode use foreach for uniformity. Move dataset print as a utility method",
  "f9ecf1f1a": "[BEAM-8470] Apply a groupByKey avoids for some reason that the spark structured streaming fmwk casts data to Row which makes it impossible to deserialize without the coder shipped into the data. For performance reasons (avoid memory consumption and having to deserialize), we do not ship coder + data. Also add a mapparitions before GBK to avoid shuffling",
  "de5b17be8": "[BEAM-8470] Limit the number of partitions to make tests go 300% faster",
  "329a8cef5": "Simplify and improve performance of metrics.",
  "c421484fd": "Merge pull request #9966 [BEAM-8544] Use ccache for compiling the Beam Python SDK.",
  "81af13c10": "[BEAM-8544] Use ccache for compiling the Beam Python SDK.",
  "b82c0e1b2": "[BEAM-8514] ZetaSql should use cost based optimization (#9874)",
  "78118389c": "Merge pull request #9769: [BEAM-8383] Add metrics for the Python state cache",
  "175a2bcd0": "[BEAM-8383] Add metrics for the Python state cache",
  "e20b9e1f2": "[Go-SDK] Check correct cache for wrapped structs.",
  "948c6fae9": "Merge pull request #9374: [BEAM-5428] Implement Runner support for cache tokens",
  "72f4366e1": "[BEAM-5428] Implement Runner support for cache tokens",
  "23605d8b0": "[BEAM-8003] Remove 'performanceTest' gradle task (obsolete)",
  "e184e5a06": "[BEAM-7721] Add Jenkins job configuration for BigQueryIO performance tests (#9382)",
  "9bbd89abc": "Merge pull request #9440: [BEAM-5428] Modify cache token Proto design to only include tokens in ProcessBundleRequest",
  "526e6db13": "[BEAM-5428] Modify cache token Proto design to only include tokens in ProcessBundleRequest",
  "49644d325": "Merge pull request #9041: [BEAM-7721] Add a new module with BigQuery IO Read performance test",
  "00eef79a0": "[BEAM-7721] Add a new module with BigQuery IO Read performance test.",
  "a6a57dff3": "Increase default chunk size for gRPC commit and get data streams. The initial choice of chunk size was arbitrary, and there is evidence from testing that larger chunks improve performance.",
  "fb8346797": "Merge pull request #8946: [BEAM-7574] fix Combine performance for SparkRunner",
  "1691935da": "[BEAM-7574] Optimize GC performance, finalize implementation",
  "e9009cfaa": "Merge pull request #9101 from lgajowy/BEAM-7775-remove-obsolete--performance-test-jobs",
  "2f239e4fd": "[BEAM-7747] Close the file handle owned by fastavro.write.Writer in _FastAvroSink.close().",
  "c7738224b": "[BEAM-7546] Increasing environment cache to avoid chances of recreating the environment",
  "265127fc9": "[BEAM-7535] Created Jenkins job for BQ performance tests",
  "9cea44998": "[BEAM-7547] Avoid WindmillStateCache cache hits for stale work.",
  "3c43cc160": "[BEAM-7547] Avoid WindmillStateCache cache hits for stale work.",
  "59ea050ad": "Merge pull request #8675: [BEAM-7402] BigQuery IO read performance tests",
  "c3a0fda46": "[BEAM-7402] Added a performance test for BigQuery IO read",
  "ae3a1f23e": "[BEAM-6356] Add the option to use TFRecord to store cache results using PCollection's PCoder (#8687)",
  "5d617aea5": "Merge pull request #8626: [BEAM-7362] BigQuery IO write performance test",
  "5082ef8b8": "[BEAM-7362] Added a performance test for BigQueryIO write",
  "41c865ebd": "Remove previous edge optimization, it's not playing well with file-write sinks",
  "05b9dbe8d": "Merge pull request #8558 [BEAM-7131] Spark: cache output to prevent re-computation",
  "4cf283099": "[BEAM-6027] Fix slow downloads when reading from GCS (#8553)",
  "8d83576df": "[BEAM-7203] Signal Dataflow workers to use fastavro library on Python 3. (#8652)",
  "de08c89fe": "Merge pull request #8646: [BEAM-7365] Reduces the volume of test data in fastavro branch to match the volume of avro branch",
  "7245eac08": "[BEAM-7365] Reduce the volume of test data in fastavro branch of test_dynamic_work_rebalancing_exhaustive to match the volume of avro branch.",
  "d77474d16": "[BEAM-6908] Refactor Python performance test groovy file for easy configuration (#8518)",
  "777587167": "Spark portable runner: cache all re-used RDDs by default",
  "97edda356": "[BEAM-7131] cache executable stage output to prevent re-computation",
  "0ac265b59": "Merge pull request #8130: [BEAM-6522] Use fastavro as default Avro implementation for Avro source/sink in Python3",
  "df0543c1e": "Merge pull request #8519 from leo-unc/feature/cache_manager_tfrecord",
  "65f2db0f0": "Revert 'Use TFRecord to store intermediate cache results using PCollection's'",
  "d128f9336": "fixup: Fix fastavro on Python 3",
  "ad05d6337": "Fix fastavro on Python 3",
  "ce77db10c": "Merge pull request #8458 from leo-unc/feature/cache_manager_tfrecord",
  "3d614297f": "Merge pull request #8427: [BEAM-6850] Use HadoopFormatIOIT for performance/integration testing",
  "45b032598": "Use TFRecord to store intermediate cache results using PCollection's PCoder.",
  "43be51f1d": "[BEAM-6908] Support Python3 performance benchmarks - part 2",
  "36e9d9cc9": "[BEAM-6853] Add sdk-worker-parallelism and environment-cache-millis to python sdk",
  "7432e6d7f": "[BEAM-6627] Refactored publishing records to BQ, added an option to report GCS performance metrics to file based IO tests",
  "1107fc13a": "Merge pull request #7895: [BEAM-6612] Improve java SDK performance by using a LinkedBlockingQueue in QueueingBeamFnDataClient",
  "5ccdd3229": "[BEAM-6612] Improve java SDK performance by using a LinkedBlockingQueue in QueueingBeamFnDataClient.",
  "1de532ea4": "[BEAM-4468] Add lifting cache cap and random eviction policy",
  "8fafbce18": "Merge pull request #7913 from lostluck/liftedcache",
  "30dfa0b03": "Several performance improvements to Beam's Combiners. (#7838)",
  "fc4c6baff": "Merge pull request #7606 from pabloem/fastcodtest",
  "7a674d6b7": "Merge pull request #7552: [BEAM-6460] Remove cached class references upon start/shutdown",
  "bc9b75fce": "[BEAM-6460] Remove cached class references upon start/shutdown",
  "6a5966791": "Merge pull request #7553 from akedin/cacheless-root-schema",
  "20d6093e4": "[SQL] Force cacheless root schema in Jdbc connection",
  "7d15def9a": "Make statesampler_test easier to configure, set the fastest state to last 1 second, retry once on failure to reduce flakiness",
  "fc482f1e2": "[BEAM-5959] Add performance testing for writing many files",
  "c0394403b": "Merge pull request #7331: [BEAM-6276] Fix performance regression.",
  "5d305af0e": "Fix performance regression.",
  "dba30b44d": "Merge pull request #7281 from [BEAM-6186] Finish moving optimization phases.",
  "6ff312967": "[BEAM-6186] Finish moving optimization phases.",
  "36e3f98be": "[BEAM-4150] Use unwindowed coder in FnApiRunner optimization phases.",
  "e7ab8c470": "Merge pull request #7170 from [BEAM-6153] Re-enable coder optimization.",
  "fc373df8e": "Merge pull request #7166 from apache/revert-7130-fast-coders",
  "74b05518b": "Check equality of collections by sorting first, fall back to slower method if needed.",
  "d9a95b327": "[BEAM-6053] added sparkOptions cacheDisabled",
  "da4ddd161": "Merge pull request #6960: [BEAM-5987] Fix Spark SideInputReader performance",
  "a4d6df6c0": "[BEAM-5987] Fix Spark SideInputReader performance.",
  "016a572f7": "[BEAM-5931] Update nexmark performance test with dataflow worker jar (#6916)",
  "0c980532b": "Merge pull request #6478: [BEAM-5445] [BEAM-4796] [BEAM-3516] SpannerIO: Improve performance and documentation. Adds streaming support",
  "1f674863f": "Improve SpannerIO performance and add Streaming support",
  "fbf82c793": "[BEAM-5439] fix performance issue in StringUtf8Coder (#6812)",
  "274756437": "Use unsigned types for fast coder tags.",
  "14b345c0e": "[euphoria-spark] Fix cache RDD test.",
  "c761e52c3": "[euphoria-spark] #243 RDD are cached when used more than once in flow",
  "ec149fb7e": "[euphoria-core] performance tuning",
  "75e3b5430": "#67 [euphoria-flink] Avoid descriptors cache infinitely growing",
  "791ce3131": "#! [euphoria-flink] Do not cache states",
  "a7ae3c079": "#! [euphoria-flink] Use key type Tuple2 instead of ComparablePair (performance tuning)",
  "5cd5a0901": "#! [euphoria-ios] performance tuning of Trends application",
  "72c540481": "Interactive Beam -- read_cache_ids and write_cache_ids",
  "cf53116dd": "Merge pull request #6377 Avoid pinning fastavro dependency.",
  "7b60da2af": "Avoid pinning fastavro dependency.",
  "a25bbc7cb": "[BEAM-5357] Disable optimization for Go check IsWorkerCompatibleBinary",
  "9e0b8d73d": "Merge pull request #6355: [BEAM-5334] Fix java performance test - No Beam python setup for other language",
  "f43e2928b": "Fix performance test - No Beam python setup for other language",
  "992ece0a4": "[BEAM-5332] Do not attempt to evict cache after shutdown (#6342)",
  "e6fd8656a": "Merge pull request #6321 from akedin/update-fastavro-0214",
  "423a49d51": "Update fastavro to 0.21.4",
  "0e1496570": "Pipeline Graph from Interactive Beam -- made faster",
  "7fd5cb4e1": "Merge pull request #6176: [BEAM-5092] Row comparison should be faster when both are POJOs.",
  "80d40f1b2": "Row comparison should be faster when both are POJOs.",
  "b0b56a758": "Merge pull request #6172 from yifanzou/BEAM-5084/upgrade_com_alibaba_fastjson",
  "2c129640f": "[BEAM-5084] upgrade fastjson",
  "e41f4a5ab": "[BEAM-4391] Example of distributed optimization (#5736)",
  "dfaa8be10": "Merge pull request #6100 from ryan-williams/fastavro-osx",
  "9577b8571": "Revert 'Install fastavro only in linux'",
  "48454cca5": "Add comparitive benchmark between cached and single use invoker.",
  "01d8b922f": "[BEAM-2810] fastavro integration test (#5862)",
  "437410df5": "Merge pull request #5939 from aaltay/fastavroplatform",
  "21d3a7083": "Install fastavro only in linux",
  "be3f53d42": "Split Row into separate subclass for RowWithStorage and RowWithGetters. This also allows a fast path for Row -> T conversion for the case of RowWithGetters.",
  "8ae77654b": "Merge pull request #5496: [BEAM-2810] use fastavro in Avro IO",
  "868c4f62d": "[BEAM-2810] use fastavro-blocks in Avro IO",
  "b9a94dda0": "Merge pull request #5692: Fix cache references in portable flink runner",
  "fbe30633f": "Fix cache references in portable flink runner",
  "1a9a0c00c": "Created static retry method which accepts retriable method, amount of attempts and delay in ms. Added retry to performance test: MongoDBIOIT, JdbcIOIT, HadoopInputFormatIOIT. Tests for retry method.",
  "149f5a287": "Remove references to Flink distributed file cache.",
  "e81f155b8": "Defer calling formatTimestamp() to achieve better performance",
  "7c660d90d": "Defer calling formatTimestamp() to achieve better performance",
  "bf4ce01a4": "Merge pull request #5586 from robertwb/fast-dict-coder",
  "6bc4c3f17": "[SQL] Don't cache IT results",
  "73a26d54d": "Merge pull request #5466 from robertwb/fast-state-sampler",
  "bdd9f30ad": "Merge pull request #5180: [BEAM-4065] Basic performance tests analysis added",
  "378247796": "[BEAM-4065] Basic performance tests analysis added.",
  "a0036d5ab": "[BEAM-3042] Refactor of TransformIOCounters (performance, inheritance). (#5075)",
  "2031e1d6e": "[BEAM-4153] Fixing performance test of spark, added option to trigger build from github PR.",
  "297448f36": "Merge pull request #5158: [BEAM-4062] Fix performance regression in FileBasedSink",
  "907792f7b": "Fix performance regression in FileBasedSink.",
  "15da6412f": "Merge pull request #5003: [BEAM-3942] Update performance testing framework to use Gradle",
  "a89b2c725": "Merge pull request #5153 from lgajowy/perbuild-performance-tests-on-jenkins",
  "4a5602b54": "Fixing data race in statesampler_fast.",
  "ecf9ee6ac": "[BEAM-3213] MongodbIO performance test (#4859)",
  "feb0c871a": "Add cython annotation to make DistributionAccumulator faster",
  "259e7f603": "Merge pull request #4143 from mdvorsky/faster_rnd",
  "e63ad1264": "[BEAM-3802] Remove broken cachedMetricResults",
  "0ecbb1547": "Merge pull request #4732: Don't cache pubsub subscription prematurely",
  "f9f9a8693": "Merge pull request #4772 from charlesccychen/fix-has-cache",
  "829d1d4ff": "Fix issue from incomplete removal of has_cache",
  "f8c3ec830": "Don't cache pubsub subscription prematurely.",
  "89afba1f7": "Merge pull request #4714: [BEAM-3456] Re-enable JDBC performance test",
  "66c3755de": "fixup! fixup! [BEAM-3456] Re-enable JDBC performance test",
  "802c4cd8a": "fixup! [BEAM-3456] Re-enable JDBC performance test",
  "ae189e9ee": "[BEAM-3456] Re-enable JDBC performance test",
  "81932199e": "Merge pull request #4634 [BEAM-3644] Add switchable DirectRunner which uses the fast FnApiRunner when possible",
  "46931b4bf": "Add switchable DirectRunner which uses the fast FnApiRunner when possible",
  "4959ef843": "Modify BufferedElementCountingOutputStream to use a buffer pool for its internal allocations. This improves the worker's performance for workloads with large iterables since it avoids a allocation/deletion on each invocation of encode() in IterableLikeCoder.",
  "e832cfb5f": "Logging deviation from sampling expectation. This will allow to track performance variation in statesampler over time.",
  "3be0467e3": "Disable combiner lifting optimization in DataflowRunner for fnapi",
  "090b37bb7": "Modifying the experiment flag check to reduce performance impact.",
  "2dc83630a": "Use fast caller for filter transform predicate",
  "12d94481e": "use dedicated BigQuery table for performance tests of FileBasedIOIT",
  "fa7a36b9d": "[BEAM-3060] explicitly use Apache's Google project for file-based performance tests",
  "b4f2ff27d": "Merge pull request #4296 from DariuszAniszewski/hotfix-for-filebased-io-performance-tests",
  "d0e911f72": "FIX: remove overriding Google project in file-based IOs performance tests",
  "78ac4da82": "job for performance tests of file-based IOs",
  "9fa560a8e": "preinstall various packages for better startup performance and reliability",
  "1ef170e28": "This closes #4175: [BEAM-3247] fix Sample.any performance",
  "6f309e462": "[BEAM-3247] fix Sample.any performance",
  "15db1dd3c": "[BEAM-3113] Disable stack trace optimization in java container",
  "c1266ee22": "Improve performance of bundle retry",
  "0bc375634": "This closes #3843: [BEAM-2516] Add fast path to ParDoTranslation for known ParDo class",
  "3b04d1355": "This closes #3842: [BEAM-2516] Key DirectRunner DoFn cache off step rather than DoFn",
  "9b30bcaa7": "Add fast path to ParDoTranslation for known ParDo class",
  "2c018cd47": "Key DoFnInstanceManager cache on AppliedPTransform",
  "f407b4a68": "[BEAM-2803] Improves performance of JdbcIO for a very large number of query results",
  "ffd08dae0": "[BEAM-2669] Fixed Kryo serialization exception when dstream is cached (by using coders and moving to bytes before attempting to serialise an RDD as part of caching it).",
  "440c7d45b": "This closes #3470: [BEAM-940] ByteBuddyOnTimerInvokerFactory: key the cache with a (Class, id) tuple or OnTimerMethod",
  "6d2728256": "Make HBaseIO tests faster by only using the core daemons needed by HBase",
  "79d187c6d": "Makes cachedSplitResult transient in BigQuerySourceBase",
  "0ec814684": "Fix caching in the Spark streaming, doing the cache update in the streaming context",
  "daa10ddbf": "[BEAM-649] Analyse DAG to determine if RDD/DStream has to be cached or not",
  "d2d04823b": "Add performance tests to Jenkins",
  "47c809265": "[BEAM-1626] Remove cache of MapWithStateDStream on read.",
  "05a006a14": "Fix DataflowRunner message about uploaded vs cached files",
  "8b2e8f295": "Revert '[BEAM-1513] Skip slower verifications if '-DskipTests' specified'",
  "22ace8581": "[BEAM-1513] Skip slower verifications if '-DskipTests' specified",
  "d34145adf": "Improve DirectRunner performance by tuning BoundedReadEvaluator.",
  "956b81cfa": "Some performance improvements to NewDoFn",
  "e02ddac30": "Add mock time to slow bigquery unit tests.",
  "5787e817a": "Use a temp directory for requirements cache in test_with_requirements_file",
  "85dcfbd15": "Remove cache for Gearpump on travis",
  "ee09668be": "Moving from a string-based buffer to a cStringIO based on in order to help with performance of compressed sources.",
  "81e44b833": "Improve performance of fileio._CompressedFile",
  "672a7d7b0": "A few memory and IO optimizations in Avro and FileIO",
  "26bb459c9": "Using the 'del' keyword to more explicitly document the memory optimization.",
  "f1a5704a5": "[BEAM-1096] Flink streaming side output optimization using SplitStream",
  "4827ae840": "Remove tox cache from previous workspace",
  "9dd164554": "Adds IterableCoder, fast coding for sets, booleans.",
  "ecf9e3a3c": "Restore (faster) logging context.",
  "4c512732b": "Add fast support for dicts for default coder.",
  "64457d04f": "Used fast primitives coder as fallback coder.",
  "246fda517": "Fixes bug due to accessing cached pvalues multiple times.",
  "9f5ae3e07": "Increase the MESSAGES_POLLING_ATTEMPTS for slow backend starts",
  "cf30901e4": "Fix buffer overruns in fast OutputStream implementaion",
  "0310dffd6": "Fix issue in cache trimming logic for combiner lifting",
  "4a4b8afaf": "Fix incorrectly cached values in pvalue.AsList",
  "44c7186d6": "Modify --requirements_file behavior to cache locally packages",
  "572353432": "Further optimizations in executor.py",
  "220384e27": "coGroup optimization: disable until pull request is resolved",
  "23d96f3cd": "Avoid integer overflow when computing maximum cache weight",
  "b94d17675": "Flush invalid entries from UnboundedReader cache",
  "9a984f23d": "Improve performance of BigQueryIO.Write",
  "e9be9d032": "Improve performance of BigQueryIO.Write.",
  "449d8ee26": "Fix race condition that can cause side inputs to be null. This change ensures that side inputs are pinned in the WorkItem-local cache for the entire duration of the WorkItem",
  "f76344b3a": "Add View.asList for side inputs that are small enough to fit in memory and should be cached.",
  "6b017295c": "Periodically expire side input cache entries so that we get new values as they are updated",
  "5d0eb9a7a": "Avoid starting update progress thread in ReadOperation for streaming tasks. ----Release Notes---- Improve performance of streaming ReadOperation. [] ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=90086660",
  "e8a9d806c": "Switch ENVIRONMENT_MAJOR_VERSION back to '2' since the dataflow service supports it now. After switching back to version '2', the optimization of lifting combiner into the PGBK operation will be enabled.",
  "c48e73378": "Pass additional information from SDK to Dataflow backend: whether GroupByKeyOnly disallowCombinerLifting. It will allow Dataflow backend to choose a proper optimization.",
  "70b000548": "Explicitly check cached mapTaskExecutor's all operations could restart. Previously it fails at operation level.",
  "424c56df9": "Refactor: 1. skipping deleteTimer() is an optimization for Dataflow Streaming Runner. Move it from PartitionBufferingWindowSet to StreamingActiveWindowManager. 2. remove the extra poll() from GroupAlsoByWindowsDoFn (windows are removed by WindowSets)."
}, "BGABanner-Android": {
  "": ""
}, "BigData-Notes": {
  "": ""
}, "BigImageViewer": {
  "": ""
}, "bilibili-android-client": {
  "ba30df9": "Add okhttp cache, when the server does not support the cache",
  "979dd61": "Add RxCache configuration cache, removed the main interface of lazy loading",
  "78a5593": "add Acache utils",
  "525f018": "Interface details optimization",
  "2f3f839": "Increase AllRank video interface optimization part of the code",
  "c79da2c": "The new play module part of code optimization reconstruction"
}, "bisq": {
  "9ce9ffc6": "Use TemporalAdjusterModel cache to speed up BSQ supply view",
  "f3fd555c": "Add caches to TemporalAdjusterModel to speed up BSQ dashboard view",
  "372f92d7": "Add cache to speed up ChartCalculations.roundToTick",
  "57b2b4b8": "Add txs-by-id cache to WalletService to speed up trade history view",
  "f90c4b8f": "Use cachedThreadPool which uses SynchronousQueue instead of ArrayBlockingQueue.",
  "0553a0f9": "Add cachedDepositTx field to Dispute",
  "57a88be5": "Remove gradle cache",
  "9836c0fa": "Remove gradle cache",
  "6b89bf0d": "Use async methods with CompletableFuture in viewmodel to avoid that slow operations in data model are running on UI thread",
  "a659a78d": "Do sorting on non UI thread as its slow and only attach it to table in UI thread afterwards.",
  "4cd057e2": "Merge pull request #5805 from cd2357/gh-gradle-cache",
  "5595f7d4": "Merge pull request #5682 from ghubstan/cache-the-offerpayload-hash",
  "0a5c1ca7": "Add txOutputsByTxOutputType map for performance improvement",
  "08320d86": "Merge pull request #5484 from cd2357/faster-sync-dao",
  "fea717ee": "Add blockHeight cache in DaoState",
  "97779f10": "Use cache for WalletService.getConfidenceForAddress",
  "217aaf82": "Use cache for WalletService.getNumTxOutputsForAddress",
  "8ecfa8bc": "We set a flag to clear tor cache files at re-start. We cannot clear it now as Tor is used and that can cause problems.",
  "21eaea07": "Add IgnoredMailboxMap to persist failed decryption attempts and optimize performance by that",
  "0ce9324c": "Add cache for signature verification results and a lookup map by ownerPubKey",
  "785c76e9": "Merge pull request #5010 from chimp1984/dao-performance-improvements",
  "8350f22c": "Set correct type of cache map",
  "99184567": "Merge pull request #4953 from chimp1984/cache-results-in-account-witness-domain",
  "4cdd94ac": "Merge pull request #4955 from chimp1984/cache-frequent-method-calls",
  "f2273e66": "Use ConcurrentHashMap for cache.",
  "425bfa3b": "Fix failing test (remove did operate on map directly and we did not remove the item from the cache)",
  "d61a07f6": "- Add hasPendingRequest() getter and block repeated requests while hasPendingRequest is true - Throw exception if we get a request before previous request is terminated (happens with priceFee at startup, on regtest as startup is fast, but can happen also on mainnet) - Improve shutDown - Improve finally clause",
  "88f9eee7": "Merge pull request #4635 from chimp1984/fix-performance-issues-at-dump-dao-data",
  "580b0596": "Increase timeouts from 10 sec to 30 sec. Over tor connections are slower.",
  "b321cd92": "Merge pull request #4046 from stejbac/add-faster-payments-holder-name",
  "b22e4ad1": "Encapsulate mutable Block tx list and DaoState tx cache",
  "b1660093": "Remove expire optimization in onDisconnect",
  "9c0be827": "Merge pull request #3177 from chimp1984/fix-bsq-wallet-performance-issue",
  "6dafafd7": "Fix performance issue in BsqWalletService",
  "ab4aa644": "Smal performance optimisations, cleanups",
  "f2f62c70": "Merge pull request #3112 from freimair/optimizations",
  "0501412d": "Fix performance issue with DaoResultView",
  "6490c3d5": "Merge pull request #2501 from freimair/seednode_optimizations",
  "6d5b4048": "Remove SHA3-256 hash as it turned out it is slower as SHA256",
  "7c521085": "Capabilities optimizations",
  "4c3fe95b": "Merge pull request #2494 from ManfredKarrer/improve-p2p-network-performance",
  "a41b4a5f": "Merge pull request #2199 from ManfredKarrer/dao-fix-performance-issue-at-parsing",
  "f8326335": "Merge branch 'master' into dao-fix-performance-issue-at-parsing",
  "1504e499": "Merge pull request #1694 from ManfredKarrer/faster-payment-info",
  "cedefba2": "Proposed fix for issue 1184. OfferBook caches buy & sell offer counts for each trade currency when OfferBook's fillOfferBookListItems method is called, and the appropriate cache is passed to the modified GIUUtil's getTradeCurrencyConverter. Currency ComboBox.setConverter call was moved from OfferBookView's initialize() to activate() because it depends on a non null direction field value.",
  "2fe77aad": "Optimize startup performance",
  "04fa5f07": "Remove email from bank accounts and fasterpayment",
  "fba188d0": "Add com.fasterxml.jackson to pom again to avoid runtime exception",
  "9ec9c7ec": "Add PriorityStoragePayload interfaces to delay processing of Offer and TradeStatistic items at startup to avoid that the UI get stuck by performance peaks.",
  "64dc97f1": "Use clearnet for BitcoinJ by default instead of Tor (Tor is a bit unstable and slow when syncing at startup)",
  "c4d56d43": "Fix Bootstrapnode performance bug"
}, "bistoury": {
  "2170a5b": "fix bug；fastjson升级",
  "55107ca": "升级fastjson",
  "dea0fa7": "1. 完善proxy ui的文档 2. 优化了默认的agent的启动脚本中agent store的默认目录，将agent的store默认目录放置在和lib，bin同级的目录下 3. 优化了默认的ui启动脚本中，cache的默认目录。将默认目录修改为和lib，bin同级的目录中。"
}, "bitcoinj": {
  "b8d3c4a": "Transaction: remove fields `cachedTxId` and `cachedWTxId`",
  "f516c25": "HexFormat: small performance enhancement for `formatHex()`",
  "979490a": "UnsafeByteArrayOutputStream: remove this performance optimisation",
  "45f87d8": "PeerGroup: rename `fastCatchupTime()` method from `getFastCatchupTime()`",
  "63ed427": "SPVBlockStoreTest: increase threshold for performanceTest() to 5 seconds",
  "310b93b": "Peer, PeerGroup: migrate `fastCatchupTime` field to `java.time` API",
  "e283a83": "Message: deprecate unused property `recached` and its getter",
  "abc81d6": "Transaction: remove the Android performance hack from getValue()",
  "551b5a1": "SPVBlockStoreTest: Increase threshold for performanceTest() to 2s.",
  "2bdc594": "SPVBlockStoreTest: Add a performance test.",
  "694955c": "Message.readBytes(): Fail fast if length is too large",
  "a2bb46b": "Unit tests: Disable a nasty HotSpot optimization that causes exception messages and traces to go missing.",
  "9c72c86": "Monetary: Tiny optimization in parseCoin()/parseFiat().",
  "7e3dbd5": "Peer: Log fast catchup time and height of first block to pass it.",
  "b024f6e": "KeyChainGroup: Small optimization in toString().",
  "fabbb0a": "Tweak HS integration again to avoid performance regression.",
  "e104bfb": "PeerAddress/HttpDiscovery: accept unresolved InetSocketAddresses to avoid super-slow reverse DNS lookups for HTTPSeed discovered peers.",
  "5f3d3a7": "Wallet: optimization for cases where (e.g. due to spam attacks) there are tons of relevant transactions in a block.",
  "eb15ded": "PeerGroup: use a default FP rate that's much lower than the current rate, to boost performance. As there are various well documented de-anonymization attacks on Bloom filtering in bitcoinj (and BreadWallet) wasting bandwidth without getting additional privacy benefit doesn't help us much, so may as well take the performance until one day the code is smart enough to lie convincingly.",
  "ece8d9a": "Perf hack for Android: cache the result of Transaction.getValue(). This won't help once we split payments from transactions.",
  "8c414fb": "Script: don't query the clock when parsing a script. This actually shows up in Android performance profiles.",
  "c4a49ee": "Experiment: disconnect a peer if it falls below 10 blocks per second for at least 6 seconds. This is an attempt to speed up chain sync by load balancing off slow peers.",
  "ad4fb51": "NioClientManager: use a daemon thread so GUI apps can quit fast if they want to without a slow/hung network thread keeping things hanging around. This may break compatibility with apps that expect to be able to start bitcoinj and then exit the main thread: if it causes too many problems this change may be reverted.",
  "18c63a7": "When connecting outputs to inputs, cache its value in the input. This will make sure the fee is also known after a blockchain replay.",
  "af20c37": "Use finer grained locking around the wallet keychain, to allow for fast reading of keys/the current receive address even if the wallet is busy auto saving or processing large transactions. This helps reduce UI hangs/lag on Android.",
  "e8ba287": "HD wallets: experimental change to not trigger full lookahead when deriving keys. This allows a savvy app to get keys/addresses at startup fast, if they do so before starting up the peergroup (which wants all keys in the zone so it can calculate a Bloom filter). May be reverted if it causes trouble.",
  "f9e1b1e": "PeerGroup: tweak global backoff to be faster.",
  "8cc1920": "ECKey: use sumOfTwoMultiples for better/faster key recovery.",
  "4d23183": "Disable fragmentedRekeying test for now as bouncy castle is so slow at signature generation",
  "6625c9a": "Use earliest key time minus a week for setting fast catchup time and selecting a checkpoint.",
  "81a9e1e": "Peer: drop out of fast catchup mode when reaching the top of the chain.",
  "c9c107a": "Make getBalance() significantly faster.",
  "fad5356": "Properly uncache scriptSig in TransactionInput.setScriptBytes",
  "939337b": "Fix premature optimization in H2FullPrunedBlockStore (resets state)",
  "1b830a1": "Add comment about using a large fast catchup time in PeerGroup.",
  "61410ad": "Fix BOBS bug introduced by my optimizations.",
  "5032339": "Misc optimizations, the profiles look much better now.",
  "54354c1": "Add SPVBlockStore, a new higher performance replacement for BOBS that uses a fixed-size mmapped ring buffer, with caching on top to cover up for slow Dalvik mapped byte buffer operations.",
  "0608b3a": "Fix a bug that could cause pinging a remote node as fast as it will respond.",
  "e14e7a2": "Fix bug that could cause huge slowdowns during initial header sync: peers were not checking if they were still download peers after receiving header messages.",
  "f440913": "Some improvements to the network code: - Delete the PeerGroupThread and replace it with a connectToAnyPeer() method. Getting connected to the network is now significantly faster as there is no sleep-wait loop between connections. - Delete the connectionTimeMillis param to the PeerGroup constructors. - Expose the PeerGroup c'tor that lets you specify the ClientBootstrap and expose a utility method to make one. This means users can now customize TCP options directly. - PeerGroup.setMaxConnections() now actually creates or tears down connections to meet the new required number, if the peer group is running. - Update the PeerMonitor so there's a spinner that lets you add or remove peers. Connecting and version handshaking is very fast now. - Misc changes and fixes.",
  "fc573d5": "Add a ping() method to the Peer class. It returns a future that can be used to find out when the pong returns and how slow it was. Temporarily, use this in the PeerMonitor example. Next up: moving pinging into the PeerGroup.",
  "739b2c6": "Add constructor to H2FullPrunedBlockStore to specify cache size.",
  "fd941fe": "Don't recalculate fast catchup time to avoid hitting an assert.",
  "75e0417": "Introduce a concept of 'minimum peers for broadcast' to PeerGroup.broadcastTransaction. This can be used to make sending faster when you are bringing up the network in parallel. It defaults to half the max connections. The idea is to insulate you from slow remote peers somewhat.",
  "da8dba8": "Re-write block chain download handling to avoid parallel chain downloads occurring. Avoids big slowdowns when a block is solved during the chain download. Resolves issue 180.",
  "1f96f85": "Automatically set up fast catchup time on a PeerGroup when wallets are added. Resolves issue 183.",
  "0c90081": "Make wallet tool compile to a minimized, bundled JAR so it can be used standalone, and change the wallet-tool script to use it that way. It makes running much faster.",
  "c8e76a8": "Log slow reads in BOBS.",
  "6813ff4": "Remove memory usage optimization that was complicating things.",
  "623389a": "Address comments from Miron and Andreas: - Make GetBlocksMessage/GetHeadersMessage implement toString/hashCode - Minor comment/naming fixes - > not >= for comparing fast catchup time to block header - Return current time in Wallet.getEarliestKeyCreationTime() rather than throw an exception when there are no keys in the wallet.",
  "826f2d2": "Small cleanup and optimization for Derby store",
  "dd2be6e": "Make ECKey store its creation time. Implement fast catchup using the getheaders command. You can now set a date on a Peer/PeerGroup, before which block bodies will not be fetched. After that they will. Using the date of the earliest key in the wallet means new users can get started faster and with less battery drain as they aren't parsing blocks that are guaranteed to have no relevant transactions.",
  "00cb8a4": "Make bitcoinSerialize() return a copy by default, provide an unsafeBitcoinSerialize() method for high performance applications that are willing to deal with the extra API complexity.",
  "34fea86": "First part of Steves changes in preparation for a high performance multiplexing proxy:",
  "10b40cb": "Split out parsing of header and payload. This is useful for high-performance programs that don't always need to parse the payload. Patch from shadders (CLA agreement pending).",
  "f4e5404": "Make some fields static/final as a memory optimization. Thanks to Andreas for his suggestions.",
  "c3933a7": "Make the unit tests more realistic and fix two bugs this revealed: 1) Receiving coins regressed after the last optimization. Resolves issue 49. 2) Reorg handling expected to be able to connect all inputs.",
  "85caefb": "Store 2050 blocks in the BoundedOverheadBlockStore memory cache. This eliminates the delay on difficulty transitions. We now regularly hit 500 blocks per second, ie, we are sender-constrained.",
  "d654a33": "Clone cached hash in Block.cloneAsHeader(). Before this hash recalculation was about half the time spent inside BoundedOverheadBlockStore.put(), now it does not appear in the profiles.",
  "d37723a": "Optimize Block.cloneAsHeader() which was taking about 25% of the CPU during chain download on Android. The previous implementation was lazy (serialize and deserialize), the new implementation is much faster and not much more complex."
}, "bitcoin-wallet": {
  "e5d9058": "AlertDialogsFragment: add battery optimization dialog",
  "aabf6ea": "ReportIssueDialogFragment: include battery optimization in report",
  "054ffa0": "SettingsFragment: if possible, use the user-friendly system dialog to disable battery optimizations",
  "e917deb": "SettingsFragment: link to battery optimization settings",
  "63ff76b": "Add 'android:baselineAligned' attribute to some horizontal LinearLayouts for performance reasons.",
  "4605e7a": "Increase the maximum heap size for the Gradle daemon, for faster builds.",
  "ec1f2b2": "For the transactions list, consolidate label cache with transaction cache. Addresses are rarely reused these days, so the label cache wasn't very effective any more.",
  "c88207f": "ProGuard: Switch off all optimizations.",
  "6d6ce57": "Now that bitcoinj is more robust against wallets and block stores getting out of sync, increase autosave delay to 10 seconds. This increases performance with big wallets.",
  "7eb9281": "Enable fast scroll for list of exchange rates.",
  "075cd63": "Don't append index of cache directory to reports",
  "c4f7b54": "small optimization in appwidget",
  "df4bd67": "improved drawing performance",
  "26bfc10": "improved layout performance",
  "9e6cc6a": "minimize number of database accesses by introducing label cache",
  "12b3e8a": "performance optimizations",
  "c4d66b5": "adapt to 'fast shutdown' commit",
  "60079ee": "fast catchup of blockchain",
  "e268b60": "write-ahead cache for block stores",
  "e05dfb7": "write-ahead cache",
  "b76a81f": "reverted blockchain optimizations"
}, "blade": {
  "8225e6b": ":zap: improving performance",
  "ba85b8c": ":zap: improving performance",
  "16586ba": ":zap: improving performance",
  "361056d": ":zap: improving performance",
  "0e4cc00": ":zap: improving performance",
  "2a0ef45": ":zap: improving performance",
  "0e29f4c": ":zap: improving performance",
  "926913f": ":zap: improving performance",
  "b18587a": ":zap: improving performance",
  "b862c8f": ":zap: improving performance",
  "bfa8e80": ":zap: improving performance",
  "97cb9af": ":zap: improving performance",
  "1a6796d": ":sparkles: add server.performance config",
  "a50d93b": ":sparkles: add server.performance config",
  "c4a4291": ":zap: improving performance",
  "1d827e7": ":zap: improving performance",
  "c227f97": ":zap: improving performance",
  "ac2ed1f": ":bug: fixed cache method name error",
  "8fb3b09": ":zap: optimization basic auth",
  "1b7dd56": ":zap: optimization basic auth",
  "849bbc6": ":zap: improving performance",
  "1573d30": ":zap: improving performance",
  "22b519c": ":zap: improving performance",
  "80c7c4c": ":zap: improving performance",
  "a083c20": ":zap: improving performance",
  "081b3c6": "🍿 optimize performance",
  "035018f": "🍿 optimize performance",
  "aef8b05": "🍿 optimize performance",
  "a8be663": "🍿 optimize performance",
  "66f127d": "🍿 optimize performance",
  "4e4d3df": "🍿 optimize performance",
  "a42110e": "🍿 optimize performance",
  "c82e247": "🍿 optimize performance",
  "f0587aa": "🍿 optimize performance",
  "6b6870a": "🤜 optimization of unit tests",
  "dd93ecd": "🔥 optimal performance",
  "ac4547b": "🔥 optimal performance",
  "d99604b": "🐑 optimization of grammar",
  "3d43db0": "🐑 optimization of grammar",
  "9844229": "🐑 optimization of grammar",
  "5900246": "🐑 optimization of grammar",
  "4860130": "🐑 optimization of grammar",
  "f7f3fcc": "🐑 optimization of grammar"
}, "blog_demos": {
  "f53158c": "Merge pull request #278 from zq2599/dependabot/maven/javacv-tutorials/com.fasterxml.jackson.core-jackson-databind-2.12.7.1",
  "d4c7dc9": "Merge pull request #279 from zq2599/dependabot/maven/nginx-clojure-tutorials/com.fasterxml.jackson.core-jackson-databind-2.12.7.1",
  "3cc1c15": "Merge pull request #280 from zq2599/dependabot/maven/elasticsearch-tutorials/com.fasterxml.jackson.core-jackson-databind-2.12.7.1",
  "e4e8f28": "Merge pull request #255 from zq2599/dependabot/maven/flinksql/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "7382d29": "Merge pull request #256 from zq2599/dependabot/maven/dubbopractice/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "2bdf2ea": "Merge pull request #257 from zq2599/dependabot/maven/jacksondemo/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "aad31fc": "Merge pull request #251 from zq2599/dependabot/maven/jacksondemo/com.fasterxml.jackson.core-jackson-databind-2.12.6.1",
  "ed2e6a8": "Merge pull request #250 from zq2599/dependabot/maven/dubbopractice/com.fasterxml.jackson.core-jackson-databind-2.12.6.1",
  "e02690e": "Merge pull request #248 from zq2599/dependabot/maven/flinksql/com.fasterxml.jackson.core-jackson-databind-2.12.6.1",
  "836eba9": "Merge pull request #241 from zq2599/dependabot/maven/kafka01103producer/com.alibaba-fastjson-1.2.83",
  "6ef750c": "Bump fastjson from 1.2.28 to 1.2.83 in /kafka01103producer"
}, "blurkit-android": {
  "9129168": "add methods: lockView(), unlockView(), lockPosition(), unlockPosition() to optimize performance in some cases",
  "9941753": "add startBlur() / pauseBlur() method for performance reason.",
  "a395e07": "Add performance benchmarks",
  "e9a41f5": "performance overhaul"
}, "Blurry": {
  "": ""
}, "BlurView": {
  "f893048": "Remove StackBlur due to its performance and critical bug in implementation",
  "83e132d": "[Memory] cache huge array to avoid allocation on each blur."
}, "Bolts-Android": {
  "fb799b8": "Uncomment travis.yml lines for after_script and after_success; delete cache configuration (#154)",
  "de55d7a": "Merge pull request #85 from BoltsFramework/grantland.cache"
}, "BookReader": {
  "": ""
}, "booksource": {
  "": ""
}, "BoomMenu": {
  "c973c68": "V1.0.8 Try to fix the memory optimization issue(not sure whether work)."
}, "BottomBar": {
  "85a0e81": "Merged #504 with some optimizations to the tab resizing logic."
}, "BottomNavigation": {
  "c48b474": "cleared cache in travis"
}, "BottomNavigationViewEx": {
  "": ""
}, "boxing": {
  "f8ca20a": "Fix Fresco image loader flash problem in fast scroll",
  "a025b88": "create cache file when do not exist"
}, "brigadier": {
  "242de3f": "Don't sort children on node addition to save on performance (#68)"
}, "btrace": {
  "e131e29": "several micro-optimizations on the instrumentation critical path (#246)",
  "9c39363": "fixes and performance improvements",
  "f4c1e04": "fixes and performance improvements",
  "523af28": "improve performance of the instrumenttation class filter",
  "12b94a9": "Introducing JCTools Queues for performance critical code",
  "bb614e9": "Introducing JCTools Queues for performance critical code",
  "dbe8b7b": "Introducing JCTools Queues for performance critical code",
  "7e0cea3": "improving performance of the command queue processing",
  "9e59a77": "Merge pull request #111 from jbachorik/profiler-optimization",
  "d5e1672": "Merge pull request #108 from jbachorik/profiler-optimization",
  "f9f13b0": "Profiler optimizations",
  "e6c3a91": "missing part of the fix for #90; really should learn git fast",
  "101ebd0": "BTRACE-120: Unbounded queue used for dispatching commands may slow down application",
  "8eb36d7": "calculate some fast basic profiling metrics while exposing the profiling snapshot",
  "c1d9a16": "Introducing some more parameter annotations mostly for the performance reasons Issue #542 - Intorduce more parameter annotations to speedup execution",
  "58fd320": "Ran FindBugs 1.3.3 on BTrace to find and fix the following correctness issues and performance issues:"
}, "BubbleSeekBar": {
  "8b8a0a1": "Fixed #39 #40 and some optimizations"
}, "buck": {
  "75c67e4c": "pyenv upgraded, invalidate the cache (#2484)",
  "4eaf9370": "CircleCI build cache (#2450)",
  "0d98fd41": "Use cache to improve CircleCi performance (#2438)",
  "a2a37f2c": "Switch to a much faster int-to-int map",
  "d8fa094c": "Remove local parser cache",
  "7b1851b6": "Add hybrid_thrift_grpc cache mode",
  "008d2068": "Remove legacy distbuild flag from buckcache thrift reqs",
  "7f36f7cc": "Don't ignore files when tidying cache artifact directories",
  "75912704": "python: add rules to compile/cache python bytecode",
  "29b0ebbc": "Add tests for parser cache invalidation",
  "64129cc1": "Add a Daemonic cache for PackageFileManifests",
  "ae8e69b4": "Enable RuleAnalysisRules to be cached properly",
  "196d1b24": "Separate PreDexSplitDexMerge into cacheable PreDexSplitDexGroup rules",
  "3aae9fce": "Minor cleanup in Daemonic[Cell/Parser]State in preparation for adding a new PackageManifest cache",
  "1e755494": "Improve jar/zip creation performance (#2340)",
  "842173dc": "Remove bazel dependency from cache package",
  "a349b42a": "Includes : performance improvements",
  "1eb27ae6": "Simplify cache invalidation on configuration changes",
  "ee02c563": "Properly cache all nodes by path in ConvertingPipeline",
  "f52561af": "Prebuilt aar exclude from native lib packaging optimizations",
  "b2c2b2de": "Turn cache artifact errors to soft errors",
  "61030a8f": "Update to 0.12.0 and bring in updates to buckcache.thrift",
  "dc90980c": "Add rule key to client side cache corruption messages.",
  "cec70ef8": "Leverage fastutil in Index.getTransitiveDeps().",
  "62de7cd0": "Use third-party fastutil library for Set<Int> in multitenant.",
  "be05dfa5": "Track cache bytes",
  "c85b7600": "Add support for Buck invocations with isolated daemon/cache/outputs",
  "72b5c1ff": "Take 2: Update output_size calculation for cache artifacts",
  "f3272f2d": "Revert 'Update output_size calculation for cache artifacts'",
  "52422288": "Support client certificate chains for http cache",
  "a7186af0": "Update output_size calculation for cache artifacts",
  "1c82d5fc": "Bind file caches to targets command Graph Engine",
  "090a5650": "Revert 'Delete all the old filehashcache modes'",
  "515c03d3": "Delete all the old filehashcache modes",
  "a7a9566f": "Allow loading extra CA certificates for http cache",
  "d2702656": "Fix bug causing us to reupload all cache hits",
  "852ea413": "Make JSFile rules cacheable",
  "34c67188": "Bump the default cache timeout to 30s",
  "77c473e6": "Fix up some windows parameters for faster builds",
  "7504bec8": "Fix cache in CxxToolProvider and DefaultLinkerProvider",
  "51ebc768": "Add --preserve-file-hash-cache option to `buck perf rk` command",
  "c0eafe01": "Send modeled build target to buck cache store requests.",
  "45375078": "Fix performance regressions in ImmutableUnflavoredBuildTargetView and ImmutableUnconfiguredBuildTargetView",
  "191adb4a": "Consolidate and alphabetize the dir-cache .buckconfig entries",
  "6fe55972": "Skip a ton of work once an item has been uploaded to the cache",
  "77826adf": "Change node cache to use Path instead of String for keys",
  "3e4ab23a": "Add target name to http cache request",
  "e7c92740": "BuildFileManifest transformer and cache",
  "1bc8d383": "Flag additional [cache] entries with thrift_over_http",
  "eb9303f5": "Introduce ast cache",
  "17528b36": "Specified dir cache path can be relative or absolute",
  "470da2c8": "Restore TargetConfiguration from artifact metadata in artifact caches",
  "0e8c7cb9": "buckconfig[cache]: tag each entry with the required [cache].mode value",
  "929cc07f": "Allow sending target names to `buck cache`",
  "1275bc6b": "Use BuildTarget object instead of String in cache events",
  "5b47dc12": "Add a fast path to ignore collection types for AttrFilterFunction",
  "4026cfb1": "Add cache for allnodes jobs",
  "1604b8cb": "Make PipelineNodeCache cache all computed values during a build",
  "6c544444": "Move local cache directory option from BuckConfig",
  "8118ea06": "Move cache.repository option from BuckConfig to RemoteLogBuckConfig",
  "df505203": "Include metadata in cache fetch command",
  "b675a296": "BuckQueryEnvironment.getNode to use local cache",
  "9483110d": "Add artifact_cache_size_limit",
  "0528314f": "Parser cache events into Chrome trace",
  "12c5a035": "Move c.f.b.event.listener.cachestats -> c.f.b.event.listener.stats.cache",
  "e1654337": "Fix GWT annotation processing when using buck cache, by putting the dependency on the right location",
  "4edf4b9e": "Don't cache fat binaries when cache_links = false (#2137)",
  "1b9fe85e": "Don't cache AppleDsym when cache_strip = false (#2138)",
  "7008e492": "Optimize file operations for parser cache",
  "4c5315d6": "Cut some logging for parser cache",
  "9a119939": "Fix up 'cache key' to 'RuleKey'; re-write second half of this overview",
  "93de5c87": "Accept SKIPPED as a valid cache result type",
  "f6ab94c0": "Allow the cacheability of strip rules to be configured",
  "bdb27cbb": "Create action information much, much faster",
  "ca4eb336": "Add usage of caching hasher - FileHashCache - in the parser cache",
  "fd1f60af": "Simplify exception management for parser cache",
  "c9052266": "Change error level logging when file can't be found in the cache.",
  "c2d55006": "Make sure top slowest rules are shown only once",
  "cc40e3b3": "Prevent hopeless fetches by bundle checking if artifact is present in the cache",
  "3d0f52c3": "Have getBuildFileManifest to gracefully process cache misses for local storage",
  "3d3443c0": "Make ParserCacheManifest instantiate local and remote caches",
  "854083c9": "Make Dummy R class compilation faster (#2084)",
  "7b0be86b": "Make dir cache thread pool configurable.",
  "73e07225": "Add a CachingBuildFileParserDecorator that uses a local cache",
  "80aedcc8": "DefaultOnDiskBuildInfo: use faster, unambiguous `FileHashCache.get()` API",
  "9e4d5cb8": "Parallelize the slowest parts (post target+action graph) of project generation",
  "1b123911": "Further document http cache parameters",
  "78b412e5": "Add client side tls support to artifact cache",
  "a8c46828": "Remove parser-cache command",
  "80393510": "prebuilt_cxx_library: don't cache `ActionGraphBuilder` in action graph",
  "2b14c84b": "Improve performance readability of prehook.",
  "a564da16": "Adding new setManifest method to buckcache.thrift.",
  "43e31676": "Make buck audit includes blazing fast in Skylark.",
  "8f1fc9e7": "Make consistency_checker's rule_key_diff command faster",
  "284b8b4b": "Update link to performance guidelines for using jackson.",
  "b7e0e077": "only add cachedir to ignoredpaths in ProjectFileSystem if it's relative to repo root",
  "d85551a3": "Clarify the effect of --no-cache",
  "e12bb6f6": "Improve performance of BuckUnixPath.normalize()",
  "046feaa1": "Add backing off logic when client gets a miss for rules put in cache by remote build",
  "b81aa1cb": "Precompute and cache hashcode for AbstractBuildRule",
  "35c93b88": "Use zstandard instead of zip for cache files. (#2 attempt)",
  "572f740a": "show reason behind un-cacheable/not-uploaded rules",
  "d8078529": "Freeze built-in regsitry to improve query performance.",
  "88fd5224": "Revert: Use zstandard instead of zip for cache files.",
  "40a9cdc9": "genrule: move `cacheable` to base args class",
  "e9388e56": "Use zstandard instead of zip for cache files.",
  "c937af5b": "Fix cache invalidation issue when new flavored node without unflavored node added",
  "02f72c5b": "Fix shell binary cache test to not kill cache",
  "198cd7d2": "Remove atomic move from buck cache command",
  "758da592": "Write a Chrome trace file for the critical path of the slowest target.",
  "42f22d5d": "Skip dead minion check when coordinator is slow",
  "9e220ab0": "Fix possible race condition when saving binary to cache",
  "8a0756df": "Fix missing console prints due to ProgressEstimator being very slow",
  "dd9efb9f": "Mark a few more simple build rules as producing cacheable subgraphs",
  "505e3c52": "Invalidate cached action graphs after incremental construction",
  "ad2eb726": "Log start/end timestamps of cache lookups and builds",
  "2a774355": "BuckUnixPath to cache hashcode",
  "1144f5c4": "Expose configuration cxx.cache_binaries to allow caching cxx binaries",
  "4a065772": "Move cache functionality from Description to DescriptionCache",
  "aa67db6f": "Move Cache management related classes to core.build.engine.cache.manager",
  "1aa4c8c6": "Make buck fastness discussion more useful",
  "411e3c9e": "Remove EasyMock from artifact_cache tests",
  "229540cd": "Added a delegate wrapper for the parser ojects that vaidates the number of targets and prints a warning if they could lead to really slow builds.",
  "f73204d8": "Don't do `dropInternalCaches` optimization if we are using BuckUnixPath, for which it has no effect on memory and wastes time.",
  "8bf502bf": "Improve performance of the creation of large header maps",
  "4573aed5": "Move cacheability tagging to Description",
  "e5f82028": "Make DaemonicCellState cache not extend ParserPipeline.Cache",
  "a52d19c5": "ListenableFileManager to not cache ListenableJavaFileObject",
  "a6f48d1f": "Make local cache DB errors auto suggest buck clean",
  "8568edf5": "Add cache injection to async transformation engine",
  "60cf7343": "Config flag for cache synchronization margin",
  "d70d0930": "Do not crash a build on cache upload failures",
  "adac11bf": "Propagate uncacheability more intelligently",
  "45d04de1": "Publish DistBuildFinished event early to shut the stampede SuperConsole faster.",
  "12a38fae": "Only log cache misses where a hit was expected",
  "64610116": "improve precondition for cache event.",
  "a53dccb7": "Incremental action graph: cache deps",
  "1c323c5e": "Add more logging to debug performance issues in slave startup path.",
  "84f7ef12": "tone down cache error messages",
  "090947e6": "Add logging around cache miss rule key log fetching",
  "3559b804": "Normalize path to discard the cache properly",
  "aedf31bc": "Use requredRule instead of getRule when doing a cache lookup",
  "5a26a5a4": "Synchronized build phase now uses its own cache fetch thread pool",
  "08755620": "Make default depfile mode cache",
  "12833d12": "Added config to disable check of environment variable when validating the parser cache",
  "22039436": "All pending async cache fetches are skipped if a build fails or is terminated",
  "fe1c6738": "add flag to exclude local caches from buck clean",
  "f69dbbe0": "Change RuleKeyCache to use buck.util.cache.CacheStats",
  "f2bff5a2": "remove local cache with buck clean",
  "e429537c": "Work around javac Trees.getTree being slow",
  "901e33ce": "count cache hits of cache command",
  "ff854924": "Make BuildTarget.getFullyQualifiedName() lazy cached",
  "a39a517d": "Add instrumentation of target graph cache",
  "51413e65": "Simplify slow rule printing logic.",
  "18013e9e": "Add CacheStatsTracker class to encapsulate cache stats tracking logic",
  "3a1a9f53": "Upload critical artifacts from the local cache before kicking off stampede build.",
  "9ca8ef69": "Added --changes to buck parser-cache to invalidate areas of parser cache",
  "e6d6dfac": "Introducing buck parser-cache command",
  "ede7ed1e": "ArtifactCacheFactory now lets you create remote-only and local-only cache.",
  "50c0a5dd": "Coordinator no longer distributes uncacheable targets to minions",
  "a96c2bbb": "Made CxxBinary uncacheable.",
  "78489f97": "add flag for distributed to util buck cache cmd",
  "90455022": "Add new cache stats object",
  "761e3065": "Move distributed build client cache result to scuba event factory",
  "93f4a59f": "Avoid leaking file descriptors when serving cache artifacts",
  "e219083a": "limit verbosity on failed upload to cache",
  "6b31c7c4": "remove avg download speed from the cache",
  "1ef0071d": "Pass buckBuildId in buckcache requests",
  "a38e03f1": "Measure number of unexpected cache misses, not locally built rules.",
  "1c2902d7": "Shave off nodes which are already present in the remote cache.",
  "f25c42b5": "Record the number of unexpected cache misses encountered.",
  "8b2af447": "Add multi-contains request to remote cache API.",
  "75ce6a24": "new remote cache config for Buck",
  "64904463": "add scuba counters to buck cache cmd",
  "1a27e277": "Add cacheable option to genrule",
  "1511a675": "Hide `cache` without `fetch` warning.",
  "99f6d447": "buck cachedelete RULEKEY+",
  "c359f4d5": "Buck python wrapper to read cache_readonly from env var",
  "ecdf3ece": "Add support for dumping the file hash cache",
  "dbe120c2": "Deprecate `buck cache` in favor of `buck cache fetch`",
  "5a27348a": "Move cache seed to RuleKeyConfiguration",
  "083fb0e5": "Sync buckcache.thrift with upstream",
  "58a1242a": "Set --no-cache from env vars",
  "df53b318": "engine: refactor manifest cache fetch/lookup to return more info",
  "d0c07438": "parser: only cache parsed DEFS",
  "9df2bbba": "Do not load information into the BuildInfoRecorder when fetching from cache",
  "3b1a0e9d": "Fix cache conflicts",
  "ea9317ea": "Do not cache prebuilt frameworks",
  "03760d64": "Remove artifact_cache:config target",
  "da1b6a05": "Move some cache config files to artifact_cache.config",
  "57c09d09": "Write cache miss type to Scuba table",
  "93918a80": "ActionGraphCache: don't invalidate cache on watchman events",
  "9a2982e0": "Make NonPreDexedDexBuildable non-cacheable",
  "2061221b": "Show slow buck rules in buck.log",
  "814f0b1d": "Remove the deprecated use_android_proguard_config_with_optimizations arg",
  "99d3897b": "Move cache clearing up to ProjectWorkspace",
  "0e85951d": "Move implementations from cache:cache to cache/impl:impl",
  "5e57d2be": "action graph cache: fix logging of invalidation reasons",
  "5af85e12": "BuildResult now contains a future tracking cache upload progress",
  "d0e341c7": "Fail fast on extension syntax errors",
  "dfe7ff45": "Remove :action_graph_cache target in s/c/f/b/rules/BUCK",
  "34958c7c": "Make 'buck cache' show progress again",
  "105f56b9": "Show only slow build rule while building buck with buck",
  "b41857b4": "Added configuration to show top slow build rules",
  "fac1bfc0": "Weakly cache the manifest RuleKeyAndInputs",
  "cb84a43c": "Improve explanation about why action graph is slow",
  "39278a4f": "Hide parsing phase / creation action graph phase / watchman phase if they are fast",
  "7fd04db8": "Only evict metadata and content when closing the cache",
  "086a2fce": "Update buckcache.thrift",
  "00390411": "Fix one-level cache bug",
  "1d038489": "Move artifact fetch service into the cache itself",
  "e46b5f07": "Introduce [eden] .buckconfig option: disable_sha1_fast_path.",
  "0542723b": "Move the manifest-based fetches to the cache service",
  "89a4820f": "Make manifest-based cache fetch async",
  "e9f86167": "Move input-based fetches to the cacheActivityService",
  "3718db28": "Suppress PROCESSING FILESYSTEM CHANGES when it's fast",
  "2e7266c5": "Parameterize filehashcache tests",
  "b7fc897b": "Extract stats tracking out of the filehashcacheengines",
  "9568f4cb": "cxx manifest: use faster API for accesing file hash cache",
  "35515e86": "added missing artifact call that would add the file to cache",
  "72f78a40": "Teach git to ignore mypy cache files",
  "cb1f88ae": "haskell: don't cache thin archives",
  "28a0cc45": "Ignore sqlite cache benchmarks",
  "cdb484ed": "Add configuration for SQLite caches",
  "7cccb511": "Implement db artifact cache using SQLite",
  "cb6a860e": "Expose hash cache engine's getIfPresent()",
  "62b00c0a": "Revert 'Resolve and cache deps_query and provided_deps_query before creating build rules'",
  "26ffe0e3": "Resolve and cache deps_query and provided_deps_query before creating build rules",
  "7c07411e": "Publish rule key log details for all default rule key cache misses, including second level keys.",
  "a1f1e9b0": "DebugPathSanitizer: avoid path caches",
  "7de9baed": "add cache counters summary to machine-log",
  "e83ec9b8": "Fix buck-out/non-buck-out file hash cache handling",
  "f0b49b55": "util.cache.NullFileHashCache -> testutil.DummyFileHashCache",
  "634571f1": "Make some classes in util.cache package-private",
  "b540a4d7": "Fix cache key inconsistency in kotlin library rules",
  "3f3c022e": "Added enum flag for selecting file hash cache",
  "458c158b": "cxx: fix internal cache misses when calculating PCH hashes",
  "6f53c6d4": "Make sure buck always sets the cache event error message if the CacheResult is error.",
  "a63207ba": "Improve 'checking_caches' message",
  "e14635f4": "Skip remote caches for `JSFile`",
  "48ff07e5": "Add more descriptive error message when an artefact cache returns invalid metadata.",
  "cb43c22d": "Retrying artifact cache",
  "c4294535": "Let file hash caches run in parallel or alone based on buck config.",
  "648f3458": "Improved performance when adding items to the header map",
  "fcb94507": "Allow MacroArg to take advantage of query support for precomputed cache",
  "4242178f": "Removed new cache from file hash cache.",
  "44989617": "Make android_binary and apk_genrule cacheability configurable",
  "e605d039": "Close cache at the end of cache command",
  "6d80a0b2": "fix remote cache counters",
  "6753ec1b": "Show the path that invalidated buck cache",
  "325d42c0": "Check rule key factory cache before computing deps' rule keys",
  "ba56634c": "FileSystemMap is now backed by a map for faster get()s.",
  "9a73a613": "Kill dir cache experiment",
  "c384210f": "Extract default rulekey match+cache check functions",
  "50d797ab": "Added override for the other get() overload in file hash cache.",
  "97e1a12f": "add cache mode to cacheResult",
  "40d50e25": "Added even more logging to the file hash cache experiment.",
  "4a88f87b": "Improve performance of classpath computation",
  "13248b5d": "Use cached action graph",
  "3737e604": "Use action graph cache for `buck targets --show-output`",
  "39904358": "Do not throw an exception if DirCache fails to list cache files",
  "d9ba0df3": "Remove code that falls back to building locally after failing to unzip a cache artifact",
  "b0247f62": "Improve error handling of malformed cache manifests",
  "91d5841e": "Display aggregated cache statistics for distributed build.",
  "bce43319": "Exit fast from LoggingBuildListener.handleFallback()",
  "f485d367": "Add fast-path for AbstractSourcePath.equals",
  "2e20646c": "Consolidate calculation of cache error rate with CacheRateStatsKeeper.",
  "7f9742d5": "Fixed logging for file hash cache experiment.",
  "438e1470": "Remove last comment referencing --no-results-cache",
  "b5e3c4b5": "Remove obsolete --no-result-cache flag from bash completion helper",
  "9cef3c4d": "Remove test result cache flags documentation",
  "43a3acbb": "Implement a fast way of querying the version control system for stats.",
  "e0230666": "engine: always remove metadata dir before unpacking cached artifacts",
  "b0457a38": "Autoformat java files in test/com/facebook/buck/artifact_cache.",
  "05ddf33d": "Autoformat java files in src/com/facebook/buck/artifact_cache.",
  "2de9a192": "Use 'origin' build ID fields to chain builds that cached/re-cached artifacts",
  "26d0f27e": "engine: fix bug causing builds to cache using stale manifests",
  "5314ca3d": "Add a pregenerated version control stats mode for faster stats.",
  "49e1842d": "Switch default value of test.use_results_cache.",
  "878c4002": "Use one shared cache for TypeCoercer ParamInfo",
  "00b0eefb": "Replace http_local_backing_cache with passthrough cache read mode",
  "e2921008": "Added scuba logging for the file hash cache.",
  "e030372b": "Add stampede.enable_slow_local_build_fallback config option for distributed builds.",
  "eeb7a19b": "Add constraints on local backing and dir cache configuration.",
  "2fa35bd9": "Add support for a dircache that only 'backs' a remote cache.",
  "2aa8af5a": "Implement local source file cache FileContentsProvider.",
  "c7b919d2": "C/C++ library: use metadata to cache/build preprocessor input (take 2)",
  "daba08d9": "Update DebugInfo for buckcache fetch requests.",
  "94a52187": "Do not log every single action graph cache invalidation",
  "57534beb": "Revert 'cxx: split headers into platform-agnostic and platform-specific symlink trees' and 'C/C++ library: use metadata to cache/build preprocessor input'",
  "01ed0641": "Fix rule key cache event naming for default rule keys",
  "dd6488fb": "C/C++ library: use metadata to cache/build preprocessor input",
  "67d8a029": "Provide `--config client.skip-action-graph-cache=true` option to avoid replacing the cached ActionGraph.",
  "f2722144": "RuleKeyBuilder: use new file hash cache API (take 2)",
  "22cdfd94": "Set cache size limit to 2B bytes in perf test",
  "8a9062e4": "Revert: RuleKeyBuilder: use new file hash cache API",
  "98c3c8c1": "RuleKeyBuilder: use new file hash cache API",
  "a9fd3a36": "Make perft_test_hg not use cache propagation experiment",
  "90cf088f": "file hash cache: new API accepting filesystems and relative paths",
  "16821fe0": "file hash caches: strongly type the different types of caches",
  "51d94d1f": "engine: fix flow where dep-files and their rule keys wouldn't be cached (take 2)",
  "5a94f3b1": "Extend `verify-cache` command to verify rule key cache",
  "998ea67d": "Rename `verify-hash-cache` to `verify-cache`",
  "f821d7a7": "Enable re-using rule key caches between builds",
  "3ddd5ec0": "Revert: Enable re-using rule key caches between builds",
  "8a3196a0": "Enable re-using rule key caches between builds",
  "1ab2baf6": "rule keys: add a rule key cache which allows fine-grained invalidation",
  "c91a36a3": "Chain dir caches",
  "c43156d3": "Factor out rule key caches to `SingleBuildRuleKeyCache` class",
  "405c64b5": "Add cross-cell filehashcaches to daemon",
  "aca4495a": "Removing Crc32 completely from the new cache protocol",
  "13f50418": "Add more metadata to ActionGraph cache events.",
  "a17a826d": "Make rulekey cache lookup async",
  "43f1e318": "Fix buck-out file hash cache",
  "0a2f9ab1": "Script to test Target/Action Graph cache reliability",
  "492e8c3b": "Change rulekey cache lookup to be a future",
  "7eee9dae": "Fix the http clients for the artifact cache",
  "bc74ddfe": "Distributed build commands now use distributed config when instantiating cache.",
  "d7f0ef95": "Buck cache thrift calls now include distributed build status of command",
  "6f87c589": "Disable results-cache when running with code-coverage",
  "4d813cf1": "37 Focus Server Cache Query: Buck healthcheck is wrong on slower networks",
  "038deb16": "Introduce more granular test labels for slow tests.",
  "f0521716": "Make symbolic link cache invalidation msg clearer",
  "d1d5eb91": "Actually check that a cross-cell rebuild has a cache hit",
  "9221fca3": "Also use cache when getting build rule type by description",
  "ec788860": "cache BuildRuleType to improve performance",
  "1c265e18": "Add daemon integration tests to ensure we see cache hits",
  "e27df656": "munger.py optimizations",
  "2c022a51": "engine: remove metadata directory before unpacking cached metadata",
  "378ae55c": "use preprocessorDelegateCacheValue to cache flags and hashes",
  "9acaa43b": "Don't use newlines in cache metadata",
  "a51995fe": "Add a space in 'buck cache' output",
  "a517953f": "Add logging to various parts of the cache pipeline",
  "80fbf23a": "Add a command to verify the file hash cache",
  "0b955251": "Minor fix in the html of the http cache api documentation",
  "303857dc": "Revert 'engine: fix flow where dep-files and their rule keys wouldn't be cached'",
  "43180c3b": "improve performance of source control stats gathering",
  "7d515438": "Adding documentation to the new Thrift over HTTP cache protocol",
  "56cf098f": "Adding documentation for the cache client side loadbalancer.",
  "05f68793": "Get rid of rules:build_rule -> artifact_cache:artifact_cache dependency",
  "46b4f6aa": "Move ArtifactInfo to artifact_cache:artifact_cache",
  "41b0fd82": "Materialize performance improvements",
  "5abe79be": "engine: fix flow where dep-files and their rule keys wouldn't be cached",
  "ea5c57d5": "Make intermediate OCaml rules uncacheable",
  "a4947f4d": "buck cache command can unzip artifacts into a destination directory",
  "15829940": "Add an option to run tests only if they are cached failed",
  "fc3af4db": "Optimize the 'checking local cache' a bit",
  "d60e68c5": "Allow dir cache location to be a symlink",
  "c9134434": "Allow for a custom memoize cache key.",
  "de2371c2": "Multiarch file copies and caches linkmaps of the single arch components",
  "48b0da06": "Fix performance in processing pending semaphore items",
  "47b0edd5": "use cached rulekey for build events instead of recomputing",
  "ffadc99d": "Buck client now sends schedule type as part of cache fetch requests",
  "6c87e448": "add warning for using http cache mode",
  "fe731bf2": "Catch all exceptions when fetching from the cache.",
  "3bc42899": "Don't emit the get_target_node event on parser cache hits.",
  "d1a9082f": "Expose cache errors and misses to the web socket.",
  "3532c792": "Increase dir cache size in the perf test.",
  "54a6a43c": "don't cache ocaml link rules",
  "24760510": "Ignore changes to editor temporary files when invalidating caches",
  "3e9b1bf0": "Fix a performance issue in Unzip",
  "d0b20975": "Defensively copy memoized cache results",
  "bb9531ab": "Added buck http artifact cache store time statistics",
  "497826f0": "cache the parsed BuckPyFunction ST template",
  "dfaa22d5": "Fixed non-deterministic missing cache uploads issue",
  "e61d5e03": "Do not cache `infer-deps.txt`, always create it as part of post-build",
  "db30aa12": "Memory consumption optimizations",
  "c2153739": "negative-cache symlink status for registerInputsUnderSymlinks",
  "606d3a31": "Config: cache config expansions",
  "ba49faf7": "Always ignore the cache and trash directories.",
  "b3ca8ec3": "Pass the buck out directory directly to the file hash cache.",
  "c07926e5": "Add cache for getFirstNonOptionalType",
  "6a7781d8": "Hybrid protocol cache request generator",
  "ed8d8f9f": "Rule key field now being populated for http artifact cache fetch events.",
  "7ec23e4f": "Fix performance issue with input-based rule keys when Java dep files are enabled",
  "0d7079b3": "Adding a config value to toggle between HTTP and THRIFT protocol for the cache.",
  "c6dd423b": "Adding thrift files for the new buck cache thrift protocol.",
  "50b369ec": "Fix cache.served_local_cache_mode docs.",
  "0fd9b23a": "Invalidate all parser caches after buck autodeps",
  "a119b7b1": "Do not restart daemon on cache mode change",
  "a6f46d23": "CachingBuildEngine: cache rule output hashes in artifact metadata",
  "4d35122c": "Add counts of cache misses/errors in SuperConsole",
  "1f32f3c5": "CachingBuildEngine: add config setting for max artifact cache size",
  "7257780a": "buck: logging: distinguish between locally-built and cache-fetched artifacts",
  "7d617e36": "Make `NoopBuildRule`s uncacheable",
  "3855e9b1": "Add log message to link cache misses to actual rules",
  "79536940": "Do not cache resolvers in project generation.",
  "186de376": "CachingBuildEngine: only log hash of cacheable build rules",
  "e651115c": "Merge `UncacheableBuildRule` into `BuildRule`",
  "85b3d7eb": "Add counters and docs to two-level cache",
  "99008f61": "Do not walk tmp folder of dir cache",
  "2f32bbef": "Only clean dir cache on close if cache was written to",
  "69ddd087": "D: cache object files from compile build rules",
  "2ac4331d": "UncachableBuildRule, for the rules that you just can't cache.",
  "5ab48376": "WriteStringTemplateRule: cache generated file",
  "df9cf6d4": "Add more logging and counters to debug cache invalidation issues",
  "d19bc5a8": "Rip out ruleDeps future cache from CachingBuildEngine into its own class",
  "9a3cb348": "Easy: Add counter and logs when cache invalidated by Watchman overflow event",
  "645fdf9a": "Refactor cache invalidation events in DaemonicParserState",
  "a9eaec5a": "Easy: Add counter and logs warning when cache invalidated by default includes change",
  "746397dc": "Log and record event whenever Parser dumps cache on environment variable change",
  "4e9087be": "Add MoreSuppliers.weakMemoize to cache a value weakly",
  "af0980c7": "Allow dir cache to use file without copying it so speed things up",
  "82fb52fd": "Introduce simple two-level cache support.",
  "c323b82a": "Add some logging for parser cache invalidation",
  "ea2cbba7": "Add the ability to control the message a user sees on cache errors",
  "2d4bcd93": "[perf] Do not create / delete manifest prior to checking cache",
  "b8f96f27": "Enable the dir cache by default",
  "a704501f": "Revert 'Memory consumption optimizations' (d8fb886b0fc72a6d93b5128f65034edc9b653e85)",
  "10e3c072": "[halide] Make HalideLibrary cache key depend on target map",
  "36320fa9": "Make the [cache] section use the new templates",
  "07060eb9": "Adding a simple client side software load balancer to buck for the cache.",
  "787ad68c": "Perf: Use per-thread cache of Calendar objects for calculating zip entry dates",
  "d8fb886b": "Memory consumption optimizations",
  "246db807": "Prevent depfile cache manifest from growing without bound",
  "75b74ccf": "Share the cache of cells.",
  "c56e7ce2": "Speed up parser's handling of cached targets",
  "66d246c2": "Revert 'Improve performance of get_dirty_buck_version'",
  "3ab86635": "Fixed --populate-cache location in completion script",
  "c93c5e1b": "Script to analyze what rulekeys are missed in cache",
  "2b432978": "Improve performance of get_dirty_buck_version",
  "ae8de8bf": "Fix daemon always jettisoning cache if globs present in ignore directories",
  "73061d6e": "Add a read/write toggle to the served artifact cache.",
  "5dbe9344": "Fills up the local cache with artefacts from remote cache without building changed files locally",
  "883877a2": "Bundle up dircache settings into a Value class",
  "e861d052": "Improve the performance of `ParserNg.getAllTargetNodes`.",
  "02cdf121": "Make it possible to write to the served cache",
  "3f8df32c": "Ignore `SCRIPT` and `NAILGUN_TTY_0` environment variables when deciding to discard parser cache.",
  "da121e36": "HTTP cache store operations are now asynchronous",
  "c03b3e70": "Artifact compression events now split from Artifact cache events.",
  "6856b756": "Introduced dir artifact cache event",
  "97751010": "Add support for more than one http cache.",
  "ae4ed17b": "Make it possible to serve the local dir cache.",
  "0fb88514": "Make the cache mode methods use an enum.",
  "a0030bf5": "java_test: don't cache classpath argsfile using library rule key",
  "d04476ab": "Fix Http cache URL resolution.",
  "15863cb3": "Add symmetric implementations for cache protocol methods.",
  "56f4de27": "Making the reported Cache Hit rate value not as biased towards cache misses.",
  "3ccae687": "Give the artifact_cache tests more memory.",
  "c44e9ef1": "Don't blow away parser cache on Watchman warning",
  "072b4398": "Fix http cache input stream cleanup.",
  "f86a2074": "Move artifact cache to a separate package.",
  "5694d1b2": "CachingBuildEngine: don't re-cache on matching input-based rule key",
  "64cacfec": "Easy: Make AppleInfoPlistParsingTest fail fast if its resources aren't found",
  "25415c84": "Make Artifact cache AutoCloseable and simplify its creation.",
  "d5099181": "Make CommandRunnerParams hold on to the cache directly.",
  "f13d8dc0": "Disable artifact cache during project generation.",
  "1eefbcf0": "Do not invalidate cache when we change console type.",
  "ee3b5440": "Log build rule with its rule key when it is fetched from the cache.",
  "29effc2d": "Prevent standard tools' control variables from nuking the parser cache",
  "463638a0": "Switch `CachedState` to use a `Cache` for its cache instead of a `Map`",
  "a67dbec1": "Add a generic performance event class.",
  "abc36976": "Make EventKey.of(Object...) faster.",
  "0f1c0d8e": "python: add support for a fast-building in-place package variant",
  "9c91d7de": "Invalidate cached hash of rule outputs after running rules",
  "d7a8724d": "Move `FileHashCache`s to `cache` package",
  "298384fb": "Add file existence cache to FilesystemBackedBuildFileTree",
  "e89ec3b9": "DX RegisterSpec optimization for de-interning: mapSourceRegisters",
  "fb0e5e64": "DX RegisterSpec optimization for de-interning: intersect",
  "b99ac845": "InputBasedRuleKeyBuilderFactory: use input based rule keys in cache",
  "d282df5a": "Update cache API docs.",
  "f2659fe2": "Add explicit metadata to cache API",
  "f3a5294c": "Move super console cache stats calculation to rule finished event",
  "c159d9ac": "CxxPreprocessDep: cache transitive preprocessor input",
  "11f93f85": "CachingBuildEngine: preserve cache errors when building locally",
  "0875f4e7": "super console: update cache stats on artifact finished events",
  "ea9d9411": "HttpArtifactCache: reuse connections from cache misses",
  "e9839121": "Fix http cache API docs.",
  "63477caa": "Remove Cassandra cache.",
  "fafe7ac1": "Ensure individual C++ compile rules are cached in BuildRuleResolver",
  "771a461c": "Include cache hit and error rates in super console summary",
  "e120ebf0": "MultiArtifactCache: forward errors from last wrapped cache",
  "f9e9f1e8": "Support post build steps that run even after cache hits",
  "95bb664f": "Respect wifi blacklist for http cache",
  "0a98eee0": "Model client-side cache errors via `CacheResult`",
  "da1a9e2b": "Avoid spamming cache client connections",
  "7cd63d7c": "HttpArtifactCache: send user and hostname with cache requests",
  "b28b366d": "Sanitize the filename we use to fetch an artifact from the cache",
  "2991e82c": "CachingBuildEngine: make cache 'skipping' behavior configurable",
  "95323791": "buck cache: don't hard-code cassandra cache",
  "635c58e2": "Easy: Log more information when Buck jettisons cache due to environment change",
  "beafc40f": "BuildInfoRecorder enforces that the paths being cached are not absolute.",
  "06a1787f": "CalculateAbiStep should not cache artifact with absolute path.",
  "86480916": "Do not cache rules which have input files under symlinks",
  "3513505d": "Do not block the super console if there's a connection error in the http cache client.",
  "8999d75a": "Correctly invalidate flavors from Parser cache on file change event",
  "e96d2402": "Improve logging and exceptions for Parser cache invalidation",
  "2f2c9c65": "Include build uuid and timestamp in every cache artifact.",
  "287a311d": "Enable 'buck project --profile' to profile buck.py performance",
  "e4315404": "Fix http cache timeout units.",
  "4efa8468": "Change default http cache port to 8080.",
  "648f1c8a": "Add ability to use an HTTP cache",
  "9407dd19": "Do not cache ignored file hashes.",
  "5321140f": "Update 'What makes Buck fast' doc",
  "f4a56b18": "DX RegisterSpec optimization for de-interning: intersect",
  "160a87fc": "DX RegisterSpec optimization for de-interning: mapSourceRegisters",
  "f630ff65": "Require tilde expansion in home cache dirs to start with ~/",
  "a1ba0011": "Add support for user home in cache directory name",
  "bb991083": "Support artifacts with executable permissions in cache",
  "c89ddb37": "docs: Fix ABI/API confusion on 'what makes buck so fast' page.",
  "325291b2": "Revert 'docs: Fix ABI/API confusion on 'what makes buck so fast' page.'",
  "6243308a": "docs: Fix ABI/API confusion on 'what makes buck so fast' page.",
  "bfa35daa": "Kill `FileLike.fastHash()` since it's no longer used.",
  "c43b5dc1": "Helper method to enable `dir` cache in an integration test.",
  "48a3873d": "UberRDotJava should cache the classes.txt file instead of the total hash.",
  "49e54bd7": "Buildables must record artifacts to cache explicitly.",
  "8847189a": "Option to not use the test results cache.",
  "929931cb": "Track events when we skip querying artifact cache because a dep is re-built.",
  "20d86a34": "Do some performance tuning for methods that were taking a lot of CPU according to jvisualvm.",
  "0285744e": "Revert 'Modify BuildFileToJsonParser to use Gson's streaming parser' for performance reasons.",
  "53f2b609": "Fix problem with project not excluding buck-cache and buck-out.",
  "dfe23d9d": "Fix a cache corruption bug caused by including a rule's output on its classpath.",
  "99362a75": "Limit how big buck-cache can grow.",
  "98d6e8f0": "Clean up temp files if there is no cache result.",
  "0256f696": "Don't attempt to write to the distributed cache on an ABI cache hit.",
  "a5846589": "Distinguish between cached and non-cached test runs.",
  "6bc7e48d": "Report more detailed information about a cache hit success.",
  "17ca4660": "Fix python_library so it caches correctly.",
  "9e655c83": "Fail gracefully when an artifact pulled from cache fails to unzip cleanly.",
  "585b0030": "Create a `buck cache <key>` command that tries to fetch <key> from Cassandra.",
  "82dba484": "Fix some build cache interaction issues in AndroidResourceRule.",
  "099d8f21": "Delete stale metadata when an artifact is loaded from the cache.",
  "afb309e7": "Introduce a `--no-cache` option that will ignore the `[cache]` in .buckconfig.",
  "b64f0b9b": "Connect to Cassandra in a background thread and block all cache fetches on completion. This effectively parellelizes connecting to Casandra with parsing and saves ~3s on startup time",
  "95bc8aac": "Measure time spent connecting to the distributed cache.",
  "8e00ce44": "Create events to track artifact cache fetches and stores.",
  "ef355b57": "Log the type of cache hit with each build rule event.",
  "dc60e3be": "Fix support for absolute paths in [cache]dir.",
  "02a28de9": "Fix an NPE that could occur when a dep was loaded via the build cache.",
  "447f7305": "Add [cache]cassandra_mode to control writes.",
  "f6e490b6": "Add support for multiple artifact caches.",
  "e451c28c": "Remove the uncachedBuildRules field from AndroidTransitiveDependencies.",
  "4a992b41": "Fix how packaging rules consider their cache."
}, "bundletool": {
  "": ""
}, "butterknife": {
  "d74d3b3": "Make R2Generator task cacheable by default",
  "e9c1533": "Explicitly check BINDINGS if it has cached a null result",
  "b4cfd88": "Make R class scanner faster and memory efficient",
  "df00acc": "Merge pull request #1052 from jaredsburrows/jb/update-travisci-cache",
  "3b83992": "First round of casting optimization.",
  "7651141": "Merge pull request #545 from JakeWharton/jw/faster-binders-part-3",
  "091da11": "Improve performance of generated code (part 3).",
  "8d31a4f": "Merge pull request #543 from JakeWharton/jw/faster-binders-part-2",
  "54200f4": "Improve performance of generated code (part 2).",
  "af1ffd4": "Merge pull request #542 from JakeWharton/jw/faster-binders-part-1",
  "6f1d717": "Improve performance of generated code (part 1).",
  "59c0b72": "Merge branch 'nguyentruongtho-recursive_performance'"
}, "byte-buddy": {
  "658ddfe": "Allow for filtering cached return value fields that exist from before and add stale file detection to Maven Mojo.",
  "3fc9681": "Remove reference to project from tasks to avoid cache breakage.",
  "c37315d": "Add default constructor for type cache.",
  "ee9d13d": "Add strong cache key.",
  "832a333": "Add fail last error handler if fail fast is not enabled.",
  "3afbc40": "Adjust tests to use and validate configuration cache compatibility.",
  "31ab4a0": "Enable configuration cache on build.",
  "09fcb22": "Introduce cache key for legacy builds.",
  "48ce675": "Add simple cache for type pool that uses a soft reference indirection to avoid filling the heap.",
  "647ae98": "Do not use cache for legacy build which disables SSL.",
  "f6a8ecc": "Merge branch 'cache-override'",
  "7033f17": "Do not use cached version of class that is currently transformed.",
  "e02a2f9": "Add names for generated cache variables.",
  "3ea2a9d": "Use cache by default in class loading type pool to avoid class loader lock contention.",
  "5198dcd": "Turn off fail fast.",
  "b1d6a0f": "Improve performance of Java constant expressions.",
  "448ce71": "Improve performance of method preparation for large method counts.",
  "4fb6335": "Adjust build to new Byte Buddy version and extend simple cache provider.",
  "e9ced0b": "Several performance shortcuts for loaded types.",
  "67eb548": "git push origin masterMerge branch 'testn-type-cache'",
  "74e1f7a": "Use factory method for looking up type description to allow for usage of cache for common types.",
  "06b5dee": "Merge branch 'type-cache' of https://github.com/testn/byte-buddy into testn-type-cache",
  "23d0457": "Improve performance on field cache value.",
  "91fbb67": "Remove loop for field cache value.",
  "3c78fb6": "Add cached read for property.",
  "ec77e3d": "Avoid field collisions for cached values.",
  "2f641c4": "Reordered to trigger fail fast.",
  "c3cd2c6": "Removed flaky performance test.",
  "2354838": "Relaxed performance test condition.",
  "6dcb63d": "Relaxed performance test condition.",
  "89e8749": "Relaxed performance test condition.",
  "ecd258c": "Removed compound list to improve performance.",
  "dc954f7": "Improved type cache.",
  "bedfb77": "Added a type cache.",
  "9cbf1a8": "Added additional description strategies that allow for better performance while still supporting optional types.",
  "5b20fbc": "Added tests for proper cache usage.",
  "9902164": "Explicitly supply type pool to dynamic type builder. Improve performance of non-instrumented instrumentations.",
  "bebe77b": "Merge pull request #122 from felixbarny/equals-optimization",
  "bd8acd7": "Don't use TypeDescription#getInternalName but #getName in equals to improve performance a bit",
  "0c2e35b": "Added skeleton for a cache reusing binary locator.",
  "d4c95ad": "Reinserted runtime optimizations for generated proxies.",
  "83a33d2": "Added possibility to skip the method implementation when parsing a class file for a type pool to improve performance. Extended parsing needs to be enabled in order to map debugging information to parameter names.",
  "012bb90": "Made latent type description throw exceptions for unknown properties rather than returning dummy values to enforce a fail fast mechanism. Added tests.",
  "82c18a6": "Added missing static modifier for cache fields.",
  "2fd7ca8": "Added a hashcode-based seed for assuring unique field names for cached values.",
  "d17a2e9": "Minor clean ups and import optimizations.",
  "e898d91": "Removed precomputed method graph compilers which were, until now, only mediocre translations of the previous method lookup engines. With the more efficient compiler, this optimization does not longer pay off.",
  "beb467e": "Added cache to the method graph. Allows for extraction of further information at a later point.",
  "e501462": "Removed optimization that would change outcome for non-well-defined generic types.",
  "7e95438": "Simplified handling of array types in the type pool's abstract base implementation. Fixed faulty use of cache.",
  "e93b24e": "Simplified API in order allow for performance improvements and in order to hide implementation details.",
  "aead1f5": "Added possibility to cache stack manipulations in static fields on demand. Implemented the possibility to cache method constants in the invocation handler adapter and for the Origin annotation."
}, "bytecode-viewer": {
  "8d07bd5": "java 10 fixes, auto RT finding, krakatau cache fixes",
  "8a6e6c0": "faster loading. (please fix this fucking code, it's too bad) -Bibl"
}, "ByteLegend": {
  "2938fae": "Add timestamp to web editor url to avoid browser disk cache",
  "11bc675": "Fix performance issue in PrismCodeBlock",
  "dcdde27": "Remove empty cache section",
  "b0f2e74": "Performance optimization: avoid array copy",
  "dd7bca6": "Optimize frontend performance",
  "55dd398": "Enable build cache",
  "9392776": "Resolve performance issues by pre-rendering",
  "996cf84": "Use JS code to improve performance slightly"
}, "cachecloud": {
  "6d27291": "update cachecloud version desc and info pic",
  "1102117": "add redis cache clean task in diagnostic tool web page",
  "d98fcc4": "Upgrade to fastjson 1.2.83",
  "816ba04": "update cachecloud intro pic",
  "f9dfc98": "Merge branch 'main' of https://github.com/sohutv/cachecloud into main",
  "96578e2": "Update cachecloud.md",
  "2973a55": "Merge branch 'main' of https://github.com/sohutv/cachecloud into main",
  "d695b94": "Merge branch 'main' of https://github.com/sohutv/cachecloud into main",
  "9518f54": "update fastjson",
  "4c2e253": "Merge pull request #200 from sohutv/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "78ca9cf": "use fastjson instead of jackson",
  "bdd8a97": "fix appdaily slowlog stat",
  "92d1f30": "fix instance slow log anchor",
  "7e67252": "increase slow log collect frequency",
  "81c0076": "increase slow log collect frequency",
  "c91fc75": "add cachecloud version",
  "620a925": "optimize cachecloud quartz",
  "aff1a98": "cachecloud user list pic",
  "01bb971": "Merge branch 'develop' of https://github.com/sohutv/cachecloud.git into develop",
  "ae37d6c": "Merge branch 'develop' of https://github.com/sohutv/cachecloud.git into develop",
  "17e22a1": "Merge branch 'develop' of https://github.com/sohutv/cachecloud.git into develop",
  "42979e9": "sync inner cachecloud config",
  "f061009": "support config cachecloud redis basedir",
  "5655b69": "cachecloud已知用户列表",
  "6a13630": "fix instance net show slowly add new table for client report",
  "2be4182": "fix app modify config slowly",
  "a02b5b5": "slow log optimize",
  "a2c0509": "remove memcache 文案",
  "5ad65b7": "Merge branch 'master' of https://github.com/sohutv/cachecloud.git",
  "49c2297": "Merge branch 'master' of https://github.com/sohutv/cachecloud",
  "2f75718": "Merge branch 'master' of https://github.com/sohutv/cachecloud.git",
  "9fd2a2b": "instance_slow_log create table sql",
  "f07e1a3": "fix HttpURLConnection not release, but it doesn't affect cachecloud",
  "db54eba": "remove cachecloudconstants",
  "e729544": "扩展代码移动到cachecloud-common",
  "d3b8814": "applist page optimize app slow log client relate stat",
  "238c525": "去掉memcache依赖，去掉建表中有关memcache的内容",
  "3bb73f7": "去掉所有memcache的相关代码，公司内提供的是redis和memcache私有云服务。",
  "97236ac": "Merge branch 'master' of https://github.com/sohutv/cachecloud.git",
  "eeead03": "cachecloud开源"
}, "caffeine": {
  "6a452e6": "Bump com.fasterxml.jackson:jackson-bom from 2.15.0 to 2.15.1 (#970)",
  "e13c444": "fix circleci gradle cache key",
  "a821a11": "add cachelib traces to the simulator",
  "391a0cc": "Allow jcache to load its configuration from a uri (fixes #877)",
  "5289748": "jcache extension clean up",
  "d7750c3": "enable the gradle configuration cache",
  "40f8d57": "don't fail fast in test ci so that more is cached for a rerun",
  "9cd509c": "Add logging when the cache detects that the key was modified",
  "d74756d": "Review Picnic's refaster rule suggestions",
  "4e71475": "Optimize the CountMin4 sketch to fit in the cache line",
  "261c16a": "Assert that the simulator's observations match ehcache's native statistics",
  "ff43bd2": "Optimize ehcache's usage in the simulator",
  "790aa33": "jcache should return an immutable configuration",
  "5021b2f": "improve parallelism of jcache event dispatching",
  "407340e": "Use cached github actions jdk distribution if possible",
  "003be23": "Removed unneccesary top-level cache fields",
  "ffb7733": "enable fail fast iterator tests",
  "d212cd6": "Remove ElasticSearch's cache from comparisons",
  "458def2": "Bump actions/cache from 2.1.6 to 2.1.7 (#629)",
  "f143764": "Protect reference caches from a discarding executor",
  "0dcb419": "Increase performance and test coverage",
  "f068f0e": "Bump actions/cache from v2.1.4 to v2.1.5",
  "50af7d7": "Improved eviction reordering for weighted caches (fixes #513)",
  "a8c274d": "Add putIfAbsent optimistic fastpath (fixes #506)",
  "23de1bd": "Minor improvements to make cache loaders friendlier",
  "037e7a6": "Bump actions/cache from v2 to v2.1.4",
  "464bc19": "Eagerly evict an entry if it too large to fit in the cache",
  "83ae0dc": "Fix write-time optimization for variable expiration (fixes #478)",
  "fb42e94": "Add Twitter's cache traces to the simulator",
  "8049458": "Add 'record-native-stats' option to jcache (fixes #460)",
  "ecd5e13": "Support simulations of large caches in weighted policy types",
  "ba5e5f6": "Add the Linux page cache (Double Clock) to the simulator",
  "614fe60": "Add optimistic fast path for putIfAbsent to avoid locking",
  "abdc478": "Prefer the thread context classloader in jcache (fixes #387)",
  "1ffb8fd": "Fix caffeine and cache2k weighted eviction counts",
  "ee1100e": "Suggest using a same-thread executor for a disabled cache (fixes #348)",
  "96edea8": "Guava cache sync",
  "aa63462": "Guava cache sync (improved overflow handling)",
  "b6592fc": "Add fast-filter, snia msr trace, improved type checking",
  "45feb12": "Minor test gc optimization",
  "74d1d80": "Add jcache config file setting for the executor (fixes #276)",
  "c02c623": "Remove ehcache2 (incompatible with ehcache3 v3.5+)",
  "5a91bbe": "Change Caffeine default cache size to 64",
  "4c670e5": "Add test case showing issue where updating an EntryProcessorEntry does not occur during Jcache Cache.invoke",
  "cb87b0f": "Allow unwrapping of a JCache cache to a native Caffeine cache",
  "26a9838": "Don't refresh automatically when waiting for a slow reload (fixed #175)",
  "eb44628": "Fix variable expiration with async cache (fixes #159)",
  "f9e3e62": "Integrate variable expiration into the cache",
  "0ad8ebd": "Add Gradle build cache to the simulator",
  "9900428": "Including the Rapidoid cache into the benchmarks.",
  "64096c0": "Restore eviction optimization",
  "86358c5": "Minor optimizations to simulated annealing",
  "260ec05": "Add Collision cache to simulator and benchmarks (closes #126)",
  "f8119a1": "Increase CI timeout due to slow tests",
  "d26d0c9": "Fix reference cache triggering maintenance after a write (fixed #111)",
  "30426c4": "Example usage of Caffeine with a write behind cache writer.",
  "47b4edf": "Fix adaptive w-tinylfu for small caches",
  "c934ee1": "Add ElasticSearch's LRU cache to the benchmark suite",
  "620bf77": "Minor optimizations and clean up",
  "9dead5a": "Small optimization for explicit removal (invalidate)",
  "0337c68": "AsyncCacheLoader for asynchronous caches (fixes #53)",
  "23ebe0f": "Add fastpath for when the cache is under 50% capacity",
  "630ac52": "Review time usage in jcache",
  "ff2f754": "Benchmark: Ehcache3 is horribly slow for large caches",
  "25bfa45": "Support small caches in WindowTinyCachePolicy",
  "4b73c14": "Disable fastpath for hot reads",
  "d368fd8": "Use Segmented LRU for the main space cache",
  "1b97775": "Read performance tuning",
  "6fe1eb4": "Restore write performance",
  "eeb5020": "Add fast path unit tests",
  "be30125": "Add fast path read for hottest entries",
  "a52e060": "Add cache2k to simulator",
  "079e7ee": "Split cache codegen into rules",
  "2fe1f3f": "Add hash flooding protection, tests, and fix optimization",
  "0308215": "Document and move the FrequencySketch into the cache",
  "9124f4f": "Add EdenQueue fast-path optimization",
  "7acab88": "Add LIRS fast-path optimization",
  "89bd8f3": "Fix victim caches (now reliably better than baseline)",
  "4180ad5": "Add TuQueue policy (OpenBSD, memcached) to the simulator",
  "7ca9dde": "Fix slow tests task not running all the slow tests",
  "e1e6e4e": "Victim cache simulation",
  "7e82e1e": "Add Bélády's optimal cache to simulator",
  "7c8203d": "Add Jackrabbit's LIRS cache for comparison",
  "eff6521": "Restore optimizations (removed while debugging)",
  "31bcb8b": "Add cache2k to benchmark",
  "3b051ff": "Updated Infinispan cache specifics",
  "debe0a8": "Add Ehcache and Infinispan to benchmark for comparison",
  "bd7892b": "Add write pre-screening optimization",
  "1bbfc86": "Perform cache maintenance asynchronously by default",
  "fe83409": "ConcurrentLinkedLazyQueue as a faster alternative to CLQ",
  "6a30c7b": "A few minor optimizations",
  "ef22ce3": "Use SCQ as cache write buffer implementation",
  "abb79e8": "Use a simpler, faster ring buffer implementation",
  "3829a0a": "Avoid Long.valueOf() micro-optimization",
  "4e44304": "Force periodic cleanup for reference-only caches",
  "0874855": "Port Guava's cache weight test addition (b3855ef)",
  "8883427": "Fix async caches to weigh computing entries as 0",
  "2fd58a4": "Use one-shot capacity buffer for improved performance",
  "28e1e36": "Instrument cache tracing",
  "f6bb571": "Add a configuration strategy to name the cache for tracing purposes",
  "936572a": "Run jsr107 (jcache) TCK as part of the build (disabled due to partial impl)",
  "8b2ffbf": "Scaffolding for jcache configuration file",
  "068d1d6": "Early work on jcache support.",
  "2074c45": "Reduce cache codegen size through inheritance",
  "d89d3ba": "Use codegen caches (only a few fields migrated)",
  "66945ac": "Early work on cache code generator for field optimizations",
  "9b4d1ad": "Stub of local cache code generator",
  "d39f79a": "Add memory benchmark to evaluate cache overhead",
  "4b0a3e4": "Use code generated Nodes. Due to a bug, unsafe optimizations are disabled.",
  "045504c": "Feedback from review - Remove padded atomics; will apply optimizations internally as needed - package and protected cleanups - fix warnings in Guava tests - Use OptionalLong",
  "e12240c": "Minor cleanup of unbounded cache",
  "a4c41b9": "Fix bug when cacheloader returns null (miss)",
  "70fc4a5": "Add unbounded cache validation and fix slow await calls",
  "b652347": "- Added async cache validation - More reliable test race fix - Force matcher description output",
  "bbed13a": "Parameterize build by async/sync cache type for stable CI builds",
  "161f052": "AsyncLoadingCache implementation for unbounded cache",
  "35d030e": "Remove zero weight optimization due to expireAfterAccess and update JavaDoc to use Google's relaxed style (was 80c, now 100c to match code line limit).",
  "9974b29": "Weighted cache tests",
  "5fe1618": "Inspect Guava cache loader for loadAll support",
  "8a76e0d": "Fix slow tests & basic Guava adapters",
  "71cb17c": "Disable slow tests as somehow screwing up coveralls(?)",
  "7984687": "Fix coverage reporting with slow tests",
  "be95c0b": "Try enabling slow tests to see if failures are fixed",
  "4600cf9": "Break each cache reference combination into its own test task - Ensures none are accidentally missing (like before) - Now holds onto context to avoid accidental GC during test - Can be run as `gradle test` instead of `gradle check` - Does duplicate non-cache tests (LinkedDeque) which are fast",
  "83834c0": "Disable slow tests on CI as fails, though passes locally",
  "bf1d890": "Run slow tests in parallel",
  "accecd2": "Enable slow tests on CI only",
  "d9a748d": "Add expiration support to @CacheSpec and faster test execution",
  "1bf9f3b": "Bulk load support for unbounded cache",
  "f8e28c6": "Provide low-level access to the cache",
  "7c7e613": "Finish JavaDoc for Caffeine cache builder",
  "cafacdd": "LoadingCache support for bounded local cache",
  "54b5e3c": "Embedd CLHM for transitioning into the cache backend",
  "7f2cad8": "Verify max size cache spec",
  "a71ccbf": "CHM has performance and livelock bugs",
  "20a04e9": "Added cache benchmark and YCSB distrubtion generators",
  "b610b1a": "Fix false sharing impacting performance"
}, "calcite": {
  "a833bd6": "[CALCITE-5679] HepPlanner#buildFinalPlan: do not clear metadata cache if RelNode has not changed",
  "2e446f2": "[CALCITE-5111] jekyll-cache directory should be ignored by git",
  "e6f7cac": "[CALCITE-4994] SQL-to-RelNode conversion is slow if table contains hundreds of fields",
  "fd3c1d0": "[CALCITE-4851] Build gives lots of 'Execution optimizations have been disabled' warnings",
  "2c17f7a": "[CALCITE-4551] Reusing Immutable metadata cache keys",
  "dff775d": "Bump JDK from 15 to 17 in seed build cache CI jobs",
  "78cc3e3": "[CALCITE-4494] Improve performance of checking RelNode presence in RelSubset (Igor Lozynskyi)",
  "56bc468": "[CALCITE-4140] Use Wasabi S3 for remote build cache",
  "9f13325": "Remove files that change often from Travis cache, remove broken files automatically",
  "314f5f6": "Add GC options to GitHub and Travis CI so they fail on low memory condition faster",
  "6cc8aa1": "[CALCITE-4184] Update Gradle: 6.3 -> 6.6, make fmpp and javacc tasks cacheable",
  "c17daca": "[CALCITE-4168] Configure Gradle local build cache",
  "0fdf185": "[CALCITE-4141] Make checkstyle tasks relocatable to support Gradle build cache",
  "88d4de0": "[CALCITE-4124] Stop invalidating metadata cache in VolcanoRuleCall",
  "9f18c85": "Following [CALCITE-3753], add log when aborting optimization due to VolcanoTimeoutException (Jiatao Tao)",
  "258f791": "[CALCITE-3999] Simplify DialectPool implementation using Guava cache",
  "8cf7b44": "Following [CALCITE-3763] Fix slow test failure (DonnyZone)",
  "6687925": "[CALCITE-3791] HepPlanner does not clear metadata cache for the ancestors of discarded node when a transformation happens",
  "56d427a": "[CALCITE-3799] Following CALCITE-3769, fix the slow tests",
  "8a89028": "[CALCITE-3793] AssertionError throws for planner digest cache key when the rel type is not struct",
  "bbb37fc": "Increase test coverage for regular CI jobs: move @Tag(slow) annotations to test methods",
  "0af2a97": "[CALCITE-3722] Add Hook#PLAN_BEFORE_IMPLEMENTATION to capture the plan after optimization",
  "8658804": "In DiffRepository, replace a synchronized Map with a Guava cache",
  "a69d249": "Following [CALCITE-3525] Fix slow tests expected plan",
  "ca1bb5e": "GHA: use actions/checkout@v2 for faster checkouts",
  "6ad3f9a": "[CALCITE-3140] Multiple failures when executing slow tests",
  "472be64": "Use build/checkstyle-cachefile instead of target/... for the cache file",
  "ab97af3": "[CALCITE-3257] RelMetadataQuery cache is not invalidated when log trace is enabled (Xiening Dai)",
  "ac40d69": "[CALCITE-3055] Use pair of relNode's rowType and digest as unique key for cache in RelOptPlanner (KazydubB)",
  "62fc0e6": "[CALCITE-2877] Make GeodeSchema constructor public to pass client cache object (Sandeep Chada)",
  "f33e1b8": "[CALCITE-2902] Improve performance of AbstractRelNode#computeDigest",
  "6687023": "[CALCITE-2887] Improve performance of RexLiteral#toJavaString",
  "18560d1": "Add JUnit category for extremely slow tests, launch them in a separate Travis job",
  "62b47ae": "[CALCITE-2635] getMonotonocity is slow on wide tables (Gian Merlino)",
  "de9a716": "[CALCITE-2717] Use Interner instead of LoadingCache to cache traits to allow GC (Haisheng Yuan)",
  "ca37803": "MockCatalogReader is used in testing, so cache should be disabled there to avoid thread conflicts and/or stale results",
  "47c49c9": "[CALCITE-2189] RelMdAllPredicates fast bail out creates mismatch with RelMdTableReferences",
  "3763abf": "[CALCITE-1808] JaninoRelMetadataProvider loading cache might cause OutOfMemoryError",
  "f1a002e": "[CALCITE-1960] RelMdPredicates.getPredicates is slow if there are many equivalent columns (Rheet Wong)",
  "eaa5641": "[CALCITE-1925] In JaninoRelMetadataProvider, cache null values (Ted Xu)",
  "beb4653": "[CALCITE-1610] RelBuilder sort-combining optimization treats aliases incorrectly (Jess Balint)",
  "eb291b0": "[CALCITE-1292] Druid metadata query is very slow (Michael Spector)",
  "ea41b34": "[CALCITE-1093] Reduce impact of ArrayList performance",
  "670fa73": "[CALCITE-1083] SqlNode.equalsDeep has O(n ^ 2) performance",
  "ac8d04e": "[CALCITE-911] Add a variant of CalciteSchema that does not cache sub-objects",
  "6f83773": "In Travis CI, enable containers, and cache .m2 directory",
  "9f73670": "Re-order test suite, so that fast tests are run first.",
  "4843508": "Get sub-schemas defined by a Schema SPI, and cache their OptiqSchema wrappers. (Tobi Vollebregt and Julian Hyde)",
  "6865c27": "Implement multi-pass optimization: some of the variables might be avoided and inlined after the first pass",
  "e9ed875": "Implement equals and hashCode for expressions. Hash codes for complex expressions are cached into a field of the expression.",
  "4941886": "Use Pair<String, String> instead of String concatenation to reduce garbage when searching in Rex expr caches",
  "4121916": "Fix https://github.com/julianhyde/optiq/issues/164, 'Improve query performance of optiq over mongo'.",
  "b28130f": "Cleanup cache exception-handling and an assert.",
  "e553b8d": "Fix https://github.com/julianhyde/optiq/issues/97, correlated EXISTS. Add test cases for join-ordering optimization.",
  "b62c837": "Make planning process more efficient by not sorting the list of matched rules each cycle. It is sorted if tracing is enabled; otherwise we scan to find the most important element. For this list, replace LinkedList with ChunkList, which has an O(1) remove and add, a fast O(n) get, and fast scan.",
  "5d98030": "Re-order test suite, so that fast tests are run first, and tests that are slow and don't break very often are last.",
  "abcf3b1": "In JdbcSchema, cache table definitions. Enforce that table names are not null.",
  "b3d0a82": "Split into scenario with a 'simple' schema that generates tables (CsvTable) that just execute and a 'smart' schema that generates tables (CsvSmartTable) that undergo optimization. Upgrade to optiq-0.3.7.",
  "d9d8a11": "Further performance tweak for Enumerable based on Iterable. Improve javadoc."
}, "CalendarView": {
  "": ""
}, "Calligraphy": {
  "47f453a": "Merge pull request #232 from ened/230_int_arrays_cache",
  "9ea696f": "Merge pull request #15 from chrisjenx/chris/null_cache_fonts"
}, "camel": {
  "921ce5193": "CAMEL-19058: cache the producer and endpoint locally to avoid hitting the type check scalability issue",
  "f0316627b": "CAMEL-19319: fix a type check cache miss on the UnitOfWorkHelper",
  "d4626e9d9": "(chores) performance: use native array copying which may benefit from intrinsic functions",
  "93b6dab29": "CAMEL-15105: move the stream cache flag to the extension",
  "069a74b3d": "Fix for code inspection 'initial size for Collection.toArray() should be zero'. Related to performance. PR for core (#9857)",
  "59eba380c": "Fix for code inspection 'initial size for Collection.toArray() should be zero'. Related to performance. PR for components (#9856)",
  "2275c44e7": "Fix for code inspection 'initial size for Collection.toArray() should be zero'. Related to performance. PR for tooling (#9855)",
  "a056f0c7e": "reacted on inspection 'set.removeAll(list) calls may work slowly' (#9806)",
  "4cf432be6": "camel-jbang - Trace to show read position of stream cache body",
  "e3719648b": "camel-jbang - Trace to show read position of stream cache body",
  "cce03bcf4": "CAMEL-19162: camel-ehcache - Should ignore exception when shutting down cache manager, which prevents from the component to be restarted again.",
  "041721a66": "(chores) camel-jcache: replace inner class with lambda",
  "9b192e778": "Fixed test after core optimization",
  "706cc0083": "Fixed test after core optimization",
  "907a9d0c0": "Revert 'CAMEL-19058: cache the producer and endpoint locally to avoid hitting the type check scalability issue'",
  "c8d36cb1d": "CAMEL-19058: cache the producer and endpoint locally to avoid hitting the type check scalability issue",
  "23542fc5b": "CAMEL-19060 (camel-seda): cache queue reference to avoid costly operations in the hot path",
  "33c0c92d6": "CAMEL-19014: Disabling simple cache with 0 or negative value should be possible",
  "fa7ad9a1d": "Bump http-cache-semantics from 4.1.0 to 4.1.1 in /docs (#9287)",
  "38442dd75": "CAMEL-18956 - Camel-Jcache: It's using a bundle of javax-cache-api",
  "7af3bdb73": "CAMEL-18956 - Camel-Jcache: It's using a bundle of javax-cache-api",
  "e81c8a572": "camel-ehcache: fixed tests due to migration to Jakarta / Camel 4 (#9077)",
  "cf7d0d0de": "Remove camel-caffeine-lrucache in v4",
  "763d0cb6b": "Remove camel-caffeine-lrucache in v4",
  "5dc5b9e26": "(chores) camel-fastjson: return the actual unmarshall generic type",
  "515c2ceab": "(chores) camel-jcache: added missing private constructors",
  "ce2fa0bef": "CAMEL-18844: Fix event console performance degration on high concurrent load due to internal locking.",
  "594290e39": "CAMEL-18844: Fix event console performance degration on high concurrent load due to internal locking. It is okay to not use concurrent queue and instead just a basic array with moving cursor - its okay if an event is overridden.",
  "cd8e115d3": "CAMEL-18830: camel-ehcache - Align to JAXB from camel",
  "dced93947": "CAMEL-18789: camel-log - Should show cached stream by default. Added option to turn this on|off.",
  "5cbd74b8e": "CAMEL-18677: allow setting the cache on the configuration builder",
  "756b3c080": "CAMEL-18148: fixed incorrect cache registration",
  "398afcf15": "CAMEL-18649: prevent checking the cache unless fully initialized",
  "0d207fd27": "Update Yarn cache",
  "7922a4e32": "(chores) camel-jms: adjust parallelization capacity for more stability on slower systems / CI nodes",
  "fb888d4a0": "CAMEL-18444: camel-caffeine - Reuse cache for endpoints with the same cache name. Better lable and docs for options. Do not set initial size/max size as 10000 as that is a lot of memory waste. Leave it as default.",
  "ae1b72740": "CAMEL-18362: wait for the initial cache loading",
  "7a50e23dd": "CAMEL-18371: do load the cache when resuming with the file component",
  "b131fb5d0": "(chores) camel-kafka: ensure tests run a little bit faster",
  "d3dee8176": "Extra offer timeout for slower CI tests that makes the test flaky",
  "6000cee2b": "camel-jbang - Export should not fail fast due to stub component is shadowing the actual component which then cannot be auto configured.",
  "f80c163fe": "(chores) camel-jcache: removed unused private fields",
  "4df86fac3": "CAMEL-18125 fix multi node Kafka resume strategy empty cache",
  "e8896bc3a": "CAMEL-18128: allow determining the desirable resume cache fill policy",
  "657f8ee28": "Bump fastjson from 1.2.80 to 1.2.83 in /parent (#7809)",
  "580390ee2": "Bump fastjson from 1.2.80 to 1.2.83 in /parent (#7809)",
  "c9bcd5748": "(chores) camel-mina: use a greater timeout to avoid failure in slow CI hosts",
  "b4587fafd": "(chores) ci: do not fail fast on the matrix build for alternative OSes",
  "7de327d91": "CAMEL-17100: minio consumer is slow at starting. Change the minio object loading at beginning to exchange by exchange (#7691)",
  "3e74c0a3e": "camel-console - Add top console to dump performance stats",
  "7a3b618d1": "camel-console - Add top console to dump performance stats",
  "806ed77c6": "camel-console - Add top console to dump performance stats",
  "247d67231": "CAMEL-17894: reduce SpiGeneratorMojo method sizes to simplify performance analysis",
  "f982a2c9d": "CAMEL-17894: cache reading the jandex file whenever possible",
  "412be9057": "camel-jbang - Only log downloaded JAR at INFO level if it was slow",
  "23e00cf15": "CAMEL-17894: reduce method size to simplify performance analysis",
  "2f22c70e6": "CAMEL-17894: cache known Java classes",
  "d4ed70637": "CAMEL-17763: cleanup unused exceptions in camel-jcache",
  "6573ba23a": "CAMEL-17763: cleanup unused exceptions in camel-fastjson",
  "bfe59f19d": "CAMEL-17763: cleanup unused exceptions in camel-ehcache",
  "c9273acc9": "CAMEL-17763: cleanup unused exceptions in camel-caffeine-lrucache",
  "05297c91c": "CAMEL-17809: camel-vertx - Should have type converter from buffer to stream cache",
  "6a55b310a": "CAMEL-15562: abstract the underlying cache so it's configurable",
  "d1edf1fd8": "maven-compiler-plugin 3.10.0 is making build slower, especially on regen builds",
  "78cadbb23": "Make build faster - something weird in jooq makes it slower afterwards.",
  "0e80323ed": "camel-jbang - Do not have ASF repo as default maven repo as this can slow down. Just use maven central only.",
  "e3473d93c": "(chores) camel-package-maven-plugin: additional updates to make it slightly faster",
  "bb147f8e1": "(chores) camel-package-maven-plugin: minor performance related cleanup",
  "ffb59c33a": "(chores) experimental ci: fix cache usage and apply minor cleanups",
  "e03a2815d": "Fix flaky test on slow CI servers",
  "abe7dcb45": "Fix flaky CI test on slower CI servers",
  "1d0fc97e5": "Fix flaky test on slower CI servers",
  "770cd387d": "CAMEL-17481: Caffeine cache improvements",
  "a402c1543": "[CAMEL-17481] Caffeine cache improvements (#6728)",
  "2085d414c": "(chores) CI: use cached compiled resources to reduce build duration",
  "be223a979": "(chores) fail fast on checkstyle violations",
  "8d900aba7": "Delete StringHelper#replaceAll and use String#replace instead as it is much faster from Java 11 onward.",
  "e653b8158": "CAMEL-17121: converted the default producer cache to use repeatable tasks",
  "ac789472d": "CAMEL-17106: override the component timeout configuration to prevent the test from running slowly",
  "d0f1f952b": "CAMEL-17073: Invalid simple expression cache behavior",
  "c130ab644": "CAMEL-17073: Invalid simple expression cache behavior",
  "25dca031d": "Upgrade Ehcache to version 3.9.6",
  "63acfc0f0": "Upgrade Ehcache to versin 3.9.5",
  "9425dffa8": "camel-core - cached thread pool may have its use, so lets not deprecate it.",
  "86563a1a5": "Make camel-microprofile-fault-tolerance tests faster",
  "22872ec93": "Make resilience4j tests faster",
  "dbbdd75ad": "Removed jmh-version placeholder not used here, but only in performance-tests repo",
  "3478d8899": "Do not generate the checkstyle reports but only use the check goal instead which is way faster",
  "6470d7e95": "Upgrade Ehcache to version 3.9.4",
  "863304222": "Upgrade Ehcache to version 3.9.3",
  "5187ffe1c": "CAMEL-16458: PollEnricher EIP - small optimization",
  "e75396f72": "CAMEL-16197: camel-cxf - Should ensure CXF attachment that are cached to temp disk should be closed/deleted when UoW is done so CXF does not leak files. (#5326)",
  "b4dca6f4b": "Make camel-swagger-java tests faster",
  "3c4b48cdb": "Make camel-jaxb tests faster",
  "110e86847": "Make camel-barcode tests faster",
  "2e02eaa73": "camel-core - Small optimization for split iterator",
  "a9fd03f1d": "CAMEL-16454: camel-core - Optimize CircuitBreaker constants for fast exchange properties",
  "1cc6077c5": "camel-zipkin - Run tests faster in parallel mode",
  "e0d8a1f30": "camel-core - Small optimization",
  "092e7c5b5": "CAMEL-16443: add yarn cache",
  "be48a6a79": "CAMEL-16197: camel-cxf - Should ensure CXF attachment that are cached to temp disk should be closed/deleted when UoW is done so CXF does not leak files.",
  "61d44cc94": "Make camel-hazelcast tests faster",
  "543a1f3f0": "CAMEL-16197: camel-cxf - Should ensure CXF attachment that are cached to temp disk should be closed/deleted when UoW is done so CXF does not leak files.",
  "e9e8ed205": "CAMEL-16397: camel-jsonpath - Evaluate jsonpath result using the practice that the jsonpath project itself suggests. This allows to use their JSonPath cache for thread safety.",
  "8df45325c": "Make camel-jcache faster by removing hazelcast clustering",
  "5a3db4b72": "CAMEL-116340: Salesforce component build time optimization.",
  "557efba16": "camel-core - Small optimization on Choice EIP",
  "99391c536": "Added a note about performance modules migration in a new repository",
  "3de21e8df": "CAMEL-16324: camel-core - Spring Transactions does not work due recent optimization",
  "6a3882b1d": "Add a cache to the ApiComponentGeneratorMojo",
  "b58ec8278": "core: DefaultRoutesLoader to cache RoutesBuilderLoader locally instead of globally to the registry",
  "28f7d4567": "camel-core - Small optimization in pipeline",
  "e377399fd": "CAMEL-16193 - Use SecureRandom instead of Random - Camel-Ehcache",
  "8180de476": "Fix KafkaIdempotentRepository flagging cache as ready incorrectly (#5066)",
  "f670b627f": "CAMEL-16177: multicast parallel processing and encrypted stream cache (#5065)",
  "d93ad57b2": "Minor performance improvements to the infinispan remote clustered tests (#5046)",
  "86e79d65b": "CAMEL-16104: ProducerCache does not close producers when cacheSize is 1",
  "d35b4e87b": "Added caffeine lrucache docs",
  "d970b7204": "CAMEL-16078: move camel-caffeine-lrucache from core to components",
  "a13a48cc1": "CAMEL-16078: move camel-caffeine-lrucache from core to components",
  "e33222447": "CAMEL-16078: move camel-caffeine-lrucache from core to components",
  "68f6f3a5a": "CAMEL-16078: Deprecate camel-caffeine-lrucache and remove from camel-core pom.xml as we should use the default implementation out of the box.",
  "dc8e4bb37": "Allow to reset build taken for native builds that are super fast.",
  "fda2d3d25": "Allow to reset build taken for native builds that are super fast.",
  "5f9913390": "mvn clean install -Psourcecheck,fastinstall",
  "285c6d3bc": "make use of HashSet#contains instead of streaming + regex which is slower",
  "d734f80b0": "CAMEL-16000: Add type converter for Map to Collection (set) as previously the slower type converter was able to do this. The new optimize converters requires more specific converter pairs to be really fast.",
  "94bff0de8": "camel-ehcache: fixed deprecations in test code (#4649)",
  "e511e1f57": "CAMEL-15836: Add autowired metadata to camel-infinispan cacheContainer option",
  "d6f0f9dcc": "camel-jcache - Should init key expression in jcache policy.",
  "83074930d": "CAMEL-15752 - Camel-Kafka: Exception java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonNode on Camel-Kafka component",
  "bdc1d5346": "Revert '[CAMEL-15738]camel-fastjson|camel-fhir|camel-gson|camel-jackson|camel-jacksonxml|camel-jaxb|camel-xstream doc mismatch the value in src code'",
  "cbfc4c680": "[CAMEL-15738]camel-fastjson|camel-fhir|camel-gson|camel-jackson|camel-jacksonxml|camel-jaxb|camel-xstream doc mismatch the value in src code",
  "9f4942a6b": "camel-core - Some small optimizations",
  "cf5b6cc71": "camel-core - Small optimizations in bean component",
  "e04fd9a55": "camel-core - Optimize to use description from route node instead of endpoint uri as sanitizeUri takes on avg much time, which now allows Camel to startup faster.",
  "878601b50": "camel-core - Tiny optimizations",
  "61a0ec8e8": "CAMEL-15605: Languages should be singleton for better performance.",
  "62c4f5b6a": "Remove explicit zeroing of AtomicLong objects at instantiation time, which is redundant and slower than relying on default values.",
  "d8da8cc17": "CAMEL-15605: Languages should be singleton for better performance.",
  "c15c30e30": "CAMEL-15605: Languages should be singleton for better performance.",
  "7bfaccb24": "CAMEL-15605: Languages should be singleton for better performance.",
  "376bc05a2": "CAMEL-15605: Languages should be singleton for better performance.",
  "06bd29a18": "CAMEL-15605: Languages should be singleton for better performance.",
  "fd8084fed": "CAMEL-15605: Languages should be singleton for better performance.",
  "d7ea35b7b": "CAMEL-15605: Languages should be singleton for better performance.",
  "70f16b822": "CAMEL-15605: Languages should be singleton for better performance.",
  "d9cacc72f": "CAMEL-15605: Languages should be singleton for better performance.",
  "3f0349f79": "CAMEL-15605: Languages should be singleton for better performance.",
  "7d07d3ba7": "CAMEL-15605: Languages should be singleton for better performance.",
  "eb06b1f4b": "CAMEL-15605: Languages should be singleton for better performance.",
  "6c9c47750": "Remove explicit zeroing of AtomicInteger and AtomicLong object at instantiation time, which is redundant and slower than relying on default values. (#4342)",
  "46a579f6d": "CAMEL-15524: camel-caffeine: use cacheName to lookup cache instances from the registry (#4203)",
  "513de6958": "CAMEL-15478: Remove roaster workaround as a new release is out, super fast thanks George Gastaldi.",
  "81b8bf301": "Upgrade Ehcache to version 3.9.0",
  "aebe4f6d3": "CAMEL-15345: camel-twitter - Should validate that mandatory access token has been configured when creating endpoint to fail fast.",
  "0cc3c949e": "[CAMEL-11807] Upgrade camel-jcache to junit5",
  "e3e20bbb3": "CAMEL-15197: Deprecate cached thread pool as we dont really need that",
  "2c9807488": "[CAMEL-11807] Upgrade camel-fastjson to junit5",
  "fd01a2a0c": "[CAMEL-11807] Upgrade camel-caffeine-lrucache to junit5",
  "5641c8a5d": "CAMEL-11807 Migrated camel-drill/ehcache/elsql tests to JUnit 5",
  "fc1185398": "Camel-Olingo2: Lets make the fastinstall build faster",
  "0c0efc1d9": "[CAMEL-15061] Cache failed attempts to load classes to greatly improve performance (#3826)",
  "48596d6fc": "CAMEL-15047: camel-saleforce - Fix services to do correctly start|stop logic in their doStart/doStop methods and defer creating the http clients to this phase so they are created at correct moment. Also for buuld time optimizations via camel-quarkus/graalvm would benefit from this.",
  "302128a9f": "CAMEL-14972: Enricher does not reset stream cache for aggregator (#3780)",
  "be9f46afe": "Remove unused ehcache-version placeholder and unused Ehcache 2 dependency management.",
  "d15d55984": "CAMEL-14947: camel-sftp: check for existance of remote directory using ls is very slow. Polished the prev PR and rename the option to a better name.",
  "813d96644": "CAMEL-14947: camel-sftp: check for existance of remote directory using ls is very slow. Polished the prev PR and rename the option to a better name.",
  "f58b23119": "CAMEL-14947: camel-sftp: check for existance of remote directory using ls is very slow. Polished the prev PR and rename the option to a better name.",
  "89f16b301": "CAMEL-14947 check for existance of remote directory using ls very slow (#3776)",
  "8bf06971d": "Fixed toD doc was wrong for cache size example",
  "0b64b683e": "CAMEL-14911: Only log when JMX is enabled. Also fixed wrong logging due recent init/start optimizations.",
  "4869332c7": "Revert 'Switch to faster String#indexOf method taking a char parameter.' for camel-salesforce-component SubscriptionHelper.",
  "961ca457e": "Switch to faster String#lastIndexOf method taking a char parameter.",
  "f74296717": "Switch to faster String#indexOf method taking a char parameter.",
  "3301539ee": "Revert 'Switch to faster String#lastIndexOf method taking a char parameter.'",
  "ead43f21a": "Revert 'Switch to faster String#indexOf method taking a char parameter.'",
  "b5315804f": "Switch to faster String#lastIndexOf method taking a char parameter.",
  "93e11b338": "Switch to faster String#indexOf method taking a char parameter.",
  "8e7b97870": "CAMEL-14715 - Remove spymemcached property placeholder (camel-karaf-migration)",
  "79b59a3d8": "CAMEL-14715 - Remove spymemcached bundle property placeholder (camel-karaf-migration)",
  "cfce42ce5": "CAMEL-14715 - Remove fastjson bundle property placeholder (camel-karaf-migration)",
  "e046645a0": "CAMEL-14739: Fix core optimization would lose route detail on UoW when nesting down many routes.",
  "4ac562b78": "CAMEL-14739: Fix core optimization would lose route detail on UoW when nesting down many routes.",
  "06c48d08c": "camel-jcache: Tests are failing due to hazelcast upgrade",
  "097f17a99": "CAMEL-14395: camel-jms - Add option to turn off Artemis optimization for bytes messages",
  "893ca1c6b": "CAMEL-14395: camel-jms - Add option to turn off Artemis optimization for bytes messages",
  "fd726b4ab": "Merge pull request #3612 from kawakamimanabu/typo_jcache",
  "af7797084": "Update jcache-component.adoc",
  "446703e2f": "CAMEL-14648: camel-core optimize - CamelURIParser for parsing almost all commong Camel endpoint URIs in a faster and lighter way than using java.net.URL.",
  "c59bd3594": "CAMEL-14648: camel-core optimize - CamelURIParser for parsing almost all commong Camel endpoint URIs in a faster and lighter way than using java.net.URL.",
  "5ef63390a": "CAMEL-14514: Improve performance of Camel Google Pub/Sub (#3551)",
  "4a17ef2aa": "CAMEL-14596: Update cache size documentation",
  "56b9de811": "CAMEL-14604: Update cacheSize docs",
  "fae9c49da": "CAMEL-14596: Update cache size documentation",
  "8cea4e750": "CAMEL-14596: Update cache size documentation",
  "94910c6b9": "CAMEL-14596: camel-core - Optimize Enrich/PollEnrich when cacheSize = -1 to avoid creating endpoints. Introduced getPrototypeEndpoint API.",
  "9990d5843": "CAMEL-14596: camel-core - Optimize RoutingSlip/DynamicRouter when cacheSize = -1 to avoid creating endpoints. Introduced getPrototypeEndpoint API.",
  "1859881d1": "CAMEL-14596: camel-core - Optimize Recipient List when cacheSize = -1 to avoid creating endpoints. Introduced getPrototypeEndpoint API.",
  "0e5dde030": "CAMEL-14596: camel-core - Optimize toD when cacheSize = -1 to avoid creating endpoints. Introduced getPrototypeEndpoint API.",
  "a10c69e6a": "ProcessorDefinition#toD: cacheSize parameter javadoc should reference ProducerCache instead of ConsumerCache",
  "bbdbafe1c": "CAMEL-14586: Fixed EIPs with disable producer cache was not working. Added back EmptyProducerCache from 2.x.",
  "7a00de4da": "[CAMEL-14560] Use a custom xref checker as the antora one is very slow",
  "9faca8bab": "CAMEL-14419: Enrich EIP - Should wrap in UoW. Revert as it was no longer needed was another issue and this can be slightly faster without the uow processor wrapping to call an endpoint.",
  "d1a866d0c": "CAMEL-14534: camel-core - Optimize reactive engine to use Deque instead of LinkedList which is faster and dont cause soo much object allocations.",
  "994a696ff": "Use StringBuilder#append(char[] str, int offset, int len) to improve performance. (#3489)",
  "0b8e71161": "Use String#replace instead of String#replaceAll where possible for improved performance. (#3485)",
  "ff8eaf232": "CAMEL-14354: More optimizations in regards to object allocations",
  "2e54a1202": "CAMEL-14354: More optimizations in regards to object allocations",
  "389559890": "Optimize package scan to only create jar cache on-demand when needed",
  "f6f636296": "Optimize package scan to only create jar cache on-demand when needed",
  "7419ece55": "CAMEL-14347: Optimize ServicePool to avoid Key object and endpoint singleton check can be faster",
  "9bcb94a49": "CAMEL-14342: Add cacheSize option to @RecipientList EIP annotation",
  "fc787fb39": "CAMEL-14340: ServicePool eviction should happen on-demand instead of lrucache background thread.",
  "83ced4a9c": "CAMEL-14340: ServicePool eviction should happen on-demand instead of lrucache background thread.",
  "551b2c5cc": "CAMEL-14340: ServicePool for singleton should not use cache",
  "285097a5b": "CAMEL-14340: Remove statistics from producer/consumer cache as its requires LRUCache and we would like to avoid using it.",
  "a822a2cef": "CAMEL-14154: Create default cacheContainer if no configuration is provided Add tests for embedded chache Mention embedded cacheContainer in doc",
  "a0fa6c795": "Fixed flaky tests on slow CI servers",
  "754ee4df6": "[camel-core tests] fix producer, consumer cache tests on slow VM by adding timeout",
  "c14976f60": "CAMEL-14224: Fix camel-websocket sendToAll to be faster. Thanks to Michael Elbaz for reporting.",
  "451860596": "Fixed flaky test on slow CI servers",
  "05a337279": "CAMEL-13914: Add build phase to service lifecycle in Camel which can be leveraged by camel-quarkus and others where we can prepare for special build-time optimizations. (#3296)",
  "b5228be41": "CAMEL-14078: exception from Message createBody may not be handled by error handler when calling bean or when extracting body in producer or consumer template. Also make reset stream cache more roboust in this regard.",
  "f8a5a441e": "Lets go back to an existing bundle for fastjson 1.2.61_1",
  "f389a8c8c": "chore(mp-config): don't cache Config instance to prevent issues when compiling in native mode with quarkus",
  "ae93bd9e5": "[CAMEL-13921] Fix camel-caffeine-lrucache in OSGi",
  "22fbabd6b": "CAMEL-13907: Lets clear bean introspection cache after bootstrap of Camel as the cache was used during initialization.",
  "8138706e7": "CAMEL-13907: Lets clear bean introspection cache after bootstrap of Camel as the cache was used during initialization.",
  "4b71a46ac": "CAMEL-13907: Lets clear bean introspection cache after bootstrap of Camel as the cache was used during initialization.",
  "aadb3f7d1": "CAMEL-13870: Even faster endpoint and component configurer with switch instead of Map, as suggested by Luca.",
  "3fc6f61d2": "CAMEL-13870: Even faster endpoint and component configurer with switch instead of Map, as suggested by Luca.",
  "5d4d3715e": "CAMEL-13870: Generating fast component options configurer",
  "5c1f5820f": "CAMEL-13870: Generating fast component options configurer",
  "b9e55dd08": "CAMEL-13870: Generating fast component options configurer",
  "291947472": "CAMEL-13870: Fix apt using wrong name. And preparing for generating for fast component options.",
  "fb2412b7e": "CAMEL-13838: Fixed component had wrong syntax and made it configurable for tooling and fast endpoint configurer",
  "f6cf229af": "CAMEL-13850: Source code generate ExchangeConstantProvider so we can do fast lookup of its constant values without reflection",
  "17cfc8e73": "CAMEL-13850: Source code generate ExchangeConstantProvider so we can do fast lookup of its constant values without reflection",
  "f14ba3f1c": "CAMEL-13850: Source code generate ExchangeConstantProvider so we can do fast lookup of its constant values without reflection",
  "f1d33ff95": "CAMEL-7550: camel-jpa producer now has findEntity option to find a single entity using enity manager find which should be faster and more optimized via jpa.",
  "cc48bdcb7": "Camel-Jcache: Fixed CS",
  "f38838f38": "Camel-Ehcache: Use BindToRegistry annotation where possible",
  "fc0e4ab2e": "camel-caffeine-lrucache: wrap default executor to make it AOT friendly",
  "954a9ce9f": "ran ./mvnw -Pfastinstall install",
  "e2df33cff": "Removed unused property fastinfoset-version",
  "03db5482a": "escaped incorrectly render links and ran ./mvnw -Pfastinstall install",
  "b4fd2a1fc": "ran ./mvnw -Pfastinstall install in camel root directory",
  "37f45d639": "link errors fixed, ran ./mvnw -Pfastinstall install in project root dirctory",
  "d327845fa": "link errors fixed, ran ./mvnw -Pfastinstall install in project root dirctory",
  "479ec9861": "link errors fixed, ran ./mvnw -Pfastinstall install in project root dirctory",
  "e7f465f90": "again ran /mvnw -Pfastinstall install after changing the links inside core/camel-core/src/main/docs/eips",
  "43205e80e": "ran ./mvnw -Pfastinstall install inside the project root directory",
  "7d11d5dd9": "CAMEL-13683: camel-main - Allow to turn of fail fast if configuring properties fail",
  "1bd38dce4": "Lets use logback as logger as its more tiny and faster than log4j",
  "2524e7a04": "CAMEL-13583: Camel Injector should have method for creating new instance without bean post processing which is not needed when loading internal Camel factory classes and the likes. This makes Camel startup faster and reduces the overhead of post processing/scanning classes/methods etc.",
  "65e2c9a30": "CAMEL-13555: Producer and consumer template/cache should check if camel is started when being used",
  "5af12b8c7": "CAMEL-13555: Producer and consumer template/cache should check if camel is started when being used",
  "c45fb9ee4": "CAMEL-13555: Producer and consumer template/cache should check if camel is started when being used",
  "ca9ed072f": "[CAMEL-13499] Use Random.nextDouble instead of Math.random for better performance",
  "3c2638f1a": "[CAMEL-13177] Remove faster-builds since the maven bundle plugin has been upgraded",
  "578c9d9ae": "CAMEL-13177 - Lets go back to 4.1.1-SNAPSHOT of maven-bundle-plugin also for fastinstall profile",
  "3487139d3": "Fix performance issues in sending messages to Pulsar",
  "d49dff6dc": "CAMEL-13425: Properties component can now clear its cache, also added JMX attributes/operations.",
  "a9aee005f": "Camel-Ehcache: Polished",
  "98db54340": "[CAMEL-13363] [CAMEL-13364] Add camel-caffeine-lrucache / move camel-headersmap",
  "59069bd49": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "281be27e9": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "1a165f5c3": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "fefd2e1a3": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "e2c0ef48e": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "14b9c0357": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "e8c99e81f": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "67969518c": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "3e0522c05": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "eaaf0e2a1": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "6994d166e": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "df7fe4922": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "8363d9f45": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "a8654deb6": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "f379cde32": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "b1d9a8347": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "bc6f92cce": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "33b37f4dc": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "2ac147d19": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "b0236a7f2": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "5ba3ca5ec": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "cf34843a8": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way",
  "219275023": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way.",
  "63f53628e": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way.",
  "03fee6ba4": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way.",
  "2213fb2b9": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way.",
  "2c461ccf0": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way.",
  "61fdc8aa8": "CAMEL-13313: Add support for generating type converter loader source code to be able to load component type converters in a faster way.",
  "353cfe611": "Camel-Ehcache: Fixed build",
  "782a7513c": "Fixed typo in ehcache blueprint example",
  "a1efeade5": "Upgrade Ehcache to version 3.7.0",
  "7151e087b": "[CAMEL-13177] Build speed: add temporary profile to be able to try faster builds",
  "752913a47": "[CAMEL-13177] Build speed: add temporary profile to be able to try faster builds",
  "2e42a9a4d": "Moved JCache-policy docs into jcache component",
  "aafa63b05": "[CAMEL-13177] Improve build speed - disable feature validation when running the fastinstall profile",
  "add4c18a3": "Fixed CS for Camel-Ehcache",
  "ad7973012": "Fixed CS for camel-jcache",
  "a6892c791": "Fixed CS for camel-ehcache",
  "9bc9ea907": "CAMEL-13053: camel-restdsl-swagger-plugin - Skip running integration tests with -P fastinstall",
  "64958cbe7": "Upgrade Ehcache to version 3.6.3",
  "c1353c44d": "Upgrade Ehcache to version 3.6.2",
  "2213170ed": "Remove `quiet` parameter to display progress when origin is slow",
  "8d549854a": "Upgrade Ehcache to version 3.6.1",
  "556d5bdb4": "Upgrade Ehcache to version 3.6.0",
  "358a5de18": "CAMEL-12610: Added global cache option on bean component.",
  "ab9b2e20a": "CAMEL-12610: Bean component with cache=false will now also lookup beans that implements Processor on each invocation.",
  "7155a1513": "camel-caffeine: improve 'cache' parameter description",
  "d74826170": "caffeine-cache: use caffeine-cache instead of caffeine-loadcache in component doc example",
  "0a88d1366": "[CAMEL-12688] Generate a fallback converter containing all core converters for performances",
  "7af620666": "[CAMEL-12688] Improve introspection performances",
  "0e9830d22": "[CAMEL-12688] Improve Scanner performances",
  "923fdc04e": "Add camel-ehcache blueprint example",
  "3a7f436de": "CAMEL-12610 Fixed the issue of camel bean always invokes cached instance",
  "c60da1cbc": "CAMEL-12536 - Add a little unit test to show operations on the same cache",
  "c12137f10": "CAMEL-12541: In order to make CxfRsProducer cache works properly",
  "aa718e72b": "Upgrade Ehcache to version 2.10.5",
  "d33234745": "CAMEL-12498: Fix failing jcache test",
  "bb48f6817": "Upgrade Ehcache to version 3.5.2",
  "4679b0b4e": "Upgrade Ehcache to version 3.5.1",
  "512949d35": "Remove redundant section about fastinstall profile",
  "68d2a9ae1": "Remove slow test for deprecated compomnent",
  "de59962f7": "Upgrade Javax cache API bundle to version 1.1.0_1",
  "a8271e513": "CAMEL-12112: Added unit test thanks to Bhuvan Gupta for the test. Validate the readLock option is configured with a valid name if in use. Fixed missing default option in the docs. Increased the in-progress cache to 50000 as 1000 was likely to small anyway.",
  "a92a21121": "CAMEL-12124: Allow to configure cacheSize on dynamic router and routing slip EIP annotations",
  "021026be1": "CAMEL-12120: routingSlip and dynamicRouter should use an embedded dynamicProcessor to send to endpoints instead of error handler cache.",
  "5d7dcf2a7": "CAMEL-12103: camel-netty4 consumer should not be suspendable as it should really stop take in new requests when stopping/shutting-down etc, as otherwise it keeps running if new requests comes in faster than it can process. The camel-netty4-http is suspendable by sending back HTTP status 503. Thanks to Yih Tsern for reporting and providing a reproducer.",
  "2e3f79966": "CAMEL-12058: Added check so changing cache size is only possible if using the default lru cache",
  "9c002bf38": "CAMEL-12037 Idempotent repository cache initialization fix.",
  "4703172d1": "camel-mail: make tests run faster be decreasing consumer delays",
  "04160a1d8": "CAMEL-11869: Removed the unused dependency to mockito from camel-jcache",
  "1a3850b0f": "CAMEL-11869: Removed the unused dependency to mockito from camel-ehcache",
  "43d021b53": "Fixed test on slow CI box",
  "1125ab0ca": "Fix for slow CI boxes",
  "8d771bc21": "Fixed WARN from spring-boot: @Bean method HttpComponentSSLAutoConfiguration.cacheAutoConfigurationValidatorPostProcessor is non-static and returns an object assignable to Spring's BeanFactoryPostProcessor interface.",
  "b5b947f33": "Removing non-existing codehaus jackson-core and fixing com.fasterxml.jackson",
  "9c8a131f8": "Upgrade Ehcache to version 3.4.0",
  "6d290b443": "CAMEL-11750: SubmitOrderedCompletionService should avoid eating CPU cycles if a task is not ready and the returned delay value would be too fast, eg 1 nano which essentially would do a while loop with cpu active all the time.",
  "51770d715": "Use the Fastjson bundle for the camel-fastjson Karaf feature",
  "ab0f8eb49": "CAMEL-11321: Start Camel faster by letting LRUCache warmup concurrently as that takes up 150 millis or more.",
  "95051f102": "CAMEL-11321: Start Camel faster by letting LRUCache warmup concurrently as that takes up 150 millis or more.",
  "847241f02": "CAMEL-11321: Start Camel faster by letting LRUCache warmup concurrently as that takes up 150 millis or more.",
  "f8e68bac6": "CAMEL-11321: Start Camel faster by letting LRUCache warmup concurrently as that takes up 150 millis or more.",
  "b515840bd": "Optimise - Do faster check for boolean type",
  "1c86ed716": "CAMEL-11484: Optimise - Simple Language / ExpressionBuilder can use cache of frequent used expressions when having nested functions",
  "52cede016": "CAMEL-11484: Optimise - Simple Language / ExpressionBuilder can use cache of frequent used expressions when having nested functions",
  "b8f7e4276": "CAMEL-11484: Optimise - Simple Language / ExpressionBuilder can use cache of frequent used expressions when having nested functions",
  "14265e437": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "e621beba5": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "c49954b3f": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "cfd4e02db": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "02b8bca7c": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "9c094e4dc": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "57449b7a0": "CAMEL-11448: Optimise - Detect interrupted exception in a quicker way which optimises the routing engine to be faster.",
  "2dcad657c": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "ba7eee50f": "Optimise - Is a tiny faster as the extra add is not needed as we dont use the returned value.",
  "1e1bae957": "CAMEL-11448: Optimise - Detect interrupted exception in a quicker way which optimises the routing engine to be faster.",
  "59e42d703": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "aeb71af0c": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "4a72341eb": "CAMEL-11379: Optimise - core type converters to be invoked faster",
  "89339ede1": "CAMEL-11338: New DefaultUuidGenerator to startup Camel faster",
  "cce160b48": "Regen and CAMEL-11389 add karaf feature for camel-fastjson",
  "690b46f49": "add json dataformat for fastjson library",
  "7c1a06ac6": "CAMEL-11348 - small optimization & cs fix in MethodInfo",
  "f824fb0bf": "Optimise to use getParameterCount to get the size as that is faster. getParameterTypes returns a cloned array.",
  "e81258c63": "CAMEL-10988: Add camel-headersmap with a faster case insenstive map implementation users can use by adding to classpath.",
  "1ac957916": "CAMEL-10988: Add camel-headersmap with a faster case insenstive map implementation users can use by adding to classpath.",
  "cbbebf771": "CAMEL-10988: Add camel-headersmap with a faster case insenstive map implementation users can use by adding to classpath.",
  "bbaa6ea93": "Small optimization about UoW to compute isExternalRedeliveried only once as JMX performance statis will otherwise repeativly calculate this on each complete.",
  "b16a262a9": "Small optimization on exchange to avoid looking up unnessasary type conversion and setting a null value on the property",
  "88ca1fb6a": "CAMEL-11340: Optimize JMX performance statistics to not use synchronized block but use atomic counter/values from JDK. This avoid thread contention when having many concurrent threads on the same routes competing to update the JMX counters.",
  "6c73ae86f": "CAMEL-11321: Load core fallback type converters a bit faster",
  "a2324c38a": "Make spring rest tests faster",
  "a87544acf": "Make camel-spring test faster and disable JMX for non-JMX tests",
  "f30040249": "CAMEL-11318: camel-ehcache: allow to configure named caches programmatically",
  "26cbd1839": "CAMEL-11266: The ehcache component creates a separate CacheManager per producer route",
  "261e04d63": "CAMEL-11302: camel-infinispan-starter : enable cache manager auto discovery",
  "24d9de042": "CAMEL-11297: camel-ehcache-starter : auto discovery cache manager.",
  "1a2fdfd02": "CAMEL-11297: camel-ehcache-starter : auto discovery cache manager",
  "4332c7e65": "Fix ehcache starter build",
  "1b164db2f": "camel-ehcache: improve cache manager",
  "8170cbaef": "camel-ehcache: add an option to programmatically provide a CacheManager configuration object",
  "5be15dc14": "CAMEL-11284: camel-ehcache: allow to configure some options like a global cache manager on component level",
  "7c9a7bd98": "CAMEL-11208: Use 30s as default poll for twitter consumer so they are a bit faster. Rate limit problems is around 15-20s so use 30s should be safe.",
  "67ab9a972": "CAMEL-11139: Catch throwable in other places and also in the consumer cache",
  "ee1478730": "CAMEL-11138: ConsumerTemplate - If cache is full then polling consumer should be stopped to not leak resources",
  "49f2bb517": "CAMEL-11108: camel-infinispan : change the uri syntax from infinispan:hostName to infinispan:cacheName",
  "0cb6d291a": "Upgrade Ehcache to version 3.3.1",
  "29ef57ed7": "CAMEL-10925: fixing camel-ehcache test",
  "294c169f6": "CAMEL-11018: camel-ehcache: make it easy to create temporary caches",
  "cfe30492d": "Upgrade Ehcache to version 3.3.0",
  "f1e503dc4": "Added documentation around local cache updates before broadcast - functionality added with change of the pollDuration to 100ms default, and its externalization.",
  "c71ec6129": "Fixed checkstyle errors. Added ability to set max cache size for the idempotent repository.",
  "ab6f0335d": "CAMEL-10897: camel-jcache - Allow to configure cache provider on component",
  "0d3f461f6": "CAMEL-10838: camel-cache - Create a better body replacer processor",
  "bdf4aaa6b": "CAMEL-10838: camel-cache - Create a better body replacer processor",
  "f05f319a2": "CAMEL-10732 Remove from all caches when Groovy ...",
  "34d92293b": "camel-ehcache: add some example to configure ehcache via xml",
  "b3d2a2ae5": "CAMEL-10598: Upgrade ehcache to 3.2.0",
  "c6c0c0e67": "CAMEL-10515: Make tests more reliable on very fast computers.",
  "ca0f405da": "CAMEL-10536: Ignore tests so fastinall and other profiles can work. Also so CI can do a SNAPSHOT T deploy",
  "0bb63d5ba": "ehcache component doc update",
  "33615d381": "CAMEL-10406: vm endpoint should prepare exchange with the CamelContext from the consumer and not from cached endpoint which can be different. Thanks to Xavier Fournet for the unit test.",
  "823267421": "Upgrade Ehcache to version 3.1.3",
  "640628972": "Upgrade Ehcache to version 3.1.2",
  "0be929fe8": "Component docs. Allow to make build fail fast so we can easier see which components have adoc problems.",
  "c0f8cc33d": "CAMEL-10261: Mark camel-cache as deprecated",
  "b7b342274": "CAMEL-10257: camel-cache - Test failures",
  "3dc47cc6c": "CAMEL-10234: Improve OSGi camel-jcache support",
  "e3c9f1b01": "CAMEL-10234: Improve OSGi camel-jcache support",
  "6cb8276b6": "In camel-jcache filteredEvents and eventsFilter are exclusive. Added the URIParam annotation to JCacheConfiguration.",
  "e9313b83a": "CAMEL-10185: readLock=change and fastExistsCheck=true issue.",
  "fccc083d1": "Added required metadata to cachingProvider into camel-jcache",
  "c850a5e7f": "CAMEL-10221: Camel-Jcache: writeThrough option is never used",
  "de771b455": "Upgrade Ehcache to version 3.1.1",
  "25e9ca642": "CAMEL-9631: do not cache OSGi service instances",
  "ebdb28761": "Upgrade Ehcache to version 3.1.0",
  "18198a38d": "Added camel-ehcache docs to Gitbook",
  "5b7a9d361": "CAMEL-10096: Camel tracer with stream caching should tracer after stream cache has been setup.",
  "d76c0709b": "Replacing deprecated HBase APIs. Tests seem to run faster as a result",
  "7c4dd0b4f": "CAMEL-10050: Routing slip no longer caches error handlers.",
  "8d81593ad": "CAMEL-10043: Camel-Jaxb: objectFactory is never checked. This leads to performance degradation. Default ObjectFactory values set to false on DataFormat too.",
  "014520ca1": "CAMEL-10043: Camel-Jaxb: objectFactory is never checked. This leads to performance degradation.",
  "e6b2f435a": "Upgrade Ehcache to version 3.0.2",
  "a6f040636": "CAMEL-9979: Bean parameter binding should reset stream cache before evaluate message body",
  "a9c129695": "CAMEL-9884 : add an option to set the key/value type for a cache (default Object)",
  "20ff9af84": "CAMEL-9958 : add management annotations to ehcache idempotent repository",
  "ccfa6c527": "CAMEL-9959 : Create an ehcache based aggregation repository",
  "2bedc52ea": "CAMEL-9958 : Create an ehcache based idempotent repository",
  "9a473f398": "CAMEL-9884 : Create a camel-ehcache component",
  "d1e7586a2": "Added Jcache to gitbook index",
  "1d828c9a9": "CAMEL-9907: Camel-Infinispan: Exposing cache stats through producer - Docs updated",
  "9cacca2e0": "CAMEL-9907: Camel-Infinispan: Exposing cache stats through producer",
  "d72b9af01": "CAMEL-9768: Close the stream either now or later depending on that disable stream cache option. This closes #932.",
  "41805bb84": "CAMEL-9816: StreamCache - The cache method should support OUT as well",
  "ef4cc80b8": "CAMEL-9681 - Add an option to enable/disable cache creation",
  "e15603a97": "[CAMEL-9636] Fail fast in case of empty cm:property-placeholder + test",
  "4125e5891": "Added camel-cache docs to gitbook",
  "fe4f4a83c": "Allow to use CamelCatalog in cache mode",
  "1741937b7": "Allow to use CamelCatalog in cache mode",
  "200c1fb25": "Allow to use CamelCatalog in cache mode",
  "2ccd02f11": "Allow to use existing elasticsearch client. Speedup unit test to run much much faster as embedded reused ES node.",
  "1f9db4036": "upgrade ehcache 2.10.0 to 2.10.1",
  "7eef37262": "CAMEL-9056: Aggregator - Allow to clear closed correlation key cache",
  "65f9a3ab3": "CAMEL-8643: Do not eager check for content available using the input stream available in case http client is in streaming mode and is slow at sending data.",
  "7790c6e0f": "CAMEL-8643: Do not eager check for content available using the input stream available in case http client is in streaming mode and is slow at sending data.",
  "ae91e61ec": "CAMEL-8766 camel-cache - CacheConfiguration - parseURI not needed",
  "f1c5b5472": "CAMEL-8688: Stream cache now keeps track on number of copies that was spooled to disk, so when the temp file is deleted its only deleted when no longer in use. A file can be shared if using wire tap etc. Thanks to Franz Forsthofer for the patch.",
  "0fa7d6935": "CAMEL-8688: Stream cache now keeps track on number of copies that was spooled to disk, so when the temp file is deleted its only deleted when no longer in use. A file can be shared if using wire tap etc. Thanks to Franz Forsthofer for the patch.",
  "a99f6d571": "CAMEL-8688: Stream cache now keeps track on number of copies that was spooled to disk, so when the temp file is deleted its only deleted when no longer in use. A file can be shared if using wire tap etc. Thanks to Franz Forsthofer for the patch.",
  "3b3a6e6e6": "Merge branch 'update-ehcache-version' of https://github.com/oscerd/camel",
  "0fdf95817": "Resolve CAMEL-8651 Update Ehcache from version 2.9.1 to 2.10.0",
  "9b380b85b": "CAMEL-8586: File component optimization required for file response body. Thanks to Sergey Zolotaryov for the patch.",
  "161ee7ed0": "CAMEL-5398: Optimize String.replaceAll with helper method which is faster as not using regexp.",
  "e83d342f6": "CAMEL-8544 Dynamic router - unsupported cacheSize attribute",
  "897c4167a": "CAMEL-8513: Add option to use a larger buffer size so download is faster",
  "e0cfbea34": "Fix test on slower boxes such as windows",
  "f97d7b095": "Fix test on slower boxes such as windows",
  "4dad36f3f": "Fixed test on slower boxes such as windows",
  "7d7bcb9dc": "The recent removal of the inherited jetty dependencies from the parent pom has broken the build with the 'performance.test' profile enabled.",
  "4661cbb94": "CAMEL-8386: WireTap should copy the body if the body is a stream cache.",
  "6168724ce": "CAMEL-6698: Component camel-cache to support non-serializable objects",
  "5ae518b7d": "CAMEL-8262: Optimize CaseInsensitiveMap to use TreeMap instead of custom HashMap with 2x maps. This reduces memory overhead and lower casing all keys costs cpu time. As the number of entries in the map is low then the TreeMap structure should be fast enough",
  "e05810244": "CAMEL-8252: Add inflight exchanges to jmx performance counters as that is similar to the other stats, instead of having to filter all inflights to find per processor.",
  "0368fcb1c": "CAMEL-8157 Fixed NPE error of camel-example-servlet-tomcat with the streamcache enabled.",
  "3fef41ebc": "CAMEL-8144: Allow camel-restlet to use synchronous restlet client handler to avoid potential performance drop issue",
  "e4331eefa": "CAMEL-7784: camel-rss should match feeds on same timestamp but having mutliple feeds. Using a lru cache to keep max 1000 entries for duplicate detection to avoid the map to grow forever under certain conditions. Thanks to Andy Flatt for the patch.",
  "5ef3ce57e": "More fine-grained exception handling in configure(), disable JMX for test, skip archetype integration test when fastinstall",
  "56f8b993b": "Upgraded ehcache",
  "d10985069": "Full build with fastinstall works with JDK8 (camel-jibx issue with tests)",
  "16f489080": "Added osgi test and performance test profiles into release plugin",
  "d2defc15e": "CAMEL-7452: Made bean component cache by default, and fixed setting cache=false will create a new instance of the bean on-demand. As before we really always created a singleton bean instance.",
  "64be7d208": "CAMEL-7576: Turn of online update checker for ehcache",
  "05ca8addd": "CAMEL-7633: camel-restlet upgraded. Support async producer again. And added stream cache as the other http component does.",
  "7f43263d8": "CAMEL-7598: JPA consumer should clear entity manager after flush to avoid any jpa provider to keep previous polled entities in any kind of cache that just eats up memory. Thanks to Daniel Seidewitz for the patch.",
  "685d5ea6e": "CAMEL-7633: camel-restlet upgraded. Support async producer again. And added stream cache as the other http component does.",
  "35236a10c": "CAMEL-7351: camel-cache - Should create default cache manager factory if no specific config file configured",
  "7f05a94e3": "CAMEL-7393: Recipient list and routing slip eip allows to set cache size for producer cache. So you can control this, or turn it off.",
  "da08bda04": "Fixed test on slower CI boxes",
  "a97dbc250": "Fixed test on slower CI box",
  "bf0147af9": "Fixed test on slower CI boxes",
  "219278373": "[Karaf-itest] Added camel-ahc dependency to the POM in order to ensure that tested dependency is cached in the local repo.",
  "9beec7470": "CAMEL-7191: Disable load performance statistics by default. Thanks to Preben Asumussen for the patch.",
  "62bce5144": "CAMEL-7191: Disable load performance statistics by default. Thanks to Preben Asumussen for the patch.",
  "5e302fddc": "Upgrade to Ehcache 2.8.1",
  "103612428": "CAMEL-7203: Introdued allowUseOriginalMessage option which can be turned off to improve performance when you dont need access to the original message. Likely more often, so added INFO logging on startup to notice users about this.",
  "1366827d9": "CAMEL-7195 logging the Ehcache config used",
  "80402cbf3": "CAMEL-7195 Removing default ehcache.xml configuration",
  "1bfb73d27": "CAMEL-5940: Allow to configure ehcache xml file on cache component.",
  "45f38325c": "jar cache should clear when package scan resolver is stopped.",
  "c87bc8c4c": "camel-salesforce should clear internal cached class map when stopping.",
  "d75d588f1": "camel-salesforce should clear internal cached class map when stopping.",
  "526dbcce5": "upgrade ehcache 2.7.4 to 2.8.0",
  "a2f600851": "CAMEL-7087: Reset stream cache after processing in case route is short. Thanks to Stephan Siano for the patch.",
  "24fd3b64d": "CAMEL-7065 Disable generate manul build by using profile fastinstall",
  "3c3f4f03d": "CAMEL-6934 enabling dns addresses to not get cached",
  "7fd76f0fd": "CAMEL-6995: Language component should not cache script by default as it can cause side-effects when evaluating next messages. End users can turn this option on to have previous behaivor if their scripts is safe to do so.",
  "515a61217": "CAMEL-6870: Fixed leak in camel-script when using language component with content cache = false.",
  "483f35c4d": "upgrade net.sf.ehcache:ehcache 2.7.2 to 2.7.4",
  "37b9e5481": "Fixed test on slower boxes",
  "c3078ad79": "CAMEL-6725: Added cache option to beanRef / <bean> in the DSL",
  "772930720": "Try to fixed the unit test errors of CI slower box",
  "48c7fc8ec": "CAMEL-6680: Simple langage should be singleton to improve performance on reuse/loop where its used such as bean OGNL expressions.",
  "5a986c507": "No need to log if JMX load performance stats is enabled at INFO level when starting Camel.",
  "4f73ebf7d": "set skipAssembly for fastinstall",
  "687edfcdc": "CAMEL-6573: adjust to the changed behavior in ehcache's CacheManager instance creation",
  "8feaa4e78": "Removed ehcache jms replication test due ehcache upgrade no longer providing jms out of the box in main module.",
  "4eb2095dc": "CAMEL-6527: Upgrade net.sf.ehcache:ehcache to 2.7.2",
  "c83e23c0c": "CAMEL-6485 performance improvement in DefaultCamelContext with thanks to Eric",
  "68af5745b": "CAMEL-6419: Added stats action to controlbus component to get performance stats easily.",
  "8b84f6863": "CAMEL-6419: Added stats action to controlbus component to get performance stats easily.",
  "9016ac6a2": "Resolved the deprecated API usage after upgrade to Ehcache 2.7.0.",
  "8c57bd4d2": "Upgrade to Ehcache 2.7.0 which is already an OSGi bundle out-of-the-box (no need for a SMX bundle anymore).",
  "accd3b54e": "CAMEL-6405: Added option purgeWhenStopping to seda/vm component so you can decide not to process remaining in memory exchanges if stopping, so you can stop fast.",
  "f4505b83f": "upgrade ehcache bundle from 2.5.2_1 to 2.6.5_1",
  "f2811fdfc": "CAMEL-6340: Added cache for compiled groovy scripts to speedy performance. Thanks to Antoine DESSAIGNE for the patch.",
  "6acf7c71e": "CAMEL-6264: Disabled and @deprecated utilization stats on type converter registry to avoid performance degration on very high concurrent usages.",
  "9b0a38499": "CAMEL-6268: camel-stream - Shutdown thread pool on consumer should happen faster",
  "cd08f9e2d": "CAMEL-6239: Added delta attribute to jmx performance stats, to show the +/- from last processing time value.",
  "d222fc981": "fixed unit tests which fails from time to time on slow CI servers",
  "0c8288b9f": "Fixed test on slower boxes",
  "0375923c8": "speed up a test which fails some time on slow CI servers",
  "435805f61": "fixed unit test which fails from time to time on slow boxes",
  "d19ecae8c": "CAMEL-6189: Fixed camel-cache cache check. Thanks to Henrik Flintenborg Sorensen for the patch.",
  "f5fb2334a": "Allow xmljson strees test to run longer on slow CI servers",
  "0604fe463": "Fixed cache test in osgi",
  "8bb97d092": "Reverting back to ehcache 2.5 in camel-cache due SMX4-1395",
  "bdf5686ba": "CAMEL-6043: Bean language/expression with OGNL now uses BeanInfo cache to speedup evaluations at runtime using the same class types (cache hit). Let the cache be controlled by the bean component and ensure its lifecycle is controlled by the component.",
  "07b0ee7f6": "CAMEL-6085 provides the cache-control header setting in camel-restlet",
  "14669b432": "CAMEL-6043 Added a cache for the BeanInfo",
  "9794900b8": "CAMEL-5443: run performance tests only with profile enabled",
  "7d7685d88": "CAMEL-5918: Add performance tests - work in progress",
  "aadc78cbd": "CAMEL-5918: Add performance tests - work in progress",
  "cf788132a": "CAMEL-5918: Add performance tests - work in progress",
  "8ff465bd1": "Fixed the broken unit-tests after the upgrade to ehcache 2.6.2.",
  "78dc97190": "CAMEL-5918: Add performance tests - work in progress",
  "698331b9a": "CAMEL-5824 HBase data access performance improvement, with thanks to Sotaro",
  "e2f5e2dde": "Fixed camel-cache tests to use a test ehcache configuration which do not do multicast and networking. As otherwise this mail fail tests for strange reasons if networking cannot be setup, during testing.",
  "cd7e54d46": "CAMEL-5678: It should be possible to clear the cached script in LanguageEndpoint via JMX",
  "cbf3b11cc": "Fixed test on slow CI servers",
  "eaff2fef9": "Fixed test on slow CI servers",
  "46ebaab8b": "CAMEL-5750: Fixed test on slow CI servers",
  "581465ca7": "Polished and fixed test on slow CI server.",
  "248671eb4": "CAMEL-5747 clean up the cachedMap when restart the properties component with thanks to Daniel",
  "efa0f6fa1": "Fixed test to shutdown faster.",
  "e6b21f3fa": "fixed a unit test which cause timing issues on slow CI server",
  "ce804fa7f": "fixed a unit test which cause timing issues on slow CI server",
  "0c3c7d1b3": "CAMEL-5683: ProducerCache/ConsumerCache should use regular LRUCache to ensure prouducer/consumer is always stopped when evicted/stopping cache itself. As a soft cache may GC the entries without stopping any may cause internal resources running, which should have been stopped otherwise.",
  "7ca4e7531": "CAMEL-5683: SendProcessor should not use a soft cache as we want the producer to be kept around, as we only store a single producer. This prevents the producer to be GC when running low on memory, that can cause Camel JMS component using temporary queues with request/reply to create new producer, and not re-use existing. Causing a leak for message listeners over time.",
  "fdbb37080": "CAMEL-5675: Flush java bean introspector cache when stopping Camel. And property editor is not thread safe.",
  "b42e22dd4": "CAMEL-5675: Flush java bean introspector cache when stopping Camel. And property editor is not thread safe.",
  "1df1cb7c9": "CAMEL-5675: Using a LRUWeakCache instead of soft to reclaim the cache eager as we dont want to keep the cache around, and cause classloader unload issues as we store references to Class and Method in the cache.",
  "410d12bcf": "CAMEL-5675: No need for String intern optimization. Now its faster without.",
  "7813a832a": "CAMEL-5675: No need for String intern optimization. Now its faster without.",
  "fe47175b2": "CAMEL-5675: Improved startup performance. Especially when JMX enabled. Introspection and JMX mbean assembling uses a internal class introspection cache to speedup.",
  "f9d96eee6": "Updated batch transaction tests to allow for a slower environment",
  "f2e1e28fe": "Some optimizations for writing the stream caches out to another stream to avoid some buffer copies",
  "a83833b04": "Use CXF's IOUtils instead of Camels as CXF's will have some CXF specific optimizations for this use case.",
  "33a581dc9": "fixed test which randomly fail on slow CI server",
  "ea7ba1862": "fixed test which randomly fail on slow CI server",
  "7bd72a38d": "fixed test which randomly fail on slow CI server",
  "53694f29a": "fixed test which randomly fail on slow CI server",
  "77e476c10": "fixed test which randomly fail on slow CI server",
  "e601b3f0d": "fixed test which randomly fail on slow CI server",
  "31d6ff72c": "fixed test which randomly fail on slow CI server",
  "f48ccdd51": "fixed test which randomly fail on slow CI server",
  "1146d6641": "small code enhancement for a test which fails randomly on slow CI server",
  "9cc8a299c": "fixed test which randomly fail on slow CI server",
  "f994c21a0": "CAMEL-5436: Convert cache keys to String to allow other types as well. Thanks to Michal Svab for the patch.",
  "52a7f3c31": "fixed test which randomly fail on slow CI server",
  "75ae00364": "fixed test which randomly fail on slow CI server",
  "8d84fe528": "CAMEL-5480: Quickfix engines is deferred to be started after CamelContext has been fully started. To avoid any side effects with engines firing too fast.",
  "3fd19d8f7": "CAMEL-5480: Quickfix engines is deferred to be started after CamelContext has been fully started. To avoid any side effects with engines firing too fast.",
  "30d773992": "CAMEL-5396: Added replaceAll method to StringHelper to have faster camel-jms key format strategy, avoiding to use regexp patterns for these simple replacements, which is faster with a StringBuilder logic.",
  "d453d2d4a": "CAMEL-5396: Improved performance of jms key format strategy. Thanks to Henryk Konsek for the patch.",
  "7f6f31541": "CAMEL-5480: Quickfix engines is deferred to be started after CamelContext has been fully started. To avoid any side effects with engines firing too fast.",
  "658dc6f91": "CAMEL-5507: Improved blueprint test on windows by having test-bundle directory for the test bundle that is created for testing that isnt deletable out of the box when the test terminates. This avoids a 5 sec delete attempt that otherwise would fail on windows, making test slower.",
  "f115331bf": "Fix the test failing occasionally on the slow CI-server.",
  "435a502f9": "CAMEL-5512: Made the readLock=changed faster for ftp component if you enable the fastExistsCheck=true option as well. Notice that not all FTP servers support this.",
  "540ce5414": "CAMEL-5501: Optimized XPathBuilder to cleanup thread locals after evaluation. Optimized performance under load by only using 1 thread local. Ensures better GC as well when using @XPath annotation.",
  "38effb139": "Update to latest woodstox that fixes a performance regression",
  "ab3d71168": "CAMEL-5443. Added a simple test to benchmark performance",
  "fe3d9a2a4": "Some optimizations and fixes around getting the name from stax based payloads",
  "f04e0968c": "[CAMEL-5450] Add support to xslt component to cache the transformers (off by default, but likely could/should be on and set to something like 5 or 10)",
  "f238db919": "CAMEL-5444: Log a WARN if shared reply queues are in use as they are slow, to make this stand out to the Camel end users, so they know about this and can reconfigured for a better solution if that is possible for their use-case.",
  "a6feb0f70": "CAMEL-5443. Create placeholder project for performance tests",
  "2c7acb730": "CAMEL-5226: Added headers to set ttl,eternal etc. when adding/updating to cache. Thanks to Mark Ford for the patch.",
  "7a7a85d51": "CAMEL-5226: Added headers to set ttl,eternal etc. when adding/updating to cache. Thanks to Mark Ford for the patch.",
  "1316acef5": "upgrade to ehcache bundle version 2.5.2_1",
  "a894e1347": "[CAMEL-5310] Added some optimizations around choice log statements.",
  "57f64a285": "CAMEL-5101: CamelContext MBean now has aggregated performance stats from the routes.",
  "ed67a827c": "Fixed test on a slower box",
  "4f736f756": "Fixed test on a slower box",
  "94269e573": "Use faster version of compiler plugin",
  "653bd5012": "CAMEL-5174: Do not use java beans property editor for type converter. CAMEL-5208: Optimize type conversion with primitives to be faster.",
  "da5e1827c": "CAMEL-5172: Fixed and improved TypeConverter to fail faster by throwing TypeConversionException to the caller. Use the new tryConvertTo API for the old behavior. This would also be more in line what people would expect that exceptions to be propated back as is to the caller.",
  "e7f5b1109": "CAMEL-5172: Fixed and improved TypeConverter to fail faster by throwing TypeConversionException to the caller. Use the new tryConvertTo API for the old behavior. This would also be more in line what people would expect that exceptions to be propated back as is to the caller.",
  "73692f39f": "CAMEL-4853: Prefer to use cached thread pools as Mina documentation suggest. Ensure thread pools is also shutdown.",
  "caf944a03": "CAMEL-5144: Upgrade to ehcache 2.5.1",
  "031747952": "CAMEL-5091: Do not enlist producer cache in JMX for EIPs, its internal details only. And will just clutter up the JMX tree if having many routes.",
  "4c1864586": "CAMEL-5092: Make use of the Couchbase Repo for spymemcached dependency. Also upgrade the used version to 2.8.0. Thanks to Chris Geer for providing the patch.",
  "88cf9fe42": "CAMEL-4300: You can now configure a default key/operation in cache endpoints. Thanks to Piotr Klimczak for the patch.",
  "d24d566d5": "Fixed test on slower boxes",
  "aa643e23c": "CAMEL-5068: Allow to configure cache option on propertiesPlaceholder in XML DSL.",
  "69052d5cc": "CAMEL-4946: Added JMX methods to dump performance stats in one JMX call and output detail in XML format.",
  "d842912d7": "Fixed test on slow servers",
  "086fe15df": "CAMEL-4842: Removing route should remove producer cache from JMX, as well from services to close list on CamelContext, to not eat up memory. Also shutdown route scoped error handlers to not leak memory, when removing a route.",
  "8a50bae12": "CAMEL-4839 Added replyToCacheLevelName option to specify the cache level on JMS reply to queue",
  "537594cd8": "CAMEL-4842: Removing route should remove producer cache from JMX, as well from services to close list on CamelContext, to not eat up memory.",
  "3b8997b29": "CAMEL-4842: Removing route should remove producer cache from JMX, as well from services to close list on CamelContext, to not eat up memory.",
  "acf61b913": "Fixed test on slow servers",
  "fd18ad2e4": "CAMEL-4669: Added JMX opertions to clear content cache on ResourceEndpoint. Thanks to Rich Newcomb for the patch.",
  "e4ff4dda9": "CAMEL-4742: TokenizePair as predicate must close input stream. Fixed some tests on slower boxes / Windows.",
  "2ea7358b3": "CAMEL-4732 updated the cached time value of the test",
  "2bda942b1": "CAMEL-4732 Allow camel-freemarker template cache duration to be specified",
  "7bc40c5e0": "CAMEL-4689 - Add back fail-fast behavior of camel-xslt. Keep new behavior of checking for XSLT via header.",
  "ff7169ceb": "CAMEL-4686: Using buffered input stream for file input stream cache. Thanks to Metatech for the patch.",
  "6c1fae685": "CAMEL-4528: Added JMX operation to clear XSLT stylesheet cache for xslt endpoint. Thanks to Rich Newcomb for the patch.",
  "4ca327106": "CAMEL-4656: Optimized request/reply over JMS with fixed reply queues. We can cache consumer for exclusive and when using a fixed reply to selector value.",
  "d31000339": "CAMEL-4634: Upgrade org.apache.servicemix.bundles:org.apache.servicemix.bundles.ehcache 2.3.0_3 -> 2.4.3_1",
  "4a451c14f": "CAMEL-4627: Language component can now load scripts from classpath or file system. And it has content cache.",
  "1a111c11e": "CAMEL-4627: Language component can now load scripts from classpath or file system. And it has content cache.",
  "9731b0158": "[CAMEL-4548] Change from using DOM elements to Source objects for the internal representation for camel-cxf. For straight 'proxy' use cases (from('cxf:...').to('cxf:...)) is allows pure streaming and performance improves by over 50% for medium sized (~50K) messages and allows passing of massive messages that would previously cause OOM issues.",
  "65decee64": "CAMEL-4476: Evaluation of simple expression is faster.",
  "e95f7198e": "CAMEL-4392. Clear cache maps when stopping Camel to avoid leaks",
  "80a09c215": "reset the cache when the CxfRsProducer is started",
  "ee9e1e01f": "CAMEL-4356 changed the option name to fastExistsCheck",
  "37c50cbb1": "CAMEL-4356 add an option fastExist to test the file exist in the FTP server",
  "3246cc588": "CAMEL-4356 faster way of testing for file existence",
  "687fa20ad": "CAMEL-4355 Should use LRUSoftCache and start/stop the cache according to the producers lifecycle",
  "b04d47ad6": "CAMEL-4353: Improved error message if using transacted in the DSL and TX manager could not be found. Now we fail fast with detailed exception.",
  "24d805b9c": "CAMEL-4202: Added ReplyToType option. Added new Exclusive replyToType to support per producer exclusive persistent reply queues for request/reply over JMS. This allows to run faster than the Shared option.",
  "81a23134a": "junit4 update and compiler warning fixes for camel-cache, camel-context, and camel-cometd",
  "c14ae0642": "[CAMEL-4095] More dynamic ports and contexts Enough is now working that we can switch to forkMode=once making the test MUCH MUCH faster.",
  "d3cf380aa": "CAMEL-4261: Fixed properties component may contain duplicates in its location cache.",
  "a1d20148f": "Introducing property noassembly that will decide if the assembly will be part of the build. -Pfastinstall also sets this property. This allows to run the fulltest jenkins build without the assembly",
  "85ef9382c": "CAMEL-4009: Using JAR cache in package scan resolver to be faster when re-scanning JARs from the cache.",
  "c8b6dfc5a": "CAMEL-4009: Using jar cache for loading type converters, which speedup when using uber JARs. Thanks to Arkadi for patch. I polished his patch a bit.",
  "f7dcb8df9": "CAMEL-4019: Using null cache from freemarker instead of custom from camel-freemarker. Thanks to Fernando for patch.",
  "91de6dafd": "CAMEL-3960: camel-test with junit4 now supports per class setup/shutdown of CamelContext. This allows to re-use the context when having multiple test methods for faster unit testing.",
  "8639c368e": "CAMEL-3032: Do not use test-jar. Make camel-jms unit testing go faster. Remove camel-blueprint-tests.jar and camel-spring-tests.jar from being installed in maven repos",
  "f7e8d02fd": "Fixed tests and made them a bit faster.",
  "aa12f4d01": "No need for that TODO as loading resources on classpath is fast if you go the FQN for it as the FactoryFinder does.",
  "e1ee85d43": "Fixed test being faster",
  "ecbedb1c4": "Increased memory due CI servers have high mem for testing. So we need to simulate with bigger cache loads to trigger jvm to GC.",
  "5cf6ff43e": "CAMEL-3880 JMS cache replication OSGi unit test",
  "9c53d5fc6": "CAMEL-3867 Added OSGi integration tests for the camel-cache",
  "e33d50fea": "CAMEL-3867 improve ehcache configuration by reference RegisteredEventListeners and CacheLoaders",
  "90fcaa321": "CAMEL-3939 updated the servicemix ehcache bundle version",
  "dff07983b": "CAMEL-3926: Added cache stats to LRUCache and exposed those for JMX as well.",
  "67f647110": "CAMEL-3922: Added LRUSoftCache for soft reference cache. This is more ideal cache for the JVM so it can GC values in case its low on memory.",
  "28b2f8825": "CAMEL-3905: Polished error message in camel-cache. Thanks to Piotr for the patch.",
  "ddb7e5e6e": "CAMEL-3852: camel-cache uses Camel style header keys. Also the control keys are removed after usage to not keep propagating them during routing. Thanks to Ben O'Day for the patch.",
  "173bcc0f8": "CAMEL-3875: Added osgi test for camel-cache with custom cache manager. Thanks to Piotr for the patch.",
  "55fb8b300": "CAMEL-3862: Fixed camel-cache to replicate cache across nodes using listeners. Thanks to Piotr for the patch.",
  "3e4853d6a": "CAMEL-3864: ehcache.xml updated to include latest options. Thanks to Piotr for the patch.",
  "c41143a38": "CAMEL-3849: Added camel-cache osgi unit test.",
  "d1d42c7bd": "CAMEL-3849: Fixed camel-cache to load ehcache.xml in OSGi. Thanks to Piotr Klimczak for the patch.",
  "9ca1a238e": "CAMEL-3828: camel-jms uses CACHE_AUTO as default cache level. This ensure transacted has CACHE_NONE which is required to ensure session is not shared between transactions. Added connection pooling for TX examples as its needed then when using embedded broker for unit testing.",
  "de9399f36": "CAMEL-3847: Adding new type converter should remove it from misses cache.",
  "3e1a5d75c": "CAMEL-3835: Fixed camel-cache OSGi metadata. Thanks to Freeman for the patch.",
  "6eb4e2e42": "CAMEL-3831: Added JMX purge operations to various pools and caches. Fixed some TRACE guard loggings.",
  "e854cc00d": "CAMEL-3827: Added support for setting endpoint cache size on CamelContext.",
  "795da2e8d": "CAMEL-3807: Use system current time millis for calculating time diff as adviced by java performance expert.",
  "8825e6bb0": "CAMEL-3371: camel-cache only mandates a message body for add/update operation. Thanks to Ulrich for patch.",
  "d91c983cb": "CAMEL-3647: Fix the Sonar Blocker: Performance - Maps and sets of URLs can be performance hogs",
  "6836813ff": "Try to fix the camel-core test error on a slow box",
  "e6ce69c3f": "try to fix the JMX test failed in faster box.",
  "22007887b": "Fixed test on slower servers.",
  "c89518255": "Fixed tests on slow servers.",
  "522c5fa93": "CAMEL-3524: Added option to set timeout when using Jetty continuation. The default timeout of 30 sec. is sometime to slow for some systems.",
  "480a72be4": "CAMEL-3497: Fixed splitter using too much memory when using parallel mode. Now it aggregtes on-the-fly which means memory consumption is low and it now runs much faster overall in performance.",
  "1747263ac": "CAMEL-3497: Fixed splitter using too much memory when using parallel mode. Now it aggregtes on-the-fly which means memory consumption is low and it now runs much faster overall in performance.",
  "24de83f8d": "CAMEL-3473: Fixed camel-cache configuration not defensivly copied when creating endpoint. Thanks to Tracy Snell for patch.",
  "7834bda89": "[CAMEL-3386] removed client cache in CxfProvider based on Willem's feedback",
  "4bd3c9c84": "Fixed test on slow boxes.",
  "94bb38856": "CAMEL-3350: CamelContext fails fast on startup if LifecycleStrategy fails as well.",
  "f37dbeada": "CAMEL-3337: Aggregator uses a synchronized thread pool facade to process completed aggrated exchanges using the caller thread. This avoids any intermediate task queue, which could be filled due slow producer, and causing memory issues.",
  "bfa479c9f": "don't build the distro for fastinstall",
  "865402e9e": "Added fastinstall profile for faster builds (does not run tests nor builds camel-manual)",
  "f7dd2fff0": "CAMEL-3281: Java DSL now fails fast if onException and the likes are not configured before routes, which they must.",
  "6a6e67b30": "Fixed test on slow boxes",
  "a8b729bcf": "CAMEL-3230 Changed the MinaComponent to use the defaultThreadPool instread of cachedThreadPool",
  "ae86bdf88": "CAMEL-3139: Use ActiveMQUuidGenerator by default as its faster than the Java UUID in highly concurrent systems.",
  "9a5f72c39": "CAMEL-3123: Improved performance of PropertyEditorTypeConverter.",
  "113b906b1": "CAMEL-3123: Improved performance of PropertyEditorTypeConverter.",
  "55c60da6e": "CAMEL-3123: Improved performance of PropertyEditorTypeConverter.",
  "335c7626b": "CAMEL-3123: Fixed performance degration in camel-jetty due type converter lookup falling back to fallback type converters instead of using Jetty specific converters.",
  "50c3ef49f": "CAMEL-3092: Durable subscribers (topics) must provided a clientId. Camel now fail fast if not provided.",
  "a6f098b3a": "Fixed tests on slower boxes",
  "6349537b5": "Fixed test on slower boxes.",
  "3b6139d8b": "Fixed test on slower boxes.",
  "e1ff8607b": "CAMEL-2944: Fixed issue with stream cache spooled to files on Windows and deleting the temporary files when Exchange done",
  "7dc3a8665": "CAMEL-2920: beanRef and method call DSL now validate method name is a valid method on startup. Better to fail fast.",
  "c2a2d6537": "CAMEL-2736: Fixed test due Camel now fails fast.",
  "00c44e42e": "Reverted the optimization as it caused issues on other platforms.",
  "57d05cfa1": "Bumped test timeout a bit to let slow servers be able to complete the test in time.",
  "ab758230f": "CAMEL-2603: camel-cache now supports GET operation. Refactored code to properly shutdown cache manager. Applied patch with thanks to Volodymyr Buell.",
  "66f0e9ff6": "CAMEL-2662: Fixed issue if file begin threw exception which cause in progress file not to be removed from internal cache",
  "21ab70c79": "CAMEL-2558: Producer and ConsumerTemplate can now have its max cache size configured. Also CamelContext now returns already started templates in its create template methods.",
  "d93f0045f": "CAMEL-1588: thread name can be set using a pattern like syntax. Camel now logs at INFO level if stream cache, tracer etc. is enabled.",
  "95c66a67a": "CAMEL-1588: Prefer to use CachedExecutorService instead of a fixed size pool. The cached can grow/shrink and is recommended as the best general purpose pool.",
  "6e5dd0b25": "CAMEL-2484: RecipientList now acquires and releases producers from ProducerCache. Also fixed memory issue when using Mina or FTP producers with recipientList. Fixed LRUCache to stop its cached services when its stopped to better release resources when Camel is stopped.",
  "3bbca07ba": "CAMEL-2484: RecipientList now acquires and releases producers from ProducerCache. Also fixed memory issue when using Mina or FTP producers with recipientList. Fixed LRUCache to stop its cached services when its stopped to better release resources when Camel is stopped.",
  "e1b9648ce": "CAMEL-1631: Added cache option to properties component to cache loaded properties to avoid overhead of loading them when to be used.",
  "14f2bbdc3": "Fixed test on slower boxes",
  "8dd9cda11": "Fixed test on slower boxes",
  "8f390aa87": "Fixed test in rare cases where the 5 files was not written fast enoguh before the file consumer pickup only a subset of those 5 files",
  "7941558cc": "Upgraded to OpenJPA 1.2.2. Fixed JPA tests on slower boxes.",
  "986bcf0bc": "Fixed unit test on slower boxes",
  "265c3e693": "Fixed ftp test on slow boxes",
  "81c05b6ed": "Fixed unit test on slower boxes",
  "22cae6a44": "CAMEL-2363: Removed sample cache. Applied patch with thanks to Ashwin.",
  "b362b5376": "CAMEL-2343: camel-cache can now store Serializable bodies out of the box and keep the objects as is.",
  "42d657c7d": "Fixed test on slower boxes",
  "29eaefbbf": "Fixed tests on slower boxes",
  "f8e5d4633": "Fixing file based tests on other boxes which potentially could have issue to read the file content fast enough",
  "f11d35e35": "Fixed tests on other and slower boxes",
  "ec1d0e8f1": "Try to fix the ShutdownDeferTest on a slower box",
  "c9278f690": "CAMEL-2319: Fixed camel-cache.jar missing some classes.",
  "f3ed70354": "Fixed unit test on really slow boxes",
  "c165f92e9": "CAMEL-2292: Better stop for producer templates to stop their caches as well. Which could lead to an issue with camel-jms reusing an old producer.",
  "1d13f1fb4": "Fixed test on slower boxes",
  "25458aa6b": "Fixed test on much slower boxes.",
  "ae70e408c": "Fixed unit test hanging on much slower boxes due JMS message expired before consuming.",
  "c89fff44d": "Added ftp polling consumer unit test. Fixed a test on slower boxes.",
  "390395d7e": "Give some time on slow boxes.",
  "c5618ac04": "Fixed test on slower boxes",
  "8bacc46de": "MR-272 - Fixes to several issues... a compilation issue with ibm jdk, some test issues for slower machines, and a general problem with MockEndpoint.assertIsNotSatisfied().",
  "a29748b1f": "MR-187: Added more tests. XPath is a bit smarter when the exchange is file based. Added test to show how to force XPath splitting to use SAX which is faster.",
  "dd71f595b": "Fixing test on slower boxes.",
  "06ec0d169": "Trying to fix unit test on slower boxes.",
  "87b1f020c": "MANAGEMENT-178: Avoid using ManagedPerformanceCounter as performance counter holders. Introduced delegate performance counter as its a more clean solution. And less confusing for people extending the camel management api.",
  "43b328d9d": "MANAGEMENT-178: Avoid using ManagedPerformanceCounter as performance counter holders. Introduced delegate performance counter as its a more clean solution. And less confusing for people extending the camel management api.",
  "f4714a817": "Fixed unit test on slower boxes",
  "33fe92b21": "Fixed test on slower boxes",
  "544edb296": "Fixed unit test on slower boxes",
  "7971d1742": "remove windows thumb cache",
  "576b56b19": "CAMEL-2009 add camel-cache features file",
  "53ae88edc": "CAMEL-2009 Added camel-cache feature",
  "1fca51b7d": "Try to fixed the ManagedThrottlerTest failure on slower box",
  "beb020024": "CAMEL-1955 better performance as Claus suggested",
  "59665a202": "CAMEL-1933: First overhaul of JMX management in Camel. Introduced pluggable API. Much more details in mbeans and more mbeans registered. Also fixed routes not being performance counted correctly before.",
  "97e8b63f1": "Puzzled had to revert the optimization",
  "159bb7f2d": "A little optimizations to only copy when needed.",
  "4ca57771c": "A little optimization to avoid copying if not needed.",
  "d52950fe7": "Trying to fix unit test on slower boxes",
  "45ee7d8f0": "CAMEL-1553: Fine grained configuration of runtime options such as tracer, delayer, stream cache etc.",
  "499a3781e": "CAMEL-1849: Stream cached based on files can be disabled by setting a threshold of 0 or negative.",
  "dfe65a73b": "CAMEL-1849: Cleanup in CachedOutputStream. Http component uses a defensive copy of response body stream to avoid returning a live stream that has been closed already. Also ensured that file based stream cache always deletes temp files as its done by on completion strategy now.",
  "313f8191b": "Fallback converters that can convert a given entry is now used as regular type converter in the future to avoid performance degration of walking through all fallback converters ending up in the last one. A great win on some really heavy messaging tests.",
  "c862ea724": "MR-216: Performance optimization for recipientList and type converter to String from numeric values.",
  "e7fc4e4bf": "CAMEL-1817: Part of patch merged. Eg stuff not so much about performance. Added option to mock endpoint to avoid collection exchanges in case you want test as fast as you can go.",
  "4801f73e8": "fixed unit test on slower boxes.",
  "e4cdfc38b": "CAMEL-1720: StreamCache is now default disabled. Fixed a bug with interceptor and on completion. Added methods to configure stream cache in java and spring dsl.",
  "c6f150b0c": "CAMEL-1720: StreamCache is now default disabled. Fixed a bug with interceptor and on completion. Added methods to configure stream cache in java and spring dsl.",
  "14613fdb8": "Fixed unit test failing occationally on slower computers reported by TC",
  "b48a6a5a1": "Fixed CS. Fixed unit test failing on slow computers.",
  "7f3e2dc35": "Fixed the async test error on a slower box",
  "7bfdaed4d": "To fix unit test on slower servers.",
  "f9599562a": "HP-UX is just to slow so disabled this unit test for that platform",
  "ba9f82c8b": "Fixed failing unit test on some slow servers reported by TC.",
  "bfe6dc8bc": "CAMEL-1332: 2nd part of the stream cache. Now it works together with TX routes. Fixed pom build due upgrade to httpcore lately. Fixed CS.",
  "5b1bc67eb": "CAMEL-1332: StreamCache is now default enabled and is configured similiar as Tracer etc. I need to look into getting TX routes working nicely with stream cache as well, hence the TODO in a unit test in camel-spring. Will work on this a bit later.",
  "7c73d98d3": "give more time to slow servers to pass this test",
  "262c2d742": "CAMEL-1508: Fixed type converter picking wrong converter when there was a more specialized converter (eg it went down the super path to fast)",
  "dbd46921a": "Fixed UDP being slow and not reliable in stress tests. Thanks to Orton for sample client demonstrating this.",
  "f52d8cdcf": "CAMEL-1445 http producer will return a cached stream",
  "bd90b856a": "Added fail in case unit test is slow, to catch in case some bad performance degrade was introduced.",
  "842976c05": "CAMEL-1417: Fixed performance issue with StreamInterceptor causing too many convertions attempts that is bound to fail. Improved logic in MessageSupport to also avoid type convertions if not possible. In the rude performance test we get a 2x gain on my laptop. And the Camel715 can now again be run with 50000 loops in about 5 sec, giving a 10x gain.",
  "9f49f8001": "Renamed a exchange header for aggregator. Unit test run faster as changing delay to 25 millis instead of 1 sec.",
  "2902dba52": "CAMEL-1347: file producer will rename local work file if any instead of doing a file to file copy (optimization). Added not to some operators in simple language. Added not predicate wiki example. Fixed checkstyle. Yes this is many because SVN was down.",
  "113e54013": "CAMEL-1337 The expression evaluations should rest the cached stream",
  "acc7f148b": "CAMEL-1337 The xpath expression evaluations should rest the cached stream",
  "2cf348372": "CAMEL-209 - Inject producer into enricher processor to improve performance.",
  "115029fa4": "CAMEL-1291: content cache is default for Velocity. Fixed using @deprecated stuff from Velocity.",
  "56f01384c": "CAMEL-1236: Introduced fileExpression for setting dynamic file name to consume. Renamed existing expression to moveExpression as its what it does. Optimized some unit tests to run faster.",
  "d8149e280": "CAMEL-966: Introduced expectedFileExists on MockEndpoint for faster detection of existence of files. This avoid using thread.sleep in unit tests.",
  "baa954f0d": "more improvements for CAMEL-888 for both XML and HTML mappings; including simple HTML routes view - still work in progress but slowly getting there",
  "0b39ff392": "minor improvemnet to CAMEL-1171 so that we can use to(pattern, uris...) or to(pattern, endpoints...) so if a pattern is specified with to() it is the first parameter. Also added similar inOut(endpoints...) and inOnly(...) methods. Finally added an extra ExchangePattern constructor argument to ToType so that when using [inOut|inOnly](uris|endpoints) we only need a single step in the DSL which is a tad faster & minimises copying etc",
  "7823cb9d1": "Fix seda test that fails on slower machines sometimes",
  "938e16b11": "CAMEL-1080 try to fix the DataSerSedaTest failure in a slower box",
  "3861da8dc": "Push down guiceyfruit repo for faster builds",
  "1fba0d0ad": "CAMEL-939 - Fix unit test that fails sometimes on slower machines",
  "b1bd9b0d0": "Fixed the CS errors in camel-core and tried to fix the test failure in slower box",
  "f27d133d3": "Remove the Thread.sleep that was causing this test to fail on slower machines.",
  "3b4f5d617": "CAMEL-939 - Fix csv test that fails on slower machines sometimes.",
  "b1a9b01ad": "CAMEL-640: Added Delayer (interceptor) to slow processing of messages down so you can watch what happens nice and slowly.",
  "25c929e0c": "CAMEL-640: Added Delayer (interceptor) to slow processing of messages down so you can watch what happens nice and slowly.",
  "3e15936c7": "Fixed failing on Bamboo as it cant stop the FTPServer fast enough.",
  "f6e9bcbdb": "CAMEL-580: Added content cache for resource based endpoints such as camel-velocity and camel-stringtemplate.",
  "cdd0d5037": "CAMEL-580: Added content cache for resource based endpoints such as camel-velocity and camel-stringtemplate.",
  "c61697ef0": "CAMEL-580: Added content cache for resource based endpoints such as camel-velocity and camel-stringtemplate.",
  "06cb7f692": "added a simple performance test case for working with Camel and ActiveMQ",
  "db0c2a355": "deal with slow boxes :)",
  "13b2d7616": "Better journal tests and also add a little performance benchmark to get an idea of what you can expect from the journal",
  "97c11c4ac": "made the ETL demo use replace rather than append for the output files; also slowed down the polling",
  "edb5e8c52": "increased the timeout to make sure the test passes, even on slow boxes",
  "6e2294ea9": "minior patch to fix test case on very slow boxes",
  "def47a2d7": "added longer timeout so the test always works on our dog-slow CI box :)"
}, "cameraview": {
  "": ""
}, "CameraView": {
  "fc4a75a": "Make CameraPreview faster (#403)",
  "ee1d397": "Use cached orientation in OrientationHelper (#290)",
  "f7498f0": "Add fast camera mode"
}, "camunda-bpm-platform": {
  "6eab2c2c": "chore(spring-boot-starter): disable cache for specific ITs",
  "9a3fff1f": "feat(side-pipeline): add side pipeline with crdb slow jobs",
  "b1f7d40f": "chore(deps): add transpilation for fast-xml-parser",
  "06b9d84e": "chore(engine): add cache awareness for batches in history event producer",
  "f40835ed": "fix(locales): enable cache busting",
  "0276bc73": "fix(engine): add null check for history cleanup job cmd optimization",
  "49eeb6a0": "fix(test): adjust config for performance tests",
  "73e61964": "fix(translations): add app prefix for cached translations.",
  "b36ba8a3": "fix(translations): cache translations once they are loaded",
  "edbb3470": "fix(databases): add indices to improve performance of history cleanup",
  "bb5a450f": "fix(engine): remove cache-control header for xml endpoints",
  "63ce3ef0": "improve(engine): performance tuning for historic activity instance query",
  "37fd16cd": "feat(engine): add functionality to purge db and cache",
  "23b4bdd8": "chor(engine): add binding to avoid performance issues",
  "96462b7f": "fix(multi-instance): improved performance of parallel MI join with high cardinality",
  "f56f8da3": "chore(qa/performance): fail ant task when generate-load returns with an exit code != 0",
  "08cddbb8": "fix(engine): can still start processes when cache capacity is exceeded",
  "2a80db22": "fix(engine): set flag for adding model instances to cache",
  "61c0bddc": "feat(engine): provide SPI for custom deployment cache implementation",
  "00592bec": "impr(engine): cache expressions & compiled scripts",
  "210f9f67": "impr(engine): cache script engines",
  "069071b8": "feat(qa): add metric performance test",
  "24758b4b": "feat(dmn/feel): cache feel expressions",
  "6ea30ead": "fix(tests): reset DbIdGenerator cached state after every test",
  "3f0c26ad": "chore(engine): removed unused imports and few optimization",
  "e20a07f5": "feat(perfTest): structured query performance tests",
  "db3df4e8": "fix(apps): re-implement cache-busting",
  "079473fb": "fix(engine): migration plan generation does not access deployment cache directly",
  "41f6d974": "qa(perftest): add query performance testsuite",
  "00c8fba2": "chore(parent): slowly increase MaxPermSize",
  "455b3042": "chore(plugin-api): attempt to increase performance of asset requests",
  "0c550d38": "chore(engine/test): do not hide test failure with clean cache/db assert",
  "b5d898ac": "test(engine): add performance test for DMN engine",
  "aa229c68": "test(engine): add performance test for DMN engine",
  "a1960b4d": "fix(bootstrap): no load timeout for slow internet connections",
  "89f30658": "fix(bootstrap): no load timeout for slow internet connections",
  "76524c84": "fix(bootstrap): no load timeout for slow internet connections",
  "8b062b8f": "fix(scripts): cache only cacheable script engines",
  "1f950d40": "fix(scripts): script engines cached at a process application level",
  "f4c3a447": "refactor(engine/correlation): use cache for finding event subscriptions",
  "8694fe23": "chore(engine): discard model instances if definition cache is cleared",
  "cf690cd4": "test(engine): fix test for removal of model instances from cache",
  "b4bb1f64": "test(engine): ensure clean deployment cache after test",
  "6fe5ae8c": "chore(engine): remove model instances from deployment cache on deletion",
  "b80004bb": "test(engine): properly close cached process engine",
  "ecb521df": "feat(qa/performance): add ability to track activity statistics",
  "ddb0010e": "feat(qa/performance): add ability for wait steps",
  "ebb65aa7": "chore(qa/performance): extract test pass",
  "464bd370": "fix(qa/performance): remove duplicate interface",
  "20a6dd34": "fix(qa/performance): fix typo",
  "c03d314f": "chore(qa/performance): move comments in pom to allow completion",
  "0301754c": "chore(qa/performance): fix typo in README",
  "6be35956": "chore(webapp): exclude slow tests on maria db",
  "1312a637": "fix(engine): cache engine in ProcessEngineRule",
  "ac152e25": "fix(engine): clear cached variable value on varaible deletion",
  "d35017b2": "fix(rest): destroy cache after test",
  "f44ad38c": "feat(rest): add ability to use caches for HAL relations",
  "8c20ce1d": "chore(engine): cache ELResolver in ExpressionManager",
  "70fd1520": "chore(index): add index on task assignee to improve performance",
  "db564b53": "test(engine): deletion of transient cached historic details",
  "d1382883": "chore(sql): add index to improve job executor performance",
  "dbf0e5ac": "feat(engine): 1st lvl cache reuse with exclusive jobs",
  "0b64e0b0": "Merge pull request #93 from berndruecker/performance-testsuite-ingo",
  "12e5d328": "chore(webapps/cache): use cache busting for further assets",
  "b696c81b": "chore(webapps/cache): use cache busting for further assets",
  "2e17ceda": "improve(cockpit): add cache busting and minor UX improvements",
  "a1e73556": "improve(cockpit): add cache busting and minor UX improvements",
  "5607377d": "improve(cockpit): add cache busting and minor UX improvements",
  "910bc61b": "improve(cockpit): add cache busting and minor UX improvements",
  "690b0c68": "fix(engine): use cachedEntityState for concurrent executions",
  "9217cc7f": "wip(qa/performance): first cut of performance framework",
  "ffbbe5ad": "fix(webapps/authentication): clear http cache on logout",
  "3281881c": "fix(webapps/authentication): clear http cache on logout",
  "dac5fa08": "chore(webapp): clear angular $http cache on logout",
  "8ba76df2": "chore(webapp): clear angular $http cache on logout",
  "e7b2890f": "chore(webapp): clear angular $http cache on logout",
  "0a77a4cd": "feat(REST): add cache control filter for GET",
  "728a6589": "fix(engine): remove guard when updating cached definition",
  "21f527a3": "improve(engine): update deployment cache if required",
  "ccbb5156": "chore(rest): cache loggers",
  "c66c6e3d": "fix(rest): improve resteasy test runtime performance",
  "a10cf776": "HEMERA-3523 fixing Incorrect handling of cached connectors if connector is added after list has been loaded",
  "5d510a19": "HEMERA-3442 making SessionScoped connector cache serializable",
  "530b59b5": "HEMERA-2550: Roundtrip (JS) properly caches sync status",
  "3caa5ee6": "HEMERA-2689: improve performance in db2 update script by removing 1 REORG-Statement",
  "e24439d3": "HEMERA-2455 getting process definition from cache",
  "37a28373": "HEMERA-2455 getting process definition from cache",
  "e3090da2": "ACT-1257 renaming beanStore to cachedVariables, preventing scoped associations from being used from activiti commands",
  "37fd506f": "ACT-714: Using concurrentHashmap to prevent concur-mod exceptions for cache of simple-names",
  "16dd77b6": "ACT-834 JavaDelegate instances should not be cached",
  "bb877156": "ACT-745: update user cache in case of user details changes",
  "50fc0ee4": "ACT-543: (coding before breakfast) added capturing initiator to KickStart because it makes the examples so much better",
  "4ae9d36b": "ACT:505: bugfix for process definition cache when using multiple process engines"
}, "canal": {
  "869e831": "performance optimize ,cache integer/long valueof",
  "f7a4979": "performance optimize , 1. cache string names 2. cache Charset",
  "571fa0d": "update fastjson & druid version (#4438)",
  "3bceb07": "update fastjson & druid version (#4406)",
  "bac1d54": "update fastjson & druid version (#4224)",
  "7dfec19": "update druid & fastjson2 version (#4183)",
  "ead9143": "fastjson update 1.x to 2.0.2 (#4160)",
  "693f8d5": "replace fastsql with druid (#3132)",
  "435db30": "= performance improve",
  "c634f98": "bugfix mysql >= 8.0, 缓存层移除，EbeanServer 运行 Fail，Unknown system variable query_cache_size error！ (#2264)",
  "bd974e3": "upgrade fastjson 1.2.58",
  "86cd805": "upgrade fastsql 973",
  "2d3baea": "fastsql tsdb testcase",
  "95bed6b": "fixed fastsql",
  "37c5168": "code optimization",
  "06bfcda": "code optimization",
  "5d55c7a": "fixed fastsql upgrade",
  "f36ce64": "fixed issue #781 , upgrade fastsql 540",
  "8a952d3": "fix bug: kafka get row data for performance",
  "26edbea": "fixed kafka performance",
  "3d5f13f": "kafka producer 适配 row data for performance #726",
  "92778be": "fixed fastsql version",
  "bf02db4": "fastsql 186 for build",
  "7076e31": "fixed fastsql",
  "f46133d": "upgrade fastsql 228",
  "c340bd6": "upgrade fastsql 159",
  "28ad12d": "upgrade fastsql 2.0.0_preview_151",
  "499be8b": "upgrade druid to fastsql",
  "00890f8": "Communication log optimization.",
  "d1c83ea": "fixed fastjson autotype",
  "34bcfbc": "不管有没有filter，都应该对meta cache更新一下",
  "75a5a4d": "升级fastjson",
  "8905649": "upgrade fastjson version"
}, "Carbon": {
  "d12c1f8": "fixed issue with EdgeEffect's performance",
  "5df7a4e": "diff callback for adapters, started working on reveal effect, svg cache, updated AutoCompleteLayout and AutoCompleteEditText, renamed Spinner to DropDown, fixed CheckedTextView, fixed ExpandableRecyclerView animation, more lambdas, updated Samples",
  "6d862d9": "added cache for shadows, reverted RenderScript configuration, tweaked FloatingActionMenu's animation code",
  "a78049f": "Merge pull request #91 from DSteve595/typeface-cache",
  "b51fb44": "Use a static typeface cache to prevent repeatedly loading fonts from assets"
}, "cardslib": {
  "": ""
}, "cas": {
  "edfe67732": "re-work redis ticket registry to remove KEYS command; handle principal->TGT lookups faster",
  "7d7fa7186": "re-work redis ticket registry to remove KEYS command; handle principal->TGT lookups faster",
  "78e063379": "cache static resources for 1 day by default",
  "e63f741c6": "clean up performance tests setup in CI",
  "c5d284f14": "Update performance.yml",
  "c43f4e034": "disable configuration cache",
  "96496f8e6": "Fix: Allow SAML2 cache invalidation to handle entity ids separately",
  "2257c175a": "enable gradle configuration cache - wip",
  "cc09aed04": "enable gradle configuration cache - wip",
  "8d5c72cdd": "enable gradle configuration cache - wip",
  "6fc985308": "enable gradle configuration cache - wip",
  "4be181857": "Turn on Gradle configuration cache to improve build performance",
  "9855b46a0": "Fix SPNEGO performance issues (#5564)",
  "f60fe84d6": "update release notes; minor cache key change",
  "ab5c973ba": "support a second-level inmemory cache for redis",
  "4585c8dba": "extract cache settings into their own property",
  "48abe7938": "support a second-level inmemory cache for redis",
  "9c2e2cafd": "improve redis performance",
  "fe40ddd62": "improve performance of dynamo-db getall-putall ops",
  "233d572a4": "limit actions cache to the commit sha",
  "29b9b7b7d": "allow message bundle cache expiration to be a duration",
  "92d0ea1ac": "allow saml2 metadata resolution to record cached instant",
  "c56d43f1d": "remove deprecated ehcache",
  "0b704d3f4": "improve metadata resolver fetching from cache",
  "d4841a959": "allow saml metadata cache size to be configurable",
  "5611db79b": "Fix serialization configuration for Memcached (#5460)",
  "1d7ebfcd2": "switch ci cache action to v3",
  "7abe187b7": "update tests for spring boot caches endpoint",
  "f6aa0a35f": "increase workers for ci cache",
  "eb4964252": "fix ehcache test",
  "d41dc21a2": "update release notes; re-org ehcache docs",
  "ddcf66169": "cache gradle wrapper and validate",
  "999e90202": "cache gradle wrapper",
  "e74756cb7": "Fix cache busting on login/logout webflows (#5265)",
  "1f3dce601": "add test for oidc cache invalidation via change listener",
  "961c05909": "Build performance tweaks (#5232)",
  "98b620314": "Remove buildDate jar packaging optimization in root build.gradle",
  "0a3c28cb3": "Improve cacheability of cas-server-core-api-configuration-model",
  "566f06963": "cache includes for docs",
  "55100f25e": "fix cache expiration to use properties",
  "d21dee1f1": "improve test to invalidate cache during looksup with separate thread",
  "abe12545a": "improve jpa service registry performance",
  "1404a4401": "improve performance of lookup operations with jpa service registry",
  "67f1537ce": "move cache config out of duo services",
  "b930027ea": "Add the protocol property for Memcached (#5092)",
  "7fbc33ee2": "doc updates; service registry cache adjustments",
  "19b8e547a": "clean up attribute defns per attr release policy; cache results",
  "9aa53490d": "add retry attempts if cached metadata resolver cannot produce valid saml2 metadata",
  "ae670f76d": "allow metadata to be signed for idp; improve cache ops and settings.",
  "5d5a8e430": "improve registry impl performance",
  "fbd9eaaaf": "Make ehcache3 disk pool persistent (#4943)",
  "38b536b3e": "refactor clazz registration with memcached kryo",
  "acfe817f9": "fix cache control static resources pattern (#4875)",
  "191cda516": "configure cache",
  "4cc1ee16a": "minor changes to ci build performance",
  "e4899ca19": "improve performance tests",
  "e6b0e250f": "switch memcached docker image",
  "6670c291b": "add memcached tests",
  "1ffe8e03a": "Update run-memcached-server.sh",
  "aa9ac4688": "fix memcached tests",
  "54593b92c": "remove ehcache monitor enabled property that doesn't exist in c… (#4585)",
  "963ad8af8": "renovatebot(deps): update dependency javax.cache:cache-api to v1.1.1 (#4519)",
  "5471de43e": "Ehcache 3 ticket registry and Ehcache 3 used in X509 CRL cache (#4488)",
  "74607e34f": "Fix cache actuator for ehcache registry by initializing spring… (#4436)",
  "ef8d8dc54": "exclude old ehcache-core dependency (#4306)",
  "c43ff2e86": "fix memcached spring ctx tests",
  "25895461a": "move/separate cache from principal attr repository",
  "62e615715": "fix: kryo serialization problems with memcached (#3857)",
  "583fcc0d3": "fix memcached tests",
  "a4a40fc40": "remove gradle 5 from cache (#3808)",
  "9c44c43d7": "- attr rel policy for saml2 refeds - improvs to metadata fetching over urls - endpoint to manage saml2 metadata cache - doc updates",
  "e2c412ac6": "dependency checker slowness (#3703)",
  "34a42e4ad": "Allow system properties to be set for use in ehcache xml config. (#3687)",
  "b5ef3e7e3": "make sure groovy mfa trigger can be cached and recompiled per change",
  "768c8bd16": "Refactor HttpUtils to improve performance (#3620)",
  "e8e374b6d": "switch saml sp cache key to use metadata loc instead",
  "b338bb704": "remove cache info that always changes in CI (#3551)",
  "6c7a19508": "fix build cache (#3545)",
  "8506f47db": "cache duo user account status result",
  "a8fa1542f": "clean up memcached tests for oauth; move to memcached module",
  "de97ff9b4": "fix ehcache test failure; added export endpoint",
  "1baa416b3": "Fix to print all maps in a cache for heath endpoint (#3360)",
  "8c5571f1e": "remove sudo for faster startup time - wip",
  "f7c93384a": "memcached tests",
  "b386b2e56": "Update Memcached-Ticket-Registry.md",
  "c38362364": "Update Memcached-Ticket-Registry.md",
  "f0db2b25b": "workout elasticache with memcached",
  "6b1ef6618": "performance improvements",
  "75da3e07d": "performance improvements for array alloc",
  "aa20788b5": "ticket serialization performance fix (#3183)",
  "d56806105": "Added the RememberMeUsernamePasswordCredential class to the CloseableKryoFactory since Kryo throws an exception saying the class is not registered when using Memcache as the storage (#3178)",
  "1a69045f6": "add flag to skip npm cache",
  "e644caf42": "troubleshooting memcache's zoneddatetime serializer",
  "97171758d": "troubleshooting memcache's zoneddatetime serializer",
  "5b18dfffd": "working on oauth tests with memcached",
  "426fce503": "fix memcached tests",
  "309d9dcee": "ported memcached test cases and fixes from 5.1 over to master",
  "2d22e1e72": "Allow in some limited degree a collection of serializeable classes for memcached, etc",
  "6229113de": "fixed issue with ehcache monitors",
  "2e2094937": "Working on memcached conn pooling",
  "c94447171": "renamed memcached ticket registry for convention",
  "9b37db988": "fix test cases by adding missing dependency; removed blocking ops from memcached",
  "56b70d019": "NativePRNG too slow (#2840)",
  "61f0b2c56": "replace guava caching with that of caffein so as to allow per-item eviction policies and gain better performance.",
  "4ab0426fa": "replace guava caching with that of caffein so as to allow per-item eviction policies and gain better performance.",
  "4e24ecd0a": "replace guava caching with that of caffein so as to allow per-item eviction policies and gain better performance.",
  "c36f13806": "Clean up repo list to ensure modules can load fast",
  "22c2e9987": "baseline modules for having CAS services stream over a queue or cache",
  "092a0c687": "baseline modules for having CAS services stream over a queue or cache",
  "4e7dbb030": "baseline modules for having CAS services stream over a queue or cache",
  "16689638e": "Ensure ehcache is not flushing tickets by default",
  "4869aeb23": "Split caches for apache ignite based on the ticket catalog",
  "54d7d725b": "Clean up ehcache config & cache construction",
  "b83af3c89": "Clean up codebase to use static methods where useful to better performance",
  "d80396c12": "Let OIDC JWKS resources be cached",
  "d8f1425a2": "Remove setters and improve performance (#2246)",
  "61a58f29e": "Update Ehcache-Ticket-Registry.md",
  "3c3b6ec8c": "Improve service registry performance by caching ordered services (#2136)",
  "09d494f24": "Fix performance issues with string concat",
  "50082a4ff": "Fix performance issues with string concat",
  "975a00d8f": "Fix issue with ticket timeouts for ehcache and infinispan",
  "d8ce6aa61": "Fix issue with ticket timeouts for ehcache and infinispan",
  "4e8eb0994": "Ported memcache encryption bug fix over to master",
  "d767b8f06": "Fix memcache unit test (#1712)",
  "f01835776": "Consolidated ignite cache",
  "e6936a813": "Move ehcache into a single cache",
  "966e00466": "added memcached",
  "9e5170026": "ehcache config",
  "ecdaaa47e": "Update Ehcache-Ticket-Registry.md",
  "fc177b7ad": "Ticket registry based on infinispan cache",
  "baf790668": "Serialize/Deserialize the registered service for memcached",
  "6ebc308e6": "add Apache Ignite ticket cache support",
  "766dd1081": "Update Memcached-Ticket-Registry.md",
  "b795f8c38": "Update Ehcache-Ticket-Registry.md",
  "27bbce17c": "Memcached support fails at startup due to a bad KryoTranscoder init",
  "611b65855": "Merge pull request #1238 from Unicon/ehcache-broken",
  "ffadfa4ec": "ehcache monitor broken out",
  "6be2962e3": "ehcache monitor broken out",
  "97f959a0e": "memcached config",
  "a1b9850e2": "ehcache config",
  "e4e166d3b": "ehcache config",
  "7f868c885": "Merge pull request #1157 from Unicon/cache-guava",
  "ba37cc15a": "Merge branch 'master' into cache-guava",
  "f4059d66a": "Merge branch 'master' into cache-guava",
  "0b74131a5": "Merge branch 'master' into cache-guava",
  "8fc45512e": "changed cache to use Guava instead of a separate jar",
  "7f0f9b6bb": "new principal cache based on guava",
  "daf57a4ea": "added memcached",
  "f80707602": "added support for ehcache",
  "0a7f00262": "#1049 - Fix serialization bug with EhcacheTicketRegistry",
  "c3bd27e43": "fixed conflicts between saml and memcached modules",
  "f9822d777": "Merge pull request #944 from Unicon/memcached-intg-tests",
  "d2ab33cb7": "Update Memcached-Ticket-Registry.md",
  "b1c612aaf": "Merge pull request #917 from Unicon/ehcache-upd",
  "b4f09cf5b": "Merge pull request #922 from Unicon/cache-crl-revocchecker",
  "6b6c2a200": "ehcache update",
  "2010d93ba": "removed cache map as a field and made it a local var",
  "762f34ac6": "finished ehcache",
  "d254ccdf4": "updated api to cache attrs by principal id",
  "61e854f80": "Merge pull request #729 from Unicon/ehcache-upgrade",
  "48d897b1d": "Upgrading Ehcache to 2.9",
  "cfae7edb6": "FindBugs performance and security fixes",
  "291171551": "FindBugs performance and security fixes",
  "29d5ca42c": "FindBugs performance and security fixes",
  "4658922a7": "FindBugs performance and security fixes",
  "82518d192": "FindBugs performance and security fixes",
  "2bb3c3928": "FindBugs performance and security fixes",
  "9d81e9ba8": "FindBugs performance and security fixes",
  "d319288cf": "Merge pull request #697 from Unicon/jboss-cache-uber-webapp-depped",
  "79b104ba1": "Deprecated jboss cache and uber webapp modules",
  "6ba4d9a8a": "NOJIRA: fixed test failure on jboss cache and resource leak",
  "b21e7d6a4": "CAS-1393: Memcached serialization fails when creating a proxy ticket",
  "9fc261c01": "CAS-1393: Memcached serialization fails when creating a proxy ticket",
  "2efe24a50": "NOJIRA: Update X509's Ehcache dependency version to match parent.",
  "d73276359": "CAS-1351: Upgrade ehcache to v2.7.2",
  "fe34c102f": "Merge pull request #302 from h0nIg/memcachedclient",
  "d7118281d": "memcached changes",
  "7a2113603": "ehcache changes",
  "cf3516ff6": "CAS-1096: Reset the ehcache configuration back to master, (left-over commit from incorrect branching)",
  "7b00ec0fa": "Cleaning up management webapp, clearpass, ehcache, jboss and generic modules.",
  "276c97be4": "CAS-1273: Adjust clearPass configuration to encrypt passwords in its cache",
  "bee1504e7": "CAS-1201: Ehcache-core dependency is missing from the pom",
  "5ff185f7a": "CAS-1174: The cache manager of ClearPass conflicts with EhCache Ticket Registry's cache manager, given that they're both unnamed and shared. The shared setting causes one to 'overwrite' the other.",
  "2247d1ab6": "CAS-1156: Reduced branching logic using commons API to use toInteger(bool,int,int). Also added logging to ehcache tests.",
  "d44e58f0a": "CAS-1140 Improve memcached monitor description.",
  "c07de4fd0": "Merge pull request #64 from serac/memcached-cas-1116",
  "879fe724c": "CAS-1116 Fix units of memcached expiry. Use seconds for memcached expiration periods and add verifying unit test. Switch to use of real memcached server for tests since jmemcached proved unreliable for precise testing of expirations. Developers must run memcached as an external test fixture, otherwise tests are skipped.",
  "80fc3c92b": "CAS-1116 Refactor KryoTranscoder to use an initial buffer size and add explicit buffer overflow protection to handle what should be edge cases with proper buffer sizing. Also, correct improper usage of ByteBuffer#array(), which caused entire backing buffer to be stored in cache instead of just used bytes. Unfortunately the fix requires byte array copying with the resulting object allocation overhead.",
  "bb6c4a48e": "CAS-1116 Add KryoTranscoder component that uses Kryo serialization framework to marshal objects to bytes for storage in memcached. Add type-specific Kryo serializers for efficiency and proper handling of unmodifiable collections that are commonly used in CAS ticket types. The Kryo FieldSerializer class that handles complex types by default proved incapable of dealing with unmodiable collections in testing.",
  "9cb28a3fc": "CAS-1116 MemCachedTicketRegistry improvements: - Add constructor that takes MemcachedClient to expose full range of configuration options - Remove support for async writes since it can lead to inconsistent state - Improve logging",
  "ec5b6af77": "LPPE-Fixed the dateResult variable name and added ldap error handling to the fast-bind auth handler.",
  "11a84fbcb": "Fixing the NPE in OpenIdCredentialsAuthenticationHandler, when the ticketGrantingTicket is not found in cache. Fixed the Base64 CRLF default line ending, creating openid parameters not consistent with the OpenId Spec, thus an authentication reject.",
  "ce98a72b3": "CAS-1076 Remove ticket PREFIX dependency and fixed test to reflect the change. Also updated Ehcache version and module name.",
  "900ec0920": "CAS-948 - unit test running faster after adding constructor based setup",
  "66db0848d": "CAS-1076 Ehcache tests running",
  "eb9b5e350": "Merge pull request #15 from apetro/cas-1076-ehcache-cleanup",
  "d91c1bea0": "Merge branch 'master' of github.com:Jasig/cas into cas-1076-ehcache-cleanup",
  "cd0cd2da4": "CAS-1076 declare ehcache submodule in cas pom.xml",
  "d21ee7c8b": "CAS-1076 private rather than protected cache variables",
  "8bec4707c": "CAS-1076 update ehcache-core version to 2.4.6 from 2.4.5",
  "1d9f4a23a": "Merge pull request #11 from atilling/feature-ehcache",
  "9f28123af": "Proposed ehcache integration for CAS core",
  "4d28241b4": "CAS-936 Add support for certificate revocation that can fetch and cache CRL data from resources defined in the CRLDistributionPoints extension field of the certificate."
}, "cassandra": {
  "3ca94d65": "Remove unnecessary String.format invocation in QueryProcessor when getting a prepared statement from cache",
  "0c58fbb8": "Add cache type information for maximum memory usage warning message",
  "9bf128aa": "Improve unit tests performance",
  "4c85c6a4": "key_cache_save_period, row_cache_save_period, counter_cache_save_period are not deprecated and we should not emit deprecation warning on startup for them Patch by Ekaterina Dimitrova; reviewed by Stefan Miklosovic for CASSANDRA-17904",
  "dd08314e": "Uncomment prepared_statements_cache_size, key_cache_size, counter_cache_size, index_summary_capacity which were commented out by mistake in a previous patch; Fix breaking change with cache_load_timeout; cache_load_timeout_seconds <=0 and cache_load_timeout=0 are equivalent and they both mean disabled; Deprecate public method setRate(final double throughputMbPerSec) in Compaction Manager in favor of setRateInBytes(final double throughputBytesPerSec); Revert breaking change removal of StressCQLSSTableWriter.Builder.withBufferSizeInMB(int size). Deprecate it in favor of StressCQLSSTableWriter.Builder.withBufferSizeInMiB(int size); Fix precision issues, add new -m flag (for nodetool/setstreamthroughput, nodetool/setinterdcstreamthroughput, nodetool/getstreamthroughput and nodetoo/getinterdcstreamthroughput), add new -d flags (nodetool/getstreamthroughput, nodetool/getinterdcstreamthroughput, nodetool/getcompactionthroughput); Fix a bug with precision in nodetool/compactionstats; Deprecate StorageService methods and add new ones for stream_throughput_outbound, inter_dc_stream_throughput_outbound, compaction_throughput_outbound in the JMX MBean `org.apache.cassandra.db:type=StorageService`; Removed getEntireSSTableStreamThroughputMebibytesPerSec in favor of new getEntireSSTableStreamThroughputMebibytesPerSecAsDouble in the JMX MBean `org.apache.cassandra.db:type=StorageService`; Removed getEntireSSTableInterDCStreamThroughputMebibytesPerSec in favor of getEntireSSTableInterDCStreamThroughputMebibytesPerSecAsDouble in the JMX MBean `org.apache.cassandra.db:type=StorageService`",
  "04901913": "Fix Setting Virtual Table to update after startup config properties gc_log_threshold_in_ms, gc_warn_threshold_in_ms, conf.index_summary_capacity_in_mb, prepared_statements_cache_size_mb, key_cache_size_in_mb, counter_cache_size_in_mb patch by Ekaterina Dimitrova; reviewed by Andres de la Pena for CASSANDRA-17737",
  "89c6addb": "Prewarm role and credentials caches to avoid timeouts at startup",
  "1911a887": "Fix slow keycache load which blocks startup for tables with many sstables.",
  "eae7b9c3": "Actively update auth caches in the background",
  "b1e77baa": "Avoid token cache invalidation for removing a non-member node",
  "b3af67f0": "Add test to ensure Caffeine cache does not return stale entries",
  "f9aa19e3": "Add nodetool commands to invalidate auth caches",
  "957c6264": "Nodetool setcachecapacity behaves oddly when cache disabled",
  "d656f8ac": "Restore async refresh executor to auth caches",
  "7ca997ba": "Drain and/or shutdown might throw because of slow messaging service shutdown",
  "79e693e1": "Add flag to disable chunk cache and disable by default",
  "e2ecdf26": "Remove broken 'defragment-on-read' optimization",
  "3cfe3c9f": "Fail fast when -Xmn is set when the G1 garbage collector is enabled",
  "406a8596": "Fix CQL formatting of read command restrictions for slow query log",
  "9c1bbf3a": "Flush with fast compressors by default",
  "1fbd3297": "Release session from cache when closing QueryReplayer",
  "01b52de4": "Make note of replicate_on_write and populate_io_cache_on_flush table options removal in NEWS.txt",
  "2e59ea8c": "Improve BTree build performance by avoiding data copy",
  "5c4ce600": "Improve TokenMetaData cache populating performance avoid long locking",
  "6d1446ff": "Add chunks cache metrics to caches virtual table",
  "e6b8e7a7": "Fix up chunk cache handling of metrics",
  "45c3b461": "Add a virtual table to expose caches",
  "73e70340": "Nodetool import row cache invalidation races with adding sstables to tracker",
  "4e744e76": "Improve LatencyMetrics performance by reducing write path processing",
  "3747a6cd": "Compaction performance improvements",
  "85fafd0c": "Chain commit log marker potential performance regression in batch commit mode",
  "5b23054f": "Round buffer size to powers of 2 for the chunk cache",
  "b32a9e64": "Improve TRUNCATE performance",
  "f93e6e34": "Fix short read protection performance",
  "349f7ea7": "Doc change: Updated correct url post merging for ppc64le capi-rowcache.",
  "ec85b4a9": "Gossip thread slows down when using batch commit log",
  "b8c56c47": "Docs: add CAPI-Rowcache to plugin list",
  "9562b9b6": "Properly evict pstmts from prepared statements cache",
  "d8871bd5": "Avoid rewrapping an exception thrown for cache load functions",
  "470f15be": "Fix weightedSize() for row-cache reported by JMX and NodeTool",
  "5e40fd9f": "Improved docs around logged batches by noting the optimization when only a single partition is referenced",
  "3f1a3b2f": "Avoid creating KeyCacheKey instance when key cache is disabled",
  "c607d764": "Use Caffeine (W-TinyLFU) for on-heap caches",
  "033f2565": "Remove IndexInfo cache from FileIndexInfoRetriever",
  "eace9aad": "If CF has no clustering columns, any row cache is full partition cache (CASSANDRA-12499)",
  "ec604875": "If CF has no clustering columns, any row cache is full partition cache (CASSANDRA-12499)",
  "6966fcda": "Added slow query log",
  "dc9ed463": "Improve write path performance",
  "eaa06942": "fail fast if the system property 'legacy-sstable-root' is not set properly",
  "ac53b720": "Chunk cache to request compressor-compatible buffers if pool space is exhausted",
  "d9083a9c": "Use a CAS loop in UUIDGen instead of a sychronized block to improve performance under contention",
  "9581209b": "Make prepared statement cache size configurable",
  "30bb255e": "Add uncompressed chunk cache for RandomAccessReader",
  "c3d2f26f": "COPY FROM on large datasets: fix progress report and debug performance",
  "0129f70c": "InvalidateKeys should have a weak ref to the key cache",
  "186777aa": "Refactor auth caches and add credentials cache",
  "6c6b7e40": "Improve nodetool status performance for large cluster",
  "9dafa438": "Skip commit log and saved cache directories in SSTable version startup check",
  "acdbba79": "Fix SSTablesPerReadHistogram when row cache hit",
  "4378b58b": "Don't throw assertion error on old key cache keys just skip serializing them.",
  "6312f335": "Improve performance of the folderSize function",
  "1c3ff924": "Invalidate row/counter cache after stream receive task is completed",
  "48b685e8": "Revert 'Simplify row cache invalidation code'",
  "d867ac1f": "Simplify row cache invalidation code",
  "6584331c": "Add row size to sstable format for faster skipping",
  "2d991a7e": "Minor optimizations",
  "0b8b67bf": "Saved caches use ambigous keyspace and CF name to identify tables",
  "e889ee40": "2i key cache load fails",
  "60e45c0a": "Small optimizations of sstable index serialization",
  "5baf28d0": "Replace all usages of Adler32 with CRC32 which has a fast instrinsic now",
  "fa6205c9": "Add checksum to saved cache files",
  "8c19fd63": "undeprecate cache recentHitRate metrics",
  "04287d44": "Fix counting cache serialization in request metrics patch by Sankalp Kohli; reviewed by jbellis for CASSANDRA-9466",
  "160e7f29": "faster async logback configuration for tests",
  "e379f978": "Allow roles cache to be invalidated",
  "7b23b95f": "Startup slowdown due to preloading jemalloc",
  "aedce5fc": "Fix regression with compressed reader performance due to no pooling and excessive mapping/unmapping",
  "c2ecfe7b": "follow up to CASSANDRA-8670: providing small improvements to performance of writeUTF; and improving safety of DataOutputBuffer when size is known upfront",
  "0352a15a": "Restore performance of writeUTF; follow up commit to CASSANDRA-8670",
  "c94da6c6": "java.lang.AssertionError when reading saved cache",
  "7110904e": "Improve performance of cqlsh COPY FROM",
  "521b3631": "Use correct bounds for page cache eviction of compressed files",
  "9caf0457": "Allow invalidating permissions and cache time",
  "97d7d139": "row cache: remove annoying classpath from 'jemalloc not found' message",
  "dfd78d0e": "Serializing Row cache alternative, fully off heap",
  "e750ab23": "Introduce background cache refreshing to permissions cache",
  "f981bd59": "Increase bloom filter true positive count on key cache hit",
  "93824864": "create the cache name format only once",
  "0a0ba84b": "Make cache serializers pluggable",
  "861c4cf2": "Integrate Sigar library and add basic OS performance checks on startup",
  "75e4acbe": "Add method to invalidate permission cache via JMX",
  "e1bc6b4a": "Warn when evicting prepared statements from cache",
  "549f035b": "Allow permissions cache to be set via JMX",
  "e25d94e6": "Fix saving caches when a table is dropped",
  "f2d60577": "Avoid flushing on request threads. causes netty to over cache buffers and OOM",
  "23233b38": "Invalidate all caches on table drop",
  "eb92a9fc": "SSP doesn't cache seeds forever",
  "0947fb8a": "Filter cached results correctly.",
  "1a0aaf04": "Avoid NPE when listing saved caches directory",
  "92cb551a": "Remove left-over populate_io_cache_on_flush and replicate_on_write uses",
  "28164849": "Remove left-over rows_per_partition_to_cache",
  "9da949bb": "Improve schema merge performance",
  "baf524fe": "Remove rows_per_partition_to_cache keyword",
  "2df27c09": "Reference sstable before populating keycache after compaction",
  "5420b7a2": "More efficient executor service for fast operations",
  "ca213ccd": "Invalidate key cache on table drop",
  "93edb123": "Fix performance regression from CASSANDRA-5614",
  "6e6863d4": "make cache serializer inner classes static",
  "283175ee": "don't rely on the Integer cache for equality",
  "1f13efef": "Improve PerRowSecondaryIndex performance",
  "19444ea1": "Restore expiring->deleted (cell) compaction optimization",
  "e5b92d8a": "r/m populate_io_cache_on_flush from yaml (per-table since #4694)",
  "6ed241ac": "Fast ABSC.addAll() path + ASPCSI optimization",
  "ab6eaed8": "Make it possible to cache a configurable amount of rows in row cache.",
  "fc91071c": "Improve custom 2i performance and abstraction Patch by Miguel Angel Fernandez Diaz, reviewed by Sam Tunnicliffe for CASSANDRA-6640",
  "852e27f2": "revert CASSANDRA-6107, and cut max cached statements to 50k",
  "5edf9484": "Fix shutdown slowness in multithreaded CL. Patch by Benedict Elliot Smith, reviewed by brandonwilliams for CASSANDRA-6578",
  "13348c47": "Simplify TokenMetadata.cachedOnlyTokenMap()",
  "4be9e672": "Improve batchlog write performance with vnodes",
  "57613dc8": "Fix cache persistence when both row and key cache are enabled patch by Mikhail Stepura and jbellis for CASSANDRA-6413",
  "a16fa773": "Improve gossip performance for typical messages patch by jbellis; tested by Quentin Conner for CASSANDRA-6409",
  "8145c835": "Fix thundering herd on endpoint cache invalidation patch by rbranson and jbellis for CASSANDRA-6345",
  "2b1fb0ff": "Invalidate row cache when dropping CF patch by Fabien Rousseau; reviewed by jbellis for CASSANDRA-6351",
  "b4571566": "Improve Gossip tolerance of abnormally slow tasks patch by jbellis; reviewed by jasobrown for CASSANDRA-6338",
  "9a594c3a": "Fix reading expired row value from row cache patch by jbellis; reviewed by Mikhail Stepura for CASSANDRA-6325",
  "e7681913": "add non-jamm path for cached statements patch by Michael Stepura; reviewed by jbellis for CASSANDRA-6293",
  "91fa4672": "r/m unused IMeasureableMemory implementation now that CLHC is no longer an option for row cache",
  "7918718c": "Use AtomicIntegerFieldUpdater in RefCountedMemory to save memory in row cache.",
  "7015a7a6": "Skip loading corrupt key cache patch by Mikhail Stepura; reviewed by jbellis for CASSANDRA-6260",
  "7290abd1": "Avoid using row cache on 2i CFs patch by Sam Tunnicliffe and jbellis for CASSANDRA-5732",
  "4784e671": "Limit CQL prepared statement cache by size instead of count patch by Lyuben Todorov; reviewed by jbellis for CASSANDRA-6107",
  "df046d6b": "Allow cache-keys-to-save to be set at runtime patch by Chris Burroughs; reviewed by jbellis for CASSANDRA-5980",
  "07b4878b": "Revert 'add file_cache_size_in_mb setting'",
  "dfe49376": "add file_cache_size_in_mb setting patch by pyaskevich and jbellis for CASSANDRA-5661",
  "d2c67a1c": "r/m code to load deprecated, pre-1.2 cache format patch by jbellis; reviewed by Vijay for CASSANDRA-6031",
  "b14273b4": "Optimize name query performance in wide rows patch by rbranson; reviewed by jbellis for CASSANDRA-5966",
  "9e846d9f": "Use a range aware scanner for cleanup to improve performance.",
  "89fc5767": "Improve offheap memcpy performance",
  "dbe53c81": "improve DecimalSerializer performance",
  "422d2236": "fix KeyCacheTest to work with globalized key cache",
  "43a98c21": "Fix loading key cache when a saved entry is no longer valid patch by Fabien Rousseau; reviewed by jbellis for CASSANDRA-5706",
  "a3734e54": "remove on-heap row cache",
  "da93a1cf": "replace measureDeep in key cache with custom calculation patch by Vijay; reviewed by Jonathan Ellis for CASSANDRA-4860",
  "feae9efa": "Fix trying to load deleted row into row cache on startup patch by jbellis; reviewed by dbrosius for CASSANDRA-4463",
  "457b546e": "don't report harmless cache read problem as debug, don't rely on FileInputStream.available to always return > 0 patch by dbrosius reviewed by mkjellman for CASSANDRA-4916",
  "22f515b3": "Allow populate_io_cache_on_flush to be set per-CF. Patch by Alexey Zotov, reviewed by brandwonwilliams for CASSANDRA-4694",
  "21f63a91": "Allow populate_io_cache_on_flush to be set per-CF. Patch by Alexey Zotov, reviewed by brandwonwilliams for CASSANDRA-4694",
  "f930eb79": "fix saved key cache not loading at startup; patch by yukim reviewed by jbellis for CASSANDRA-5166",
  "1d641f51": "don't report harmless cache read problem as debug, don't rely on FileInputStream.available to always return > 0 patch by dbrosius reviewed by mkjellman for CASSANDRA-4916",
  "3e70d3ac": "off-heap cache doesn't need mutable column container patch by jbellis; reviewed by slebresne for CASSANDRA-5057",
  "31ba2890": "add isRowCacheEnabled check to getRawCachedRow; checking cache capacity in getCRI is no longer necessary since it is done by isRowCacheEnabled",
  "8d55474f": "Improve schema propagation performance patch by jbellis; reviewed by Chris Herron and xedin for CASSANDRA-5025",
  "7cfdb14e": "cqlsh: improve COPY FROM performance; Patch by Aleksey Yeschenko, reviewed by Brandon Williams for CASSANDRA-4921",
  "a05f6766": "expunge row cache post-truncate patch by jbellis; reviewed by slebresne for CASSANDRA-4940",
  "f3b636fc": "clean up row cache updating",
  "c710edf0": "add trace logging for key cache",
  "2c250c66": "corrupted saved caches patch by Vijay; reviewed by jbellis for CASSANDRA-4622",
  "08b30919": "parallelize row cache loading patch by jbellis; reviewed by vijay for CASSANDRA-4282",
  "dbf99d67": "Change nodetool setcachecapcity to manipulate global caches patch by Pavel Yaskevich; reviewed by Brandon Williams for CASSANDRA-4563",
  "aa81f84c": "change cache write progress check to cache type basis; patch by yukim, reviewed by jbellis for CASSANDRA-4533",
  "0627c8aa": "Use correct partitioner when saving + loading caches patch by jbellis; reviewed by xedin for CASSANDRA-4331",
  "8aaaacd0": "Use EntryWeigher instead of Weigher to Measuring the cache patch by Vijay; reviewed by Jonathan Ellis for CASSANDRA-4315",
  "383a608e": "only load key cache when caching is ALL/KEYS_ONLY, fix by yukim, reviewed by slebresne for CASSANDRA-4313",
  "90ce0257": "enforce 1m min keycache for auto patch by dbrosius reviewed by slebresne for CASSANDRA-4306",
  "267690a1": "fix Summary component and caches to use correct partitioner patch by Sam Tunnicliffe and Pavel Yaskevich; reviewed by Pavel Yaskevich for CASSANDRA-4289",
  "7dae25d8": "log number of rows read from saved cache patch by Sankalp Kohli; reviewed by jbellis for CASSANDRA-4249",
  "16d4c6c3": "enable keys cache and rows cache on index CFs based on setting in data CF patch by yukim; reviewed by jbellis for CASSANDRA-4197",
  "eb9f9614": "Fix bug with super columns where row cache is not updated",
  "87c068e4": "elaborate on why cache changes matter from end-user perspective",
  "f3d3b439": "make cache skipping optional patch by harishd; reviewed by Vijay for CASSANDRA-2635",
  "20bd8281": "make cache skipping optional patch by harishd; reviewed by Vijay for CASSANDRA-2635",
  "531d01c0": "remove intialCapacity from rowcache patch by Vijay; reviewed by xedin for CASSANDRA-4141",
  "2eaea5be": "remove intialCapacity from rowcache patch by Vijay; reviewed by xedin for CASSANDRA-4141",
  "33cdcaf7": "remove intialCapacity from rowcache patch by Vijay; reviewed by xedin for CASSANDRA-4141",
  "63f6c843": "update caches to use byte[] keys to reduce memory overhead patch by vijay; reviewed by jbellis for CASSANDRA-3966",
  "ef50e8f1": "Respect 1.0 cache settings as much as possible when upgrading Patch by Pavel Yaskevich; reviewed by Yuki Morishita for CASSANDRA-4088",
  "e12840e2": "make autoconfiguration happen only if key_cache_size_in_mb value was left blank in conf/cassandra.yaml (CASSANDRA-4087)",
  "25828cac": "make autoconfiguration happen only if key_cache_size_in_mb value was left blank in conf/cassandra.yaml (CASSANDRA-4087)",
  "6423bfe7": "skip reading saved key cache if CF's caching strategy is NONE or ROWS_ONLY patch by Pavel Yaskevich; reviewed by Jonathan Ellis for CASSANDRA-3954",
  "c9270f4e": "Fix race between writes and read for cache",
  "94860c6c": "avoid unproductive deserializing of cached rows during compaction patch by jbellis for CASSANDRA-3921",
  "33199c6c": "use metadata.cfId instead of re-looking it up for each cache update",
  "8eccb80a": "Don't read saved row cache when it's disabled",
  "3d55a2b0": "respect not only row cache capacity but caching mode when trying to read data patch by Yuki Morishita; reviewed by Pavel Yaskevich for CASSANDRA-3812",
  "185eca5d": "prevent slow clients from postponing shutdown indefinitely patch by jbellis; reviewed by brandonwilliams for CASSANDRA-3727",
  "b9813ed3": "a way to deactivate global key/row cache on per-CF basis patch by Pavel Yaskevich; reviewed by Sylvain Lebresne for CASSANDRA-3667",
  "295aedb2": "global key/row caches patch by Pavel Yaskevich; reviewed by Sylvain Lebresne for CASSANDRA-3143",
  "16da34e1": "bump maximum cached prepared statements to 10,000 (from 50)",
  "d016a08a": "multi-dc replication optimization supporting CL > ONE patch by Vijay and jbellis for CASSANDRA-3577",
  "ec624f50": "Improve memtable slice iteration performance patch by slebresne; reviewed by jbellis for CASSANDRA-3545",
  "a95bd467": "revert interruptible cache saving patch by slebresne; reviewed by jbellis for CASSANDRA-3566",
  "2ffe87e9": "fix loader progress bar display when the transfer was lightning fast",
  "8480f06e": "remove nonlocal DC write optimization patch by Vijay; reviewed by jbellis for CASSANDRA-3577",
  "babc1053": "Recycle commitlog segments for improved performance patch by Rick Branson and jbellis for CASSANDRA-3411",
  "9f7a83d1": "Use (Guava inspired) faster bytes comparison patch by slebresne; reviewed by jbellis for CASSANDRA-3434",
  "7a21ad27": "fix updating CF row_cache_provider patch by Marcus Eriksson; reviewed by jbellis for CASSANDRA-3414",
  "c7455fbf": "update BloomFilter to use OBS.fast operations patch by jbellis",
  "5a439b23": "remove incorrect optimization from slice read path patch by jbellis; reviewed by slebresne for CASSANDRA-3390",
  "305a06ec": "avoid including compaction cache-warming in keycache stats patch by Fabien Rousseau; reviewed by jbellis for CASSANDRA-3325",
  "6fa1eaac": "off-heap cache to use sun.misc.Unsafe instead of JNA patch by Pavel Yaskevich; reviewed by Jonathan Ellis for CASSANDRA-3271",
  "03d3669b": "Don't allow any cache loading exceptions to halt startup patch by Eldon Stegall; reviewed by jbellis for CASSANDRA-3218",
  "2a585c09": "add TrivialOneToOne MergeIterator optimization patch by jbellis; tested by brandonwilliams for CASSANDRA-3234",
  "10cd1da0": "remove unnecessary copy whenadding to row cache patch by Yang; reviewed by jbellis for CASSANDRA-3223",
  "d4c972fe": "update memtable, row_cache_provider options in CQL.textile",
  "9ede4975": "cache invalidate removes saved cache files patch by Ed Capriolo; reviewed by jbellis for CASSANDRA-2325",
  "474547cf": "stop reading cache after max size-to-save is reached patch by Chris Burroughs; reviewed by jbellis for CASSANDRA-2082",
  "e688815e": "add row_cache_keys_to_save CF option patch by Chris Burroughs; reviewed by jbellis for CASSANDRA-1966",
  "c37f1068": "fix cache mbean getSize patch by Chris Burroughs; reviewed by Ryan King for CASSANDRA-2781",
  "1a265644": "Seek back after deserializing a row to update cache with patch by jbellis; reviewed by slebresne for CASSANDRA-2752",
  "7e40e39a": "Fixed rows being cached if they do not exist. patch by goffinet; reviewed by stuhood for CASSANDRA-2723",
  "d2c98b02": "avoid using cached position of a keywhen GTis requested patch by Richard Low and slebresne; reviewed by jbellis for CASSANDRA-2633",
  "1303d12a": "cache generateValues in Inserter/IndexedRangeSlicer. Patch by Pavel Yaskevich, reviewed by brandonwilliams for CASSANDRA-2578",
  "4f6f703c": "turn off cache saving nn system CFs patch by Ryan King; reviewed by jbellis for CASSANDRA-2502",
  "0fb4df97": "Invalidate cache for streamed rows patch by slebresne; reviewed by jbellis for CASSANDRA-2420",
  "aaef16ed": "Update row cache post streaming patch by slebresne; reviewed by jbellis for CASSANDRA-2420",
  "643ef396": "Make clean compactions cleanup the row cache patch by slebresne; reviewed by jbellis for CASSANDRA-2451",
  "ef476181": "Purge tombstone from row cache (0.7 version) patch by slebresne; reviewed by jbellis for CASSANDRA-2305",
  "6f4daeac": "Purge tombstone from row cache patch by slebresne; reviewed by jbellis for CASSANDRA-2305",
  "16651d9c": "fix migrations w/ row_cache_provider patch by jbellis",
  "4b646596": "add cache loading to row/key cache tests. Patch by Pavel Yaskevich and Matthew Dennis, reviewed by Pavel Yaskevich for CASSANDRA-2227",
  "06fd5c16": "cache comparator and validator in the resultset",
  "703e148b": "Refactor row/key cache handling. Patch by slebresne, reviewed by Matthew Dennis for CASSANDRA-2272",
  "7bc35b88": "purge tombstoned rows from cache after GCGraceSeconds patch by slebresne; reviewed by jbellis for CASSANDRA-2305",
  "7ed395de": "Track and Migrate cached pages during compaction",
  "ae0275b8": "cache IColumn and reverse comparators in AbstractType patch by jbellis; reviewed by slebresne for CASSANDRA-2075",
  "9fd0cd4a": "add [get|set][row|key]cacheSavePeriod to JMX patch by Jon Hermes; reviewed by jbellis for CASSANDRA-2100",
  "1fb2d3be": "cache IndexInfo comparators in AbstractType objects patch by slebresne; reviewed by jbellis for CASSANDRA-2239",
  "197419d6": "Switch stress.java to a producer/consumer model for better performance. Patch by Pavel Yaskevich, reviewed by brandonwilliams for CASSANDRA-2020",
  "f4a68eb7": "fix cache saving on Windows patch by jbellis; reviewed by mdennis for CASSANDRA-2207",
  "5e8b0d68": "fix BRAF performancewhen seeking toEOF patch by Ivan Georgiev; reviewed by tjake for CASSANDRA-2218",
  "4db44a48": "read saved caches with DataInputStream patch by mdennis; reviewed by jbellis for CASSANDRA-2174",
  "6facf088": "don't save empty caches patch by mdennis; reviewed by jbellis for CASSANDRA-2172",
  "fd8e92e0": "copy DecoratedKey.key when inserting into caches patch by mdennis; reviewed by jbellis for CASSANDRA-2102",
  "31ca1b42": "continue starting when invalid savedcache entries are encountered patch by mdennis and jbellis for CASSANDRA-2076",
  "5e182048": "add flush_largest_memtables_at and reduce_cache_sizes_at options patch by jbellis; reviewed by brandonwilliams for CASSANDRA-2142",
  "804ce6f4": "cache versioned messages in StorageProxy. patch by gdusbabek, reviewed by jbellis. CASSANDRA-2140",
  "617369ab": "bump default key cache save period to 4h",
  "d935e680": "cache writing moved to CompactionManager to reduce i/o contention and updated to use non-cache-polluting writes patch by jbellis; reviewed by nickmbailey for CASSANDRA-2053",
  "4826e8c8": "add optimization for local reads to StorageProxy patch by jbellis and tjake for CASSANDRA-2038",
  "63c5ee64": "Add ability to invalidate row/key caches from nodetool. Patch by Jon Hermes, reviewed by brandonwilliams for CASSANDRA-1857",
  "fd104360": "increase indexLocks for faster commitlog replay",
  "3991fba4": "avoid polluting pagecache with commitlog or sstable writes and seq scan operations patch by Pavel Yaskevich and Chris Goffinet; reviewed by tjake and jbellis for CASSANDRA-1470",
  "c48abe4c": "make NameSortTest fast to make Hudson quit bitching patch by jbellis",
  "0c5abc42": "reduce log messages on startup when key/row cache saving is off patch by mdennis; reviewed by jbellis for CASSANDRA-1789",
  "0b591df6": "clear endpoint cache after updating keyspace metadata patch by jbellis; reviewed by gdusbabek for CASSANDRA-1741",
  "5897c089": "RPM spec file creates saved_caches directory. Patch by Dave Revell, reviewed by brandonwilliams for CASSANDRA-1662",
  "729022c6": "remove preload_row_cache option patch by jbellis; reviewed by brandonwilliams for CASSANDRA-1647",
  "26974cdb": "add cache save periods, default validation class, and compaction threshold to what you can edit with the cli. patch by jbellis",
  "00554e90": "move endpoint cache from snitch to strategy patch by jbellis; reviewed by brandonwilliams for CASSANDRA-1643",
  "07744cea": "add row/key cache save periods to CfDef. patch by Jon Hermes; reviewed by jbellis for CASSANDRA-1606",
  "52b7aeef": "Point saved_caches in testing conf to build/test instead of /var/lib",
  "14062b96": "lock row cache updates to prevent race condition patch by jbellis; reviewed by brandonwilliams for CASSANDRA-1293",
  "f5ed28f5": "making endpoint cache volatile is unnecessary since we're using NBHM. patch by jbellis",
  "477deb3a": "faster LongType comparisons. patch by Folke Behrens; reviewed by jbellis for CASSANDRA-1393",
  "1defd006": "add back percentage option for cache size configuration, and replace SnakeYAML with YamlBeans. patch by Jon Hermes; reviewed by jbellis for CASSANDRA-1313",
  "c8f66193": "move endpoint cache from ARS to AES. patch by gdusbabek, reviewed by jbellis. CASSANDRA-1350",
  "31b5382c": "take advantage of row cache during range queries where possible. patch by tjake and jbellis for CASSANDRA-1302",
  "67b39ac8": "handle subcolumn queries in cache fast-path, fixing system test regressions introduced in CASSANDRA-1267. patch by jbellis",
  "a393b927": "performance improvements to removeDeleted on read path. patch by jbellis and tjake for CASSANDRA-1267",
  "67c57208": "Dynamic snitch to adaptively avoid reading from slow nodes. Patch by brandonwilliams; reviewed by jbellis for CASSANDRA-981",
  "7b3fdb25": "avoid frequent autoboxing by leaving cfId an Integer, and similar optimizations. patch by Folke Behrens; reviewed by jbellis for CASSANDRA-1247",
  "86564179": "detect partitioner changes and fail fast. patch by gdusbabek reviewed by jbellis. CASSANDRA-1169",
  "d338a977": "rename preloadRowCache to preload_row_cache in yaml for consistency. patch by Vijay Parthasarathy; reviewed by jbellis for CASSANDRA-946",
  "71c51f11": "add row cache preload option patch by Vijay Parthasarathy and jbellis for CASSANDRA-946",
  "d931457c": "treat 1 as 100% for cache configuration. patch by Vijay Parthasarathy; reviewed by jbellis for CASSANDRA-946",
  "75c031da": "precompute Descriptor hashcode since it's used a lot in key cache. patch by jbellis",
  "db1bebf1": "avoid accidentally generating a cache read statistic on writes to cached CFs. patch by jbellis; reviewed by Brandon Williams for CASSANDRA-770",
  "496ab23d": "more-efficient stat tracking for caches patch by jbellis; reviewed by Brandon Williams for CASSANDRA-702",
  "a6e72039": "better division of aggregated capacity among sstable caches patch by jbellis; reviewed by goffinet for CASSANDRA-708",
  "56053d3b": "add cache info to cfstats; add setcachecapacity patch by jbellis; reviewed by goffinet for CASSANDRA-708",
  "d6682ffb": "use 0-capacity cache instead of null to indicate no caching; this means we don't need to worry about creating & destroying cache objects from JMX patch by jbellis; reviewed by goffinet for CASSANDRA-708",
  "6065d714": "invalidate cache after compaction so we read what's in the new sstable instead of the cache patch by jbellis; reviewed by goffinet for CASSANDRA-719",
  "3473ca4e": "approximate capacity setting in key cache by adjusting each sstable cache by the desired ratio patch by jbellis; reviewed by goffinet for CASSANDRA-688",
  "45b9525c": "allow setting row cache size from jmx patch by jbellis; reviewed by goffinet for CASSANDRA-688",
  "72a9a4ea": "add JMXAggregatingCache to present all the SSTR keycaches in one mbean patch by jbellis; reviewed by goffinet for CASSANDRA-688",
  "1dc42795": "move cache classes to cassandra.cache package. patch by jbellis; reviewed by goffinet for CASSANDRA-688",
  "0e276b5a": "add missing gcBefore parameter to removeDeleted; clone SC from cache before modifying patch by jbellis; reviewed by goffinet for CASSANDRA-689",
  "70e1ee30": "fix enabling/disabling row cache. patch by jbellis; reviewed by goffinet for CASSANDRA-689",
  "27f17db6": "update cached rows in-place instead of invalidating & reloading. should make it more suitable for relatively wide rows, especially if updates are to a small number of columns. patch by jbellis; reviewed by goffinet for CASSANDRA-678",
  "9a486949": "make rowcache, keycache configurable per-CF patch by jbellis; reviewed by goffinet for CASSANDRA-678",
  "ab800ad8": "row cache instrumentation patch by jbellis; reviewed by goffinet for CASSANDRA-678",
  "e6df9009": "clean up Table/CFS onstart to fix cache size calculation (need key count so it's not zero) patch by jbellis; reviewed by goffinet for CASSANDRA-678",
  "98c267fe": "TcpReader is slow because of using Exception handling in the normal path; patched by junrao; reviewed by Bradon Williams and jbellis for CASSANDRA-675",
  "a82ebebf": "add --keep-going option to continue past exceptions (e.g. to keep hammering server after timeouts start). check get return value and raise when expected key is not present (cassandra can skip missing keys really really fast but that is not what we want to measure here). patch by Brandon Williams; reviewed by jbellis for CASSANDRA-676",
  "c1f2757d": "Repair should never reuse a tree. AEService currently 'caches' MerkleTrees that have been generated by the local node, and can respond to a request for a tree with a cached version. patch by stuhood; reviewed by junaro for CASSNADRA-640",
  "75db7b59": "Change convertFromDiskFormat to use substring splitting vs using split operation (slow). patch by goffinet; reviewed by stuhood for CASSANDRA-581",
  "ab392a6e": "remove buggy concurrentlinkedhashmap library and lru cache. too late in 0.4 to try to debug the library -- will revisit for 0.5. patch by jbellis; reviewed by Chris Goffinet for CASSANDRA-405",
  "fa53f588": "make default OPP non-collating (compare is faster). patch by jbellis; reviewed by Sammy Yu for CASSANDRA-339",
  "574cb8f5": "Use arrayblockingqueue in commitlog executor; this cleans up the code a bit (performance is unaffected since the writes and syncs are far more expensive than any queue ops) patch by jbellis; reviewed by Jun Rao for CASSANDRA-182",
  "b54de30a": "per-table key cache size. patch by jbellis; reviewed by Jun Rao for CASSANDRA-259",
  "013d59fc": "add concurrentlinkedhashmap cache and config option. config option is NOT yet wired up to control cache sizes. patch by jbellis; reviewed by Jun Rao for CASSANDRA-259",
  "0077af40": "add isDebugEnabled check for logger.debug for performance. patch by goffinet; reviewed by jbellis for CASSANDRA-174",
  "f55dd06e": "avoid optimization of not checking older memtable and SSTables if we find _an_ answer early on; it causes bugs",
  "f9a1343d": "make static methods of SSTable that take a filename and then use the cache to grab an sstable object, simple non-static methods instead patch by jbellis; reviewed by Eric Evans for CASSANDRA-224",
  "d48d8fcb": "r/m unused code dealing with sstables, and ConcurrentWriter / FastConcurrentWriter. mmap is not faster than write() for sequential I/O, which is what the vast majority of our writes are. mmap _does_ have an advantage when we seek back to the start of a commitlog segment to update the headers after memtable flush, but we do that infrequently enough that it's not worth the disadvantages (primarily, blowing up if we exceed the 4MB size). patch by jbellis; reviewed by Eric Evans for CASSANDRA-224",
  "24fcbf4a": "switch singleton implementation from double-checked-locking to synchronized (code is not performance-sensitive). patch by Edward Ribeiro; reviewed by jbellis for CASSANDRA-228",
  "72e6eea9": "split sstable into data, index, and bloom filter files. this allows us to avoid saving up index chunks in memory until the sstable data is completely written, while still allowing fast scanning of the index on startup. it also simplifies the sstable/sequencefile code considerably. patch by jbellis; reviewed by Jun Rao for CASSANDRA-208",
  "04344cbb": "replace JenkinsHash w/ MurmurHash. its hash distribution is just as good, and it's faster"
}, "cat": {
  "5343cbd": "optimize the sql resolve performance with too many parameters",
  "93665ef": "springMVC以AOP方式对url、service、sql、cache进行埋点",
  "06e1bdc": "springMVC以AOP方式对url、service、sql、cache进行埋点",
  "9a107c3": "filter cache.web",
  "5f5ef06": "make cache map key first letter uppercase",
  "3a06d5d": "modify the cache",
  "a4411e6": "add the sql cache and make delete job asyc",
  "50ea37b": "add the sql cache",
  "113f141": "add the cache doc",
  "4a73d9b": "fix cache report hit rate bug",
  "2e7ee23": "refactor cache report",
  "d722c91": "refactor cache report",
  "ebbcb27": "remove cache from overload module",
  "27981df": "refactor updater module and add OverloadReport cache",
  "6e8ecc9": "fix performance issue",
  "d4e5f53": "fix host info and project cache bugs",
  "e1e45e5": "add the baseline cache",
  "94f2a6c": "modify the baseline service cache size",
  "18c59ec": "modify the cache",
  "686c25e": "modify cache task",
  "561b9c9": "message decode performance tuning",
  "69d1350": "fix performance issue",
  "6226926": "refactor performance test",
  "bee0e89": "modify the cat cache report",
  "cf21a52": "add the cat cache jsp",
  "62fed3f": "fix cache type bug",
  "1430018": "remove cache",
  "2f07ef2": "fix cat bug week and month cache",
  "bca7613": "modify the realtime consumer message cache size",
  "3e1725f": "remove cache of domains",
  "c5647d3": "modify the cat domain cache problem",
  "3b98c97": "modify to improve performance",
  "1871f8a": "modify the cache and dashboard all ip show error",
  "df382ca": "modify the performance issue and css issue",
  "5194eb1": "performance modify",
  "b571e84": "fix the performance issure",
  "5987d73": "refactor the weekly and month cache bug",
  "d83d0f4": "dump performance tuning",
  "48e3366": "modify the cat cache report",
  "d45e72f": "modify the cat cache and cross report",
  "4b3aafa": "modify the cat cross and cache report",
  "76e0ecb": "modify the problem report ,add the long cache problem"
}, "CC": {
  "342313d": "modify README: fast get item from cc.params and cc.data"
}, "cglib": {
  "e386b4e": "Merge pull request #140 from cushon/cache",
  "ef9ccb4": "Fix two bugs: 1) Ensure that NamingPolicies that doesn't check the predicate still get their names reserved. 2) Fix the double-checked locking when looking up cached ClassLoaderData, otherwise we lose reserved names & generation data and lead to duplicating classes accidentally (if multiple threads try to create subclasses for a single classloader at the same time).",
  "bbe5c52": "Merge pull request #73 from cglib/fix-cache",
  "ef8fdd4": "Merge pull request #53 from vlsi/concurrent_cache",
  "05f830f": "Implement concurrent cache of generated classes, improve performance of Enhancer",
  "1dee658": "Implement hashCode customizer for KeyFactory to improve Type.hashCode calculation performance",
  "6f19448": "test fastclass caching",
  "4467a17": "fix geronimo fastclass bug (superclass method inaccessible due to class' package visibility)",
  "2c5b331": "MethodInterceptor startup performance",
  "9076128": "inline method initialization code into method stubs, for faster startup",
  "880f7b3": "instance cache was removed, it is too dangerous",
  "80870e0": "workaround to avoid callback reference in cache",
  "4b32591": "optimization",
  "86bf95f": "pass naming policy and generator strategy to fastclasses generated by enhancer",
  "3c85d54": "cache test CVS----------------------------------------------------------------------",
  "49b271b": "don't cache hash code",
  "2220512": "Add reflect performance test",
  "4940cce": "Add new 'reflect' package--generic reflection optimization classes",
  "f19c349": "FactoryCache refactoring Improved performance, added base class and routing parameters, remove multicasting code",
  "bbfaae5": "Cleanup enhanceClass code by having separate Class cache.",
  "95fb3f8": "Add makeSuperBean support to Delegator. Put common cache handling code into FactoryCache. Fix bug with delegating enhancer and abstract methods.",
  "c2e9888": "minor optimization in byte code",
  "d808d88": "added more info for performance test report",
  "9fdb002": "MetaClass and performance test"
}, "ChatKit": {
  "8816f7d": "messages types optimization"
}, "checkstyle": {
  "fc2bdfeb": "Issue #12978: Upgrade actions/cache to v3",
  "258c7928": "Issue #12809: Improve performance of lambda processing",
  "12a402dd": "Issue #12571: update all release action to have 'Setup local maven cache' step to optimize download of artifacts",
  "86802a5f": "minor: add another way to quietly fail the cache cleanup",
  "79ca3a35": "infra: added quarterly cache clean up for travis",
  "687dac2f": "infra: create build cache",
  "3eca7e0e": "Pull #12102: removed custom cache for resource bundle cache for messages",
  "763773c8": "infra: remove cache from drone execution(#11877)",
  "1affb1e3": "Issue #11727: Include CDG Accelerator Plugin to boost pitest performance",
  "cf194814": "Issue #11817: speedup cache.tar download (dropbox)",
  "12bc4b34": "Issue #11566: call to set.removeAll may work slowly",
  "fdc12758": "Issue #4845: added suppressions to allow slow issue fixing",
  "ce4deb6e": "Issue #10065: cache for Drone ci maven dependencies",
  "4610617d": "infra: clean semaphore cache due to corrupt jarfile ecj-4.17.jar",
  "6770b86d": "Issue #9203: Github action CodeQL should use maven cache",
  "b925c65a": "Issue #9116: add dependencies cache for maven in github actions",
  "be351cdb": "infra: skip azure cache only if explicitly defined; not defined is expanded: eq('', 'false')",
  "1a349ebb": "infra: move spellchecker to one of first job in Travis to fail faster",
  "5cdab296": "Issue #6949: use cached english.words at checkstyle.sourceforge.io",
  "53fd6257": "Issue #6919: warm up maven cache in batch mode to avoid progress output to log",
  "b3736cca": "config: enable PMD cache",
  "9a2f293c": "Issue #6619: Update cached Google Style Guide",
  "db09410b": "Issue #6490: Add cached version of 'Code Conventions for the Java(TM) Programming Language'",
  "f3700ce6": "Issue #2883: removed cache from treewalker",
  "8e7d3578": "Issue #6297: removed files from cache when an exception occurs",
  "ba435b8e": "Issue #6096: improve performance with not lazy usage of file.lastModified()",
  "18d0a14e": "Issue #6185: move cached google style to git repo to be part of web site generation",
  "e813853e": "Issue #6093: fix problem with circle-ci ability to restore cache",
  "fa84a2c4": "Issue #6077: cache decoration-1.0.0.xsd file in our repo",
  "b83304b2": "Issue #5831: print cache sizes to keep them under control",
  "501c8f7a": "Issue #5603: Use category/java/performance in the PMD config",
  "c2e24ec8": "spelling: performance",
  "9dfcdd6f": "config: small optimizations for release.sh",
  "30642adc": "Pull #5505: Use StringBuilder instead of StringBuffer as it offers high performance in a single thread locations as is generally the case",
  "538142b8": "Revert 'Issue #5086: place 'set +e' for travis's pmd/findbugs/spotbugs to let cache to be created'",
  "95c5793b": "Issue #5086: place 'set +e' for travis's pmd/findbugs/spotbugs to let cache to be created",
  "b6f975e8": "Revert 'config: revset pmd build item to most simple phase to let it pass and create cache on Travis'",
  "847b67b2": "config: revset pmd build item to most simple phase to let it pass and create cache on Travis",
  "546bae16": "minor: move file fast-forward-merge.sh to .ci/fast-forward-merge.sh",
  "1f1985f4": "Issue #2600: fix for correct downloading of eclipse compiler to cache",
  "a5163733": "minor: update to remove old local fork that is left after problematic rebase in fast-forward-merge.sh",
  "52347da4": "minor: update to remove old local fork that is left after problematic rebase in fast-forward-merge.sh",
  "adb98aa4": "Revert 'config: remove com/github/hazendaz in wercker cache'",
  "3ab57483": "config: remove com/github/hazendaz in wercker cache",
  "ec159c79": "Issue #4101: changed external resources in cache to have special prefix",
  "4cff2eb7": "Issue #3771: fixed in NPE in cache for HeaderCheck",
  "8df31cac": "minor: change for google cache date",
  "38d519ce": "config: fixed issue with appveyor and corrupted maven cache",
  "a6e50f74": "config: added notice about hardcoded cache file",
  "6f82844f": "Issue #3487: turned on checkstyle cache for developers",
  "441d2d37": "doc: note was placed to TranslationCheck that it has problems with Checker cache",
  "56cc1141": "Issue #3488: save files into cache with no un-suppressed violations",
  "c2847eae": "Issue #3489: restore config hash on property cache clear",
  "4b7adec5": "Issue #3486: clear childCount field cache in DetailAST",
  "2577c412": "Issue #3466: Clear branchTokenTypes field cache in DetailAST before changing its structure",
  "be4fb169": "config: fix for release.sh to be fail fast if release info is not defined",
  "ecbeaa6e": "Issue #407: Fix cache usage in presence of modules which use external resources for configuration (#3092)",
  "27537e9a": "Issue #1064: fixed slow javadoc antlr parsing (#3055)",
  "d46c2cf0": "Issue #569: Move TreeWalker cache to Checker",
  "f419b4bf": "minor: symplification of fast-forward-merge.sh",
  "30a82831": "spelling: Correct spelling for fast-forward-merge.sh",
  "cf9fd2e6": "Issue #2815: change mvn command in circleCI cache",
  "5b3ba10b": "Issue #2815: improve cache in 'CircleCI'",
  "bc034f53": "Issue #2575: Create directory structure needed to store cache file",
  "8872c5d5": "doc: explanation comment was added to fast-forward-merge.sh",
  "690b0977": "infra: warm up macos cache",
  "79a7478e": "infra: warm up macos cache",
  "92875ba7": "infra: warm up macos cache",
  "4be3474b": "infra: warm up macos cache",
  "d2834b4d": "infra: warm up macos cache",
  "900bbe70": "infra: warm up macos cache",
  "0bff657f": "Issue #2129: logging as WARN for misconfigurated Check is changed to Exception, we should fail fast.",
  "f2dacddd": "minor: update for --ff-only and fail-fast",
  "56489da8": "config: timeout for linkcheck plugin was extended to allow avoid error for github issue page that have too much content, so loading slow",
  "4a10d4a1": "appveyor: matrix: fast_finish: true",
  "76d9a1c6": "appveyor, fast_finish is introduced",
  "86d6ac13": "Revert 'appveyor, fail_fast is introduced'",
  "8f084de4": "appveyor, fail_fast is introduced",
  "901dce39": "appveyor is extremely slow and timeout each build, so lets skip 'site' biuld for now",
  "bbee0df0": "hack to let appveyor cache maven repo",
  "1ed528ec": "hack to let appveyor cache maven repo",
  "2b0d8e68": "Revert 'appveyor skip verify to let it cache maven repo'",
  "de695a37": "appveyor skip verify to let it cache maven repo",
  "82561146": "link to cached Google Java Style page was added",
  "0a5c414f": "Make cobertura and coveralls build faster. #1176",
  "eaf79656": "update for travis - branches:master , matric:fast_finish",
  "c8c02fc8": "attempt to use cache",
  "bb1646fb": "Provide exclusions for PMD 'optimizations' ruleset, issue #942",
  "b798438e": "Add test for non existing cache file, issue #921",
  "ebd4afde": "Deleted cache from Utils class + unified setters with patterns",
  "ca634f7c": "Replace `StringBuffer` with `StringBuilder` to improve performance",
  "bc36fe40": "using BitSet for indent levels for performance",
  "cba6fc8b": "FileContents.getLines performance fix",
  "dc787c89": "Added method to clear cache",
  "e82a3d21": "script to make linear history (fast forward) in git",
  "c6edc74a": "performance improvement",
  "06e8a4ea": "Simple implementation of a LIFO Stack that can be used instead of java.util.Vector which is synchronized. Will help performance.",
  "3296ba06": "Use ints for checksums instead of longs. This reduces memory footprint and further improves performance by a few percent.",
  "40f4c37a": "Major performance inprovements in StrictDuplicatecode check, which now uses checksums over sequences of lines instead of checksums over individual lines.",
  "864c681e": "Applied fix for cache file from patch 1012389",
  "685d1101": "Integration of patch 1214386 to improve checkstyle performance.",
  "201e6c46": "first cut at duplicate code detection tool. TBD: - performance optimizations - remove basedir from secondary file name",
  "24669551": "performance: don't concatenate Strings in a loop",
  "ebfc07bc": "small performance improvement, avoid recalculation of fileName in File.getName()",
  "151fd548": "close cachefile streams, fixes bug #655016",
  "960d7d03": "close cachefile streams, fixes bug #665016",
  "28753ca5": "performance improvement: avoiding charAt range checks is worth the cost of toCharArray",
  "4e0914c7": "performance improvement - eliminate multiple instance creation for tree context HashMap. Still at the top of the performance hit parade for Checkstyle non-parsing methods.",
  "3badd996": "performance improvement - eliminate multiple instance creation for context HashMap. Still at the top of the performance list of Checkstyle non-parsing methods.",
  "7e083cf6": "cache ResourceBundles, approx 8% perf improvement",
  "58517365": "modified to use an array of names for improved performance",
  "d471c9cd": "override read(), leads to ~10 percent performance increase",
  "d144d691": "clear childCount cache when branch is thrown away",
  "7b849d58": "Implemented a factory to create RE objects. Also improved error handling. This may improve performance?",
  "030798a1": "incorporate performance patch"
}, "ChipsLayoutManager": {
  "c2f79fb": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video scrolling controller fix : fast scroll to start build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video scrolling controller fix : forward scrolling with padding",
  "8b2a75b": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video scrolling controller fix : fast scroll to start",
  "2f5c9f6": "Merge branch 'feature/orientation_position_cache' into dev",
  "5fa05c8": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video cache issue on orientation change finally resolved",
  "cd04148": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video restoring cache implemented for orientation changes",
  "e329649": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video view cache storage not working",
  "ee6daae": "Merge branch 'test' into feature/orientation_position_cache",
  "3a5dd5e": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video fixed overscrolling build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video fixed child views leak build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video fixed cache problems",
  "fc64980": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video changed package name to chipslayoutmanager + ChildViewsIterable + fill removed view cache in pre-layout",
  "23e8f11": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video clean up, anchorViewPosition build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video comments added build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video clearing cache moved to end of fill method",
  "c8128df": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video remove cache fix",
  "bfba29a": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video chips layout manager recyclerView cache size updated",
  "cc20f7a": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video removed saving/restoring cache on rotation",
  "ad110bb": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video reverted storing views to the cache to abstract layouter",
  "59fb976": "+ saving/restoring normalization position on orientation changes build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video moved storing views to the cache to abstract layouter",
  "dee80ad": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video remove previous end row cache",
  "17be8ff": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video rebuild cache with normalization position build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video removed not available cache limitation from Readme build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video updated version name to 0.0.2-beta",
  "64790d1": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video implemented purging cache from position",
  "490907a": "+ implemented max cache size settings",
  "91980d6": "build.gradle ChipsLayoutManager debug.jks gradle gradle.properties gradlew gradlew.bat images LICENSE projectFilesBackup README.MD sample settings.gradle video implemented cache for RTL layout",
  "4668a87": "Merge branch 'master' into cache_positions"
}, "chuck": {
  "": ""
}, "chunjun": {
  "2a6814a": "[feat-#1647][hdfs] Support to generate an empty file with a specified file name in the target directory, and other optimization",
  "afc7d51": "[feat][jdbc]improvement jdbc read/write performance (#1488)",
  "9d06b7d": "[feat-#1470][ftp] improvement ftp read/write performance (#1483)",
  "c664cc2": "[Improve][Clinet-#1426] delete tmp flink-distribute-cache-xxx dir after job is done (#1427)",
  "b044c34": "update com.fasterxml.jackson.dataformat:jackson-dataformat-cbor 2.9.10 to 2.11.4 (#1309)",
  "f27cbdd": "[Improve][Connector][Kafka] update com.alibaba:fastjson 1.2.79 to 1.2.83 (#1303)",
  "048d796": "[feature-#1001][kafka] Update version of fastjson to 1.2.83.",
  "eb9e457": "[hotfix-53286][jdbc] Fix the DynamicPreparedStmt cache invalidation of the same table caused by different RowKind.",
  "a30d918": "[hotfix][ticdc] Shade alibaba-fastjson.",
  "2d2b732": "[opt][hdfs]Code optimization",
  "7bb891f": "[opt][stream] RowData data type conversion code optimization",
  "8ca7f13": "[opt][core] Code optimization",
  "8123158": "[feat-886][core] code optimization",
  "c3684cb": "[feat-886][core] AbstractLruTableFunction code optimization",
  "03185de": "Merge pull request #152 from DTStack/dependabot/maven/flinkx-core/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "a546841": "hbase reader performance",
  "d28f79e": "performance",
  "373d220": "add log and optimization code",
  "ec2dc68": "optimization code",
  "8c8f89c": "Es reader and writer plugin: add doc, optimization, bugfix"
}, "cim": {
  "": ""
}, "CircleImageView": {
  "": ""
}, "CircleIndicator": {
  "bf5fff8": "Improve performance"
}, "CircleProgress": {
  "": ""
}, "circular-progress-button": {
  "b0a888e": "v1.0.3 Implemented indeterminate progress Fixed performance issue"
}, "citypicker": {
  "": ""
}, "CityPicker": {
  "": ""
}, "clojure": {
  "adfad02": "CLJ-2740 Eliminate unneeded call in new fast drop support",
  "b30a990": "CLJ-2663: Added a guard in APVector#doEquiv so that List operands that do not respond to #size are not checked. Also, added count short-circuit logic to ASeq#equiv in an attempt to leverage fast-count benefit, but the guard is more strict such that this and the operand should bouth be Counted.",
  "736c7a0": "CLJ-1879: Make old slow path (clojure.lang.IPersistentMap) reduce over seq of Map.Entry instances and extended to Object -- this is the new slow path. This change makes it general enough to deal with 'seqs to Map.Entries', detaching it from any fully-enumerable set of types.",
  "9048707": "CLJ-2070: faster clojure.core/delay",
  "9960566": "CLJ-2210: cache non-trivial getJavaClass/hasJavaClass to avoid exponential compilation times",
  "a1c3daf": "CLJ-1224: cache hasheq and hashCode for records",
  "b7199fb": "fail fast & when accept re and failed secondary preds",
  "c3be002": "CLJ-668 improve performance of slurp via jio/copy",
  "3a11e27": "CLJ-1765 areduce speed optimization",
  "c57c404": "CLJ-1618 - Support IReduceInit in set, improve performance",
  "8599507": "CLJ-1408 - make cached string value of Keyword and Symbol transient",
  "c9e7064": "faster kw and sym creation",
  "3471585": "faster kw and sym creation",
  "63ff68d": "CLJ-1355 - restore cached hashCode for Symbol and (uncached) hashCode for Keyword",
  "9350593": "align the structure of hasheq/dohasheq with equiv/pcequiv to avoid deoptimization of hash by hotspot",
  "d77489d": "cache hasheq() for seqs, sets, vectors, maps and queues",
  "1f90942": "support internal reduce at coll, not just seq, level, provide fast default for all Iterables",
  "405d24d": "fast path for (= char char)",
  "c853f5f": "gaming performance of the build box",
  "684fca1": "Make BigInt ops faster when values are small enough to be treated as longs",
  "8b94a54": "Fix CLJ-801: protocol's method cache falls back to using a map when shift-mask table won't work, instead of throwing an exception.",
  "34489bd": "case changes: handles hash collisions, can emit return type, performance path for all-int test constants",
  "1aeb592": "#748: fast, no alloc path for diffing equal objects",
  "b5fc9ff": "add missing overloads for numerics to prevent major performance regression due to clojure.core functions making slow reflective calls",
  "2853173": "cache newline system property in a private var #300",
  "d811223": "Use Unbound for unbound var roots. Get rid of per-fn var value caches.",
  "c643a37": "use statics for var cache",
  "d100639": "Stable var caching. The values of non-dynamic ns-resolved (def'ed) vars appearing by name in code are fixed at fn entry point, and will be cached for subsequent calls until the vars change (e.g. via a new def). Access to unbound vars will not always throw an exception, and may instead return Unbound objects. These Unbound objects throw exceptions when invoked.",
  "2987bcd": "don't recache matched target class in protocall call site",
  "1f52d7d": "make method impl cache most recent entry non-volatile",
  "da14cbb": "factor out cache clearing to Util helper",
  "0f4b649": "clean out dead entries in dynamic class cache",
  "eb4502c": "make get-in faster #256",
  "4997e80": "make join faster #359",
  "45b5486": "eliminate reflection from bit-shift slow path #355",
  "8c16415": "put method impl cache on fns themselves, get rid of box",
  "6347631": "make protocol cache/satisfies? nil-tolerant, ditto supers/bases",
  "8b93c4f": "fix cache table setup",
  "e73abec": "proxy now caches generated classes per namespace and include a hash to distinguish proxy classes implementing homonymous interfaces. Fixes #181",
  "240969a": "Interim checkin - DO NOT USE!! Unless you are interested in helping test: AOT compiler! build and start Clojure with: -cp ./classes:./src/clj:clojure.jar try: (do (compile 'clojure.core) (compile 'clojure.set) (compile 'clojure.xml) (compile 'clojure.zip)) restart Clojure - faster? rebuild Clojure w/o clean, should get faster start from jar alone deleted set/xml etc dirs Moved clojure ns to clojure.core, moved set/xml etc up out of dirs New binding syntax (breaking change) for: doseq dotimes with-open when-first if-let when-let plus: new print-dup functionality for replica generation of compilation constants new *print-dup* flag, prints duplicators back to simplified readably printing for repl readable fns, as long as they are not closures",
  "a8307cc": "seq optimizations",
  "42e5b5d": "removed support for finalize, as providing stub causes it to exist, with great performance cost",
  "1a7c881": "removed 'no box on statement' optimization so pops align",
  "2c04ba2": "host call/return/if optimizations",
  "8854154": "got rid of cache, intern table",
  "0a6ceab": "added cached val for non-locked, non-current reads",
  "fa6d4d3": "support for replace at same key, various renaming, FullNode optimization"
}, "closure-compiler": {
  "27f6347d": "Improve performance of InlineSimpleMethods in pathological edge case",
  "dccef736": "Move `goog.getCssName()` processing to optimizations",
  "f6276da9": "Fix incorrect optimization that inlines `super.x()` to `super.x`",
  "b15ce7c4": "Correct useless label optimization when a label is nested within a label. Fixes github issue #3946",
  "f84c81bb": "Fix potential misoptimization of variables/properties in logical assignments",
  "6cf22c8b": "Improve quadratic performance edge case in JSType->Color serialization",
  "49b3cd49": "A few small optimizations for SourceFile",
  "2d553425": "Fix global RegExp optimization w/ typed ast",
  "decbeec1": "Slightly improve PeepholeMinimizeConditions when skipping type-based optimizations",
  "88f2cf49": "Skip color deserialization if not running type-based optimizations",
  "2f81505f": "Run late l10n optimization loop after flowSensitiveInlineVariables",
  "9df3a382": "Minor improvement to JSDocInfo creation performance: be lazy about creating the license deduplication set.",
  "6cfdab3d": "Improve the performance of IRFactory.normalizeString. indexOf is much cheaper than replaceAll, we expect \r to be rare so use indexOf to short circuit the use of replaceAll.",
  "8699e52b": "prevent optimization backoff on global variables with TypedAST",
  "c7ba7561": "Fix extra pass reruns when AST has not changed in optimization loop",
  "0fbff7c3": "Move safety checks to the end of optimizations",
  "c4298916": "Clean up AstFactory methods that work with JSTypes but not optimization colors",
  "f71e4d44": "Changes peephole optimizer to modify comma expressions in one invocation, rather than splitting off one child per invocation and requiring multiple optimization passes.",
  "2be51ee8": "Move logical assign & numeric separator transpilation to early optimizations",
  "b0f52600": "Move ES2020 transpilation into early optimizations",
  "01879632": "Move RewriteCatchWithNoBinding into early optimizations",
  "f10df852": "Move RewriteAsyncIteration into early optimizations",
  "9b71351d": "Move RewriteObjectSpread into early optimizations",
  "cc94063b": "Move ES2017 transpilation into early optimizations",
  "5570b9f2": "Move Es7RewriteExponentialOperator into early optimizations",
  "54bdb3e7": "Move ReplaceClassFields into early optimizations",
  "df0adf50": "Move remaining ES6 transpilation to early optimizations",
  "24a14995": "Move Es6ConvertSuper into early optimizations",
  "524f6123": "Move destructuring transpilation passes into early optimizations",
  "9a8bb21d": "Es6RewriteArrowFunction and RewriteNewDotTarget into early optimizations",
  "59f049c3": "Fix misoptimization of 'goog.reflect.objectProperty'",
  "c95f7bda": "Move Es6RewriteClass and Es6ExtractClasses into early optimizations",
  "2ec99a0f": "Add class field integration tests for optimizations",
  "e81eb428": "Rollforward of cl/390223340: Remove peephole optimization folding RegExp ctor -> regexp literal",
  "fc3819c4": "Rollback of: Remove peephole optimization folding RegExp ctor -> regexp literal",
  "7b7faab5": "Remove peephole optimization folding RegExp ctor -> regexp literal",
  "d1f19507": "Move Es6RewriteClass and Es6ExtractClasses into early optimizations",
  "9f4fb756": "Rollback: Move Es6RewriteArrowFunction and RewriteNewDotTarget into early optimizations",
  "444a2fee": "Add test cases for class fields in various optimization passes that don't need updating",
  "b3683e53": "Move Es6RewriteArrowFunction and RewriteNewDotTarget into early optimizations",
  "6b7bd3aa": "Move Es6RewriteClass and Es6ExtractClasses into early optimizations",
  "7493eeee": "Move Es6RewriteRestAndSpread into early optimizations",
  "49885af7": "Move LateEs6ToEs3Converter into early optimizations",
  "023718e5": "Move Es6ForOfConverter into early optimizations",
  "d2d462a5": "Move Es6RewriteBlockScopedFunctionDeclaration into early optimizations",
  "957ee573": "Move Es6RewriteBlockScopedDeclaration to the beginning of optimizations",
  "dbe0ede2": "Move Es6RewriteGenerators to the beginning of optimizations",
  "f442248f": "Add scaffolding for running transpilation at the start of optimizations",
  "c77665d1": "Return an AstFactory with color support during optimizations",
  "08f4c7ce": "Store a cached GlobalNamespace on the compiler for use in transpilation",
  "270b05cd": "[rollforward of] Move goog.provide rewriting to the optimizations phase",
  "1152f8c0": "Add test cases for class fields in various optimization passes that don't need updating",
  "d0b6e89e": "[rollback of] Move goog.provide rewriting to the optimizations phase",
  "bc1342f3": "Move goog.provide rewriting to the optimizations phase",
  "ff6c5952": "Amend AmbiguateProperties to treat public class fields Part of optimization check updates.",
  "c6f300ba": "Amend RenameProperties to include public class fields and fixed TypedAstSerializer public class field error Part of optimization check fixes. TypedAstSerializer fix was result of error found in optimization update.",
  "6f09899f": "Wire up the deferred localization processing. - add the passes to DefaultPassConfig so that preprocessing happens before optimizations and substitution happen during finalization. - add serialization of the 'locale data' so the data is preserved between optimizations and finalization. - add an integration test - simplify CompilerOptions methods to make it clearer the relationship between the options.",
  "4820e0d6": "Move JSDoc strings into the TypedAST StringPool cache",
  "66af7e57": "Cache a constant UnionType used in TypeInference for a substantial performance savings.",
  "06567ce4": "Drop RefasterJS sources.",
  "b7b3d17c": "`NodeUtil.canBeSideEffected` performance improvement",
  "75c21b42": "Move security-related refasterjs templates and tests into a subdirectory.",
  "cccf0efe": "Use a single cached copy of Token.values() when (de)serializing Nodes.",
  "2981beb8": "Improve peephole optimizations of unnecessary BLOCK nodes",
  "ee92006b": "Switch 'class side inhertiance' pass to be a normal optimization pass",
  "da49247d": "Remove unused JSType support in optimization passes",
  "91f73b27": "Add @suppress annotations to the optimization JSDoc",
  "588820a7": "Move `assertAllOneTimePasses` directly before the first optimization loop",
  "faac4a84": "Avoid create a List iterator for every node when performing Peephole optimizations.",
  "0674f972": "Fix misoptimization of class @implements class in Disambiguate v2",
  "b3f08c72": "Decrease # of caches in type => color serialization",
  "877a6402": "Prune 'weak' files at the end of checks instead of start of optimizations",
  "1a4571b2": "Create an optimization to remove trivial ES6 class constructors where the implicit constructor is equivalent.",
  "88f680ef": "Make ProcessDefines explicit about whether it will do checks and/or optimizations.",
  "0eb8e888": "Code corrections, minor performance and readability improvements.",
  "ea531358": "Add optimization JSDoc necessary for CollapseProperties",
  "bba1f4ac": "Demonstrate constructor use through 'this' and resulting bad optimization when OptimizeParameters is enabled.",
  "ebd3e677": "Add serialization format for 'optimization' JSDoc",
  "448ce643": "Stop distinguishing @interface and @record JSDoc during optimizations",
  "a6f344ed": "Use optimization colors instead of Closure types in the main optimization loop",
  "ff7c3311": "Stop tracking return locality in the optimizations",
  "fee87570": "Add 'target' field defined in the latest Event Timing API spec: https://wicg.github.io/event-timing/#sec-performance-event-timing",
  "7f255bed": "Support colors in primitive-type-based peephole optimizations",
  "41bac0d9": "Move JSType -> Color conversion to the end of the main optimization loop",
  "5b76e06d": "Use optimization colors instead of Closure types in AmbiguateProperties",
  "4e5e7bd5": "Add logic for serializing the types on the AST, and deserializing them as optimization 'colors'. This allows a cleaner separation between the capabilities needed for checking, and those needed at optimization time for type-based optimization.",
  "c8db79fc": "Delete unused POM file for RefasterJs.",
  "ef7cdfda": "Refactor the RefasterJs example tests to user a builder pattern.",
  "1e97b265": "Add a way to attach optimization colors to AST nodes.",
  "7507d261": "Add simple optimization type ('color') system",
  "6c2e5023": "Delete obsolete optimization of `goog.dom.TagName`.",
  "dac995ac": "cache sourcemap lookups",
  "c23c3727": "Add a new pass to remove types from the AST during optimizations",
  "6fe4c426": "Print nonJSDoc comments by default when refactoring JS code with refactoring tools such as RefasterJS.",
  "c38e9d54": "Remove 'ShadowVariables' functionality due to build performance issues.",
  "dbcd7c36": "Allow JSRefaster to use 'typeof xxx' in template matches",
  "c71e0339": "Standardize feature sets supported by checks and optimizations",
  "5f4e4107": "cache sourcemap lookups",
  "8ad7992e": "Split out tests for ADVANCED optimization from IntegrationTest",
  "939a7bb1": "cache sourcemap lookups",
  "cb8e4756": "Merge pull request #3573 from bugreportuser:add-optimization-to-replace-array-of-with-literal",
  "57d3738e": "Add optimization to replace `Array.of` with literal",
  "0be3e683": "Update optimization passes to use ES_NEXT",
  "611e3c85": "Update PeepholeFoldConstants optimization pass for nullish coalesce.",
  "cf58f046": "Update GlobalNamespace optimization pass for nullish coalesce.",
  "3667c938": "Update OptimizeCall, OptimizeParameters, and OptimizeReturns optimization passes for nullish coalesce.",
  "46865bdd": "Update DeadAssignmentElimination and DeadPropertyAssignmentElimination optimization passes for nullish coalesce.",
  "97e3bed2": "Update PeepholeSubstituteAlternateSyntax optimization pass for nullish coalesce.",
  "21f4405c": "Update PeepholeRemoveDeadCodeTest optimization pass for nullish colaesce.",
  "ed63b550": "Update ExploitAssigns optimization pass for nullish coalesce.",
  "347be3f6": "Update PureFunctionIdentifier optimization pass for nullish coalesce.",
  "9eede65e": "Update FunctionArgumentInjector optimization pass for nullish coalesce.",
  "35ef947f": "Update CrossChunkReferenceCollector optimization pass for nullish coalesce.",
  "a7dccdf3": "Change pre-optimization passes to use ES_NEXT_IN FeatureSet.",
  "f8406d41": "Add ES_NEXT_IN feature set to represent features that can be transpiled away but lack optimization/pass through.",
  "79edabcb": "Stop doing optimizations around 0, -0 and NaN for Equality.$same.",
  "1daca0e2": "Switch to lighter weight caches in `FunctionInjector`.",
  "ecace292": "Introduce '--assume_no_static_inheritance' which will later be used to tune some optimizations with respect to the possiblity of static inheritance.",
  "7f10d1d1": "Workaround for crash in RefasterJsScanner.",
  "d5b2d816": "Add method to simplify JSType objects before running optimizations",
  "1b1b43bd": "Implement peephole optimization to remove undefined default param",
  "502c7d86": "Move nonstandard performance externs into a separate file.",
  "d1749c15": "Replace 'for(int i)' loop with 'for each' for better performance.",
  "405124ff": "Increment supported language version of most optimization passes to `ES2018_MODULES`.",
  "74aa1a9a": "Use object identity to identify prototype objects types. Improves subtype check performance and in a sample project improves DisambiguateProperties performance by about a 30%.",
  "d60394e1": "Change hoisting of externs and 'nocompile' files to use faster DependencyInfo parsing.",
  "60878c0d": "Add parsing of '@externs' and '@nocompile' annotation to JsFileParser for future performance improvements.",
  "1a0a00c8": "Add more tests to J2clClinitPruner for ES6 and fix incorrect optimizations around default values.",
  "90fb82ef": "Use reference equality for ModuleMetadata to work around GWT performance issues.",
  "1486a1b0": "Begin consolidating logic for checking and rewriting goog.requires/requireType/forwardDeclare/module.get. For now these passes are no-ops. We will slowly replace the logic from other passes with these new passes as we can guarantee the new pass has no regressions.",
  "d832e3d5": "Fix correctness issue around Equality.$same optimization",
  "caba0f8a": "Resurrect type based optimizations around null check via == for J2CL if the type is known to be an Object type. Similar optimization was removed earlier since it included === check that differentiates null and undefined which is not safe. We are only resurrecting == and only for J2CL since J2CL does runtime type checking for development that makes this pretty safe and where the most gains are.",
  "28951ad1": "Optimize the implementation of `EqCache` to minimize a significant performance regression.",
  "dbe72171": "Expands `EqCache` to also cache comparison results of `TemplateTypeMap`s.",
  "c25901c8": "Tiny performance enhancements to xtb parsing",
  "146bdf7d": "Remove the references to the old names of the 'cross chunk' optimizations",
  "90d5fb13": "Mark Object.defineProperties as a movable declaration statement in the cross module reference collector. This lets the cross module code motion optimization pass to correctly move classes with getters/setters to a later module where they are actually referenced.",
  "25f89732": "Add a pom file for building a RefasterJs jar.",
  "e2da376a": "Add the 'window.performance.onresourcetimingbufferfull' callback to navigation timing externs.",
  "52802536": "Remove the public options fields for cross-chunk optimizations",
  "76b9661b": "Move the optimization loop tuning API into the public API.",
  "3d49739b": "RefasterJS examples: Split set_window_location.js from set_location_href.js.",
  "512c02ab": "Create a parser fast path for recognizing ASCII range identifiers. With this change isIdentifierPart/isIdentifierStart are no longer meaningful in the sample profiles.",
  "eaa0edf4": "Improve VariableMap.forBytes performance",
  "19bdbccb": "A tiny optimization of PolyfillPromise",
  "c28b1bd6": "rollback 'Improve Promise polyfill performance on IE10 and IE11'",
  "f0c29967": "Improve Promise polyfill performance on IE10 and IE11",
  "465403dc": "Stop using NTI types in the optimization passes by default. Fix missing @override missed by NTI.",
  "f2f3a98c": "Add timeOrigin to w3c performance timing externs. https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin https://www.chromestatus.com/feature/5695487386583040",
  "792c4640": "Add some peephole optimizations for Math.* methods",
  "8223a71e": "Minor optimization of tryTurnTemplateStringsToStrings.",
  "abb519e9": "Teach RefasterJS to add parentheses when operator precedence demands it.",
  "3918d797": "Use NTI for optimizations in the debugger when NTI is enabled for checking.",
  "d480fee9": "Tweak and add tests to OptimizeReturns for ES6 features. Also enable optimization of functions that read from in 'in', 'for-in' or 'for-of'.",
  "aae1c12e": "Remove some unnecessary uses of LinkedList. ArrayList is nearly always faster.",
  "633c46a7": "Drop unsafe type based optimizations that distinguish between null and undefined. For optimization purposes we have to assume that all values may contain null or undefined as the type system is 'leaky' with regard to accessing undefined properties on object used as maps or access elements off the end of an array.",
  "8771a3b7": "Use a RecoverableJsAst so that the worker version of the compiler can cache the ast between compiles.",
  "deb01301": "Converts J2clEqualitySameRewriterPass to be a peephole optimization.",
  "e17513e2": "Saves 1.2-1.5% optimization time in Gmail by disabling a redundant MarkPureFunctions pass when J2CL optimization is on.",
  "33e6d740": "Disable a redundant MarkPureFunctions pass when J2CL optimization is on.",
  "7ff692ba": "Introduce PersistentInputStore which is used to make the bundle mode of the compiler faster by keeping the parsed CompilerInput data persistent between compiler invocations in worker mode when run on Bazel.",
  "98f9f375": "Update WorkerGlobalScope API to have 'performance' attribute, and add nextHopProtocol to PerformanceResourceTimings.",
  "5be01d9f": "A few fixes to make --dev_mode=EVERY_PASS work in more cases, and turn it on for most IntegrationTest methods. bazel BUILD.bazel build_test.sh code_of_conduct.md contrib COPYING debian externs maven package.json README.md rules.jarjar src test WORKSPACE.bazel Run PropagateConstantAnnotationsOverVars after CollapseProperties since it creates new constant names when it collapses constant properties. bazel BUILD.bazel build_test.sh code_of_conduct.md contrib COPYING debian externs maven package.json README.md rules.jarjar src test WORKSPACE.bazel Remove a spurious reportChangeToEnclosingScope call (which may improve performance as well)",
  "37cd66fd": "Added optimization to removeUnusedVar pass for destructuring ES6 feature",
  "120be053": "A few fixes to make --dev_mode=EVERY_PASS work in more cases, and turn it on for most IntegrationTest methods. bazel BUILD.bazel build_test.sh code_of_conduct.md contrib COPYING debian externs maven package.json README.md rules.jarjar src test WORKSPACE.bazel Run PropagateConstantAnnotationsOverVars after CollapseProperties since it creates new constant names when it collapses constant properties. bazel BUILD.bazel build_test.sh code_of_conduct.md contrib COPYING debian externs maven package.json README.md rules.jarjar src test WORKSPACE.bazel Make sure convertToDottedProperties runs after markUnnormalized, since it unquotes string key properties, which violates the Normalize constraints. bazel BUILD.bazel build_test.sh code_of_conduct.md contrib COPYING debian externs maven package.json README.md rules.jarjar src test WORKSPACE.bazel Remove a spurious reportChangeToEnclosingScope call (which may improve performance as well)",
  "87084b21": "Some minor cleanup/performance fixes",
  "186e9966": "Apply the PeepholeMinimizeConditions optimization to our own source code.",
  "8ff4decc": "Add refasterjs templates for expect(...).to.be.null and .to.be.undefined and .to.be.ok",
  "6d7824ae": "Add a refasterjs template to migrate from Chai's 'expect'-style assertions to 'assert'-style assertions.",
  "cd1dd52d": "[RefasterJS] Add support for correctly handling goog.require inside a goog.module.",
  "af285b5a": "Rollback '[RefasterJS] Add support for correctly handling goog.require inside a goog.module.'",
  "052fb80d": "Rollback 'Refactor LiveVariablesAnalysisEs6 to use the getAllAccessibleVariables() from scope method.' to avoid performance regression",
  "be3ea6f0": "Remove unsafe optimization that converts 'x === 0' to 'x' when x is a number type",
  "931352f9": "[RefasterJS] Add support for correctly handling goog.require inside a goog.module.",
  "1d36fa63": "RefasterJS: indexOf to includes.",
  "9da58006": "Don't serialize cached source code in SourceFiles except for SourceFile.Generated.",
  "4e54f58c": "RefasterJS templates for replacing the usage of String.prototype.indexOf to determine whether one string may be found within another string or not with String.prototype.includes.",
  "c9c20a73": "RefasterJS templates for replacing the usage of Array.prototype.slice to convert an array-like object to an array with Array.from.",
  "9f797b99": "RefasterJS templates for replacing the usage of Array.prototype.indexOf to determine whether an element is in the array or not with Array.prototype.includes.",
  "eed83c15": "CrossModuleCodeMotion: refactor to statement-based operation. This sets the stage for a performance fix that will make the pass smart enough to move all declarations to the best possible module in a single run.",
  "a1fa7c6f": "RefasterJS: Introduce template placeholders for string literals.",
  "021e1348": "Small performance improvement. Make ReachablePredicate a singleton so that we don't end up creating a new Predicate object for every scope.",
  "5087f479": "Move i18n logic (ReplaceMessages) from check stage to optimization stage.",
  "9b9addc7": "Remove cached sources before serialization.",
  "8abe168c": "Create an option to bound the number of iterations of the optimization loop.",
  "29ad99aa": "Add CompilerTestCase.ignoreWarnings to more easily ignore warnings in optimization tests.",
  "3fefb8b7": "Rollback optimization of Number(x) to +x",
  "1231aa86": "Rollforward optimization of Number(x) to +x",
  "f66f51a6": "Remove unsafe ES6 optimization RewriteBindThis pass.",
  "a2f7ed51": "Create an Angular 1.6 compliant version of the angular_cache externs.",
  "c7242117": "Add --use_types_for_local_optimization option to debugger.",
  "45e4ece5": "Add cacheId parameter to cacheFactory type declaration.",
  "d5d28e8e": "Tune the heuristic that stops optimization loops based on a size threshold, so it can fire more often. Speeds up optimized builds up to 11%, with code size increase up to 0.14%.",
  "0a3c4f7c": "[NTI] Avoid instantiating the prototype object of a generic type over and over again. It's slow and doesn't give any real typing advantages.",
  "511e6901": "Make Scope.isFunctionBlockScope slightly simpler and faster.",
  "ee23a09e": "Get rid of calls to deprecated isBlock. Used refaster to manually change them to isNormalBlock, then manually reverted or fixed places where this caused test failures, or where the change seemed suspicious.",
  "7d836639": "Get rid of calls to deprecated isBlock. Used refaster to manually change them to isNormalBlock, then manually reverted or fixed places where this caused test failures, or where the change seemed suspicious.",
  "4dea41ce": "Use hasTwoChildren() which is more readable and faster than getChildCount() == 2",
  "132a8826": "Add 'tracerMode' to GwtRunner flags to help tracking performance of the JS version",
  "1eda5f23": "Remove incorrect optimization from J2clEqualitySameRewriterPass",
  "ccdcfe89": "Rollback of 6b2d7b2, as it was causing incorrect optimizations.",
  "d0e6c0e4": "Start precisely reporting code changes from J2CL passes so peephole optimizations in main loop could do a better job.",
  "c056150f": "Improve the performance of Disambiguate Properties when faced with large numbers of type invalidations.",
  "14b61887": "Add an options.assumeAccurateNullUndefinedTypes to gate a local type-based optimization",
  "a7aca281": "Change the type/property map optimization to only recognize object-literal types, and not other built-in types such as Function.",
  "daacb8d0": "Help 'coalesce variables' short circuit sooner in some cases (minor performance tweak).",
  "ea3b69f8": "Speed up CrossModuleMethodMotion by making the dependency cache more efficient.",
  "881c4b6b": "Two tiny performance fixes in JsType",
  "2a1cf382": "Two changes to improve the performance of the conformance rules.",
  "86bb55ed": "Improve the performance of Node.getQualifiedName",
  "8ac793f7": "When a variable is referenced before its declaration, move the declaration to the top of the enclosing scope, so that the InlineFunctions optimization doesn't produce incorrect code.",
  "67bcc8e9": "Get rid of logspam from RefasterJsScannerTest",
  "a8aec453": "Use a size heuristic to figure out that the optimization loop isn't making significant changes, and stop the loop before reaching a fixpoint, to save compilation time.",
  "6bac00e7": "Declare a global 'performance' symbol in the externs. Previously it was only available through window.",
  "50d7cdde": "Use ConcurrentHashMap for sourcemap cache in TranspilingClosureBundler",
  "cdf9e0d2": "Deprecate setUseTypeBasedOptimizations, now that we have individual options for each of the optimizations that it enables.",
  "f799a5cf": "It would be really bad for performance if getToken or getNext were ever overridden; make them final.",
  "20fd2ce1": "Add a hidden flag use_types_for_local_optimization, that follows disambiguate properties to enable local type based optimizations.",
  "168485ea": "Make MinimizeExitPoints a peephole optimization.",
  "9d5d78f2": "Don't run the peephole optimizations as a loop when they are surrounded by one time passes. The second run will always do nothing as the pass itself runs to a fixed point internally.",
  "cc03fc61": "Don't have UnreachableCodeElimination do trivial statement removal, this artificially keeps this pass running when the cheaper and more general peephole optimizations can do the work.",
  "b6d34952": "Adds a temporary flag to limit J2CL time cost in the optimization loop.",
  "63ab1cc1": "GWT: Enable time tracking in the performance tracker",
  "b26cf727": "Add some code size metrics to the Performance Tracker knowing how many file/lines the compiler is dealing with on a build will help scope performance issues.",
  "5fcd1cb0": "Run pure function analysis in the optimization loop in J2CL code so that we can take advantage of more optimizations revealed by j2cl passes.",
  "61b9aa07": "Allow to specify a custom cache for the transpile bundler.",
  "986bfc56": "Fix a bug in RefasterJS that caused RefasterJS templates to match against the wrong code if the compilation unit that was being refactored does not contain a type used in the RefasterJS template.",
  "7d984f54": "Allow RefasterJsScanner templates to be cleared out when used with multiple Compiler instances, since type comparison is dependent on the Compiler instance used.",
  "fd1edcbb": "Remove an unused optimization that does unsound conversion of var o = { prop : function() {} }; to var o = { prop() {} };",
  "54b24ea1": "Fix externs declaration of caches.",
  "4438406d": "Make the useTypesForOptimization flag turn on all type-based optimizations. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=127222151",
  "3069daab": "Make state for all the type-based optimizations private to CompilerOptions.",
  "2f95290e": "slight simplification now that we have a fast getPrevious method ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=127093922",
  "57f6291c": "Add flag check so that J2clEqualitySameRewriterPass does not check the parameter type if --use_types_for_optimization is off. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=126915223",
  "d68fe687": "Don't run type-based optimizations when type checking is off.",
  "a24991e3": "Extend the peephole optimization to turn 'obj == null' into '!obj': - Use similar logic for numbers being compared to zero. - Also do the conversion for arbitrary expressions. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=125973280",
  "b59e6246": "Fix a bug in the optimization for turning 'obj == null' into '!obj': - Expression result nodes were not properly handled. - Nullable types were, embarrassingly, not handled. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=125638199",
  "4de93dae": "Add logic to J2clPass to force inline aliases to objects on window. This prevents the aliases from defeating optimizations. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=124903503",
  "4c5d53a5": "Run a pure function identifier in the main optimization loop when j2clpass is enabled. This allows functions to become pure as clinits get pruned. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=124589083",
  "845bab11": "Add a command line flag to enable using types for optimization. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=124576007",
  "3637562e": "Add caches to the window to match the spec: 'To allow authors to fully manage their content caches for offline use, the Window and the WorkerGlobalScope provide the asynchronous caching methods that open and manipulate Cache objects.' https://www.w3.org/TR/service-workers/#cache-objects ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=123343421",
  "0660acdb": "Automated rollback. bazel BUILD.bazel build_test.sh code_of_conduct.md contrib COPYING debian externs maven package.json README.md rules.jarjar src test WORKSPACE.bazel Reason for rollback bazel BUILD.bazel build_test.sh code_of_conduct.md contrib COPYING debian externs maven package.json README.md rules.jarjar src test WORKSPACE.bazel Not safe to inline IIFEs that have local variables. Must find another way to get the originally-reported optimization. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=121709636",
  "fa7b6d9d": "AliasStrings no longer wastes size by optimizing performance for IE6. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=121595526",
  "dddb571c": "Output language version in deps.js files generated by DepsGenerator, and simplify CompilerInput along the way. Features are parsed lazily and stored in the script node of the AST so that the AST can be cached on its own without losing the language version. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=118412341",
  "b8ed0c65": "RefasterJS: Improve type matching of templates.",
  "4496992c": "RefasterJS: Provide a flag to allow changing the type matching strategy to be used when matching JSTypes in templates.",
  "b4b681dd": "enable replaying parse errors when using AST caches between compilation jobs ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=117356856",
  "b898753d": "Add utilities for unit testing RefasterJs templates, and a test for the examples/set_location.href.js template. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=117238512",
  "b12d233a": "If a SourceFile source is replaced also cause the cached line offsets to be updated as well. Without this shared SourceFile objects can cause bad code snippets.",
  "33e0646e": "Calculate the side-effects for goog.reflect.cache. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=116406498",
  "8bf58569": "Add a means of enabling optimizations on top level declarations in simple mode when the output is known to be scoped within a function. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=112092378",
  "c1b2d211": "Back-off an optimization in DisambiguateProperties. When a class implements an interface, it doesn't always explicitly define every property of the interface. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=110228522",
  "7d3e406d": "Use equality for the subtyping cache, and identity for the equivalence cache",
  "7a5320f1": "Use identity rather than type equivalence for cycle-detection cache. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=109135614",
  "b0aaf9c7": "DisambiguateProperties: cache the results of getTypeWithProperty ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=108175809",
  "df410c7c": "Fix crash in Object.defineProperties peephole optimization ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=108048276",
  "01d7c6e8": "Create a peephole optimization to remove useless Object.defineProperties call that may be created by removing unused property definitions. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=107987199",
  "17597c6a": "Change $cacheFactory.get extern definition ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=107758785",
  "a3fdeb37": "Take out the getPrevious method since it will be slow in some cases. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=105604067",
  "f147f22d": "Move RemoveUnusedVars from the OptimizeCalls inner pass to the main optimization loop.",
  "c07441d6": "Use Google Gson's JsonParser class instead for better performance.",
  "07a16823": "Remove remaining major exponential slowdown in parser.",
  "e71e50ac": "Update code cache for cases where the UTF-8 byte order mark was removed.",
  "e7389766": "Remove incorrect ES6 peephole optimizations.",
  "a0fbd5b9": "Scope related fixes and optimizations",
  "ba6a25a8": "Changed optimization passes to use the new Es6SyntacticScopeCreator, also updated test files for new behaviors ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=100850115",
  "d1b37003": "Updated optimization passes to use the Es6SyntacticScopeCreator ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=100846288",
  "b5c89771": "Changed optimization passes to use the new Es6SyntacticScopeCreator, also edited the passes to behave properly for additional scopes ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=100620415",
  "41387d48": "Updated passes before main optimizations to use the Es6SyntacticScopeCreator ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=100612982",
  "0f3cac4f": "Added new optimization pass RewriteBindThis to rewrite .bind(this) call on certain function expressions.",
  "1d9b1c82": "optimization for handling disambiguate property ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=99526556",
  "17c336b9": "Fix a bug in RefasterJS when functions are used as parameters to templates.",
  "80654ddd": "Allow users to specify multiple externs files to RefasterJS, which also allows them to use the wildcard syntax for including files. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=97609718",
  "e468368e": "Fix an exponential slowdown in code that has many binds ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=96011051",
  "3fe5361f": "Merge pull request #868 from ChadKillingsworth/default-on-type-optimizations",
  "9357b9d6": "Change the option name back to the original 'use_types_for _optimization'. Uses the BooleanOptionHandler class to allow the option to be disabled.",
  "7a5767f4": "Reverse the use_types_for_optmization flag to be disable_type_optimizations. Enables type optimizations by default.",
  "d5d728c7": "Adding the vendor specific version of window.performance.clearResourceTimings(). This is currently the version implemented in Chrome. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=84486711",
  "b31bc3b6": "Cleanup change generated by Refaster ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=84150664",
  "b908a46d": "The outline of this change is: - Define a new Analyzer for JavaScript that wraps the JsFlume and RefasterJs templates. - Register the JsFlume and RefasterJs templates that wish to be run in the JsFlumeAnalyzer class. - Add support to SuggestedFix for returning the original matched node that caused the suggested fix to be created.",
  "a46655ce": "Fix up some bugs in newline and semicolon insertion in RefasterJS code replacements. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=80300548",
  "5faefc86": "Improvements to the usability and error messages of RefasterJS. - Show help message if no arguments are provided. - Show better messages as to what's going on in the program. - Allow globs to be specified and comma separated files in the inputs argument. - Don't show compiler warning and error output unless --verbose is specified. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=80028737",
  "d54fd9dc": "[NEW TYPE INFERENCE] Small optimization: avoid creating jstypes from nominal types where possible. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=79286096",
  "a8ccae35": "Update RefasterJS templates for goog.dom.safe.setLocationHref refactorings to also apply to direct assignments to window.location. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78441718",
  "4cd607b5": "Add missing $cacheFactory.get extern. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78345235",
  "d29421b5": "Tweak to RefasterJsScanner ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78306350",
  "d9e64c52": "Include the externs.zip file as a entry in the RefasterJS JAR ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=77394893",
  "9b32f9c6": "Improve error messages for RefasterJS CLI. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=77390657",
  "37909eb4": "Make transpileOnly flag skip checks and optimizations ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=76990694",
  "12824ad8": "Move some example RefasterJS templates to the opensource directory and include them in the opensource compiler release. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=76468369",
  "9e3fdf02": "Improve the error messages for RefasterJS. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=76348051",
  "5d447f4f": "Make sure that the types appear in the RefasterJS templates in the debugger webservice page. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=75123829",
  "8090799f": "In RefasterJS, don't try to refactor externs files. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=75069247",
  "df7d1e8b": "Modify the RefasterJS CLI tool to be able to modify files directly from the suggested fixes from the refactoring. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=75037969",
  "eb691d4a": "Create a class that applies suggested fixes to code and use that in the RefasterJS debugging servlet. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74896202",
  "de9eec01": "Add an option for using the default externs for both the RefasterJS command line tool and the Closure Compiler debugger. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74738729",
  "17433fa9": "Expose a RefasterJS in the Closure Compiler debugger appengine service. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74610370",
  "f80a8ead": "Open source the RefasterJS source files and add a ant target for creating the RefasterJS jar externally. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74259526",
  "dcf2a9da": "Generate more compact code for var declarations in RescopeGlobalSymbols without relying on optimization passes to get into that form.",
  "08012942": "[NEW TYPE INFERENCE] Make TypeEnv#join faster.",
  "4ffc0e77": "[NEW TYPE INFERENCE] Optimize isInhabitable performance",
  "6442298e": "[NEW TYPE INFERENCE] Prevent exponential slowdown.",
  "de4ed7ae": "[NEW TYPE INFERENCE] A few more memory optimizations.",
  "450d4838": "Add a 'refaster js' style code pattern matcher. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=67184932",
  "05e26401": "Use Sets instead of Lists in CheckRequiresForConstructors. Order doesn't matter, and we call .contains() a lot, so this should be faster.",
  "05687120": "Make identifier parsing faster in the case where there are no unicode escapes, which should be far more common.",
  "d15535cf": "Adding angular.$cacheFactory.get to externs for AngularJS 1.2",
  "bf7c3833": "Handle optimization of labeled for loops correctly.",
  "23c3a9a0": "Moves the ReplaceStrings pass later in the DefaultPassConfig so that it can take advantage of other optimizations to replace more strings.",
  "038eea20": "Disable 'rewrite function expressions'. This has a bad code size to performance trade off: it doesn't have a consistent post-gzip code size win and can have a huge impact on performance ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52464785",
  "b3f9127e": "As per discussion, nerf RemoveUnusedClassProperties to avoid performance regressions and incompatibilities with Object.seal. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=49443067",
  "559c9aca": "A few more performance improvements in PeepholeMinimizeConditions. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47556985",
  "495f6cb2": "Move tryReduceReturn optimization.",
  "0ab58911": "Further improve performance of MinimizeConditions.",
  "a6d1f79d": "Don't add window scope to javascript builtin objects in RescopeGlobalSymbols compiler pass. Adding this scope makes the code unnecessarily larger and can have a large negative performance impact (in particular on code that makes heavy use of Math). ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=46636841",
  "811e9dc2": "Improve performance of MinimizeConditions",
  "e3846e53": "Disambiguate private properties by file to enable additional optimizations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44423021",
  "211dc016": "Fix tests and code in UCE that do unsound optimizations in finally blocks.",
  "6259562c": "Move cross-module passes all together at the end, after the main optimization loop.",
  "273b440b": "Make it easier to write unit tests that verify that the a peephole optimization does not require multiple passes (some do).",
  "89c45680": "Peephole optimizations should not be emitting errors. Downgrade them to warnings. They should be moved to a 'suspicous code' pass.",
  "29083672": "AngularJS: Fix for $cacheFactory. As it was, it couldn't be used as a @param definition.",
  "4c7bdf25": "Improve reporting of performance data.",
  "96c24828": "Rewrite goog.defineClass to maintain type checks and optimizations.",
  "72d4f897": "Add 'use_types_for_optimizations' option to the webservice. Fixes issue 808.",
  "73ab5966": "Make the Other passes be hot swap checks instead of normal optimizations.",
  "f9fbad23": "Get rid of the goog.now optimization. This is a weird micro-optimization that will break if we change to implementation of goog.now to use high-resolution timers.",
  "ebf229b0": "fix a bad String() optimization fixes issue 759",
  "bb214c03": "Add a command-line option for enable type based optimizations for the open source compiler.",
  "d7455015": "PeepholeOptimizations appear to always be the last pass to modify the AST, run it last in the optimization loops to avoid an extra pass. This order was manually choosen.",
  "0f704879": "Make the performance tracker a little more useful.",
  "e88cd847": "In my sample, using this approach to running the peephole optimizations to a fixed point reduces build time by ~30%, the number of overall runs for the 'code removing passes' are reduced from 30 to 14 for one target and InlineVariables becomes the 'long pole'.",
  "c76753c3": "Add externs for window.performance.memory.",
  "322c2af2": "Add support for String.split to peephole optimizations. No longer depends on Java's implementation of split.",
  "a4351e3c": "Add support for String.split to peephole optimizations. No longer depends on Java's implementation of split.",
  "51dffd7b": "Add support for String.split to peephole optimizations.",
  "6990a652": "Fix edge case in UnreachableCodeElimination that causes infinite loop in optimization loop.",
  "e8f11e38": "Make constant expression reordering a peephole optimization.",
  "663a6830": "Some simple performance cleanups, use Map.Entry/Arrays.asList/etc",
  "46ac4064": "Make sure split optimization happens late. Fixes issue 491.",
  "af3e9dbf": "Prescreen variable for live range check. Makes CoalesceVariableNames 10times faster.",
  "8f4b1746": "An optimization pass for regular expression bodies.",
  "10587cd1": "Attempt #2: jscompile_clients passes this time. -Turn on RemoveUnusedVars's optimizeCalls option within the main optimization loop. -This is required to handle call sites that propagate unused parameters.",
  "4bd29c66": "-Turn on RemoveUnusedVars's optimizeCalls option within the main optimization loop. This is required to handle call sites that propagate unused parameters.",
  "52ee613a": "-Make OptimizeReturns much faster (don't have exact measurements, but from the logs, OptimizeCalls goes from from 3 seconds to < 1 second).",
  "b326ab0a": "Introduces a late peephole optimization pass.",
  "5b0913e2": "A small optimization based on YourKit profiling of the PeepholeOptimizer",
  "f5b97465": "-Run SmartNameRemoval a second time, after the optimization loop. -This causes goog.events to be compiled down to nothing when compiled on its own.",
  "a453c7f2": "Enable call optimizations in the open source compiler in advanced mode.",
  "db6ecf32": "Have ReplaceStrings run earlier so that optimizations (collapse properties, disambiguate properties, devirtualize methods, etc) don't change the results.",
  "73f98ee9": "Lay the groundwork for the my next call optimization.",
  "f93cdf97": "Minor parse time performance improvement (profiling was showing ~500ms spent traversing the obj lit keys). This changes the order from O(keys^2) to O(keys).",
  "b494affa": "Speed improvements for CallGraph. - Avoid MultiMaps. - Combine Function and Callsite creation into one traversal. - Speeds up Maps Callgraph creation by 30%, Pinto by 50%. - Still too slow.",
  "819dd2d2": "Move the devirtualizer later in the optimization process. We're not really sure why this improves things (yet).",
  "092f42ed": "Turn on side-effect-based optimizations in advanced mode."
}, "CloudReader": {
  "70145e1": "Code optimization",
  "688e24a": "Code optimization",
  "fe00d6a": "Code optimization",
  "af77b01": "Code optimization",
  "5363598": "Code optimization",
  "ecb9036": "Code optimization",
  "fbf776a": "Code optimization",
  "d0e5417": "Code optimization",
  "ce76416": "Code optimization",
  "5cde993": "Code optimization versionName = 3.3.0",
  "0609aa9": "Code optimization",
  "13b6144": "Code optimization",
  "d37f24b": "Code optimization",
  "f7656ed": "update optimization",
  "4e14f99": "update code optimization",
  "303cd3b": "perfect code optimization",
  "e0523c9": "style: code optimization",
  "d6eb01e": "update: code optimization & open LeakCanary",
  "41934a6": "code optimization",
  "4006d86": "code optimization",
  "dc1399c": "v1.1 Code optimization",
  "a2c91fe": "v1.1 Code optimization",
  "dd59a07": "v1.0 Change the way in cache",
  "2431ff7": "Code optimization",
  "fe82c2d": "v1.0 Code optimization"
}, "cobar": {
  "68a3c83": "add cobar performance report"
}, "Cockroach": {
  "": ""
}, "COLA": {
  "b765fcf": "chore(ci/appveyor): add remove cache for `charge` sample",
  "0553111": "chore(deps): Bump fastjson from 1.2.79 to 1.2.83 in `cola-archetypes`",
  "9d703db": "Merge pull request #291 from alibaba/dependabot/maven/samples/craftsman/com.alibaba-fastjson-1.2.83",
  "cbbe921": "Merge pull request #292 from alibaba/dependabot/maven/cola-components/com.alibaba-fastjson-1.2.83",
  "4b9cea3": "Bump fastjson from 1.2.79 to 1.2.83 in /cola-components",
  "7c4af78": "Bump fastjson from 1.2.79 to 1.2.83 in /samples/craftsman",
  "388f9a3": "1. cola-archetypes和cola-components的pom中plugin org.sonatype.plugins导致不能编译问题，注释掉 2. fastjson统一改为1.2.70 3. craftsman适配4.0.1版本的cola framwork 4. start/src/test下面增加测试的http脚本",
  "6f60258": "fix: 调用get方法之后,例如和fastjson共同使用时,场景值被修改的问题"
}, "concurrency-limits": {
  "985c2d1": "Fix drift in gradient2 by not smoothing the short term rtt and allowing the long rtt measurement to reduce on faster rtt",
  "ba9767c": "Merge pull request #44 from elandau/feature/vegas_slow_start",
  "676f4c3": "- Add probing to VegasLimit - Simplify probing configuration - TCP slow-start like behavior for VegasLimit",
  "5c2e480": "Merge pull request #22 from Netflix/feature/fast_sqrt",
  "b10f42e": "- Set vegas's alpha and beta as a percentage of the current limit to allow for faster growth and actual growth at high limits. - Remove fastStart as it was too aggressive and overshot the limit - Report busy inflight when shedding",
  "a9c61a3": "Merge pull request #13 from Netflix/feature/fast_start",
  "03f3591": "Add fast start mechanism to allow clients to reach the limit faster on startup"
}, "concurrent": {
  "": ""
}, "conductor": {
  "e20a193": "Fix a subworkflow performance issue without selecting tasks (#3152)",
  "b0b05da": "Jxu/springcache (#3143)",
  "ec35fff": "cache in CassandraMetadataDAO and CassandraEventHandlerDAO are added as decorators",
  "286e27d": "Bump actions/cache from 2 to 3 (#2861)",
  "9ba4793": "Merge pull request #2351 from rickfish/bugfix/queuemessage-performance-fix-3.x",
  "5e31f61": "add descending priority index to combo_queue_message index to make queue queries faster",
  "b9dc5a5": "Bugfix/correlation id performance fix for issue #1681 (#1766)",
  "e70b140": "Merge pull request #1415 from Netflix/dependabot/npm_and_yarn/ui/cached-path-relative-1.0.2",
  "311c5a7": "Bump cached-path-relative from 1.0.1 to 1.0.2 in /ui",
  "3fdfeb0": "Updated schedule task logic to fast-fail the workflow instead of trying to rollback. (#1250)",
  "b6a2fde": "Merge pull request #790 from Netflix/ui-performance-improvements",
  "9b477ca": "Merge pull request #790 from Netflix/ui-performance-improvements",
  "1b9147e": "Revert 'Merge pull request #790 from Netflix/ui-performance-improvements'",
  "bb63d91": "Merge pull request #790 from Netflix/ui-performance-improvements",
  "8b9350c": "Major refactor to improve performance of search page using 'idiomatic' redux and adding Saga to help respond to side-effects.",
  "e6b9e48": "Merge pull request #483 from Netflix/improve-ui-rendering-performance",
  "86959d5": "Merge pull request #482 from Netflix/improve-ui-api-performance",
  "ea5a663": "Improving rendering performance of workflows.",
  "a58bfb1": "Improving rendering performance of workflows.",
  "b3b6d37": "Added support for AWS Elasticache Redis - cluster mode enabled"
}, "Conductor": {
  "04d40a5": "Minor ViewAttachHandler optimizations"
}, "config": {
  "2c0ac85": "Merge pull request #731 from hkupty/drop-array-from-fast-path",
  "87dc17d": "Move rationale to code and implement invalidate cache",
  "0a7db6a": "Avoid PathBuilder for fast-path path parsing",
  "95b31cc": "Use a WeakReference to cache class loaders",
  "a0c22c3": "Add tests for cache invalidation with ref config and full config",
  "15e5ad4": "ignore .cache anywhere in the hierarchy",
  "27bdc06": "cache the default config and default reference config per-classloader",
  "9733578": "Do not cache default config, and use context class loader to load it",
  "cfb4887": "use a cached singleton for ConfigFactory.load()"
}, "CoordinatorTabLayout": {
  "": ""
}, "CoreNLP": {
  "520a0c1c": "Apparent issue in the reading code: the data might not come to Java fast enough from the Python client (or wherever) for it to read the whole thing in one bite. To fix this, we read chunks until reading a chunk fails or there are no more chunks.",
  "f99b5ab8": "Remove an optimization in semgrex which may be causing crashes",
  "add33982": "Add main method for testing better; notice poor performance.",
  "6b32b3ca": "Update run-slow-itests.yaml",
  "7c793651": "Update run-slow-itests.yaml",
  "92d91734": "Update run-slow-itests.yaml",
  "3e148eca": "Update run-slow-itests.yaml",
  "9c8bba88": "Update run-slow-itests.yaml",
  "b2fe5b58": "Update run-slow-itests.yaml",
  "fdb14b71": "Update run-slow-itests.yaml",
  "a14be9fa": "Update run-slow-itests.yaml",
  "7df3a5e6": "Update run-slow-itests.yaml",
  "9cd0bb69": "Update run-slow-itests.yaml",
  "b680e6d7": "Update run-slow-itests.yaml",
  "a7a902bf": "Update run-slow-itests.yaml",
  "cb547f8c": "Update run-slow-itests.yaml",
  "aa75275f": "Update run-slow-itests.yaml",
  "fdbb7f7b": "Update run-slow-itests.yaml",
  "d1c6b898": "Create run-slow-itests.yaml",
  "ab66e561": "Update run-slow-itests.yaml",
  "cdda9805": "Update run-slow-itests.yaml",
  "1698ff98": "Update run-slow-itests.yaml",
  "731b81fa": "Update run-slow-itests.yaml",
  "9f35968c": "Update run-slow-itests.yaml",
  "203e120a": "Update run-slow-itests.yaml",
  "911a889f": "Update run-slow-itests.yaml",
  "30f4f92b": "Update run-slow-itests.yaml",
  "32a7bf45": "Update run-slow-itests.yaml",
  "07195549": "Update run-slow-itests.yaml",
  "560d3af3": "Update run-slow-itests.yaml",
  "339cb0c6": "Update run-slow-itests.yaml",
  "6ffc3f11": "Update run-slow-itests.yaml",
  "0ed9d8d7": "Update run-slow-itests.yaml",
  "31f142ad": "Update run-slow-itests.yaml",
  "21f7a9a5": "Create run-slow-itests.yaml",
  "b32cef4f": "Convert the main arrays of depparse to use floats. Actually this savings is trivial compared to reducing the matrix cache size",
  "ebddb394": "Convert the main arrays of depparse to use floats. Actually this savings is trivial compared to reducing the matrix cache size",
  "859d098a": "Chinese shards 5... increases performance by a whopping 0.2%, only takes an extra two days to train",
  "74d0ba3e": "Merge pull request #1108 from stanfordnlp/fastcoref_convert",
  "cf86a8b7": "Add the ability to read & write a fast coref model",
  "28d01623": "Make variables final. This actually fixes a bug in the Oracle training method of srparser - perhaps worth revisiting if this improves its performance",
  "f362675e": "Make loading the Wikidict (entitylink) annotator slightly faster",
  "d770e8e4": "Tie up the cache lock a bit less",
  "0e263cbf": "Changing the cache to use float[] seems to have 0 effect on the results, but should save quite a bit of memory",
  "667c9287": "Greatly turn down the number of precached matrix multiplies in depparse. Add an LRU cache to save the most commonly used matrix multiplies. Saves quite a bit of time and memory at startup without sacrificing runtime speed",
  "1f3da5e0": "Add a rough draft of an LRU cache. When used in the depparse annotator, greatly speeds up loading time and saves memory without sacrificing performance.",
  "0913afba": "These slow itests ran overnight successfully, and incidentally, they inherited from a piece which was already checked in :/",
  "75c0954e": "update fast neural coref score",
  "9a11ced8": "fix fast neural test",
  "020a8313": "update to fastcoref",
  "fb6cfb52": "Revert 'Announce how much memory corenlp has used, mostly so I can do some more optimization work'",
  "2effe96a": "Announce how much memory corenlp has used, mostly so I can do some more optimization work",
  "e92158a2": "tests for new English fast neural",
  "c00e4100": "tests for new English fast neural",
  "58182e97": "Add fast neural coref system",
  "45d3389c": "Use subclasses instead of switch() because of performance",
  "4e8af7a2": "Minor optimizations (load arrays just once).",
  "05a57244": "A small comment on a slow part of CRF training",
  "7ae5ddfd": "More code optimizations.",
  "fd3e9fef": "Various code optimizations: refactor some methods, only run hash lookups once, etc",
  "5f3db600": "Should be slightly faster",
  "13ec2fbd": "This seems to be faster",
  "be5d1689": "change test names to slow",
  "d15af9bd": "Loosen convergence criterion in test. Sometimes it went into an infinite loop. And it was slow.",
  "876677b2": "Break up ExactBestSequenceFinder inference method, making slightly faster; closes #628",
  "21a71a11": "Make dependency parser faster (cut runtime by about 1/3).",
  "9e2c0de8": "Make dependency parser faster (cut runtime by about 1/3).",
  "08119404": "fix broken slow itest",
  "0578eee1": "Let stack overflow badge cache for a day, since it seems slow to generate.",
  "fc279f32": "add sentiment to slow itest",
  "da3f15da": "Have simple and regular pipelines share annotator cache",
  "ab635c27": "add cleanxml to slow itest",
  "bcc59b89": "Add two Lazy modes for compute once or cache",
  "ae4232b9": "global cache has been removed",
  "4c0babb3": "src/edu/stanford/nlp/optimization/",
  "41875d02": "rename slow itest",
  "6e6d8a71": "Add some properties so that this itest actually runs ... but it now still fails out due to poor performance.",
  "562bf58f": "Have test methods return some performance stats for testing/cross-validation.",
  "48edaa9d": "Update the server with better default; pre-cache annotators",
  "1be9f5a1": "Improve printing of NER performance in logging environment.",
  "e909e8e3": "increase memory for slow itest",
  "f607285c": "Get rid of annotation cache",
  "bf621328": "Try to fix test performance targets again x 2.",
  "ae851169": "Try to fix test performance targets again.",
  "eb3ab13d": "fixes for slow i-test for protobuf",
  "e4e9b32a": "Removing CoNLLBenchmark from slow itest, this shouldn't be in here anyways.",
  "8a8630b0": "slow itest bug fix",
  "aa956f6f": "fixes for slow i-test Merge branch 'master' of origin",
  "ff561c81": "fixes for slow i-test",
  "e80b6a3c": "Fix some failing slowitests",
  "3e73b503": "Cutting out Apache FastMath optimizations",
  "bc675a98": "Third attempt to fix slow-itest. Raise target a fraction.",
  "da7914d0": "Second attempt to fix slow-itest. Lower target a fraction.",
  "6b829f4e": "See if this fixes slow-itest. Warns on empty paragraph and continues.",
  "fc2551e0": "Separate out derivatives into their own object. Does not change performance as long as you use 'final'",
  "6feacb05": "added spanish optimization",
  "431197f3": "upgrade to new fastutil",
  "1e78b5c9": "Misc performance improvements to TokensRegex",
  "03c1a37c": "Adding the multithreading and optimization Keenon has been working on for Chris",
  "8ff2ab33": "Reordering evaluations for the gradient calculations to better take advantage of cacheing.",
  "248a7620": "Fixed an inefficiency in GrammticalRelation class. Programs using it should now be faster.",
  "ec695702": "Make protobuf test a bit faster; lower performance on RTE test",
  "b9259d9a": "1. Standardized 'removing nested mention' as an internal option in CorefProperties. 2. Chinese Coref null pointer fixes applied for use in the pipeline. 3. Preliminary Chinese coref pipeline performance testing in HybridCorefAnnotator",
  "b2980ebe": "randomforest faster classification, add default postprocessing prop",
  "77b02a1b": "Raise performance back up",
  "ef377d89": "Raise performance numbers",
  "9dbc82c1": "callbackfunction; called inside optimization routines at every iteration",
  "1bbb2636": "cache of all considered phrases",
  "871ccc32": "similarity threshold high precision and low precision;cache similarities",
  "c40a159e": "Add test of KBestSequenceFinder. Include Sven Zethelius's changes, which may or may not fix a bug but definitely makes it considerably faster.",
  "a545f4e2": "Add the small changes to goodCoNLL that fix Spanish performance and generally optimze performance.",
  "7d3ed9da": "Incorporate Chris's optimizations for sequence matching.",
  "ac985fc1": "update slow test for ssplit changes",
  "afab700a": "Go back to special-casing 0, 1, 2 in intPow. Seems a bit faster in CRF.",
  "197ebb21": "Apply the CoordinationTransformer after making the first copy for the EnglishGrammaticalStructure. Saves time by only copying once, and the CoordinationTransformer is a lot faster with the TreeGraphNode's parent pointers available",
  "74d484d6": "Fix the slow itest with a hacksaw (change the .equals() method)",
  "231ee7b6": "Remove smallMap optimization from Classifier",
  "a9f284ba": "added a function to set branch limit (high the value faster it is but consumes more memory)",
  "d7711e03": "added integerannotation for fast integer matching. todo: add it to the valueOf functions",
  "87860cbf": "Add a cache of the Makefile and properties to javanlp",
  "90714d95": "Add some combined oracle/beam training code, although sadly it does not improve performance",
  "8298d9af": "Factor out the code to look for a State on a Collection, slight optimization",
  "6e5a6784": "Attempt to fix slow loading of srparser",
  "979ec02e": "Improve the timeout mechanism in the MulticoreWrapper. Add the ability for the parser and ner annotators to use it, including an attempt to make sutime acknowledge interruptions. Since this added functionality slows down important functionality in Phrasal, we separate it out into a separate class.",
  "142aa581": "TregexGUI: Fix slow scrolling in tree panel on OS X",
  "de9a1dbf": "Refactor FlatPhraseTable for faster query, lower memory usage; support multiple phrase tables and reordering models",
  "bd953083": "More constraint optimization",
  "4be6c162": "More documentation, and numbers comparing serialization performance",
  "3a252750": "Remove an unused boolean. Thought it would be an interesting optimization, never went ahead and did it",
  "6b7de9d2": "Seems like there is no need to do any fancy analysis to find the roots. This method is simply faster",
  "ba0c1a74": "Rewrite the dependency code to use a graph. Somewhat slower now, but should have a faster ceiling. Fixes a few random deps and opens the door for more complicated tregex expressions",
  "31051afc": "removed filebackedcache option from invindex due to a bug in filebackedcache",
  "d65e2829": "Add some documentation to the file backed cache",
  "55727c5b": "Reverse the order of buffer and gunzip... gunzip already has a buffer, and this is much faster for large objects",
  "b1c95ae8": "moved filebackedcached from more to core; removed three @suppresswarning that Eclispe said were either unnecessary or unsupported",
  "f5047386": "Rewrite the separator detection code a bit - now the state just keeps track of a list of separators and we calculate the locations as needed. Allows for more general features and doesn't seem to be slower",
  "8942e99f": "making it run faster; profiling",
  "b1742ac0": "Fix a bug where a word that is first forced to be a specific tag and then later not forced to be any tags will cache an unexpected number of tags",
  "f4f07d30": "Initial cut at a faster MulticoreWrapper implementation; still need to add error correction",
  "eb366804": "Small multithreading optimizations",
  "ea39b015": "A List is somewhat faster and doesn't really change anything",
  "b3cc7b4a": "simply clear NNLM cache when it's full",
  "7a7c9823": "use putIfAbsent in NNLM cache, also fix bug to avoid removing and accessing same key at the same time",
  "6f84cb6c": "synchronize code that reduces cache size",
  "06f28a9f": "turn off Java cache and use NPLM cache in NPLMLanguageModel",
  "1be5bfb7": "Apparently this is what I do with free time on Sundays: make the dependency converter 1% faster",
  "7c0bb8b5": "Add a commented out blob of a much more readable but significantly slower version of addStrandedPobj",
  "7ea8334b": "Make SemanticGraph creation a tiny bit faster",
  "60a2dc0f": "Add the ability to look for default numbers - although this does not seem to help accuracy and slows the tagger down by 2%",
  "bd5ed882": "Just use Arrays.copyOf in copy ArrayCoreMap copy constructor. Neater, and almost certainly faster.",
  "32c94a7a": "Another crack at a faster implementation",
  "00282f54": "Using semgrex was cute, but this is much faster, sadly",
  "3534aa2c": "Replace HashIndex with faster index",
  "9f285509": "Make the English dependencies maybe 1 second faster",
  "fe9458bc": "Convert another regex to a slightly faster pattern",
  "2fff9d29": "Remove one CoreMap lookup... should be a tiny bit faster",
  "da4b5623": "Simplify an exact match expression - will be microscopically faster",
  "d75dba0b": "Implement faster sampling for active learning",
  "0e43a0cd": "Add comment on performance.",
  "9b973d22": "Add tuples read from TSV to cachedKnowledgeBase.",
  "ae36eff1": "Added label dictionaries for faster CRF inference",
  "ec01e805": "Implement a fast acos method",
  "9dfe6fc5": "Fixed UnknownWordGenerator to only generate unigram synthetic rules; faster detection of delete/identity decision; don't generate synthetic rules for observed words",
  "a40b8525": "weka multilayer perceptron: slow",
  "091ebdd2": "Removed slow KBP tests from general slowitest",
  "d0fd3268": "fixed CRF training slowdown issue caused by multithreading",
  "5d5271f2": "Fixed slotfillingtasks slow itest",
  "6b08fcaf": "Update IR performance numbers",
  "fa450178": "Update IR performance test numbers",
  "dccc74d0": "Code to merge multiple caches",
  "17847d1e": "Update regexner slow itest",
  "6e0119cc": "Try using TokensRegexNERAnnotator instead of RegexNERAnnotator. Should be a bit faster.",
  "23b432f1": "Made provenance a bit more bulletproof; updated performance numbers",
  "0f7a1121": "Add TokensRegexNERAnnotator.java (similar to RegexNerAnnotator but uses TokensRegex library and can take advantage of potential optimizations done for TokensRegex.",
  "7ee11a2b": "Change TagCount to have static read from file constructor. Change TestSentence to use SloppyMath.logAdd not ArrayMath.logSum when only adding two things (should be faster). Other spelling, javadoc, and todo things.",
  "e49616e6": "Updated score for gold ir performance",
  "1231c205": "Implement heuristic to start in middle of backoff for faster search. Use same default similarity so LuceneQuerierParams can be compared as equal.",
  "2ed38404": "More robust iterator for filebackedcache",
  "b410dc8b": "More robust file backed cache",
  "a7054489": "Update slotfilling performance.",
  "926aee32": "Another attempt to fix performance test",
  "84fb7f43": "Hopefully fixed performance test",
  "fa8b3e93": "merged transcripts for faster IO",
  "2d2d26ea": "Various changes to RegexNER: Mainly better documentation, but also remove method from RegexNERAnnotatorITest, using the equivalent method in Sentence instead, add the ability for RegexNERSequenceClassifier to be constructed using a Reader rather than a File or similar resource, and make it slightly faster (but not much).",
  "1507e02b": "Trying out the Kryo datum cache again",
  "48367cdb": "Added option to ignore uncached results",
  "5da5ee4a": "Disabled Kryo datum cache :(",
  "bfffa127": "might be a tiny bit faster",
  "d3d6f593": "ArraySet instead of LinkedHashSet may be slightly faster for the relations we have",
  "e56a0c5d": "Perhaps this is microscopically faster'",
  "3fb84c7e": "Configuration for populating the IR cache (run_cache)",
  "c5a788d2": "Changed IR performance metric",
  "30493044": "This is faster, even if it's less satisfying code",
  "594331e9": "Made the RegexNER itest into a slow itest",
  "9d0a1c3c": "Break unnecessary depenency of optimization package on sequences.",
  "6f03e978": "Add routine to tell you number of nonzero parameters after CGRunner optimization; make more things private/protected; remove unused newtonerr parameter in methods (the code actually always just used eps); remove solve() method -- now have to save solveQN() or whatever.",
  "ae8f9577": "Upped slotfiller performance minimum",
  "88570937": "Added MAP to the IR performance test",
  "ca364dc3": "Don't try to cache for IRSlowITest",
  "7d1be09f": "Beginnings of performance monitoring for classifier",
  "527fd650": "Disabled slow portion of MIML-RE",
  "5bd48946": "Parallelize datum reading (when cached)",
  "59a811af": "Efficiency improvements for cache",
  "f3bd9432": "Script to cache sentences; reorganized run script",
  "fb4b3aa0": "removed filebackedcache option from invindex due to a bug in filebackedcache",
  "517e1bc8": "Add some documentation to the file backed cache",
  "0b1b2be9": "moved filebackedcached from more to core; removed three @suppresswarning that Eclispe said were either unnecessary or unsupported",
  "07c7a0e8": "Reverse the order of buffer and gunzip... gunzip already has a buffer, and this is much faster for large objects",
  "7c4bcb21": "Rewrite the separator detection code a bit - now the state just keeps track of a list of separators and we calculate the locations as needed. Allows for more general features and doesn't seem to be slower",
  "2438ba4d": "A List is somewhat faster and doesn't really change anything",
  "87ec3a8b": "making it run faster; profiling",
  "f7e5bf7a": "Fix a bug where a word that is first forced to be a specific tag and then later not forced to be any tags will cache an unexpected number of tags",
  "f9b7e7e1": "Initial cut at a faster MulticoreWrapper implementation; still need to add error correction",
  "f123b416": "Small multithreading optimizations",
  "a16a6b48": "simply clear NNLM cache when it's full",
  "af24e37a": "use putIfAbsent in NNLM cache, also fix bug to avoid removing and accessing same key at the same time",
  "2e437b3a": "More documentation, and numbers comparing serialization performance",
  "971445ad": "Apparently this is what I do with free time on Sundays: make the dependency converter 1% faster",
  "b9a98d2a": "Add a commented out blob of a much more readable but significantly slower version of addStrandedPobj",
  "733a5ad9": "Make SemanticGraph creation a tiny bit faster",
  "a873b4d8": "Add the ability to look for default numbers - although this does not seem to help accuracy and slows the tagger down by 2%",
  "f3e3498e": "Just use Arrays.copyOf in copy ArrayCoreMap copy constructor. Neater, and almost certainly faster.",
  "89d38c2a": "Another crack at a faster implementation",
  "d87a85ee": "Using semgrex was cute, but this is much faster, sadly",
  "d5d2266b": "Make the English dependencies maybe 1 second faster",
  "d6148bd5": "Convert another regex to a slightly faster pattern",
  "e034c5c8": "Convert another regex to a slightly faster pattern",
  "750c1ad0": "Remove one CoreMap lookup... should be a tiny bit faster",
  "bde0ad84": "Remove one CoreMap lookup... should be a tiny bit faster",
  "d296724e": "Simplify an exact match expression - will be microscopically faster",
  "c32bd9c5": "Simplify an exact match expression - will be microscopically faster",
  "97a7d873": "Implement faster sampling for active learning",
  "841dcd5d": "Implement faster sampling for active learning",
  "39c4cee0": "Add comment on performance.",
  "2d387616": "Add comment on performance.",
  "ee0f2018": "Added label dictionaries for faster CRF inference",
  "ac5030d6": "Added label dictionaries for faster CRF inference",
  "0a121fa5": "Implement a fast acos method",
  "c5724926": "Implement a fast acos method",
  "06224f1c": "Fixed UnknownWordGenerator to only generate unigram synthetic rules; faster detection of delete/identity decision; don't generate synthetic rules for observed words",
  "88ac9399": "Fixed UnknownWordGenerator to only generate unigram synthetic rules; faster detection of delete/identity decision; don't generate synthetic rules for observed words",
  "e1be9007": "Update IR performance numbers",
  "2f013223": "Update IR performance numbers",
  "060eb53a": "Update IR performance test numbers",
  "a6ac15fd": "Update IR performance test numbers",
  "56bf3728": "Code to merge multiple caches",
  "0f626f67": "Code to merge multiple caches",
  "002ed2ab": "Try using TokensRegexNERAnnotator instead of RegexNERAnnotator. Should be a bit faster.",
  "40bb6fcf": "Try using TokensRegexNERAnnotator instead of RegexNERAnnotator. Should be a bit faster.",
  "635423c6": "Made provenance a bit more bulletproof; updated performance numbers",
  "61bbf63a": "Made provenance a bit more bulletproof; updated performance numbers",
  "c3975a62": "Added option to ignore uncached results",
  "1960a4a6": "Added option to ignore uncached results",
  "8f775099": "Configuration for populating the IR cache (run_cache)",
  "9d764ae6": "Configuration for populating the IR cache (run_cache)"
}, "coursera-android": {
  "": ""
}, "crate": {
  "f6c3d156": "Improve performance of AVG(<interval>) aggregation",
  "30081686": "Improve performance for Interval comparisons",
  "a70f30f3": "Fix SAME_NODE optimization for join operations",
  "75e004e1": "Always use disabled cache for IndexMetadata verification",
  "8ec7d733": "Don't cache parsed analyze statement in TableStatsService",
  "f538de7d": "Fix ExplainPlan to utilize cast optimization on sub plans.",
  "ce971b2f": "bp: Improve performance of shards limits decider",
  "2c128270": "Remove cached RemoteCluster if failed to create a client",
  "fc583e10": "Enable use of append only optimization",
  "dcb09e26": "Don't cache file inputs inside the RestoreContext",
  "adcfc238": "Don't apply swap cast optimization when explicit cast is used.",
  "73475ced": "Opt out of join order optimization if join condition references foreign relation",
  "3f0e3d1a": "add test_copy_from_with_fail_fast_with_write_error_on_handler_node",
  "350686e6": "Make copy-from-fail-fast integration tests more concrete",
  "d10147c1": "implement fail_fast option for copy-from statement",
  "c35b7e35": "Add 'triage' labels to issue templates for bug- and performance-reports",
  "9ce1d590": "Add an issue template for performance issues",
  "618adcec": "bp: Warn on slow metadata performance",
  "0772f2d9": "Improvement: Copyedit LIKE/ILIKE performance note",
  "8f9d6cdf": "Enable slow tests for jenkins java tests",
  "4963714a": "Optimize fetch performance for sequential value retrieval",
  "e6a72b78": "bp: Improve slow logging in MasterService",
  "72f51b5c": "bp: More logging for slow cluster state application",
  "c064a046": "bp: Warn on slow metadata persistence",
  "6af8b294": "bp: Enable indexing optimization using sequence numbers on replicas",
  "092eaf6f": "bp: No mapper service and index caches for replicated closed indices",
  "51f06fff": "bp: Don't close caches while there might still be in-flight requests",
  "83d8c41b": "Fix performance regression; execute ORDER BY w/o LIMIT with QTF",
  "9f63a1d9": "Add query optimizer incl. rules for cast optimizations",
  "10f5523e": "Remove undocumented & unexposed index.fielddata.cache setting",
  "6865841e": "Remove unused cache clearing code",
  "8f29abc1": "Add fast function lookup-by-signature support",
  "455ed723": "Add fetch optimization rule for Limit->Collect sub-trees",
  "2c8965e9": "Remove eager Collect → Get optimization",
  "07b982ad": "Temporarily remove fetch optimization",
  "a3a6b433": "Use topN distinct optimization only if all nodes support it.",
  "3b908fc0": "Move sync translog operation outside writeLock to improve performance.",
  "796bcfd7": "Add blackbox/.mypy_cache to gitignore",
  "89923824": "Drop QueriedSelectRelation normalization optimization",
  "fe629cb0": "Fix outer-to-inner-join plan optimization of FULL outer",
  "14b91522": "Make `testSelectToRoutedRequestByPlanner` faster",
  "6bea6d70": "Enable gradle build cache",
  "db94f550": "Annotate the disruption tests as slow (disabled by default)",
  "c8005e7c": "Re-implement count(*) optimization using the rule framework",
  "5084e0f4": "Ignore .gradletasknamecache file",
  "035a7c10": "Remove indexing slow log code",
  "261f5951": "Tests: Make testSelectIncludingUnassignedShards fast",
  "5b42863c": "improve performance of sys table expressions",
  "48dc123d": "tests: Make selectGroupByWithBreaking faster",
  "96c12775": "Do where clause optimization in planner instead of analyzer",
  "f41e58af": "Move OrderBy push-down optimization for joins.",
  "3943a1c4": "Minor code optimizations/formatting + class comment",
  "e6c7b089": "Optimize performance of IN or = ANY with subquery.",
  "df1d3914": "Changes: Remove UNION ALL / ORDER BY optimization entry",
  "7808cbc3": "fixes logical plan collapse optimizations inside relations",
  "924eb0d6": "removes no-op optimization on select plans",
  "850d3fe7": "Re-add join re-ordering optimization",
  "0a3ff119": "Integrate group-by plan optimizations into LogicalPlan operator",
  "67a689a0": "Optimize performance of the algorithm that determines the best order of joined tables.",
  "1b1342a7": "Tests: Make testMinimumMasterNodesCheckWithCorrectSetting faster",
  "0ec17d66": "Tweak JOIN ORDER-BY push-down optimization",
  "c896c6fd": "Fixed: Reordering optimization of join pairs",
  "62413341": "Skip paging orderby optimization for system columns",
  "2de674c3": "fixup! add insert performance docs",
  "cf067e07": "fixup! add insert performance docs",
  "2737e367": "add insert performance docs",
  "8b230ca7": "Updated documentation regarding collecting stats. A note needed to be added to explain that enabling stats collection carries with it a performance penalty, and the reasons for this.",
  "da2b2c36": "Optimize performance of negation queries `!=` on columns with `NOT NULL` constraint. e.g.: select 3RD-PARTY-NOTICES.md app benchmarks blackbox build.gradle buildSrc CHANGES.txt codecov.yml CODE_OF_CONDUCT.md CONTRIBUTING.rst crate-admin.gif devs docs extensions gradle gradle.properties gradlew gradlew.bat idea Jenkinsfile libs LICENSE NOTICE plugins README.rst sandbox server settings.gradle setup.cfg from t where not_null_column != 10",
  "83be8534": "Fix arrayOrdering optimization",
  "77658742": "always log incorrect result even if failfast",
  "d969765f": "Enhance performance optimisation of full joins by rewriting them to left, right or inner joins when conditions in ``WHERE`` exclude null values.",
  "84e0cea3": "Add message to assertions and throw exception. Minor code optimizations.",
  "0b2d9148": "Add message to assertions and throw exception. Minor code optimizations.",
  "d939c76f": "Fix high prio findbugs warnings and minor code optimizations.",
  "36a12f9d": "Use stored fields instead of fieldcache to read _uid",
  "66a5a2dd": "cache sigar probes to prevent incorrect calculation of percentual values",
  "9dc24196": "Fixed performance issues with operators and functions caused by unintended recursive calls of Input.value()",
  "934622d3": "fix: test should wait for cache invalidation",
  "3a9f659e": "fix bug in cache invalidation logic of DocSchemInfo",
  "318731d6": "removed all references to slowlog",
  "0c3a1dae": "Remove localNode execution optimization from Transports",
  "24632e4d": "Fix: queries could be slower if they contain an expression on the left side of a comparison, ( e.g: 2 + 1 > x ) instead of the right side",
  "37debd75": "ensureStringTypesAreStrings micro-optimization",
  "ad2cb035": "fixed WhereClauseAnalyzer test setup and added a test for generated column range optimization",
  "0ffa5adb": "added missing generated column optimization",
  "14087584": "fix query optimization with >1 generated columns",
  "3a8e6d8d": "fix performance of NestedLoop stress test",
  "b1431b87": "support (cached) repeat in IteratorPageDownstream / PagingIterators",
  "97534411": "performance: limit was chosen too big for sorted select queries",
  "e603a48b": "improved performance of pause / resume on unordered LuceneDocCollector by holding the current Scorer. So it’s not necessary to restart the search and to skip documents",
  "516cc1b2": "improved performance when using pause / resume in OrderedLuceneDocCollector",
  "79251472": "use cached regexp filter for regexp operator queries for better performance",
  "6880f692": "use cached regexp filter for like queries for better performance",
  "e66e4450": "reduce logging in LuceneDocCollector and cache Exception",
  "9d074473": "performance improvement: use MergeProjection at QAF for doc tables",
  "b5193d9a": "fix broken cache invalidation on tables in custom schema",
  "85d2c26b": "remove single bucket optimization from SortingBucketMerger",
  "ef9b0320": "invalidate cache on create table table exists check",
  "09cc6480": "Merge pull request #2073 from crate/h/del-dns-cache",
  "4d9c4db0": "delete fake DNS cache after test",
  "1ef9f388": "disable group by on reducer optimization for partitioned tables",
  "e089b40b": "LuceneDocCollector optimization: Filter for all ordered values",
  "03a177e2": "use cache for partition values at fetch projector",
  "7acf5671": "disable filter cache in genericFunctionQuery",
  "713478a7": "enable travis cache",
  "ae1bc169": "Updated crate-admin to version 0.11.2 which includes following changes: - removed usage of sys expressions in wrong context - fixed a template rendering issue in cluster view in Safari - de-register watches to decrease DOM updates and improve performance in cluster view - fixed title of `tables` view if no tables exists or connection is down",
  "282ae770": "Updated crate-admin to version 0.11.2 which includes following changes: - removed usage of sys expressions in wrong context - fixed a template rendering issue in cluster view in Safari - de-register watches to decrease DOM updates and improve performance in cluster view - fixed title of `tables` view if no tables exists or connection is down",
  "b6808073": "leverage ordinal fieldcache capabilities for better performance",
  "48774c3c": "invalidate DocTableInfo cache if single partition is altered",
  "b6d1966b": "minor performance improvements for insert into",
  "9386875f": "cache parsed sql statements",
  "9bed98d1": "BulkShardProcessor performance optimizations by using locks instead of synchronized",
  "1faf54da": "Merge pull request #924 from crate/s/copyfrom-mem-optimizations",
  "41b231fe": "use doc lookup instead of field caches for normal select",
  "c84b9401": "convert ips to bytesRef if loaded from fieldcache",
  "16887391": "fixed table info cache invalidation",
  "5f057955": "invalidate only related table infos from cache on meta data change",
  "5f029a9d": "Merge pull request #211 from crate/m/any_optimization",
  "a137ef4b": "any aggregate optimization",
  "57b521ec": "code-style and optimizations",
  "c2939aa2": "Merge pull request #96 from crate/mwahl/benchmark-optimization",
  "2433f1fc": "Merge remote-tracking branch 'origin/master' into mwahl/benchmark-optimization",
  "81d845db": "benchmark-optimizations",
  "c6a0ba9b": "add parameterized tests for query planner optimizations"
}, "crawler4j": {
  "f09da4d": "Merge pull request #289 from valfirst/politeness-delay-optimization",
  "705cac0": "Added configuration parameter processBinaryContentInCrawling that determines if binary content must be processed by TIKA in addition to being retrieved at all (which is controlled by includeBinaryContentInCrawling). This is useful if you want to be able to retrieve the binary content but do not care if links inside are processed. This can improve the performance when handling binary documents strongly."
}, "Crouton": {
  "": ""
}, "cryptomator": {
  "76811f9": "Improve error handling: cryptomator.png dist license LICENSE.txt pom.xml README.md src suppression.xml Vault only returns the confiCache cryptomator.png dist license LICENSE.txt pom.xml README.md src suppression.xml cache has safe and unsafe method to get config",
  "1fbd07b": "Refine impl: cryptomator.png dist license LICENSE.txt pom.xml README.md src suppression.xml rename wrapper to cache cryptomator.png dist license LICENSE.txt pom.xml README.md src suppression.xml reset the cache to null if error during config loading happens cryptomator.png dist license LICENSE.txt pom.xml README.md src suppression.xml always set the the cache in the vault obj",
  "b47beab": "startup time optimization",
  "e75c415": "Load vault config on demand and don't cache it",
  "9c034f3": "split up read and write charts and added cache efficiency chart (because we will add further read/write-specific stats like total number of files read/written, bytes encrypted/decrypted, etc)",
  "cfe25d0": "updating siv-mode for twice as fast filename encryption/decryption",
  "2902479": "Speed up build, make cache more efficient",
  "408d16f": "store to run-specific cache, but restore from any previous run",
  "8309417": "use cache key depending on git sha",
  "9205baf": "Added maven dependency cache",
  "5dc1d9b": "Fail fast (ammendment for #1047)",
  "995bba6": "cache maven dir",
  "e6a9786": "minor bytebuffer allocation optimization",
  "f93d32c": "faster directory moving (no recursive iteration on filesystem needed any longer)",
  "752601f": "further crypto layer optimizations for WebDAV compliance",
  "a6bbc0e": "- CryptoFS + InMemory Benchmark test - faster growing in-memory files",
  "a8f53b7": "Increased performance of non-random-access read/write by switching to block-aligned mode only when necessary.",
  "6acbba4": "Fixed weak valued cache test",
  "72c0d2c": "removed timeouts from tests, as timeouts were caused by slow JVM stuff like class loading or Cipher.getInstance",
  "b4ab09b": "Using Java 8 LongAdder instead of AtomicLong for better performance during I/O analysis.",
  "09b4130": "- fixed size obfuscation padding - fixed behaviour when serving invalid content ranges, thus improving random access performance (thats why we created the 0.8.2 workaround) - reduced loglevels of some frequent messages",
  "095f60e": "Update 0.8.2 Fixes slow range requests on OS X, as WebDAVFS sometimes processes responses only after closing the connection, even though 'keep-alive' is requested.",
  "ed7dc60": "slow start, increasing number of blocks worked on per thread, reusing ciphers for multiple consecutive blocks",
  "d76154c": "- reduced size of chunks, a MAC is calculated for (not final yet) - faster range requests due to reduced chunk size, thus faster video playback start - fixed range requests - making file locks optional (if not supported by file system)",
  "2849e39": "on-the-fly MAC calculation for better performance (addresses issue #38) we still need to add some kind of warning on the UI and create an async MAC checker for ranged requests",
  "63f64fa": "Fixed performance implications due to slow /dev/random. Now seeding PRNG only once per Cryptor. Fixes #36",
  "1d05e87": "- Support for HTTP Range header fields, thus vastly improved performance for video streaming - Simplified cryptor implementation for partial decryption",
  "6dff296": "- using java.util.Random in unit tests again, as performance doesn't change by using non-random PRNG - of course still using a cryptographically secure PRNG in production ;-)",
  "38a0cfb": "- faster unit test using insecure PRNG - test only ;)",
  "8c2fe14": "- bugfix: slow webdav on windows (http://support.microsoft.com/kb/2445570) - bugfix: windows mount on non-german installations - bugfix: system-dependent implementation of mount commands now done in specific strategy. no linux-specific URI outside of mount package, thus working on OS X again and simplified windows code - change: now using ipv6",
  "39d01c3": "- fixed warnings in OSX Finder - improved performance by caching paths (no file contents get cached though)",
  "9988ec6": "- replaced webdav implementation (webdav-servlet -> milton -> jackrabbit): faster, better, harder, stronger and much more space for future improvements - more lightweight filename encryption (no more metadata for filenames < 144 chars), thus less filehandles, less blocking I/O - vastly refactored project structure"
}, "ctci": {
  "": ""
}, "CtCI-6th-Edition": {
  "720e9ee": "Question 8.12 optimization: Instead of setting a space on the chessboard to a NO_QUEEN constant, remove the slot from the array saving looping & copying time in later recursive steps.",
  "23aaab3": "Optimize solution to question 4.7: in_array() has O(n) performance, so replace it with a key-based build checklist approach that has O(1) performance."
}, "cw-omnibus": {
  "9dbbbb9": "rolled back malfunctioning optimization"
}, "dagger": {
  "4571804": "Merge pull request #373 from cgruber/fasterplusgraph",
  "67971fe": "Merge pull request #353 from cgruber/performance_fix_for_plus",
  "b0a2094": "Use Class.newInstance to instantiate Dagger classes. Class.newInstance caches the constructor, so this should generally be a faster operation. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=54920411",
  "b41d632": "Clean up (and improve performance of) the creation of member injection keys. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=54920552",
  "dd8b09b": "Use String.concat in FailoverLoader for performance-critical concatenations of two Strings. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=54112486",
  "ed48d58": "Merge pull request #292 from cgruber/cacheclassloading",
  "b72d31c": "Make cache private - no access needed for testing.",
  "0403d77": "Create a cache for class loading that both successfully loaded classes, as well as class lookup failures (using Void.class as a null object).",
  "04892c0": "First draft of a new, fast dependency JSR-330 injector."
}, "DanmakuFlameMaster": {
  "21f902f": "CacheManagingDrawTask:fix cache-missing bug caused by invalidateDanmaku",
  "7a7d932": "CacheManagingDrawTask: add CachingPolicy Increase cache hit rate some bugfix",
  "9a8e439": "Revert 'CacheManagingDrawTask: decreaseReference before cache-clear'",
  "6faad52": "DanmakuContext:make the bits length of bitmap-cache pixel configurable",
  "01da705": "CacheManagingDrawTask: decreaseReference before cache-clear",
  "03dd4a0": "not wait while preparing caches if player paused.",
  "cac6bf9": "add live danmaku to cache danmakus.",
  "207c243": "CacheManagingDrawTask: sync cache-timer|timer in dispatchAction()",
  "145af3e": "CacheManagingDrawTask: crate cache at once if danmaku.isLive == true, and the cache of live-danmaku will not join cachemanager",
  "6a254cc": "CacheManagingDrawTask: not update cachetimer if danmaku.isLive==true",
  "3d42b00": "CacheManagingDrawTask: build all caches of danmaku in queue-thread",
  "083198b": "CacheManagingDrawTask: clear all caches on removeAllDanmakus()",
  "e385ed6": "CacheManagingDrawTask: optimize preparing caches while in seeking action",
  "5c94763": "CacheManagingDrawTask: avoid destroy cache if hasDrawingCache in REBUILD_CACHE action",
  "0e2db49": "CacheManagingDrawTask: avoid destroy cache if hasDrawingCache in REBUILD_CACHE action",
  "abe251c": "DanmakuRenderer: add to caching task if drawItem.isLate has no cache",
  "03eecbc": "DrawTask: clear related-cache of danmaku in invalidateDanmaku(..)",
  "553e3cf": "CacheManagingDrawTask: optimze cache building/managing",
  "e13d64c": "DanmakuRenderer: request creating cache if danmaku has no cache and CacheManager exists",
  "ac30e7d": "获取最新一条弹幕实现修改；不用cache点击中的弹幕，每次点击时new",
  "769f9fa": "CacheManagingDrawTask: apply priority and check isfiltered before cache building",
  "d56c281": "CacheManagingDrawTask: optimze cache-building",
  "7979272": "DanmakuFilters: optimise performance & memory",
  "a09552e": "CacheManaging: Reduce cache miss after ScaleTextSize updated",
  "c05aa59": "CacheManaging: Fix possible forever cache-miss after ScaleTextSize updated",
  "9883fc2": "CacheManaging: Improve cache miss/error after ScaleTextSize updated",
  "b18ec08": "CacheManagingDrawTask: Improve cache-miss after config updated",
  "e3a589b": "CacheManagingDrawTask: call mTaskListener.onDanmakuConfigChanged after cache-rebuilding",
  "77389ce": "DrawHandler: Cancel inaccurate fps-performance pre measure",
  "204886a": "DrawHandler: do some refactor & some optimization",
  "501e436": "CachemanagingDrawTask: improvie the probability of cache hits",
  "a590fbb": "CacheManagingDrawTask: fix cache-missing c caused b by seek()",
  "80f3793": "CacheManagingDrawTask: improve cache utilization",
  "2d3261d": "CacheManagingDrawTask: improve the rate of cache-hitting",
  "b7a6b58": "CacheManagingDrawTask: improve cache building and reusing",
  "e463cb4": "CacheManagingDrawTask: improve cache resusing",
  "10721a7": "CacheHandler: fix cache rebuilding issue",
  "633a5c7": "avoid to refresh caches when MAXIMUM_NUMS_IN_SCREEN changes",
  "265ab10": "CacheManagingDrawTask: Fix up cache clear bugs",
  "0e6ff36": "DanmakuView: Enable danmaku drwaing cache default",
  "0e345ed": "Check reuseable cache before building a cache",
  "25e6c60": "Not remove caches while danmaku is visible",
  "8a23747": "Build drawing cache for danmaku inserted",
  "20c5f97": "Build drawing cache for danmaku inserted",
  "3b7ed14": "Build caches when inititalize",
  "2e0d2e2": "Correct cache timer updating",
  "9c6471c": "Correct cache timer updateing",
  "5d31c0b": "Clear caches when cache timer fall behind",
  "2820e88": "Clear caches when cache timer fall behind",
  "552913d": "Check cache size",
  "352ebe2": "Fix cache recycle & Upgrade gradle",
  "1ab1dc4": "Skip cache buiding when danmaku displayed on the screen",
  "8cce739": "Clear drawing caches after seek",
  "fa5b08c": "Fix the cache missing problem after seek",
  "6b20437": "Fix caches recycle bugs",
  "6849c46": "Fix caches recycle bugs",
  "a08d834": "Recycle unuse cache before building new",
  "2b8a2cd": "Recycle unuse cache before building new",
  "f44f88e": "add drawing cache testing code2",
  "7df9a40": "add drawing cache testing code"
}, "databus": {
  "1a0ddc1": "cache pk field and get key obj from record (#97)",
  "542f7e6": "cache ordered filedList"
}, "dataease": {
  "5244c650": "Merge pull request #4784 from dataease/pr@dev@perf_multi_login_cache",
  "e484627a": "Merge pull request #4770 from dataease/pr@dev@refactor_prompt-optimization",
  "ba866423": "Merge pull request #4594 from dataease/pr@dev@fix_mobile_cache",
  "77a2a3f0": "Merge pull request #4542 from dataease/pr@dev@fix_dataset-cache",
  "34c4785d": "Merge pull request #4510 from dataease/pr@dev@fix_token_cache",
  "eb985501": "Merge pull request #4499 from dataease/pr@dev@perf_token_cache",
  "9ba044f7": "Merge pull request #4485 from dataease/pr@dev@refactor_menu-cache",
  "5c3b5add": "Merge pull request #3915 from dataease/pr@dev@fix_app-clear-cache",
  "3a2d0639": "Merge pull request #3701 from dataease/pr@dev@perf_cleah_npm_cache",
  "2dff8af7": "Merge pull request #2841 from dataease/pr@dev@feat_panel-server-cache",
  "f1ff27a4": "Merge pull request #2656 from dataease/pr@dev_user_interactive_optimization",
  "2e7ac187": "Merge pull request #2655 from dataease/pr@dev_user_interactive_optimization",
  "80dbf0ab": "Merge branch 'pr@dev_user_interactive_optimization' of https://github.com/dataease/dataease into pr@dev_user_interactive_optimization",
  "459b0d49": "Merge pull request #2541 from dataease/pr@dev@refactor_slow-sql",
  "3c6d2fb9": "refactor: 使用Gson 替换fastjson",
  "162b51ee": "Merge pull request #2145 from dataease/pr@dev@refactor_panel-cache",
  "58cd1c14": "Merge pull request #2129 from dataease/pr@dev@fix_redis_cache",
  "16ac0562": "Merge pull request #1900 from dataease/pr@dev@refactor_cache_redis",
  "07e267a7": "Merge branch 'dev' into pr@dev@refactor_cache_redis",
  "a6e47c82": "Merge pull request #1896 from dataease/pr@dev@refactor_cache_module",
  "1b7aefbc": "Merge pull request #1867 from dataease/pr@v1.8@fix_dept_auth_cache",
  "23955d8c": "Merge pull request #1759 from dataease/pr@dev@fix_cache_consist",
  "f2b2c3b4": "Merge pull request #621 from dataease/pr@dev@fix_delete_areaCode_cache",
  "a02df9d8": "feat(backend):spark cache 初步实现",
  "f0b34763": "feat: 获取用户信息ehcache缓存机制",
  "624d9213": "feat: 禁用alibaba-fastjson 重大安全漏洞",
  "38df90d3": "feat: 删除不必要依赖 禁用alibaba-fastjson 重大安全漏洞"
}, "datahub": {
  "72bcfc53": "feat(caching): skip cache on ownership tabs (#8082)",
  "4ecb459f": "ci: prevent qodana from using all of our cache (#8054)",
  "ee5480bc": "fix(cache): update search cache when skipped, but enabled (#7936)",
  "9199c89f": "fix(cache): Fix cache key serialization in search service (#7858)",
  "b5889466": "fix(ui) Disable cache on Domain and Glossary Related Entities pages (#7867)",
  "23e57fff": "fix(sdk): remove rest emitter to graph cache in CorpGroup (#7743)",
  "54a37279": "test(ingest/bigquery): Add performance testing framework for bigquery usage (#7690)",
  "c7d35ffd": "perf(ingest): Improve FileBackedDict iteration performance; minor refactoring (#7689)",
  "90ecdb54": "fix(lineage): add cache key truncation for search lineage key (#7671)",
  "4da49fb1": "refactor(ui): Make Navigating DataHub UI easier, fix duplicate tracking, duplicate networks calls, + misc optimizations (#7592)",
  "8dd7a855": "refactor(ingest): Use shared connection wrapper over connection cache (#7570)",
  "bc61d1e4": "fix(homepage): make entity counts execute in parallel and make cache configurable (#7249)",
  "f79438ff": "fix(ci): remove command from cache key as irrelevant for dependency (#7314)",
  "b34e4fe1": "fix(ingest/bigquery): Fix for table cache was not cleared (#7323)",
  "1ab495c2": "chore(deps): bump http-cache-semantics from 4.1.0 to 4.1.1 in /datahub-web-react (#7231)",
  "04918b7f": "chore(deps): bump http-cache-semantics from 4.1.0 to 4.1.1 in /docs-website (#7230)",
  "e880f141": "fix(ci): do not fail fast for matrix runs (#7132)",
  "c5747a4c": "fix(ingest/snowflake): handle corrupted snowflake OCSP cache file (#7095)",
  "83231284": "feat(cache): add hazelcast distributed cache option (#6645)",
  "70659711": "perf(ui-ingestion): cache on creation or deletion of ingestion sources to reduce latency (#6647)",
  "d4bf6ce3": "feat(docs): fast reload command for markdown edits (#6539)",
  "6e415ca4": "fix(dataset): improve glossary term load performance for datasets (#6396)",
  "7ea97974": "perf(ui): virtualize schema table rows for rendering performance (#6287)",
  "7cdc9f7f": "test(neo4j): Improve test performance (#6142)",
  "956bee9d": "fix(glossary) Improve performance when getting root glossary terms (#6214)",
  "034f2e9f": "fix(glossary) Improve business glossary loading performance (#6208)",
  "09dec1ac": "fix(): Attempting to test paypal optimizations (#6073)",
  "2c659214": "feat(gms): Write back lineage search results to in-memory cache bound to feature flag (#6006)",
  "e21efbe9": "fix(build): add base image with gradle wrapper cached (#5467)",
  "5011c2f6": "fix(gms) Propagate cache exception upstream (#5381)",
  "f817ebb0": "fix(me) Cache the me query for performance reasons (#5316)",
  "b02c7f59": "perf(search): Improve search default performance (#5311)",
  "d05cd085": "fix(tokens): Fix stale cache problem, reduce cache timeout for access tokens + fix listing owner tokens (#5140)",
  "f0756460": "Revert 'feat(spark-lineage): add support for iceberg and cache based plans (#4882)' (#4945)",
  "46760a7f": "feat(spark-lineage): add support for iceberg and cache based plans (#4882)",
  "2a8ae272": "Revert 'feat: adding gradle, pip cache via gh cache, docker cache via dockerhub (#4387)' (#4637)",
  "b6de051d": "feat: adding gradle, pip cache via gh cache, docker cache via dockerhub (#4387)",
  "a12c9d2a": "Add flag to enable cache (#4335)",
  "2de29dc6": "feat(ingest) - bigquery: More verbose and faster lineage generation and option to set partition datetime for profiling (#4079)",
  "a56f0661": "perf(ingest): changes to improve ingest performance a bit (#3837)",
  "999e9e5b": "fix(search): Improve search and recs performance (#3660)",
  "0bb8f684": "feat(lineage): improved lineage performance + simplified layout logic + some easter eggs (#3357)",
  "f6e72291": "fix(ingest): delete pycache files when running clean (#2852)",
  "851fe130": "feat(react): fix apollo client cache issues in entities profile pages (#2841)",
  "a0d188c4": "fix(react): fix graphql apollo cache update issue cause of usagestats (#2769)",
  "a0ad590b": "fix(ingest): improve redshift ingestion performance (#2635)",
  "4a80baae": "Catch up fe to internal - includes module consolidations for faster build times (#1947)",
  "786f2e98": "removes step to occlude compliance entities rows that are outside viewport. step added 1.2s tp render process which is more critical than scroll performance",
  "46eb001f": "ts all the things. refactor getuserentities: cache and allow only one request. check for duplicate usernames.",
  "d4d1427c": "renames computed prop name. updates styles for error notification. begins steps to improve performance on compliance tab.",
  "48dcb473": "implements typeahead using category filter apis for datasets, metrics or flows. caches previously seen results in client memory. adds category to arguments provided by query params",
  "f6b62f53": "Add frontend API cache for getting internal users and groups (#402)",
  "cf635ce3": "adds user lookup service reference to application load and primes caches on app startup",
  "d844f86d": "Adds services for session, search, and keywords to application controller. Updates instantiation of application controller to prime cache for keywords async. Adds application level handler for search action.",
  "299a89ab": "DSS-5579: First pass improves autocomplete search results by giving preference to matches that are closer in length to search term and matches that include the search term in the prefix position. Uses Schwartzian technique to improve performance by perfoming expensive sort value extraction outside the sort operation",
  "f174a909": "update the sql query to improve the page loading performance",
  "97ebef49": "fix the impact analysis query slow issue",
  "58bcc500": "cache the autocomplete source list"
}, "DataMiningAlgorithm": {
  "": ""
}, "data-transfer-project": {
  "3d06268": "Bump http-cache-semantics from 4.1.0 to 4.1.1 in /client-rest (#1214)",
  "8e4c5cb": "Re-order demo-server Dockerfile for better cache utilization (#983)",
  "510c215": "Fix static links for local development. Make cloud and local references consistent and remove v2/. Use hashes instead for versioning. Note that this means old logos may be cached at CDN but I think this is OK, the important thing is that our bundled code is properly versioned."
}, "DataX": {
  "3172e24": "remove fastjson shade, fix starrocks writer plugin",
  "bb4bbb4": "Merge pull request #1684 from alibaba/all_plugin_to_fastjson2",
  "7136690": "Selectdb update to fastjson2",
  "2796410": "update fastjson version",
  "e3f9e12": "change fastjson version",
  "00d8e97": "bug fix and write speed optimization",
  "80860c2": "bug fix and write speed optimization",
  "7ac827b": "update fastjson version"
}, "datax-web": {
  "20cf134": "update: 改用 fastjson的格式化"
}, "dbeaver": {
  "b51b4ae1": "fix index cache reading for empty containers with non-persistent table (#19990)",
  "9f0666b1": "#19952 fix table cache reading query (#19957)",
  "6c7fb556": "#19678 fix tables subpartitions reading; fix cache invalidate (#19872)",
  "ba982886": "Clickhouse data type cache fix",
  "d611b189": "dbeaver/dbeaver#19553 PG data type cache sync (#19624)",
  "fbdd373a": "dbeaver/dbeaver#16795 Items read from composite cache: respect already read parents (#19440)",
  "5af9fc5a": "Mass rows insert performance improve",
  "e1c876b7": "dbeaver/pro#1363 do not read trigger cache if triggers are not supported by server type (#18846)",
  "51ab5fb9": "#17198 change case sensitivity condition for generic schema cache",
  "5220c39c": "#18367 connection edit dialog is slow (#18368)",
  "3679065c": "#17740 redundant method removed for the better cache search work (#18282)",
  "056512a6": "#16756 Big scripts run performance (#18277)",
  "cf13f9b5": "#13208 Oracle schema DDL read performance + monitoring",
  "3c421609": "dbeaver/dbeaver-ee#1817 Resource properties cache. Recent script search. Resource last modified calc fix.",
  "858795e7": "#16695 Nested elements render fix. API cleanup, performance improvements",
  "fe5d09d3": "#16695 - Performance optimization (getCellInfo) - Nested rows numbering fix - ValuePanel re-create fixed",
  "44ee00c3": "#16024 Use schema cache instead of plain list",
  "a23a2071": "ERD load performance tuning",
  "206a87a1": "QM optimization",
  "3f3bfe4b": "#13474 CSV sampling performance fix (reduce sample rows count + parser checks)",
  "77dfd4f3": "#13474 CSV sampling performance fix",
  "b5e1af67": "dbeaver/dbeaver-ee#1298 Big lists refresh performance fix",
  "d358f40f": "#13474 CSV sampling performance fix",
  "6ff16db9": "DVO-205 repeat actions with warm cache",
  "5c7be40c": "DVO-205 with setup-java@v2 version cache",
  "9fbd41d6": "DVO-205 testing codeql with cache on push event",
  "106bf800": "#11304 Data load progress monitor optimization",
  "905f8da2": "#11304 Batch processing performance, CSV import performance.",
  "b27a6c8b": "#13389 exclusion number and numeric data types removed from data type cache",
  "6c8d9fba": "dbeaver/dbeaver-ee#1060 Navigator tree refresh fix (performance)",
  "1f7c3a08": "Revert grand-children node cache (it is super-slow). #13063 fix reverted.",
  "0188a5ec": "dbeaver/dbeaver-ee#1118 move table cache loading help method from metaModel to container",
  "3d458487": "Tune performance of skip bind values",
  "d6149e93": "#10897 Batch processing performance configration",
  "18f9e7e5": "#10897 Batch processing performance configration",
  "e7e3bb4d": "Merge pull request #13027 from dbeaver/sqlserver-temp-tables-search-cache-fix#12182",
  "9c46c6f8": "#12070 Fix procedure cache lookup",
  "f0f6b0dc": "#11013 cache refresh; code cleanup",
  "21a7a71b": "#11013 support old Posrgres driver model for trigger cache reading; small code style fixes",
  "3339bf55": "#11013 add support of trigger cache for generic triggers; more parameters for InformixTrigger and HANATrigger",
  "153436fd": "Merge pull request #12755 from dbeaver/oracle-package-cache-optimization#12747",
  "c5191817": "Merge pull request #12766 from dbeaver/sql-server-foreign-key-cache-fix#12765",
  "0e820df3": "#12765 Fix foreign key cache",
  "da10822a": "#12747 Improve package cache performance",
  "62754163": "#12379 Exasol do not have custom data types, so we do not need to refresh datatypecache",
  "69d8e68d": "#11327 add performance group to preference page oracle",
  "592078ff": "#10818 refresh schema data type cache with schema refresh",
  "d3aa1a7c": "#11357 improve performance",
  "35fd4ed5": "Oracle auto-completion query performance: remove synonyms join",
  "b94369b4": "Merge pull request #12265 from dbeaver/oracle-table-trigger-cache-improvements#11382",
  "11222276": "#11382 Allow returning empty rows inside composite cache",
  "d852d1e7": "#11382 Move table trigger cache to the schema for faster loading",
  "75fcc1b6": "#11236 refresh lazy cache after setting property value",
  "9b013dd4": "dbeaver/dbeaver-ee#587 Object create actions icons fix. ERD diagram loading pre-caches navigator model.",
  "2b8b0c46": "#11455 discard subobjects when preparing statement for synonym cache search",
  "bcf420d5": "#10959 cache qualified name",
  "5ac01c68": "Grid render performance",
  "c91e22de": "#10872 code style fix, query view optimization",
  "172eab1b": "Jar sign performance",
  "94de85d6": "Jar sign performance",
  "c7bef0d4": "#11216 postgreSQL data types cache reading changed",
  "ce438235": "#10684 data type cache reading changed. now we read cache for database, not schemas",
  "de9ec013": "#10782 clear FK names cache on the end of table FK reading",
  "9bc895a3": "#10396 expose postgres database caches",
  "2a0e1c20": "#10396 fail silently on pg_tablespace cache access denied error",
  "419bbcb9": "GH Maven cache",
  "9b0b6020": "GH Maven cache",
  "7c25c2ea": "#10677 Connection page images refactoring + page redraw performance",
  "15c926f2": "Toolbars rendering performance",
  "11758a3e": "#9858 another statement as option for reading table cache added",
  "3808864f": "Merge pull request #9978 from dbeaver/cacheserialpostgres#9352",
  "76801a1b": "#9352 extra data types cache loading to find serial types added",
  "2fe4a7e3": "#9362 SQLServerDatabaseManager: return database cache instead of null",
  "465955dc": "#9602 Oracle table read query optimization",
  "39624ce3": "RSV performance",
  "bf881abc": "PG & GP: schema pre-cache fix + model refactoring",
  "8b88dcba": "Oracle table cache fix (columns query)",
  "ea001a74": "#7777 Grid draw performance: grid lines draw fix",
  "de30b1b4": "#7777 Grid draw performance: grid lines draw optimization",
  "4088d7aa": "Merge pull request #9422 from dbeaver/fixconstraintcache#9371",
  "0b40aeef": "PG: filter partition indexes in table cache",
  "9efec1f4": "#7777 Grid rendering performance (cache props + disable clipping)",
  "285f4f44": "#9150 Firebird: table cache refresh fix",
  "a53aaec2": "#6069 adding MySQL check constraints to 'create constraint' dialog, check constraint cache created, MySQLTableConstraintBase created",
  "7e235db1": "#9018 Table stats cache fix (set transient to avoid replace during refresh)",
  "1005f054": "#9018 Navigator tree: statistics cache fix",
  "d005d2f5": "#8920 Oracle MViews cache fix. Cache model addition (object invalidation)",
  "d0ebba70": "Oracle: remove synonyms from schema children (too slow md read)",
  "01d41960": "CB-120 Session cache reser on login/logout",
  "78900b74": "#8169 Cleanup only transient collection fields cache (we need them in some cases, e.g. PG proc parameters)",
  "a2c2d2d1": "Imports optimization",
  "89128bf6": "Imports optimization",
  "13db808b": "Imports optimization",
  "0ceb7561": "#8169 Objects cache cleanup fix",
  "9004af8f": "#8217 Native artifacts loading fix (use maven cache)",
  "0afbf158": "Greenplum table cache fix (use it always)",
  "8df18db6": "#8063 MySQL: references cache",
  "ebe65dc6": "#8063 MySQL: references cache",
  "05cec567": "#8063 DB2: reference cache reading fix",
  "73e96294": "#7838 CSV export: config reading fix (formatNumbers) + cache settings.",
  "b641a0ce": "Connection page switch fix (slow dialog render)",
  "03c92b10": "Query processing performance (run in async + lazy panel initialization)",
  "8c5953c1": "#7352 Data transfer: cache timestamp value. Timestamp pattern config added.",
  "eb816206": "#5986 - SQL output performance modifications",
  "55515a6b": "#6972 Task execute model refactoring. DT wizard refactoring + optimization",
  "7911f24e": "#7174 JSON editor improvements (scanner performance)",
  "e4340af6": "#6961 Disable database looup in fast completion",
  "c2a08dad": "#6885 Object rename - update name in container cache",
  "5c9be6aa": "#6489 Navigator tree meta reading performance improvements",
  "f986460b": "Global refs cache cleanup fix",
  "2e396fc0": "Ref value editor fixes (render performance)",
  "d2e82fb9": "#6725 Global references cache",
  "0a7763b9": "#6725 Global references cache",
  "1dbed733": "Advanced list performance fix (lazy image loading)",
  "93f93629": "#6627 Active project detection fix. Navigator view default selection cache fixed.",
  "1a89a87b": "Entity editor rendering fix (performance)",
  "fcf59fcd": "Short string calc performance fix",
  "20deb0b3": "Tolbar update performance fix",
  "da56b760": "Grid render performance improvement (cache preferences)",
  "8aed9cc1": "Update resource cache in project metadata",
  "d5d6986d": "Update resource cache in project metadata",
  "a6ee6425": "Update resoure cache in project metadata",
  "f0585891": "Generic: index cache fix",
  "5b312f9f": "5878 Constraint cache optimization",
  "30369e1b": "5878 Try to fix poor oracle performance on foreign keys",
  "8434d698": "PG/GP table cache fix",
  "114f5188": "#4935 Object create fix (read children cache)",
  "2be662b4": "Inline/panel text editor enhancement (init performance)",
  "b2c1d63b": "Grid render performance fix",
  "5d4ec521": "JDBC caches fix (full cache flag)",
  "8e114365": "Revert to tycho 1.1 (1.3 is too slow)",
  "2c1a0ff7": "Error in Query for cache",
  "5bc05fc2": "support for distribution key alters and performance optimizations",
  "f3ff5b2d": "#4719 Oracle: native TIMESTAMP data types handler fix (disable reflection cache)",
  "81c28b74": "optimize meta data query performance and organize scripts",
  "5d07ebd3": "Sync deadlock fix (cache clear).",
  "35f25096": "#4395 Command context fixes (last command cache)",
  "fa3a0fb1": "Ora data type cache fix",
  "178fb1ed": "PG: metadta read performance fixes",
  "6c10d951": "PG: data type cache made lazy",
  "d0b057cf": "Entity manager detection fix (performance). Dynamic type checking fix (cache + workaround for forceActive)",
  "2557fc3f": "#4000 Navigator: find node by object fix. Object create fix (performance)",
  "a63eb126": "Nav tree expand/collapse performance fix",
  "056d0708": "#1652 Keep ERD association attributes cached",
  "eac60f5c": "#3614 Query parser performance improvement (parse only if requested)",
  "d8c2571c": "Add cache,cycle and l10n for postgresql sequence。",
  "8d8bf93b": "QMDB - search performance",
  "4477b9b4": "Hyperlink detect fix (performance)",
  "84e7ca01": "Hyperlink detect fix (performance)",
  "65d0bcec": "#1599 Data insertion process performance is greatly improved.",
  "731b04e9": "#2213 resolved connection configurations are cached",
  "5bdd5275": "SQL editor foldings config. UI render performance increase.",
  "7846206e": "UI performance: navigator event model refactoring",
  "b1cf1c7a": "UI performance: navigator event model refactoring",
  "dbe40970": "UI performance: navigator event model refactoring",
  "4d463ad2": "#2101 Composite cache load fix (skip null objects)",
  "14e9c93b": "JDBC data type cache model refactoring. Generic data type properties.",
  "fba61971": "Disable Column Lookup because of performance issues",
  "eed60c0f": "#1801 LOB editor: load/save fixed. CLOB value display fixed. Default prefs changed (cache CLOB by default).",
  "b1b917ed": "#1705 RSV adv. paste performance fix",
  "7dd46540": "Oracle constraints cache fix",
  "129351ad": "SQL context informer (hyperlinks, auto-complete) cache fix (use ds listeners)",
  "8d9faed7": "#1699 SQL completion processor performance (big number of proposals)",
  "a87d3307": "Imports optimization (default code style)",
  "4fee0079": "Imports optimization",
  "64b4d430": "SQL parser fix (performance, get rid of bunch of instanceof)",
  "1171bc52": "#1438 Results viewer NPE fixes + UI init performance",
  "b32477f5": "#1189 SQL completion fix (performance)",
  "be5606d2": "#1059 Data transfer UI fix (bad performance for long SQL queries)",
  "326bd759": "Oracle metadata read performance",
  "668da1d7": "Cache read fix (cache corruption when two threads read the same metadata).",
  "b17e6f72": "#955 Oracle trigger model refactoring. Table triggers cache.",
  "cb4abadf": "#918 Hypelinks rendering performance.",
  "ab18ddff": "Objects cache additions",
  "fb49d0c7": "#853 MySQL table refresh fix (update triggers cache)",
  "6eccfb35": "DB2 refresh refactoring. Cache model improvement (full cache reset on remove).",
  "b07726b2": "Oracle: table refresh fix. MySQL & PG table refresh fixes (clear cache)",
  "12c7e6b5": "PG arrays handle improvement (performance)",
  "dc7101b7": "PG attr fix (hidden flag for new objects). Composite cache fix",
  "36b96cf7": "Metadata panel fix (cache color)",
  "1d80cd47": "PG tables cache is now lookup cache",
  "1e08557a": "DB2 index cache hack (cache tables)",
  "b869da4a": "Lookup cache - save missing names",
  "fa0b9488": "DB2 views cache - use lookup feature",
  "2b5d79d5": "DB2 tables cache - use lookup feature",
  "ec70dab8": "RSV update value performance fix",
  "b82bc328": "Tables copy. Composite cache fixes",
  "4556f845": "PG index drop fix. Index cache fix.",
  "dff78f45": "Grid performance",
  "ffcc184c": "PG procedures search/cache fix",
  "c49cbda1": "Oracle constraint reading performance fix",
  "f5ea681e": "Use unique indexes as best identifiers first (it is faster).",
  "95efbebc": "Completion processor performance",
  "35ef607e": "Maximum cache size limit",
  "35973a7c": "Navigator model optimization",
  "a9999de6": "#285 PostgreSQL data types cache fix",
  "39003ec2": "#285 PostgreSQL data types cache fix",
  "ae6c12d8": "#260 Content cache fix",
  "f71d50ba": "BLOB cache preference",
  "329386d5": "DB2 types cache reset on error",
  "490794f9": "Composite cache refactoring (read multiple child objects from single row)",
  "644526f5": "#12 PostgreSQL class cache",
  "b5ed4df8": "#12 PostgreSQL class cache",
  "87967e7e": "Object cache logging",
  "10802e77": "Composite object cache fix (reload partially loaded cache)",
  "d7384fce": "Composite object cache fix (reload partially loaded cache)",
  "a19cb872": "#39 Oracle column cache loading performance. Comments load redesigned.",
  "ccee3457": "Dependency resolution. Local driver file cache",
  "59466730": "Dependency resolution. Local driver file cache",
  "95cd086c": "Maven cache & resolve",
  "40c76a65": "Maven cache save",
  "ea3af376": "Formatter profiles cache removed",
  "588c89de": "Firebird & SQLite & HSQLDB -> maven. Maven local cache fixes.",
  "39674cb9": "Maven repo cache load",
  "d9a03013": "Maven repo cache load",
  "6ccfd6a7": "Objects cache refactoring",
  "feb407b9": "Objects cache refactoring",
  "6c4831d2": "Objects cache refactoring",
  "364d2e51": "Bundle dependencies optimization. Lazy extension loader in AbstractDescriptor",
  "f57f6cce": "New connection wizard performance",
  "2b5d5dca": "New connection wizard performance",
  "ee7ecaec": "New connection wizard performance",
  "08a8d5ff": "Preferences split. PRefetch and cache CLOB values (configurable)",
  "338e8148": "Oracle metadata read performance improvements.",
  "aa78d467": "Oracle metadata read performance improvements.",
  "558cd446": "DB2 FQ names fix. DB2 tables cache fix.",
  "1986d797": "DBC uses zero-based attribute indexes Mongo cache fix.",
  "0b03afb8": "Data transfer fix (performance + disable logging + batch reuse)",
  "b95096ef": "Data transfer fix (performance + disable logging + batch reuse)",
  "d57a8a9b": "Data transfer fix (performance + disable logging + batch reuse)",
  "4805994f": "Colors cache fix",
  "e9183da1": "Index/PK cache fix",
  "5e764120": "Generic cache read fix",
  "e94a3723": "Generic indexes cache fix",
  "df24a13f": "SQL formatter fix. Loggign added for PK cache",
  "745f88b6": "Grid optimization",
  "3cbe579a": "Grid optimization",
  "0996c08c": "Foreign keys cache fix",
  "9ba8abe7": "TODO and column props cache",
  "31df3543": "Cell renderer performance fix",
  "36e61fcc": "RSV memory optimizations",
  "7444d98c": "Value forat performance",
  "ccbe7bed": "Data type cache fix",
  "2160e4ba": "Data filters fix. Resultset loading progress fix (remove dummy progress dialog for fast queries)",
  "2b089b49": "DB2: Tell the Driver to cache PrepareStatements Former-commit-id: a1585a4fbcfe876e72afdca6b4d265b787df39f6",
  "80433443": "DB2: MQT management + cache cleanup Former-commit-id: dbabe7f335a26e18c97e66e794f4f74392650819",
  "d373bdfe": "DB2 : Fix view cache accessor",
  "209cc6bf": "DB2: Fix user auth cache Former-commit-id: 8d0cfb0b4b074ee53d3e6dc4bb41ad7e1cf0a0e8",
  "5431ed69": "Redundant cache classes replaced with simple cache",
  "7c6ed3e9": "DB2 code style Redundant cache classes replaced with simple cache",
  "2e257894": "DB2: Fix the problem with indexes and trigger caches. Those object are linked to a base table but their schema may be different from this table. Former-commit-id: 279923b0a4ed40190951fa7b147a86dbaacf5c65",
  "a48204c4": "Disable LOB cache for DB2 DataSource reference obtain fix (caused NPE on disconnect)",
  "fd05a60c": "Composite cache cleanup fixed Schema caching in Generic driver fixed",
  "5a3e87f1": "Copyright update + imports optimization",
  "f3b87fb6": "Grid performance (ged rid of thousands of new GridPos)",
  "7754fe55": "Query filters. Grid fix (do not cache grid size)",
  "36462392": "Create children cache on demand",
  "49395152": "Cleanup children cache on object remove",
  "ac91c348": "Object create/delete reflection (cache/uncache objects in reflectors)",
  "dad0bff9": "Imports optimization",
  "3f8bcdef": "Connection holder (to avoid blocking) Autocommit + txn isolation cache",
  "e03b3cbc": "Driver properties typing fix Type cache omit support (for PSQL) Generic driver properties descriptors",
  "1951a631": "Grid performance",
  "37e4a336": "Data type cache refactoring",
  "2c3cac8c": "SQLEditor input fixed (do not cache ds container as it is not refreshed on ds change)",
  "7d49a672": "Lots of minor fixes. Code style, imports optimizations, etc",
  "b3496872": "Lots of minor fixes. Code style, imports optimizations, etc"
}, "db-tutorial": {
  "": ""
}, "DDComponentForAndroid": {
  "": ""
}, "dddsample-core": {
  "": ""
}, "debezium": {
  "e5d4332": "DBZ-6411 Fix HeaderToValue schema update cache.",
  "2ee3249": "DBZ-6355 Fix memory-leak with heap-based abandoned transaction cache",
  "3bb82d6": "DBZ-6275 Correctly sync Infinispan cache on event counter reset",
  "42f375f": "DBZ-6274 Align test configurations for remote Infinispan caches",
  "681f2a7": "[optimization] Simplify binlog validation conditions",
  "77e1cfc": "[optimization] Remove unnecessary null check",
  "9754859": "[optimization] Prevent unnecessary list creation",
  "07d9349": "[optimization] Remove Unreachable if statement",
  "4e3b4eb": "DBZ-5645 Skip rollback trx cache when LOB is disabled",
  "e142203": "DBZ-5226 Improve test wait-time performance",
  "660e391": "DBZ-5204 Do not cache connection details in `TypeRegistry`.",
  "25205b2": "DBZ-5072 Config the cache size property for ByLogicalTableRouter caches",
  "6ea3688": "DBZ-4526 Relax cache name limitations on Infinispan embedded cache configs",
  "f600efd": "DBZ-4169 Consolidate rollback and recently committed trx caches",
  "cc130b9": "DBZ-4169 Cleanup cache creation",
  "f42c47b": "DBZ-4169 Support remote Infinispan caches",
  "84aa46f": "DBZ-4159 Make Oracle Infinispan trx cache layout forward compatible",
  "954b81a": "DBZ-4159 Cache LogMinerEvent instances in separate cache",
  "a108436": "DBZ-435 Too fast delete can prevent from obtaining the full document",
  "4c5264f": "DBZ-4015 Efficient String Replacement using String.replace in TableIdParser (improvement of x4-x5 times) (https://medium.com/javarevisited/micro-optimizations-in-java-string-replaceall-c6d0edf2ef6)",
  "bb40bd9": "DBZ-3631 Introduce ChunkColumnValues wrapper optimization",
  "7adfaba": "DBZ-3452: source.timestamp.mode=commit imposes a significant performance penalty",
  "00f03c3": "DBZ-3520 Upgrade actions/cache to v2",
  "164ab13": "DBZ-2575 Improve performance where tables we fetch are much less than total tables",
  "0015d62": "DBZ-2724 Add integration tests for DBZ-2617 (fix Postgres was not able to shutdown with shutdown mode 'fast') DBZ-2602 Migrate Testcontainers related changes on DebeziumContainer from UI PoC backend to Debezium main repo",
  "2a3f44e": "DBZ-2617 failing heartbeats should put Postgres connector into FAILED state to allow proper shutdown of Postgres when shutdown was triggered with shutdown mode 'fast'",
  "cad6cf6": "DBZ-2315 fix BIT VARYING handling in Postgres connector CHANGELOG.md CONTRIBUTE.md COPYRIGHT.txt debezium-api debezium-assembly-descriptors debezium-bom debezium-connector-mongodb debezium-connector-mysql debezium-connector-oracle debezium-connector-postgres debezium-connector-sqlserver debezium-connect-rest-extension debezium-core debezium-ddl-parser debezium-e2e-benchmark debezium-embedded debezium-microbenchmark debezium-microbenchmark-oracle debezium-parent debezium-quarkus-outbox debezium-quarkus-outbox-common debezium-quarkus-outbox-reactive debezium-schema-generator debezium-scripting debezium-server debezium-storage debezium-testing documentation DOCUMENTATION.md github-support jenkins-jobs LICENSE-3rd-PARTIES.txt LICENSE.txt mvnw mvnw.cmd pom.xml README_JA.md README_KO.md README.md README_ZH.md RELEASING.md support removed little endian padding for BIT types in JdbcValueConverters (only used for Postgres yet) CHANGELOG.md CONTRIBUTE.md COPYRIGHT.txt debezium-api debezium-assembly-descriptors debezium-bom debezium-connector-mongodb debezium-connector-mysql debezium-connector-oracle debezium-connector-postgres debezium-connector-sqlserver debezium-connect-rest-extension debezium-core debezium-ddl-parser debezium-e2e-benchmark debezium-embedded debezium-microbenchmark debezium-microbenchmark-oracle debezium-parent debezium-quarkus-outbox debezium-quarkus-outbox-common debezium-quarkus-outbox-reactive debezium-schema-generator debezium-scripting debezium-server debezium-storage debezium-testing documentation DOCUMENTATION.md github-support jenkins-jobs LICENSE-3rd-PARTIES.txt LICENSE.txt mvnw mvnw.cmd pom.xml README_JA.md README_KO.md README.md README_ZH.md RELEASING.md support removed legacy format handling fot BIT related types in JdbcValueConverters#convertBits which were leftovers from PR #1408 CHANGELOG.md CONTRIBUTE.md COPYRIGHT.txt debezium-api debezium-assembly-descriptors debezium-bom debezium-connector-mongodb debezium-connector-mysql debezium-connector-oracle debezium-connector-postgres debezium-connector-sqlserver debezium-connect-rest-extension debezium-core debezium-ddl-parser debezium-e2e-benchmark debezium-embedded debezium-microbenchmark debezium-microbenchmark-oracle debezium-parent debezium-quarkus-outbox debezium-quarkus-outbox-common debezium-quarkus-outbox-reactive debezium-schema-generator debezium-scripting debezium-server debezium-storage debezium-testing documentation DOCUMENTATION.md github-support jenkins-jobs LICENSE-3rd-PARTIES.txt LICENSE.txt mvnw mvnw.cmd pom.xml README_JA.md README_KO.md README.md README_ZH.md RELEASING.md support removed unnecessary zero-ing of a newly created byte array to improve performance for huge byte arrays CHANGELOG.md CONTRIBUTE.md COPYRIGHT.txt debezium-api debezium-assembly-descriptors debezium-bom debezium-connector-mongodb debezium-connector-mysql debezium-connector-oracle debezium-connector-postgres debezium-connector-sqlserver debezium-connect-rest-extension debezium-core debezium-ddl-parser debezium-e2e-benchmark debezium-embedded debezium-microbenchmark debezium-microbenchmark-oracle debezium-parent debezium-quarkus-outbox debezium-quarkus-outbox-common debezium-quarkus-outbox-reactive debezium-schema-generator debezium-scripting debezium-server debezium-storage debezium-testing documentation DOCUMENTATION.md github-support jenkins-jobs LICENSE-3rd-PARTIES.txt LICENSE.txt mvnw mvnw.cmd pom.xml README_JA.md README_KO.md README.md README_ZH.md RELEASING.md support updated Postgres connector docs",
  "86b4e3f": "DBZ-2286 Fix test slowness with FieldRenamesIT",
  "5bfe14e": "DBZ-1368 Remove unnecessary optimizations",
  "00843cb": "DBZ-1395 Update to use BoundedConcurrentHashMap for schema cache",
  "3f6424b": "DBZ-1103 Increase timeout before interrupt as oracle is slower",
  "4961277": "DBZ-878 Making topic name cache size bound;",
  "d5abb84": "DBZ-655 Use cache to avoid using regexp replace",
  "57e7f84": "DBZ-479 Forced fsync slows down tests",
  "9fd2afc": "Increase the default mysql init timeout to 60 seconds for slower computers. Also paramterize it so that users can pass a custom value via 'mvn clean install -Dmysql.init.timeout=80000' for example"
}, "DeepLearning": {
  "": ""
}, "deeplearning4j": {
  "dc3664b0": "Migrate cached TADPacks to heap pointers rather than stack (#9978)",
  "35a89571": "Fixes nlp cache state for tests (#9975)",
  "1d82ab71": "Softmax bp optimization (#9944)",
  "ccbd94c6": "Fix training performance with skipgram/dbow by introducing cache for commonly allocated arrays (#9935)",
  "03e11c72": "Improved performance for allocators (#9859)",
  "b8a12075": "Increase performance of skipgram/cbow allocation on batch size 1 (#9827)",
  "af7d7250": "Fix up skipgram to use caching for improved performance of scalar values (#9824)",
  "cc37f157": "Improve Skipgram/Paragraph Vectors performance (#9796)",
  "46140ecc": "Moves all array cache state to static (#9782)",
  "95079aa0": "Ensures views aren't returned from cache (#9777)",
  "b238938a": "Remove cache logging statements (#9749)",
  "1cb48a5a": "Amend array cache memory manager debug logging (#9747)",
  "8e329ed0": "Add using fast path for results as well (#9729)",
  "15245c48": "Adds graalvm support for import cache, optimized helpers in libnd4j (#9718)",
  "f0ee6b53": "Fixes applied to the current cache (#9714)",
  "6561cbc4": "Fix issue with cache references improperly combined with control flow (#9706)",
  "5025b3e0": "veda related performance improvements for yolo (#9705)",
  "3feca6d8": "Python4j performance optimizations (#9688)",
  "dcefdda0": "Release optimizations/prep (#9638)",
  "7db675f6": "rewrite [pad CONSTANT] to speedUp NEC performance",
  "35400a18": "mark ops helpers or some other functions with ND4J_LOCAL or static keywords to affect their visibility and help link time optimizations",
  "6c41b663": "add build wiht lto(link time optimizations), enable gnu++11 on cuda/gcc to fix compilation types.h",
  "0f1d41d7": "Merge pull request #9431 from eclipse/ag_optimization_tests",
  "67368a07": "Add missing optimization framework tests",
  "3377be91": "Merge pull request #9402 from eclipse/ag_graph_optimization",
  "ac3be462": "Update path for when cache hit occurs",
  "43ae4cb1": "Ensure cache restore doesn't override specified setup-java",
  "58e3527b": "(arbiter-core) Made some performance and memory improvement (#9085)",
  "73b08c72": "(Dl4j) performance improvments (#9078)",
  "0a865f6e": "performance improvement (#9055)",
  "bead656f": "Initial performance improvement for Bias Add and etc #8556 (#217)",
  "18c01f5b": "Add SameDiff memory reuse memory manager (array cache) (#39)",
  "d9878419": "[WIP] Some optimizations in dl4j (#11)",
  "9d325ad0": "Small optimization to Nd4j.readNumpy (#183)"
}, "DeepLinkDispatch": {
  "": ""
}, "DependencyCheck": {
  "f1103fe": "fix: improve query performance",
  "908750d": "fix: move ecosystem cache update to after NVD update so updates are applied during first execution",
  "76339ce": "fix: do not require schema change to update the ecosystem cache",
  "0229f20": "build: harden purge-cache.yml permissions",
  "4511557": "Merge pull request #4815 from jeremylong/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.4",
  "a076dec": "purge github action cache",
  "5bc821b": "purge github action cache",
  "e1b8898": "purge github action cache",
  "f7b8082": "Merge pull request #4496 from jeremylong/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.3",
  "130a87f": "Evict corrupt datafiles from the NVD cache so they will be re-downloaded on a next update.",
  "c32dbbf": "Merge pull request #4288 from jeremylong/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.2.20220328",
  "5ffe2d1": "Merge pull request #4245 from jeremylong/dependabot/github_actions/actions/cache-3",
  "1ee34c4": "Bump actions/cache from 2.1.7 to 3",
  "c616a63": "Fix a performance drain due to multiple executions of the function body",
  "066a127": "fix cache",
  "93f4710": "Rework code to cache the resolution results",
  "dc759a8": "Rework code to cache the resolution results",
  "7824985": "Merge pull request #3818 from jeremylong/dependabot/github_actions/actions/cache-2.1.7",
  "2b1e4ec": "Bump actions/cache from 2.1.6 to 2.1.7",
  "431317c": "Fix FP CPE match for fast-uuid, fixes #3336",
  "c50880a": "Merge pull request #3466 from mfoo/treeset-performance-improvements",
  "a43b120": "Research team here at mergebase.com noticed false positive FP #3471 against com.fasterxml.jackson.core/jackson-annotations",
  "f533682": "Merge pull request #3403 from jeremylong/dependabot/github_actions/actions/cache-2.1.6",
  "322c783": "Bump actions/cache from 2.1.5 to 2.1.6",
  "c977c0f": "Merge pull request #3266 from volkert-fastned/patch-1",
  "a47ee1d": "Merge pull request #3279 from jeremylong/dependabot/github_actions/actions/cache-v2.1.5",
  "e5c41e2": "Bump actions/cache from v2.1.4 to v2.1.5",
  "de8daff": "Merge pull request #3125 from jeremylong/dependabot/github_actions/actions/cache-v2.1.4",
  "09239d8": "Bump actions/cache from v2 to v2.1.4",
  "0d7c654": "add cache for docker test",
  "225e60a": "fix cache",
  "e81d4e3": "fix cache",
  "b27ca47": "fix cache",
  "a7d9dbf": "fix rebase issue and restore the performance improvement",
  "4e37e6f": "restructured query to improve performance",
  "c520c2c": "allow data directory to point to original directory and H2 copied to a temp directory - set stage for other cached data sources",
  "3849989": "Added Batch insert for References and Vulnerabilities Applies batch inserts for reference and vulnerability tables, solves the slow one-by-one insert process, for Vulnerabilities with several references/vulnerabilities associated.",
  "8428e96": "removed TreeSet to improve performance",
  "325ed8e": "converted to integration test as updates from NVD are required for this test which slows down just a standard mvn package",
  "a967735": "cached the external dependency view",
  "bf5f1df": "Merge pull request #744 from ysoftdevs/cvedb-cache",
  "5ed5764": "Merge branch 'stefanneuhaus-misc_performance_tweaking_and_cleanup'",
  "d588092": "Merge branch 'misc_performance_tweaking_and_cleanup' of https://github.com/stefanneuhaus/DependencyCheck into stefanneuhaus-misc_performance_tweaking_and_cleanup",
  "caeec68": "Refactor CveDB - make class thread-safe and declare so (also DatabaseProperties) - prepared statements represented by enum: performance gain, eases experiments when tuning for performance - minor changes/cleanup/code style",
  "541915a": "Minor improvements in NvdCve20Handler - use addAll() instead of iterating and adding single instances for VulnerableSoftware - define String constants for certain XML attributes: code style, could facilitate JVM optimizations",
  "a5990ea": "update to #657 to allow sorted vulnerable software in repots; also, sorting an array list is faster then building a treeset",
  "3a70e25": "Refactoring: Move retrieval of last modified timestamps from UpdateableNvdCve to NvdCveUpdater - UpdateableNvdCve is from its nature more like a simple value object - Facilitates performance optimization for retrieval of last modification timestamps",
  "d91b4c3": "updated test case for performance of build",
  "37519ac": "minor performance improvement",
  "921b0eb": "Merge pull request #301 from dwvisser/run-against-cached-db-pr",
  "47c817d": "performance improvement for checksum calculations - using MappedByteBuffer",
  "2dcef25": "performance improvements for large files",
  "eea44d7": "Fix to prevent rules from being cached between Jenkins builds even if suppression file is not specified.",
  "40e1318": "Fix to prevent rules from being cached between Jenkins builds even if suppression file is not specified.",
  "0289fc5": "improved performance and made a change to support fixing issue #20",
  "bc9fa35": "improved performance and made a change to support fixing issue #20",
  "a58eba3": "Moved most functions to CveDB.java; slowly converting the class to a pure DB utility rather then a base class",
  "66842fc": "Moved most functions to CveDB.java; slowly converting the class to a pure DB utility rather then a base class",
  "595452c": "updated to throttle downloads and improve performance",
  "acc4d52": "updated to throttle downloads and improve performance",
  "3995cd6": "updated to make tests go faster. Only downloading recent CVE data files",
  "fce7083": "updated to make tests go faster. Only downloading recent CVE data files",
  "933a8f8": "reduced size to make tests fasters",
  "e18aedf": "reduced size to make tests fasters",
  "d36398b": "performance enhancement for nvd cve import.",
  "7971c42": "performance enhancement for nvd cve import."
}, "Depth-LIB-Android-": {
  "": ""
}, "DesignPattern": {
  "": ""
}, "dex2jar": {
  "": ""
}, "dexcount-gradle-plugin": {
  "b1fbef8": "clean up build files, add failfast, update compile.gradle (#239)",
  "a3e3b3e": "hmmm...maybe Travis is so slow that running the dx shell command takes more than the old 5sec...bumped it to 60sec in case the user has a big file and a slow build server",
  "c44ff87": "Fix Travis-CI cache directive, again",
  "65c6807": "Fix Travis-CI cache directive",
  "e461e94": "Add gradle wrapper to the travis cache",
  "dcb82d8": "Add ~/.gradle to travis build-caches"
}, "dexposed": {
  "": ""
}, "Dexter": {
  "": ""
}, "dialogplus": {
  "": ""
}, "Digital": {
  "4c0b0aa": "Adds a HDL expression optimization infrastructure and a not(not x) optimization.",
  "8a0be4e": "improves performance of model creation",
  "4cebc97": "improves performance of model creation",
  "e0ebd0e": "minor optimization of mouse drag on inputs",
  "e0b8254": "added a statement cache",
  "3d361c8": "added a config file cache external tools run in a own thread",
  "fcc5e8d": "shows progress bar if optimization is running in a thread",
  "a8ac936": "If the optimization takes a long time, a new thread is generated to perform the calculations.",
  "12adf74": "disabled const optimization on DT switches, see #255",
  "314fd71": "Generate a table driven verilog test benches, which result in faster execution of the test.",
  "480c7e1": "added some more optimizations",
  "58c427b": "added a constant merger optimization",
  "cb1266e": "most of the optimizations are working, splitter is still missing",
  "ac71699": "in case of a simulation error the response is now faster",
  "87b45d7": "small Observable optimization",
  "5961a7b": "Merge branch 'fastDraw'",
  "5064406": "Merge branch 'master' into fastDraw",
  "b5b3551": "added a faster drawing by adding a fetch method to the shapes.",
  "702ee07": "added a faster drawing by adding a fetch method to the shapes.",
  "3fd7880": "improved the performance by about 10% by firing less events to the ModelStateObservers.",
  "f7c82e4": "enabled adaptive anti-aliasing. If the painting becomes to slow it is turned off.",
  "07547b1": "made test faster",
  "de4f1cb": "catches also runtime exceptions in fast run mode",
  "293f174": "added missing image cache cleanup",
  "b3b778c": "Improved debugging of processors. Now its more intuitive. Also updating of listings and value tables are disabled in fast run mode.",
  "33a24aa": "made QMC much faster by using a better data structure tostore the QMC tables.",
  "8af0fc9": "better gui updates, if clock runs very fast its removed from gui updates",
  "8392af0": "added fast run mode"
}, "disconf": {
  "70a10b4": "change redis cache"
}, "Discovery": {
  "be835dd": "增加Nacos的naming-load-cache-at-start配置项"
}, "DiscreteScrollView": {
  "": ""
}, "DiskLruCache": {
  "c25de9c": "[maven-release-plugin] prepare release disklrucache-2.0.2",
  "3efc357": "[maven-release-plugin] prepare release disklrucache-2.0.1",
  "0ae4331": "[maven-release-plugin] prepare release disklrucache-2.0.0",
  "d77f601": "Automatically flush the cache when an edit is completed.",
  "f6fca81": "Track redundant ops when opening the cache.",
  "9a74cd6": "Remove safety calls to set cache directory r/w.",
  "d89fdd7": "Allow recreation of the cache directory when deleted.",
  "d0653ee": "Handle cache clearing properly.",
  "fcebb8f": "Allow cache size adjustment.",
  "9830a11": "Silently fail reads and writes when the cache dir has disappeared. Refs #2.",
  "ebe0f06": "Handle aggressive clearing of the cache directory. Refs #2."
}, "disruptor": {
  "62dec20": "Increase MultiProducerSequencer performance on getting next sequence number",
  "714fa76": "Add warning suppression for lgtm alerts lgtm analysis has three alerts for these exceptions overriding `fillInStackTrace` and omitting the `synchronized` on the method. We are overriding to stop filling in the stack trace for performance reasons. These Exceptions are used for control flow more than reporting any error state, so this is a valid thing to do.",
  "992a617": "Use BatchStartAware interface to count batches in performance tests",
  "8ba75dd": "Add batch percent and average batch size to performance tests",
  "0b2de36": "Restored commented out line of code in performance test.",
  "822be72": "Add target to generate jar for performance testing.",
  "62f32aa": "Inline cache fields and pre/post pad",
  "4c0f7e7": "Add performance test for EventPoller and fix small bug. Allow for Exceptions to cascade out",
  "fd86ab3": "Update documentation on performance test",
  "598fe67": "Another (almost pointless) performance test",
  "dffa10e": "Add performance test that handles multiple producers with a ring buffer per producer.",
  "8258732": "Small tweaks for off-heap performance tests for linux",
  "c1f8a57": "Add performance tests for custom immutable ring buffer",
  "82e4a12": "Remove test dependencies from performance tests",
  "ea78b79": "Experimental offheap performance tests",
  "129150c": "Small improvement for translater performance test",
  "b3e2789": "Added performance test using EventTranslator",
  "540f143": "Moved and renamed performance tests",
  "6de3dc9": "Switch setVolatile to set for RawBatchThroughputTest. Add Three Producer batch performance test.",
  "d3a4b07": "Cache the available sequence in the WorkProcessor, fix crippled performance for the multi-producer case",
  "fd718e7": "Fix worker pool performance test",
  "98238e0": "[Mike] Add raw sequencer performance test back",
  "5872e93": "Fixed small performance bug in MultiProducerSequencer. Add remainingCapacity and backOffCount methods to RingBuffer",
  "eeb86ae": "Fix issue #31, correct javadoc for TwoPublisherTwoConsumerWorkerPool performance test",
  "c50ab06": "Fix bug in performance test, where it was not completing",
  "856683b": "Add performance test for WorkProcessor",
  "944be53": "Small modificiations to performance to assess small performance gotcha",
  "ce7a0cc": "Some performance enhancements for off heap buffer",
  "a072c2f": "A number of performance optimistations for the multi-producer use case. Remove batch publication",
  "43dc1f4": "[Mike] Modified performance testing framework to do more runs and print information as it runs.",
  "110c76c": "Small performance optimisation on the MultithreadedClaimStrategy",
  "07ab148": "Migrated perf tests from using ArrayBlockingQueue to LinkedBlockingQueue because of better performance on more recent processors.",
  "324bff5": "Added code for checking if sufficient processors exist for running the performance tests.",
  "1bbbeea": "Reworked performance tests to use a CountDownLatch to signal end of test run for threads.",
  "ba96848": "Split the performance test for latency and throughput",
  "9bca97e": "Add comma to number format in performance figures output.",
  "4de6e59": "Rename performance tests to reflect new naming.",
  "dae08c5": "Try threadlocal cache of minimum gating sequence.",
  "dc6907a": "Introduced Sequencer and first performance test not using the RingBuffer",
  "a2174c8": "Trying a different cache line padding technique",
  "3254b59": "Removed AbstractEvent so any object can be put into the RingBuffer, and fixed some false sharing in the performance tests to make them more predictable.",
  "787a0f3": "Added ability to run performance tests for just the Disruptor by skipping the queue tests.",
  "ca1f459": "Use a constant to describe cache line padding.",
  "a07668a": "Reset iteration count for performance test.",
  "00b995d": "Reset iteration count for performance test.",
  "5b16416": "Made minProcessorSequence[] final so the reference can be cached in a register.",
  "ab2efff": "Padded ClaimStrategy cache lines to prevent false sharing.",
  "a96ca61": "Changed cache line padding technique for sequence handling to support Java 7.",
  "226f525": "Removed the indirection layers for sequence tracking which should give a performance improvement to real world applications. All sequences are now tracked without using any class that have the potential to be mega morphic.",
  "0558a78": "Created Sequence class that contains cache line padding and used it for the RingBuffer cursor and BatchEventProcessor sequence.",
  "9683ec9": "Syntax cleanup and removal of unnecessary cache line padding.",
  "7135ac6": "Cleaned up logic for some performance improvements.",
  "5a6331f": "Cleaned up logic for some performance improvements.",
  "138090c": "cached value does not need to be volatile",
  "2e59221": "Run performance tests by forking a new JVM",
  "fe772ec": "Added build artifact for performance tests.",
  "efdacae": "Added 3 step latency performance test.",
  "b8a7c4e": "Extend performance runs",
  "cca44c7": "Push down the tracking of dependant consumers from the ConsumerBarrier into the WaitStrategy for options to remove contention and increase performance.",
  "2f0d79d": "cache line padding of ConsumerBarrier for more predictable throughput",
  "799a6cd": "Added diamond path 1 producer and 3 consumer performance test.",
  "f38be4f": "Finished 3 stage pipeline performance test.",
  "29a325c": "First part of 3 stage pipeline performance test",
  "fab7c19": "Cache line padding and pre-compute expected performance test results.",
  "dd9ddc3": "Completed Sequencer3P1C performance test.",
  "d18def2": "Added 1 producer and 3 consumers multicast performance test.",
  "0740688": "Adding performance tests"
}, "djl": {
  "b4e9adb": "Cleans inference performance optimization doc (#2519)",
  "04cf346": "Remove performance issues from freezing MXNet (#2394)",
  "7688851": "[docs] Update pytorch graph exector optimization document (#2374)",
  "3c578d6": "[api] Improve NDArray encode/decode performance (#2361)",
  "1d507fe": "[fastText] fastText should not depends on any engine (#2353)",
  "8f2604b": "[doc] Updates cache menagement adds ONNX and Huggingface cache directory (#2334)",
  "708c7b6": "Add support for torch::cuda::empty_cache(). (#2305)",
  "08d2c81": "[tokenizer] Avoid unittest polluting cache directory. (#2228)",
  "7983ca2": "Update inference_performance_optimization.md (#1621)",
  "f3bae1c": "[ci] Invalidate cloudfront cache after sentencepiece build (#1404)",
  "773e388": "Update pytorch inference optimization document (#1275)",
  "03549e1": "[fasttext] allow specify label preifx (#1210)",
  "3198f65": "Fix fasttest nightly test (#1198)",
  "887bc6f": "[fasttext] keep __label__ prefix (#1196)",
  "926af90": "Fix inference_performance_optimization.md broken link (#1185)",
  "21373e3": "avoid uploading cached shared library (#916)",
  "a7978c3": "Added docs for disabling graph executor optimization via JNI for torchscript. (#914)",
  "93ae08d": "Fix unit test engine cache location (#884)",
  "9fd0b50": "optimization (#864)",
  "e5857df": "website optimization (#861)",
  "5794109": "Refactor get cache directory (#771)",
  "3bed9fa": "Use PyTorch index over engine agnostic solutioin to improve the performance (#638)",
  "3859142": "add optimize for method on MXNet for future optimization (#434)",
  "97fce77": "YoloV5Translator performance fix (#377)",
  "0377f06": "Update fastText readme",
  "e0d66b5": "[fastText] Remove the pointer and improve the build process",
  "52c4e7b": "Set default optimal performance config for default MXNet engine",
  "b2111c0": "Add fasttext jni native workflow",
  "49da6a5": "Reapply 'Upgarde fastText to 0.9.2''",
  "a298e19": "Revert 'Upgarde fastText to 0.9.2'",
  "2a6cc09": "Upgarde fastText to 0.9.2",
  "d2db825": "Consolidate each engine cache directory.",
  "f566f55": "[tf]cache input/output names",
  "5e227c2": "Move fasttest into 3rdparty folder",
  "ff9ba06": "Update cache management document",
  "906c741": "1st Draft of 11.1 Optimization and Deep Learning(optimization-intro.ipynb)",
  "ea647f9": "Fix onnx cache location",
  "e7ac5e0": "add cache management files",
  "72dbfa8": "Allow user customize cache directory",
  "889b770": "Add predict api; Update api and basicdataset for faster data loading",
  "39aad78": "Document the PyTorch multithreading and config to optimize inference performance",
  "15ba786": "Add threads config to optimize the performance",
  "541a352": "remove cache for gradle wrapper jar",
  "97b86a2": "Remove cache for gradle-wraper.jar",
  "cb77622": "Enable gradle cache for github actions",
  "46a60d5": "use matrix calculation for better performance",
  "16ce2d0": "[PyTorch] add faster rcnn model",
  "03794b7": "Add Hyperparameters and basic hyperparameter optimization",
  "3694b49": "Fix fastText java doc.",
  "dac54ae": "Add word2vec support for fastText engine.",
  "dcca94d": "Add more training options for fastText.",
  "630ec8a": "Add fasttext engine.",
  "e9607c3": "Move slow mnist test to nightly",
  "c380f10": "Add more performance metrics.",
  "3f7c2d5": "Add performance metrics for training.",
  "e77ef0a": "add fixes on cachedOp",
  "e53a8cd": "Allow user to optimize performance by setting the prefetchNumber",
  "c140adc": "remove data copying at cachedOp creation level",
  "bcb81db": "fix cachedOp bug",
  "bb48564": "fix cachedOp bug",
  "1ade4d1": "add Static flags to cachedOp",
  "85a5b2a": "update cachedop"
}, "DKVideoPlayer": {
  "": ""
}, "DoKit": {
  "1cbd55d": "sdk en optimization",
  "a137dfb": "demo en optimization",
  "ec7aebd": "Merge branch 'master' into optimization-3.0",
  "e03c95e": "Merge branch 'optimization-3.0'",
  "92afe38": "Merge branch 'optimization-3.0' of github.com:didi/DoraemonKit into optimization-3.0",
  "8f9e8fe": "Merge branch 'optimization-3.0' of github.com:didi/DoraemonKit into optimization-3.0",
  "cb3db21": "Merge branch 'master' into optimization-3.0",
  "f95e815": "add cache",
  "98c2b02": "OPTIMIZE：For maps where the keys are of type integer, it's typically more efficient to use the Android SparseArray API. This check identifies scenarios where you might want to consider using SparseArray instead of HashMap for better performance. This is particularly useful when the value types are primitives like ints, where you can use SparseIntArray and avoid auto-boxing the values from int to Integer."
}, "dolby_beta": {
  "": ""
}, "dolphinscheduler": {
  "c2d5774": "[Improvement] SQL optimization queryTheHighestPriorityTasks (#13671)",
  "ef47e7e": "Use parallelStream to improve the performance of upgrade (#13442)",
  "ccad56e": "[Improvement][Master] Validate same content of input file when using task cache (#13298)",
  "042ec74": "[refactor] cache compiled regex pattern (#13208)",
  "cb8d125": "[Improvement] optimization task definition & fix in the task definition list, if one task have more pre task, the task list can't show all task (#13106)",
  "006d8e2": "[Improvement] File deletion logic optimization (#11519)",
  "71cf7e1": "[Fix-10918] Close datasource when expire from guava cache (#11120)",
  "397e51f": "dependent node log output optimization and fix checkstyle (#10593)",
  "d7cf09a": "Revert '[Improvement][Api] Interface and entity optimization to improve code scalability. (#10483)' (#10534)",
  "f1a9c0d": "[Improvement][Api] Interface and entity optimization to improve code scalability. (#10483)",
  "f3c647d": "[Improvement][Api] Interface and entity optimization to improve code scalability (#10466). (#10468)",
  "50e9f29": "[CI] bumping actions/cache to v3 to fix ci error (#10345)",
  "49979c6": "[Fix-8828] [Master] Assign tasks to worker optimization (#9919)",
  "5161df0": "[refactor][perf] cache compiled regex pattern (#10099)",
  "206b7c1": "[Fix-9352][datasource-api]data source client uses a cache with an expiration time (#9353)",
  "ca95d2f": "[Fix-9221] [alert-server] optimization and gracefully close (#9246)",
  "5ef3f9d": "[optimization] [Service] Optimization ProcessService and add ProcessService interface (#9370)",
  "a1bef43": "[Feature-8579][Task] Task back-end plugin optimization, new plugins only need to modify the plugin's own module (#8584)",
  "d19322d": "[Feature][UI Next][V1.0.0-Alpha] Scheduler datetime display optimization (#8885)",
  "fe7e987": "[Fix][UI Next][V1.0.0-Alpha] Fix performance warning of ButtonLink component. (#8849)",
  "294882f": "[Improvement-8218][dolphinscheduler-api] QueryTaskInstanceListPaging API performance improvement (#8223)",
  "b5fa54b": "[Bug-7865][MasterServer] retry logic optimization (#8156)",
  "5e975da": "[Enhancement-8006] Improve the performance of SQL query (#8007)",
  "1c0ad53": "[CI][E2E] Optimize CI E2E test performance (#7974)",
  "12d7e62": "[Improvement][MasterServer] process complement data optimization #7925 (#7976)",
  "4b22ad6": "[Implement][MasterServer]TaskProcessor code optimization (#7754)",
  "0dfbbc8": "[Feature-5951][Improvement][UI] When creating an alarm instance, the alarm instance name input box prompts optimization (#7770)",
  "52a7439": "[Improvement-6151] Performance optimization of DEPENDENT task (#7725)",
  "68906f1": "Remove fast return for alert plugins (#7723)",
  "41bf1a9": "[Improvement-7213][MasterServer] execute thread pool code optimization (#7258)",
  "0f7e38e": "[Bug-7292][ApiServer] fix cache error when standalone (#7293)",
  "a80a7b3": "[Feature-6963][MasterServer] unified cache manager (#7187)",
  "36ebfe0": "[Implement][server]TaskProcessor code optimization (#7146)",
  "af9ed35": "[Feature][MasterServer] add cache for workGroup and schedule #6987 (#7161)",
  "0e75bd8": "[BUG][SQL] fix the process list page load slowly. (#7166)",
  "ed9fca6": "[Bug] [dolphinscheduler-api] The pages of project management, workflow instance and task instance are accessed slowly #7061 (#7139)",
  "ba2b2a6": "[Feature-6988][MasterServer] add cache manager for workflow (#7090)",
  "8e93939": "[DS-6963][MasterServer]add cache manager for tenant and user (#6974)",
  "ad33d43": "[Improvement][Dao] SQL optimization - limit one piece of data #5061 (#6940)",
  "f2d242c": "[Feature-6918][UI] DAG page interaction optimization (#6919)",
  "cea8ae6": "6471: cache process definition in master (#6511)",
  "e091801": "[Improvement-6474] [MasterServer] schedule time for process instance optimization (#6477)",
  "67094d0": "[BUG-6353][MasterServer] fix event handle slowly (#6375)",
  "cfb03ce": "Reorganize CI workflows to fasten the wasted time and resources (#6011)",
  "053e548": "[Improvement-5539][Master] Check status of taskInstance from cache (#5572)",
  "79eb2e8": "[Improvement-5539][Master] Check status of taskInstance from cache (#5572)",
  "1b7dcea": "[Improvement-5440][Maven] Project module maven dependency optimization (#5441)",
  "ba039dc": "[Improvement][dao] Resource features SQL slow query optimization. (#4947)",
  "086e716": "[Improvement][Dao] SQL optimization - check exist #5069 (#5070)",
  "e6f69ae": "[Improvement][ui] Front-end interface optimization",
  "046940b": "[Improvement][API] ProjectService queryAllProjectList API optimization (#4539)",
  "0963640": "[Improvement-#4481][API] ProcessDefinitionController save API optimization",
  "90a9024": "optimization",
  "e24e690": "[Improvement][ui]List vacancy optimization and icon icon repair (#4286)",
  "342bd83": "[Improvement][ui] List vacancy optimization and icon icon repair",
  "9234e46": "fix eslint: Unexpected side effect in 'cacheParams' computed property",
  "68541f2": "[FIX-4190][DAO] When the amount of json data is large, the process list page display slowly. (#4201)",
  "bd156b3": "[Improvement-3933][db operation] Improve the performance of sql query (#3940)",
  "de11a21": "fixed queryTaskInstanceListPaging query slow (#3892)",
  "d565892": "fixed queryProcessInstanceListPaging query slow (#3893)",
  "74914cf": "[#3931][ui]Field name optimization for spark, flink, and mr",
  "93bc5c0": "fix:Dockerfile user apk --no-cache (#3691)",
  "fad2852": "[Improvement][server] WATERDROP task plug-in optimization in switch case code cleaning. (#3652)",
  "12aca8f": "[optimization][ui]Prevent the shell script input box from being empty",
  "d0037b4": "[ui]Code optimization",
  "e80e57a": "[Feature] JVM parameter optimization , related issue #3370 (#3373)",
  "07a1c0a": "[Feature] JVM parameter optimization , related issue #3370",
  "6e656ca": "[Feature] JVM parameter optimization , related issue #3370",
  "3aa34bc": "[bugfix] 'getNotifyGroupList' cache bug #3179 (#3200)",
  "5bfcdd2": "[bugfix]Replace favicon icon with png and Cancel the initial value of the node cache #3111 (#3107)",
  "8da0f4a": "[bugfix]Replace favicon icon with png and Cancel the initial value of the node cache #3111 (#3107)",
  "5dff0a4": "Add force not to cache and fix jar instance of workflow instance not showing",
  "cf31f28": "Add force not to cache and fix jar instance of workflow instance not showing",
  "b06c118": "[optimization]：prevent repeated database updates (#2396)",
  "0ad610a": "[optimization]：remove duplicate code (#2377)",
  "d8c7a44": "some annotation optimizations (#2333)",
  "0c5ff32": "Decouple DruidDataSource in ConnectionFactory and cache DataSource instance (#2232)",
  "c044cae": "add input cache for sqoop and conditions tasks (#2118)",
  "a7fd0a5": "Merge pull request #2943 from Eights-Li/dev-sqoop-optimization",
  "7d45e11": "remove fastjson license",
  "fad0907": "remove fastjson maven dependence",
  "50da695": "sqoop front-end optimization",
  "c8f28ab": "sqoop task optimization",
  "c5b3f35": "replace fastjson annotation",
  "8fed430": "Workflow list style optimization",
  "1d76d0a": "Add force not to cache、Modify style and fix jar instance of workflow instance not showing (#2507)",
  "e600048": "Add force not to cache and fix jar instance of workflow instance not showing",
  "9954d7c": "Add force not to cache and fix jar instance of workflow instance not showing",
  "f929c6f": "[optimization]：prevent repeated database updates (#2396)",
  "3c9ba0a": "api server exception management and code optimization (#397) (#2397)",
  "2b0b93b": "[optimization]：remove duplicate code (#2377)",
  "fce6af0": "[Refactor worker] correct config error and remove unuse properties that may affect performance (#2343)",
  "07cc10c": "[Refactor worker] correct config error and remove unuse properties that may affect performance (#2337)",
  "f7e89e4": "some annotation optimizations (#2333)",
  "74525c2": "Decouple DruidDataSource in ConnectionFactory and cache DataSource instance (#2232)",
  "62f7d21": "add async queue and new a thread reslove taskResponse is faster than taskAck to db (#2297)",
  "68e4e5c": "add input cache for sqoop and conditions tasks (#2118)",
  "fd2c2ee": "1，encapsulate the parameters required by sqltask 2，SQLTask optimization (#2135)",
  "3186545": "1. add input cache for datax task (#2034)",
  "2bb5eba": "add TaskInstanceCacheManager receive Worker report result，modify master polling db transfrom to cache (#2021)",
  "512e7c1": "fix bug, add the cache logic in getInstancedetail. (#1814)",
  "289ae6a": "Implements the spark and flink type task, now they can be cache the previous input. (#1795)",
  "2087f46": "Implements the sql type task, now it can be cache the previous input. (#1745)",
  "63f396b": "refactor zk tree cache (#1577)",
  "cc1a5ff": "refactor zk tree cache",
  "84df6ed": "refactor zk tree cache",
  "5956bfc": "dockerfile optimization (#1165)",
  "9545cb2": "add postgre performance monitor (#1137)",
  "6f9338d": "install.sh optimization (#977)",
  "49b8f63": "Daily optimization (#837)",
  "f687626": "worker code optimization and filtering the log of one task to the log of another task (#696)",
  "67c28c7": "worker code optimization",
  "8dae10d": "user hdfs path optimization"
}, "doris": {
  "08ec5e2e": "[fix](function) fix result column is nullable type when fast execute (#19889)",
  "e3929820": "[performance](load) use vector instead of skiplist when insert agg keys (#19099)",
  "c0ad5888": "[enhancement](page cache) use separate pk index cache (#19864)",
  "9945067e": "[Bug](function) make VcompoundPred optimization work well (#19870)",
  "07bbf741": "[enhence](memory) gc inverted index cache when there is not enough memory (#19622)",
  "068a32bc": "[Improvement](memory) faststring use Allocator #19762",
  "943e5fb7": "[improvement](MOW) use seperated cache for mow pk cache (#19686)",
  "082b7cce": "[improvement](storage) let the `storage_page_cache_shard_size` conf be rounded up to a power of two (#19639)",
  "2d9cc8fe": "[improvement](file cache)Support set min file segment size while use block file cache (#19536)",
  "fad9237d": "[fix](storage) consider file size on page cache key (#19619)",
  "0617c7e5": "[enhance](Cold&Heat separation) use file block cache for cold heat separation rowset (#19410)",
  "6d2070c5": "[enhancement](stats) Make stats cache item size configurable (#19205)",
  "22f95fca": "set ccache configs in env.h (#19502)",
  "28e088ae": "[optimization](be) optimization for ColumnConst when writing mysql result (#19122)",
  "a05dbd3f": "[chore](compile) Improves PCH cache hit ratio (#19469)",
  "7c7db9ce": "[typo](docs) Add an open page cache hint to the benchmark (#19449)",
  "f199860d": "[Improvement](inverted index) Enhance compaction performance through direct inverted index merging (#19207)",
  "05c5c594": "[refactor](FileCache) set FE session variable enable_file_cache=false as default (#19327)",
  "b6c7f3ae": "[opt](FileCache) Add file cache metrics and management (#19177)",
  "8eab20d3": "[bugfix](low cardinality) cached code is wrong will result wrong query result when many null pages (#19221)",
  "d383f1f3": "[optimization](simd) optimize count_zero_num for ColumnNullable #19124",
  "7b02fa5c": "[optimization](conf) optimization JAVA_OPTS for be conf and be bin (#19029)",
  "1be5dac0": "[improve] Refactor file cache and Improve the file cache strategy (#18652)",
  "fd905b66": "[refactor](jdbc) close datasource if no need to maintain the cache (#18724)",
  "031d35d4": "[fix](stats) Stats still in cache after user dropped it (#18720)",
  "1b4be46c": "[typo](docs) optimization Monitoring and alarming doc (#18767)",
  "0753dc2c": "[fix](merge-on-write) the mow keyset check is quite slow when loading large data set, remove it from release version (#18750)",
  "975b3738": "[Chore](thrift) add some check on client cache && remove some unused code && catch st… #18683",
  "04af1650": "[Optimize](mutlti-catalog) Opt zlib performance by adding '-O3' cflags. (#18488)",
  "e3ff2e3d": "[fix](file cache) Fix be core while use block/whole/sub file cache (#18440)",
  "308ff9a1": "[enchancement](memory) tracking lru cache memory and page memory not in cache (#18361)",
  "d36e9bd5": "[chore](scan) Disable low cardinality optimization for compaction (#18424)",
  "22deeecb": "[Improvement](multi catalog)Cache File for Hive Table, instead of cache file splits. (#18419)",
  "47aa8a6d": "[fix](file_cache) turn on file cache by FE session variable (#18340)",
  "af80e650": "[Improve](FileCahe) Support the file cache profile in olap scan node and Update the profile (#17710)",
  "1e51af07": "[fix](scan) Avoid using incorrect cache code in ComparisonPredicate (#18332)",
  "e260dca7": "[Improvement](multi catalog)Change hive metastore cache split value type to Doris defined Split. Fix split file length -1 bug (#18319)",
  "7131c60e": "[fix](audit-log) fixslow query missing in audit log (#18317)",
  "9c1aad06": "[Improve](query) improve column match performance by introducing a column name map in `MaterializedIndexMeta` (#18203)",
  "01d012ba": "[fix](memory) Remove page cache regular clear, disabled jemalloc prof by default (#18218)",
  "21895abf": "[bugfix](buffercontrolblock) many query becomes very slow in 1.2.3 (#18229)",
  "664fbffc": "[Enchancement](table-function) optimization for vectorized table function (#17973)",
  "6b6682cd": "[Enhancement](Expr) Opt In Set by small size fixed container to improve performance. (#17976)",
  "6bd26092": "[Enhancement](multi-catalog) add config for external meta cache loade… (#18117)",
  "785e3e3b": "[Enhancement](multi catalog) Support hive meta cache TTL (#18102)",
  "cd85b5b2": "[conf](nereids) disable new cost model since it hurts performance (#18127)",
  "2929a962": "[Refactor](inverted index cache) Use asc set instead of priority queue at the lru cache (#18033)",
  "7c0bcbdc": "[enhance](parquet-reader) cache file meta of parquet to speed up query (#18074)",
  "8b617afe": "[Improve](point query) improve column match performance when doing `computeColumnFilter` to prune partition (#17982)",
  "7ed15ee8": "[Fix](multi-catalog) invalidates the file cache when table is non-partitioned. (#17932)",
  "4be1b9e7": "[enhancement](load) add slow log for memtable flush (#17962)",
  "74dfdc00": "[nerids](statistics) remove lock in statistics cache loader #17833",
  "990dce9a": "[fix](load) fix load channel timeout too fast in routine load task (#17796)",
  "a378a602": "[fix](cooldown)Support change be.conf: max_sub_cache_file_size (#17773)",
  "a452db35": "[improvement](filecache)Change the hash field of the backend (#17499)",
  "fcd25b53": "[Optimize](Random distribution) Improve the performance of tablet sin… (#17389)",
  "6923bf8d": "[fix](file cache)fix block file cache can't be configured (#17511)",
  "b6128f9b": "[dependenct](fe) Replace jackson-mapper-asl with fastxml-jsckson (#17303)",
  "ebda7ba5": "[Fix](FQDN) fix slow when ip changed (#17455)",
  "5334a589": "[fix](remote)fix whole file cache and sub file cache (#17468)",
  "1d858db6": "[feature](filecache) add a const parameter to control the cache version (#17441)",
  "a8f20eb4": "[Enhencement](schema_scanner) Optimize the performance of reading information schema tables (#17371)",
  "2b014a04": "[Improve](doris::Status performance) fix the performance issue due to copy of std::string (#17411)",
  "b501a9e7": "[improvement](inverted index)use reference to avoid bitmap copy for performance (#17352)",
  "e82b827b": "[optimize](vectorization)Optimize to_string's performance. (#17076)",
  "2f471de6": "[fix](FileCache) load file cache before start up daemon threads (#17199)",
  "e5f884a6": "[enhancement](cache) make segment cache prune more effectively (#17011)",
  "61826e3a": "[Improvement](parquet-reader) Improve performance of parquet reader filter calculation. (#16934)",
  "b194a7cf": "[improvement](memory) Support GC segment cache, when memory insufficient (#16987)",
  "13ae8cd6": "[doc](point query) add row cache doc for hight-concurrent-point-query (#16972)",
  "ef2fdb79": "[Improvement](parquet-reader) Optimize and refactor parquet reader to improve performance. (#16818)",
  "1ac5b23e": "Update doris-join-optimization.md (#15818)",
  "30dafd6a": "[improve](inverted index) Add element count limit for inverted index searcher cache (#16758)",
  "2426d8e6": "[chore](be-config) set disable_storage_row_cache default true to default disable row cache (#16827)",
  "24ef60b4": "[Opt](exec) opt aggreate function performance in nullable column",
  "e2245cbd": "[improvement](filecache) split file cache into sharding directories (#16767)",
  "bd3ea233": "[doc](filecache) add file cache document (#16649)",
  "aba843bb": "[Improvement](inverted index) inverted index query match bitmap cache (#16578)",
  "3929e821": "[improvement](filecache) Use consistent hash to assign the same scan range into the same backend among different queries (#16574)",
  "d9924c9b": "[Improvement](topn) add limit threashold session variable and fuzzy for topn optimizations (#16514)",
  "539fd684": "[improvement](filecache) use dynamic segment size to cache remote file block (#16485)",
  "7d035486": "[Opt](vec) opt the fast execute logic to remove useless function call (#16532)",
  "737c73dc": "[Improvement](topn) order by key topn query optimization (#15663)",
  "f2fd47f2": "[Improve](row-store) support row cache (#16263)",
  "f940cf4c": "[fix](multi-catalog) fix recursive get schema cache bug (#16415)",
  "63d57b83": "[fix](memory) Fix request jemallloc metrics wait lock je_malloc_mutex_lock_slow #16381",
  "54c85e36": "[Fix](point query) OlapScanNode `reuslt` could be memleak since it's cached (#16406)",
  "63042a38": "[fix](memtracker) Fix high frequency load slow lock in memtracker (#16244)",
  "7c145faa": "[Enhance] use fast_float::from_chars to do str cast to float/double to avoid lose precision (#16190)",
  "d224624b": "[improvement](session variable)Add enable_file_cache session variable (#16268)",
  "4e92f63d": "[Fix](Load) Disable for the developer to import fast json in fe (#16235)",
  "1c7c6b2f": "[improve](file cache) rename the var QueryContext to QueryFileCacheContext (#16272)",
  "07d58e53": "[improvement](filecache) add profile for file cache (#16223)",
  "28fcc093": "[improvement](bitshuffle)Enable avx512 support in bitshuffle for performance boost (#15972)",
  "f0ab71aa": "[Thirdpart](lib) Add lib fast_float to replace std::from_chars() convert float/double (#16204)",
  "e9afd321": "[improvement](memory) Optimize the log of process memory insufficient and support regular GC cache (#16084)",
  "7f2ff834": "[enhancement](FE)shut down fast throw JVM might do when throwing exception #16146",
  "17140422": "[improvement](vertical compaction) cache segment in vertical compaction (#16101)",
  "e579530c": "[Feature-WIP](inverted index) support use inverted index searcher cache (#16003)",
  "d5a3e8df": "[Exec](opt) Opt the vexplode_split function performance (#15945)",
  "38de7ce6": "[typo](doc) add solutions to solve the problem of fetching stream load record slowly (#15911)",
  "f17d69e4": "[feature](file cache)Import `file cache` for remote file reader (#15622)",
  "707eab9a": "[opt](multi-catalog) cache and reuse position delete rows in iceberg v2 (#15670)",
  "95f2f43c": "[fix](macOS) Failed to run BE UT due to syscall to map cache into shared region failed (#15641)",
  "4075e3ae": "[fix](csv-reader) fix new csv reader's performance issue (#15581)",
  "29492f0d": "[refactor](file-cache) refactor the file cache interface (#15398)",
  "0f3c0b78": "[Improvement](JSONB) improve performance JSONB initial json parsing using simdjson (#15219)",
  "ca4674ca": "[pipeline](opt) opt the exec performance of pipe exec engine (#15330)",
  "38530100": "[fix](localgc) check gc only cache directory (#15238)",
  "0c2911ef": "[enhancement](gc) sub_file_cache checks the directory files when gc (#15114)",
  "0ec21810": "[enhancement](remote) support local cache GC at the granularity of cache files (#14920)",
  "8726bfa1": "[enhancement](memory) Add tablet schema cache metrics (#14742)",
  "ba9a7775": "[fix](function) StringRef should not be key of timezone cache (#14719)",
  "36737fe9": "[feature](Nereids): Add cache to avoid repeatly calculation in DPhyp (#14585)",
  "a6049065": "[improvement](function) add timezone cache for convert_tz (#14616)",
  "07022771": "[improvement](tcmalloc) add moderate mode and avoid oom with a lot of cache (#14374)",
  "2bc43f97": "[fix](ui) clean npm cache before install (#14629)",
  "81fece53": "[improvement](cache) close compaction&schema_change&checksum index meta cache (#14586)",
  "6472d550": "[fix](cache) fix cache overflow problem #14515 (#14516)",
  "70ea07bc": "[fix](nullable) Fix nullable cache to avoid function returning wrong value (#14463)",
  "45975dd3": "[enhancement](Nereids): Change circle detector for better performance (#14438)",
  "3360bdf1": "[feature-wip](statistics) update cache when analysis job finished (#14370)",
  "1f2c06dd": "[enhancement](rewrite) Remove unused wide common factors to improve scan performance in ExtractCommonFactorsRule (#14381)",
  "eab0af7a": "[optimization](array-type) optimize the export precision of floating point numbers (#14261)",
  "8fe5211d": "[improvement](multi-catalog)(cache) invalidate catalog cache when refresh (#14342)",
  "7eed5a29": "[feature-wip](multi-catalog) Support hive partition cache (#14134)",
  "15eb07b8": "[BugFix](file cache) don't clean clone dir when doing _gc_unused_file_caches (#14194)",
  "13b1f92c": "[enhancement](Nereids) add output set and output exprid set cache (#14151)",
  "d55faa7f": "[feature](remote)Only query can use local cache when reading remote files. (#13865)",
  "43f80e26": "[enhancement](load) Increase batch size of node channel to improve import performance (#13912)",
  "6297ef10": "[enhancement](plugin) import audit logs for slow queries into a separate table (#14100)",
  "e692636b": "[performance-wip] (vectorization) Opt HashJoin Performance (#12390)",
  "8043418d": "[optimization](array-type) update the exception message when create table with array column (#13731)",
  "49b06041": "[optimization](array-type) array_min/array_max function support the date/datetime type (#13407)",
  "4caa1e80": "[optimization](array-type) update the docs for import data to array column (#13345)",
  "a83eaddf": "[test](cache)Add remote cache ut (#13377)",
  "a5f38806": "[improvement](memory) disable page cache and chunk allocator, optimize memory allocate size (#13285)",
  "005c2cd4": "[feature](remote) support local cache GC by disk usage (#12897)",
  "9b590ac4": "[improvement](olap) cache value of has_null in ColumnNullable (#13289)",
  "239e5b99": "[enhancement](storage) set the segment cache capacity according to the open file limit of the process (#13269)",
  "dd089259": "[feature-wip](multi-catalog) Optimize the performance of boolean & dictionary decoding (#13212)",
  "b81a8789": "[feature-wip](parquet-reader) optimize the performance of column conversion (#13122)",
  "71399ed7": "fix data cache sidebar error (#13137)",
  "1ae94547": "[enhancement](Nereids) planner performance speed up (#12858)",
  "fef10628": "[optimization](array-type) optimize the help docs of array type (#13001)",
  "d739aa7c": "[enhancement](Nereids) optimization for star-schema join reorder (#12817)",
  "1b1f13ec": "[optimization](array-type) optimize error prompts when sql parser report error (#12999)",
  "16bb5cb4": "[enhancement](memory) Jemalloc performance optimization and compatibility with MemTracker #12496",
  "a79d2e59": "[improvement](test) cache data from s3 to cacheDataPath (#13018)",
  "415721ef": "[enhancement](pred column) improve predicate column insert performance (#12690)",
  "3bb042e4": "[fix](memtracker) Process physical mem check does not include tc/jemalloc allocator cache (#12688)",
  "f50054f5": "[Enhancement](array-type) record offsets info to speed up the seek performance (#12293)",
  "3cc06820": "[doc](performance) performance doc and script update (#12493)",
  "af0f4584": "fix cache cleaner (#12432)",
  "c5481dfd": "[fix](remote)Fix bug for Segment::open() in case: config::file_cache_type (#12249)",
  "254cb321": "[optimize](remote) Optimize cache reader use a pre-created buffer when downloading the cache (#12165)",
  "f0cde35e": "[performance improvement] Spark Load, SparkDpp processRDDAggregate performance improvement (#12186)",
  "8370115c": "[enhancement](memtracker) Improve performance of tracking real physical memory of PODArray #12168",
  "ac425d4b": "[fix](remote)Fix bug for cache reader (#12104)",
  "a6e2e2f3": "[feature](remote)Add cache files cleaner for remote olap files (#11959)",
  "9caaa4bf": "[fix](memory) fix set disable_chunk_allocator_in_vec=false performance #12092",
  "82ca62df": "[fix](memory) Fix disable_mem_pools to disable cache #12087",
  "54fc038d": "[Fix](remote) Fix thread safety issue in cache (#11984)",
  "1304a176": "[fix](memtracker) Improve performance of tracking real physical memory of PodArray #12021",
  "f66e42f8": "[optimization](array-type) support the decimal/datetime as the nest type of array in print_value (#11784)",
  "0728f08c": "[improvement](dependency) Use release mode to build cctz. Improve performance.",
  "3a49156e": "[performance] (vectorization)optimize In Expr (#11826)",
  "c1244704": "[enhancement](memory) Fix too much cache leads to less memory available for queries (#11751)",
  "288b440b": "[improvement](vectorized) Improve count distinct performance by using fastunion (#11516)",
  "b3668079": "[optimization] (be-log) modify the backendservice log (#11689)",
  "2d5ffac5": "[fix](optimization) InferFiltersRule bug: a self inner join on a view, which contains where clause, will cause mis-inference. (#11566)",
  "b9f7f63c": "[Fix](planner) Fix wrong planner with count(*) optmizer for cross join optimization (#11569)",
  "8802a419": "fix profile may cause query slow (#11386)",
  "3070318f": "[Enhancement](IdGenerator) Use IdGeneratorBuffer to get better performance for creating tablet in fe when do alter table job (#11524)",
  "52290fed": "[tools](tpch)update queries for better performance (#11523)",
  "ef65fbb4": "[tools](ssb-flat)update script for better performance (#11505)",
  "95091256": "[chore](deps) update bdbje tp doris bdbje, update libhdfs3 to improve performance (#11497)",
  "c176ff54": "[improvement](orc)improve hdfs scan performance (#11501)",
  "e7f378fe": "[Enhancement](IdGenerator) Use IdGeneratorBuffer to get better performance for getNextId operation when create table, truncate table, add partition and so on (#11479)",
  "a943adac": "[feature](cache) Add FileCache for RemoteFile (#11186)",
  "d6149e47": "[Enhancement](TabletInvertIndex) use StampLock to instead of ReentranReadWriteLock to get better performance (#11422)",
  "4f5e1601": "[bug](scanner) Improve limit query performance on olapScannode and avoid infinite loop (#11301)",
  "b35daf0a": "[improvement](light-schema-change) Support tablet schema cache (#11131)",
  "5215d950": "[enhancement](workflow) Use ccache to speed the BE UT (Clang) up (#11339)",
  "d6f937cb": "(performance)[scanner] Isolate local and remote queries using different scanner… (#11006)",
  "2c34b6cf": "optimization the result check for test_json_load (#11160)",
  "a1758bd1": "[feature-wip](unique-key-merge-on-write) Add agg cache for delete bitmap DSIP-018 (#10921)",
  "d36b927f": "[improvement](fe-ut) use local journal to make FE ut run fast (#11038)",
  "c0370661": "[fix](cache) fix that ShardedLRUCache may coredump when destructor was called (#10995)",
  "f6cb7a83": "[Optimize] Improve performance like/not like filter through pushdown function to storage engine (#10355)",
  "02460ab4": "change date to int, good for performance (#10889)",
  "6751e5b2": "[fix](alter)(tablet-scheduler) fix unexpected exception with compaction_too_slow message when add rollup for olap table (#10827)",
  "4e9d5a7f": "optimize substr performance and fix ASAN global buffer overflow (#10442)",
  "9b554be6": "[improvement]Division of integer is too slow (#10769)",
  "4cb80c57": "[memtracker]fix fix_memtracker_performance_ (#10629)",
  "24d824a7": "[improvement](multi-catalog) Impl parallel for file scanner to improve the scanner performance (#10620)",
  "e159e748": "[chore](dependency) fix opentelemetry-cpp enable o3 optimization will core. (#10675)",
  "853f85ae": "[enhancement] improve performance of week() and yearweek() (#10633)",
  "9036f93d": "Revert '[improvement](function) optimize substr performance (#10169)' (#10390)",
  "2335d233": "[improvement](function) optimize substr performance (#10169)",
  "a2b50203": "[fix](partition-cache) fix result may not write when enable partition cache (#10319)",
  "d9bbf67b": "[DefaultConfigChange]enable query vectorization and storage vectorization and storage low cardinality optimization by default (#9848)",
  "74982336": "[tools][doc]add ssb flat tools, and update performance doc (#9827)",
  "7199102d": "[Opt][VecLoad] Opt the vec stream load performance (#9772)",
  "4af2493c": "[Improvement] optimize scannode concurrency query performance in vectorized engine. (#9792)",
  "4d1e926b": "ui introduce a new BE config storage_page_cache_shard_size (#9821)",
  "dbc5af44": "[doc]Add Doris join optimization documentation (#9753)",
  "be026add": "[security] update canal version to fix fastjson security issue (#9763)",
  "ca05d1ee": "[fix](memory tracker) Fix lru cache, compaction tracker, add USE_MEM_TRACKER compile (#9661)",
  "31e40191": "[Refactor] add vpre_filter_expr for vectorized to improve performance (#9508)",
  "c0985867": "[improvement][performance] improve lru cache resize performance and memory usage (#9521)",
  "7a9bf5b2": "[FeConfig](Project) Project optimization is enabled by default (#9667)",
  "811f019e": "[performance][query]improve the performance of DISTINCT aggregation by using flat hash set replace unordered set (#9401)",
  "ae25633d": "[fix](cache) Generate md5 value using utf8 encoding for sqlkey string (#9121)",
  "bd126f06": "[improvement] Refactor type info for further optimizations. (#8786)",
  "c7a098c1": "[fix](sql_block_rule) optimization of alter sql_block_rule stmt (#8971)",
  "3724f947": "[refactor][optimize](storage) Code optimization and refactoring for low-cardinality columns in storage layer (#8627)",
  "da87e0c4": "optimize create tpch table statments to achieve higher performance (#8683)",
  "e285d091": "[Enhancement](load) speed up stream load for duplicate table, use template for faster get_type_info. (#8500)",
  "905b9a62": "[fix](lru_cache) fix heap-use-after-free problem for lru cache(#8569)",
  "2ec0b810": "[improvement](storage) Low cardinality string optimization in storage layer (#8318)",
  "848acec5": "[chore](dependency) update Croaring for good performance (#8492)",
  "30d8089b": "[fix](partition_cache) Fix Partition Cache NullPointerException bug (#8454)",
  "03830014": "[Enhancement] Support Skipping compaction lower replica where select queryable replica for better scan performance (#8146)",
  "c56a372e": "[improvement][fix](grouping-set)(tablet-repair) optimize compaction too slow replica process, (#8123)",
  "b7e07ee4": "[fix](cache) Throws ClassCastException when there are multiple EXCEPT, INTERSECT and UNION in the local view (#8083)",
  "c6defb2f": "[improvement](query) Improve fe high concurrent query performance (#7936)",
  "1c711705": "[chore] Use ccache to speed recompiling test code up. (#7811)",
  "8685b6b9": "[improvement](executor) Optimize lock of client cache (#7543)",
  "bf4a867e": "[improvement](tablet-repair) add a config repair_slow_replica (#7423)",
  "6657524c": "[feature](sql-block-rule) add partition_num, tablet_num, cardinality in SqlBlockRule to block big/slow sql (#7403)",
  "a60d86c1": "[improvement](broker) add disable cache config for broker (#7506)",
  "8da2e8b9": "[fix](cache) Int overflow causes the wrong latest table to be obtained (#7533)",
  "a8a5c0a6": "[improvement](load) memory usage optimization for load job (#7454)",
  "30db2cdd": "[fix](cache) Some view stmt cannot be obtained when view in the subquery and add cache key UT (#7375)",
  "4afdcdb9": "[performance](reader) Opt the unique reader to reduce unnecessary compare and function call (#7348)",
  "5e32ae3c": "[improvement](cache) Optimize sql cache (#7231)",
  "d3316ff5": "[performance](function) Support SIMD function in some string function (#7236)",
  "948a2a73": "[performance] Improve DeltaWriter's performance. (#7216)",
  "c9e57803": "optimize bitmap function count, use roaring cardinality method, this will more fast than current version (#7151)",
  "36360ba8": "[BUG] fix profile not working with sql_cache enabled (#7105)",
  "667e8bdc": "[Bug] Fix NumberFormatException for partition cache (#6846)",
  "760fc02b": "Added bprc stub cache check and reset api, used to test whether the bprc stub cache is available, and reset the bprc stub cache (#6916)",
  "29a4ff4b": "[Cache][Bug] Correct update cache timeout unit (#6888)",
  "ed7a873a": "[Memory Usage] Implement segment lru cache to save memory of BE (#6829)",
  "4cc01892": "[SQL Cache] Add all view stmt as the suffix of cache sqlkey (#6832)",
  "dd8a1da1": "[Performance] Improve performance for showing proc statistic(#6567)",
  "a2a13dad": "[Optimize] Make light schema change complete more faster under concurrent conditions (#6292)",
  "fa382f86": "ui Modify the memory limit of storage page cache (#6451)",
  "8738ce38": "Add long text type STRING, with a maximum length of 2GB. Usage is similar to varchar, and there is no guarantee for the performance of storing extremely long data (#6391)",
  "5f7c7ce7": "[Bug][Cache] Map.get with cache key real value. (#6377)",
  "2d78c31d": "[Enhance] improve performance of init_scan_key by sharing the schema (#6099)",
  "94c50012": "[Performance] Optimize the performance of tabletReport (#6200)",
  "19cd42cc": "[BUG] avoid std::function copy in client cache (#6186)",
  "290a844e": "[optimize] Optimize bloomfilter performance (#6180)",
  "bff6ede9": "add data size field for partition cache (#6026)",
  "1999a0c2": "[optimization] open gcc strict-aliasing optimization (#6034)",
  "63c99eb4": "[Cache][Enhancement] Assure sql cache only one version (#5793)",
  "86d2ddc5": "[UT] Fix bug for cache unit test (#5766)",
  "ec29322c": "[Bug] Avoid waiting too long when rpc is slow. (#5669)",
  "05487e38": "[Bug] upgrade log4j version from 2.12.1 to 2.14.0 to fix performance issue in JDK11 using ZGC (#5591)",
  "c4622315": "[build] support ccache while build BE (#5508)",
  "bf086408": "[Doc] Add query cache docs (#4479)",
  "7eae3e28": "[optimization] use inline optimize ExprContext::get_value (#5385)",
  "a8419051": "[optimization] use replace top instead of push pop in priority #5312 (#5313)",
  "bf0cb78b": "[optimization] avoid extra memory copy while build hash table (#5301)",
  "fd6fb90a": "[Bug] Hit none partition cache, but hit range is still right (#5065)",
  "9ddf434f": "[Bug-Fix] Fix partition cache match bug (#5060)",
  "193db420": "[enhancement]improve performance of json load (#5055)",
  "df1f06e6": "Optimized the read performance of the table when have multi versions (#4958)",
  "e507fcc3": "[Enhancement] Improve list comparing performance (#4880)",
  "f40868a4": "[Optimize] Improve LRU cache's performance (#4781)",
  "a61eea3b": "Make some debug log settings configurable and change some log level from info to debug to avoid performance bottlenecks (#4766)",
  "b1853cae": "[UDF] Improve performance of function money_format (#4672)",
  "5199a17a": "[cache][be]Fix the bug of cross-border access cache (#4639)",
  "5f43fb3b": "[Cache][BE] LRU cache for sql/partition cache #2581 (#4005)",
  "8be04fac": "[Variable] Add a new global variable 'performance_schema' to support Mysql JDBC 8.0.16 or later.#4537# (#4542)",
  "c0195471": "[Feature][Cache] Sql cache and partition cache #2581 (#4330)",
  "dc3ed1c5": "[Compaction]Compaction rules optimization (#4212)",
  "421828d5": "[Doc] Fix format in doris_storage_optimization.md (#4250)",
  "1ebd156b": "[Feature]Add fetch/update/clear proto of fe&be for cache (#4190)",
  "b4cb8fb9": "[Feature][Cache]Add interface, metric, variable and config for query cache (#4159)",
  "d3d83584": "[Performance] Improve performance of unique table read (#3974)",
  "96713940": "[BUG]Make segment V1 and V2 share same file cache (#3945)",
  "2c8fdb61": "[BUG]Make segment V1 and V2 share same file cache (#3945)",
  "27046c5b": "[Enhancement] Improve the performance of query with IN predicate (#3694)",
  "b6487344": "[TxxMgr] Support txn management in db level and use ArrayDeque to improve txn task performance (#3369)",
  "b29cb9db": "[Optimize][Delete] Simplify the delete process to make it fast (#3191)",
  "a5703ef1": "[Performance] Support sharding txn_map_lock into more small map locks to make good performance for txn manage task (#3222)",
  "d110629a": "Optimize performance of TxnManager::build_expire_txn_map (#3269)",
  "a1f5b570": "Support sharding tablet_map_lock into more small map locks to make good performance for tablet manage task (#3051)",
  "6c33f805": "Add disable_storage_page_cache config (#2890)",
  "a27e8906": "Add file cache for v2 (#2782)",
  "036d7da2": "Improve publish version performance (#2382)",
  "f635552a": "Port latest faststring (#2403)",
  "0f00febd": "Optimize Doris On Elasticsearch performance (#2237)",
  "14769b0b": "Improve to_bitmap parse int performance (#2223)",
  "068eed8e": "Add delete state of row block v2 for performance (#2055)",
  "3bca253f": "Fix beta rowset read slow (#1994)",
  "f852f50a": "Improve unique id performance (#1911)",
  "c643cbd3": "Optimize the load performance for large file (#1798)",
  "17e52a4b": "Improve LRUCache to get better performance (#1826)",
  "348e2129": "Initialize tablet uid not using default constructor for performance reason (#1795)",
  "da8b9aad": "Remove preaggregation and index stream cache stuff out of RowsetReaderContext (#1698)",
  "2bd01b23": "Add page cache for column page in BetaRowset (#1607)",
  "e9b2d30c": "Add faststring and cpu util (#1281)",
  "08c8caea": "Add max cache size to ClientCache in BE (#1202)",
  "ff274615": "Remove log info from decimalv2_value to avoid performance degradation (#1175)",
  "945aaf89": "Fix core when release UDF cache entry (#462)",
  "90d71508": "Add UserFunctionCache to cache UDF's library (#453)",
  "7ac01157": "Improve the Backend's disk info report performance (#349)"
}, "Douya": {
  "c91ba08": "[Fix] Workaround Glide cache image file type so that target apps can share.",
  "c214cfc": "[Fix] Fix glide cache broken by progress listener.",
  "378dba1": "[Refactor] Implement NotificationListResource; Also fixes wrong notification list cache upon account switching.",
  "358bb6f": "Fix home broadcast list cache multi account properly."
}, "DraggablePanel": {
  "": ""
}, "drag-sort-listview": {
  "": ""
}, "DroidPlugin": {
  "d09fec0": "Bugfix:Optimizing performance"
}, "drools": {
  "5d0a5f53": "[DROOLS-7412] configure embedded cache to ignore returned values (#5186)",
  "ec98ad00": "[DROOLS-7407] avoid performance expensive call to remove in PsuedoClock's PriorityQueue (#5175)",
  "9b66bdc8": "[DROOLS-7387] allow to configure the folder containing the infinispan cache file used by the reliable session (#5160)",
  "55978f7c": "[DROOLS-7384] Persist RELIABLE_SESSIONS_COUNTER in cache (#5157)",
  "9988c6a3": "[DROOLS-7378] Reliable Session dispose has to remove its cache (#5134)",
  "880954be": "[DROOLS-7370] CacheManager must persist caches in GlobalState (#5115)",
  "f41aa536": "[DROOLS-7355] improve performances of PseudoClockScheduler (#5094)",
  "4eb6d59a": "[DROOLS-7358] isolate fastutil usage in its own module (#5051)",
  "a3168bdc": "[DROOLS-7328] fix sliding time window performance problem (#5032)",
  "4b499bbe": "[DROOLS-7326] avoid relocation when shading fastutil (#5031)",
  "af2af5c8": "[DROOLS-7326] shade fastutil (#5015)",
  "69c46803": "[DROOLS-6644] Improve performances of lambda externalization (#4937)",
  "d2b751c2": "[DROOLS-7280] fail fast when a rule needs mvel dialect but drools-mve… (#4917)",
  "f31ce1bd": "[DROOLS-7055] Drools 8 docs : Add a warning regarding OOPath performance (#4626)",
  "99f9dd85": "[DROOLS-7110] minor optimizations to efesto runtime manager and servi… (#4628)",
  "59ab1a94": "MVELDialect.java::loadImportedClass optimization (#4038)",
  "bf519547": "[DROOLS-6683] improve ContextImpl constructor performance (#4012)",
  "13214ae2": "[DROOLS-6642] fix performance regression in executable model generation (#3880)",
  "812573f4": "[JBPM-9898] Improving comparable version performance",
  "7d626076": "[BXMSPROD-1350] change cache key for flows using different java versions (#524)",
  "3b42ba33": "[BXMSPROD-1350] change cache key for flows using different java versions (#3642)",
  "c9af0d0a": "[RHDM-1735] optimize runtime performances and replace legacy data str… (#3630)",
  "23d1b998": "cache hashCode in IndexTupleList (#3578)",
  "368d55e5": "[DROOLS-5914] introduce an option to flag KieBase as immutable and optimize performances leveraging it (#493)",
  "7fa22791": "[DROOLS-5914] introduce an option to flag KieBase as immutable and optimize performances leveraging it (#3297)",
  "2bd95df7": "[DROOLS-5907] minor performance improvements for working memory action execution (#3295)",
  "03fd06d1": "[JBPM] fix performance regression",
  "b5489e02": "[DROOLS-5730] minor performance optimizations (#3258)",
  "95990234": "[DROOLS-5730] improve performances of arguments fetch in executable m… (#3194)",
  "3a46e96d": "[DROOLS-5716] improve performances of events notification (#3157)",
  "3260c103": "[BAPL-1259] Add logging for rule performance analysis (#2900)",
  "4f1a8b2f": "[DROOLS-5326] Make LambdaIntrospector.methodFingerprintsMap cache siz… (#2896)",
  "88e4ab47": "[DROOLS-5227] improve FactType API performances for both drl and executable model",
  "e15812b7": "minor optimization in evaluation of 1-arg lambda predicate",
  "732804c0": "[DROOLS-2923] Improve DMN execution performance (#1997)",
  "c94fb619": "minor optimization: avoid wastefully creating multiple instances of the RuleNetworkEvaluator",
  "74dec3a9": "[DROOLS-2596] fix ObjectTypeConfs cache invalidation during incremental compilation for stateless session",
  "bc6c3e93": "[DROOLS-2596] fix ObjectTypeConfs cache invalidation during incremental compilation for stateless session",
  "a44f3ec2": "[DROOLS-2385] clear defined types cache in ProjectClassLoader when a declared type is changed during an incremental compilation",
  "79969716": "[DROOLS-2354] minor optimizations",
  "f69ab6bf": "Oprimize session creation performances (#1668)",
  "2a01202b": "[DROOLS-1560] simplify and improve performances of ChainedProperties discovery",
  "74a8579d": "[DROOLS-1560] simplify and improve performances of ChainedProperties discovery (#1276)",
  "1b24bb5c": "[DROOLS-1560] simplify and improve performances of ChainedProperties discovery (#233)",
  "57c6bc10": "[DROOLS-1560] simplify and improve performances of ChainedProperties … (#1257)",
  "c46d2134": "[DROOLS-1560] simplify and improve performances of ChainedProperties … (#230)",
  "25e3636f": "DROOLS-1531 Fix instanceof accordingly to FEEL spec table 49 (optimizations) (#1223)",
  "4ae9c55d": "[DROOLS-1536] allow to cache compiler subcomponents into the KnowledgeBuilderImpl (#1229)",
  "82a83109": "minor optimization in KnowledgeBuilderFactory (#221)",
  "d61a86f2": "DROOLS-1443 implemented hashCode and equals to ensure that caches for resource loading can cache on classloaders that will return the same resources regardless of instance (#1104)",
  "5bbeb8ad": "[DROOLS-1387] minor performance optimizations (#1052)",
  "0a760e3e": "JavaBackedType cache. (#17)",
  "ea0e85c6": "Container is not upgraded until restarted - classloader caches kjar classes upon updateToVersion - test case",
  "9940af3d": "[DROOLS-1039] fail fast when there is an invalid kie.conf (#739)",
  "48b65c54": "[DROOLS-1039] fail fast when there is an invalid kie.conf (#137)",
  "08d6538b": "[DROOLS-1026] improve equals/hashCode performances for all rete nodes",
  "464aad2f": "[BZ-1318532] update class accessors caches when merging packages",
  "04645323": "[DROOLS-1090] set modificationMask in PropagationContext when it is retrieved from cache",
  "0b935033": "[BZ-1276311] improve PatternBuilder performances",
  "b44ab2f8": "[DROOLS-923][BZ-1273368] make KieRepository thread safe + store kmodules in a LRU cache",
  "cf8b90ab": "[DROOLS-888] cache non existing classes in ClassTypeResolver",
  "099f5f42": "minor optimization in ObjectTypeConfigurationRegistry",
  "803190ce": "[DROOLS-875] optimize KieSession creation performances",
  "99be702b": "[DROOLS-875] optimize KieSession creation performances",
  "1f9fafc2": "[DROOLS-817] Improve performance over large hierarchies",
  "72f877b0": "[DROOLS-810][DROOLS-811] Trait performance and external update",
  "cdde83c6": "Increase retry interceptor delay to stabilize test on slower machines",
  "8ae26ef6": "[DROOLS-664] minor performance optimization to xpath evaluation",
  "a30c60af": "minor refactor and performance improvement",
  "eca7d262": "BZ-1147642 - Minimal ExecutorService interval 1s can be limiting for high performance environments",
  "87607768": "[DROOLS-541] implement session cache",
  "f0763abf": "[DROOLS-532] Avoid using compilation cache between incompatible drools versions",
  "ca2611be": "[BZ-1050006] avoid to use mvel dynamic optimization",
  "d5e335b8": "BZ1034030 : 0 byte local cache file in UrlResource (cheery-picked from 05196fa8d56043cb2ce56db952d4fae17b29f27e)",
  "af0028cb": "BZ1034588 : stale local cache file in UrlResource (cherry-picked from fe42528c978e78d94857db030db74c172766429e)",
  "e2ebec1f": "[BZ-1027221] prevent KnowledgeAgent to keep rebuilding kbase from cached files",
  "b181c574": "[DROOLS-9][DROOLS-39][DROOLS-211] Remove scary stack trace from warning message when MVEL optimization fails",
  "fd644d3a": "[BZ-1013197][DROOLS-275] allow operator deserialization even when not present in the operators cache",
  "c1a1fcf9": "[BZ-1008662] cache zipped files as byte[] in ZipKieModule + fix rule removal",
  "b09e981f": "[BZ-1007977] when returning a cached KieModule from the KieRepository referring to a snapshot release check if there is a newer release on the maven repository",
  "60b69f97": "[BZ-967609] fix cached value reading for dtables + replace corroupted XLS dtable",
  "2a5a95d7": "fix segment prototypes cache invalidation",
  "26849b25": "DROOLS-227 Dirty tracking to skip nodes and segments. Addresses performance issues for large rules, and large rule sharing. DROOLS-226 Thread Safety issues for bitmasks and StagedLeftTuples",
  "eae854a7": "[BZ-982586] optimize compilation performance by parallelizing generated classes wiring and caching AlphaNodes hashing",
  "77ec45fa": "[BZ-976824] fix performance regression caused by new UpgradableReentrantReadWriteLock",
  "563406cb": "Implementing kjar compilation cache",
  "9a375445": "DROOLS-7 agenda optimization, so rule matches are not placed on the agenda -DeclarativeAgendaTest now works",
  "fc7f1183": "DROOLS-7 agenda optimization, so rule matches are not placed on the agenda",
  "05b80f0a": "DROOLS-7 -agenda optimization, so rule matches are not placed on the agenda",
  "fe1f1da5": "DROOLS-7 agenda optimization, so rule matches are not placed on the agenda",
  "316b41bd": "[DROOLS-91] move the transformed masks cache from the Rule to the ObjectType",
  "c274c0d9": "DROOLS-65,BZ917787: fixing conditional to allow cache update altough client is restarted (cherry picked from commit 133058fd496fe002781ce533145a108520b6933d)",
  "c430741b": "[JBRULES-3668] store KBaseUnits in an eviction cache",
  "670fc084": "reverted: remove cache of work item handlers from session configuration",
  "5a9b6a1a": "JBPM-3812 - remove cache of WorkItemHandler instanes from SessionConfiguration",
  "4d2efddf": "BZ-862325: removing the skipModify optimization to avoid bug (cherry picked from commit 1a8db1048e51158994a0120f9cec9bba89253400)",
  "bb90a11e": "[JBRULES-3263] performance optimization of jitted constraint",
  "5ab28276": "[JBRULES-3263] performance optimization of jitted constraint",
  "eacc18f5": "[JBRULES-3263] minor optimizations",
  "f07f1dc7": "simulation: fail fast when there are rule compilation errors, instead of simply not adding the broken rules (which causes wrong results that are hard to attribute to rule compilation problems)",
  "ca55c784": "[JBRULES-3343] slot specific fix and optimizations",
  "caee8422": "[JBRULES-3194] bytecode generator performance optimization",
  "30ba9f2e": "JBRULES-2960: ClassPathResource fails to get last version if the underlying ClassLoader uses a cache. - Removed URLClassPathResource",
  "a73ba05a": "JBRULES-2960: ClassPathResource fails to get last version if the underlying ClassLoader uses a cache. - Removed URLClassPathResource - ClassPathResource: getInputStream() uses getURL().getStream() instead of classloader.getResourceAsStream()",
  "f6c26683": "JBRULES-2817: Make the KnowledgeAgent Tests more robust and faster -no more @Ignored tests",
  "7f337072": "JBRULES-2466 Exception in hash code calculation for character attributes in alpha hashing optimization",
  "f91586cd": "JBRULES-2982: Fixing performance regression on Accumulate",
  "54d20328": "JBRULES-2960: ClassPathResource fails to get last version if the underlying ClassLoader uses a cache. - URLClassPathResource added - Added a test for URLClassPathResource",
  "b30105aa": "JBRULES-2960: ClassPathResource fails to get last version if the underlying ClassLoader uses a cache. - Factory method added to create URLClassPathResources",
  "16b6d139": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster -KnowledgeAgentBinaryDiffTests: All test methods are enabled again.",
  "dd02ade4": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster -Added methods to create rules with custom LHS in custom packages",
  "a527c071": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster - KAgent Event Listener test are enabled again! There were modified to adopt the new KAgent test architecture",
  "bda889e7": "tests should not litter the committed directories: put cache dir inside target/test-tmp",
  "13505e07": "JBRULES-2835: clear persistenteSession/cache on dispose",
  "7f1690f0": "JBRULES-2835: clear persistenteSession/cache on dispose",
  "36b18f88": "JBRULES-2817: Make the KnowledgeAgent Tests more robust and faster - QueryRemotionTest was migrated to the new test approach",
  "aa440859": "JBRULES-2817: Make the KnowledgeAgent Tests more robust and faster - Unnecessary imports removed",
  "8baf3eb7": "JBRULES-2817: Make the KnowledgeAgent Tests more robust and faster - KnowledgeAgentDisposeTest was migrated to the new test approach - removed unnecesary Thread.sleep() from KnowledgeAgentDSLTest",
  "504ce6f4": "JBRULES-2817: Make the KnowledgeAgent Tests more robust and faster - KnowledgeAgentDSLTest was migrated to the new test approach",
  "b2d460a3": "JBRULES-2817: Make the KnowledgeAgent Tests more robust and faster - KnowledgeAgentCustomClassLoaderTest was migrated to the new test approach",
  "a3425dd1": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster",
  "ffbc1e5a": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster",
  "895511d1": "JBRULES-2817: Make the KnowledgeAgent Tests more robust and faster - Added Query test",
  "6870d398": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster",
  "7964760d": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster",
  "846a05c7": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster",
  "3eed5b36": "JBRULES-2817 Make the KnowledgeAgent Tests more robust and faster",
  "c7c90487": "JBRULES-2596: fixing query performance by adding an alternative query listener that does not clone fact handles.",
  "78c0e4d5": "JBRULES-2596: fixing query performance by adding an alternative query listener that does not clone fact handles.",
  "997fc18e": "JBRULES-2596: improving query performance by caching system hash code for fact handles and providing session configuration to configure which query listener class to use",
  "c16fa45f": "JBRULES-2596: improving query performance by caching system hash code for fact handles and providing session configuration to configure which query listener class to use",
  "3349e178": "Added a cache for the method lookups. It caches existing and non-existing method lookups in order to not make reflection everytime.",
  "e092a282": "faster verification. -Cached verifier in Guvnor",
  "58514247": "faster verification. -Moved verification scopes out of the verifier conf to fireAnalyser()",
  "737a4842": "faster verification. -Verification in Guvnor has better support for non DRL rules",
  "2f313963": "faster verification. -Verification in Guvnor has better support for non DRL rules",
  "256213ad": "Step closer to faster verifier. Verifier KnowledgeBase can be build without VerifierImpl once, saved and used several times",
  "dced690f": "JBRULES-2067: adding support to class resolution caching on user and system classloaders to improve compilation performance.",
  "7a7ff099": "JBRULES-2067: adding support to class resolution caching on user and system classloaders to improve compilation performance.",
  "db8affe2": "JBRULES-2067: adding support to class resolution caching on user and system classloaders to improve compilation performance.",
  "ee46e7ff": "JBRULES-2342 Pacman -pacman now slows down during eating",
  "0110acc5": "- added simple Drools Flow performance test",
  "e116bb30": "JBRULES-2055: fixing network analysis for skipModify optimization",
  "84b15a46": "JBRULES-1999 Improve performance/configuration options of ChainedProperties use in StatelessSession.execute calls -reuse the SessionConfiguration, to avoid excessive repeated property searching.",
  "a69fbf3d": "JBRULES-1902: fixing bug on the trigger that was causing the engine garbage collection to slow down to death",
  "d8c7db44": "JBRULES-1095 Rete build performance optimization - BuildUtils: calling getMatchingNode instead of getSinks - CompositeLeftTupleSinkAdapter: implemented getMatchingNode - CompositeObjectSinkAdapter: implemented getMatchingNode and optimized getSinks. - EmptyLeftTupleSinkAdapter: implemented getMatchingNode. - EmptyObjectSinkAdapter: implemented getMatchingNode. - LeftTupleSinkProagator: added getMatchingNode. - ObjectSinkPropagator: added getMatchingNode - SingleLeftTupleSinkAdapter: implemented getMatchingNode - SingleObjectSinkAdapter: implemented getMatchingNode",
  "91a8f377": "JBRULES-1528 URLScanner wasn't reporting IO exception causes to the log when falling back to local cache.",
  "54b72229": "JBRULES-1488 optimization to reduce stack usage - DroolsObjectInputStream: moved all object reading code into readObject(). - DroolsObjectOutputStream: moved all object writing code into writeObjectOrReference(). - BetaNode: moved super.read/writeExternal to last. - Rete: moved stack intensive calls back. - ReteooRuleBase: moved stack intensive calls back. - LargeRuleBaseSerializationTest: increased number of rules to 1000.",
  "6cf484b0": "Fixing OTN optimization",
  "ee2c50fd": "JBRULES-1412: reseting cache in beta nodes",
  "a54b4eaa": "JBRULES-1413 KnowledgeHelper should have cache reset before use",
  "d09152fe": "JBRULES-1412 ContextEntries should have cache nulled -VariableRestriction must also reset reteTuple and Object.",
  "476f23aa": "JBRULES-1412 ContextEntries should have cache nulled -All constraints can now null their caches -Still need to update the nodes to call those resets",
  "750eaf41": "JBRULES-1323: fixing objenesis cache after branch merge",
  "a0c8b5c4": "a test for checking serialization, compiler performance for large rulebases",
  "6e863b65": "JBRULES-1285: fixing performance drop",
  "b65ae539": "JBRULES-1281 ExecutorService cannot be shared -Added cached reflection class resolve and object instantiator to ClassUtil. -Made RuleBaseUpdateListenerFactory and ExecutorServiceFactory use ClassUtil. -Now each new stateful or stateless session get's its own instance of ExecutorService.",
  "7afce002": "JBRULES-1153 Accumulate/Collect can't be used in queries -Node memory configuration is a bit better now, slowly gettier happier with the design. BaseNode no longer controls memory, instead ObjectSink and TupleSink have setter and getter methods for the node's memory.",
  "a8ce9ee7": "test demonstrating slowdown caused by combining java and mvel into one drl",
  "f1ee87db": "JBRULES-947 sequential rete -add performance enhancement to reduce iteration range, be tracking first and last populated elements.",
  "a5accfa0": "JBRULES-947 sequential rete -We now optimise to use a LinkedList if the FactHandle is not indexed, as we don't need to remove the handle this is faster.",
  "9303fcc5": "JBRULES-759: removing the attached nodes cache as it was becoming corrupt when removing packages. Test cases updated",
  "ce0a6385": "JBRULES-720 Clips Parser -Refactored addParamterCallback to received the FunctionCaller and add the parameter there, this allows in place element rewritting -If now works with multiple lines and the optional 'else' location is stored for fast lookup.",
  "6bde5312": "Fixing optimization for skip modify",
  "9b35c0aa": "-moved getClass() == X.class to isntanceof as its actually faster, less bytecode.",
  "d3c3f966": "-moved getClass() == X.class to isntanceof as its actually faster, less bytecode.",
  "d06d1901": "-moved getClass() == X.class to isntanceof as its actually faster, less bytecode.",
  "8192b3da": "-moved getClass() == X.class to isntanceof as its actually faster, less bytecode.",
  "1879baca": "-Deleted JFDI resolvers, as we now use MVEL -moved getClass() == X.class to isntanceof as its actually faster, less bytecode.",
  "428cd027": "JBRULES-612: fixing cache rebuild",
  "484c51f1": "wrote a quick test to measure put, get and iterate performance. peter",
  "d75632c7": "JBRULES-44: fixing equals() and hashCode() methods to use local cached fields instead of delegating",
  "b15d4925": "Improving performance by removing unnecessary ContextEntry subinterfaces",
  "09b981a8": "-LinkedList should impl the fast org.drools.util.Iterator",
  "be7529b0": "JBRULES-498 Optimised HashMap implementations -removed the need for fastmap and identitymap",
  "80a0a739": "JBRULES-498 Optimised HashMap implementations -Improved the caching context, so it only caches the left or the right.",
  "f5a24ffe": "JBRULES-498 Optimised HashMap implementations -Added a cacheable context to speed up evaluations",
  "ea363020": "JBRULES-498 Optimised HashMap implementations -manners now appears to be working, but is still slow :(",
  "5648feea": "performance chapter",
  "8875c6a2": "-TerminalNode should be stateless so moved cached xor group to TerminalNode",
  "575ecda1": "Improving performance",
  "2d10ee05": "-Refactor to use InternalFactHandle - so we can directly get Objects -Remove PrimitiveLongMap from WorkingMemoryImpl, as we now get from the InternalFactHandle -beta node indexing now caches the column int -Rete and ReteooBuilder now correctly seraliase - via the CompositePackageClassLoader -Note there are still some failing logical assertion tests. -ReteooBuilder and workingMemory actions are now synchronised via a lock on ReteooBuilder -I've added a hard coded conflict resolver, hoping its a little faster than composite.",
  "d121b34b": "added GC calls, which improves the performance a bit. peter",
  "c0a74aa8": "re-adding the performance test now the rule files have been renamed to .rule. thanks to mike for the suggestion. peter",
  "0baa325e": "updated the rule generator and performance test so I can run tests with 2k rules and 1 to 3 conditions per rule.",
  "f82aab0c": "adding 3 rule files to test propogation performance.",
  "06a78f31": "I renamed the RulesetBenchmark to RulesetLoad and added another unit test to measure assert/fire performance.",
  "c657233c": "adding 5 rule files for testing performance as ruleset increases",
  "5642c061": "made the default the fast one (too slow for regular testing otherwise).",
  "176c132b": "refactoring, performance improvements by using array vs. lists",
  "3dc50021": "improved performance"
}, "DropDownMenu": {
  "": ""
}, "dropwizard": {
  "a351662": "Update dependency com.fasterxml.jackson:jackson-bom to v2.15.1",
  "9aeb02f": "Update dependency com.fasterxml.jackson:jackson-bom to v2.15.0 (#7040)",
  "c310b3d": "Update actions/cache action to v3.3.1",
  "dfc59b9": "Update actions/cache action to v3.3.0 (#6792)",
  "09767a9": "Update actions/cache action to v3.2.6",
  "dba8c80": "Update actions/cache action to v3.2.6",
  "d3ebe96": "Update actions/cache action to v3.2.6",
  "2f7ad24": "Update actions/cache action to v3.2.5",
  "85f2008": "Update actions/cache action to v3.2.5",
  "cb02c95": "Update actions/cache action to v3.2.5",
  "2d14e9d": "Update actions/cache action to v3.2.4",
  "ea24e05": "Update actions/cache action to v3.2.4",
  "8ce199b": "Update actions/cache action to v3.2.4",
  "7462c46": "Update dependency com.fasterxml.jackson:jackson-bom to v2.14.2",
  "60f9e09": "Update dependency com.fasterxml.jackson:jackson-bom to v2.14.2",
  "be890ea": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.5",
  "d72e525": "Update actions/cache action to v3.2.3",
  "e40b1fa": "Update actions/cache action to v3.2.3",
  "e65bbf7": "Update actions/cache action to v3.2.3",
  "f00d388": "Update actions/cache action to v3.2.2",
  "2615c9a": "Update actions/cache action to v3.2.2",
  "2fb095f": "Update actions/cache action to v3.2.2",
  "d9b4945": "Update actions/cache action to v3.2.1",
  "bf271c6": "Update actions/cache action to v3.2.1",
  "0464df5": "Update actions/cache action to v3.2.1",
  "224cd23": "Update actions/cache action to v3.2.0 (#6373)",
  "0ab5a0a": "Update actions/cache action to v3.2.0 (#6374)",
  "123f0fe": "Update actions/cache action to v3.2.0 (#6372)",
  "7ede0d7": "Update dependency com.fasterxml.jackson:jackson-bom to v2.14.1 (#6254)",
  "e9456b2": "Update dependency com.fasterxml.jackson:jackson-bom to v2.14.1 (#6253)",
  "555a851": "Update dependency com.fasterxml.jackson:jackson-bom to v2.14.0 (#6179)",
  "2d82341": "Update dependency com.fasterxml.jackson:jackson-bom to v2.14.0 (#6178)",
  "b4be90e": "Update actions/cache action to v3.0.11 (#6088)",
  "11b1546": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4.20221013 (#6087)",
  "d605cd9": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4.20221013 (#6081)",
  "26b6090": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4.20221013 (#6083)",
  "3b5665b": "Update actions/cache action to v3.0.11 (#6082)",
  "94986ea": "Update actions/cache action to v3.0.11 (#6080)",
  "15bcb4d": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4.20221012 (#6072)",
  "ac578df": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4.20221012 (#6070)",
  "9c6758d": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4.20221012 (#6071)",
  "4cecfd7": "Update actions/cache action to v3.0.10 (#5997)",
  "195c7cc": "Update actions/cache action to v3.0.10 (#5998)",
  "be455a7": "Update actions/cache action to v3.0.10 (#6000)",
  "0d43813": "Update actions/cache action to v3.0.9 (#5969)",
  "484a510": "Update actions/cache action to v3.0.9 (#5983)",
  "f4013ee": "Update actions/cache action to v3.0.9 (#5961)",
  "f61fbe4": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4 (#5805)",
  "42bf94b": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4 (#5807)",
  "876c630": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.4 (#5804)",
  "df79d62": "Update actions/cache action to v3.0.8 (#5760)",
  "8316fb3": "Update actions/cache action to v3.0.8 (#5757)",
  "7d30ce0": "Update actions/cache action to v3.0.8 (#5754)",
  "b6a0671": "Update actions/cache action to v3.0.7 (#5704)",
  "896d983": "Update actions/cache action to v3.0.7 (#5701)",
  "4aaeb08": "Update actions/cache action to v3.0.7 (#5699)",
  "0aa19f0": "Update actions/cache action to v3.0.6 (#5678)",
  "0180be4": "Update actions/cache action to v3.0.6 (#5679)",
  "81932ed": "Update actions/cache action to v3.0.6 (#5677)",
  "9ef521b": "Update actions/cache action to v3.0.5 (#5526)",
  "37afc9a": "Update actions/cache action to v3.0.5 (#5524)",
  "c30f368": "Update actions/cache action to v3.0.5 (#5522)",
  "4883ba1": "Pin actions/cache action to c3f1317 (#5421)",
  "3d2fa64": "Pin actions/cache action to c3f1317 (#5422)",
  "ddbea84": "Update actions/cache action to v3.0.4 (#5397)",
  "522ba07": "Update actions/cache action to v3.0.4 (#5393)",
  "76b25fd": "Update actions/cache action to v3.0.4 (#5392)",
  "b7686ce": "Update actions/cache action to v3.0.3 (#5354)",
  "f8937b9": "Update actions/cache action to v3.0.3 (#5351)",
  "4bc3e95": "Update actions/cache action to v3.0.3 (#5352)",
  "a899f70": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.3 (#5300)",
  "936cbed": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.3 (#5296)",
  "4192f96": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.3 (#5293)",
  "4ded902": "Update actions/cache action to v3.0.2 (#5153)",
  "a0ad328": "Update actions/cache action to v3.0.2 (#5155)",
  "a7c7515": "Update actions/cache action to v3.0.2 (#5147)",
  "99b654b": "Disable built-in cache of `setup-java` action",
  "9668afd": "Disable built-in cache of `setup-java` action",
  "f87adce": "Disable built-in cache of `setup-java` action",
  "92eff5a": "Update actions/cache action to v3.0.1 (#5064)",
  "287654f": "Update actions/cache action to v3.0.1 (#5069)",
  "c7601b7": "Update actions/cache action to v3.0.1 (#5060)",
  "240d95a": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2.20220328 (#5054)",
  "d6ef136": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2.20220328 (#5056)",
  "151cc56": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2.20220328 (#5055)",
  "60d34c7": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2.20220324 (#5034)",
  "5b3ab52": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2.20220324 (#5033)",
  "2d80bcf": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2.20220324 (#5032)",
  "0e5172f": "Update actions/cache action to v3 (#5020)",
  "21c4dbc": "Update actions/cache action to v3 (#5017)",
  "3bcd223": "Update actions/cache action to v3 (#5015)",
  "951fc42": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2 (#4911)",
  "765ceef": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2 (#4913)",
  "d3f7ed9": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.2 (#4912)",
  "82f6332": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.1 (#4520)",
  "6fb4875": "Merge pull request #4445 from dropwizard/renovate/release/2.1.x-actions-cache-2.x",
  "ec88397": "Merge branch 'release/2.1.x' into renovate/release/2.1.x-actions-cache-2.x",
  "9be7f09": "Update actions/cache action to v2.1.7",
  "76da81b": "Merge pull request #4442 from dropwizard/renovate/master-actions-cache-2.x",
  "c9fb5a0": "Merge pull request #4444 from dropwizard/dependabot/github_actions/actions/cache-2.1.7",
  "e1ebb48": "Bump actions/cache from 2.1.6 to 2.1.7",
  "3641ac3": "Update actions/cache action to v2.1.7",
  "34eac84": "Merge pull request #4360 from rhowe/faster-servlets-tests",
  "32bf740": "Update dependency com.fasterxml.jackson:jackson-bom to v2.13.0 (#4317)",
  "9feff82": "Update dependency com.fasterxml.jackson:jackson-bom to v2.12.5 (master)",
  "ad6af9c": "Update dependency com.fasterxml.jackson:jackson-bom to v2.12.4 (master) (#4111)",
  "073eac0": "Bump actions/cache from 2.1.5 to 2.1.6 (#4010)",
  "4b39d3d": "Bump actions/cache from v2.1.4 to v2.1.5 (#3872)",
  "c5a0a0c": "Fix incorrect cache behavior in AssetServlet (#3736)",
  "6cfe77a": "Support clearing the GitHub workflow cache (#3787)",
  "7baf299": "Bump actions/cache from v2.1.3 to v2.1.4 (#3684)",
  "dbd3af3": "Bump actions/cache from v2.1.2 to v2.1.3 (#3560)",
  "2cc0d74": "Bump actions/cache from v2.1.1 to v2.1.2 (#3498)",
  "77e0813": "Bump actions/cache from v1 to v2.1.1 (#3487)",
  "5985860": "Export cache stats in CachingAuthorizer and CachingAuthenticator (#3360)",
  "9220fc2": "Add CachingAuthenticator option to enable negative caches (#3191)",
  "a5a98b0": "Add cache action to Maven workflow (#3013)",
  "a15db39": "Merge pull request #2777 from dropwizard/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.9.9",
  "dc5c8dc": "Merge pull request #2575 from isaki/cache_auth_test_fix",
  "005636f": "Fix extra slow ci throttling tests",
  "17db32e": "Mark PermissiveEnumDeserializer as cacheable (#2446)",
  "b008298": "chore: Don't pre-cache dependencies on CircleCI",
  "2c1609b": "Constraint validation caches error prefixes (#2246)",
  "1d5b7a8": "Merge pull request #1816 from dropwizard/mustache_cache_tests",
  "8b90d67": "Merge pull request #1615 from pkwarren/loading_cache_authenticator",
  "da52127": "Use cached thread pool in JerseyIgnoreRequestUserAgentHeaderFilterTest",
  "76cdd1c": "Merge pull request #1165 from dropwizard/jp-travis-cache",
  "a21ce52": "Use Guava cache than ConcurrentHashMap #1039",
  "60e2ae3": "Update caching implementation to not cache absent values.",
  "7894025": "Revert 'Only cache present values in the CachingAuthenticator. Fixes #947'",
  "fdc29d6": "Only cache present values in the CachingAuthenticator. Fixes #947",
  "eecffee": "Enhenced Jackson#newObjectMapper to take an custom provided instance of com.fasterxml.jackson.core.JsonFactory. This allows further customizations of the ObjectMapper.",
  "09aed9e": "Updating httpclient to 4.3.4. Improved performance under high concurrency.",
  "765483c": "Create parent directories and fail fast",
  "1899db1": "Allow discarding any cached principal for a collection of credentials satisfying a given predicate.",
  "525f04a": "Updated docs to new Servce api and removed AssetBundle cache example: cache has been removed",
  "f714db4": "Added support for cache and flush modes.",
  "879a299": "Fix cache spec in docs.",
  "52453f5": "Switch CachingAuthenticator to using cache builder specs.",
  "392a4b2": "Switch AssetsBundle and servlet to using cache builder specs.",
  "9939618": "Simple Last-Modified impl and cached etag",
  "801b34a": "Document the cache-control stuff.",
  "15e37f0": "Drop the compiler plugin and optimizations for Scala.",
  "07b2015": "Expose the max cache size."
}, "druid": {
  "51dff15": "update fastjson2 version",
  "e33b10b": "update fastjson version",
  "e0be6f5": "update fastjson version",
  "bb9cea8": "update fastjson2 version",
  "5d57c69": "update fastjson version",
  "f5f8b09": "update fastjson2 version",
  "0f8e831": "update fastjson version",
  "1d5a026": "update fastjson version",
  "b3c90e2": "Update fastjson version",
  "3bfd96b": "Update dependency version of fastjson",
  "a262865": "backport sql parser improved from fastsql",
  "da8d80b": "backport sql parser improved from fastsql",
  "b79edab": "backport sql parser improved from fastsql",
  "9aa1798": "bug fixed for fail fast.",
  "2edd534": "improved init performance.",
  "643c34d": "improved get statdata performance.",
  "57cd092": "improved oracle pscache error handle.",
  "a983b26": "improved parser performance.",
  "c370d70": "improved sql parser performance.",
  "5804eea": "improved parser performance.",
  "145d3d3": "improved performance for large parameters.",
  "94638ad": "bug fixed for pscache, if preparedStatement throw exception, removed from pscache. issue #1052",
  "5892051": "improved ParameterizedOutputVisitorUtils performance.",
  "f8987af": "Merge pull request #1259 from agapple/druid_failfast_optimizer",
  "8c3cdb9": "optimizer fail-fast",
  "b515184": "bug fixed for DruidDataSource fast-fail",
  "965c923": "bug fixed for DataSource fail-fast.",
  "43d13ff": "bug fixed for DruidDataSource fail-fast",
  "2a48c90": "improve unpooled statement's performance",
  "a12cf7a": "remove mysql ps-cache warnnings",
  "9175690": "improve proxy performance",
  "048b6af": "improve ResultSetProxyImpl performance",
  "7aa2038": "improve sql parser performance",
  "368a3b3": "improve sql parser performance",
  "fb7230c": "improve mysql sql parser performance",
  "e7d570d": "improve performance",
  "2c25af9": "improve sql parser performance",
  "00341b5": "change performance testcase, add proxool/tomcat-jdbc",
  "78751d1": "StatFilter add getter & setter for logSlowSql, slowSqlMillis",
  "fbbee2c": "Use String.indexOf(char) when checking for the index of a single character; it executes faster.",
  "7cea73b": "remove fastjson dependency",
  "a530c90": "remove fastjson dependency",
  "66cb1de": "bug fixed pscache",
  "705552e": "add pscache testcase",
  "bae9ffc": "cache the reflect class and reflect method.",
  "b272bfd": "cache the reflect class and reflect method.",
  "e5365ea": "update the slowSqlView function",
  "123a4b8": "StatViewServlet sql view :parser optimization",
  "ea335a7": "StatViewServlet sql view :parser optimization",
  "fd9774c": "use fastjson",
  "cd632cd": "slow sql parameter record",
  "5cdd99d": "change fastjson version",
  "c31d092": "bug fixed : mysql performance",
  "e4456b9": "use fastjson 1.1.12",
  "8f6bcf8": "修正cache preparedStatement的问题",
  "3d2f627": "修正cache preparedStatement的问题"
}, "DSA-Bootcamp-Java": {
  "": ""
}, "DSBridge-Android": {
  "": ""
}, "dubbo": {
  "2277c58": "Bump fastjson2 from 2.0.31 to 2.0.32 (#12366)",
  "35fdf9d": "optimize performance for MetricsFilter (#12329)",
  "86b5a3e": "Bump fastjson2 version from 2.0.29 to 2.0.31 (#12250)",
  "fb00a8a": "Follow #11262, disable cache (#12171)",
  "6e22996": "Bump fastjson2 from 2.0.28 to 2.0.29 (#12177)",
  "9aa6a9e": "Bump fastjson2 from 2.0.27 to 2.0.28 (#12110)",
  "87d1b1f": "Bump fastjson2 from 2.0.23 to 2.0.27 (#12049)",
  "5587b1c": "Bump cache-api from 1.0.0 to 1.1.1 (#12005)",
  "16c031a": "chore: some tracing-related optimizations (#11924)",
  "7b9e65e": "Revert 'optimize performance. decode in user thread (#11879)' (#11917)",
  "95865b0": "optimize performance. decode in user thread (#11879)",
  "d061b29": "Some code optimization (#11825)",
  "d0b98b3": "improve NacosNamingServiceWrapper performance (#11665)",
  "ed9e26f": "Code optimization (#11683)",
  "4be3c79": "optimize the multi params request performance of triple in wrap mode (#11672)",
  "5d07038": "Metrics RT count optimization (#11628)",
  "d57ad31": "Migration bugfix & optimization (#11629)",
  "c5a03c9": "Rest bugfix & optimization (#11617)",
  "186fd5c": "metric package structure optimization (#11576)",
  "fbf8681": "Rename file cache to prevent being duplicated with CacheFilter (#11530)",
  "0eb0e01": "Modifier optimization, add 'final' modifier. (#11503)",
  "937dcfe": "Bump xmemcached from 1.3.6 to 1.4.3 (#11486)",
  "cdc2d85": "metrics code optimization (#11352)",
  "d2eb0ef": "[ISSUE #11294] Optimize ConcurrentHashMap#computeIfAbsent have performance problem in jdk1.8 (#11326)",
  "945914b": "Support fastjson2 in native case (#11325)",
  "e0971ed": "Update fastjson2 version (#11305)",
  "ba36805": "Update fastjson2 to 2.0.21 (#11131)",
  "0108dd5": "Fix timeout being cached in InstanceAddressURL (#11041)",
  "029b15f": "optimization-netty-server (#11123)",
  "1470c7c": "Cache jvm system parameters to prevent each call from being executed, affecting performance (#10839)",
  "6118dd8": "Update fastjson2 version (#11039)",
  "fd103b7": "Remove fastjson and gson transitive dependency (#10792)",
  "400f756": "Avoid getting the whitelist every time and causing performance degradation (#10775)",
  "4310ea8": "issue 10558: optimize performance for triple protocol(3.2) (#10587)",
  "348e316": "issue 10727: optimize performance for `dubbo` protocol (#10728)",
  "bfbf761": "Add error code 0-5, and more code of issuing error code 0-3, with code optimization. (#10598)",
  "4206b5e": "Spell and code style optimization. (#10634)",
  "9ab939e": "Add error code 0-4 with code optimization. (#10568)",
  "1643bf3": "Add error code 0-3, and expose actual 'exception' of creating or deleting files in file cache merchanism. (#10538)",
  "7359a98": "Add some code about error code 1-1, 4-1 with code optimization. (#10500)",
  "f7e87c1": "Add some test cases and optimizations (#10481)",
  "c84b745": "DisableCircularReferenceDetect for fastjson impl (#10447)",
  "6822b23": "Try to get it from the cache before generating the referenceKey (#10173)",
  "213944c": "Add code that shows error code 2-2, 1-9, 5-1 with code optimization. (#10452)",
  "d6a1ff4": "[3.0] Add class not found cache for PojoUtils (#10245)",
  "bf882c1": "Perf(MataCacheManager):Remove cache initialization (#10211)",
  "7a33ddf": "fix #10171, Code optimization (#10190)",
  "ab63595": "[optimization]RestProtocol opt, share client pool among services and avoid potential memory leak. (#10023)",
  "67e36cd": "[3.0] Improve compressed URL param performance (#10125)",
  "b4b0aab": "Update fastjson to 1.2.83 (#10099)",
  "95823fd": "improve performance (#9931)",
  "e4b4306": "Enable mvn cache (#9889)",
  "225c208": "[3.0] Optimize Converter to cache (#9861)",
  "e34797c": "Code optimization and fix typo (#9840)",
  "32d19a0": "[3.0] Directory log optimization (#9821)",
  "0b3f1f2": "[3.0] mapping report log optimization. (#9828)",
  "d41a044": "Fix integration test cache (#9795)",
  "8872817": "optimization of metadata fetching process (#9754)",
  "e979803": "refactor: Optimize performance (#9578)",
  "8d852ff": "Fix ServiceInstancesChangedListenerTest and some code optimizations (#9604)",
  "f1ec4a6": "[3.0] Fix cached configuration not work (#9581)",
  "c8384f2": "Code adjustment and optimization of config-api/common module (#9329)",
  "abce73d": "[3.0] Fix RouterSnapshot not build when disable route fail fast (#9390)",
  "312dd2b": "[3.0] Add router fail fast option (#9388)",
  "0ae2ccc": "optimization MigrationInvoker promotion (#9270) (#9271)",
  "4ea9fea": "[3.0] Cache hashCode of URL to improve hash performance (#9220)",
  "40bd0ca": "change cache key #9076 (#9154)",
  "3a10780": "Add unit test and some optimizations (#8945)",
  "711c323": "An optimization of generic invocation in gson format (#8924)",
  "4d42765": "Add ClassLoaderResourceLoader to cache ClassLoader's resources (#8866)",
  "118d168": "[3.0] Enhance FailfastClusterInvokerTest unit test (#8864)",
  "a118292": "fix optimization field scope (#8751)",
  "d3f7ab4": "[3.0] string judge optimization (#8747)",
  "26152d8": "fix issue-8695:DefaultFuture turn off logging optimization for Channel (#8775)",
  "f55a115": "Fix typo and some optimizations (#8499)",
  "0b067c6": "Use StringBuilder#append(Char) to improve performance (#8169)",
  "9279c78": "perf: Improve the performance for generating random numbers (#8167)",
  "39292a0": "Optimize performance & Fix some potential bugs (#8155)",
  "96680dd": "add cache for scan result. (#8049)",
  "97aec36": "fix addr cache bug (#7833)",
  "1899389": "fix cache was deleted when startup (#7484)",
  "18eb598": "[3.0] Optimization about memory performance (#7625)",
  "8e5eac1": "fix cache Class avoid PermGen space OOM in dubbo3.0 (#7386)",
  "c3e432c": "fix reference cache (#7412)",
  "cf78a56": "fix memory leak for stringAddress cache (#7144)",
  "bcc9513": "performance tuning, fix cache registry url creation bug (#6914)",
  "d8fc808": "performance tuning, reduce mem allocation of address URLs on consumer side (#6911)",
  "d95aa7e": "make sure dynamic configuration is included after globalConfiguration is cached.",
  "dbc4530": "migration optimization (#6665)",
  "fbe4d7e": "upgrade fastjson to 1.2.70 (#6254)",
  "4dd5a0d": "lfu cache (#5734)",
  "c6b9d6a": "upgrade fastjson to 1.2.68 (#5941)",
  "7dbe632": "some code optimization for ClassGenerator.java and DubboMonitor.java (#5746)",
  "70f7216": "upgrade fastjson to 1.2.67 (#5914)",
  "cd55cd7": "add a switch to turn off cache URLs locally (#5804)",
  "0438ee7": "optimize : put single-quotes around ':' to use the faster 'indexOf(char)' method. (#5585)",
  "7a90ab9": "code optimization (#5486)",
  "44e935f": "[performance tuning] Simple performance optimization (#5430)",
  "0ebbeab": "[performance tuning] precompile parameters pattern (#5448)",
  "764b110": "concurrent cache bug fix (#5043)",
  "39f84fe": "Merge branch 'master-merged-performance-cloudnative'",
  "055f1cc": "[Dubbo-4871] fix cache file name issue in windows platform (#5158)",
  "62e204e": "Merge branch 'cloud-native' into master-merged-performance-cloudnative",
  "d124f71": "Merge branch 'merge-3.x' into master-merged-performance-2.7",
  "13ddecb": "Apollo config center optimization, use 'dubbo.properties' as default namespace for properties. (#5105)",
  "b89df9d": "Optimization after merged performance tuning branch",
  "087e8cc": "Security issue: upgrade fastjson version to 1.2.60 (#5018)",
  "101c5ec": "dubbo zookeeper registry too slow (#4880)",
  "0872090": "Merge branch 'performance-tuning-2.7.x'",
  "1173b40": "[Dubbo-4556] fix dubbo startup is slow (#4603)",
  "214ec1f": "[Dubbo-4575] Upgrade to use fastjson 1.2.58 (#4579)",
  "8534f48": "Observation of performance degradation when running under JDK 8 (#4381)",
  "69ebea0": "Merge remote-tracking branch 'origin/performance-tuning-2.7.x' into performance-tuning-2.7.x",
  "356a2f5": "cache service key (#4255)",
  "276c0a3": "performance tuning: avoid duplicate channel status check (#4254)",
  "faec551": "performance tuning: Applicationmodel revert (#4245)",
  "086949c": "performance tuning: getMethodparameter refactor (#4244)",
  "b5a078f": "performance tuning: save rpcinvocation allocation (#4215)",
  "d767488": "performance tuning: avoid address resolve (#4220)",
  "0d0ad0a": "performance improve for DefaultFuture and AsyncToSyncInvoker (#4085)",
  "003e400": "Async optimization (#3738)",
  "3b145c7": "fix fastjson serialization with generic return type (#3771)",
  "cad253a": "extract method to cache default extension name (#3456)",
  "215ed36": "code optimization (#3297)",
  "e095bd9": "code optimization (#3167)",
  "e6b340d": "Merge branch '2.7.0-release' into ConfigCenter-optimization",
  "f36bed9": "Code optimization (#3118)",
  "f081421": "Merge branch '2.7.0-release' into ConfigCenter-optimization",
  "e981dca": "Merge branch 'master' into ConfigCenter-optimization",
  "66fbb3c": "Config optimization. 1. add ConfigManager 2. Reference/Service hold reference of ConfigCenterConfig 3. change from-spring to include-spring-env",
  "e172b29": "Replace hard coded dubbo-config-api values and small code optimization (#3108)",
  "9897aa3": "remove appConfigs cache to support one service/reference registered more than one time (if users don't explicitly add id, cache can not work properly)",
  "6007fd3": "Optimize service governance: 1. avoid duplicate notification of application level override rule 2. remove route cache 3. support sub menu in ops for router and configurator",
  "1bebd2d": "Fix problems in Configuration: remove cache usage in startupCompositeConfiguration.",
  "6140bc2": "Fix concurrent problem of zookeeper configcenter, wait to start until cache being fully populated.",
  "1646e6c": "Enhancements for router chain: 1. make route cache building in RouterChain thread-safe. 2. clear generated routers when urls change. 3. clear invokers in route cache when provider list in notification is empty. 4. add name for each router.",
  "7e5f080": "remove travis cache (#2481)",
  "927a7e5": "Fix router problems: 1. TagRouter change from global to Application level 2. Add tag rule and condition rule support 3. Fix problem when building RouterChain 4. Change logic of getting invokers from router cache.",
  "2b80c3e": "fix route cache issue, can run",
  "6ebc183": "#2188 ConsistentHashLoadBalance selectForKey can optimization (#2190)",
  "a6d8f1c": "#1597: CacheFilter,when value is null,it will throw NPE(if use ehcache for jcache),why not check null here (#1828)",
  "7c21627": "Merge pull request #1643, ChannelState branch prediction optimization.",
  "04eacfe": "New threadLocal provides more performance. (#1745)",
  "6784375": "add test for serialization api & fastjson & fst module (#1718)",
  "9e9e778": "Optimize_hessian_desr_performance (#1705)",
  "d770d92": "[Dubbo-#1362] cache provider always lru cache (#1396)",
  "89b4771": "Tuning spring event performance (#969)",
  "be965bf": "Merge pull request #762 from chickenlj:bugfix#685_registrycache",
  "209aecf": "Merge pull request #776 from chickenlj:json_to_fastjson",
  "b6e30af": "update for fastjson (#607)",
  "80113d2": "bump up fastjson's version",
  "d439515": "upgrade slf4j & logback & fastjson",
  "e3c0b0d": "修改抛出的异常信息，把memecached改为redis，代码135行和167行 (#242)",
  "17becc2": "update fastjson to 1.1.39",
  "e552266": "DUBBO-400 增加memcached协议示例",
  "4fc4b00": "DUBBO-399 修改memcached异常",
  "47f17c2": "DUBBO-399 修改memcached异常",
  "e8701bd": "DUBBO-399 开源memcached协议",
  "9a89002": "修改cache接口",
  "e6d3d53": "修改cache接口",
  "1efc91d": "DUBBO-241 增加cache示例",
  "2b18e5f": "DUBBO-241 修改cache常量",
  "4736756": "增加cache和validation参数",
  "587d0cb": "DUBBO-241 增加声明式cache",
  "0616c54": "增加jcache依赖",
  "7037270": "增加jcache依赖",
  "9926c57": "DUBBO-13 对class.forname增加cache,将所有ClassLoader相关方法设为private",
  "4ccfb4f": "add cache for ReflectUtils DUBBO-13",
  "20ebbf6": "fastjson version 1.1.6 -> 1.1.8"
}, "dubbo-spring-boot-project": {
  "": ""
}, "dynamic-datasource-spring-boot-starter": {
  "": ""
}, "dynamic-load-apk": {
  "39eccf0": "promote so copy performance"
}, "easyexcel": {
  "67196ba": "update cache",
  "4514b55": "升级fastjson",
  "592291d": "CONTRIBUTING.md docs easyexcel easyexcel-core easyexcel_en.md easyexcel-support easyexcel-test img LICENSE lombok.config mvnw mvnw.cmd pom.xml quickstart.md README_EN.md README.md src style update.md 修复ehcache缓存在目录/tmp被系统清理导致异常",
  "2895318": "升级fastjson版本，升级到最新的2.0.3版本",
  "7e0bd5d": "CONTRIBUTING.md docs easyexcel easyexcel-core easyexcel_en.md easyexcel-support easyexcel-test img LICENSE lombok.config mvnw mvnw.cmd pom.xml quickstart.md README_EN.md README.md src style update.md 升级ehcache 到 3.9.9 ,为了兼容jdk17",
  "088ebe4": "升级fastjson版本",
  "0eca95d": "升级fastjson版本",
  "f546940": "Merge pull request #872 from pdkst/feature/longest_match_cache_remove_static_bug",
  "4b8564c": "Merge branch '2.1.x' into feature/longest_match_cache_remove_static_bug",
  "bca0fd8": "将缓存改为ehcache"
}, "easypermissions": {
  "": ""
}, "easy-rules": {
  "4ba3d2b": "use MVEL compiled expressions for better performance",
  "d58a258": "A little optimization in RuleProxy.java (#94)",
  "cc72173": "- replace stubs with mocks - remove Thread.sleep(5000) since it slows down test execution"
}, "EdXposed": {
  "9553af5": "Move sandhook cache to /data/misc",
  "8c838c6": "Enable yahfa's cache",
  "6dd10b1": "Flush CPU cache in YAHFA",
  "1b67e7c": "SandHook: remove useless code & fix dex cache",
  "a857670": "Temporary fix for hooker method index exceeding method cache size",
  "9a0044b": "Add a switch to enable boot image deoptimization selectively"
}, "EffectiveAndroidUI": {
  "": ""
}, "effective-java-3e-source-code": {
  "": ""
}, "EhViewer": {
  "c326adf": "Remove image cache after refreshing",
  "a69f36b": "Don't cache gif while reading",
  "b973e02": "Add gallery image cache",
  "492d483": "Request again if image missing in cache",
  "56cfc06": "Add set read cache max size",
  "ed67831": "Add clearing memory cache",
  "2aadad4": "Add clear download path cache",
  "37bec12": "Clear cache onTrimMemory",
  "3612883": "Make thumb cache key as first large preview cache key",
  "4aa21ba": "Store spider info file in cache",
  "63a2f9e": "Try to copy image from cache to download dir when getting image from download dir",
  "e9f51e2": "Add clear image memory cache",
  "101b1cf": "Maybe fix cache issue",
  "6fcbdc2": "Remove cache pause",
  "a69be45": "Fix disk cache key",
  "4985945": "Update cache",
  "6d8d16d": "Adjust cache",
  "497438c": "Adjust cache",
  "ce29076": "更换 cache，更换图片获取方式，建立 previewlist 类，移除不需要的类"
}, "Ehviewer_CN_SXJ": {
  "dd411b6": "optimization：批量读取阅读进度使用单独线程进行，优化下载列表滑动操作流畅度"
}, "eladmin": {
  "9015cae": "fastjson 升级到 1.2.83 后需要指定序列化白名单",
  "3ed5383": "fastjson 版本升级到 1.2.83",
  "931ecb3": "Fix cache by future (#652)",
  "3b802fd": "fix:A custom permission role does not refresh the DataScope cache after adding subdepartments to a department (#608)",
  "0b83ca0": "fix findByDeptRoleId sql in UserRepository when delete dept cache (#572)",
  "1556f13": "[代码优化](v2.6)：使用 fastJson 防止 Long 精度丢失",
  "81dd91f": "[代码优化](v2.6)：由于系统现在默认使用 fastjson 序列化，导致了 @JsonIgnore 失效，现使用 @JSONField(serialize = false) 替换",
  "47a9179": "[代码完善](v2.5): update dict cache",
  "a0a1283": "[代码完善](v2.5): update menu、dept cache",
  "3d53a3a": "[代码完善](v2.5): v2.5 beta 更新 fastjson 版本，代码优化"
}, "elasticsearch": {
  "eb95e1f50": "Small optimization of the looping in ingest's remove processor (#96202)",
  "bb3ef551b": "Cancel cold cache prewarming tasks if store is closing (#95891)",
  "2b210b522": "Fix paralle detector configuration cache compatibility (#95452)",
  "8763e2c2a": "Allow instantiating shared cache on indexing nodes (#95446)",
  "025b8ee66": "Revert 'Make ParallelDetector Gradle configuration cache compliant (#95434)'",
  "4fc6dda21": "Make ParallelDetector Gradle configuration cache compliant (#95434)",
  "3019796e7": "Revert 'Remove shortcutTotalHitCount optimization (#89047)' (#94876)",
  "56633e0a2": "Modularize blob cache and searchable snapshots (#94751)",
  "a76affd76": "Make FsBlobContainer atomic moves actually atomic and faster (#94674)",
  "315fa321a": "Improve efficiency of packer cache script (#94701)",
  "dc726e60a": "Allow ILM to transition to implicit cached steps (#91779)",
  "a538c2914": "Tweak Test error reporting handling to be configuration cache compliant (#94460)",
  "40f1d4419": "Give search nodes same cache defaults as frozen (#94032)",
  "b8c32d156": "Right-sized maps in AsyncFetch cache (#94139)",
  "50494bad4": "Extract more code from frozen to shared blob cache module (#93786)",
  "37fc69532": "Extract aligned write logic from searchable snapshots into blob cache module (#93592)",
  "283f8acd9": "Remove shortcutTotalHitCount optimization (#89047)",
  "922901100": "[DOCS] Adds size parameter details to aggregating data for faster performance page (#93475)",
  "51e0a3bd2": "[ML] improve frequent_items performance by using global ordinals (#93304)",
  "37c510c9e": "Script: Metadata validateMetadata optimization (#93333)",
  "f49b520b8": "[H3] Minor optimization in creating Vec2d objects (#93166)",
  "649a5d751": "Bounds inflation performance and unit tests (#92901)",
  "f60d614dc": "Remove Gradle read-only cache registration",
  "2f8476e19": "Temporarily disable the use of read-only dependency cache",
  "622746ab4": "Use rsync for creating the read-only cache as it's more reliable",
  "3add0b234": "Fix reference to location of read-only Gradle dependency cache (#92852)",
  "b9a461a6b": "Extract frozen cache infrastructure to separate module (#92714)",
  "bbb557b2a": "Minor cleanups frozen cache codebase (#92715)",
  "df8ccceb5": "[TSDB] Improve downsampling performance by removing map lookups (#92494)",
  "c40f45b87": "Unsafe bootstrap memory optimization (#92493)",
  "8c77fe5ba": "Improve performance for role mapping with DNs (#92074)",
  "37988dd09": "Ensure cached time elapses in ClusterServiceIT (#91986)",
  "6b7e8ffea": "Disable filter by filter optimization when agg context requires in sort order execution (#91702)",
  "6d245a629": "Avoid potential unsupported operation exception in doc bitset cache (#91490)",
  "6e60e6ac9": "Fix performance regressions in Strings utility (#91462)",
  "a39a18b2c": "Removed note saying DLS/FLS disable shard request cache (#90885)",
  "c24a2cab7": "Fix performance regression caused by cancellation check in vector scripts (#90804)",
  "db2882cbb": "[DOCS] Add links to clear trained model deployment cache API (#90727)",
  "f746450fb": "Small optimization to RecoveryState heap size (#90501)",
  "17579ae1a": "[ML] Add stat for non cache hit inference time (#90464)",
  "ce8232331": "Add fast copy-constructor for adding index to Metadata (#87863)",
  "ded941373": "[TSDB] Improve downsampling performance by using tsid ordinals (#90088)",
  "1f1ac13c4": "Improve parsing performance for `aggregate_metric_double fields` (#80685)",
  "e24447396": "[DOCS] Reworks aggregating data for faster performance page (#89575)",
  "64ccf049c": "Fork to MANAGEMENT for ILM cache cleanup operations (#89458)",
  "254e6bcab": "Remove needless optimization ShardRouting.asList (#89179)",
  "f3659a64c": "Remove redundant and slow null token check from KeywordFieldMapper (#89168)",
  "d588d456f": "[ML] add new trained model deployment cache clear API (#89074)",
  "8c21d03f7": "[ML] Move PyTorch request ID and cache hit indicator to top level (#88901)",
  "713657f11": "Fix slow assertion running in production in RoutingNodes (#88951)",
  "b4b68c87e": "Bring back lost optimization to building metadata from a diff (#88950)",
  "7382fa3a3": "[Doc] Precise that shared cache is shared across shards, not nodes (#88834)",
  "15e7b06b7": "[ML] Add inference cache hit count to inference node stats (#88807)",
  "1ce64290a": "Add package cache to EmbeddedImplClassLoader (#88537)",
  "7afbdcf59": "TSDB: Improve RollupShardIndexer performance (#88539)",
  "d6e5c29e2": "Recommend `ssha256` cache hasher in FIPS docs (#87255)",
  "afa28d49b": "[ML] add new cache_size parameter to trained_model deployments API (#88450)",
  "9a0f05f95": "[Transform] Finetune Schedule to be less noisy on retry and retry slower (#88531)",
  "9fffd789e": "[ML] performance improvement for precompiled normalization (#87709)",
  "5f04ad503": "Fix lost optimization from merge conflict in building metadata from diff (#88497)",
  "dbf39741a": "Make LoggedExec gradle task configuration cache compatible (#87621)",
  "b1070d3ad": "Fix performance regression in DataTierAllocationDecider (#88340)",
  "63e6340b1": "[ML] add new optional cache_hit field for pytorch results (#88287)",
  "7930d98bc": "Use faster maths to project WGS84 to mercator (#88231)",
  "97df136b8": "Optimize log cluster health performance. (#87723)",
  "ca4f3a3ee": "Run gradle integration tests with configuration cache enabled by default (#88148)",
  "ff6604f1e": "Use a faster but less accurate log algorithm for computing Geotile Y coordinate (#87515)",
  "6847c0b7f": "[ML] improve trained model stats API performance (#87978)",
  "12525adf8": "Add easier configuration cache test support in build logic tests (#88047)",
  "1cbb1353b": "Make AsyncPersistedState.resetVotingConfiguration fast (#88050)",
  "6039e2f9f": "More tests for filter-by-filter fast paths (#87857)",
  "065a9d495": "Fix optimization in BalancedShardsAllocator (#87843)",
  "8357e5dbb": "Make DiskThresholdDecider a little faster (#87821)",
  "95d56cc26": "Fix configuration cache compatibility issues in gradle plugins (#87567)",
  "96824433c": "Add error message when searchable snapshot cache wasn't cleared (#87503)",
  "35b48729b": "Log warning when cache hasher not compliant with FIPS (#86740)",
  "01a3af096": "Minor RangeAgg optimization (#86935)",
  "346abf981": "Improve 'Has Privilege' performance for boolean-only response (#86685)",
  "e966f21a4": "Fix clearing of lastSuccessfulAuthCache when clear all realm cache API is called (#86909)",
  "017bf7ff9": "Use faster and cleaner map parsing loop in ObjectParser.parse (#86319)",
  "0eda6270f": "Use faster and smaller maps in MappingLookup (#86380)",
  "4d7a516da": "Correct docs on DLS bitset cache default values (#86282)",
  "689e62877": "Improve min and max performance while in a random_sampler aggregation (#85118)",
  "71c4c68c6": "Check if searchable snapshots cache pre-allocation is successful in Windows (#86192)",
  "655c692a4": "Remove special rejection handling in Cold/Frozen cache services (#85775)",
  "ef0697efc": "Make FieldMapper.parse inline better and slightly faster (#85684)",
  "03ef385c3": "Reduce logging for cache file synchronization failures (#85331)",
  "0e8646c69": "Ignore frozen shared cache file during data folder upgrades (#85638)",
  "4a3f9bbf1": "Fix skip caching factor with indices.queries.cache.all_segments (#85510)",
  "50306fa62": "Give Lucene more opportunities to enable the filter-by-filter optimization. (#85322)",
  "579695d03": "Update nebula plugins improving configuration cache support (#85316)",
  "947f88b1e": "Don't apply the rewrite-as-range optimization if field is multivalued (#84535)",
  "070dec460": "Add JWT cache to JWT realm. (#84842)",
  "1e6b30ee1": "[TEST] Precache LDAP authentication (#84748)",
  "b1867fa29": "Revert enrich cache lookup optimisation (#85028)",
  "f2a117095": "Split build benchmark jobs for faster feedback (#84978)",
  "31ccf3ac0": "[ML] improve zero_shot_classification tokenization performance (#84988)",
  "5ae99a629": "Warn on slow signature verification (#84766)",
  "76b05bfd8": "Note that S3 compat includes performance (#84798)",
  "f6e1b35be": "Fix PolicyStepsRegistry's cachedSteps null handling (#84588)",
  "26778dfb2": "Docs: Fixing formatting on slow log page (#84509)",
  "7bda7d1a8": "Improve performance of date_histogram sometimes (#83751)",
  "f3d622dd3": "Shrink slow log for inner_hits (#84143)",
  "acf9968f9": "Shrink join queries in slow log (#83914)",
  "8906af291": "Shrink slow log for has_child query (#83870)",
  "4fddf98ac": "Shrink slow log for rank_feature query (#83847)",
  "26be52b06": "Shrink slow log for `match` query (#83338)",
  "d4f7a980f": "AbstractByteReference: use primitive integer to cache the hash code (#83248)",
  "3d0655fb4": "Add detail to slow cluster state warning message (#83221)",
  "72f794784": "Add an index->step cache to the PolicyStepsRegistry (#82316)",
  "7f321fb9a": "Make ValidateJsonNoKeywordsTask gradle configuration cache ready (#82864)",
  "e456eb7f9": "ILM step retry safe refresh of the cached phase (#82613)",
  "69696542b": "Fix enrich cache corruption bug (#82441)",
  "c914641a8": "Fix typo in slow network warning message",
  "30bda56f9": "Readonly repos don't cache (#81674)",
  "ba6c17d30": "Script: Implicit context cache (#81552)",
  "936125e46": "Fail fast remote cluster requests (#80589)",
  "58f32b361": "[DOCS] Update 8.0 breaking change for searchable snapshot shared cache (#80793)",
  "c758d1c62": "Improve FilterPathBasedFilter performance (#79826)",
  "30e15ba83": "Script: Time series compile and cache evict metrics (#79078)",
  "6c33d8395": "add benchmark to test xcontent parser filter performance (#80069)",
  "d5f866c23": "Rename shared cache static constant settings (#79999)",
  "482960126": "Forbid zero value for shared cache range/recovery range/region size settings (#79998)",
  "4a00bfb10": "Preventing unnecessary ILM policy deletions that drastically slow down SmokeTestMultiNodeClientYamlTestSuiteIT (#79946)",
  "1523606b4": "Script: Disable compilation rate limit in general cache for tests (#79862)",
  "808b70d2f": "Script: Restore the scripting general cache (#79453)",
  "78fcd0e1b": "Disable request cache for non-deterministic runtime fields (#75054)",
  "3dc00db79": "Quicker shared cache file preallocation (#79447)",
  "a3f057cf4": "Create cache files with CREATE_NEW & SPARSE options (#79371)",
  "608ff36b8": "Improving cache lookup to reduce recomputing / searches (#77259)",
  "63d663e22": "Add periodic maintenance task to clean up unused blob store cache docs (#78438)",
  "d2de1afa7": "Rest api to reset deprecation indexing cache (#78392)",
  "2339ea5fc": "Support request cache on frozen tier (#77694)",
  "db75c4bd2": "Script: compile/cache eviction history metric placeholders (#78257)",
  "5e9c2422d": "Disable sort optimization in search_after and scroll requests (#78230)",
  "ef2179781": "Add maintenance service to clean up unused docs in snapshot blob cache (#77686)",
  "2d9e0e79c": "Disable numeric sort optimization conditionally (#78103)",
  "ed78f4270": "Enable sort optimization in query Lucene changes (#77907)",
  "5656ea1ef": "Fold blob store cache path into BlobStoreCacheService (#77611)",
  "1b56e8b32": "Add sort optimization with after from Lucene (#64292)",
  "553e8dcb0": "Create a sha-256 hash of the shard request cache key (#74877)",
  "f96fd14f8": "[Transform] disable index call optimization (#77341)",
  "1ae4f3c93": "Add enrich node cache (#76800)",
  "61be724cc": "Mention 'warn threshold' in master service slowlog (#76815)",
  "f9d30adf6": "[Transform] Align transform checkpoint range with date_histogram interval for better performance (#74004)",
  "a6559a4d7": "[ML] Allow for slow CI machines in MlNodeShutdownIT (#76242)",
  "d805c6733": "Search performance - better caching logic for queries on wildcard field (#76035)",
  "11a567602": "SearchableSnapshotsIT.testCacheStats should wait for cache writes to complete before checking stats (#76011)",
  "e425e0a2e": "Using actual time instead of cached time to avoid the snapshot time and policy action time being identical in tests (#75983)",
  "29c7a766a": "Make PublishPlugin gradle configuration cache compliant (#74828)",
  "1127f4fd3": "[doc] Document workaround for slow log levels (#75438)",
  "e978b726c": "ILM: execute cached steps even if policy is updated (#75296)",
  "15a3b3541": "[Transform] improve performance by using point in time API for search (#74984)",
  "b890f9380": "[DOCS] Add performance info for runtime fields (#74454)",
  "4a8ff0f26": "Support shard request cache for queries with DLS and FLS (#70191)",
  "01d08651d": "Correctly log exceptions that are thrown during cache prewarming (#74419)",
  "c37184c67": "[ML] clear job size estimate cache when feature is reset (#74494)",
  "a5af44d41": "Disable optimization if we aren't sure its faster (#74260)",
  "c9166d652": "Increase default API key auth cache size to 25K. (#74388)",
  "983c5db94": "Shared cache's recovery range should be aligned with page size (#74439)",
  "40b1dc0d3": "Synchronizes slowlog json keys with beats (#74211)",
  "e124824f2": "Replace deprecated `script.cache.*` settings with `script.context.$constext.cache_*` in documentation. (#74144)",
  "484280a02": "Disable query cache for FunctionScoreQuery and ScriptScoreQuery (#74060)",
  "0118341d5": "Add JAVA15_HOME env var to packer cache script for aarch64",
  "1b6d2f522": "[doc] Fix typo in slowlog.asciidoc (#73803)",
  "4b5aebe8b": "Add setting to disable aggs optimization (#73620)",
  "76088da23": "Add JAVA15_HOME to packer_cache.sh script",
  "dfbcb6b8f": "Change data tier preference of snapshot blob cache index to `data_content,data_hot` (#72817)",
  "c9ca64cec": "Add test for persistent cache clean up after relocation (#72682)",
  "051bbb223": "Fix early termination of search request with sort optimization (#72683)",
  "dbad9d0a0": "[DOCS] Update 'shared_cache' references for searchable snapshots (#72775)",
  "c57fbe8ea": "Frozen default cache size (#71844)",
  "0e853de6e": "Only clear cache for frozen tier shards (#71933)",
  "03dee5b60": "Service Accounts - cache clearing API (#71605)",
  "ceaa16edd": "Add node level cache stats for searchable snapshots (#71701)",
  "d4b649cd2": "Improve reusability of the cache invalidation counter (#66310)",
  "6f995e65b": "Disable fail on deprecation for packer cache script",
  "b4bac7b76": "Test: assert adjacency matrix cache (#69440)",
  "124727273": "Remove xpack.searchable.snapshot.cache.size setting (#71334)",
  "fcea3032e": "SQL: Improve the optimization of null conditionals (#71192)",
  "d34043262": "Remove frozen cache setting leniency (#71013)",
  "cf61996ae": "Auto convert shared_cache SBIs to only use frozen tier (#71014)",
  "cdbd4f215": "Ensure shared cache is page-aligned (#70876)",
  "e90008193": "Change tier preference for shared_cache searchable snapshots to frozen only (#70786)",
  "c11be7d33": "Wait for blob cache fills to complete before stopping the service (#70220)",
  "93a646483": "Update packer cache script to be compatibile with aarch64 workers",
  "f9aa282b7": "Additional docs for shared_cache searchable snapshots (#70566)",
  "1e461af9b": "AbstractSearchableSnapshotsRestTestCase.testClearCache() should wait for cache writes to complete (#70541)",
  "b6eb6e309": "Suppress illegal reflective access in shared cache (#70344)",
  "17d56d361": "Fix percentiles agg in slow log after transport (forward port of #70318) (#70412)",
  "d312e8cfa": "[DOCS] Document `*` path parameter for security cache APIs (#70081)",
  "3a814a205": "Deprecate setting shared cache on non-frozen nodes (#70341)",
  "36683a458": "Move shared cache pre-allocation and support macOS (#70285)",
  "dc78ce42e": "Remove debug logging in query cache stats (#70279)",
  "b3fd16db9": "Exclude partially cached .cfs file from SearchableSnapshotDirectoryStatsTests (#70006)",
  "0cf97f746": "Use blob store cache for Lucene compound files (#69861)",
  "b8a876448": "Check BWC versions for frozen cache too (#69962)",
  "1a432a26d": "Only allocate partial shards to nodes with cache (#69904)",
  "f06dc63f2": "Report shared_cache shards as zero size on disk (#69820)",
  "5c2b15af7": "Adjust the length of blob cache docs for Lucene metadata files (#69431)",
  "271dfa77d": "Avoid concurrent execution issues when running packer cache script (#69246)",
  "856b58ca1": "Improve shard level request cache efficiency (#69505)",
  "a8fd9954d": "Fix slowness in SearchableSnapshotsIntegTests (#69379)",
  "f76d5be4b": "Disable stored fields access optimization in recovery (#69385)",
  "f27da75a6": "Handle _shard_doc field for sort optimization (#69321)",
  "80b04338e": "Make field_range optimization work with FrozenEngine (#69357)",
  "e4962994f": "[DOCS] Remove performance warning for script fields (#69309)",
  "4482716c4": "Use FrozenEngine for shared_cache searchable snapshot shards (#69277)",
  "5529b3d58": "Changed how geoip cache is integrated with geoip processor. (#68581)",
  "256b83800": "Avoid async cache-size fetch on partial shards (#68644)",
  "6269af716": "Prevent cache file synchronization to add evicted cache files back in the persistent cache (#67694)",
  "f84620198": "Debug logging for error conditions in query cache stats (#67444)",
  "7063d0026": "Remove unnecessary optimizations for TermsSetQueryBuilder (#67637)",
  "c32f8b1c0": "Improve performance of terms query for non-decimal numbers (#66909)",
  "76d0e3584": "Add assertion message when decrementing cache file (#67561)",
  "99340fe71": "Improve shards evictions in searchable snapshot cache service (#67160)",
  "4751d8c89": "Reduce number of cache/prewarm threads (#67021)",
  "cc75fa07e": "Fix optimization in runtime fields tests",
  "3218745eb": "Make blob cache have async durability (#66687)",
  "3e3152406": "Bust the request cache when the mapping changes (#66295)",
  "ed6616c98": "[ML] change to only calculate model size on initial load to prevent slow cache promotions (#66451)",
  "6ff54c0b8": "Add searchable snapshot cache folder to NodeEnvironment (#66297)",
  "672972cc5": "Make searchable snapshots cache persistent (#65725)",
  "7e6b52a99": "SearchableSnapshotDirectory should not evict cache files when closed (#66173)",
  "4e6e9de13": "Be more specific when clearing cache for a specified shard (#66003)",
  "ccad78e8f": "[ML] make InferenceIngestIT more lenient when checking cache miss counts (#65774)",
  "44a60d00a": "Add 6.8 branch to packer cache script (#65510)",
  "0f7bbed37": "Allow to add existing cache files in searchable snapshots cache service (#65538)",
  "91cbb9d33": "Skip range optimization if it'd be slower (#65097)",
  "8b2b7fa80": "{S,E}QL: Fix optimization of `NotEquals` in conjunctions (#65331)",
  "70864a96b": "Fix cacheability of custom LongValuesSource in TermsSetQueryBuilder (#65367)",
  "a85fb5534": "[DOCS] Fixes typo in Aggregating data for faster performance. (#65354)",
  "8d28c3594": "Allow searchable snapshot cache service to periodically fsync cache files (#64696)",
  "10ee0f287": "Clarify field data cache behavior in docs (#64375)",
  "c5f4160f5": "Move the shared fetch cache to highlighting. (#65105)",
  "e735d46bf": "Skip optimization if there are few docs (#64897)",
  "5122a1080": "Remove project usages in internal tasks for better configuration cache support (#63701)",
  "61a2d0050": "Centralize cache service instances creation in tests (#64591)",
  "34fc3033c": "Add CacheFile#fsync() method to ensure cached data are written on disk (#64201)",
  "1061a647b": "Permission fast path in tests (#64378)",
  "3f8097bce": "Add data tiers preference for snapshot blob cache system index (#64004)",
  "7f91af549": "Use asterisk instead of empty string to clear all cached entries (#63907)",
  "910636a17": "[ML] changing ngram loop order for minor performance improvement (#63033)",
  "d7e279bb0": "Fix standard filter BWC check to allow for cacheing bug (#62649)",
  "8935fffe5": "Remove cache key renderer argument from IndicesRequestCache (#62534)",
  "d077a4f5a": "[DOCS] Document static field cache settings (#61424)",
  "a20ff514f": "C486.Introduce cache index for searchable snapshots (#60522)",
  "c3f40a856": "[DOCS] Fix ingest script compilation rate and cache size (#61468)",
  "dabaad71a": "Add data.path fast path for FilePermission (#61302)",
  "8989a6483": "Add constant folding as an optimization phase (#61294)",
  "d86243f1d": "Disable sort optimization on search collapsing (#60838)",
  "8674826b0": "[Transform] disable optimizations when using scripts in group_by (#60724)",
  "783771ab9": "[Transform] fix regression of date histogram optimization (#60591)",
  "2b9b4a9cf": "[Transform] fix performance regression introduced in #60196 (#60276)",
  "8a57800f1": "[DOCS] Add performance warning for scripts (#59890)",
  "3ab044570": "Use a dedicated thread pool for searchable snapshot cache prewarming (#59313)",
  "836e4f938": "Accounting for model size when models are not cached. (#58670)",
  "a28ce1e21": "Improve role cache efficiency for API key roles (#58156)",
  "5e832f35f": "[DOCS] Add data streams to clear cache API docs (#59324)",
  "8d8bd3df7": "Scripting: Move script_cache into _nodes/stats (#59265)",
  "2f60ff4a0": "Scripting: Remove general cache settings (#59262)",
  "04e1177d2": "Clean searchable snapshots cache on startup (#59009)",
  "2a0010e5e": "Adjust versions for yaml test of clearing app privileges cache (#58886)",
  "045bdcafc": "Allow read operations to be executed without waiting for full range to be written in cache (#58728)",
  "fa192a7ce": "Sort document by internal doc id in FetchPhase to better use LRU cache (#57273)",
  "38185e5da": "Add cache for application privileges (#55836)",
  "a43ff95f2": "[ML] calculate cache misses for inference and return in stats (#58252)",
  "a6e07eafb": "Disable BWC for script cache settings change #58283 (#58285)",
  "78fcd0581": "[ML] inference performance optimizations and refactor (#57674)",
  "0dfc83ab3": "Remove slowlog level (#57591)",
  "b072f5f00": "Fix an optimization in terms agg (#57438)",
  "b48324686": "Run sort optimization when from+size>0 (#57250)",
  "bdfb137b3": "Don't run sort optimization on size=0 (#57044)",
  "cb47853a4": "Fix bug in faster interval rounding (#56433)",
  "6dd05256f": "Use workers to warm cache parts (#55793)",
  "a2894b0a8": "[ML] Wait for model loaded and cached in ModelLoadingServiceTests (#55719)",
  "bd40d0664": "Allow to prewarm the cache for searchable snapshot shards (#55322)",
  "bd64da096": "Scripting: Deprecate general cache settings (#55038)",
  "0ed1eb599": "Test: MockScoreScript can be cacheable (#55422)",
  "079a14ea4": "[DOCS] Removes transform performance note (#55177)",
  "ee38eee0b": "Use unlimited cache size by default (#55218)",
  "8e8ce9677": "value_count Aggregation optimization (#54854)",
  "faca8404d": "Enable the remote build cache in BWC distribution builds (#54691)",
  "52e0be80c": "bwc: enable script cache in node stats (#54362)",
  "7a8a24335": "bwc: Mute for script cache in node stats (#54359)",
  "12580acbf": "Improve checkstyle performance and readability (#54308)",
  "54b6872dc": "Fix ShardSearchRequest cache key (#54071)",
  "cdc377e8e": "Reduce performance impact of ExitableDirectoryReader (#53978)",
  "1b37d4bfc": "Scripting: Increase ingest script cache defaults (#53765)",
  "f8d4b0c1d": "Scripting: Context script cache unlimited compile (#53769)",
  "f2929fe2c": "[DOCS] Adds performance considerations section to transforms overview (#53791)",
  "a2b428f5b": "Disable distributed sort optimization on scroll requests (#53759)",
  "ca7a135e0": "Improve performance of shards limits decider (#53577)",
  "070ea7eff": "Scripting: Per-context script cache, default off (#52855)",
  "f0eeffc1b": "Improve performance of docs snippet length checkstyle rule (#53636)",
  "0f0091e79": "Disable Watcher script optimization for stored scripts (#53497)",
  "2ceedc7f2": "SQL: [Tests] Add tests for optimization of aliased expressions (#53048)",
  "8bb5a11e7": "Fix cacheability of repository-hdfs integ tests (#52858)",
  "cd50922fa": "Decode max and min optimization more carefully (#52336)",
  "ee4311553": "Extract common optimization rules for QL (#52054)",
  "0a8e5e176": "Remove --scan from packer_cache.sh to avoid build waiting on user input",
  "aec932aef": "Improve Painless compilation performance for nested conditionals (#52056)",
  "c21837fe3": "[DOCS] Fix index_prefixes link in 'faster prefix queries' docs (#51833)",
  "f93b3922d": "Bucket aggregation circuit breaker optimization. (#46751)",
  "378b27b9f": "Disable build cache for packaging tests (#51717)",
  "5736dfb8c": "Warn on slow metadata performance (#50956)",
  "f53c9680e": "Refresh cached phase policy definition if possible on new poli… (#50820)",
  "3d18d79f3": "Add protection in windows for slow file lock releasing (#50884)",
  "a6a3d2b8b": "Improve warning value extraction performance in Response (#50208)",
  "496604942": "Fix memory leak in DLS bitset cache (#50635)",
  "fb6ef69c6": "[DOCS] Deterministic scripted queries are cached (#50408)",
  "de4f701a1": "[DOCS] Document `index.queries.cache.enabled` as a static setting (#49886)",
  "f38ce06b9": "[CI] Interval queries cannot be cached if they use scripts (#49824)",
  "8f427198b": "Disable sort optimization when index is sorted (#49727)",
  "3ab2de1c0": "Introduce faster approximate sinh/atan math functions (#49009)",
  "f9a9dcb75": "Close query cache on index service creation failure (#48230)",
  "61ff51a23": "[DOCS] Reformat clear cache API docs (#46512)",
  "db78d3078": "Warn on slow metadata persistence (#47005)",
  "f7a34c8f5": "Implement rounding optimization for fixed offset timezones (#46670)",
  "3cf99cf83": "Expose cache setting in UserAgentPlugin (#46533)",
  "184cc4d8e": "Repository plugin test cacheability fixes (#46572)",
  "4dcc226e1": "Disable local build cache in CI (#46505)",
  "488d84354": "Initialize document subset bit set cache used for DLS (#46211)",
  "126f87b36": "First round of optimizations for vector functions. (#46294)",
  "05d8e8019": "Ensure top docs optimization is fully disabled for queries with unbounded max scores. (#46105)",
  "14486c731": "Fix remote cache misses for test tasks (#45521)",
  "ae5919b2c": "Fix remote cache misses for checkstyle tasks (#45512)",
  "6ea36707a": "Clarify that FLS/DLS disable shard request cache (#45462)",
  "788feced7": "Fix build cache misses caused by embedded reaper jar (#45404)",
  "664a29c89": "Use system properties for build cache configuration (#45295)",
  "6143ebfc6": "Improve slow logging in MasterService (#45086)",
  "7776f755e": "More logging for slow cluster state application (#45007)",
  "15ac41edc": "Small optimizations in VectorsUsageTransportAction",
  "20284b8fa": "Optimize Min and Max BKD optimizations (#44315)",
  "d7c84e16e": "Fix stats in slow logs to be a escaped JSON (#44642)",
  "58636fe7b": "Document xpack.security.dls.bitset.cache settings (#44100)",
  "688cf832f": "Enable indexing optimization using sequence numbers on replicas (#43616)",
  "bb130f554": "Use separate BitSet cache in Doc Level Security (#43669)",
  "0fe62de21": "show a full ingest example in the index page, to let user fast understand ingest node. (#43476)",
  "4fcb951f2": "Example of how to set slow logs dynamically per-index (#42384)",
  "bfce0f662": "SecurityIndexSearcherWrapper doesn't always carry over caches and similarity (#43436)",
  "29992cff6": "Wire query cache into sorting nested-filter computation (#42906)",
  "26a508bb1": "Fix inverted condition so we never cache rest integ tests",
  "813e57d2d": "Add explicit build flag for experimenting with test execution cacheability (#42649)",
  "5ca06a5ce": "Make JarHell task cacheable (#42551)",
  "0bb46d73c": "Make LoggerUsageTask cacheable (#42550)",
  "5db766773": "Gradle init script for enabling remote build cache (#42484)",
  "9cadfd2b2": "Mute slow and flaky build-tools integration tests",
  "c9d04ccb3": "Make packer cache branches explicit (#41990)",
  "efbe58131": "Do not refresh realm cache unless required (#42169)",
  "044af2a4c": "Fix slow sync test clustres artifacts task (#42012)",
  "3567b79e5": "Disable max score optimization for queries with unbounded max scores (#41361)",
  "6a696f463": "Dix the packer cache script",
  "c39980a65": "SQL: Fix bug with optimization of null related conditionals (#41355)",
  "db30aac9d": "fix the packer cache script (#41183)",
  "34e2368df": "Fix unsafe publication in opt-out query cache (#40957)",
  "c7ebfa2c5": "Use openjdk 12 in packer cache script (#40498)",
  "03394b862": "No mapper service and index caches for replicated closed indices (#40423)",
  "8832d25b2": "SQL: Fix issue with optimization on queries with ORDER BY/LIMIT (#40256)",
  "159eb721e": "Return cached segments stats if `include_unloaded_segments` is true (#39698)",
  "ead14a807": "[ML] Increase datafeed integration test timeout for slow machines (#39311)",
  "580a71c24": "Don't close caches while there might still be in-flight requests. (#38958)",
  "ec4f487bb": "Disable cache on QueryProfilerIT (#38583)",
  "b9552202c": "Restore date aggregation performance in UTC case (#38221)",
  "e73c9c90e": "Add an authentication cache for API keys (#38469)",
  "2c1eab2b8": "Clarify slow cluster-state log messages (#38302)",
  "275857857": "Trim the JSON source in indexing slow logs (#38081)",
  "f3379940c": "Fix the packer cache script (#38023)",
  "c0409fb9f": "[ML] Marginal gains in slow multi node QA tests (#37825)",
  "fc99eb3e6": "Add cache cleaning task for ML snapshot (#37505)",
  "adae233f7": "Add some deprecation optimizations (#37597)",
  "da3d8fb5b": "SQL: Fix issue with wrong NULL optimization (#37124)",
  "42ea64490": "Remove single shard optimization when suggesting shard_size (#37041)",
  "d3e98278c": "Spelling: replace cachable with cacheable (#37047)",
  "2afa7faef": "Override the JVM DNS cache policy (#36570)",
  "9d417984b": "[Zen2] Add warning if cluster fails to form fast enough (#35993)",
  "ba3ee9894": "Security: improve exact index matching performance (#36017)",
  "450db7fcf": "[Tests] Fix slowness of AutoDateHistogramAggregatorTests (#35072)",
  "d00b23c8b": "Fixes fast vector highlighter docs per issue 24318. (#34190)",
  "6f6b26516": "HLRC: add support for the clear realm cache API (#35163)",
  "f3e150b0e": "[Docs] Update query_cache.asciidoc (#33340)",
  "6d6ac74a0": "Zen2: Fail fast on disconnects (#34503)",
  "7cc3ac0fc": "[Docs] Add _cache/clear parameter examples (#34614)",
  "6dd716b0c": "Replace version with reader cache key in IndicesRequestCache (#34189)",
  "a15b1b97d": "Watcher: Reduce script cache churn by checking for mustache tags (#33978)",
  "b1cc58e42": "Allow to clear the fielddata cache per field",
  "92a48fa6b": "Add script to cache dependencies (#33726)",
  "6f9c9ab5e": "[ingest] geo-ip performance improvements (#33029)",
  "16fe22047": "Revert '[test] turn on host io cache for opensuse (#32053)'",
  "69c85331b": "[test] turn on host io cache for opensuse (#32053)",
  "237650e9c": "Add x-opaque-id to search slow logs (#31539)",
  "009ae48cb": "[PkiRealm] Invalidate cache on role mappings change (#31510)",
  "54740cc55": "Increase the maximum number of filters that may be in the cache. (#30655)",
  "35fa93497": "Adjust fast forward for token expiration test (#30668)",
  "28d4685d7": "Mitigate date histogram slowdowns with non-fixed timezones. (#30534)",
  "4defaa4f2": "Avoid deadlocks in cache (#30461)",
  "721ee4c22": "Fix line length violation in cache tests",
  "baf7b92b0": "Add failing test for core cache deadlock",
  "ec939dc01": "Fix line length violation in cache tests",
  "68760ec5d": "Add failing test for core cache deadlock",
  "e1a16a601": "REST: Remove GET support for clear cache indices (#29525)",
  "91ab88e86": "Security: cache users in PKI realm (elastic/x-pack-elasticsearch#4428)",
  "70f9bcc0d": "[DOCS] Adds link to clear role cache API (elastic/x-pack-elasticsearch#4405)",
  "dfcce2d87": "Speed up some of our slowest unit tests. (#29414)",
  "ff09c8231": "REST high-level client: add clear cache API (#28866)",
  "3e0e6444c": "Mark field_data as deprecated in /_cache/clear",
  "46fcd0715": "Add total hits to the search slow log (#29034)",
  "bddf9df8b": "Add search slowlog level to docs (#29040)",
  "3b474d886": "[Test] Fix slow rollup job task test",
  "3102b9494": "[TEST] Don't fail IndexAuditTrailTests if the test runs very fast",
  "ce77a3dd6": "[TEST] Make test more tolerant to slow VMs (elastic/x-pack-elasticsearch#3783)",
  "b0552e1c6": "[Security] Handle cache expiry in token service (elastic/x-pack-elasticsearch#3565)",
  "1d1dcd4ae": "Painless: Add a simple cache for whitelist methods and fields. (#28142)",
  "22e294ce6": "Fix performance of RoutingNodes#assertShardStats",
  "6655689b1": "Move DNS cache docs to system configuration docs",
  "ff3c19ed1": "Move DNS cache settings to important configuration",
  "d01fcee64": "Fix illegal cast of the 'low cardinality' optimization of the `terms` aggregation. (#27543)",
  "66b5a43d0": "Logging: Unify log rotation for index/search slow log (#27298)",
  "be399965e": "Revert 'Reduce synchronization on field data cache'",
  "2e863572f": "Reduce synchronization on field data cache",
  "29331f112": "Fail queries with scroll that explicitely set request_cache (#27342)",
  "f1e944a67": "docs: describe parent/child performances",
  "d0104c22a": "Reduce the default number of cached queries. (#26949)",
  "4a06dd919": "Painless: add tests for cached boxing (#24163)",
  "1d4f70210": "Calculate and cache result when advanceExact is called (#26920)",
  "62fbd5a79": "[DOCS] Format the clear cache API (elastic/x-pack-elasticsearch#2574)",
  "9c795bd83": "Fix cache compute if absent for expired entries",
  "6b4468ea5": "Clear security caches on security index health changes (elastic/x-pack-elasticsearch#1957)",
  "1900d9c44": "Docs: Fix typo for request cache (#25444)",
  "1b90c46a5": "Allow reader wrappers to have different live docs but the same cache key.",
  "68deda6d0": "FastVectorHighlighter should not cache the field query globally (#25197)",
  "678730107": "Fix bug in weight computation for query cache",
  "f3d5cf229": "Change user cache TTL to be based on write not access time (elastic/x-pack-elasticsearch#1373)",
  "a404f0aca": "Cleanup BWC for single shard optimization",
  "0ec30eb8e": "Fix cache expire after access",
  "62fa7081b": "Painless: Add tests to check for existence and correct detection of the special Java 9 optimizations: Indified String concat and MethodHandles#ArrayLengthHelper() (#24405)",
  "c17de49a6": "[percolator] Fix memory leak when percolator uses bitset or field data cache.",
  "09efdc315": "Improve performance of extracting warning value",
  "9c542173b": "[TEST] Make test more robust against slow connection establishing",
  "3986235d9": "[ML] Fix large state persistence performance (elastic/x-pack-elasticsearch#1004)",
  "798c19dd7": "Deprecate request_cache for clear-cache (#23638)",
  "286d62f00": "Don't clear realm-cache during security upgrade on basic license (elastic/elasticsearch#4806)",
  "9d9572e2b": "Reintroduce chunking to improve data extractor performance (elastic/elasticsearch#849)",
  "a475323aa": "Invalidate cached query results if query timed out (#22807)",
  "1243abfec": "build: do not use cached snapshots for backwards compatibility tests",
  "93b5e5566": "Restores the original default format of search slow log",
  "2c8229fca": "Cleanup unicast zen ping unknown hosts cached test",
  "00de8e07f": "Do not cache term queries. (#21566)",
  "df4482fdc": "Do not cache the QueryShardContext in PercolatorFieldMapper: it is cheap to create.",
  "4c53e55d3": "[TEST] Add master_timeout to shrink call to fail faster",
  "a5ccd02e7": "Makes snapshot throttling test go much faster (#21485)",
  "5d79eab98": "Fix the request cache keys to not hold references to the SearchContext. (#21284)",
  "542a48403": "security: cache negative lookups for native roles",
  "96aa5e33c": "Fix slowlog docs",
  "ce1a9a2b0": "[TEST] Add test that filtered alias with date math isn't cached by the request cache",
  "6284db3a4": "security: use correct time unit for role cache expire after write",
  "1914df7b5": "Do not cache script queries. (#20799)",
  "288f682fe": "elastic/elasticsearch#3667 Changes to DLS to support preventing requests that use scripts or now() from being cached",
  "3aed047bd": "#20750 Prevent requests that use scripts or now() from being cached",
  "40f8f281e": "Merge branch 'master' into dont_cache_scripts",
  "50ca10378": "Merge branch 'master' into dont_cache_scripts",
  "57afbadf3": "PercolateQuery is never cacheable",
  "7bffe9502": "Fix percolator queries to not be cacheable",
  "4000a4a10": "Merge branch 'master' into dont_cache_scripts",
  "764a5fbb3": "Fix date_range aggregation to not cache if now is used",
  "587bdcef3": "add extra safety when accessing scripts or now and reqeusts are cached",
  "e168b3b66": "Fix date_range aggregation to not cache if now is used",
  "80bf44f70": "Merge branch 'master' into dont_cache_scripts",
  "8afc83047": "Change the timeout of the rolling upgrades test from 40 mins to 5 mins to still allow accounting for slow VMs",
  "55d9e99f5": "Fix filter cache setting to allow percentages",
  "af215b528": "move completion performance tips from migration docs to completion docs",
  "7d7891108": "security: limit the size of the role store cache",
  "d7ec2db9b": "[TEST] enable cacheKey check in ShardSearchTransportRequestTests",
  "22242ec88": "Fix request cache key for search",
  "40d7ebc51": "Fix bug in single shard optimization when sorting documents in search request",
  "8d4bc0b2a": "Merge pull request #19929 from johtani/fix/stop_using_cached_components_in_analyze_api",
  "452691ae9": "Merge pull request #19949 from jimferenczi/slow_log_search",
  "bf312f420": "Add the shard ID and the node name in the output of the search slow log. This change outputs '[nodeName] [indexName][shardId]' instead of [indexName/indexUUID]",
  "2cde3b07c": "Stop using cached component in _analyze API",
  "2904562b0": "[DOCS] Fix shard request cache docs",
  "f63fcefbd": "Stop using cached component in _analyze API",
  "58d6b9dcd": "This commit first reads the repository data and only upgrades if it determines the read data is in the legacy format. It writes the upgraded version if it is not a read-only repository and caches the repository data if it is a read-only repository.",
  "e3d3f6b1f": "#19472 Enable option to use request cache for size > 0",
  "b717ad8eb": "Enable option to use request cache for size > 0",
  "0b52cedf6": "Merge pull request elastic/elasticsearch#2736 from rmuir/fls_cache",
  "3a0aa1312": "support lucene query cache when using FLS",
  "d08812d83": "[TEST] fix test to account for internal empyt reference optimization",
  "0d7c11ea1": "[DOCS] put profiling performance and limitations section on same page",
  "7c87d39f0": "Revert slow tests heartbeat",
  "f2d621942": "painless: remove useless dropArguments and throws statement in megamorphic cache; add tests",
  "54797b7d0": "don't let megamorphic cache 'capture' arbitrary arguments.",
  "f92314ba0": "Disable field stats cache if field level security",
  "8cc848f31": "Allow FieldStatsRequest to disable cache",
  "767bb49da": "Fix bug with first param (receiver) on the cache lookup",
  "a473298f4": "Add megamorphic cache",
  "e9017f619": "Improve performance of applyDeletedShards",
  "23d7cdd04": "ban slow methods in MethodHandle",
  "e21d8b31f": "Remove thread pool from page cache recycler",
  "80fee8666": "percolator: Removed percolator cache",
  "c13df3b6c": "Clear all caches after testing parent breaker",
  "ee6d29b34": "Merge pull request #18410 from rmuir/painless_parser_performance_bug",
  "43344eee8": "Add more def tests including checking bytecode for specific optimizations.",
  "cf2af8961": "Iterables.flatten should not pre-cache the first iterator",
  "6b4e47bf9": "this makes aggregations per-document _value fast (bypass hash put, hash get, etc) for painless.",
  "5644f4909": "Merge pull request #18258 from rmuir/painless_faster_score",
  "ba2fe156e": "Switch over dynamic method calls, loads and stores to invokedynamic. Remove performance hack for accessing a document's fields, its not needed. Add support for accessing is-getter methods like List.isEmpty() as .empty",
  "6e4273ae0": "Merge pull request #17818 from jimferenczi/search_slow_log",
  "3dc21e780": "Add missing index name to search slow log. This commits adds the index name as part of the logging message. Closes #17025",
  "0eb1a816c": "Allow the query cache to be disabled. #16268",
  "81801451a": "Factor out slow logs into Search and IndexingOperationListeners",
  "4bd27bc2a": "Type filters should not have a performance impact when there is a single type. #17350",
  "a22529cce": "Do not retrieve all indices stats when checking for cache resets",
  "49d868b49": "Improve test to not rely on thread slowness",
  "30cdc11d7": "Enable the indices request cache by default",
  "cbaa480c1": "[TEST] Let the windows machine be slow as hell",
  "f6ae9ec4f": "Remove ShardsAllocators and merge allocateUnassigned, moveShards and rebalance to improve performance",
  "98249507c": "Add missing index name to indexing slow log",
  "8d568ce3e": "Move optimization out of BoolQueryBuilder into tests",
  "b5aee2075": "Merge pull request #16610 from s1monw/test_indices_request_cache",
  "46cab6d2e": "Merge pull request #16603 from s1monw/move_cache_to_indicesservice",
  "778ec84a7": "Merge pull request #16469 from s1monw/simplify_indices_field_data_cache",
  "008aa2c31": "Merge pull request #16341 from s1monw/cache_settings",
  "3b225f7c9": "Revert default value for 'index.requests.cache.enable'",
  "41b09c5fe": "Add indices.requests.cache.clean_interval as a known settings",
  "a8c967306": "Merge pull request #16267 from jpountz/query_cache_settings_new_infra",
  "eb6aaefae": "Script cache expiration setting",
  "cc25c4c8b": "don't validate query cache types - they can be customized",
  "c702fbd29": "convert all slow logs",
  "cdae4945a": "add unittest for indexing slow log settings",
  "3599585aa": "cut over indexing slow log",
  "ce32b959f": "fix possible concurrency bug in IMC when indexing threads are faster in writing bytes than the status checker is in checking all shards",
  "581fd49da": "Merge pull request #15836 from jpountz/fix/bitset_cache_duplicates",
  "24ab66c69": "Merge pull request #15678 from ywelsch/enhance/faster-balancer",
  "d353dcb13": "Merge pull request #15592 from s1monw/remove_deprecated_query_cache_settings",
  "3a5d3a3bb": "Remove deprecated query cache settings",
  "99f2cde22": "Fail fast if HDFS cluster shuts itself down",
  "b0febc1b9": "make slow tests more obvious",
  "79ff2ddd2": "Merge pull request #15202 from jpountz/fix/clear_empty_query_cache",
  "7d25623b1": "Fix NPE when a segment with an empty cache gets closed.",
  "270a3977b": "Removed the lazy cache in DatabaseReaderService and eagerly build all available databases.",
  "59b4177b9": "Mark the slowest slowest tests @BadApple",
  "b01149032": "Add more retries for wait condition, in case jenkins is slow",
  "647f324c4": "Change waitfor max time back to 30 seconds, in case jenkins is slow",
  "d4fe344be": "Merge pull request elastic/elasticsearch#999 from martijnvg/watcher/unmute_slow_watches_tests",
  "f2900f71c": "test: unmuted slow watches test.",
  "cfba6af6c": "Merge pull request elastic/elasticsearch#988 from rjernst/disable_snapshot_cache",
  "fc1d043c0": "Build: Do not cache snapshots",
  "101e4ff7c": "test: added test that ensures that field data cache is not bypassed for segment and global ordinal caching when field subset reader hides the requested field.",
  "293b2f634": "field data: Don't cache top level field data for fields that don't exist.",
  "c1156283c": "Merge pull request #14315 from jasontedor/failed-cache-loads",
  "06853209a": "Fix issues with failed cache loads",
  "90528ce5a": "Merge pull request #14334 from jasontedor/cache-deadlock-test",
  "baf361f1f": "Add cache deadlock test",
  "60a4e24e2": "Merge pull request #14317 from jpountz/fix/cache_propagate_bulk_scorer",
  "c132e5502": "Use official public API to register query cache and index searcher wrapper",
  "2cb0cbf62": "Cut over to IndexModule to register query cache",
  "59a71b044": "Merge pull request #14293 from s1monw/fold_in_index_cache_module",
  "32af9610d": "do not use the cache methods for loading entries into the user cache",
  "a0668a3b2": "Merge pull request #14210 from jasontedor/remove-cache-concurrency-level-settings",
  "18b32f0ba": "Remove cache concurrency level settings that no longer apply",
  "cac073daf": "enforce that wrappers delegate core cache key and ban getCombinedCoreAndDeletesKey() entirely",
  "72c015f82": "DLS: Use the cache keys of the wrapped reader instead of the document subset reader itself.",
  "e8dc52857": "Merge pull request elastic/elasticsearch#735 from jasontedor/straight-cache-homey",
  "50368b370": "Merge pull request #13879 from jasontedor/straight-cache-homey",
  "59c90496a": "Mutating the cache while iterating is undefined",
  "5c0b4b04c": "Remove use of com.google.common.cache.*",
  "5d340f5e6": "Remove and forbid use of com.google.common.cache.*",
  "aa8bfeb88": "Create concurrent cache with flexible eviction policies",
  "169d06cf9": "Internal: Remove the disabled autogenerated id optimization from InternalEngine",
  "a0fea6d36": "set query cache to null",
  "ee6ac9856": "Cleaned up realm topics, split off cache management. Closes elastic/elasticsearch#523, elastic/elasticsearch#451.",
  "73d84e479": "Merge pull request #13376 from martijnvg/remove_pre2x_slow_parent_child",
  "e4e71d8a9": "add points_only option to GeoShapeFieldMapper for optimizing indexing performance on geo_shape indexes designed to store only points. Includes updated documentation and exception handling for ensuring index integrity on points only data.",
  "ed5f6e5a0": "Remove cyclic dependencies between IndexService and FieldData / BitSet caches",
  "3cd86a514": "Merge pull request #13311 from jpountz/enhancement/more_scroll_optimizations",
  "2b27bc11b": "[doc] remove comment about function_score faster than script sort. It is not so.",
  "bd44dbe5c": "Docs: Insist that setting size=0 will help performance.",
  "f46e66e7d": "Remove the experimental indices.fielddata.cache.expire",
  "f3265095a": "Never cache match_all queries.",
  "e74f559fd": "parent/child: Explicitly disabled the query cache",
  "e649d96eb": "Merge pull request #12881 from martijnvg/allow_for_customable_query_cache",
  "2e0b548b0": "Java api: remove support for lookup cache in TermsLooukpBuilder",
  "1f41a8c68": "Don't cache percolator query on loading percolators",
  "152178f6b": "Merge pull request #12806 from nik9000/slowlog",
  "79d9f5b77": "Logging: Log less source in slowlog",
  "1b72f1345": "fix the rest response for the clear cache action and add tests",
  "9091f4660": "Merge pull request #12624 from rmuir/faster_unit_tests",
  "d7544fb5a": "Tests: Remove references to tests.slow and tests.integration",
  "3c5b43a5b": "Merge pull request #12618 from rjernst/remove/forbid-slow-annotation",
  "a14913f7b": "Left over from the `query_cache` to `request_cache` rename.",
  "8e931d576": "Query DSL: don't cache type filter in DocumentMapper",
  "56391c14a": "Merge pull request #12447 from javanna/enhancement/dont_cache_type_query",
  "cf570ac5b": "Query DSL: don't cache type filter in DocumentMapper",
  "2d775c34c": "field data: If a field doesn't exist in field info then always return a non cached empty atomic reader.",
  "52fb3c3a0": "Docs fix- added performance note about plain highlighter",
  "532485522": "Merge pull request #12223 from awislowski/patch-1",
  "e598f16b5": "Default delayed allocation timeout to 1m from 0 Change the default delayed allocation timeout from 0 (no delayed allocation) to 1m. The value came from a test of having a node with 50 shards being indexed into (so beefy translog requiring flush on shutdown), then shutting it down and starting it back up and waiting for it to join the cluster. This took, on a slow machine, about 30s. The value is conservatively low and does not try to address a virtual machine / OS restart for now, in order to not have the affect of node going away and users being concerned that shards are not being allocated to the rest of the cluster as a result of that. The setting can always be changed in order to increase the delayed allocation if needed. closes #12166",
  "7fec35b67": "Merge pull request #12224 from awislowski/patch-2",
  "53874bf5a": "aliases: Parse aliases at search time and never cache parsed alias filters",
  "1df8e56a8": "Merge pull request #11929 from martijnvg/percolator/drop__own_qpc_cache",
  "18b73ce82": "Merge pull request #11886 from jpountz/fix/shard_filter_cache_stats",
  "ccaf846f1": "Store filter cache statistics at the shard level instead of index.",
  "d2f86933c": "Merge pull request #11893 from jpountz/fix/rename_cache",
  "38f5cc236": "Rename caches.",
  "ea175492b": "Merge pull request #11833 from jpountz/fix/smaller_filter_cache",
  "f29bf63fa": "Give the filter cache a smaller maximum number of cached filters.",
  "6d2ca116b": "[TEST] assertBusy on hasUnassigned on fast machines, node leave might not move shards to unassigned right away, wait for it",
  "0d757413d": "make other slow=false tests pass",
  "199c9002e": "Merge pull request #11428 from jpountz/fix/CompressedXConten_fast",
  "fbe617c37": "Internal: Make CompressedXContent.equals fast again.",
  "7c62e4c82": "disable core caches to ensure users are always authorized",
  "59d9f7e15": "Improve snapshot creation and deletion performance on repositories with large number of snapshots",
  "cf97e14ff": "mark slow tests",
  "5390c01b1": "speed up slow test",
  "61a31dd57": "Tests: Add information about shards that are not closed when the filter cache gets closed.",
  "1a967ce26": "Merge pull request #11180 from jpountz/enhancement/faster_scan",
  "22bba91a1": "Search: Make SCAN faster.",
  "719252a13": "Merge pull request #11183 from martijnvg/parent-child/remove_id_cache_from_stats_and_clear_cache_apis",
  "ece18f162": "Removed `id_cache` from stats and cat apis. Also removed the `id_cache` option from the clear cache api.",
  "ae323a474": "Merge pull request #208 from rmuir/disable_response_metadata_cache",
  "d577c0776": "Internal: close caches after IndicesService.",
  "d8283abf0": "Disable response metadata cache in this ClientConfiguration as well.",
  "a36de1b4e": "Disable response metadata cache.",
  "3409994b9": "Merge pull request #10897 from jpountz/fix/nocache",
  "b72f27a41": "Core: Cut over to the Lucene filter cache.",
  "c165afb4d": "Logging: Add logging of slow cluster state tasks",
  "7a6fe809d": "inner_hits: Don't use bitset cache for children filters.",
  "5236a3d22": "fix some tests, all fast tests now pass",
  "c23d55082": "Merge pull request #10856 from jpountz/fix/remove_qparser_cache",
  "9d890c472": "Internal: Remove the query parser cache.",
  "8435d9226": "Fix bug in GiantGapWithPrediction, due to 'slow start' of double exp",
  "b728772fe": "more fine-grained @slow tuning, remove from many tests that got unlucky with fsync",
  "d2854d726": "mark slow tests with @Slow annotation",
  "953ae63d2": "[TEST] beast slow index to fail with trace logging",
  "c821b8d3b": "Tests: remove static bwc delete index timeout, so that the slow delete failure can repro with additional logging",
  "6df978e76": "Test: increasing replicas timeout to avoid slowness on virtualized hardware (aka jenkins)",
  "85e4c21b0": "Tests: Disable the query cache for parent/child unit tests.",
  "a8e5c6eeb": "Merge pull request #10169 from clintongormley/deprecate_thrift_memcached",
  "aa94ced0a": "Remove references to the thrift and memcached transport plugins as they are no longer supported",
  "a8271595d": "Scripting: File scripts cache key to include language to prevent conflicts",
  "16446440e": "Don't use the fixed bitset filter cache for child nested level filters, but the regular filter cache instead.",
  "8c3cb6c61": "[TEST] don't cache store stats in tests that ensure stats are correct",
  "85c611a1b": "[STORE] Add simple cache for StoreStats",
  "00b5c6431": "Test: testSortMinValueScript - use unmappedType to handle slow propagation of mapping",
  "00d54fabb": "Search: Remove query-cache serialization optimization.",
  "0a07ce891": "core: disable auto gen id optimization",
  "15a766084": "[CACHE] Use correct number of bytes in query cache accounting",
  "9ac6d7830": "Internal: ClusterInfoService should wipe local cache upon unknown exceptions",
  "a6b992b1e": "[perf] changed the default realm cache hasher",
  "e8a17d9cc": "SSL/TLS: Add options to configure session cache size and timeout",
  "2f373f692": "Introduced an API to clear realms caches",
  "b8be8e432": "Query cache: Make the query cache usable on time-based data.",
  "bc8679659": "Core: Remove terms filter cache.",
  "67eba23b2": "Core: Terms filter lookup caching should cache values, not filters.",
  "ce11e0ee6": "Filter cache: add a `_cache: auto` option and make it the default.",
  "63ee24982": "[TEST] Call .cleanUp() on field data cache",
  "6bf18056b": "[CORE] Remove explicit .cleanUp() on cache clear",
  "624a4b87b": "Core: put []'s around the values in the slow-merge log message",
  "de7551735": "Core: also log byte size and doc count when we log slow merges",
  "380e47dbf": "fix cache key methods on leaf reader",
  "7ac713aed": "Core: surgically removed slow scroll, because master (2.0) requires full cluster restart coming from previous versions.",
  "d8f16178d": "Override write(byte[] b, int off, int len) in FilterOutputStream for better performance",
  "0c70b3ca7": "[TEST] remove duplicated tests.slow from randomized testing maven plugin conf",
  "284491d87": "Core: In the bitset cache only eagerly load bitsets for parent nested object fields.",
  "144813629": "Internal: Inverse DocIdSets' heuristic to find out fast DocIdSets.",
  "696beb6e1": "Core: Remove NestedDocsFilter, because it isn't used and also don't eagerly load it in bitset filter cache.",
  "42b6e01a3": "Use a 1024 byte minimum weight for filter cache entries",
  "1645434af": "Forgot to cut over the child filter in nested filter to use fixed bitset cache.",
  "c5cbd5890": "Clearing the realm caches on file updates",
  "4a14c635c": "[CACHE] Expose concurrency_level on all caches",
  "b7dac66c8": "Changed the cached hashing algorithm for cached realms",
  "60c16ba92": "Use groovy-x.y.z-indy jar for better scripting performance",
  "fdbb62b1a": "Docs: Fix curl statements in query-cache.asciidoc",
  "2c6d31df3": "Clear the GroovyClassLoader cache before compiling",
  "c02277283": "Add .esvmrc file to start SSL configured cluster fast",
  "a82d486bd": "Add a listener thread pool Today, when executing an action (mainly when using the Java API), a listener threaded flag can be set to true in order to execute the listener on a different thread pool. Today, this thread pool is the generic thread pool, which is cached. This can create problems for Java clients (mainly) around potential thread explosion. Introduce a new thread pool called listener, that is fixed sized and defaults to the half the cores maxed at 10, and use it where listeners are executed. relates to #5152 closes #7837",
  "6c8aa5fa6": "[RECOVERY] Mark last file chunk to fail fast if payload is truncated",
  "91144fc92": "Parent/child: If a p/c query is wrapped in a query filter then CustomQueryWrappingFilter must always be used and any filter wrapping the query filter must never be cached.",
  "94eed4ef5": "Introduced FixedBitSetFilterCache that guarantees to produce a FixedBitSet and does evict based on size or time. Only when segments are merged away due to merging then entries in this cache are cleaned up.",
  "b745b0151": "Fielddata: Remove soft/resident caches.",
  "b43c2ced9": "[TESTS] Temporary disable field data cache randomization.",
  "39a64cf4d": "[TEST] only reset clients on nightly tests resetting the clients on each test (in after test) makes the tests running, especially in network mode, much slower, since transport client needs to be created each time when randmized to be used. Also, on OSX, the excessive connections causes bind exceptions eventually which makes running the network tests much harder on it. closes #7329",
  "3a5229635": "Warmer (search) to support query cache allow for search based warmer to support query cache flag on the search request, and use the index level query caching flag if set. closes #7326",
  "59c1e94d9": "[DOCS] mention the type of caches that warmers load",
  "34830368d": "Update clearcache.asciidoc",
  "44a549fd1": "Test: Removed network.mode from test to prevent slowdown",
  "11f8edd74": "REST spec: Added missing query_cache param to clear_cache, nodes.stats and indices.stats",
  "e7f1aa4f4": "Documented the query cache module",
  "f216dc4ab": "[TEST] make sure all shards have docs we need that in order for refresh to be effective and actually refresh in the second round of indexing, otherwise, it caches a 0 docs shard and a refresh won't expire anything there",
  "e6e2781ee": "[Query Cache] Add a request level flag to control query cache A request level flag, defaults to be unset, to control the query cache. When not set, it defaults to the index level settings, when explicitly set, will override the index level setting closes #7167",
  "c8cc59df5": "Percolator should cache index field data instances.",
  "89e03910f": "Add a periodic cleanup thread for IndexFieldCache caches",
  "62da59f76": "[TEST] Verify if clear cache request went to all shards.",
  "81e86eba6": "[TEST] Wait for longer on slow nodes until replicating has kicked in",
  "c8e553054": "Improve performance for many new fields introduction in mapping When we have many new fields keep being introduced, the immutable open map we used becomes more and more expensive because of its clone characteristics, and we use it in several places.",
  "730b83c03": "The query string cache can't return the same instance, since Query is mutable changing the query else where in the execution path changes the instance in the cache too.",
  "d3f8c66e2": "Updated cache.asciidoc",
  "ec74a7e76": "Core: Prevent non segment readers from entering the filter cache and the field data caches. Percolator: Never cache filters and field data in percolator for the percolator query parsing part.",
  "c907ce325": "[Test] make recovery slow down in rerouteRecoveryTest aware of index size",
  "a72c167be": "[Test] improved recovery slow down in rerouteRecoveryTest",
  "9620aa315": "[TEST] Add FailureMarker to test listeners so -Dtests.failfast works",
  "f3eca05c3": "[DOCS] removed slowest on single query benchmark requests",
  "7552b69b1": "Core: reuse Lucene's TermsEnum for faster _uid/version lookup during",
  "65ce5acfb": "Explicitly clean up fielddata cache when clearing entire cache",
  "0ff0985e0": "Limit guava caches to 31.9GB",
  "a836496e5": "[TESTS] Randomly disable the filter cache.",
  "0457b0b76": "[TEST] Raise request timeout windows is sometimes extraordinary slow",
  "1feddac31": "Log cache recycler clear call as debug",
  "c306d8c5f": "Don't assume fixed earth diameter in the geo-distance bounding box optimization.",
  "fc78dd2f1": "[DOC] Fix default values for filter cache size and field data circuit breaker.",
  "342a32fb1": "Search might not return on thread pool rejection When a thread pool rejects the execution on the local node, the search might not return. This happens due to the fact that we move to the next shard only *within* the execution on the thread pool in the start method. If it fails to submit the task to the thread pool, it will go through the fail shard logic, but without 'counting' the current shard itself. When this happens, the relevant shard will then execute more times than intended, causing the total opes counter to skew, and for example, if on another shard the search is successful, the total ops will be incremented *beyond* the expectedTotalOps, causing the check on == as the exit condition to never happen. The fix here makes sure that the shard iterator properly progresses even in the case of rejections, and also includes improvement to when cleaning a context is sent in case of failures (which were exposed by the test). Though the change fixes the problem, we should work on simplifying the code path considerably, the first suggestion as a followup is to remove the support for operation threading (also in broadcast), and move the local optimization execution to SearchService, this will simplify the code in different search action considerably, and will allow to remove the problematic #firstOrNull method on the shard iterator. The second suggestion is to move the optimization of local execution to the TransportService, so all actions will not have to explicitly do the mentioned optimization. fixes #4887",
  "c9f1792c8": "Change default filter cache to 10% and circuit breaker to 60% The defaults we have today in our data intensive memory structures don't properly add up to properly protected from potential OOM. The circuit breaker, today at 80%, aims at protecting from extensive field data loading. The default threshold today is too permissive and can still cause OOMs. The filter cache today is at 20%, and its too high when adding it to other limits we have, reduce it to 10%, which is still a big enough portion of the heap, yet provides improved safety measure. closes #5990",
  "23f200bc0": "Use non analyzed token stream optimization everywhere In the string type, we have an optimization to reuse the StringTokenStream on a thread local when a non analyzed field is used (instead of creating it each time). We should use this across the board on all places where we create a field with a String. Also, move to a specific XStringField, that we can reuse StringTokenStream instead of copying it. closes #6001",
  "65bc01727": "Don't lookup version for auto generated id and create When a create document is executed, and its an auto generated id (based on UUID), we know that the document will not exists in the index, so there is no need to try and lookup the version from the index. For many cases, like logging, where ids are auto generated, this can improve the indexing performance, specifically for lightweight documents where analysis is not a big part of the execution. closes #5917",
  "0948260ad": "[TEST] make testTimeoutSendExceptionWithDelayedResponse more reliable on slow systems",
  "dc7349845": "Don't lookup version for auto generated id and create When a create document is executed, and its an auto generated id (based on UUID), we know that the document will not exists in the index, so there is no need to try and lookup the version from the index. For many cases, like logging, where ids are auto generated, this can improve the indexing performance, specifically for lightweight documents where analysis is not a big part of the execution.",
  "efb749936": "[TEST] Improve performance of MockBigArray MockPageRecycler",
  "206799662": "[TEST] Allow higher ClusterHealthTimeout on tests if configuration is slow",
  "fd8a6ac38": "[TEST] make BulkTest more robust if test infra is slow",
  "befa83338": "Make sure successful operations are correct if second phase is fast",
  "c3089701f": "[DOCS] remove extraneous ` from cache page",
  "b7451533c": "Added an indices level field data cache listener that always gets invoked and updates indices statistics and services about field data loading and unloading.",
  "a809bfbcb": "[TEST] Fixed TTL tests for create, index, update Were failing on faster boxes",
  "c84f975ff": "[TEST] Wait for shards to allocate before cleaning caches",
  "73547648e": "[TEST] Update TTL test can fail on faster boxes - improve range of valid vals",
  "0c1b9a667": "Restore streamInput() performance over PagedBytesReference.",
  "12d1bf848": "Significant_terms agg only creates term frequency cache when necessary and uses new TermsEnum wrapper to cache frequencies. Long and String-based aggs no longer need to pass an IndexReader as parameter when looking up frequencies of terms. Closes #5459",
  "4e5714b31": "Remove AggregationContext.cacheRecycler().",
  "39d2377be": "Use patched version of TermsFilter to prevent using wrong cached results",
  "0e780b7e9": "Migrated p/c queries from id cache to field data. Changed p/c queries to use paging data structures (BytesRefHash, BigFloatArray, BigIntArray) instead of hppc maps / sets. Also removed the id cache.",
  "03ad168b2": "[DOCS] Added note about dely in clearing filter cache.",
  "7e1eed981": "The forceful no cache behaviour for range filter with now date match expression should only be active if no rounding has been specified for `now` in the date range range expression (for example: `now/d`).",
  "b66885dab": "Don't throttle the translog stage of recovery After copying the index files (which are throttled), we currently throttle the translog as well. The translog phase3 part is performed under a lock, so its better not to throttle it at all, and move it as fast as possible.",
  "b34f25931": "Remove duplicate cache columns",
  "2d58603e8": "Added more unit like test that verifies that has_child is never cached even if wrapped by another filter.",
  "6cdbdaf38": "Added test that verifies that p/c filters never cache. Made the has_parent & has_child filterbuilder's cache options a noop as well, like it is in the related parsers.",
  "f002d3954": "Never cache a range filter that uses the `now` date expression.",
  "f2fb114a3": "Only refresh id_cache if the parent field is active.",
  "db394117c": "Made sure that any filter that wraps a p/c filter (has_child & has_parent) either directly or indirectly will never be cached by making CustomQueryWrappingFilter extend from NoCacheFilter.",
  "0e418d18a": "Added no-cache infrastucture the the filter cache.",
  "fe2a70831": "remove bloom from clear cache API, add id_cache",
  "c6fefacb2": "move ack tests for cluster update settings to its own test with scope test, and all other ack tests to scope suite for faster execution",
  "602de0469": "A GeoHashGrid aggregation that buckets GeoPoints into cells whose dimensions are determined by a choice of GeoHash resolution. Added a long-based representation of GeoHashes to GeoHashUtils for fast evaluation in aggregations. The new BucketUtils provides a common heuristic for determining the number of results to obtain from each shard in 'top N' type requests.",
  "01c5be1da": "generic thread pool should always be cached when using generic thread pool, some elements in the code base rely on the fact that it will always be able to fork it",
  "4271d573d": "Page-based cache recycling.",
  "fdfc7d746": "Add cache stats to cat/nodes.",
  "6af80d501": "Optimizes performance of AllocationDecider execution. Instead of using loops over all ShardRoutings, do accounting in RoutingNodes. Speeds up recalculating cluster state on large clusters.",
  "0469cca4b": "properly support global transport compression with new bytes transport request optimization",
  "a9e259d43": "Introduce BytesTransportRequest, allowing for downstream network optimization in buffers usage When sending a request, mainly to multiple nodes, if we already have the 'body' of the request in bytes, we can share it instead of copying it over to a new buffer. Also, it helps a lot when sending a relatively large body to multiple nodes, since it will use the same body buffer across all nodes",
  "292e53fe7": "The short circuit mechanism always needs to be wrapped with the live docs. In certain scenarios the live docs isn't passed down with acceptedDocs. For example when a has_child is wrapped in a filtered query as query and the wrapped filter is cached. The short circuit mechanism in that case counts down based on deleted docs, which then yields lower results than is expected.",
  "9fe2b8e07": "Randomly use a cached filter. Wrap the ChildrenQuery in a XFilteredQuery to also execute other code paths (scorer#advance)",
  "f465a6b58": "field level field data cache should take into account a null listener also, cleanup the onRemoval code",
  "dab841d4e": "Revert Ignore slow log configuration on shard creation",
  "10810f00d": "Ignore slow log configuration on shard creation",
  "06938e6fb": "Fixed fetch subphase to not recreate the HitContext for each hit, so that the object cache stays the same",
  "46edfc484": "[DOCS] Add some documentation about the performance of `_source` usage in scripts.",
  "c63741db0": "Introduce a new ImmutableOpenMap this map is a 'true' immutable map, encapsulating an open impl, and has a builder that allows it to be built easily. the builder has the optimization of using clone if its being built based on an existing immutable map.",
  "81089fb22": "Fixed concurrency issue in simple id cache. The lget() of a map can only be used if the map isn't shared.",
  "5cd56e5ce": "Improve new field mapping introduction performance Improve the introduction of new fields into the concrete parsed mappings by not relying on immutable maps and copying over entries, but instead using open maps (which will also use less memory), and using clone to perform the copy on write logic",
  "454dc5348": "Add back hashed BytesValues optimization that got lost in a previous commit.",
  "89de3ab62": "Added simple count down class that allows to be fast forwarded",
  "1f117c194": "Support the `has_child`, `has_parent`, `top_children` queries (and filters) in other apis than just search api. The queries are also now supported in count, explain (return dummy explination) and delete by query apis. Migrate SearchContext.Rewrite to Releasable. All the parent child queries are now implemented as Lucene queries and the state is kept in the Weight. Completely disable caching for `has_child` and `has_parent` filters, this has never worked and it also can also never work. The matching docIds are cached per segment while the collection of parent ids is top level.",
  "5396d8e14": "Copy slow in wrapped comparator even if root doc is the first doc in the segment.",
  "71ebb14b5": "Add ESAbortPolicy to cached pools",
  "e173f9a36": "Added test for verifying the id cache size if the clear cache api is invoked.",
  "f0914d13a": "refactor cache recycler, introduce thread local one, and default to it",
  "dbed36a13": "Added support for `tests.failfast` and `tests.maxiters`",
  "263c5808b": "Don't cache BytesRef in ThreadLocal",
  "35deed9bc": "indices.clear_cache",
  "6a5d2bf76": "remove cached stream output start to build the infra for simpler migration to netty 4, starting with removing the cache stream output handling as it will come built in",
  "f2614b22d": "Zen Discovery Cluster Events to have Priority.URGENT Master node cluster state events resulting in zen discovery (node gets added, removed, for example) should be processed with priority URGENT as its always better to process them as fast as possible, and not let other events get in the way. closes #3361",
  "9f6117612": "cache recycler now node/client level component",
  "f4d189539": "guice optimization only under debug logging use the source provider to find the line number through stack trace elements, otherwise, its very expensive",
  "4c8f3de34": "Fixes class cast exception when`top_children`, `has_child` and `has_parent` queries are cached via `fquery` filter. The error only occurs for `has_child` and `has_parent` if `score_mode` is used. Closes #3290",
  "530ae2169": "By default, we don't cache GCE API calls `refresh_interval` = 0.",
  "40cd549c3": "Ignore live docs when loading field data, the ID cache and filter caches.",
  "455bc3246": "Moving forbidden-api checks to compile phase instead of test phase (fail fast)",
  "991b5abdf": "Terms Filter Lookup: When on cache key defined, use terms values as key to filter cache closes #3240",
  "80ede081c": "Lookup Terms Filter _cache parameter not being taken into account fixes #3219",
  "79e54dbe7": "Added basic description of the 'recycler' parameter in the `_cache/clear` API",
  "c2f4bbe1a": "Added the API definition for `_cache/clear`",
  "e580507fb": "wait for yellow after the index is created also, remove starting one node, it not useful for the test, and slows down the execution",
  "52edc4c65": "Fixed issue where 'fast' should filter can make documents that didn't match the must or must_not clause a match again. Relates to #2979",
  "59a741cee": "Properly cache parent/child queries in the case they are wrapped in a compound filter. Closes #2971",
  "a1c62759c": "remove size bound from cache recycler for performance reasons",
  "2d13aa29f": "s/ES.RECYCLE/es.cache.recycle",
  "9a1c03408": "Added support for the `_cache` and` _cache_key` options to the `has_child` and `has_parent` filters. Closes #2900",
  "20e6df9f3": "Optimization in fielddata cache where ordinals are used instead of flat arrays when number of unique values is low",
  "5c90e5f94": "If no options are specified with the clear cache api then all caches should be cleared. Closes #2886",
  "4fd8c2c6d": "Ordinals were omitted from fielddata cache size calculation if field has more than one term. Closes #2882",
  "9f6c8c88f": "improve on shard level filter/id cache stats use just the removal listener and back to the IndexReader#coreCacheKey as the actual field as part of the cache key",
  "5af634369": "allow to disable the optimization of removal of ords on single value numerics/geo field data field data settings in the mappings can have ordinals=always option",
  "54f685674": "Thread Pool: Update default settings (move from default cached to fixed) closes #2858",
  "31d1e6cfe": "Field Data: Simplify field data cache settings closes #2843",
  "473473e86": "remove the field settings for query parser cache, not really relevant",
  "c18c609af": "Date math in query_string caches now() fixes #2808",
  "c298c1917": "don't use cache for ordinals for small max ord",
  "a7da27c71": "Field Data: Add `node` level cache type closes #2722",
  "50d121315": "add ability for cluster health to wait for current events to be processed help with tests that run on slow machines",
  "361d6bf89": "spin a bit to wait for condition in test, so slow machines will still run it correctly",
  "4714a6acc": "Clear cache: allow to invalidate specific filter cache keys closes #2653",
  "37f16127c": "Fix ScriptFilter cache key calculation",
  "6b49457d9": "Optimize conversion to a cacheable DocIdSet",
  "681239b41": "Warmers do not load field data cache for sorting on new segments fixes #2649",
  "f98bd654a": "Fix filter cache stats calculation",
  "360d7d942": "default for paged_bytes for string type less memory overhead, though a bit slower on the execution side for facets, and might require more memory per facet execution",
  "20f43bf54": "add hasSingleArrayBackingStorage allow for optimization only when there really is a single array, and not when there is a multi dimensional one",
  "6b92b592b": "allow to clear by reader the new field data cache",
  "af757fd82": "more usage of field data note, removed field data from cache stats, it will have its own stats later on (cache part is really misleading)",
  "e82f96f1e": "Make script cache configurable and bounded",
  "720feca3c": "optimize search hit to use Text for type and id this will reduce serialization string overheads, and faster xcontent(json) generation",
  "c2f8ee105": "add a marker CachedFilter this allows to easily and globally check if we cache a filter or not, all filter caching uses this marker interface",
  "c36638d15": "not delete filter improvements - don't check no null for liveDocs, since we know they are not null with the check for hasDeletion - improve iteration over liveDocs vs. innerSet, prefer to iterate over the faster one",
  "b4f85ee42": "no need to check for log levels we already do that when we log, and those are set to TRACE most times for slow log (since logging is based on thresholds)",
  "a274d9386": "Add types and stats to search slow log closes #2455",
  "05746adeb": "lucene 4: Set number of replicas to 0. Makes the test run faster.",
  "ffd262e96": "lucene 4: rollback optimization in SingleFieldVisitor for now to make it work",
  "53d9b13e2": "lucene 4: fix optimization check to set docs_only+omit_norms",
  "24ef98762": "lucene 4: Upgraded the simple id cache.",
  "15c9cd514": "lucene 4: Field name no longed interned when loading field data cache and return empty field data cache for fields that don't exist.",
  "386c2ebdb": "lucene 4: remove bloom cache we can add bloom cache, if we need it, as a codec on the uid field we still need to rewrite the UidFilter to not use bloom, but that will be the regular one",
  "f9b0fcb3a": "remove BufferedDeletesStream by default, we will put a bloom filter code on the _uid field, so no need for the optimization of using bloom filters when trying to delete a doc by _uid term per segment",
  "2fa017db1": "Terms filter: Add `or` and `or_nocache` execution modes closes #2306",
  "2532761c5": "increase the clean interval of filter cache",
  "05653cbda": "move cleaning filter cache on closed readers to separate thread improve cleaning the global weighted cache when a reader closes, move it to a separate thread, so iterating over the cache entries will nto happen on each segment closed, but instead be 'bulked'",
  "afc99ac42": "Added id cache size to nodes stats api",
  "7bf233a17": "fix cleanup of of has child/parent check if the collected uids were processed before trying to push them back to the cache",
  "3cd54fc4e": "Improve `has_child` filter / query performance (#2251) Added a new has_child filter implementation, that works _uid based instead of bitset based. This implementation is about ~2 till ~6 times (depending on the query) faster than the already existing bitset based implementation.",
  "c33ca2921": "small optimization for global facet with facet filter, by removing the double check on the facet filter",
  "3338736c8": "improve cached buffer allocation sizes based on jvm heap configured",
  "016e2e728": "Have rest request also allow to get the content as a streamable (note, this will break plugins that implement a rest handler..., like wares, thrift, and memcached, until they are upgraded)",
  "6eb419649": "better/faster parsing of update request (with upsert)",
  "feb81dd36": "improve filter cache cached value to store docset only",
  "4f59e5d28": "combine cacheable method of bit sets into one method",
  "de3c74ab9": "add a flag to restore old multi value behavior with fast vector highlighter",
  "ccea82596": "terms filter uses less memory when cached move from a TreeSet to an array, sorting on creation",
  "2d46b4102": "improve iteration on multi valued field data by breaking fast",
  "f87632fab": "Query DSL: term/terms filter performance improvement (bulk reading), closes #1972.",
  "771225ccc": "add logging with a reason why the cache is cleared (filter and field)",
  "f7c9dd11e": "add trace logging for how long it took to load field data cache",
  "de730993c": "better printing in slow log output",
  "b83378f4c": "Add `cache` thread pool to handle cache loading of async caches (bloom filter), closes #1777.",
  "c08b96824": "rename the cached thread pool to generic (from cached), since really, cached is meaningless, and its actually a generic thread pool we use for different operations",
  "4a8d6deae": "add getters for mapper service and field data cache in doc lookup",
  "278e5d3a4": "Transport buffer overrun can happen because of byte buffer reading optimization introduced in 0.19.0.RC1, closes #1686.",
  "21405f5aa": "Highlighting: Add boundary_chars and boundary_max_size to control text boundaries with fast vector highlighter (term vector), closes #1614.",
  "a18021c77": "Filter cache to have just weighted (node) and none, and index query parser cache to be size based, closes #1590.",
  "8cf8b478a": "Scan Search: Improve performance while scrolling through it, closes #1579.",
  "a4e4235d9": "move sort optimization when sorting by _score to sort parse element from the query phase execution",
  "0f1a908ba": "improve multi field highlighting with fast vector based highlighting by caching the custom query across field mappers (one when there is field match, and one when there isn't)",
  "4e6217c54": "simplify toString for cached filter",
  "ac2c2fb48": "enable unsafe optimization in lzf for 0.19",
  "ed281fbfd": "Index shard search slow log (query and fetch), closes #1462.",
  "93f1d50c1": "configure the scheduled TP to not wait for delayed execution, so we shutodown faster",
  "724611f24": "don't clear on both obtain and release for the search cache",
  "56a4c98e8": "Allow to specify a specific field in the clear cache API, closes #1374.",
  "e33dbcd93": "more small optimizations to term creation",
  "56a2833de": "Performance improvement when creating a multi-value field cache",
  "ee585ad96": "change executor to be management and not cached for stats/status/info APIs",
  "ef47308ea": "allow to change indices.cache.filter.size setting through cluster update settings api",
  "1c555679a": "small optimization when sorting based on count and same count entries requires sorting based on term",
  "7af84869f": "Invalidate cache stats when clearing the cache, closes #1220.",
  "0f251bf6e": "Cache Stats: Computing the filter stats using the default weighted filter cache is expensive, closes #1201.",
  "a5a46b234": "make sure not to use cached stream when writing the metadata to shared gateway",
  "7de072b14": "more small optimizations",
  "8c9dffc23": "optimize breaking strings based on commas, and small optimization to resolving routing values",
  "fbd6e85ea": "Query DSL: Allow to associate a custom cache key with a filter, closes #1142.",
  "5a8b27b9d": "small optimization to counting search shards",
  "bac6240d1": "improve clearing caches in guice",
  "8bb448473": "more optimizations for sharing same analyzers across different indices on the same node",
  "d44a79660": "increase default keep alive of cache, management and merge thread pools",
  "7ff07ebaf": "Use cache streams to copy over byes, not the byte array",
  "fe52c5665": "better cached stream output logic, and reduce byte array copying when sending a message over the transport",
  "45956a5a2": "optimize empty cached filters to return null",
  "b61735d8e": "Filter Cache: Introduce new `node` level filter cache and make it default, closes #959.",
  "e948c366f": "optimize cache recycler memory usage",
  "6f80e306d": "Field Cache: Allow to set `index.cache.field.expire` when using `resident` type, closes #957.",
  "3b5c133c7": "Filter Cache: `soft` filter cache can cause bad memory behavior, closes #946.",
  "f3e032315": "(Small) optimization to has_child filter, closes #880.",
  "49ac30801": "more cache cleaning",
  "013c4e9fa": "improved cleaning of cached parser context",
  "990f37158": "better cached streams logic",
  "d8d47abcb": "no need to cache filters again when handling named filters",
  "dedbedbb7": "Update Settings: Allow to dynamically set filter cache settings, closes #874.",
  "90b88fe4b": "add TODO optimizations comments",
  "3c233347b": "make sure we keep order in mappings when recovering so there won't be reparsing of the mappings on nodes (introduced with faster recovery work done on gateway)",
  "56c9783cb": "remove using field cache when indexing string fields for now",
  "166493f9d": "properly clean mapper data, and cache some mapping structures",
  "fb35b1c99": "clean guice caches after creating injectors so it will take less memory",
  "9927fd4cd": "fix none bloom cache to proper name",
  "8eab5ec52": "experiment with lab for filter cache, disabled by default for now, also, move to use soft reference on the whole reader key value, and not per filter (less load)",
  "991683efa": "remove clearUnreferenced from caches, no longer need it",
  "49e2f55ab": "actually register the eviction listener with soft / resident filter cache",
  "4603d1050": "faster handling of a case where each doc has multi valued values for different facets, also, don't take into account missing value values (and in the future, we can also count those per bucket if needed)",
  "b479bc58f": "faster handling of a case where each doc has multi valued values fields in histogram facet",
  "7fcf82af8": "faster handling of a case where each doc has multi valued values fields in terms stats",
  "4721f9aa6": "fix cache recycling logic to make sure we don't override our own data in facets",
  "9b8eceb22": "Histogram Facet: Add ability to define bounds (from/to) to both improve performance and provide additional bound filtering, closes #834.",
  "d845a306f": "fill sentinal proeprly when its not in cache",
  "90a339ad5": "Date Histogram Facet: Improve value field case performance, fix wrong total computation with multi valued fields by introducing total_count, add min/max stats, closes #831.",
  "46088b9f8": "Histogram Facet: Improve value field case performance, fix wrong total computation with multi valued fields by introducing total_count, closes #829.",
  "c9838d5c7": "use cache recycler for count histo and data histo facets",
  "0069d5a75": "add adler to checksum, faster and is good enough with length check for our use case",
  "8c9000c54": "Extend stats API to include filter's cache count and eviction count, closes #802.",
  "e759b4c97": "Add option to expire filter's cache based on access time, closes #803.",
  "4bdae621f": "Scripts: Allow to register native scripts (Java) for better script execution performance, closes #752.",
  "60b423b74": "Don't 'double' cache a facet filter / query facet, closes #734.",
  "5082ad6d1": "Clear Cache API: Add specific cache clear for `id`, `filter`, `field_data`, `bloom`, closes #716.",
  "d054c8c14": "use cached thread pool to do cluster state gateway snapshotting",
  "c7add5f37": "upgrade to mvel 2.1 snapshot to gain performance improvements",
  "cebdae570": "refactor script execution handling to improve performance, also introduce specific search script executor",
  "20c77a2ac": "clear the percolator reader from the cache explicitly",
  "38ea07cfb": "fix field data cache setting: used under index.cache.field.type, available values: resident, soft, weak",
  "89314f29a": "improve multi value field cache handling both in terms of memory usage and GC behavior",
  "233ed1f8c": "improve multi value field cache handling both in terms of memory usage and GC behavior",
  "5c08271e7": "improve numeric stream analysis performance",
  "3c3d01347": "improve all stream analysis performance",
  "66d63055d": "Add to node stats the number of times field cache was evicted due to memory constraints, closes #603.",
  "754b0d7a0": "Add `resident` field cache type, closes #602.",
  "019359a89": "add more scanning options on the field data cache",
  "d8aef57ba": "add filter_cache_size to node stats",
  "4245eb739": "add node level field cache size to node stats api",
  "e313379ed": "only force shutdown on cached threadpool if its not the same as the execture service",
  "9f72a8d68": "use cached thread pool for notifying on disconnections",
  "ac73334c8": "make id cache an index component, so a new instance will be created per index",
  "bb0d7190e": "make id cache an index component, so a new instance will be created per index",
  "eef3a95fa": "move the query parser cache to be index level and not node level",
  "4a3e5b634": "Query Cache: Invalidate the query cache when mappings change, closes #532.",
  "99a3e615a": "Improve performance when searching across multiple types, closes #478.",
  "d487d809e": "Query DSL: Revert back and have range, terms, and prefix filter _cache set to true, closes #456.",
  "3a9dc8f45": "change back to cached thread pool",
  "5804e9132": "Query DSL: `term` filter to have `_cache` set to `true` by default, closes #453,",
  "529303c53": "Query: match_all query (also in query_string: *:*) is very slow",
  "0a0ac3579": "bring back query parsing cache (weak)",
  "bc4121c06": "Query DSL: `term`, `term`, `prefix`, and `range` filter are now weakly cached, for more strong caching, set `_cache` to true, closes #450.",
  "517f3eb0f": "chance default query parser cache to none from weak",
  "deada942e": "Query DSL: `constant_score` and `filtered` queries cache filters by default, remove it, closes #449.",
  "c37a0afbf": "improve update of mappings, and delete index process with the new optimization of when index is created",
  "bad45de7a": "fix wrong handling of empty param in thrift/memcached transport",
  "d9f966d83": "Query DSL: Numeric Range Filter - A filter that uses the field data cache to perform numeric tests, closes #435.",
  "e63847f77": "add hints on when to first perform GC, make small GC happen faster resulting in less chances of stop the world GC",
  "1578da404": "improve geo internal cache of lat/lon, stored two double arrays instead of an array of GeoPoints.",
  "485f90414": "Default to not using compound file format for the index (increases number of open files, but faster indexing and recovery), closes #384.",
  "9bb86ea86": "imrpvoe boolean filter performance",
  "f301138e6": "Change default thread pool to scaling from cached, closes #381.",
  "20b6688b0": "make ping tests run faster using cluster state api",
  "a2011e015": "no need to cache match all filter",
  "2d5883ccb": "improve normalization performance from one content type to the other",
  "4822517d5": "add query parser cache to cache common query strings (+settings) with the parsed queries",
  "a47638dd3": "imrove filter caching handling by not holding an implicit ref to the parent cache",
  "de05a10ae": "use fastGet in docset",
  "807c485a3": "make the cached compile scripts a soft map",
  "46b58ce77": "Memcached transport does not support version, npe when no uri, closes #342.",
  "9d08e56d8": "cache nodes store metadata for on a shard basis when iteratring over the unassigned nodes",
  "4bfd0a8c2": "cache commit points during smart allocation based on local storage when recovering from gateway",
  "7ae8d4c66": "thread pool type setting is wrong, fix blocking max setting to have a minimum of 10, use cached TP where needed",
  "113ea1bb1": "don't throttle gateway recovery based on peer recoveries (gateway recoveries are important to do as fast as possible). still throttle peer recoveries based on both.",
  "0c72bb212": "better writing of local md5 caches",
  "04ae1581a": "fix NPE introduced on optimization of index status on docs status creation",
  "c10544479": "refactor cached streams into a separate class",
  "e1226626b": "improve thread cached bytes allocation",
  "09bbf1160": "fix dep on hamcrest for memcached plugin",
  "300f38ee3": "improve memcached test",
  "2eeb4ebd8": "improve memcached test",
  "d657d4447": "more shard relocation tests, create a cached executor that can be used to allocate threads that are not affected by the actual thread pool impl (can always fork, no blocking)",
  "910ad2a40": "fix optimization to not do sorting when searching with score 'desc' sorting",
  "8d669ff54": "move sorting to be done using the new fielddata cache, and not using lucene built in FieldCache",
  "97b5b4152": "enable eager cache eviction based on readers, requires a nasty hack to Lucene, basically overriding two classes to hook into when a reader actually gets closed (and only enabled when elasticsearch is before lucene in the classpath, which we take for in the startup scripts)",
  "267016758": "improve handling of memory caching with file system, only force compound file when really needed (when an extension that exists within the compound file is part of the memory cached extensions)",
  "2908418d3": "checn the default byte buffer cache to 200mb, now that its global per node",
  "1d39bb4d5": "cache md5 computation for unallocated shard and reused it",
  "3f6cd4673": "allow to configure tcp network modules (transport, memcached and http) to use blocking io (just enabling it to do some performance tests)",
  "33d357dbb": "Memory Store / FS Memory: Create a node level memory store cache and allocator, closes #235.",
  "c4aff14e1": "remove field options from field cache and freqs, simpler and they are not used in any case",
  "dbb7df742": "protected if the cached stream got evicted on us",
  "477024e3b": "cached termsSet used in dfs phase",
  "2cdb7bc05": "change jclouds to use cached thread pool",
  "a8a4bbc30": "internal optimization - share built in analyzers on the node level and not on index level",
  "bd6b89f7c": "Query DSL: Allow to control if filters should be cached, closes #181.",
  "cb5500919": "add filter cache tests",
  "dc5bb2033": "no need to cache the analyzer providers",
  "8d3347bb5": "Memory Monitor: Remove explicit GC call, clear cached instead, closes #179.",
  "7b1aac5bb": "eagerly clean cache when shard gets closed",
  "5e4343b48": "change how filter cache works, do weak/soft on IndexReader key, so we release the IndexReader on memory constraints",
  "b49864299": "fix wrong optimization on boolean query",
  "7fe524351": "share cached bytes",
  "9872b4977": "cache data stored in http",
  "e81d559f5": "update memcached name to be transport-memcached",
  "9a35ddcb6": "add memcached.enabled setting allowing to disable memcached even if its added as a plugin (by default, it is enabled)",
  "d99738944": "add annotation documentation for memcached handlers",
  "3e430c2ca": "memcached: add binary protocol support",
  "51aac0cdf": "memcached initial work",
  "1b8bb9890": "make http a bit faster by improving parsing of qstring",
  "daac94092": "improve camelcache and underscore conversion",
  "91d5beca9": "change cache to memory in fs in memory storage of certain files, better name since its not really caching, its actual storage",
  "fd574880f": "Clear Indices Cache API: Allow to clear indices cache, closes #101",
  "0e3ca48aa": "add type to filter cache",
  "2ea7423f3": "don't cache count queries",
  "fa55c40c8": "Index FS Store: Allow to cache (in memory) specific files, closes #82",
  "40b0dfdde": "count should be cached as a filter",
  "46ff97af5": "refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption (apply to search)",
  "defb6a336": "refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption (apply to count and delete by query)",
  "c111e1ab8": "refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption",
  "687d7955e": "slight performance improvement in dfs phase"
}, "elasticsearch-analysis-ik": {
  "bafb724": "#33 fix performance issue"
}, "elasticsearch-sql": {
  "6bf9ad5": "#243 query optimization - use filter context when not ordering by score",
  "386f79e": "I think this need precision_threshold offset. In my cluster, there is slow query problem with precision_threshold. With 40000, cardinality agg is too slow. So it will be good for this project.",
  "0e85989": "hintLimit optimization and tests",
  "4713a1b": "bugfix optimization should be and not or . hints refactor+tests+multiple hints support",
  "93bb2f3": "optimization to hashJoin with hint : /*! HASH_WITH_TERMS_FILTER*/ filter second table results on query"
}, "emojicon": {
  "45b2785": "add static map as cache layer to prevent multiple calls to getIdentifier for the same resource",
  "08b9c24": "The performance quickly decreased as the limitless recent list grew."
}, "epic": {
  "": ""
}, "epoxy": {
  "b9744d2": "Incremental annotation processor and processor optimizations (#972)",
  "993e40a": "Added method to clear model cache and force a model build (#583) (#586)"
}, "error-prone": {
  "0951bf9": "Set an explicit `serialVersionUID` in a refaster AutoValue class",
  "70942e0": "Replace guava cache with caffeine",
  "7f459e1": "Refaster: support method invocation type argument inlining",
  "71e36ec": "Disable by default a warning with performance bugs",
  "21ab00e": "Drop pre-JDK 11 logic from Refaster's `Inliner` class",
  "3d8dfd4": "Prevent access to `TreePath` when computing data to be cached through `VisitorState`.",
  "7598623": "Fix quadratic-time performance in ParameterName",
  "4c7dff5": "Improve performance of Unicode-detecting checkers",
  "7cd5def": "Support void placeholder expressions in Refaster",
  "432dd70": "Use alternative API to find the parent of a node for precedence finding in Refaster.",
  "fbed4a2": "Port DescribeMatch to refaster, which is pretty well suited to this.",
  "5b417e8": "Expand on the error when a Refaster template is trying to be loaded, but the annotations required aren't on the classpath.",
  "69b2b71": "Fix another refaster test on JDK 9+",
  "6c7a048": "Re-enable some refaster tests",
  "04e227a": "Short circuit faster in `Inliner` on non-`@InlineMe` methods",
  "21cfe73": "Mark ObjectEqualsForPrimitives as a performance Error Prone checker.",
  "ca6b530": "Handle `@SuppressWarnings` in refaster",
  "a9fc658": "Don't cache isInherited across compilations",
  "356416b": "Fix `ClassCanBeStatic` heuristic for refaster templates",
  "7f4d76b": "Migrate `*TestHelpers` to in-memory file objects and the cached filemanager",
  "723463e": "Update Refaster's static import detection to not erroneously try and import class tokens (e.g.: String.class) as a static member of 'class' on the type.",
  "5bb7089": "Improve handling of synthetic generated constructors in refaster",
  "231247d": "Drop `@Nullable` from `RefasterRule#afterTemplates()`",
  "765d733": "Refaster: Add an informative exception for an invalid template when @AllowCodeBetweenLines is specified for expression templates, instead of throwing a ClassCastException.",
  "dae56a6": "Have Refaster resolve classes against the appropriate modules",
  "7ce2bf6": "AndroidJdkLibsChecker performance improvements",
  "926e6f2": "SuggestedFixes.compilesWithFix: check that extraOptions is empty before fast-returning, because the extra options may affect compilation.",
  "cf075b4": "Improve performance of annotation scanning",
  "2b65c28": "Simplify a Supplier, and get it cached to boot",
  "cd23954": "Add support for inline caches",
  "8971f97": "Fix some AutoValueImmutableFields warning in refaster code (3/N)",
  "c8c1cda": "Fix some AutoValueImmutableFields warning in refaster code (2/N)",
  "21fa686": "Fix some AutoValueImmutableFields warning in refaster code (1/N)",
  "b27b6ab": "Fix AutoValueFinalMethods warnings in refaster code.",
  "bfb1789": "Add a cache around ASTHelpers.isInherited",
  "73f86a5": "Support varargs on constructor invocations in Refaster.",
  "bd99432": "Remove slow fallback to JavaCompiler#resolveIdent in VisitorState",
  "52b9c65": "Update the Refaster rule build instructions",
  "961559b": "Use valueOf method instead of constructor since valueOf is likely to yield significantly better space and time performance by caching frequently requested values.",
  "c66498f": "Temporarily disable some refaster tests on JDK 9",
  "bb30383": "Prepare RefasterRuleCompiler for Java 9",
  "aa8e521": "ParameterName: make the fast path faster",
  "c2e4cfa": "clear out Checker Framework cache after compilation to avoid leak",
  "cd9619d": "Recurse down to find Refaster rules instead of just scanning the single top level class.",
  "66e5cb7": "Hand-lambdafy Refaster internals, including some internal helper methods and rearrangements.",
  "cf940b4": "Lambdafy Refaster.",
  "19024d0": "Initial version of an open source refaster, with an example in the README.md.",
  "835ce72": "Set concurrencyLevel of type cache in VisitorState to 1",
  "9b9744b": "Add a way, in Refaster, to force the varargs overload of a method to be used with a @Repeated argument.",
  "8723f98": "Modify Refaster to correctly insert braces, or not",
  "34a6dc4": "Fix Refaster NPE",
  "310d5c6": "Give up on a Refaster match",
  "6a025bf": "Fix some nits in RefasterRuleCompiler",
  "b9e27db": "Add a command line method to build a Refaster analyzer.",
  "0d11c44": "Change Error Prone and Refaster import ordering logic",
  "2bf33d5": "Add magic methods for emitting comments to Refaster.",
  "df4fd2d": "Add Refaster support for 'if fallthrough'",
  "d3a8dbd": "Fix RefasterRule from overly qualifying top-level Refaster rules.",
  "34f4f9d": "Change Refaster to output a serialized CodeTransformer",
  "01f7136": "Move Refaster source to third_party/java_src/error_prone.",
  "c8f8605": "travis-ci cache maven",
  "42ef0d6": "Fix for slow javadoc action on Google workstations",
  "b95d6ad": "Fix for very slow mvn package command",
  "f3e0287": "Performance optimization for CollectionIncompatibleType: don't create new instances of any objects in the matches() method. Introduced a new 'Supplier' concept so we can lazily get references to things rather than using the arguments to 'matches'. I'm very curious how much performance this actually buys us, since it introduces more indirection.",
  "a329500": "Optimization: try to create a single instance of our compound matchers rather than building them every time the matches() method is called. Sadly, some compound matchers are not purely compound; they use the state variable passed in. That makes it harder to re-use an instance of the matcher. We could do more of this optimization.",
  "f147b5d": "Small performance optimization for scanning files with one enclosed class",
  "543a8d5": "Small optimization for scanning compilation units, better comments",
  "54efcf4": "Profiled error-prone, and found the spot which needed the most optimization. We were throwing an exception to indicate a condition.",
  "4fa4171": "Refactored empty if checker to match on empty statements rather than ifs. Hoping to improve performance."
}, "eureka": {
  "743af8b": "addres cache bug with value supplier (#1245)",
  "f5c31ee": "Add ability to fail fast in DiscoveryClient construction if an initial registration attempt fails.",
  "68bdc17": "Fix a race condition on the server remoteRegionRegistry where the cached applications ref may be set to null if the network fetch fails.",
  "b1ac90b": "cleaner impl with fail faster as a configurable prop (enable by default)",
  "a3e6a9c": "Add fail fast option to AmazonInfo init (esp at bootstrap time) so that running with VPN will not unncecessarily cause long hang times waiting on each key's ReadTimeout.",
  "868ae65": "tweak some test timeouts as travis seems much slower than cloudbees",
  "9b9586c": "Adding configurable awsAsg cache expiry time",
  "7b8a8f1": "Move code not directly related to the update of the local cache outside of the scope of the timer.",
  "1cacbe2": "Create generic 'DiscoveryEvent' from which all discovery events are derived. Create new 'CacheRefreshedEvent' and make the DiscoveryClient fire it everytime it has refreshed its local cache",
  "f6212a7": "Create protected methods for statusChanged and cacheRefreshed events. Subclasses may override these methods if they need custom behavior. Move the code sending events to the eventBus inside these methods. Capture 'CacheRefreshed' events",
  "a387fdd": "Adding config for use (or not to use) the readonly cache in ResponseCache",
  "9ea97b5": "Use Jackson JSON serializer instead of XStream to improve serialization performance/memory usage.",
  "5ab86b9": "Merge pull request #434 from tbak/refactorings/string_cache",
  "b6335e6": "Refine string cache implementation.",
  "3fcfd72": "Add exponential backoff to heartbeat/cache refresh tasks.",
  "bfde56c": "Wrapping the discoveryClient's heartbeat and cacheRefresh threads in a supervisor thread that enforces timeouts.",
  "f497ad4": "add eureka.appinfo.initial.replicate.time property to allow faster initial registration",
  "cf5a756": "Fix Providers to cache and return the same instance",
  "964334e": "Replication optimization where the network traffic between eureka nodes are considerably reduced by executing the replication events as one batch instead of individual requests."
}, "EventBus": {
  "b95c914": "GitHub Actions: use built-in cache support from setup-java task.",
  "8c328d3": "move anonymous class detection after cache check",
  "75543c4": "checkAdd optimization: added faster 1st level check",
  "365d4b6": "ClassMapPerfTest to verify testHashMapClassObject is fastest",
  "4cf3f4c": "faster unit test: testUnregisterNotLeaking should only iterate heapMBytes build.gradle COMPARISON.md CONTRIBUTING.md EventBus eventbus-android EventBusAnnotationProcessor EventBusPerformance EventBus-Publish-Subscribe.png EventBusTest EventBusTestJava EventBusTestSubscriberInJar gradle gradlew gradlew.bat javadoc-style LICENSE README.md settings.gradle 2",
  "0b3fbb9": "work around for Class.isAnonymousClass() that is super slow, added ignoreGeneratedIndex builder flag, updated performance app with the new flag",
  "44b7004": "We cannot get @Subscribe annotations from anonymous classes, so fail fast",
  "cf6f736": "improving annotation look-up performance",
  "6913a30": "added eventInheritance checkbox in performance app",
  "bed1920": "Merge pull request #104 from jnagels/performance",
  "83d4795": "added basics for new performance comparison project",
  "a6a2d33": "make testSubscribeUnSubscribeAndPostMixedEventType less intense, but faster",
  "4b974f1": "performance tweaks"
}, "ExoPlayer": {
  "3bd08960": "Merge pull request #10959 from balachandarlinks:handle-sql-exception-in-cached-content-index",
  "881838ba": "Move slow mo logic to sample pipelines",
  "94f3b1bf": "Add muxer timer to detect when generating an output sample is too slow",
  "0be36d08": "Add a troubleshooting section about slow seeking",
  "59fc51ea": "Add fail-fast null checks to the stable Player API",
  "88658df3": "Verified encoding performance, removing TODO.",
  "092fbd6c": "Ensure re-encode on performance tests",
  "ffb75d74": "Skip performance tests if device is not capable.",
  "3d934844": "Add test to evaluate performance related encoding parameters.",
  "5b776255": "Add test to evaluate performance related encoding parameters.",
  "41e1b11c": "Allow the difference Bitmap to be saved to device cache.",
  "8d852f3a": "Allow the difference Bitmap to be saved to device cache.",
  "cf811080": "Save the bitmap produced by the FrameEditorDataProcessingTest to cache.",
  "7a5b3b3e": "Save the bitmap produced by the FrameEditorDataProcessingTest to cache.",
  "2054b290": "Pull files from the device cache after a test concludes.",
  "3cc64ae2": "Pull files from the device cache after a MH test concludes.",
  "2ebbdbef": "Move upstream.cache to common ahead of module split",
  "701be415": "Demo app: Fail fast if parsing invalid DRM config from JSON",
  "69c75fb5": "Use identical cache keys for downloading and playing DASH segments",
  "d9bc2231": "Use identical cache keys for downloading and playing DASH segments",
  "626c3e98": "Remove fastforward_increment and rewind_increment attributes",
  "15c565c7": "Rename fastForward/rewind to seekForward/Back in Player",
  "227ac89e": "Change TestPlayerRunHelper to fail-fast on playback error",
  "043c2e7e": "Move CacheDataSourceContractTest to c.g.a.exoplayer2.upstream.cache",
  "53d67daa": "Add available commands to fast forward and rewind",
  "e4263c4a": "Add fast forward and rewind methods to Player",
  "46687fec": "Allow fast forward and rewind actions in compact view",
  "a10e9de4": "Check that cache dir exist",
  "0c22810a": "Merge pull request #8459 from WonderzGmbH:fix/8253-cache-exception",
  "c1501a3c": "Double-check that the cache directory does not exist and is a directory",
  "3509f507": "Fix fastforward and rewind color tinting and text alignment",
  "0191febb": "Fix fastforward and rewind color tinting and text alignment",
  "55afddf0": "Adjust SEF slow motion parsing to base data type off name.",
  "8f6b46f5": "Transformer: flatten slow mo video at normal speed",
  "cb1afa4b": "Add mdta metadata to SEF slow mo test sample",
  "47fbfa1c": "Correct naming of SEF slow motion mp4 sample.",
  "e962d717": "Add an MP4 sample for SEF slow motion to the test assests",
  "c0a0708f": "Extract SEF slow motion cues as Metadata",
  "9185b517": "Temporarily remove OPUS from sync samples optimization.",
  "d7280f09": "Add custom cache key to media item",
  "e1c48515": "add next, previous, fastForward and rewind to ControlDispatcher",
  "f146bad4": "HLS: Fix slow seeking into long MP3 segments",
  "2859a340": "HLS: Fix slow seeking into long MP3 segments",
  "c90c10c9": "Add NonNull annotations to upstream.cache and upstream.crypto",
  "ce01c79e": "Add a javadoc explanation for ProgressiveDownloader that explains that it tries to skip downloading already cached bytes.",
  "0a0ab8d5": "Avoid infinite recursion if cache file modified underneath cache",
  "c231e112": "Fix misreporting cached bytes when caching is paused",
  "92e2581e": "Fix CacheUtil.cache() use too much data",
  "f9d6f314": "Fix misreporting cached bytes when caching is paused",
  "42ba6abf": "Fix CacheUtil.cache() use too much data",
  "afd72839": "Disable cache span touching for offline",
  "e290f883": "Disable cache span touching for offline",
  "42b64122": "Provide flag to disable throwing of cache initialization exceptions",
  "68ef1d3e": "Temporarily disable cache UID creation.",
  "e502672b": "Encapsulate the key cache in HlsChunkSource",
  "42e69151": "Generate per-cache unique identifier.",
  "3a54d744": "Default to respecting the DataSpec cache fragmentation flag",
  "c2f6dd6b": "Only allow one layer of sub-directories in the cache for now",
  "1b62277a": "Disable cache fragmentation except for progressive",
  "0ed7ddec": "Reduce the number of cache files",
  "8de149eb": "Use custom cache key factory for removal as well as downloading",
  "75082194": "Simplify PlayerControlView fast forward and rewind implementation",
  "e1ba9b00": "vp9_extension: Enable fast loop filtering",
  "509be44f": "Ignore cache span rename error",
  "6380f26a": "Temp fix for b/77315136: Don't lock or check cache directories in SimpleCache",
  "b04ec219": "Omit fast forward and rewind actions when current window is not seekable",
  "eb34a2a1": "Improve DASH/SS seek performance",
  "522f8c8a": "Make demo app play content from download cache",
  "6674f63b": "Omit fast forward and rewind actions when current window is not seekable",
  "8d6832e8": "When CacheDataSource ignores cache, report to QoE.",
  "4b018b4d": "Document how unset length request are cached",
  "373935ae": "Make CacheDataSource detect cache availability change",
  "06bba08b": "Check if the cache is already empty before trying to evict more span",
  "9bdf1ee9": "Check if the cache is already empty before trying to evict more span",
  "3fbfe29d": "Modify CacheUtil.cache() for polling counters",
  "51132f58": "Make removal of non-existent cache span a no-op",
  "b2997180": "Make removal of non-existent cache span a no-op",
  "64188748": "Move cache related generic methods from DashDownloader to CacheUtil",
  "8cad99ba": "Add lightweight dithering to 10->8 bit conversion. Also optimize / 4 and % 4. I assumed the compiler would do this automatically but the performance bump implies it's not doing that.",
  "a9617af2": "Use fast surface switching on API level 23+ when possible",
  "e40bba28": "Add Cache.getCachedBytes() which returns the length of the cached or not data block length",
  "3edeec24": "Document passing null cacheWriteDataSink to CacheDataSource constructor",
  "2e7f9fb6": "Don't setContentLength() in CacheDataSource if the current request ignores cache.",
  "5c89bbed": "Fix leftover bytes in cached content index file",
  "4a0f224e": "Add a new flag to DataSpec which permits content to be cached even if its length can not be resolved",
  "39827fad": "Allow specifying a custom cacheKey to ExtractorMediaSource",
  "e803bff2": "Don't log FileNotFoundException while reading cache index file",
  "f3dbb746": "Fix unnecessary rewrite of cache index file after CachedContentIndex.readFile()",
  "25767146": "Fix possible failure in CachedContentIndex encrypted cache index file read.",
  "e84fa583": "Use ReusableBufferedOutputStream for cache index file write operation",
  "051be5c5": "Use buffers to speed up cache index file io.",
  "aefc5165": "Fix cache upgrade",
  "ff77d1e7": "Add index file to hold header information for cached content.",
  "53cc88e2": "DefaultOggSeeker small optimization.",
  "b4746edd": "Add cache initializtion signal to CacheEvictor ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=124374161",
  "9fd575e1": "Allow Representations to have custom cache keys.",
  "1a5d1235": "Fail fast if we can't play anything.",
  "ecaf329b": "Improve ParsableByteArray performance + enhance API.",
  "6d8c4dd4": "Add workaround for slow okhttp InputStream.close() on API levels 19/20.",
  "7c66b6ed": "HLS optimization #1 (refactor).",
  "3a9d08ed": "Misc performance/correctness tweaks."
}, "ExpandableTextView": {
  "": ""
}, "ExplosionField": {
  "55f7eda": "do some optimization according to the inspection from android studio"
}, "failsafe": {
  "91307d4": "Small optimization",
  "20af1ae": "use setup-java Maven cache (#321)",
  "9ba66e2": "chore: cache mvn build directories (#175)",
  "4cee3f8": "Enable fast travis builds"
}, "Fast-Android-Networking": {
  "d16b1ba": "okhttpClient configurable : add cache if null from client",
  "e5f9e40": "shut down option added and cacheManager deleted"
}, "FastBle": {
  "e467ee4": "optimization close method"
}, "FastHub": {
  "463e19c": "update dependencies, added fasthub debug firebase project.",
  "2dbfa60": "this commit adds in memory comments cache & fixes labels issue.",
  "e6343c1": "fixed commitComments empty state & enhanced fastScroller",
  "500efcf": "this commit fixes #544 and makes fastScroller to paginate as per #556 & preparing for 3.0.0",
  "eb80cfb": "this commit adds issue/pr number to feeds comment, enhance signature by adding fasthub as a link, removed link underline and fixes commit comment update.",
  "f2c4580": "this commit adds fastHub in signature as a link.",
  "8fe594d": "Merge pull request #333 from thermatk/fastscroller-integrate",
  "d368637": "integrate fastscroller",
  "3d9c56b": "added german & turkish language support as well as fastscroller for comments.",
  "54a7691": "fixed returning to app when opening fasthub from different app.",
  "68ad56e": "this commit fixes #273 and made comments to be cached to avoid webview loading data again.",
  "ef25469": "this commit, will changes how FastHub (look, behave) as of now, bottomNavigation will have pullRequest and Issues that are related to you to access them faster, this commit also fixes notification which broke in my previous release. finally menuDrawer has stuff :D",
  "b726c6e": "this commits adds the ability to download files into FastHub folder, for example downloading master.zip would be named k0shk0sh_fasthub_master.zip to differentiate between other files to close #188.",
  "fdbeb11": "statusbar color in pre-M, added fasthub repo to menudrawer",
  "3fd6c59": "caching repo files directory to access them faster, fix for issue labeling where it might be displayed if the user is not the owner of the repo."
}, "feign": {
  "064e932": "fix: upgrade com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider from 2.14.1 to 2.14.2 (#1947)",
  "daed53a": "[Snyk] Upgrade com.fasterxml.jackson.core:jackson-databind from 2.13.2 to 2.13.3 (#1633)",
  "fcbe60c": "fix: upgrade com.fasterxml.jackson.core:jackson-databind from 2.12.4 to 2.12.5 (#1506)",
  "c88b65a": "fix: upgrade com.fasterxml.jackson.core:jackson-databind from 2.12.3 to 2.12.4 (#1472)",
  "57677dd": "[Snyk] Upgrade com.fasterxml.jackson.core:jackson-databind from 2.10.5.1 to 2.12.3 (#1406)",
  "3052527": "gradle wrapper should be cached as well",
  "83f54c6": "Demonstrates impact of advice to cache Feign.newInstance",
  "99cef80": "Merge pull request #215 from rspieldenner/travis_cache"
}, "ffmpeg-android-java": {
  "": ""
}, "FileDownloader": {
  "2cbca6d": "feat: print sync to cache state to logcat when need_log is true",
  "2bccf22": "fix(no-response): fix no-response when switch between pause and start for the same task very fast frequency Closes #625",
  "0c129b3": "docs: add tips on the id-generator to avoid user cache something on two processes Refs #224",
  "edb3ef7": "demo: add depdency of okio just for testing its performance",
  "088e171": "prefs(code-performance): use field instead of method internal of the DownloadTaskHunter class",
  "bb8d033": "demo(performance-testing): add BufferedOutputStream performance testing in PerformanceTestActivity Refs #301",
  "9a52edc": "demo(shink): use buffer-shink instead of shink in performance testing page",
  "e683f9f": "demo(performance): add okio performance testing in performance page and add the average loop consume(0.5ms) which calculate in 6M/s speed(Mi5) as default to performance page Refs #301",
  "51bffc1": "prefs(basic-performance): use params instead of method for model#id to enhance the programs performance in FileDownloadRunnable",
  "b730957": "refactor(db-helper): use SparseArray instead of HashMap to optimize performance with modelMap used in FileDownloadService",
  "37c835a": "refactor: remove the separate i/o interface to update etag, integrate with updateConnected, optimize downloading performance",
  "126dde4": "demo(performance-test): add the performance test about Output",
  "1ada8fd": "feat(performance): avoid dropped ui refresh frame, all post to ui callback will handle by FileDownloadEventPool: Every {@link FileDownloadEventPool#INTERVAL} milliseconds post 1 message to the ui thread at most,and will handle up to {@link FileDownloadEventPool#SUB_PACKAGE_SIZE} events on the ui thread at most.",
  "8279a55": "refactor: check file reuse by cache'd downloadId",
  "5b1e6dc": "library: [enhance] no longer subject to the upper bound of 1.99G, with the results from PerformanceTestActivity,The SoFarBytes and TotalBytes parameters as long type is not hte performance bottleneck, but it's a direction",
  "5a5422b": "demo: add performance monitor activity",
  "059a8a0": "1. okhttp指定 force network虽然没有指定缓存，但是防止未来okhttp默认cache以至于踩坑; 2. 解决下载池中的任务被暂停，还会进行连接、一次数据读取相关下载的bug; 3. 重构: 将复杂状态基事件进行架构封装; 4. 将非下载进程中的下载队列与状态基绑定; 5. 非下载进程的copyWrite队列，改为线程安全主动控制队列; 6. 串行队列中，将失败自动将所有串行队列停止取消，这个操作还是放给用户自己选择较好; 7. 干掉bindActivityName，保持简单干净",
  "5acd4ad": "修复 由于重新开始任务，或者update一个DownloadModel，在cache层没有进行更新，只更新了数据库层的bug"
}, "FirebaseUI-Android": {
  "2274696": "Optimize build performance (#1422)",
  "6776cf7": "Optimize build performance",
  "e5fbab8": "Lockdown firebase arrays and improve index add performance (#898)",
  "c29d25b": "Merge pull request #489 from SUPERCILEX/cache",
  "129c34c": "Add android build cache to Travis",
  "f794736": "Also cache colors from resources",
  "076365d": "Make use of standard RecyclerView Holder optimizations."
}, "FizzBuzzEnterpriseEdition": {
  "": ""
}, "FlexibleAdapter": {
  "301b8cb": "Scrollbar improvements: - New resource colors that can be overridden: fast_scroller_bar, fast_scroller_handle_idle - New method setHandleAlwaysVisible - New attribute fastScrollerHandleAlwaysVisible",
  "cdc9f78": "Improved EmptyViewHelper. - Static creator methods (constructors are now private). - On going animations of emptyViews are now cancelled before changing again alpha value (fixes consecutive fast switching).",
  "5cb213a": "Merge branch 'customizable_fastscroller' into list_copy",
  "4b584c7": "Customizable fastscroller (#325)",
  "9b82302": "Customizable fastscroller (#313)",
  "eaac2ca": "Fixed #295 - Items not notified on auto collapse (using normal List instead of Hash to avoid Inconsistency detection. It will be slower on big List when collapsing).",
  "7ecdd32": "Small optimizations after the Pull Requests. Resolves #179 and resolves #190.",
  "d3200ba": "Improved performance on showAllHeader() and hideAllHeaders(). Updated behaviors in DemoApp.",
  "5096c6e": "Experimental: Improved performance in collapseAll() with big list. Experimental: Tuned AsyncTask. Explicit type argument T is replaced with <> diamond (min Java7).",
  "6ea3b8c": "New optimization to improve performance while filtering and refresh the entire data set. Updated default synchronization animations limit to 600 items.",
  "72e55f5": "Improvement performance when resetting filter flags for Expandables.",
  "e6ce919": "Small refactoring for the fix #133 part 1: call notifyDataSetChanged() - Method setFilterAnimationLimit() renamed to setAnimateToLimit() so that the method can optimize also the refresh. - updateDataSet() is also affected by this limit, improving performance during the refresh operation",
  "806852f": "Improved performance during filtering of high numbers of items. This fixes #133 part 1: call notifyDataSetChanged() - Animation during filtering will be performed if the total items are below the limit of 500 (modifiable value) 'current items' OR 'filtered items'; Above this limit, notifyDataSetChanged() will be called with no animation. - Added new method setFilterAnimationLimit()",
  "9c5634a": "Still a minor optimization of FastScroller",
  "85544aa": "Code optimization, Cast optimization.",
  "29b4390": "Code optimization, Cast optimization.",
  "95f7d37": "Restore now is much faster in case of restoreSelection is enabled.",
  "9502ec6": "Changed to 20'' the undo timeout and 1000 items, to make some test with Headers and performance. More support for Headers, they works in combination with restore items, in all situations (... the ones I have foreseen). Headers can also be deleted and restored in any situations: they are relinked all the time with the item below it."
}, "flink": {
  "77b1d8f70": "[FLINK-31693][Web Frontend] Bump http-cache-semantics in /flink-runtime-web/web-dashboard",
  "04dbdc0d0": "[hotfix][docs] Fix the example configuration of pipeline.cached-files. (#22273)",
  "e91eb5ec2": "[FLINK-31466][table] Apply Calcite's optimization of pushing filter to semijoin for FilterJoinRule",
  "0848815d4": "[FLINK-31437][hbase][docs] Fix wrong key 'lookup.cache.caching-missing-key' in 'hbase.md'",
  "753734f0a": "[FLINK-31272][python] Handle properly for SinkTransformation to avoid duplicate operators introduced by chaining optimization",
  "ba2b55df2": "[FLINK-30561][state/changelog] fix changelog local cache file not found",
  "ffecb68b1": "[FLINK-30904][docs] Update the documentation and configuration description of slow task detector.",
  "4fb5f5e48": "[FLINK-30902][runtime] Change reusable hybrid result partition to hybrid full to enable partition reuse optimization.",
  "21e844b6c": "[FLINK-30624][runtime] Introduce a new HeapPriorityQueue for StatusWatermarkValve to avoid affecting the performance of memory state backend.",
  "02b09eac6": "[FLINK-30707][runtime] Let speculative execution take input data amount into account when detecting slow tasks.",
  "b35cef599": "[FLINK-30704][build] Skip SBOM creation in fast profile",
  "4e3cd986c": "[FLINK-30601][runtime] Omit 'setKeyContextElement' call for non-keyed stream/operators to improve performance",
  "8e50e2479": "[FLINK-30332][network] HsFileDataIndex supports caching index entry and introduce config option to configure cache size.",
  "e6dc74ac9": "[FLINK-30332][network] Introduce HsFileDataIndexCache to cache and manage index data.",
  "23272f03f": "[FLINK-29768][runtime] Supports serialize and cache multiple groups of shuffleDescriptors.",
  "00cda3685": "[FLINK-29834] Clear Jackson TypeFactory cache on CL release",
  "c04985e6a": "[FLINK-28889] fail fast when multiple consumer is not allowed but register many times",
  "be46408c0": "[FLINK-29271][parquet] Use byte array instead of ByteBuffer to improve performance and be compatible with DirectByteBuffer",
  "3f863b1e2": "[FLINK-28820][Connector/Pulsar] Improve the writing performance for PulsarSink (#21074)",
  "cf70844a5": "[FLINK-29126][hive] Fix splitting file optimization doesn't work for orc format",
  "3d05f2752": "[hotfix][datastream] Fix cache invalidate with remote session cluster",
  "a90191126": "[FLINK-28860][datastream] Cache consumption in stream mode recompute result in case of cache miss",
  "2220f2492": "[FLINK-28751][table] Improve the performance of JSON functions with json path (#20397)",
  "97519d168": "[FLINK-29028][python][docs] Align DataStream.cache in Python DataStream API",
  "cf1a29d47": "[FLINK-27524][datastream] Introduce cache API to DataStream",
  "5405239de": "[FLINK-28419][table] Add runtime provider interface for full caching lookup + implement Periodic and Timed cache reload triggers",
  "a9f2e2037": "[FLINK-27523][runtime] Runtime supports producing and consuming cached intermediate results",
  "eee8804bb": "[FLINK-27223][python] Fix the state access problem when python.state.cache-size is set to 0",
  "fecd0fbdf": "[FLINK-26864] Fix performance regression from mailbox latency measurement",
  "90a5fef8b": "[hotfix][python] Cleanup the code to pass cachedFiles into extractPythonConfiguration",
  "388dac810": "[FLINK-27126][python] Respect the state cache size configuration for Python DataStream operators",
  "ead6db797": "[FLINK-27108][python] Fix the state cache clean up logic",
  "fb05fab5d": "[FLINK-25969][table-runtime] Clean up caches in CompileUtils more aggressively",
  "8d75a6ca7": "[FLINK-25848][connectors/kinesis] KDS Sink failing fast when bad credentials are provided.",
  "3be35d9c6": "[FLINK-25796][network] Avoid record copy for result partition of sort-shuffle if there are enough buffers for better performance",
  "7cb00d182": "[FLINK-25329][runtime] Use cache in memory graph store and support memory graph store in session cluster",
  "56c5034fd": "[hotfix][table] Expose table.exec.rank.topn-cache-size config option",
  "ed55843ef": "[FLINK-25658][ci] Use Nexus npm cache",
  "82b583ea0": "[hotfix][streaming] Improve StreamGraphGenerator's performance by using a IdentityHashMap to track transformations.",
  "dfad1d5c7": "[refactor][runtime] Removed extra methods for optimization of calculation of absoluteTimeMillis for ThroughputCalculator since they haven't been used anymore",
  "bf83614df": "[FLINK-25418][python] Install dependencies offline if the cache dir is specified",
  "4d142b3a4": "[FLINK-24489][CEP] The size of entryCache & eventsBufferCache in the SharedBuffer should be defined with a threshold to limit the number of the elements in the cache",
  "c35c5b57e": "[hotfix][table-runtime Improve performance of UpdatableRowData",
  "5eeef8371": "[FLINK-25092][tests][elasticsearch] Refactor test to use artifact cacher",
  "5b99a02a3": "[FLINK-25112][tests] Remove cache-ttl for Java e2e tests",
  "c782735a8": "[FLINK-25065][docs] Update document for 'lookup.cache.caching-missing-key' option for jdbc connector (#17918)",
  "f8fdb6713": "[FLINK-24861][connector][jdbc] Support to disable caching missing key for lookup cache (#17754)",
  "0d186fb19": "[FLINK-24875][ci] Eagerly create cache directories",
  "dbff294f2": "[FLINK-24746][ci] Use local Nexus cache",
  "3b163c715": "[FLINK-20443][API/DataStream] ContinuousEventTimeTrigger optimization",
  "f3c13fb76": "[FLINK-18312][rest] Add operation cache to dispatcher",
  "1b4340a41": "[FLINK-23833][coordination] Individually clean up the cache for ShuffleDescriptors",
  "8d77f85ff": "[FLINK-23616][python] Support chaining optimization when mixing use of Python Table API and Python DataStream API",
  "a8db36bf0": "[FLINK-23560][task] Fix performance regression by unnecessary throughput calcuations",
  "a3f72f20a": "[FLINK-23005][coordination] Pass ConsumedPartitionGroup to TaskDeploymentDescriptorFactory as the key of cache",
  "10db8b1d6": "[FLINK-21246] Fail fast if a failure occurs when triggering a checkpoint on a Task",
  "08e9343b0": "[FLINK-23368][python] Fix the wrong mapping of state cache in PyFlink",
  "992340eda": "[FLINK-23054][table] Join unique/pk optimization should based on upsert key",
  "4642c1f47": "[FLINK-23054][table] Rank update optimization should based on upsert key",
  "be15eb0f0": "[FLINK-22464][tests] Fix OperatorCoordinator test which is stalling or slow with AdaptiveScheduler",
  "6236473f8": "[FLINK-22074][runtime][test] Harden FineGrainedSlotManagerTest#testRequirementCheckOnlyTriggeredOnce in case deploying on a slow machine",
  "74078914a": "[FLINK-21174][coordination] Optimize the performance of DefaultResourceAllocationStrategy",
  "d29357791": "[FLINK-22307][network] Increase the default value of data writing cache size (not configurable) for sort-merge blocking shuffle",
  "106266646": "[FLINK-21103] Increased TTL for download cache entries",
  "4cabf9e26": "[FLINK-22011][table-runtime-blink] Support local global optimization for window aggregation in runtime",
  "940dfb0de": "[FLINK-22022][table-planner-blink] Reduce the ExecNode scan scope to improve performance when converting json plan to ExecNodeGraph",
  "cf35fe9f5": "[FLINK-21881][table-planner-blink] Support local global optimization for window aggregation in plan (#15412)",
  "5f0c76f2e": "[FLINK-21330] Optimize the performance of PipelinedRegionSchedulingStrategy",
  "61bc9429d": "[FLINK-21777][network] Replace the 4M data writing cache of sort-merge shuffle with writev system call",
  "f165c7261": "[FLINK-21778][network] Use heap memory instead of direct memory as index entry cache for sort-merge shuffle",
  "1b0e592cf": "[FLINK-21434][python] Fix encoding error when using the fast coder to encode a row-type field containing more than 14 fields",
  "b81392665": "Revert FLINK-21417 due to performance regression.",
  "c96c39544": "[FLINK-19158][e2e] Fix wget timeout mechanism and cache config",
  "7176881cc": "[FLINK-20914][core] Format the description of 'security.ssl.internal.session-cache-size' option",
  "4969b6f4f": "[FLINK-20954][python] Support state cache between bundles (#14628)",
  "3b8998d5f": "[FLINK-20642][python] Introduce InternalRow to optimize the performance of Python UDAF",
  "6ed081fce": "[FLINK-20640][python] Use cython to optimize the performance of Python UDAF",
  "69671a6a3": "[FLINK-20697][docs] Fix the data type of 'lookup.cache.ttl' in JDBC page",
  "5af1d007e": "[FLINK-20018] Allow escaping in 'pipeline.cached-files' and 'pipeline.default-kryo-serializers'",
  "dc49dc7f8": "[FLINK-19756][table-planner] Enable multiple input optimization by default",
  "840e8af87": "[FlINK-19688][network] Don't cache InterruptedExceptions in PartitionRequestClientFactory",
  "d5e81688d": "[FLINK-19733][python] Refactor fast_operation and slow_operation to make the produce functions consistent",
  "a91e3c7e5": "[FLINK-18373][state backends][tests] Drop useless RocksDB performance unit tests",
  "bd1e1f306": "[hotfix] Do not cache DataOutput in StatusWatermarkValve",
  "aa62e6490": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord",
  "247e45214": "[FLINK-19286][runtime] Improve region sorting performance",
  "f89c137ea": "[FLINK-19286][runtime] Improve region vertex sorting performance",
  "73e0e5c67": "[FLINK-19086] Revert '[FLINK-19052] [serialization] add constructor cache in PojoSerializer'",
  "162e3ead6": "[FLINK-19052] [serialization] add constructor cache in PojoSerializer",
  "61caf2ea1": "[FLINK-18935] Reject CompletedOperationCache.registerOngoingOperation if cache is shutting down",
  "6d72cc0e3": "[FLINK-18688][table-planner-blink] Fix binary row writing with incorrect order in ProjectionCodeGenerator by removing for loop optimization",
  "a5527e3b2": "[FLINK-10213] Task managers cache a negative DNS lookup of the blob server indefinitely",
  "a9d307485": "[FLINK-17824][tests] Fix resume_savepoint e2e test by slowing down the Source (#12671)",
  "44acd5017": "[FLINK-18152][Depl] Fail fast in JM scripts if memory configuration failed",
  "955a6832b": "[FLINK-17842][network] Remove NextRecordResponse to improve deserialisation performance",
  "204536b47": "[FLINK-17096][core] Simple performance improvements in WatermarkOutputMultiplexer",
  "3ab5d5815": "[FLINK-17842][network] Fix performance regression in SpanningWrapper#clear",
  "a87523538": "[FLINK-17799][network] Fix performance regression in the benchmarks",
  "de5e631fd": "[hotfix][python] Shows only the slowest 20 tests",
  "38058087a": "[FLINK-17722][python][build system] Keeps flink-sql-client_*.jar in cache between stages",
  "1a734c2b9": "[FLINK-17586][python] BatchTableEnvImpl uses the cached files registered in the ExecutionEnvironment to create the job pipeline. (#12050)",
  "f1d6336eb": "[FLINK-17552][network] Do not cache InputChannels in UnionInputGate",
  "bdc6693de": "[FLINK-16411][AZP] Use Maven cache in the same data center",
  "a49f75d70": "[FLINK-15486][tests] Remove timeout of LocalInputChannelTest#testConcurrentConsumeMultiplePartitions to avoid potential timeout problem on slow machine",
  "cb841fa17": "[FLINK-16072][python] Optimize the performance of the write/read null mask of FlattenRowCoder",
  "9bc6f6932": "[FLINK-16071][python] Introduce FlattenRowCoder to solve the performance issue of __get_item__ in Row",
  "8bb83c7fe": "[FLINK-13758][client] Support to register DFS files as distributed cache",
  "346e2e02a": "[FLINK-15512][state backends] Refactor the mechanism to calculate the cache capacity shared among RocksDB instance(s)",
  "c685ee96f": "[hotfix][doc] add section for various optimizations of reading Hive tables",
  "790a07787": "[FLINK-15348][hive] Fix orc optimization for version less than 2.3 by introducing orc shim",
  "e47bbcc61": "[FLINK-15194] Support registering directory as cache file in Yarn per-job mode",
  "300e249d5": "[FLINK-15171] [serialization] fix performance regression caused by too many buffer allocations on string serialization",
  "be967fa1f": "[FLINK-14346] [serialization] faster implementation of StringValue writeString and readString (#10358)",
  "2eab3d8d8": "[hotfix][runtime] Do state check before input check in LAZY_FROM_SOURCES scheduling for better performance",
  "135472e7f": "[FLINK-13725][docs] use sassc for faster doc generation",
  "9d45ad046": "[FLINK-12697][state backends] (follow-up) Minor optimization that avoids extra memory segment wrapping.",
  "12996bd8e": "[FLINK-14408][table-planner] Fix open() is not called if UDF is reduced during optimization",
  "070fae545": "[FLINK-14199] [runtime] Improving the performance of named mails by adding overloaded submission methods to MailboxExecutor.java that do not create a new array for empty arguments.",
  "8155d4655": "[FLINK-14150][python] Clean up the __pycache__ directories and other empty directories in flink-python source code folder before packaging.",
  "35e57a846": "[FLINK-11859][runtime] Small improvement to performance of SpanningRecordSerializer",
  "d82b5be26": "[FLINK-13363][docs] Add documentation for streaming aggregate performance tuning",
  "13d19b2be": "Revert '[FLINK-13725][docs] use sassc for faster doc generation'",
  "b347bade6": "[FLINK-13745][travis] Retain cache of most recent build",
  "065de4b57": "[FLINK-13725][docs] use sassc for faster doc generation",
  "ac375e4f9": "[FLINK-13723][docs] Use liquid-c for faster doc generation",
  "4452be3a6": "[FLINK-12982][metrics] improve DescriptiveStatisticsHistogramStatistics performance",
  "6d7c1bd94": "[FLINK-13236][table-runtime-blink] Fix bug and improve performance in TopNBuffer (#9098)",
  "9a292e228": "[FLINK-12815] [table-planner-blink] Do not register the intermediate optimization result as a table in batch and stream CommonSubGraphBasedOptimizer",
  "607cef159": "[FLINK-12864][python][tests] Improves the Python Table API test cases performance",
  "11a96fdf2": "[FLINK-12335][table-runtime-blink] Improvement the code and performance of class SegmentsUtil",
  "e038a801a": "[FLINK-12424] [table-planner-blink] Supports query optimization with multiple sinks",
  "4fe8f0981": "[hotfix][travis] Cleanup cache logging",
  "f0b4569ae": "[hotfix][travis] Exclude all jars from cache",
  "44d601d31": "[hotfix][travis] Extend cache info logging",
  "f1a451572": "[FLINK-12161][table-planner-blink] Supports partial-final optimization for stream group aggregate (#8148)",
  "299747fc6": "[FLINK-11871][table-runtime-blink] Introduce LongHybridHashTable to improve performance when join key fits in long",
  "2328ff3a4": "[FLINK-11715][table-planner-blink] Add optimize program to organize optimization phases.",
  "537e08859": "[hotfix][travis] Log commit ID ad cache directory",
  "04ede2c66": "[hotfix] [core] Subclass serializer cache in PojoSerializer should be a Map",
  "d3feadb80": "[FLINK-11089] Log filecache directory removed messages",
  "28e0b83dd": "[hotfix] Improve performance of GenericArraySerializer.copy()",
  "145dabaa4": "[hotfix][cep] Enabled distributed cache for CEP functions",
  "2c53a1752": "[FLINK-10537][network] Fix network small performance degradation after merging [FLINK-9913]",
  "2e2158222": "[FLINK-10325] [State TTL] Refactor TtlListState to use only loops, no java stream API for performance",
  "a20fd1d51": "[FLINK-9981][state] Testing and performance tuning for RocksDB-based priority queue",
  "230f81753": "[FLINK-9815][yarn][tests] Harden tests against slow job shutdowns",
  "0dc0e36f2": "[FLINK-9591][py] Remove remnants of distributed-cache logic",
  "bbf7ff227": "[FLINK-8790][State] Improve performance of rescaling an incremental checkpoint",
  "44c24c1bb": "[FLINK-9370][tests] Activate distributed cache end-to-end test",
  "1c7341ad1": "[FLINK-8845][state] Introduce RocksDBWriteBatchWrapper to improve batched write performance in RocksDB backend.",
  "87e54eb3b": "[FLINK-9070][state] Improve the performance of RocksDBMapState.clear() with WriteBatch.",
  "3df780902": "[hotfix] [build] Force delete corrupt jar files from cache",
  "a144d0f77": "[FLINK-8674][runtime] Improve performance of flushAlways in StreamRecordWriter",
  "58baf9f9c": "[hotfix] [shell scripts] Use SSH-less fast path for both 'localhost' and '127.0.0.1'",
  "b5d459a51": "[hotfix] [kinesis] Use ArrayList for faster shard state updates",
  "7e5a978ce": "[hotfix] [build] Print cache info",
  "63343fb8e": "[hotfix] [travis] Set distinct cache for Flip-6 build profiles",
  "1d38e0b49": "[hotfix] [checkpoints] Improve performance of ByteStreamStateHandle",
  "4319725cf": "[hotfix] [core] Improve local fs exists() performance",
  "c4acbb838": "[FLINK-8227] Optimize the performance of SharedBufferSerializer",
  "990df8f49": "[hotfix] [runtime] Minor optimization in CheckpointMetrics",
  "278989c7f": "[FLINK-7411][network] minor (performance) improvements in NettyMessage",
  "6612c0e13": "[FLINK-7617] [runtime] Remove string format in BitSet to improve the performance of BuildSideOuterjoin",
  "5db492aaf": "[FLINK-7141] [build] enable travis cache again",
  "8ae4f2b0a": "[FLINK-6820] Activate checkstyle for runtime/filecache",
  "dcfd37ca6": "[FLINK-5867] [flip-1] Improve performance of Pipelined Failover Region construction",
  "4e1b48ec3": "[FLINK-6401] [rocksdb] Harden RocksDB performance test",
  "4024afffc": "[FLINK-6326] [table] Add ProjectMergeRule to logical optimization rule set.",
  "05065451a": "[hotfix] [rocksdb] Convert performance benchmarks to unit tests",
  "6a0ada81e": "[FLINK-6149] [table] Add additional flink logical relation nodes and separate current optimization to logical and physical optimize",
  "6949c8c79": "[FLINK-6089] [table] Add decoration phase for stream queries to rewrite plans after the cost-based optimization.",
  "976e03c1e": "[FLINK-6128] [tests] Optimize JVM options to improve test performance",
  "677b508a9": "[FLINK-5756] [rocksdb] Add mini benchmarks to reproduce 'merge' performance problems",
  "d3a07ef61": "[FLINK-1979] [ml] Add logistic loss, hinge loss and regularization penalties for optimization",
  "da7d4349c": "[hotfix] [rpc] Add RpcConnectionTest to validate that connection buildup fails fast when endpoint is unreachable.",
  "5133c896c": "[build] disable travis cache",
  "12bf7c1a0": "[FLINK-4207] WindowOperator becomes very slow with allowed lateness",
  "ba62df14a": "[FLINK-3641] Add documentation for DataSet distributed cache.",
  "7ad8375a8": "[FLINK-1502] [core] Cleanups, robustness, and performance improvements in the metrics system",
  "85fcfc4d4": "[FLINK-3770] [gelly] Fix TriangleEnumerator performance",
  "e430dee35": "[FLINK-3609] [tableAPI] Reorganize selection of optimization rules",
  "10d3a3119": "[FLINK-3508] Add more test cases to verify the rules of logical plan optimization.",
  "dee1876bf": "[FLINK-3225] Implemented optimization of Table API queries via Calcite",
  "7ee719f7e": "[FLINK-3255] [streaming] Disable parallelism-dependent chaining optimization",
  "4806158e4": "[tests] Add test for a program with very fast failure rates.",
  "b9ce8abb1": "[FLINK-2882] [core] Improve performance of string conversions - Memoize string representations of AbstractID. - Use lookup table for byte-to-hex conversion in StringUtils.",
  "3dc7423c4": "[FLINK-2891] [streaming] Set keys for key/value state in window evaluation of fast-path windows.",
  "3b7fb631a": "[FLINK-2550] [tests] Add an end-to-end failure/recovery test for fast path processing time windows",
  "c24dca501": "[FLINK-2550] [streaming] Make fast-path processing time windows fault tolerant",
  "c923fb3c1": "[FLINK-2533] [java-api] Gap based random sample optimization.",
  "4a5fe4e63": "[FLINK-2189] [runtime] Fix various issues in hash table - check for memory availability before probing - correctly compute memory required for recursive build fast path - remove all temp files properly",
  "358259d25": "[FLINK-2458] [FLINK-2449] [runtime] Access distributed cache entries from Iteration contexts & use of distributed cache from Collection Environments",
  "af88aa09e": "[FLINK-2438] [runtime] Improve channel event serialization performance.",
  "463300ec5": "[FLINK-1993] [ml] Replaces custom SGD logic with optimization framework's SGD in MultipleLinearRegression",
  "44dae0c36": "[ml] Adds syntactic sugar for map with single broadcast element. Rewrites the optimization framework to to consolidate the loss function.",
  "1c8d866a8": "[FLINK-1968] [runtime] Clean up and improve the distributed cache.",
  "2939fba3f": "[FLINK-1807] [ml] Adds optimization framework and SGD solver.",
  "bad77a365": "[build system][travis] avoid hanging builds when downloading cache archives",
  "81ebe980a": "[tests] Increase timeout for ProcessFailureBatchRecoveryITCase to compensate for slow Travis runs",
  "7c64000df": "Log blob cache and server storage directories at startup",
  "563e54623": "[FLINK-1419] [runtime] Fix: distributed cache properly synchronized",
  "dd9a1ba43": "Add debug guardians to suppress string generation which caused a significant performance loss.",
  "092412095": "Adding timefactor to make up for slow travis tests.",
  "4cc6bb1db": "[FLINK-1324] [runtime] Trailing data is cached before the local input strategies are closed.",
  "1a9113202": "[scala] Fix slow building of adjacency list in Scala PageRank",
  "a6152c372": "[FLINK-1205] Fix library cache manager to track references to tasks and revent accidental duplicate registration/deregistration",
  "6492af040": "[streaming] Reduce and GroupReduce invokable refactor and performance tweak",
  "47d02a001": "[streaming] Invokables and tests added for fast batch/window reduce operations and aggregations",
  "d5f8a6933": "[streaming] Memcached, MySQl and SQLite support for state management.",
  "f742963ad": "[streaming] partitioner performance improvements",
  "e518e0d08": "[streaming] new tests, wordcount performance classes, commented examples",
  "53e54a601": "[streaming] StreamRecord update with faster serialization and removed copy when adding/setting tuples",
  "3c4d5b1f1": "[streaming] performance tracker fix",
  "955ee99f7": "[streaming] WordCount example refactor + performanceTracker update",
  "68ebfc48f": "[streaming] WordCount performance testing",
  "e841da52e": "[streaming] WordCount performance",
  "bdda53134": "[streaming] performance tracker update",
  "76dd218d4": "[streaming] performance test scripts updated",
  "266a7e367": "[streaming] Started implementing Storm WordCount for performance test",
  "11d337fdc": "[streaming] Added performance test data copying script",
  "fdb55b54d": "[streaming] performance tracker update and counter added to wordcount example",
  "9b46f3803": "[streaming] python script added for performance visualization",
  "fc1490665": "[streaming] performance util refactor",
  "a2caec7eb": "[streaming] timer added to performance tracker",
  "fe142630f": "[streaming] performance tracker class added",
  "22fa55b09": "[streaming] Implemented getResult() for performance stats in WordCountRemote",
  "094af8375": "make CI build faster",
  "52f9cf63e": "No explicit caching when hash table is cached Add tests for explicit cache removal when hash table is cached",
  "03c6160e4": "Fix cost formulas for cached hash joins Fix estimation bug in channels Add tests for isolated cost formulas Add tests for channel class in plan candidates",
  "47a68adc7": "[FLINK-836] Rework of the cached match driver",
  "99c888c7b": "[FLINK-795] Tests for the integration of the cached match driver into the optimizer",
  "ef623e9b8": "Change string construction to work around a known JVM performance bug still present in some older JVM versions.",
  "a70de7e3f": "[FLINK-930] Netty Initialization is sometimes very slow",
  "c561a51c1": "Add to distributed cache executable flag, directory support",
  "5dacdb321": "Remove unsafe getFieldFast() method from Tuple, because it turned out to be not faster than the switch-based getField() method.",
  "29c322d4f": "Add distributed cache to stratosphere",
  "3679f19d1": "Avro input format provides type for the produced data set. Additional fail fast checks for new java api.",
  "6344e5736": "File data source fails fast on null inputs. File paths used as default names.",
  "e5050f6a1": "Reworked Input formats for correct handling of cached statistics.",
  "8fdd403b6": "Changed type serializers / comparators from interfaces to abstract classed (faster virtual method lookups)",
  "bd312686a": "Performance optimization of the RPC service",
  "aa3e50265": "Composite operators now return SopremoModule instead of ElementarySopremoModule to help optimization and remove duplicate code",
  "7037bc225": "Removed SenderHintEvent mechanism in favor of new faster RPC service",
  "38ac27da6": "Made a series of performance improvements to the RPC service and started to add java doc",
  "54c09d104": "Changed test layout of queue scheduler to get it working on slow machines",
  "aadf6ce29": "Implemented optimization to speed up resource assignment in large-scale setups",
  "1fa6eae57": "Replaced slow implementation of ID-to-vertex lookup",
  "8bc553501": "Fixed resource leak in library cache manager",
  "78c392abc": "Switched to cached thread pool in task manager to speed up cancelling of tasks",
  "69ca2d0ad": "Improved performance of BinaryOutputFormat and SequentialOutputFormat",
  "1cc94d235": "Changed calculation of meta data file size to enable faster recovery",
  "aa0379a75": "memory optimization for upcoming reusage of pactrecords and objectnodes started arrayschema",
  "48b66dd9c": "Minor performance improvement",
  "90949b335": "Improved performance during job setup phase",
  "10ba38274": "Fixed problem with lookup cache invalidation during recovery",
  "a41aa9910": "Fixed problems with cache invalidation in the recovery logic",
  "be4886233": "Added method to invalidate lookup cache entries to recovery logic",
  "9f34e38d1": "Introduced task manager RPC method to invalidate entries from the receiver lookup cache",
  "7fca4474b": "implemented and tested first sketch of buffer size optimization",
  "e39efae80": "Minor performance improvement for transfer envelope queue",
  "7231d2a41": "Changed close mechanism of output gate to improve performance of lazy deployment",
  "cb3b50fd6": "Improved performance of execution graph compilation",
  "cfc9579fe": "Removed deprecated optimization interface and introduced advanced plugin architecture",
  "7a4298cee": "Improved performance of zipf-distributed random number generator",
  "fc0082ede": "Finalized Sorting, Hashing and Resettable logic. Baseline performance passed.",
  "671529af1": "- excluded performance test from build tests",
  "d451da79d": "Replaced synchronized HashMap by ConcurrentHashMap to improve performance",
  "897904308": "Improved performance of receiver list lookup",
  "b8cd18ce8": "Fixed bug in compressor/decompressor cache",
  "1f421be21": "Removed buggy clean-up optimization",
  "32026fe45": "added sortmerger cache to latest code-base",
  "584d1fb54": "Improved style and performance of queue scheduler",
  "cb09f9197": "- performance fix in CrossTask - removed ContextCheckerTest",
  "a3e2205f3": "- fixed in-cache sort path bug (missed sentinel) - found potential memory leak",
  "18e70c729": "finalized cache logic",
  "f71f05176": "added segment cache / conditional materialization",
  "fbd006eb4": "Inproved I/O Manager performance.",
  "b89402d7c": "Worked on IO manager tests, fixed performance bug in match/co-group"
}, "flink-cdc-connectors": {
  "d70e125": "[ci][tidb] Fix dns cache works incorrect in latest jdk 8. (#1809)",
  "806a850": "[cdc-base] Optimize pure binlog phase check logic to improve performance (#1620)",
  "74f0a65": "[mysql] Optimize pure binlog phase check logic to improve performance (#1392)",
  "086464a": "[mongodb] Permission optimization of single database is specified (#1240)",
  "8ba9b70": "[tests] Split the CI pipeline into multiple stages for better performance (#572)",
  "5786506": "[mysql] Support binlog reader merge optimization",
  "6231e99": "[mysql] Support numeric type optimization for split boundary calculation"
}, "flink-learning": {
  "": ""
}, "flink-recommandSystem-demo": {
  "": ""
}, "FloatingActionButton": {
  "c08cd41": "Added option to set custom AnimatorSet to animate FAM icon. Misc optimizations. Removed required proguard rule."
}, "floatingsearchview": {
  "": ""
}, "FloatWindow": {
  "": ""
}, "flowable-engine": {
  "7425fb1f": "Add MT support for channel model cache",
  "914663cc": "Improve channel model cache handling to prevent same channel models getting registered and unregistered multiple times",
  "935390c4": "BasePersistentTokenService: Do not log an error if the cache does not contain a token. Log cache misses on info instead of warn level. (fixes #2762) (#2766)",
  "89676c35": "Refactor DefaultExpressionManager and cache the ELResolver instead of creating them every time an ELContext is retrieved",
  "3526ca62": "JsonType should return cachedValue if it exists in the ValueFields",
  "c572001d": "所有的包装类对象之间值的比较，全部使用equals方法比较。 说明：对于Integer var=?在-128至127之间的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断。 (#2638)",
  "2ce60d31": "Up the rerunFailingTestsCount (on slower nodes needed for testing async history job processing)",
  "6a07699d": "Use CMMN deployment cache for case definition by id",
  "3761fcad": "Add InternalVariableInstanceQuery which can be used to query variables (cached not yet persisted variables are also queried)",
  "f4c5f7c7": "Use findVariableInstancesByExecutionId when enhancing cached values for ProcessInstance and Task",
  "ff277689": "Fix issue with child plan item instances when plan item instance is in cache",
  "93b6db71": "Make sure that querying with include variables has the variables when the entities are cached",
  "dba7d97c": "add support for custom ProcessDefinitionInfo cache (#2031)",
  "13fda792": "Fix MySQL fail-fast strategy location",
  "09d62ef9": "Add scope id en definition info from cache for command context close logging",
  "376cbfe2": "Fix queryVariables missing when querying by id (from cache)",
  "6d43939d": "Use entity cache when querying on id",
  "4f25fa48": "Make some timer tests more stable in slow environments (e.g. Travis CI). (#1877)",
  "8ecfbbc3": "Add low-level option to include deleted entities from cache",
  "3954cc29": "BUG - NPE when attempting to save a task which was found by a query that does not use the cache.",
  "afd919f7": "Fix documentation of the 'flowable.process.definition-cache-limit' spring boot property default value. (#1542)",
  "32633bf7": "Change numbers for faster test run",
  "11221bda": "Chinese optimization (#1466)",
  "7228d1f8": "Fetching tasks by process instance id should use a cache entity matcher in order not to miss tasks which are in the cache",
  "062b2fcf": "Fix wrong parameter passed to cached entity matcher",
  "7434c1e6": "Cmmn: fix potential NPE when plan item instances come from the cache",
  "58e695cb": "Cmmn: fix issue where cached plan item instance is overwriting a cached version of itself",
  "31790f57": "Add expression manager cache configuration to engine configurations",
  "4eecd3e6": "Added basic performance test",
  "c6d933bf": "Avoid calling expression enhancers if not needed by adding a cache for expressions",
  "449a06c2": "Cmmn: consolidate delete + cached entities cancellation",
  "0f5dc5e0": "Cmmn: delete case instance optimizations",
  "9d2473af": "Cmmn: more repetitionRule tests + evaluation operation optimization",
  "0cc6b2ab": "Consolidate AbstractDataManager + use cached entity matcher for fetching milestones of case instance",
  "6f8dd5ca": "Fix sql update sometimes updating non-changed column + usage and performance improvements to async history: - Simplify the registration of custom AsyncHistoryListeners - Enable the grouping and compressing of byte array with a configurable threshold (note: the zipping adds in a new JobHandler) - enhance the reset of expired jobs to also include a configurable timeout (will be re-inserted again). Added createTime to job db tables for this purpose.",
  "b3496863": "Optimization: only applying the limit in sql for queries when there is a need for it (listPage for example). This should give a small performance gain in the cases where no limit is needed, for databases that do a subquery for limiting (mssql and db2 for example).",
  "d807e938": "Update process definition cache during deployment",
  "c41a7b9a": "Update cache before ProcessDefinitionEntity create event",
  "8d91decf": "Update task after adding a new identity link. Required for persisting the new value of identityLinkCount. Must evaluate the performance impact of adding an update statement VS removing several select & delete statements",
  "a6b96809": "Update task after adding a new identity link. Required for persisting the new value of identityLinkCount. Must evaluate the performance impact of adding an update statement VS removing several select & delete statements",
  "b8fd0959": "Refactoring of DbSqlSession with some major changes: - The deleteOperations are no more. Now, the deleted objects are kept in a map, consistent with the inserted object. This removes the need for looping over all deleteOperations in quite a few places. - The ordering of executions before the insert/delete flush has been removed, the logic inserts/delete always in the correct order and there is no need for extra housekeeping anymore. - Flushing has become more consistent, for inserts/deletes/updates - No need for calling cache remove anymore",
  "934eaf48": "Fixing configJTA QA build: tests that boot up a new process engine fail, due to the XaDataSource already being registered. Made all the tests use the same, cached, process engine",
  "b88e5f8a": "Add support for populating localization values into the DynamicBpmnService cache from activiti extension elements on deployment of a process definition.",
  "b630ebb4": "Making entity manager interfaces consistent: removing duplicate methods (findById/getEntity/..) and make sure they pass the entity cache",
  "0461a49d": "Refactoring entity manager usage: making the entity manager instances engine-scoped instead of a Session implementation (ie command scoped). This way, all the previous Context.getXXX calls can be replaced by direct invocations. Won't influence performance that much, but still nicer from an architectural point of view.",
  "d7437025": "Refactoring EventSubscriptionEntityManagerImpl: use the getList that goes to the cache instead of use a local list (needed to make entityManager classes engine scoped, instead of command scoped.",
  "e49c06d4": "Enhancing getList() to use cached objects without needing to create an extra list internally.",
  "7d3c4cbd": "Addition CDI fixes. Made the ExecutionContext CDI only, which means that for non-CDI usage that thread local is not used (yay, microperformance).",
  "8a027c26": "use Collections.singletonList() for performance",
  "0a51d389": "- Fixing manual job execution (not 100% happy yet, should be done differently, but test work now) - Support for subclasses (eg Timer/Message > Job) when doing a getList on the cache",
  "6f4ff44e": "Improve cache lookup for historic activity instances",
  "9f596ddc": "Refactor ProcessDefinition cache usage: - removed BpmnModelCache, and made the BpmnModel part of the procesDefinitionCache - Introduced ProcessDefinitionUtil, which should be the basis for all things needed a Process definition (entity or BpmnModel counterpart)",
  "b3303b55": "- Added support for parallel gateway (+ simple test) - Introduced AbstractEntityManager as parent class for all EntityManager classes (and removed methods from AbstractManager) - Introduced new getList method on AbstractEntityManager, that replaces data from the db with data in the cache (which can be more up to date) for correcter results",
  "13ac6f53": "Introduced BpmnModel cache",
  "5ca5933d": "Fix for ACT-1900 RuntimeService.getVariables(String, Collection) fetches all variables from DB + various optimization when accessing variables. Docs will follow.",
  "b8184122": "Cleanup in bpmn cache cmd concurrency and db tests",
  "b45f4522": "Serialization support in order to use hazelcast as distributed cache.",
  "62eee7c4": "Fix race condition in DefaultDeploymentCache (see http://forums.activiti.org/content/race-hazard-defaultdeploymentcache)",
  "efdcdf99": "Removing distinct from task query to see impact on Jenkins (initiated by http://forums.activiti.org/content/activiti-sql-query-performance)",
  "694dcac8": "Optimize CdiTaskListener to get ProcessDefinition from cache and not execute an additional command.",
  "dda4815f": "Fixed ACT-1686: Using exists instead of inner-join (which is way faster than a distinct on the whole RES.* result set)",
  "24cddba6": "A little extra docs on the process definition cache.",
  "9743ec2e": "Added docs for deployment cache config",
  "542d1e8a": "ACT-1493: made some classes Serializable, as otherwise the process definitions are not storable in a distributed cache",
  "924b7a64": "ACT-1493: make deploymentcache pluggable + introduce cache limit",
  "ad3bf6b8": "Re-introducing caching now we found the culprit (overzealous caching in the ResourceActivitiTestCase, where it would add an in-memory H2 driven process engine, which would then be picked up by the PluggableActivitiTestCase). This makes running the tests again faster.",
  "2b90b1eb": "Trying to fix strange cache issue on QA",
  "ecb113ba": "ACT-1257 renaming beanStore to cachedVariables, preventing scoped associations from being used from activiti commands",
  "110e1a01": "ACT-714: Using concurrentHashmap to prevent concur-mod exceptions for cache of simple-names",
  "f5ba588e": "ACT-834 JavaDelegate instances should not be cached",
  "f3d0e2c4": "ACT-745: update user cache in case of user details changes",
  "4a2376de": "ACT-543: (coding before breakfast) added capturing initiator to KickStart because it makes the examples so much better",
  "4b778453": "ACT-543: (coding before breakfast) added capturing initiator to KickStart because it makes the examples so much better",
  "3972ebbf": "ACT:505: bugfix for process definition cache when using multiple process engines",
  "39005511": "Add maven test flag to prevent CI build from failing fast"
}, "FlowLayout": {
  "": ""
}, "FlycoTabLayout": {
  "": ""
}, "flyway": {
  "a28c583": "add message detailing how batch helps with GCP performance",
  "631cd76": "Fix #3024: improve performance of shouldExecute",
  "5f4a368": "Fix #2993: improve performance of refresh method",
  "94fc988": "Fix slow doEmpty by using EVENT_OBJECT_SCHEMA",
  "52ff251": "#2655 MariaDB jdbc logged errors on started, no such performance_schema.global_variables",
  "b1e827f": "#1466 Added Resource name cache",
  "c465205": "Fixed #2183: Fail-fast when errorOverrides are used with batch=true",
  "594cd95": "Fixed #1415 performance improvements when installing a large number of migration scripts",
  "0785d7f": "performance improvment for MigrationVersion.compareTo",
  "850464c": "Fixed problem with isSchemaEmpty running extremely slowly on MySQL instances with LOTS of schemas.",
  "557b320": "20x performance increase for parsing very large (1000+ lines) statements"
}, "folding-cell-android": {
  "": ""
}, "ForestBlog": {
  "": ""
}, "Fragmentation": {
  "602c5b4": "🐛 Fixed a bug of onBackPressedSupport() when clicked too fast!"
}, "FrameworkBenchmarks": {
  "1d107de3": "Salvo 0.38 and use moka for cache (#8110)",
  "dab85395": "Merge pull request #8107 from TechEmpower/dependabot/maven/frameworks/Java/servlet/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "e3522550": "Merge pull request #8108 from TechEmpower/dependabot/maven/frameworks/Java/servlet3/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "10875328": "Merge pull request #8105 from TechEmpower/dependabot/maven/frameworks/Java/microhttp/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "5551228d": "Merge pull request #8103 from TechEmpower/dependabot/maven/frameworks/Java/grizzly/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "5478e5c7": "Merge pull request #8100 from TechEmpower/dependabot/maven/frameworks/Java/tapestry/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "6622684f": "Merge pull request #8106 from TechEmpower/dependabot/maven/frameworks/Java/activeweb/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "3c84a3f1": "Merge pull request #8097 from TechEmpower/dependabot/maven/frameworks/Java/undertow/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "faf8a810": "Merge pull request #8104 from TechEmpower/dependabot/maven/frameworks/Java/bayou/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "1859850f": "Merge pull request #8101 from TechEmpower/dependabot/maven/frameworks/Java/nanohttpd/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "4282cf48": "Merge pull request #8099 from TechEmpower/dependabot/maven/frameworks/Prolog/tuProlog/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "e0f95dfc": "Merge pull request #8098 from TechEmpower/dependabot/maven/frameworks/Java/jlhttp/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "3e4e1258": "[toolset] Mysql use the same kernel optimization (#8076)",
  "d382c07c": "GH actions cache tfb dockerfile build (#8036)",
  "08b64d37": "[FASTAPI] Bump fastapi to 0.93.0 (#7991)",
  "98441d39": "update fastify from v3 to v4 (#7965)",
  "4e36412e": "[mORMot] HTTP layer: tries to send response in a single syscall with no lock if possible (performance) (#7944)",
  "dfa8fb97": "Merge pull request #7950 from TechEmpower/dependabot/go_modules/frameworks/Go/fasthttp/src/golang.org/x/text-0.3.8",
  "6a0bf801": "Bump golang.org/x/text in /frameworks/Go/fasthttp/src",
  "81e5aa82": "Save expensive slow path type checks (#7942)",
  "3e94d08a": "Use `PgConnection` instead of `PgPool` in the portions 'vert-web' and 'vert-web-kotlin-coroutines' to improve performance (#7933)",
  "3f5bf976": "Use `Dispatchers.Unconfined` in 'vertx-web-kotlin-coroutines' to reduce overhead and improve performance (#7912)",
  "1d45fbed": "remove cached bench (#7900)",
  "3f77d3d4": "improved raw fortunes performance; mORMot - fix potential GPF (#7883)",
  "917ca29f": "[mORMot] improved performance: (#7879)",
  "1e189f76": "[mORMot] improved `/updates` performance (#7860)",
  "a255d3ef": "Update requirements on fastapi-uvicorn (#7809)",
  "4224e8f3": "[Python] fastapi fix gunicorn, add socketify-asgi (#7781)",
  "b87408b3": "Upgrade to Vert.x 4.3.5 + cached queries benchmark (#7721)",
  "b05202e3": "ntex optimizations (#7741)",
  "e7c1dae7": "[Python] Updated socketify.py benchmark to use object factories to increase performance (#7746)",
  "5462180c": "Upgrade to node.js 18.12.1 for fastify (#7713)",
  "829ecd45": "ntex: various optimizations (#7688)",
  "eaef3b50": "H2O: Optimize the cached queries and the database tests (#7655)",
  "69cd13fa": "Merge pull request #7641 from TechEmpower/dependabot/maven/frameworks/Java/javalin/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "44a08c3c": "Merge pull request #7642 from TechEmpower/dependabot/maven/frameworks/Java/jlhttp/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "0f38531a": "Merge pull request #7629 from TechEmpower/dependabot/maven/frameworks/Java/servlet/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "b3934965": "Merge pull request #7639 from TechEmpower/dependabot/maven/frameworks/Java/undertow/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "358edb53": "Merge pull request #7640 from TechEmpower/dependabot/maven/frameworks/Java/servlet3/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "dc65d805": "Merge pull request #7638 from TechEmpower/dependabot/maven/frameworks/Java/nanohttpd/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "38445ae7": "Merge pull request #7631 from TechEmpower/dependabot/maven/frameworks/Java/tapestry/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "b58493de": "Merge pull request #7630 from TechEmpower/dependabot/maven/frameworks/Java/httpserver/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "ee3db60d": "Merge pull request #7636 from TechEmpower/dependabot/maven/frameworks/Java/bayou/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "49ec8e49": "Merge pull request #7633 from TechEmpower/dependabot/maven/frameworks/Prolog/tuProlog/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "749d874c": "build(elixir/phoenix): refactor dockerfile for faster rebuild (#7610)",
  "7f886cf1": "feat: updated robyn to the latest and fastest version (#7588)",
  "d320cc5c": "⬆️ Bump Go 1.19 + `fasthttp` 1.40 + set `GOAMD64=v3` (#7593)",
  "68068afd": "Fix node cluster for fastify (#7505)",
  "ff3605cb": "Merge pull request #7461 from TechEmpower/dependabot/pip/frameworks/Python/fastapi/ujson-5.4.0",
  "da544838": "Bump ujson from 5.2.0 to 5.4.0 in /frameworks/Python/fastapi",
  "6a1c7204": "Merge pull request #7419 from TechEmpower/dependabot/maven/frameworks/Java/magician-io/com.alibaba-fastjson-1.2.83",
  "c13fabe0": "Bump fastjson from 1.2.76 to 1.2.83 in /frameworks/Java/magician-io",
  "bf38c3aa": "Merge pull request #7418 from TechEmpower/dependabot/maven/frameworks/Java/isocket-nio/com.alibaba-fastjson-1.2.83",
  "276b8293": "Bump fastjson from 1.2.44 to 1.2.83 in /frameworks/Java/isocket-nio",
  "baee0f58": "Bump ujson from 2.0.3 to 5.2.0 in /frameworks/Python/fastapi (#7365)",
  "1ad17976": "Rust axum optimizations (#7304)",
  "1a545e13": "Hexagon: Minimize template to improve 'fortunes' test performance (#7277)",
  "432b70de": "fix typo in min cached query url error",
  "9bc73ad0": "Bump github.com/valyala/fasthttp in /frameworks/Go/fasthttp/src (#7233)",
  "7c28e9e8": "Update fastify (node version) (#7188)",
  "c18853d5": "Fix setup for the Python framework fastapi (#7178)",
  "94623280": "Salvo: Add cached query (#6858)",
  "4fb95f24": "Bump jinja2 from 2.11.1 to 2.11.3 in /frameworks/Python/fastapi (#7059)",
  "d18859a7": "Bump asyncpg from 0.20.1 to 0.21.0 in /frameworks/Python/fastapi (#7060)",
  "6801ae41": "Bump fastapi from 0.54.1 to 0.65.2 in /frameworks/Python/fastapi (#7061)",
  "203a6517": "upgrade `fastendpoints` to v3.1 and match with `aspcore-mvc` (#7033)",
  "0c8d1b96": "Update node version for fastify (#7024)",
  "ec0e5b94": "[Go/fasthttp] Upgrade fasthttp to v1.31.0 and Go to v1.17 (#7005)",
  "8e1ae423": "Updated FaF framework dependencies and made a few performance tweaks (#6966)",
  "e0cd4641": "Enable Giraffe .NET 6 optimizations (#6923)",
  "13f1dc7c": "Rust axum optimizations (#6939)",
  "29844ce3": "Upgrade to .NET 6 and PostgreSQL 14 + implementation of cached-worlds (#6950)",
  "64928ac1": "[mixphp] Update fpm/fastcgi to php 8.1 (#6910)",
  "e4937092": "Mustache optimizations, plus minor DB optimizations (#6838)",
  "06cc937f": "Update node version for fastify (#6814)",
  "9a41609e": "Use :exsp random engine for better performance (#6778)",
  "a1335a31": "Update node version for fastify (#6763)",
  "beedb56b": "[Go] Upgrade fasthttp to v1.28.0 (#6751)",
  "bd4b3f37": "Using tabling for cache, bumping up the number of workers (#6739)",
  "f871c86f": "Change JDBC pool size because of a performance problem (#6737)",
  "4340d07c": "Configuring JIT/opcache (#6735)",
  "05813501": "Downgrade HikariCP to diagnose SQL performance drop (#6715)",
  "d0594024": "OfficeFloor adding performance improvements for SQL Client (#6607)",
  "47b459f8": "Enable profile guided optimizations in CoreRT (#6606)",
  "ed959a6c": "Improve LoadMultipleUpdatesRows performance. (#6588)",
  "62bb34bb": "Update node version for fastify (#6600)",
  "eaa7ace6": "Various Swift framework optimizations (#6551)",
  "be8302e5": "Update node version for fastify (#6528)",
  "fa1e3f17": "Update node version for fastify (#6477)",
  "9b7c5ec7": "[Go/fasthttp] Upgrade to v1.22.0 (#6419)",
  "34d5e4b6": "Update fastify (node version, dependencies) (#6395)",
  "9ab0f233": "cfml performance tweaks & add missing test (#6387)",
  "a5fe5be0": "[laravel-s]Made some optimizations (#6324)",
  "0d82ec9b": "adde edap-http-fast (#6237)",
  "2f8927d3": "Replace 'FindAsync' with 'FirstOrDefaultAsync' which is hopefully faster (#6235)",
  "13d0121d": "cache plaintext's content (#6221)",
  "bdd0955a": "http-jl performance updates (#6215)",
  "8110fd1a": "libreactor: Refactoring and optimization (#6219)",
  "67a3132e": "Removed some tests + Performance optimizations (#6167)",
  "37e55063": "[Go/fasthttp] Upgrade to v1.17.0 (#6145)",
  "dfa58493": "[swoole] Add opcache (#6125)",
  "4d992db5": "Lithium: Fix performance regression. (#6121)",
  "9c143e8a": "Lithium: pgo for cached-world. (#6034)",
  "b86e3b5b": "fix: significantly improve webmachine performance (#6060)",
  "7ce4c61c": "Lithium optimizations. (#5960)",
  "728b4314": "[Go/fasthttp] Upgrades (#5952)",
  "e3c5277d": "Lithium: sql optimizations for non-pipeline mode + PGO for pipeline mode. (#5924)",
  "ec30b70c": "Lithium cached-query tests and sql pipelining (#5918)",
  "bb2b3cfa": "Upgrade fasthttp to v1.15.1 and dependencies (#5900)",
  "88fc80b1": "Add ubiquity memory cache (#5879)",
  "36e1e642": "Lwan: Address performance issues with the cached queries benchmark (#5863)",
  "445ebcaa": "PHP add fastcgi_socket_keepalive in nginx (#5861)",
  "e2382db2": "update models cache (#5846)",
  "0d6f457a": "Avoid boxing in cached query (#5832)",
  "c7c54d2f": "[Go/fasthttp] Add Cached Queries test (#5827)",
  "8da42927": "Improve performance serialize to json at ntex (#5817)",
  "b197b1cb": "Fix cache test (Fiber v1.12) (#5816)",
  "d54deb66": "optimize performance (#5804)",
  "d6f495e8": "Lwan: Add cached queries benchmark (#5801)",
  "1c8e498c": "Improve performance at ntex fortunes (#5789)",
  "f26be1c7": "[Go/fasthttp] Upgrade fasthttp to v1.14.0, remove some tests and refactor (#5774)",
  "cf33c5dd": "optimize performance (#5766)",
  "ff10e230": "Upgrade fasthttp to v1.13.1 (#5705)",
  "4502295f": "[Go/fasthttp] Upgrade to v1.12.0 and add test cases (#5653)",
  "42319ed1": "Merge pull request #5647 from msmith-techempower/gemini-firenio-performance-tweaks",
  "8707dff2": "add scratch for go-chi that can prove having better performance with the smallest dockerfile (#5623)",
  "4e33b178": "Update fastapi orjson (replace #5594) (#5628)",
  "912c545b": "add scratch for go-gin that can prove having better performance with the smallest dockerfile (#5624)",
  "995cbe80": "Attempt to improve performance (#5622)",
  "91fc8489": "Phalcon-mongodb tag broken and faster sort (#5606)",
  "48f83e93": "micro optimizations/upgraded fat-free code, optimized nginx settings (#5589)",
  "f49f84c2": "Update faster python frameworks requirements (#5597)",
  "2d3cdcc9": "[Go] Upgrade docker Go to v1.14 and fasthttp to v1.9.0 (#5556)",
  "83892cbf": "Yii2-raw fortunes: faster data structure (#5547)",
  "cfaad5b6": "Upgrade gnet to v1 and improve performance (#5543)",
  "c01cf640": "Yii2: enable the ORM cache on the DB schema (#5541)",
  "e026dd67": "Add nestjs framework with fastify (#5503)",
  "f4b28e5c": "improve performance (#5456)",
  "df7cd44a": "Upgrade Go/atreugo to v10.3.0 and Go/fasthttp dependencies (#5447)",
  "2843d594": "Adjust a few things to be faster. (#5434)",
  "61c273c7": "[Go] Upgrade atreugo to v10.1.0 and fasthttp to v1.8.0 (#5406)",
  "4d65fc79": "H2O: Use spinlocks for the cache (#5342)",
  "274b91e1": "Fix performance bug on lithium-mysql/fortunes. (#5335)",
  "03c68b50": "Fix laravel & Laravel-swoole cache pbs (#5233)",
  "fa2741ef": "Fix rails problems (cache + socks) (#5226)",
  "9dda1e95": "Upgrade Go/atreugo, Go/fasthttp and dependencies (#5227)",
  "ab35150f": "Fix grizzly-jersey cache pb (#5224)",
  "3b493e03": "Fix fuel cache pb (#5223)",
  "68fdd1a8": "Update Rocket for more performance (#5174)",
  "5c6101ca": "Phoenix performance (#5153)",
  "3113f05e": "Update Go/fasthttp (use go modules, upgrade to pgx v4) (#5082)",
  "8bfed7ed": "Update Drogon to the latest version and make some optimizations (#4916)",
  "f6eba3af": "H2O: Switch back to a global shared cache (#4869)",
  "0b65dc8f": "Merge pull request #4837 from volyrique/cached-query",
  "b6d19628": "H2O: Prepopulate the caches",
  "588882b0": "H2O: Switch to thread-local caches (#4798)",
  "fc5a398c": "[D/Hunt] Improve performance (#4781)",
  "f38cfc86": "Removing PeachPie, clean up, cacheing resources (#4757)",
  "3219cc62": "[D/Hunt] Minor optimizations (#4708)",
  "b0579e62": "The more readable code is even faster (#4702)",
  "16948b05": "Install ext-event for better performance (#4681)",
  "f7802d57": "[ci fw-only Go/atreugo Go/aah Go/beego Go/chi Go/echo Go/go-std Go/iris Go/gin Go/goji GO/fasthttp] Fix max db conns in iris, atreugo, go-std; add atreugo-gojay, atreugo-easyjson, atreugo-sjson (#4574)",
  "dc82e002": "Improve Fortunes bench performance for Servant (#4553)",
  "42b94723": "Separate Go tests in travis, easyjson in Go/fasthttp (#4529)",
  "e0baec91": "deleted some go test; updated go vet to 1.12 in fasthttp, go-std, iris; added evio tests (#4506)",
  "59b70670": "Prefork tests to Go/fasthttp (#4462)",
  "12e14c9f": "Changed go ver to 1.11.5 in fasthttp-postgresql; added iris-prefork, iris-quicktemplate; fixed go-std; quicktemplate to go-std (#4448)",
  "dd815347": "Update Go version for fasthttp (#4421)",
  "29702196": "H2O: Use adaptive mutexes for the cache again (#4373)",
  "34630d83": "Upgrade light-4j to JDK 11 to resolve the performance issue (#4308)",
  "6264eed7": "increase cache size (#4295)",
  "f652d9e5": "add a couple of optimizations revealed by performance testing (#4299)",
  "4aacc6cc": "Composer using verbose options For faster autoload",
  "791760df": "Composer faster autoload",
  "93f07bf6": "switch from Jackson to Jsoniter for the JSON handling, testing shows that Jsoniter is slightly faster in this use case (#4274)",
  "5841067b": "Nginx simplified and faster dockerfile (#4268)",
  "4f952657": "H2O: Reduce thread contention in the cache (#4262)",
  "09e2c9d0": "Lowering memory usage from 14g to 7g in attempt to improve performance (#4209)",
  "14038184": "ASPNET optimizations (#4198)",
  "2c5f8719": "Improve PHP-Workerman performance (#4123)",
  "39724520": "[fi fw-only Java/servlet] cache2k update (#4091)",
  "59c5b89e": "Re-apply the undertow plaintext ByteBuffer optimization (#4019)",
  "2dd521dd": "H2O: Increase the cache capacity further (#4006)",
  "fb6bfbb8": "H2O: Increase the cache capacity (#3975)",
  "9894766a": "ULib: some optimization plus enable db postgres async model (#3957)",
  "04ad463f": "ULib: some optimization (#3928)",
  "fffe076a": "Upgrade http4k + Kotlin, adding tests, switch out templating engine for performance (#3900)",
  "ebd92451": "H2O: Optimize the cached queries test (#3904)",
  "1985c600": "H2O: Use an adaptive mutex for the cache (#3864)",
  "3b5d88fd": "Add cached_query test for Ur/Web (#3839)",
  "356b1f16": "[ci fw-only Java/act] hibernate pgsql updates performance tune #1 - reduce the db connection number (#3813)",
  "f7e774f0": "Swoole: Enable PHP opcache for cli (#3810)",
  "d069cabe": "Fixes cached queries test type (#3774)",
  "c975f75d": "ffead-cpp fixed all failing tests and added cached tests (Separate dockerfiles) (#3742)",
  "a3cbff73": "Improve .NET Core MySQL performance. (#3741)",
  "3a1a4eaf": "Change in Opcache for use less memory (#3669)",
  "35602cae": "Opcache performance change (#3668)",
  "4152eaa8": "Swoole include all tests + using SWOOLE_BASE mode for performance (#3657)",
  "ef4077f7": "Remove plaintext 'optimization' in undertow test (#3642)",
  "ddc16852": "Disable performance-schema (#3589)",
  "917be769": "various optimizations for actix (#3450)",
  "0cd4d5de": "fasthttp: simplify sorting by using sort.Slice instead of sort.Sort (#3346)",
  "63066cd8": "fasthttp: increase connection pool size for postgresql (#3344)",
  "56a0eb0b": "Upgrade ktor version for performance checks in continuous environment (#3334)",
  "57611f91": "Rust/iron add cached queries test (#3289)",
  "23f0f8c7": "H2O: Inhibit some compiler optimizations (#3275)",
  "cb38a3cd": "PHP twice as fast (#3265)",
  "61cfcd9d": "Use multiple get operations in Servlet cache query (#3263)",
  "692232a8": "Mysql performance optimizations (#3261)",
  "c5b2f3c7": "[ci fw-only Java/act] Act - disable eclipselink shared cache (#3234)",
  "a3ed48b2": "Turn on NUMA & aggressive optimizations and switch back to throughput GC for better throughput results (#3184)",
  "464f4b2c": "[ci fw-only Java/act] Update to act-1.5.3; fix ebean updates performance issue (#3086)",
  "14b65e91": "the default cache size too low for php frameworks (#3037)",
  "087adde6": "fasthttp: setup files cleanup (#2912)",
  "98866ea2": "fix db performance (#2890)",
  "7257295b": "Vertx header optimizations (#2871)",
  "f005711c": "ULib: Implement the cached queries test type (#2830)",
  "86d982af": "H2O: Implement the cached queries test type (#2827)",
  "e11b7298": "Fix serious socket leakage introduced by optimization (#2691)",
  "9c567beb": "Revert back to old compiler since gcc-6 for some very strange reason destroyed performance (#2683)",
  "0ac35094": "fasthttp: use 2xNumCPU connections to db in order to properly scale on host machines with different number of CPUs (#2676)",
  "3aef91c7": "remove cache",
  "dce9eae0": "Update to latest Pedestal version; Use Pedestal's fast setup (#2521)",
  "92412f1f": "Merge pull request #2374 from martin-g/wicket-7.5.0-plus-optimizations",
  "13f41cdc": "fasthttp: remove prefork mode (#2380)",
  "a2e309f4": "fasthttp: remove prefork mode",
  "67fa2b11": "upgrade fintrospect, fix updates url in code, and tweak performance by removing request validation stage from routes",
  "9e2c5b96": "metadata cleanup: remove fasthttp non-prefork for mysql.",
  "d581f1d7": "metadata cleanup: remove plaintext, json and fortune from db permutations in fasthttp.",
  "0b2e5058": "Fixes a conflict with the Windows file system on Go/fasthttp (#2286)",
  "a65b3ed6": "Realistic low-level approach with 'rapidoid-http-fast' (#2257)",
  "2f873459": "fasthttp: fixed setup scripts (#2271)",
  "f990af16": "fast travis run",
  "46fb6e5d": "add default test to fasthttp",
  "deb2864a": "Merge pull request #2112 from valyala/fasthttp-merge",
  "e47c146d": "Changed php.ini to use OPcache",
  "352afb36": "fasthttp: fixed database name in benchmark_config.json: Postgresql -> Postgres",
  "e495d29a": "Issue #1996: merge fasthttp-mysql and fasthttp-postgresql into fasthttp folder",
  "67e9c3db": "Merge pull request #2001 from methane/travis-cache-pip",
  "15487929": "travis: Cache pip cache directory",
  "ef82fbb4": "Adds mono-fastcgi-server",
  "3686d77b": "Ignore __pycache__",
  "82c3c97c": "fasthttp-postgresql: cleanup: removed 'synchronous_commit=off' from db setup",
  "1f8e4f07": "fasthttp: removed 'charset=utf-8' from plaintext response header, since it isn't required there",
  "23072aa7": "fasthttp: move templates to src and use qtc from /home/valyala/work/FrameworkBenchmarks/frameworks/Go/fasthttp-postgresql/bin",
  "ab5fdd48": "fasthttp: properly install quicktemplate",
  "0ab58a4e": "fasthttp: removed automatically generated template files - generate them on the fly during setup",
  "4a1cf30c": "fasthttp: switch from html/template to github.com/valyala/quicktemplate",
  "f42b82d3": "fasthttp: removed 'prefork' hack on periodic connection closing",
  "3e5e4b2d": "fasthttp: tune the maximum number of db connections",
  "919270d1": "fasthttp: shave off a memory allocation in json benchmark",
  "b9817fba": "fasthttp: exit from setup.sh after the server binary is built",
  "ddf0dfbd": "fasthttp: mentioned databases - mysql and porstgresql - in README",
  "4eb81572": "fasthttp: updated source_code contents",
  "bb07d20f": "fasthttp: keep client connections for 1.5s in prefork tests instead of 200ms. This should reduce overhead for connection establishing",
  "438722bf": "Remove keepalive from PHP frameworks using fastcgi",
  "c26d49b2": "updated Luminus benchmark to latest Luminus version, tweaked performance",
  "73916289": "daveD - tweak to performance by disabling Stats and Tracer",
  "c2b0b7f1": "fasthttp-postgresql: /update uptimization: disable synchronous commit on per-connection basis instead of per-request basis",
  "55f56263": "Merge pull request #1867 from jochenberger/add-travis-cache",
  "ab8c3c24": "fasthttp: limit the maximum db connetions count to 256 - the maximum concurrency level used in the benchmark",
  "43cc675e": "fasthttp: added missing 'time' import to fasthttp-mysql and added jitter to maximum connection duration in prefork mode",
  "9a39fe33": "cache the content of the local Maven repository between builds",
  "9bdfdf7f": "fasthttp: periodically close keep-alive connections for even connection distribution among available worker processes in prefork mode",
  "6ae6ebe6": "fasthttp-postgresql: optimize 'update' benchmark",
  "eb8e685a": "fasthttp: use one template file instead of two for fortune benchmark",
  "9806424e": "fasthttp-postgresql: use consistent display_name for prefork test version",
  "57d5714e": "fasthttp-postgresql: code cleanup - removed unused constant",
  "159726de": "fasthttp-postgresql: explicitly set charset=utf-8 for text/html responses (plaintext and fortune)",
  "ae94c296": "fasthttp: added missing ';charset=utf-8' suffix to Content-Type for plaintext and fortune responses",
  "8d777366": "renamed generic fasthttp to fasthttp-mysql, added a postgresql-based version at fasthttp-postgresql",
  "7638ed51": "fasthttp: clarified the code",
  "371f7220": "Use performance mode and a single TCP bind address.",
  "df299fb0": "optimization",
  "9c5e022f": "optimization",
  "27bbc81c": "fasthttp: updated stale error message",
  "2c1a83a9": "fasthttp: fixed 'Deadlock found when trying to get lock; try restarting transaction' error by sorting rows by id before updating them in a transaction",
  "e39aa67f": "fasthttp: code prettifying",
  "3d07ea6d": "fasthttp: spread available db connections between worker processes in prefork mode",
  "ae151145": "fasthttp: code cleanup",
  "8da9a615": "fasthttp: updated README.md",
  "21728a5a": "fasthttp: properly set benchmark_config.json params",
  "b85f19f9": "Explicitly enumerate third-party packages used by fasthttp benchmark",
  "bbb8a800": "fasthttp: use SO_REUSEPORT if -prefork flag is passed. This should improve performance on Peak hardware",
  "c5ff6005": "fasthttp: fixed GOPATH in setup.bat",
  "53ce2eaf": "fasthttp: use prepared statements",
  "c00129bf": "Added initial fasthttp benchmark",
  "d6c83b48": "some optimization, add redis test, use FIFO scheduling policy",
  "90a5a835": "bumping up version for performance",
  "74149db7": "setting the server to highest performance",
  "627aea5e": "Vert.x performs faster under Java 8",
  "4b5705d6": "bug fixing and optimization",
  "7c9f9b3a": "Improve aiohttp performances based on this discussion: https://github.com/KeepSafe/aiohttp/issues/314",
  "a1c424ba": "Switch to dpkg install for faster builds",
  "feed4c34": "Disable Undertow performance-hitting options",
  "6237f6c0": "Add url.parse optimization from @mhart",
  "1edf4c2a": "Improve performance by not creating session",
  "9449fd78": "Add comment about performance issue with prepared statement",
  "a67fc3dc": "add --with-computed-gotos for Python 3 - it should helps to improve performance",
  "d1fbc444": "add --with-computed-gotos for Python 3 - it should helps to improve performance",
  "c1238fe2": "Disable non-existant APC cache and non-recommended Redis cache",
  "1ea6a4e8": "Remove useless cache folder",
  "3a34a186": "Remove APC cache (php 5.5 included Zend cache already)",
  "a76008c6": "Lock composer installation, and avoid warming the cache twice",
  "6f4a8b53": "Fix fastcgi-mono-server4 command",
  "d647df3f": "Some Yesod cleanup/optimization",
  "ba6da3c0": "Some Yesod (attempted) optimizations",
  "635b45eb": "disable test executed on CI server to make builds faster",
  "9f620b83": "convert one more helper to the ->helpers optimization",
  "e8b00a44": "improve the configuration and performance of the mojolicious app",
  "b4d459a9": "cache the collection handle objects",
  "ae621596": "Merge pull request #987 from methane/travis-cache",
  "62c3bab8": "Use Travis cache.",
  "dad08c44": "Move run-ci's cache to filesystem",
  "95ef5328": "Added hibernate.jdbc.batch_size for potentially better performance.",
  "b4a5553a": "Merge branch 'mysql-fastcommit' of http://github.com/methane/FrameworkBenchmarks into 886",
  "09054cc1": "Fix mongrel2 install: update linker cache before compiling",
  "b4ee43c6": "Added comments on how to use static cache when developing",
  "f6498ec7": "rewrote app.psgi. Do not use Plack::Builder and Plack::Response, use $dbi->selectrow_arrayref for more performance",
  "a35157c5": "Minor optimization tweaks:",
  "2f1c6987": "Augment the number of workers to take advantage of db slowness",
  "6b00c5a8": "Merge branch 'wicket-optimizations' of https://github.com/martin-g/FrameworkBenchmarks into PR647",
  "4c778311": "Dancer: use JSON::XS for faster serialization",
  "5df348df": "Merge branch 'master' into wicket-optimizations",
  "be69dfb7": "Minor optimizations to the way the /json response is created.",
  "def96408": "Merge pull request #623 from bbrowning/faster_jruby",
  "e6c8cee8": "use statement cache in Tomcat JDBC pool - Mysql JDBC driver causes a lot of SQLExceptions internally which cause a lot of overhead",
  "df1f1761": "more performance enhancements, cleaned configuration",
  "3a0b028c": "improved performance for pipelining",
  "507384aa": "set lua cache to on",
  "a1f9754a": "set lua cache to on",
  "123f44d1": "set lua cache to on",
  "3dac49b2": "Use lua code cache",
  "c826f700": "The 0.8.0-rc3 release of bonecp that we upgraded to in Play 2.2.0 introduced a performance problem whereby prepared statements were not being reused:",
  "bbea2c71": "The 0.8.0-rc3 release of bonecp that we upgraded to in Play 2.2.0 introduced a performance problem whereby prepared statements were not being reused:",
  "6886e70f": "Some minor sorting optimizations",
  "9cca2ac5": "Some minor sorting optimizations",
  "106eb086": "flask: Add nginx+uWSGI combo which is ~7% slower than gunicorn",
  "3bfe52e8": "bottle: add nginx+uWSGI combination for ~9% performance gain above gunicorn",
  "0b1e9f19": "uwsgi: Add nginx+uWSGI combination which is 30% faster than uWSGI alone",
  "ff378121": "uwsgi: use multiple http router processes for 30% performance gain",
  "a96b9df2": "benchmarker.py: set cpu frequency governor to 'performance' before running tests",
  "39c8bcab": "benchmarker.py: set cpu frequency governor to 'performance' before running tests",
  "d6eac77a": "re-enabled query cache of ringo-sqlstore",
  "1f735bc5": "re-enabled query cache of ringo-sqlstore",
  "2b68d877": "Modify setup file to use mono-sgen, to improve performance when used C# with mono.",
  "2dc5c7b5": "Modify setup file to use mono-sgen, to improve performance when used C# with mono.",
  "5e65c119": "Improving autoloading performance through --optimize-autoloader argument.",
  "32e1f572": "Improving autoloading performance through --optimize-autoloader argument.",
  "7290f611": "remove querycache for test",
  "592ccde5": "remove querycache for test",
  "e3085c55": "nginx keepalive to fastcgi backends for PHP frameworks TechEmpower/FrameworkBenchmarks#332",
  "ca78e6c2": "nginx keepalive to fastcgi backends for PHP frameworks TechEmpower/FrameworkBenchmarks#332",
  "7a41293d": "Heavily stripped down version of aspnet tests: twice as fast for some tests",
  "aaec19d2": "Heavily stripped down version of aspnet tests: twice as fast for some tests",
  "22ca2457": "Removed flag +K true since this lowered the performance of the tests",
  "4219cb34": "Removed flag +K true since this lowered the performance of the tests",
  "be018cc4": "Merge branch 'performance_singlerow' of https://github.com/MalcolmEvershed/FrameworkBenchmarks into MalcolmEvershed-performance_singlerow",
  "0ad6629f": "Merge branch 'performance_singlerow' of https://github.com/MalcolmEvershed/FrameworkBenchmarks into MalcolmEvershed-performance_singlerow",
  "3d5cd65c": "Merge branch 'performance_threads' of https://github.com/MalcolmEvershed/FrameworkBenchmarks",
  "f0056421": "Merge branch 'performance_threads' of https://github.com/MalcolmEvershed/FrameworkBenchmarks",
  "637aec7d": "fastcgi keepalive",
  "d937f8b9": "fastcgi keepalive",
  "c0fda6c2": "fastcgi keepalive for nginx",
  "2c7628ed": "fastcgi keepalive for nginx",
  "b8f3e7e1": "Improve ASP.NET Ado performance 15-30% by removing CommandBehavior.SingleRow",
  "ff523808": "Improve ASP.NET Ado performance 15-30% by removing CommandBehavior.SingleRow",
  "d44eff42": "Optimize PHP performance on Windows",
  "890c66f7": "Optimize PHP performance on Windows",
  "a2ada377": "Change cache engine from File to Apc",
  "0c3d4680": "Change cache engine from File to Apc",
  "e4241a5b": "Minor cleanup. Minor optimizations. Change Fortune test to use competely dynamic datastructure per update to Issue 134.",
  "a7dece53": "Minor cleanup. Minor optimizations. Change Fortune test to use competely dynamic datastructure per update to Issue 134.",
  "b518eb18": "cache the prepared template",
  "b5531718": "cache the prepared template",
  "f7ec54ef": "Generate configuration cache before starting benchmarks",
  "b9bf5f7b": "Generate configuration cache before starting benchmarks",
  "ab1e56bb": "Enabled APC cache for doctrine metadata & queries",
  "a2946379": "Enabled APC cache for doctrine metadata & queries",
  "f36d48ec": "remove entity DB cache",
  "9beebf50": "remove entity DB cache",
  "5c660176": "make play1 use built-in netty server. also changed db test to non-async version (simpler and faster)",
  "804c8929": "make play1 use built-in netty server. also changed db test to non-async version (simpler and faster)",
  "0e132ff8": "Merge pull request #168 from bakins/luaoptimizations",
  "e58c75ae": "Merge pull request #168 from bakins/luaoptimizations",
  "953c060f": "http-kit 2.0.1 has better performance",
  "0dece498": "http-kit 2.0.1 has better performance",
  "e13f110b": "jvm runs much faster with -server than with -client",
  "061530bc": "jvm runs much faster with -server than with -client",
  "071f88c6": "Round 2 performance data for i7",
  "55c01af9": "making rails benchmark slightly faster",
  "c456d927": "small performance enhancement",
  "84001252": "Make Go go faster."
}, "freeline": {
  "1b671f0": "Remove the useless stat_cache_md5",
  "c4ea9d9": "build.gradle freeline_core freeline-databinding-cli freeline-docs freeline-gradle-plugin freeline.py freeline-runtime freeline-runtime-no-op freeline-sample freeline-studio-plugin gradle gradle.properties gradlew gradlew.bat LICENSE README.md README-zh.md release-tools settings.gradle fix md5 cache features",
  "492511b": "+ [FreelineAapt] performance improvement and bug fix",
  "5f7a4e1": "+ move project description file from `~/.freeline/cache` to project root directory",
  "b2cc233": "v1.1.2.1 optimization initFreeline"
}, "fresco": {
  "82c8ea0": "Fix image source extras logging (cache shortcut)",
  "21fdabd": "convert_fest_assertions: //fbandroid/libraries/fresco/imagepipeline-base/src/test/java/com/facebook/cache:cache",
  "4608868": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/cache/common/HasDebugData.java",
  "b65b6b5": "Add support for custom scheme to enable disk cache",
  "227fb1e": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/BitmapMemoryCacheTrimStrategy.java",
  "4e2cbf7": "Include size method in drawable cache",
  "40937a7": "Add dedicated animated cache",
  "ba149d8": "Reduce memory cache allocated",
  "6ab2cee": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/BitmapMemoryCacheFactory.java",
  "4fdd4cb": "fbandroid/libraries/fresco/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java",
  "c7decfc": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/CountingMemoryCacheInspector.java",
  "dbfd194": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/MemoryCache.java",
  "8406ce8": "Add fast path for empty events",
  "d62c034": "fbandroid/libraries/fresco/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/ImageCacheStatsTracker.java",
  "2719c10": "fbandroid/libraries/fresco/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/package-info.java",
  "bd8fb07": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/ValueDescriptor.java",
  "d77435c": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/BoundedLinkedHashSet.java",
  "d5d704f": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/MemoryCacheParams.java",
  "9aa1abe": "fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/package-info.java",
  "55f5b91": "fbandroid/libraries/fresco/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/MemoryCacheTracker.java",
  "a7d6172": "Fix ConcurrentModification in cache",
  "f2b7792": "cancel decoder on cache miss",
  "91883d6": "Added new 'fast' Showcase build flavor",
  "a991604": "add the ability to customize the encoded cache trim strategy in imagePipeline",
  "7a644a6": "Tune cache size - client",
  "05ef5a2": "added cachesDisabled element to LiteImageRequest constructor",
  "2817397": "Add parameter to globally disable encoded cache",
  "b47e668": "skip partial disk cache when disk cache is disabled for both read and write",
  "3a4aad2": "Fix local files disk cache issue",
  "7b4f99e": "Fix postprocessed bitmap memory cache producer test",
  "a38389b": "Fix encoded memory cache producer test",
  "ffd9018": "Fix bitmap memory cache producer tests",
  "e87f14d": "Fix disk cache producer tests",
  "b79c122": "refactor disk producer and consumer to use cachesDisabled element",
  "dbf1848": "Back out 'refactor disk producer and consumer to use cachesDisabled element'",
  "c616818": "refactor disk producer and consumer to use cachesDisabled element",
  "f78b8d2": "refactor memory producers and consumers to use cachesDisabled element",
  "e2e531e": "adapt use of old caches control elements to new cachesDisabled element",
  "29f4840": "added cachesDisabled element to image request",
  "5fb237a": "Make com.facebook.imagepipeline.cache nullsafe",
  "3542a9d": "Clean up fbandroid/libraries/fresco/imagepipeline-base/src/main/java/com/facebook/cache/disk/DefaultDiskStorage.java",
  "1c2f39d": "Optionally cache EncodedImage parsed metadata",
  "3d35f04": "Make fresco/imagepipeline-base/.../cache/common nullsafe",
  "6c90bd4": "Make fresco/imagepipeline-base/.../cache/disk nullsafe",
  "57acd39": "Add strict nullsafe annotations to cache package",
  "b8ac46f": "add support for a combined network, disk and encoded cache producer",
  "4b0cd4b": "Optionally cache hashcode: ImageRequest",
  "1729541": "Added VitoImagePerfNotifierImpl for performance logging",
  "be30ea9": "Minor: Add bitmap memory cache factory getter to imagepipeline config",
  "b2049dc": "add method to check whether the image is in the encoded memory cache",
  "c723884": "Extract and move AdaptiveBitmapCountingCache to j/c/f/fresco/cache",
  "a1ced14": "allow probing disk cache when image is fetched from network",
  "2547c42": "Report image format for postprocessed bitmap cache and video thumbnails",
  "5d55a56": "add keys for probing in disk cache",
  "b2c4992": "Vito2: set fetch submitted if image comes from cache shortcut",
  "14a2857": "enable probing in encoded memory cache and disk cache separately",
  "041c723": "keep tracking of recently accessed keys in encoeded memory and disk caches",
  "669a5aa": "implement probe method for encoded memory and disk caches",
  "a468f94": "Add disk cache support for Images plugin",
  "11a4eae": "Report cache size in addition to image count",
  "a620502": "Fix encoded cache default value",
  "590c8be": "add option to disable encoded cache",
  "acc96cd": "Revert D18781306: add option to disable encoded cache",
  "0971613": "add option to disable encoded cache",
  "e5e7a12": "Add ability to set image cache",
  "503d79e": "Set imagepipeline config to producer context for faster experiments iteration",
  "ca79fc8": "Add Disk put to cache stats tracking",
  "a4c30b5": "Create experiment for faster native rounding algorithm",
  "c4b627b": "Add experiment shim to toggle checking for cached image data in the image state",
  "f8abc9b": "Add prefetch to encoded cache functionality",
  "03266c3": "Clear caches from stetho plugin",
  "c24cc20": "Make the frequency of checking of the bitmap cache size configurable",
  "e233f96": "Vito: Properly close cached image reference in onAttach",
  "65dc651": "Add Flipper debug cache key factory",
  "3b67459": "getting the size of the disk cache",
  "e942390": "Check if disk cache had a miss",
  "eb58399": "Fix the Nullsafe type errors on //libraries/fresco/imagepipeline-base/src/main/java/com/facebook/cache/common:common",
  "424480a": "Removed unnecessary interface modifiers for memory cache",
  "6ca0fa9": "Add option to control prefetching to bitmap cache per request",
  "4407206": "Add @Nullable annotation for cache key generation helper method",
  "e9189e1": "Use equals to compare animated frame cache keys",
  "c00e72c": "Do not cache unknown format images to EncodedMemoryCache (#2190)",
  "88afdb2": "Move cache methods from FrescoContext to ImagePipeline",
  "c4ac011": "Add cache key for ImageCacheStatsTracker's onDiskCacheHit (#2210)",
  "8deab0c": "Network fetcher optimizations 1/n - add 2 new update modes",
  "d2474bc": "Control memory cache per request",
  "7a874c1": "Do not cache images if they are of unknown format",
  "9fe78d8": "Add option to disable disk cache",
  "0488bc1": "fix isSameImageRequest when cacheKey is null",
  "7e55d0e": "base controller equality check on cachekey",
  "d9e3a8d": "ZoomableDraweeView: fix missing transformation callback if image loading is slow",
  "8701ea2": "apply some instant run optimizations",
  "c36e13e": "Stop reading encoded cache key from EncodedImage",
  "c46a525": "Use/implement new onNewResult in memory cache producers/consumers",
  "f07d30e": "Use/implement new onNewResult in disk cache producers/consumers",
  "11a196c": "Delete small cache threshold",
  "a07af13": "BitmapAnimationBackend: Do not cache fallback frames",
  "2ec1a59": "Added contains() to the frame- and counting memory cache",
  "6db0caf": "Deprecate small cache threshold experiment",
  "b63ed31": "Move MediaVariationsIndex and implementations to cache package",
  "6a3d87a": "Don't rely on cache's memory index for media variations",
  "8ac1992": "Include the cache choice in variants provided by the media variations index",
  "cbd0b9e": "Write the cache choice to the media variations index db",
  "b200537": "Pass cache choice to the media variations index",
  "b47334a": "Fixed NaiveCacheAllFramesCachingBackend cache clearing",
  "01f91fe": "Animations v2: Added naive cache all frames caching strategy",
  "468144b": "Added cache selector for bitmap animation debug fragment",
  "39417a2": "Animations v2: Added frame cache listener",
  "8b6f435": "Showcase sample app: add settings option to clear caches",
  "0e08c64": "Remove deprecated cache build/access methods",
  "a8bef81": "Use cached frames for image compositing if needed",
  "0a978ef": "Added keep last frame cache example",
  "49111ae": "Added no-op cache",
  "7887e22": "MediaVariationsFallbackProducer pass on request if disk cache is lowest level",
  "ee39aae": "Use key in EncodedImage for encoded memory cache",
  "c3eb191": "Store cache key in EncodedImage",
  "d836946": "Use new split disk cache producers if variations enabled",
  "9b7d33a": "Fast Native Blur: Make post proccessor cacheable",
  "f66dbdb": "Add cache event when cache is cleared",
  "f03c76e": "Clear disk cache before each unit test",
  "4c00be3": "Added support for synchronous small disk cache check",
  "c5f6bbc": "Change to handle external diskcache and adapted cache size limit care - issue 898",
  "fa9d338": "Don't fail to get cached item due to missing resource index entry",
  "601db5f": "Add cache size to events",
  "920b680": "Pass caller context when creating disk cache keys",
  "dde7fe3": "Added support for synchronous disk cache check",
  "60ce67d": "Allow image requests to disable disk cache for network URIs",
  "c2351c1": "Force small images into the small cache",
  "a94367f": "Add an index to the disk cache",
  "e72dc7c": "Use the correct time when deciding when to evict from cache",
  "961bcb5": "Encapsulate insertion to cache into InsertTask interface (builder pattern)",
  "146ca45": "Moved common cache classes for animation",
  "885d76a": "Capacity to turn on multiple cache keys",
  "6eb0e62": "Allow a lookup of multiple cache keys from the disk cache in a single request",
  "3fe1941": "Switch the remove-cache methods to use CacheKey.containsUri",
  "745f303": "Move default disk cache parameters into DiskCacheConfig",
  "7115d07": "Added cache to imagepipeline-base",
  "e4317de": "Simplify disk cache API",
  "55d64c5": "Add cache probing API",
  "ebdd2d2": "Make bitmap-cache-only requests optional when using multiple requests",
  "4cbcd33": "Fixed the issue where the failure was not getting propagated down the line of getting decoded bitmap from disk cache",
  "848af25": "Fix Memory cache producers",
  "61b11ac": "clean up counting memory cache",
  "abcaf5e": "Remove cache look up strategy parameter",
  "dd9f77a": "Refactor cache trimming",
  "41e26a1": "Initialize disk cache lazily"
}, "from-java-to-kotlin": {
  "": ""
}, "frontend-maven-plugin": {
  "ec9f805": "Merge pull request #1063 from eirslett/dependabot/maven/frontend-plugin-core/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "f8de136": "Merge pull request #1055 from eirslett/dependabot/maven/frontend-plugin-core/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "3aa6a40": "Merge pull request #953 from eirslett/dependabot/maven/frontend-plugin-core/com.fasterxml.jackson.core-jackson-databind-2.9.10.7",
  "2830bcd": "Merge pull request #947 from eirslett/dependabot/maven/frontend-plugin-core/com.fasterxml.jackson.core-jackson-databind-2.9.10.5",
  "ff8a15c": "Merge pull request #330 from klieber/feature/cache"
}, "ftgo-application": {
  "": ""
}, "fullstack-tutorial": {
  "": ""
}, "FXGL": {
  "7348759": "perf: use LinkedHashSet vs Array to store Updatable, this allows significantly faster deletion of numerous Updatable objects, such as animations",
  "aa4cbaf": "perf: optimise A* pathfinding performance",
  "2e0d29c": "cache Model3D objects and return a copy on new calls",
  "c8a54a6": "significant performance improvement for collision checks where both entities are at 0 rotation, #955",
  "68d2bbe": "SAT collision check optimization, #955",
  "aaae6d1": "perf optimization for notifying collisions: use CollisionPairMap instead of Array",
  "8ad0a10": "cache DLLs",
  "f2a1a66": "intro scene animation perf optimization",
  "491d151": "simplify intro animation to test mobile performance",
  "d50d3f1": "performance improvements to intro scene",
  "4da56ac": "performance improvements to Images::merge(), linked to #871",
  "10e29c2": "performance improvements to subTexture() and superTexture(), closes #871",
  "91cb48a": "WIP ghw6 added cache and fixed fxgl-dialogue editor build",
  "ee434e5": "improve animation performance by using multiple Arrays to avoid concurrency issues, #778",
  "93cd56f": "particle system rendering optimizations, #509",
  "7ffaeea": "WIP #509 optimizing render performance of particles",
  "135fe65": "remove dep on fastclasspathscanner as it uses java.nio, so we backport",
  "3a476f1": "fixed cache loading for resource bundle",
  "6911fe8": "load resource bundle with UTF-8, also cache bundle",
  "20dbdd4": "simplified implementation of texture algorithms, added fast blend options",
  "9cc3b46": "asset cache is no longer autocleared to avoid cleaning active assets, closes #390",
  "c6f713e": "no need to use StringBuilder as there is no performance gain",
  "3a650dc": "performance optimizations to particle system",
  "dd341e8": "run preloading animation indefinitely (case of slower machines take longer to configure)",
  "0f27158": "fail-fast behavior for game state properties",
  "8154b83": "cache menu content, added debug tracing messages, closes #196",
  "2df11b6": "added asset cache test",
  "9cb3a31": "cache m2",
  "c0d664b": "switch to asset cache which autocalls dispose() on removal",
  "c5bec5e": "cache image data not view",
  "51b41b8": "major restructure, cleanup, use preloading stage, better exception handling, faster init and exit",
  "26f4287": "added primitive performance profiling",
  "0d80ae1": "optimizations",
  "32f84df": "require PositionComponent, lots of internal memory + GC optimizations",
  "030f4f7": "cached result for collision without queries for hit boxes",
  "8edd5f3": "memory optimizations",
  "96191e3": "use LinkedHashMap as cache, removed redundant deps",
  "5a9ec41": "using ehcache for assets, closes #111, caching system done"
}, "Gadgetbridge": {
  "a5ed37a": "add fastlane and xml changelog",
  "1bf5625": "Add Portuguese translation for fastlane metadata for main and banglejs",
  "01495af": "add Czech translation of fastlane metadata for main and banglejs",
  "65a7cea": "Add option to share a cached watchface/app to another app",
  "872ef44": "Bangle.js: fastlane metadata",
  "d5aa4da": "Move fastlane into flavor-specific directory",
  "3d69401": "Revert 'Move fastlane into flavor-specific directory'",
  "36c1123": "Revert 'Bangle.js: fastlane metadata'",
  "7a9b827": "Bangle.js: fastlane metadata",
  "416d3c1": "Move fastlane into flavor-specific directory",
  "86f738d": "Actual working app loader - albeit slow",
  "c25b3c6": "update xml and fastlane changelogs",
  "28659a6": "update xml changelog and fastlane",
  "dcf869b": "Fossil Hybrid HR: Confirm overwriting cached watchface",
  "fa89df5": "Fossil Hybrid HR: Edit existing watchfaces from app manager cache",
  "ef46035": "update xml and fastlane changelogs",
  "0b021d7": "Made the firmware version extraction a bit more robust and added annotations to keep data classes after optimizations",
  "fc351af": "add xml and fastlane changelogs",
  "30ebad8": "Activity icons, fastlane screenshots, pebble widget steps fix",
  "73b2be6": "add fastlane and xml changelog",
  "2b1ce31": "add xml and fastlane changelog",
  "119fb45": "add fastlane and xml changelog",
  "78da422": "Add xml changelog and fastlane",
  "c75362c": "Fossil HR: minor optimizations",
  "a773258": "Added a base set of Proguard rules in case optimization is enabled",
  "c29f439": "add fastlane and xml changelog",
  "e985d2c": "Updated fastlane screenshots (#1754)",
  "4646ea9": "This helps to collect fastlane screenshots",
  "74df3ff": "Code optimizations",
  "d5cd59a": "improved sorting performance",
  "1b3fbe5": "add xml changelog and fastlane",
  "5c8bd86": "add fastlane and xml changelog",
  "0c35eec": "Fix firmware spelling in CHANGELOG.md Fix spelling in fastlane metadata changelog Fix spelling in res/xml/changelog_master.xml",
  "d65eb1e": "add fastlane and xml changelog",
  "c6d8086": "add fastlane changelog",
  "7d4df50": "add fastlase and xml changelog for 0.29.1",
  "fbdd4dd": "add xml and fastlase changelogs",
  "e36ecb1": "shorten Geman fastlane short description also",
  "c95b9d9": "remove version from fastlane changelog",
  "628efe8": "update fastlane metadata to include Amazfit Bip",
  "8269b36": "fastlane: move icon.png, run optipng on them and remove header from changelogs",
  "fe3448f": "Add icon.png to the fastlane metadata and update License - added a 512x512px version of the launcher icon to each language directory - added the fastlane graphic resources to the LICENSE.artwork file",
  "e5edd33": "add fastlane changelog for 0.19.4",
  "caf79bb": "First test of fastlane metadata files for English, Italian and German: - added title and feature graphic for all three languages - added short and full description for English and Italian - added changelog only for last version and only for English",
  "21498bd": "Pebble: mimic openweatherapi response from our cached data.",
  "8154a88": "When there are cached services, skip service discovery",
  "30c37d3": "Pebble: only remove apps from app list when they got deleted from cache also",
  "24c51de": "Pebble: also delete other files from cache when deleting .pbw",
  "80cf9fa": "Pebble: allow to delete apps from pbw cache",
  "30883ab": "Pebble: In AppManager mark cached apps with (C), installed apps on FW 2.x with (D) and (CD) if both is the case",
  "5a20d7e": "Pebble: no longer clear list of cached apps as soon as the installed watchfaces is received from Firmware 2.x",
  "ca71441": "Pebble: also copy pbw to cache on Firmware 2.x",
  "a460049": "Sort by label and blacklist status, hopefully fast enough #275",
  "d7f7485": "Pebble: allow reinstallation of apps in pbw-cache from App Manager (long press menu)",
  "62c196e": "Pebble: determine pbw type early for correct display in pbw-cache on firmware 3.x",
  "1c3e0b6": "Pebble: store app details in pbw-cache and display them in app manager on firmware 3.x",
  "b05cfc6": "Pebble: fix crash on firmware 3.x when pebble requests a pbw that is not in Gadgetbridge's cache",
  "749fbe5": "Pebble: fix crash with emply pbw cache",
  "6ed5448": "Pebble: only fill app list in AppManager with cached apps once in onCreate()",
  "5a8c9a9": "Pebble: cache installed pbw files on sdcard if force untested option is set",
  "c4096e6": "Add daniele's db optimization the WITHOUT ROWID"
}, "GalleryFinal": {
  "": ""
}, "GCViewer": {
  "43e370d": "Minor optimizations",
  "990e38f": "create and cache every ExtendedType on the fly",
  "2a6f2ec": "improve performance for g1 log files without PrintAdaptiveSizePolicy",
  "bbfd52f": "performance improvement: only draw visible rectangles",
  "0328805": "Merge remote-tracking branch 'nigelzor/draw-clipped-line' into nigelzor-performance",
  "9ff83a5": "performance improved for large gc logs and coarse zoom levels",
  "7ae7ff9": "performance improved for large gc logs and detailed zoom levels",
  "50898da": "reset polygon cache when timer is running",
  "cf8c5d2": "reset polygon cache on resize of chart",
  "e0052e9": "cache computation of polygons in chart",
  "33b0c67": "some performance optimisation",
  "c850427": "performance-optimisation in 'getTypeAsString()'"
}, "GDA-android-reversing-Tool": {
  "": ""
}, "GeekNews": {
  "e07fed4": "finish cache",
  "193e9a0": "add cache"
}, "generator": {
  "7cc4d0f": "Add cache_implementation and cache_eviction properties to CacheNamespacePlugin",
  "dcd7809": "Merge pull request #715 from jeffgbutler/cache-namespace-plugin",
  "6e4a464": "Reset cached information at the start of generation runs",
  "09ba7fd": "[generator] Fix for issue #590 - cache plugin"
}, "geoserver": {
  "8b1ecd45": "[GEOS-10813] -- jdbcconfig cache bug,changed the workspace name (#6473)",
  "b121df63": "jdbcconfig - make unit tests run faster in IDE (#6488)",
  "955b9cde": "GEOS-10717: XStreamServiceLoader performance improvement with XstreamPersister caching",
  "15bc56ca": "[GEOS-10610] Selective cache reset on stores and resources, via REST API",
  "fcc7b3f4": "[GEOS-10580] StatusPanel improvements for display of locks, connections, threads, and resource cache",
  "d362a38d": "[GEOS-10545] Layer Group cache not initialized (#5985)",
  "d68e8d9f": "Improve index management performance and reliability",
  "c4e0c506": "queryablesbuilder filter by array pulled from database into cached collections features (#5729)",
  "8709992a": "[GEOS-10387] Thread updating a cache in ResourcePool might block indefinitely other threads reading from the same caches (#5667)",
  "5a4418cc": "[GEOS-10289]: Improve Shapefiles Directory datastore performances with huge amount of files",
  "f6d183c6": "[GEOS-10230] MarkFactory rendering optimization support on WMS GetMap (#5279)",
  "53edf445": "[GEOS-10265] WFS-T Bulk Transaction optimization (#5325)",
  "dac95502": "[GEOS-10258] Features templating cache might retain orphan templates",
  "fb388f8b": "[GEOS-10246] Jdbc performance improvement from unnecessary transactions",
  "505242da": "[GEOS-9732] jdbcconfig: cache locks for globalinfo and logginginfo not working",
  "daa9cdcc": "Fixing the importer test reconfiguring the same layer on same NetCDF data. clearing the cache",
  "e1602f73": "[GEOT-6902]: Follow up on NetCDF performances improvement - caching",
  "6271215f": "[GEOS-10072] WMS dimension default values and nearest match can pollute caches (in GWC and beyond) (#5093)",
  "a6e5e955": "[GEOS-10064]: Follow up on WPS-Download I/O performance improvements. Fixing Estimator writing tests",
  "4323399e": "GEOS-10044: allows GWC to cache layergroups when a cql_filter is specified and a requestParamFilter for FILTER is configured in the tile layer",
  "1ea1deac": "Improve performance on heterogeneous mosaics requests against OpenSearch index",
  "370b585a": "Merge pull request #4757 from geoserver/dependabot/maven/src/com.fasterxml.jackson.core-jackson-databind-2.10.5.1",
  "4a81bb30": "Clickhouse and DGGS service, some optimizations",
  "347f2330": "GEOS-9762: MapPreviewPage performance improvement with less catalog requests",
  "26eea11f": "[GEOS-9684] Geowebcache layer preview memory issue",
  "93abe998": "[GEOS-9594] CSW: performance issue: every page loads entire catalog",
  "45261828": "Setup GeoPackage creation for fast output",
  "5096d940": "[GEOS-9606] JdbcStore: allow directories to be automatically cached",
  "a3c76650": "Update the dependency number versions for geotools and geowebcache",
  "2120a768": "Fix spelling of cash to cache",
  "879fa2e6": "Allowing more time for slow platforms, while speeding up the resource theory test on faster ones",
  "891d2829": "[GEOS-9383] Allow tile cache file system layouts following TMS and XYS structures",
  "ec8be660": "[GEOS-9382] GeoServer fails to truncate tiles caches with parameters",
  "3b705c53": "Updating to jai-ext 1.1.12 (faster 8bit quantizer)",
  "7eb0d68f": "GEOS-9169 ResourcePool datastore cache cluster-safe",
  "d5ccdb82": "optimization, fetch single tag",
  "acfdccc5": "Speed up data_dir load by making ConfigurationPasswordEncryptionHelper faster",
  "5c11618a": "Fix gwc tile layer load performance regression at startup",
  "a7cd5f66": "Add schema.cache.dir system property usage to user manual (#3412)",
  "e96b3df0": "[GEOS-9088] OR performance issue with complex subqueries on app-schema with postgis datasource",
  "4012363c": "Merge pull request #3281 from aaime/faster_simplify_mvt",
  "50dbc329": "- minor optimization: filter fileds as Filter type",
  "ba255ef9": "Removing gt, gwc and gs jars from the cache, they have to be download fresh, or created new, every time",
  "f563ce72": "Use smart builder in Travis, get better diagnostics about slow tests",
  "68191c3c": "Performance optimizations, reduce number of queries performed on the database",
  "853119bb": "[GEOS-8944] GWC fails to cache tiles if GeoFence with source IP driven rules are used for authentication (#3126)",
  "f29d33da": "Merge pull request #3025 from mbarto/geos8827_cache_wms_sld",
  "a6262816": "Merge branch 'master' into geos8827_cache_wms_sld",
  "2d6baf5f": "Adding appveyor build cache",
  "60c985df": "GEOS-8837 get rid of hazelcast cache",
  "91472495": "Adds gwcBlobStoreAggregator bean to geowebcacheDispatcher bean constructor",
  "f23f3aac": "[GEOS-8692] Add cache hit/miss and miss reason to the information captured by monitoring",
  "44461dce": "[GeoFence Plugin] Do not raise RunTimeException if cache entry is missing",
  "b3c817db": "[GEOS-8636] Ensure that the service cache does not retain old service info when the database is updated.",
  "75787a34": "[GEOS-8596] More optimization work",
  "f684dd5c": "[GEOS-8600] GetTimeSeries slowness against multi-band coverage views",
  "6abbfa7e": "GEOS-8530 Improve jdbcstore performance (dramatically)",
  "0a3f0ee2": "[JIRA GEOS-8539] [GeoServer REST Role Service] - Implement a configurable internal cache to avoid making calls to the REST endpoint on the short period",
  "ae5da90b": "GEOS-8188 Jdbcconfig performance: prevent pointless query for id by id",
  "d57dc855": "GEOS-8188 Jdbcconfig performance: ServiceInfo cache",
  "1f0bbabe": "GEOS-8188 Jdbcconfig performance: hazelcast compatibility fix",
  "fa0ca646": "GEOS-8188 Jdbcconfig performance: cache by name",
  "c0383c17": "Merge pull request #2664 from aaime/feature_size_cache",
  "19be306d": "[GEOS-8320] Updated HzCacheProvider to support the same system property to control the cache eviction time that JDBCCacheProvider uses.",
  "a354c9dd": "updating tests to work with the new spring mvc rest api for geowebcache.",
  "47b20aca": "[GEOS-8171] add a generic method to clear caches for external graphic factories",
  "adef562d": "Merge pull request #2385 from groldan/geogig-shared-cache_2.12.x",
  "3b89e5d2": "New geogig settings page with options to monitor and configure the shared cache",
  "a6873f24": "Invalidate repository cache when repository info changes.",
  "140bb093": "Change the way the geogig plugin caches RepositoryInfos.",
  "87eca349": "Merge pull request #2329 from smithkm/gwc-optimization",
  "4e4e7338": "[GEOS-8123] GWC caches stale response encoders",
  "5db8637f": "Merge pull request #2172 from nmco/remove-wfs-1.1.0-cache",
  "b3c0c5fb": "Merge pull request #2140 from nmco/remove-wfs-1.1.0-cache",
  "45aab5a0": "[GEOS-8017] Stop using a global cached schema in WFS 1.1.0",
  "eb65e667": "Merge pull request #1999 from aaime/faster_startup",
  "7fefbe8d": "More logging to investigate the concurrent cache issue",
  "9efca588": "[GEOS-7895] Add cache-control and etag to capabilities request",
  "868c16a9": "Merge pull request #2008 from aaime/slow_startup",
  "6684d227": "[GEOS-7884] Slow startup of GeoServer with many layers - Remove geometryless check in GWC initializer for in memory cache, not actually needed",
  "74bfcfa8": "Fix built after fast lookup changes, use harder to lookup CRSs",
  "ae284e2e": "GEOS-7464, updating jai-ext to get improvements in the tile cache final cleanups",
  "b4fdabc6": "[GEOS-7464] Using this tile cache cleans up the tile cache at the end of a request with very large images a lot faster",
  "d60cbbef": "Merge pull request #1989 from geoserver/crs_fast_lookup",
  "d9274644": "Fix built after fast lookup changes, use harder to lookup CRSs",
  "b2086457": "GEOS-7464, updating jai-ext to get improvements in the tile cache final cleanups",
  "b89024df": "[GEOS-7464] Using this tile cache cleans up the tile cache at the end of a request with very large images a lot faster",
  "f83b6578": "Fix GeoGig DB closed issue - Separate Geogig DataStore repository references from cached references so repos don't get closed on DataStore instances",
  "deadfd44": "Fix WMS endpoint possibly returning cached tiles to unauthorized users.",
  "1924f4a9": "Removing referencing to snapshot repos, they are apparently not needed and slowing down the build",
  "faf054da": "- Jira GEOS-7614 --- WARNING: requires GeoWebCache PR https://github.com/GeoWebCache/geowebcache/pull/399",
  "373711f1": "Sample the logarithmic scale with less steps to get a more reasonable legend, as well as faster rendering",
  "f3ec0434": "[GEOS-7497] Restricting security on layers breaks aggregate visitor optimizations in JDBC stores",
  "2d2f8871": "Merge pull request #1517 from bencaradocdavies/rest-delete-cached-tiles",
  "c435cf87": "Delete cached tiles when layer removed with REST DELETE",
  "75a30c94": "[GEOS-7427] Make SecuredGridCoverage2DReader using a cached Crop operation instance",
  "c4d11d6a": "Merge pull request #1458 from anthonyccri/csvoutputformat_performance",
  "5986689d": "Improve performance in CSVOutputFormat",
  "8f366f36": "Merge pull request #1459 from bencaradocdavies/geos-7387-cached-layer-removal",
  "7b672585": "Add test that removing a layer from the catalog also removes its tile cache [GEOS-7387]",
  "59a3989b": "[GEOS-7387] Cached layer removal fails to remove cached tiles",
  "80a65802": "Fix gwc/gridset, gwc/cachedlayers, layer preview + some cleanup",
  "defe244f": "[GEOS-7354] Fix for slow GetMap response times with tiny bounding boxes that could happen when advanced projection handling is disabled.",
  "53d1ae1a": "Trying to fix intermittent failure on the windows build box (too fast for the assumption that in 1ms we cannot paint 10 layers with 2 features each...)",
  "69f4a923": "Allow usage of tile caches other than SunTileCache",
  "f4bbc6eb": "GEOS-7203, Check that there is a cache before checking if it's enabled",
  "455de3cc": "Close root geojson object and add advertised tile cache format.",
  "04b20a89": "Give slow/busy build servers more time to time out the execution",
  "855466e2": "GeoFence: improve cache stats info page.",
  "8635a914": "GeoFence: fix cache behaviour. Fixes geofence#49.",
  "7e03168e": "One more fix for slow build servers",
  "89b4d4e4": "Merge pull request #1026 from geoserver/cache-provider",
  "a9933fe1": "Merge pull request #837 from geosolutions-it/memory-cache",
  "80b45596": "Make sure we start counting the delay from the the process actually started (needed for slow build servers)",
  "c56ce0f4": "Make the flow control tests more tolerant towards slow builds",
  "23e1c060": "[GEOS-6791] GeoServerTileLayers are saved even if _Create cached layer_ is disabled",
  "2bc2ba76": "GeoFence: fix cache setup",
  "ab41c906": "Extra set the offset to 0 to disable paginating when skipping the NumberMatched element. This creates a faster request.",
  "3ac427a0": "Merge pull request #624 from weskamm/documentation_featuretypecache",
  "c05ac2ee": "GEOS-6245: switched using local storage in data_dir for cached samples",
  "e768225d": "Merge pull request #642 from mbarto/geos6567_guava_cache",
  "b03791f9": "added documentation for featuretypecachesize",
  "032de9d5": "Change the word 'seeding' to 'truncating' in the geowebcache rest documentation.",
  "26f52e40": "Merge pull request #396 from smithkm/cache-pool",
  "f312f052": "Resource Pool performance patch from Ordnance Survey",
  "1b5f431c": "Clear cached config/catalog data in JDBCConfig",
  "b02ec316": "Catch and log layer-specific exceptions when GWC searches for layers that have been affected by a style change. Otherwise the cached styles will not be cleared out if even a single layer has a configuration problem that throws an exception.",
  "2d213b3a": "Fix style generation, cache JAXB context as it's expensive to create",
  "8f48f213": "GEOS-5851 Make sure we don't synch up computing a non cacheable feature type each time we need a feature source",
  "c25c5992": "[GEOS-5840] Changing the default style of a layer won't cause truncation of the tile caches for layer groups containing the layer, and, [GEOS-4760] Make GWC tile layers use the GeoServer layer's http caching settings",
  "94917e72": "cache-control headers in integrated wms, GEOS-5686",
  "fb1dd381": "ensuring intermediate checkouts of geotools/geowebcache checked out into build, and ignored so not added on commit and tag",
  "92aea8cc": "remove geowebcache dependency from ManifestLoader; remove duplicated Status codes section into rest config documentation; improve rest-config-examples-curl documentation adding version and manifest examples;",
  "46697a1e": "Fix up documentation copyright except for scripts which mention david winslow",
  "03ad1fb8": "Don't cache coverage readers if the key is null, they would end up overlapping and we end up with NPE while cleaning the cache. Oddly enough these symptoms seem to surface only with JDK 7",
  "a7b607cd": "added test case for geometry coloumn check for layer to cache",
  "4f54ffc7": "Modify test to account for slower build boxes (or lower granularity in Windows timers, not sure which one)",
  "8536fdb7": "safely disposing a resource from its cache, and fixing issue not closing file stream when loading schema.xml/xsd file",
  "fb8ae59b": "[GEOS-3901] Have rest endpoint display a note when no rest extensions are installed, patch by David Winslow",
  "32c91103": "[GEOS-4209] Add a way to control the meta tile output format cache so that external apps can drop it on demand",
  "291f30c2": "Adding a LRU authentication cache",
  "fc40183f": "[GEOS-4932] JSON outputFormat extremely slow for GetFeature + BBOX with big WFS-layer, patch by Rudi Hochmeister",
  "d530de04": "increse gwc performance by increasing the metastore connection pool size. Now that it uses commons-dbcp we should use a .properties file to configure it though",
  "9d81ee6d": "warn if the coverage access page's imageio cache memory threshold is not set. It makes ImageIOExt.createImageOutputStream to use a FileCacheImageOutputStream which imposes an unneeded load on the system when seeding a lot of tiles (in the order of 20% perf. penalty)",
  "266a0737": "GEOS-5009: Provide a way for the dispatcher to call a service operation avoiding reflection, for cases where it impacts performance due to thread contention",
  "9cc4834f": "port gwc rest mappings to match the fix of https://github.com/GeoWebCache/geowebcache/issues/95",
  "8d387fcf": "Renamed methods used for cache automatic configuration",
  "1571ac0d": "[GEOS-4730] Use a soft cache in resource pool",
  "1bb05c7f": "[GEOS-4291] enable logging about gzip compression, patch by David Winslow"
}, "gephi": {
  "4c76e92": "Use artifact upload/download instead of cache actions",
  "8a02f13": "Try fix windows cache path",
  "5a8392b": "Remove default maven cache",
  "3a5d4b0": "Debug again env for cache",
  "2f5c919": "Make release cache clean for each workflow run",
  "2a74533": "Tryout autoupdate workflow using cache",
  "b847fb5": "Add isValid() and cache static columns",
  "8cad2f2": "#1706 Clarify how pagerank works in the code and improve performance. Also adapt code to correctly take into account parallel edges so each neighbor is not processed several times (+ ignore self loops too).",
  "1dd46d1": "#1633 Trying to improve performance",
  "91af55f": "Improve performance and better decouple visualization from graph structure by updating labels text in world building phase only",
  "f27bbaf": "Update fastutil dependency to 6.5.9",
  "0299ef4": "Fix text refresh performance issue",
  "bfb9e21": "Fix performance issue of XML string date representation.",
  "6f8b714": "Improve dynamic graph snapshot performances",
  "3bc14bf": "Improve graph writing performances by introducing a conditionnal write lock.",
  "844983f": "Fix too slow event firing, the number of events fired now depends on the size of the queue",
  "eaedcaa": "Add removeMetaEdge() and getTotalEdgeCount() methods in GraphAPI. Update DHNS to maintain mutual meta edges count to fasten getMetaDegree method.",
  "d0d7d1d": "Improve MathUtils code performance when getting all statistics.",
  "b43d6ea": "Use JTable instead of JPanel in partition transformer, faster and fix bug 519549.",
  "9175630": "Minor optimization on GEXF import.",
  "07ce1bb": "Finalize edges counting optimization on DHNS. Get only degree on enabled nodes and optimize edges counting. Fix unefficient counting on undirected graphs.",
  "0d48b68": "fixed various bugs in the timeline when dealing with integer or double data types, and improved overall performance",
  "b745e76": "PreviewUI: improved performance in the Processing applet by caching the generated Processing fonts.",
  "1c9319f": "Debug ImportGEXF slowness",
  "1e46607": "Remove locking in fine-grained Graph API methods, due to performance overhead. Update Graph API documentation.",
  "b55be13": "Graph locking performance tests.",
  "64164b3": "Hack for faster startup on NBP.",
  "7c966df": "Architecture for modular workspace data. Modules implement WorkspaceDataProvider interface to say they want to get/set data associated to a workspace instance. WorkspaceDataController provides WorkspaceDataKey to fast access to associated data. Code a example in the visualization module.",
  "fb31f56": "Potato architecture, visualization, data transfer and cache.",
  "e95b46c": "Sight cache management.",
  "2e018f2": "Work on cache model and locking patterns.",
  "eb5d1f0": "Include arrow in object cache synchronizing process.",
  "64313b6": "Synchronizing between visualization and data through bridge and a cache marker.",
  "93d85e4": "Support billboarding for arrow, they are oriented face to camera. Use vectors instead of angles. Inscrease performance.",
  "de8220d": "Better method for calculating edge orientation and better performance.",
  "cf39823": "Increase edges drawing performance. Edges have also now settable thickness, which doesn't change when zooming. Instead of a line, two 3d trangles are used."
}, "Geyser": {
  "37c936e": "Chunk biome optimizations",
  "d1cedbb": "Generate velocity-plugins.json and relocate fastutil (#2940)",
  "7853e8c": "Fix cache image task from last commit and make it work with reloading",
  "0069566": "Dependency update; re-use Thread.MAX_PRIORITY for Spigot; other network optimizations",
  "bb92c89": "Small optimizations; use array for Java -> Bedrock block mappings",
  "ac17963": "Player effect cache cleanup",
  "ce74899": "Javadoc fix and tiny teleport optimization",
  "46cd26f": "Don't cache non-locale assets in the LocaleUtils asset cache",
  "9817dc9": "Merge branch 'feature/optimizations' into master",
  "95a1cbf": "Some more micro optimizations",
  "25edf41": "Some optimizations",
  "e162cd5": "Micro-optimizations in player entity code",
  "ad53564": "Create a new cached chunk when a block is created in an empty chunk",
  "ebf726c": "Yeet cache chunks",
  "0691bb6": "Item frame optimization and block picking support (#2203)",
  "7f03446": "Entity link cache fixes (#2068)",
  "86397ef": "Chunk cache improvements (#2053)",
  "1d8961c": "Allow GeyserWorldManager to be overwritten while still holding a cache (#2036)",
  "88d4903": "Update Protocol lib and fastutil (#1990)",
  "5a8604f": "Skin fixes and optimizations (#1856)",
  "11d9d30": "Fix mounts being unmountable with cache chunks (#1576)",
  "c64d574": "Block entity performance improvements (#1481)",
  "7757913": "Update MCProtocolLib to fix cached chunks on non-Spigot (#937)",
  "4d32f6a": "Access world manager instead of chunk cache to fix particles on Bukkit version",
  "0caecf6": "Only add entity to entity cache if ID doesn't exist (#428)",
  "af1c6d6": "Relocate fastutil for velocity version to fix NoClassDefFoundError",
  "a77c08b": "Relocate fastutil for velocity version to fix NoClassDefFoundError",
  "60662ae": "Moved break time checks to BlockUtils class, Created ItemUtils and added helper function to get enchantment levels on items, implemented a entity effect cache, added haste and mining fatigue check for block breaking animations, fixed block breaking animations for blocks with speeds that are not affected by tools.",
  "c7f1f0b": "Shade in fastutil for Sponge and relocate to shaded package (Fixes #198)",
  "6635241": "Fix rare slow dimension switching",
  "38fd537": "Revert storing chunks in chunk cache",
  "08357ed": "Uncache chunks",
  "3067c72": "Use chunk cache and fix ChunkPosition",
  "c462017": "Improved remapper performance",
  "7f051bd": "Start work on a basic chunk cache and block collision detection",
  "769b6a4": "Update cached pallete"
}, "ghidra": {
  "11ac896f": "Merge remote-tracking branch 'origin/GP-3264_ghidragon_debugger_slow_down_caused_by_byteviewer_selection_bug'",
  "e13957f5": "GP-3264. Fixed issue with byteviewer with selections starting and stoping on the same separator line caused debugger slow down",
  "c377b245": "GP-0: Creating BundleHost cache directory in a more reliable fashion",
  "67677174": "GP-3050-2935 Eliminate client-side canonical hostname lookups. Add subject alternative name to self-signed server certs. Improved initial server connect check to use faster timeout.",
  "e96f223d": "Merge remote-tracking branch 'origin/GP-2908_improvie_table_sorting_performance--SQUASHED' (Closes #4782)",
  "9c4ec3af": "GP-2908 Improved table sorting performance",
  "2286d6f5": "Merge remote-tracking branch 'origin/GP-2828-dragonmacher-table-markers-performance--SQUASHED'",
  "9e08b8c0": "GP-2828 - Table marker performance",
  "38292de0": "GP-0 improved thread safety for cached lastSubBlock",
  "277a0f58": "GP-2777 Structure build-up and resolution performance improvements",
  "5d041d32": "GP-2719: Fixed cache clearing issue in watches",
  "975db191": "Merge remote-tracking branch 'origin/GP-2345_ghidraffe_shared-performance-projects--SQUASHED'",
  "2d51b95c": "GP-2176: Some dyld_shared_cache fixes",
  "21215043": "GP-2176: Support for new iOS16/macOS13 dyld_shared_cache format",
  "d1313cff": "GP-2113: Some fixes to Objective-C support for dyld_shared_cache",
  "5eed3210": "GP-2236 Changed DataTypeDB clone implementations to return self if the specified datatype manager is unchanged. Makes consistent with javadoc and could improve resolve performance in some cases.",
  "1430d18f": "GP-2113: Objective-C support in dyld_shared_cache",
  "6deac3a2": "Merge remote-tracking branch 'origin/GP-2059_dev747368_GhidraFileChooser_root_iteration_slowness_fix--SQUASHED'",
  "bd627116": "GP-2019: Improving dyld cache and prelink Program Trees",
  "70b0602a": "GP-2020: Support for loading split dyld_shared_cache files from a GFileSystem",
  "49a426eb": "GP-0: Fixing issue with discovering split dyld_shared_cache files",
  "d5fd9a05": "SuperH4: `fsca`: Minor performance optimization by using precomputed pi*2 constant and casted values to float before returning (for better decompilation)",
  "94975a23": "GP-1986: Fixed a 'hash has changed' exception that would sometimes occur when extracting .dylib files from a dyld_shared_cache file system.",
  "5be1971e": "GP-1949 corrected memory map cache update for block removals",
  "db27e3cb": "GP-1949 - MemoryMap, AddressMap and ELF MemorySectionResolver import performance improvements",
  "60c47844": "GP-1948 Refactor program tree for improved performance during import",
  "879963b0": "GP-0: Fixing split dyld_shared_cache FILE memory block issue",
  "99f97004": "Improved extraction of dylibs from dyld cache. 'size' command no longer errors out when parsing.",
  "9e9e64dc": "Updated test db cache dir to cleanup once per test file when not in batch mode",
  "df358c53": "Merge remote-tracking branch 'origin/GP-1675_ryanmkurtz_kernelcache' into patch (Closes #2487)",
  "164fcbbe": "GP-846++: fix for cache invalidation for dbgeng/model (GADP variants)",
  "d9221cb8": "GP-1524: Support for the new iOS 15/macOS Monterey dyld_shared_cache format",
  "85d20478": "Merge remote-tracking branch 'origin/GP-1421-dragonmacher-vt-performance-issues' into Ghidra_10.1 (Closes #3221)",
  "c3375b6b": "GP-1421 - Version Tracking - Converted 'command' to a 'task' and updated the progress monitor to show continuous progress; fixed slow test",
  "e55550ed": "GP-1421 - Version Tracking - Updated API code to use the current in-use task monitor to allow for the cancelling of slow implied match finding.",
  "2e04bd15": "GP-1508 improved performance of the datatype tree recycling task.",
  "b6908813": "GP-1418 changed caches to use LRUMap instead of HashMap so that the cache will be limited to how much memory is uses.",
  "c425c965": "GP-398: Fixing NullPointerException when loading older kernelcaches",
  "9d12f6c5": "GP-1411: keying space cache by identity",
  "156ce7ef": "Merge remote-tracking branch 'origin/GP-1082_ghidravore_improving_symbol_table_performance'",
  "4cb04607": "GP-1288: optimization for known sizes",
  "9b8aca02": "GP-1298 PDB Improve symbols performance when many symbols at address and improve functionality; also RegisterName fix.",
  "11322c49": "GP-1187: Fix for cache reading issue.",
  "191dc196": "Merge remote-tracking branch 'origin/GP-1183-dragonmacher-vt-cache-open-programs'",
  "c2652d36": "GP-1090 Added SuperH/SuperH4 ELF relocation handler and improved performance of ELF filler segment pruning to avoid uneccessary block creation",
  "81e0aa3d": "GP-970: prepdev no longer fails when gradle cache is on a different drive than the repo",
  "fc91a106": "SuperH: Additional delay slot bug fixes Review of all delay slot instructions. SuperH: Delay slot fix for bf/s and and bt/s Code now caches the value of the $(T_FLAG) before executing the delay slot. Previously the instruction executed in delay slot could potentially change the value of $(T_FLAG) and thereby resulting in incorrect behavior. Credit to Slinga and Waterfuell from SegaXtreme for reporting the issue.",
  "1825659f": "GP-917: Implementing and using PrivatelyQueuedListener for slow model callbacks.",
  "3407d6af": "GP-762: Converting GDB to use a model-wide object cache",
  "b8362226": "Merge remote-tracking branch 'origin/GP-835-dragonmacher-defined-strings-table-slowdown' (Closes #2889)",
  "b1d55498": "GP-830 - Updated the threaded table model to allow subclasses to change how data adds and removes are performed. This fixes and exception and increases performance for the Symbol Table",
  "064e49f7": "Merge remote-tracking branch 'origin/GP-706-dragonmacher-demangler-slow-namespace-creation--SQUASHED'",
  "5accd19a": "Merge remote-tracking branch 'origin/GP-775-dragonmacher-program-tree-ui-slowdown'",
  "01b6027c": "GP-697_emteere delayed reading of symbol names to improve memory read performance",
  "aff4b18c": "Load commands will now be marked up for dyld shared cache. MachoProgramBuilder needs to know the offset into the ByteProvider where the Mach-O starts. When parsing a dyld shared cache _machHeaderStartIndexInProvider gets set to 0 and results in the load commands not being marked up. The new function getStartIndex() now serves the purpose of determining whether absolute or relative indexing should be performed. The getStartIndexInProvider() gives you the index where the Mach-O is in the ByteProvider.",
  "da3c2f85": "Fixed issues with dyld_shared_cache parsing",
  "c4b59569": "Merge remote-tracking branch 'origin/GP-410_dev747368_cache_categorypath--SQUASHED'",
  "19c8f712": "GP-410 cache CategoryPath",
  "605a6b94": "GP-422 - Data Types - Improve performance of and and task monitor to the copy/move data types task",
  "02912db6": "Merge remote-tracking branch 'origin/GP-443-dragonmacher-task-launcher-slowness' into patch",
  "6648cbb8": "Merge remote-tracking branch 'origin/GT-0_ghidravore_fixing_missing_invalide_cache_method_in_FunctionTagManager'",
  "0fcdb7c6": "Function Tags - updated DB to have a tag count cache; added service interface",
  "9cc3f01a": "Merge branch 'GP-268-dragonmacher-slow-listing-fix'",
  "4722763d": "GP-268 - Listing - fixed slow painting on functions with an outrageous number of variables",
  "7c801883": "Improves TypeDescriptorModel performance",
  "36847609": "GT-3112 - PDB Universal - caches for unique symbols at address and primary symbols for performance work-around",
  "38af2fbf": "Fixed gtree unloadChildren to fire nodeStructureChanged event so that the internal jtree cache is kept in sync.",
  "6adb6fb5": "Tests - fixed test broken due to impedance between wait time and slow test environment",
  "74284a28": "GT-0_emteere bugfix - performance issue for function start patterns post function existence check",
  "fa31a01a": "GP-21_emteere fix for slow performance when creating functions with disjointed address sets",
  "add65760": "ClassSearcher no longer scan's 3rd party jar's for ExtenionPoints in development mode when using the flatrepo/gradle cache setup.",
  "148ecd86": "Moved Jython cache directory from user temp to user settings directory.",
  "d3badd1f": "Make FID cache size match the number of functions",
  "2671c5d2": "Keep null records out of FID cache",
  "69dd762e": "GT-3578_FIDPerfIssues resize the cache for better fid performance on larger programs",
  "bdbbca30": "Improved bulk addDatatypes performance (experimental method) and corrected structure editor help text.",
  "c2d9629f": "GT-3571 Numerous changes to datatype resolve/replace addressing performance and conflict handling. Corrected composite merge deficiencies. Added datatype resolve/equivalence caches for performance improvement. Added deferred pointer resolution for structures and unions. Corrected datatype parent/child update",
  "755dc694": "GT-xx Fixed issue where layout cache was getting corrupted by multiple thread access. Fixed by not sharing the ListingModel and instead cloning it before giving it out.",
  "bb28af64": "Improved the performance of action updating at the expense of possibly doing the update twice",
  "052e4639": "Merge remote-tracking branch 'origin/GT-3535_ghidravore_category_performance'",
  "0536335c": "GT-3535 improving data type category performance",
  "cf0c434d": "Merge remote-tracking branch 'origin/GT-3414_dev747368_slow_stringtable'",
  "3ca09a92": "Merge remote-tracking branch 'origin/GT-3343-dragonmacher-cache-cleanup'",
  "e089733f": "GT-3343 - File Browser - move cache cleanup to daemon thread",
  "fab4085b": "GT-3359 improve performance of DataTypeDB.setCategoryPath()",
  "4a4cb2a1": "GT-3260_emteere cache of address set of memory blocks that are marked execute",
  "30516012": "Merge remote-tracking branch 'origin/GT-3226-dragonmacher-tables-slow-sorting' (closes #500)",
  "5c6b3271": "Changes to the GTree code to improve performance. Completely changed GTreeNode base implementations and filtering code.",
  "ea554996": "Merge remote-tracking branch 'origin/GT-3223_emteere_performanceIssues' into Ghidra_9.1",
  "41efe77e": "GT-3223_emteere cache exec set only if needed. stop gap until memory manager caches this",
  "e3b8a782": "Merge remote-tracking branch 'origin/GT-3239_ryanmkurtz_PR-916_redfast00_privilaged_typo_fix'",
  "03b0625a": "Tests - undo of bookmark optimization that breaks bookmark markers",
  "9c3ae598": "GT-3223_emteere cache of block name to block lookup",
  "ded1fbbe": "GT-3223_emteere Minor changes for performance issues on large programs",
  "f3021a75": "Allowing non-returning function names for dyld cache",
  "8e90b89b": "Added pointer chain fixes for dyld cache.",
  "5fdcb68a": "Moved function signature parser test to integration (test.slow)",
  "4dc8e771": "GT-3035 - Restore Integration Tests - restored missing test files; fast tests",
  "97f484fe": "GT-3063 - fix sevenzip fs data dup and extreme slowness",
  "fc3146ba": "Fixing a bug in the DYLD cache loader.",
  "1cc8de3e": "Merge remote-tracking branch 'origin/GT-2999_ryanmkurtz_PR-775_redfast00_aarch64-relocation-jump26'",
  "81b0f31f": "Use Attach on bstr_t otherwise the ref count can be wrong and it can still be leaked. Reserve string space in escapeXmlEntities to improve performance.",
  "4919d6ec": "Tests - fix for threading issue involving weakly consistent cache",
  "b8f042da": "GT-2343: New DYLD shared cache loader.",
  "1b12f8e8": "GT-2742 Pulled-from: Jeremy O'Brien <neutral@fastmail.com> (#347)"
}, "giffun": {
  "": ""
}, "glide-transformations": {
  "": ""
}, "GmsCore": {
  "b9b1ef6": "Detect missing heartbeat ACKs and broken connections faster",
  "f20d966": "Mapbox: Add version stamp file to cached native library",
  "e84452a": "EN: Clear matching cache to ensure we don't miss any warnings due to changed bluetooth protocol",
  "6afcca0": "EN: Add latest API details, improve performance",
  "f9cc924": "EN: Run cleanup in IO thread, improve performance",
  "f48298b": "EN: Improve database performance",
  "4893dea": "Merge pull request #197 from Nutomic/disable-battery-optimization",
  "f6c51d5": "Added item to disable battery optimizations (fixes #75, #113)"
}, "gnirehtet": {
  "": ""
}, "gocd": {
  "13d49ad8": "Merge pull request #11573 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.15.1",
  "c98e5c74": "Bump com.fasterxml.jackson:jackson-bom from 2.15.0 to 2.15.1",
  "c34769ed": "Merge pull request #11516 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.15.0",
  "ea2407b0": "Bump com.fasterxml.jackson:jackson-bom from 2.14.2 to 2.15.0",
  "55cce62f": "Tidy some warnings in artifact serving/cache code",
  "67d0aa4f": "Merge pull request #11364 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.18.3",
  "850cc715": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "f8e902f6": "Merge pull request #11357 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.18.2",
  "3474a929": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "51575625": "Merge pull request #11345 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.18.1",
  "36ebd42a": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "e50ab8f0": "Merge pull request #11329 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.17.0",
  "af86cbfb": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "9e5001f2": "Merge pull request #11321 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.16.1",
  "b9bc156c": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "e11f50eb": "Merge pull request #11286 from chadlwilson/faster-agent-getwork",
  "fac2ec00": "Merge pull request #11313 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.16.0",
  "45d1056c": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "b762a415": "Merge pull request #11257 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.14.2",
  "a53e5418": "Merge pull request #11158 from chadlwilson/enable-centos-fastestmirror",
  "79e4403b": "Enable fastestmirror plugin for CentOS image builds",
  "5de7be3b": "Merge pull request #11036 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.14.1",
  "1883474c": "Merge pull request #10999 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.14.0",
  "cd850694": "Force-upgrade cache-loader to loader-utils 2",
  "a368f012": "Merge pull request #10985 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.14.1",
  "156b489c": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "c132872b": "Merge pull request #10920 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.13.4.20221013",
  "1242fb6e": "Merge pull request #10916 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.13.4.20221012",
  "f9f46379": "Merge pull request #10773 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.13.4",
  "958c564c": "Merge pull request #10712 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.14.0",
  "a842f12d": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "427d48b7": "Remove seemingly unused cache-related hacks",
  "9f6efef0": "Merge pull request #10664 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.13.2",
  "a2becabf": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "d772504e": "Merge pull request #10599 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.13.1",
  "d96fabbb": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "5bbb342c": "Merge pull request #10567 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.12.0",
  "8dd91e3d": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "48fa895f": "Merge pull request #10543 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.10.2",
  "b668b44f": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "b57df4dc": "Merge pull request #10433 from gocd/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.13.3",
  "94b31769": "Merge pull request #10420 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-and-types/lru-cache-7.10.1",
  "befe134b": "ui: bump lru-cache and @types/lru-cache",
  "a91f502a": "Merge pull request #10406 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.9.0",
  "32dbffbf": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "019bc966": "Merge pull request #10351 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.8.1",
  "d838c84f": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "3a7ac7fa": "Merge pull request #10328 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.8.0",
  "244e99b7": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "f6ab075e": "Merge pull request #10311 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.7.3",
  "97553799": "Merge pull request #10310 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/types/lru-cache-7.6.1",
  "6c5781fc": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "a7ea431d": "ui-dev: bump @types/lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "1ca33d2a": "Merge pull request #10281 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/types/lru-cache-7.5.0",
  "7e428956": "Merge pull request #10280 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.7.1",
  "c05afddd": "ui-dev: bump @types/lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "87d3461a": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "01361532": "Merge pull request #10273 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.6.0",
  "0a6c4aa7": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "e24cbed6": "Merge pull request #10256 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.4.4",
  "2d265ac5": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "ff98134c": "Merge pull request #10245 from gocd/dependabot/gradle/com.fasterxml.jackson.core-jackson-core-2.13.2",
  "e44eb4bd": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "e447f968": "ui-dev: bump @types/lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "60ae60fa": "Merge pull request #10172 from gocd/dependabot/npm_and_yarn/server/src/main/webapp/WEB-INF/rails/lru-cache-7.3.1",
  "1192769c": "ui: bump lru-cache in /server/src/main/webapp/WEB-INF/rails",
  "8632f2ef": "Try and stabilise server fastUnitTest",
  "83586a8e": "Merge pull request #9970 from gocd/dependabot/gradle/com.fasterxml.jackson.core-jackson-core-2.13.1",
  "5d5c75e4": "Remove unused `cruise.i18n.cache.life` property",
  "6ea69f6a": "Merge pull request #9824 from chadlwilson/add-date-fastcloners",
  "4033aa25": "Add specific fast cloners for `Date`s and `Timestamps`",
  "398bdf16": "Merge pull request #9732 from gocd/dependabot/gradle/com.fasterxml.jackson.core-jackson-core-2.13.0",
  "b181ffd7": "Merge pull request #9648 from gocd/dependabot/gradle/com.fasterxml.jackson.core-jackson-core-2.12.5",
  "c9fd363c": "Migrate server fastUnitTests to JUnit 5",
  "1dd9dc9d": "Merge pull request #9483 from gocd/dependabot/gradle/com.fasterxml.jackson.core-jackson-core-2.12.4",
  "8787a98d": "Bump ehcache from 2.10.6 to 2.10.9.2 (#9249)",
  "d2d27d71": "Merge pull request #8944 from gocd/dependabot/gradle/com.fasterxml.jackson.core-jackson-core-2.12.1",
  "7ea11727": "Fix performance issues in GET agents API",
  "6901fd39": "invalidate() should also reset the error() stream to ready the caches for a refresh",
  "bbb36ec1": "Do not purge the config repo defined structures cache on polled fetch",
  "eb1bf775": "Replace `lru_map` with `lru-cache` from @issacs",
  "c3304d04": "Improve environment pipelines modal rendering performance.",
  "820055ee": "Merge pull request #7992 from maheshp/fix_feature_toggle_cache",
  "b949175d": "Invalidate User Toggles cache on change of value",
  "2e4236ed": "Remove command repository cache reload API agent agent-bootstrapper agent-common agent-launcher agent-process-launcher api app-server base build.gradle build-platform buildSrc CODE_OF_CONDUCT.md commandline common config CONTRIBUTING.md db db-support dependencies.gradle development-utility docker Dojofile domain gradle gradle.properties gradlew gradlew.bat installers jar-class-loader jetty9 LICENSE plugin-infra rack_hack README.md release scripts SECURITY.md server server-launcher settings-docker.gradle settings.gradle spark test tfs-impl tw-go-plugins util Command Repository feature is deprecated and the UI to reload command repository has been removed.",
  "6c8c921b": "Updated the performance test commands to add env changes",
  "bd4d9da2": "Putting in a fix to ensure that thread-safety on env config cache on adding agent-env association via either config change or agent service listeners",
  "a36a4591": "Moved the agent-env association performance test utility from production code to test-shared.",
  "75817efd": "Changes: - Updated the agent resource validation to add error on `resource` key - Added report generation logic at the end of agent-env association performance test.",
  "e08e827a": "First draft of Agent operation - performance and thread safety verifier - which can be invoked from anywhere on demand and is disabled/dormant by default",
  "ee2d917d": "Removed `UnknownEnvironmentConfig` and related classes. Reverted all the changes made to maintain the same in the EnvConfig service cache Updated the AgentEnv Representer class to utlize envs stored in the agent object to determine the unknown configs and render them accordingly Updated the tests as well.",
  "b08b727b": "On GoCD startup, AgentService is initialized using AgentService.initialize(), which loads all agents from DB to be cached in memory.",
  "c088046b": "Changes: - ensured that in case of updating a pending agent, if for some reason, the DB save fails save fails, the cache should not get updated. - in Env Config Service - there is only one sync method which will update the local envs copy with the input and also sync it with the agents in DB",
  "0572c426": "Implemented mutex generation and synchronizing on mutexlogic for thread-safety while updating agents and refreshing caches,",
  "9870d5a1": "1) On config xml change, environment cache gets refreshed, during that time, list of agents are looped twice to find the existing environment associations of each agent. Fixed that.",
  "952eac62": "Modified backend for environments UI to show & update agents using AgentService (from db or cache) instead of EnvironmentConfigService",
  "47912026": "Enable incremental compiles for faster builds",
  "235bca7a": "Improve performance of artifact download+digesting.",
  "6ef3735f": "Fixup some spec names, added tests for extracted util functions, and minor fix for config repo result cache invalidation.",
  "f6a3b3a4": "If fail to get templates (ie group admin receives 403) then set empty template cache to empty. Otherwise template toggle doesn't work",
  "7241db76": "Remove the `.cache` directory left behind by some npm packages.",
  "c5ddd73f": "Add a base cache class to DRY up code",
  "af8a6f14": "Use CacheKeyGenerator to generate AuthorizationExtensionCacheService cache keys (#5866)",
  "99700e59": "Invalidate AuthorizationExtensions call cache on security config change",
  "249aaac7": "Use Dashboard cache to find the running jobs during drain mode (#5190) (#5627) (#5641)",
  "062e7ae7": "IDEA reformatting and import optimization.",
  "199b7854": "#5559 - Fixed ajax poller causing performance issue (#5591)",
  "69e1777e": "Merge pull request #5550 from ibnc/config_repo_performance",
  "95d122bb": "Merge pull request #5393 from marques-work/cleanup-cacheable-interface",
  "cda55765": "Fix to issue #4650 - Username textbox in Add Roles eats up letters while typing fast",
  "98853a28": "Remove pipeline from dashboard cache if its deleted (#4481) agent agent-bootstrapper agent-common agent-launcher agent-process-launcher api app-server base build.gradle build-platform buildSrc CODE_OF_CONDUCT.md commandline common config CONTRIBUTING.md db db-support dependencies.gradle development-utility docker Dojofile domain gradle gradle.properties gradlew gradlew.bat installers jar-class-loader jetty9 LICENSE plugin-infra rack_hack README.md release scripts SECURITY.md server server-launcher settings-docker.gradle settings.gradle spark test tfs-impl tw-go-plugins util When a building pipeline is removed from config, dashboardChangeListener will try to update the cached once its completed, But as it couldn't find pipeline in the config, it bombs saying NPE",
  "4e1c201c": "Merge pull request #5310 from ketan/config-revision-optimization",
  "fde84cf7": "Improve performance of the config XML pages on admin section",
  "c4f89966": "Check if the zip/tar installers are any faster to work with",
  "093fe8a9": "Use `RAILS_ROOT/tmp` as the cache dir for webpack compilation.",
  "bf0a43dc": "Invalidate cache aftercommit within the transaction started by the service (#4995)",
  "ada104b4": "Fixing an issue where in saves for large configs were significantly slowed down when config-repos were configured",
  "32024160": "Merge pull request #4952 from jyotisingh/reverts_for_performance_issues",
  "26b90295": "Fixed an issue with config saves which caused the cachedConfig objects to have stale data.",
  "f1f858eb": "Make the PipelineConfig#cachedPublishAndFetchConfig method private.",
  "ff2a92ad": "Do not generate license report for fast builds",
  "438fd432": "Improve jar download performance",
  "e819b3c5": "Upgrade ehcache",
  "bb2241f0": "Make sure cache key generation logic should always generate unique key for given set of inputs",
  "64672f07": "Migrate to spring 4.3.x and transitive dependencies (ehcache, javassist, hibernate, mybatis)",
  "4388ce35": "Remove unused cacheModel and comment",
  "c1affe3a": "Merge pull request #4725 from jyotisingh/ConcurrentModificationException_Dashboard_L2cache",
  "aec47ad8": "Handle pipeline deletion in dashboard second-level cache. Used to throw up ConcurrentModificationException",
  "fc405f37": "Second level of optimization for `GoDashboardCurrentStateLoader`",
  "74a5b1c5": "Made cache key for active-stage check case-insensitive",
  "2d6d0020": "Making old dashboard cache case-insensitive",
  "b0a01c76": "Get a faster jasmine spec run",
  "2c1fe5dd": "Use an LRU cache to store the formatted timestamps",
  "5a6081ab": "Show message on dashboard while cache is being prepped",
  "a5f3412e": "Merge pull request #4408 from ketan/faster/dashboard",
  "90ffd341": "Merge pull request #4411 from ketan/performance/diskspace-checker",
  "cf1c2e5d": "Fix dashboard pipeline search performance issues ( #4081)(#4345)",
  "15e9a32e": "Add happy-pack dev dependency for faster asset compilation. (#4329)",
  "0130d846": "Merge pull request #4287 from GaneshSPatil/use-all-entries-in-order-instead-of-cache-get",
  "fa2d378c": "Do not expose GoDashboardCache internal data structure for access (#4121) agent agent-bootstrapper agent-common agent-launcher agent-process-launcher api app-server base build.gradle build-platform buildSrc CODE_OF_CONDUCT.md commandline common config CONTRIBUTING.md db db-support dependencies.gradle development-utility docker Dojofile domain gradle gradle.properties gradlew gradlew.bat installers jar-class-loader jetty9 LICENSE plugin-infra rack_hack README.md release scripts SECURITY.md server server-launcher settings-docker.gradle settings.gradle spark test tfs-impl tw-go-plugins util Use 'allEntries' method instead of 'cache.get' to get all the entries safely from the cache",
  "eef3825e": "Copy plugin-endpoint.js to cached assets root so that it is available to plugins",
  "d5e7aa0e": "Make p4 tests run faster",
  "32e25769": "Added a feature toggle to not cache the dashboard information until the API is ready to go live",
  "159b668d": "Implement cache for GoDashboardPipeline objects",
  "1e1846db": "Change priority of feature toggles under /api/support so that it is displayed below. Use double check to fetch information about feature toggles from cache.",
  "109316e7": "Prevent multiple yarn installs from executing and locking up the yarn cache",
  "3c64f552": "Handle NullPointerException under GoCache agent agent-bootstrapper agent-common agent-launcher agent-process-launcher api app-server base build.gradle build-platform buildSrc CODE_OF_CONDUCT.md commandline common config CONTRIBUTING.md db db-support dependencies.gradle development-utility docker Dojofile domain gradle gradle.properties gradlew gradlew.bat installers jar-class-loader jetty9 LICENSE plugin-infra rack_hack README.md release scripts SECURITY.md server server-launcher settings-docker.gradle settings.gradle spark test tfs-impl tw-go-plugins util First create call to any entity using API fails due to 'entity cache removal' request throwing a null pointer exception This happens due no no parent key GO_ETAG_CACHE present in the GoCache. Check for the parent GO_ETAG_CACHE key before removal of the entity subkey",
  "6a7b801e": "Merge pull request #3466 from jyotisingh/pipeline_state_cache_issue",
  "e47fb853": "Fixing an issue when a failed PipelineState save could have caused the cache to become corrupt. State of the object in cache was being updated before the save.",
  "f172e449": "Add performance log configuration to `log4j.properties`",
  "444f981f": "Merge pull request #3391 from marques-work/color-console-performance",
  "267cf304": "Remove line numbers to improve render and scrolling performance",
  "77ab38ba": "Fix performance issue on the pipeline config SPA",
  "5d75f45c": "Pass resolver which specifies the key to be cached for the given agent",
  "725913c8": "Merge pull request #2912 from maheshp/full_config_save_optimization",
  "2ae7fdb7": "Full config save optimization",
  "fddc9fe2": "Improve jar downloading performance",
  "0b0212ea": "Add an optimization flag to ensure that assets are minified",
  "03698ba8": "Improvements to MDU performance logging.",
  "722a8256": "Upgrade filesize.js Improve performance of filesize computation, by caching it on agent creation, instead of doing it lazily on each call",
  "4d871a65": "Add cache control and pragma header to login page (#2562)",
  "583636bd": "Don't inline partials if `fastBuild` is set.",
  "12ce05ec": "Merge pull request #2442 from ketan/improve-gradle-build-performance",
  "c65ea6b9": "Improve gradle build performance my doing less at configure time.",
  "e90656c9": "Updated log message as cachedGoPartials.lastValidPartials() can change only inside a GoConfigWriteLock which the current thread has already acquired",
  "1ea5732c": "Merge pull request #2358 from ketan/faster-jasmine-specs",
  "cadbede9": "Merge pull request #2288 from zabil/caseinsensitivecachekey",
  "3f07b140": "Change the cache key for pipeline history by name and counter to be case insensitive #2286",
  "653cd70d": "Merge pull request #2293 from zabil/cacheunittestxsl",
  "eac8073c": "Increasing timeout for this test as either the agents have become slow or the save operation itself after the introduction of two-step validation",
  "97ab6d84": "Handling issue with the config caches going out of sync",
  "ae12856c": "Improve page load performance across the board.",
  "73d616f0": "Add indices to improve performance of queries that run in the background.",
  "aba65f68": "MaterialRepository.saveModifications was being called even when there were no new modifications. This was wrongly clearing modifications cache when modificationsSince cqll returned zero new modifications during an MDU. This also invoked hibernate to save an empty list which makes no sense",
  "edff5500": "Merge pull request #2164 from jyotisingh/fixing_flaky_go_cache_test",
  "6833c105": "Merge pull request #2115 from jyotisingh/cache_expiry",
  "bd6f9b0e": "fixing serilization exception that is thrown during cache eviction",
  "131c63a0": "Merge branch 'jyotisingh-cache_expiry'",
  "69747ef2": "Handling removal of subkeys from cache when a parent entry gets evicted/expired from cache",
  "bba75c9c": "#000 - Fix build (cache related tests)",
  "3cd1810d": "#000 - Fix build (cache related tests)",
  "3574b87c": "Merge pull request #2106 from jyotisingh/composite_cache_expiry",
  "86783c51": "js performance fix: we can not afford calling $(window).scrollTop in onScroll handler. window.pageYOffset will trigger DOM reflow",
  "c6f7ee0e": "Merge pull request #2027 from ketan/make-tests-faster",
  "14f150c6": "#1098 [performance] Agent improvements: notify server immediately when do work finished to update agent status on server",
  "65ce4658": "#1098 [performance] Agent improvements: correct system property name for increase websocket max message size, add same info log on server side",
  "2c418712": "#1098 [performance] Agent improvements: set max message size correctly; increase default max message size",
  "22afed74": "#1098 [performance] Agent improvements: log runtime error when agent processed message failed",
  "289c327f": "#1098 [performance] Agent improvements: clean up unnecessary changes",
  "6c2a1e77": "#1098 [performance] Agent improvements: correct log info",
  "aea7914a": "#1098 [performance] Agent improvements: clean up AgentWebsocketService#send method",
  "e7bd929a": "#1098 [performance] Agent improvements: 1. notify agent to cancel job when running job is cancelled or rescheduled 2. change to slf4j logger 3. clear info log when agent connects with websocket or closes connection",
  "8776b5fd": "#1098 [performance] Agent improvements: fix broken test, clean log output",
  "417e097a": "#1098 [performance] Agent improvements: get rid of java.util.function dependency",
  "63626556": "#1098 [performance] Agent improvements: make it obvious what we do when InterruptedException is raised during waiting running job finish",
  "7fd2a04c": "#1098 [performance] Agent improvements: 1. change JobRunner attributes to use volatile keyword instead of AtomicBoolean which is too much for our case 2. use an Executor thread pool for processing server messages to avoid blocking by assign work message",
  "1a7e04c2": "#1098 [performance] Agent improvements: 1. handle canceling job properly, log running job details if we can not cancel it in 30 seconds. 2. try cancel running job if agent got assigned new work, which may happen due to server rescheduled job and agent reconnected with wrong status; 3. fix tests broke by previous commit",
  "fb2ac1e4": "#1098 [performance] Agent improvements: 1. mark agent lost contact when websocket connection with the agent is closed. 2. send async message to agent to avoid server side blocking IO, overall design should be robust enough for doing this (ping to update agent status, mark lost contact when lost connection, reschudule hanging jobs, e.g.)",
  "7600a8bc": "#1098 [performance] Agent improvements: clean up AgentRemoteHandler",
  "d1dc387b": "#1098 [performance] Agent improvements: 1. send report messages to server when building job. 2. make JobRunner#handled and JobRunner#isJobCancelled thread-safe. 3. setup websocket config by system environment variables 4. do not check registered status when processing ping message on server side. do it when looking for job for agent.",
  "ba950bb5": "#1098 [performance] Agent improvements: websocket agent part 1: 1. Add a system environment toggle for enabling websocket. 2. Add a toggle to disable auto register local agent for testing purpose. 3. New websocket ping with upgrade check and agent ssl registration. Notice we're doing websocket ping in original loop method, because it is configured as fixRate=false, original ping loop has fixRate=true, fixRate=true may cause client side sending out too much calls when there is one call is blocked for any reason, and we don't need very frequent ping to keep agent status updated on server side. And we will need time to test out what's right interval for websocket client to ping server (Server marks agent that does not ping in 30 sec as lost contact). 4. Process set cookie, cancel job, reregister agent and build work messages",
  "df34107d": "#1098 [performance] Agent improvements: websocket server part 3: 1. Change message format sent between agent and server, use Java serialization instead of json, because there is no simple way to dump BuildWork object into json, push json format message out of scope. 2. When agent is not registered, server responses reregister to agent",
  "ae0c6d33": "#1098 [performance] Agent improvements: websocket server part 2: assign work when refreshing jobs in BuildAssignmentService",
  "fd84b2c0": "#1098 [performance] Agent improvements: websocket server part 1: 1. Process ping action from agent 2. Assign new cookie to agent when ping info has no cookie. 3. Send cancel job message to agent if server side runtime status is canceled",
  "f25c25a1": "Disable invokedynamic and move all jruby optimization flags into the jruby wrappers",
  "0a1fdfc6": "turn off jruby invokedynamic feature: invokedynamic will be enabled by default on Java 8, and its performance is bad, turn it off by default for server",
  "6ea30a22": "Improve performance",
  "f5b4b1cf": "Improve the 'perceived' performance of `/go/api/support` call.",
  "fef835f2": "#1291 - fixing acceptance. added multi-stage dependency test to reproduce scenario & fail fast",
  "753ecf83": "Merge pull request #1294 from srinivasupadhya/fanin-performance",
  "9af14d1a": "#1291 - use map instead of list for 'nodes' for faster lookup",
  "63858f56": "#1291 - add fan-in performance test",
  "63cab5c1": "#1223 - Changed Go::Application.config.cache_classes to false in test enviroment.",
  "64e69353": "Make jruby go a bit faster",
  "025039e5": "#1089 Clearing old job identifier from cache when a build is rescheduled because a new build id is being generated for rescheduled jobs.",
  "596e0806": "Merge pull request #929 from arvindsv/remove_ehcache_call_home",
  "e66f851e": "notification end-point: use pipelineSqlMapDao.pipelineWithModsByStageId since its cached. + populate data of relevant stage only",
  "f032b28b": "#000 - Stop ehcache call home.",
  "b3beef72": "#795 - Fix issue of cache update on job/stage change.",
  "56fcc030": "#795 - Provide ordered list of projects from cache.",
  "e074970e": "#718 - implemented json-based task extension. fixed task-metadata-loader to delegate to appropriate extensions to load and cache the metadata",
  "fff4c588": "Merge pull request #668 from arvindsv/fix_erb_cache_issue",
  "48e2cf54": "#000 - Ruby string -> Java string in view cache.",
  "36ec0524": "#130 - Assets (css, images, and js) will now be served by jetty in production mode. Rails will continue to serve it in development mode. This is done to help with performance.",
  "68e661a5": "#130 - fixing go_cache code and specs",
  "1b54212b": "#130 - Moved go_cache_store_spec to rails new",
  "72183342": "Merge pull request #272 from sachinsudheendra/faster-compression",
  "569e7137": "Merge branch 'master' into faster-compression",
  "4f8d6491": "Fix a sporadically slow test.",
  "27a789f4": "#130 - spring services helper_method are not accessible in helper modules. Make them regular methods and include them in controllers & helpers (and hence views) seperately. asset browser cache was take care off by setting ENV[RAILS_ASSET_ID] = app version. this is deprecated in rails 3. 2 specs failing because of this issue. need to look for a solution. content_tag by default escapes content. used escape=false param.",
  "7c16c811": "#000 - Adding a bit more performance logging around work assignment."
}, "go-lang-idea-plugin": {
  "16d7e44": "Revert optimization",
  "469fc32": "Fix field name resolving (covered by performance tests on docker)",
  "01038b6": "Split unused functions performance test",
  "09751f9": "Invalidate packages cache on changing build tags settings",
  "e0e6010": "Add performance tests for completion without types calculation",
  "68bd5e4": "Enable performance tests for unusedVariable inspections",
  "6f4d660": "Adjust performance expectations",
  "bac2ba4": "Adjust performance expectations",
  "f4607e1": "Clear cache on changing settings + fix updating notification panels on changing build tags",
  "0ad033c": "Do not check goroot while retrieving gopaths. It leads to performance problems",
  "a74651f": "Avoid memory leak in cache",
  "7ed9b07": "generate a smart getters for TypeSpec.getSpecType and SpecType.getType, avoid performance issue in GoCompletionUtil#getTypeConversionInsertHandler",
  "98be659": "Rework function types, fix #2103, possible performance degradation",
  "e0a30cd": "Run performance tests against particular build target system",
  "07d5a33": "Update performance testData",
  "4e7c235": "Fix performanceTest task",
  "2d6b0ee": "cache type only with only null context",
  "2d652ae": "memory hogging and resolve speedup: cache go types for all named elements and expression",
  "7cb4f7a": "Do not use docker in completion performance tests",
  "aaac16d": "Completion performance test",
  "148f79d": "performance fix, relates to #1493",
  "c66a0ff": "Completion optimization",
  "766b2d7": "Fix cache dependencies",
  "2c971a6": "Move performance test",
  "cb77015": "one more performance fix",
  "cb6928f": "micro optimization",
  "a41c1f1": "parsing performance issue with assignments, fix #1530",
  "f07c0b9": "Do not cache import path on virtual file, files could belong to different projects/modules and have different import paths",
  "fb58688": "Improve imports completion performance",
  "e48e0e5": "faster block parsing during indexing",
  "1c42800": "extract cached reference",
  "6b055af": "use cache resolver for var reference",
  "9bbafe8": "use cache resolver for field reference",
  "3ce1aa9": "use cache resolver for label reference",
  "f06a4f0": "Initial performance tests",
  "f77f7eb": "poor type completion performance, fix #1327",
  "cd733f9": "some work on poor completion performance #1327",
  "af6dd4c": "micro optimization",
  "52c3d55": "performance",
  "9c14162": "resolve performance"
}, "google-authenticator": {
  "": ""
}, "google-java-format": {
  "753930c": "PUBLIC: Look up some `Method` variables just once. `Class.getMethod()` can be quite slow so it's best to avoid doing it repeatedly.",
  "f5f325d": "Improve command line parsing performance",
  "098a212": "Improve import ordering performance",
  "33fc5ba": "Fix performance issue",
  "40c5a74": "use travis container infrastructure, and cache maven deps"
}, "gpmall": {
  "": ""
}, "gradle-retrolambda": {
  "": ""
}, "grafika": {
  "": ""
}, "graphhopper": {
  "468f23a": "custom and fastest calcEdgeMillis again: make them actually the same",
  "b5a5b66": "Custom and fastest weighting calcEdgeMillis round instead of truncate",
  "b2c1f5c": "EdgeKVStorage: no need for cacheSize parameter anymore",
  "d476629": "reduce benchmark load e.g. exclude too slow LM16 case",
  "f3d58ab": "Add comment about slow non-CH alternatives",
  "ea8853d": "Improve edge-based CH import performance (#2522)",
  "d3bb0f9": "Fix stupid performance regression in PT",
  "d0bf465": "Remove acceptWay optimization (#2471)",
  "b7e286e": "OSMReader: remove isOnePassable optimization, add edges for all barrier nodes",
  "3be6bdd": "Remove small segment size optimization for sea level elevation tiles (#2417)",
  "0b703cc": "Revert 'Remove small segment size optimization for sea level elevation tiles'",
  "9c184bb": "Remove small segment size optimization for sea level elevation tiles",
  "b14ab64": "Cancel node-based witness searches early -> ~20% faster CH preparation (#2390)",
  "9b72cf1": "Remove GraphHopper#loadGraph and Princeton performance test (#2291)",
  "945701f": "deprecate cachedir and (non functional) baseurl config for elevation",
  "5c7d08d": "Pt performance improvement",
  "ba7130a": "Update GH core to 'Remove loop-avoidance optimization as it is not working currently.'",
  "4da82d9": "Remove loop-avoidance optimization as it is not working currently.",
  "e14da30": "Work around slow PriorityQueue.remove (#2092)",
  "414e95f": "Fixed: Use base graph edge explorers in edge-based CH updateBestPath again (faster)",
  "db3e79e": "Use base graph edge explorers in edge-based CH updateBestPath again (faster)",
  "d0adbfc": "Defer GtfsRealtime performance issue",
  "b66ddbb": "Transit performance",
  "e6783ac": "Use hppc.BitSet instead of java.util.BitSet for TarjanSCC as clearing bits is much faster, speeds up subnetwork removal.",
  "6da0e02": "Remove QueryGraph cache, fix #1768",
  "2f70d70": "Add continuous performance testing setup",
  "bcebb7d": "make parsing in prepareName for point_hint faster (#1718)",
  "b6ebc9b": "Adds new fail-fast option to hand-crafted matrix client. (#1661)",
  "2f8072d": "Makes QueryGraph's edge-explorer cache work for all EdgeFilters, fixes #1623. (#1624)",
  "28caa44": "Use faster hash map for visited node set",
  "a61b0ea": "PT performance improvement",
  "93d26da": "Remove String-deduplicator. Looks like an unbounded cache and a bit suspicious, since we use a database anyway.",
  "1bdd41e": "Moar performance, moar tests",
  "1d6c070": "More testing of both query modes; performance",
  "856ec62": "Removes faulty (and commented out) optimization from smart search.",
  "19367b8": "Re-enables slow testRekey test.",
  "06eb2ea": "Improve performance by more clever realtime graph schema",
  "dd59436": "Don't get into HIGHWAYS when we are doing PT only search (major performance win)",
  "13b67a7": "Merge pull request #1309 from boldtrn/short_fastest_min_weight",
  "c9433ba": "Merge remote-tracking branch 'remotes/gh/master' into short_fastest_min_weight",
  "b3b5025": "Minor performance tweak.",
  "6e34aa8": "Minor performance tweak.",
  "b0593e3": "Does some minor performance tweaks.",
  "fea96e0": "Adds node contraction performance test.",
  "0df097e": "Remove skipping of departure-wait edges in backward search -- need to insert more transfer edges if we want this optimization. Add test. Add failing test for missed transfers in backwards search.",
  "60b7b8f": "Adds some performance measures for analysis.",
  "f9ff8ae": "Does some clean up and minor optimizations.",
  "e1602ef": "Adds a measurement on a real map to test correctness and analyze performance.",
  "9c6f3d2": "Improves performance of edge-based CH query algorithm.",
  "c24b1bc": "Use faster atan2 for instructions (#1042)",
  "732a94a": "avoid exposing performance critical method to the public",
  "4e6f7dd": "Restore import performance.",
  "f400ec9": "move blocking area check before calcMillis (faster)",
  "0f7562a": "replaced primitive binary heap used for fast CH preparation with Apache Commons Collection, #562",
  "1e2e316": "use edge explorer cache, fixes #56",
  "a97d619": "added docs to short_fastest #747",
  "fe28aae": "new short_fastest weighting, fixes #747",
  "64b09e5": "make performance align with old measurement #715",
  "a0de7ee": "delay deprecation removal of took JSON entry as 0.5 java client fails, allow for slower migration, #457",
  "1bb6a3b": "important performance improvement for import (pi*thumb tests show it is 10% faster now)",
  "37df1b7": "more integration tests for alternative routes; using bidir A* to improve performance of alternative routes a lot; fixed minor glitches in SPTEntry access for bidir A*; see #640",
  "1968e7f": "readme: added omniscale mentioning and route optimization in api section",
  "8b024cd": "cache flags in EdgeIterable",
  "71209f8": "minor performance improvement for shortcut.getWeight",
  "655fa18": "more unit performance tests",
  "61145b1": "more unit performance test",
  "e68e504": "Improve bicycle handling on footways: If bicycle=yes use an UNCHANGED preference. Avoid boosting speed for all pushing sections from a fast surface. Decrease the assumed speed for highway=path from 18 to 12. Adding and improving tests.",
  "6b4e080": "revert in FlagEncoder: replaced isFoward and isBackward with more generic isBool(flags, FlagEncoder.FORWARD|BACKWARD), write via setProperties, read now again via isForward/isBackward, faster and more convenient, other less generic methods still use isBool",
  "0ebce65": "fixed #349, performance issue after merging #116",
  "07e72d9": "fixed all tests and improved location lookup, although it could be slower",
  "7841ed7": "fix #312, fastest weighting returning seconds",
  "2a3d826": "try performance improvement",
  "2154579": "fixed #287 to make GHResponse.getXX fail fast",
  "4229744": "default weighting is now fastest, fixing #261",
  "a98b744": "better document fastest weighting setting",
  "375532c": "elevation provider: use canonical path for cache dir to avoid problem for empty string",
  "d64ab7b": "replaced atan2 by similar fast public domain code",
  "6643269": "added unit test for fast atan2",
  "4f4e988": "faster atan2 via lookup table, especially important for lots of calcInstructions calls",
  "23d53c2": "MMapDataAccess: trying to fix the slow down on eleProvider.release",
  "160c5d2": "cherry: 93fe867 2014-03-05 | add reverse methods to FlagEncoder to avoid selection between 'fastest' and 'fastest2' for encoder which stores two weights per edge",
  "f40ef5a": "added changelog; minor speed optimization via avoiding going 'backwards'",
  "86d19a9": "New QueryGraph for GPS-exact routing. Not all unit test pass yet. Speed looks unchanged for area saxony; measurement moved to using GraphHopper API and fastest + dijkstrabi for normal routing",
  "90879ad": "improved docs; GraphHopper.init now defaults to chShortcuts=fastest like it is already the case for config-example.properties",
  "e9a1e5b": "increased RAM for germany -> routing+preparation is faster with this",
  "cc68992": "added some 'fastest way' test to integration tests",
  "61c1125": "decreasing neighbor updates to make last step faster",
  "5a3bc43": "prepareCH: faster and more periodic updates; bug fix in GHSortedCollection.clear",
  "1631c7a": "separate calc and add procedure for shortcuts => less accurate results but 5% faster prepare",
  "b47b500": "an EdgeEntry-free OneToMany Dijkstra to make prepare of CH faster",
  "4dc266f": "avoid extract path in preparation. faster prepare",
  "ca852f5": "new measurement script with git loop; removed performance test in routingSpecialAreaTest/OSMReader",
  "41c1772": "removing bitset from algorithms -> no need -> slightly faster for dijkstra (only). But improves speed of initialization especially for Android; closes #26",
  "9ef6a94": "trying to fix slow douglas p",
  "58f1572": "removed level filter from CH dijkstra (faster+not necessary now that we do disconnect)",
  "476b205": "PrepareCH: disconnect from higher to lower level nodes of contracting in order to reduce number of edges for higher level nodes; therefor we had to introduce second skip edge entry otherwise expanding seems to be a lot harder (+ increases edge mem usage but faster and easier expand phase); removed simple shortcuttests as we don't need it + we would need to upgrade it to new double skip edge",
  "6e43cae": "make all OSMReader tests executing and passing and faster",
  "84f9641": "several fixes to make working with API simple; using levelgraph fastest",
  "af6715a": "removed single pass osmreaderhelper as it is really slow and uses too much mem; moved createAlgo+prepareAlgo to helper",
  "8d2e52e": "minor speedup of algo (e.g CH 10% faster at least for small areas)",
  "7f8794e": "reverting 10% improvement as it makes CH preparation 10% slower",
  "0f257a0": "fixed unpacking for fastest weight calculation",
  "2dac97d": "moved to faster one2many algo",
  "5e1a3ad": "added ability to sort the graph but somehow we get slower execution from it. to be investigated",
  "13acfd3": "tried astar-bidirection with priority graph. nicely fast",
  "56af114": "MAJOR: removed lucene (without performance loss)",
  "969fb64": "using DataAccess in Location2IDQuadtree too, to make Android finally faster loading",
  "56aabea": "much faster store and load for RAM data acces",
  "e29b3f2": "fast index works but fill empty slots still TODO",
  "1f40ed3": "added disc based graph - DiscGraph which is very slow at the moment",
  "7f2706b": "prepare major refactoring to include fastest path too. step 1: simple + ref dijkstra passes",
  "b7289c5": "fixed minor bug in optimize (maxEdges); moved the two fast integration tests into unit tests",
  "a558ef2": "introduced edge segments which is slightly slower 3% but more robust memory allocation for big graphs",
  "1d03478": "tuning routing integration to be more precise; faster astar",
  "27fc8f2": "added some more locks; without all locks our new graph is only 10% slower then in-memory. probably due to float conversion",
  "2ac00f3": "tried new storage. it is as slow as mmap graph",
  "f06168d": "when using approx distance calculation quadtree search is about 30% faster",
  "eb88ec9": "finally get the same results for dijkstra with neo4j too but perf is still 8 times slower",
  "3cad22e": "more improvements but still hellish slow and dijkstra does not work",
  "9faada5": "improved draw performance by excluding edges not in visible area and excluding nodes at all",
  "50f84a3": "made creating and searching location2id index a lot faster (normed distance+different bitset for xsearch+different limit to search in fill empty); refactored calcdistance",
  "560bf3e": "make neighbor searches a lot faster but not as fast as needed",
  "8f6891c": "fixed minor bug for stats;; tried brute force perf test => even that is faster :/",
  "4db7279": "yeah neighbor search works;; boa but it is sooo ugly slow",
  "c6b2275": "made fill of quadtree a tiny bit faster",
  "d4d1a19": "finally fixed precision problem (but 10% performance drop)",
  "19a6dbe": "faster distance calc => 10% faster getneighbour",
  "d296d4c": "updated performance test"
}, "graphql-java": {
  "6b943f0": "Merge pull request #3225 from graphql-java/dependabot/gradle/com.fasterxml.jackson.core-jackson-databind-2.15.1",
  "d10892b": "Bump com.fasterxml.jackson.core:jackson-databind from 2.15.0 to 2.15.1",
  "f0d176f": "Merge pull request #3198 from graphql-java/dependabot/gradle/com.fasterxml.jackson.core-jackson-databind-2.15.0",
  "0e109d7": "Bump com.fasterxml.jackson.core:jackson-databind from 2.14.2 to 2.15.0",
  "bf76c9f": "Merge pull request #3172 from graphql-java/schema-diff-vertex-del-cache",
  "13b4902": "cleanup and a bit of performance for the possible mapping calculator",
  "89edd9a": "more performance",
  "06cdae3": "more performance",
  "7aaa378": "Merge pull request #3179 from graphql-java/dependabot/gradle/com.fasterxml.jackson.core-jackson-databind-2.14.2",
  "c63bfef": "cache actually both 'sides'",
  "88209e2": "move cache to be not global, but per partial mapping",
  "9e288e5": "Bump com.fasterxml.jackson.core:jackson-databind from 2.13.1 to 2.14.2",
  "5589e8b": "Merge branch 'master' into schema-diff-vertex-del-cache",
  "117c69f": "add cache for lower bound calculations when the target vertex is isolated",
  "2c7878e": "Merge pull request #2899 from graphql-java/deprecate-cache-control",
  "a006bd3": "Introspection performance investigation (#2830)",
  "0b887a9": "This is some performance optimisations for NormalisedOperations (#2732)",
  "981f840": "AstPrinter performance improvements (#2729)",
  "16a878f": "Merge pull request #2563 from jbellenger/jbellenger/rulesvisitor-optimizations",
  "d78cd23": "Merge remote-tracking branch 'upstream/master' into jbellenger/rulesvisitor-optimizations",
  "fee3be3": "performance",
  "b07c5c3": "performance",
  "32b4f9b": "performance work",
  "9baa577": "performance work",
  "7829b03": "performance work",
  "32a6501": "performance work",
  "7c662fa": "performance",
  "36ee1d8": "performance",
  "b407e26": "Merge remote-tracking branch 'upstream/master' into jbellenger/rulesvisitor-optimizations",
  "ba2a29a": "minor performance improvement (#2532)",
  "c7154f8": "Merge pull request #2495 from graphql-java/overlapping-fields-performance",
  "370f1cc": "Merge branch 'master' into overlapping-fields-performance",
  "928f0e2": "improve schema transformer performance by precalculating zippers for a parent and therefore avoiding iterating all the zippers every time in zippersWithSameParent",
  "e913940": "performance improvement for SchemaTransformer: avoid calling SCC twice",
  "f865a33": "performance improvement for SchemaTransformer: curZippers was never cleaned up before, now the zippers get removed when no longer needed",
  "5eb2c47": "Apollo Persisted Query check hash & In Mem cache use Execution Input Query (#2418)",
  "f421281": "Merge pull request #2143 from dfa1/perf/micro-optimizations",
  "be8025f": "Improve AstPrinter performance (#2110)",
  "69c7139": "This ius more aggressive in how it looks for cached values (#1815)",
  "06d6bbc": "refactor ExecutionPath to improve performance and to simplify it internally",
  "b623055": "Negative cache",
  "81c2a0f": "Merge pull request #1692 from graphql-java/introspection-performance",
  "2700e58": "improve introspection performance by using explicit DataFetcher for name and description.",
  "6063e7e": "Merge pull request #1616 from graphql-java/transform-performance",
  "e9b53f6": "improve performance for multizipper with large zippers",
  "821241d": "Samkline fix performance regressions - with tweaks (#1569)",
  "8bae13f": "Refactor cacheControl to more readable code (#1492)",
  "93b7b58": "Merge pull request #1422 from kaqqao/cache-control-in-execution-input",
  "682c28c": "Makes the performance of the data fetcher better by caching the properties -> class+method | field",
  "809c6ca": "Minor performance improvements build.gradle CODE_OF_CONDUCT.md coding-guidelines.md CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat graphql-java-code-style.xml LICENSE.md README.md README.zh_cn.md SECURITY.md settings.gradle src Replaced count > 0 with anyMatch build.gradle CODE_OF_CONDUCT.md coding-guidelines.md CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat graphql-java-code-style.xml LICENSE.md README.md README.zh_cn.md SECURITY.md settings.gradle src Replaced Arrays.asList(<single_element>) to Collections.singletonList() build.gradle CODE_OF_CONDUCT.md coding-guidelines.md CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat graphql-java-code-style.xml LICENSE.md README.md README.zh_cn.md SECURITY.md settings.gradle src Replaced Collections.toArray(T[<size>]) to Collections.toArray(T[0]). This is the best performing and contractually cleaner way [https://shipilev.net/blog/2016/arrays-wisdom-ancients/]",
  "81df127": "- returned back internal frames stack as it seems to be faster - implemented QueryVisitorNotifier startegy to get rid of redundant conditionals while traversing",
  "19093fe": "- performance improvements to a bleading findImplementations mechanizm. `graphql.schema.SchemaUtil.findImplementations` method performs expensive O(n^2) search for object types that implement given interface. Executed at least twice per query this mechanizm significantly slows down query execution. Replaced with another mechanizm that indexes and groups object types by their implemented interfaces at the schema creation time and runtime needs are satisfied by simple O(1) lookup in a hash map. Our performance tests indicated up to 10x boost in query executio. n",
  "0255331": "760 dataloader performance with lists (#764)",
  "1d0f3b4": "Refactored the ParseDocumentProvider:get to take a compute function as argument, makes it more natural to plug in into popular caches such as caffeine or guava.",
  "ab894db": "Preparsed document provider/cache to avoid costly parse and validation"
}, "Grasscutter": {
  "b3c80db": "Stop vendoring fastutil",
  "123fc26": "cache fetters"
}, "GravitySnapHelper": {
  "": ""
}, "greenDAO": {
  "b72c9f0": "Travis: skip performance tests.",
  "e0fc5da": "deleted 3rd party performance comparisons (moved to https://github.com/greenrobot/android-database-performance)",
  "4b4e7f6": "Add Firebase performance test.",
  "d70e5b2": "Merge pull request #231 from greenrobot-team/erickok-cupboard-performance-test",
  "9281718": "Comparison performance test for the Cupboard library.",
  "8c005a6": "Merge pull request #226 from greenrobot-team/extend-performance-tests",
  "f4ea611": "Add performance test for realm.",
  "fd67ca6": "added galaxy nexus performance data",
  "c2ff452": "updated ormlite libs to 4.34-SNAPSHOT and performance test against it",
  "d8aed31": "Added performance results for Android 4.0 plus a comparison to 2.3",
  "94b5696": "new performance figures",
  "e58ff34": "lock optimization",
  "e15c318": "performance work wip",
  "4aa073a": "improved & extended performance tests",
  "e94ae32": "uncached lazy lists, docs",
  "54af574": "updated performance table",
  "15ead71": "Collected performance data: greenDAO vs. ORMLite",
  "5d90c90": "added performance test project for ORMLite",
  "c3b025c": "deleleteAll, more performance tests",
  "a478826": "update lists, performance tests"
}, "greys-anatomy": {
  "": ""
}, "groupie": {
  "505a733": "Issue #311 - Add fast updateAsync"
}, "grpc-java": {
  "48e3baf": "rls: limit cache_size in rls config to 5M (#8603)",
  "1a3b02b": "xds: cache bootstrapInfo in the SslContextProviderFactory to prevent rereading (#8051)",
  "8ff0b23": "xds: ADS parsing: collect parsing errors on NACK; cache resources on ACK",
  "3abdb28": "grpclb: cache requestConnection if no subchannel created",
  "a49bd6e": "xds: do not globally cache results of reading bootstrap file (#6420)",
  "034675e": "grpclb: keep track of state updates for cached Subchannels. (#5441)",
  "b7dc501": "core: For Android, ignores DNS cache",
  "0a7fa14": "core: Roll forward 'core: DnsNameResolver caches refresh (#4812)'",
  "0e8cf58": "Revert 'core: DnsNameResolver caches refresh (#4812)'",
  "c24f2fd": "Revert 'core: android use smaller(2s) DNS cache TTL (#4943)'",
  "ecb206f": "core: android use smaller(2s) DNS cache TTL (#4943)",
  "1899910": "core: DnsNameResolver caches refresh (#4812)",
  "b6bf252": "interop-testing: add cacheable_unary test",
  "3f35ea6": "doc: performance implication of Metadata.containsKey() (#2851)",
  "5c37a83": "core: cache Accept-Encoding headers (#2766)",
  "496a621": "core: Use grace period to avoid exitIdleMode in fast path",
  "017f5f8": "protobuf: make buffer cache even weaker",
  "ef4e0f4": "protobuf: cache temp buffers",
  "6907d81": "core: Make getTransport's fast path lock-free",
  "8b745d9": "core: Make PickFirst.pick's fast path lock-free",
  "24de243": "protobuf: fast path zero sized messages",
  "ca5a402": "netty: cache method path conversion",
  "26bace6": "core: Improve fail fast status messages",
  "9d4a43f": "core: fail fast implementation",
  "2ed39c9": "core: cache decompressor registry encodings, and make it copy on write",
  "e4ea237": "core: Refactor TransportSet in prep for fail fast",
  "1d7a11c": "travis: Avoid $HOME in cache, since it varies",
  "51548bc": "Remove m2 from Travis cache; it's unused",
  "80f73a4": "Allow cache to be shared between Linux and OS X",
  "73e2a23": "Notify listeners before notifying child contexts of cancellation Improve performance of isCancellable check",
  "9cb36c6": "Mark some APIs codegen uses experimental to allow for optimizations",
  "9a2db9d": "Make ChannelImpl.obtainActiveTransport's fast path lock-free",
  "5a8e9f4": "Document our findings about GCM performance",
  "518b7db": "Slight performance improvment for MutableHandlerRegistryImpl",
  "3b54ffa": "Remove stray character that hinded Travis cache",
  "815df0b": "Include gradle 2.3 in Travis-CI cache",
  "89cb2d1": "Updating to latest Netty for frame logger optimizations."
}, "gson": {
  "105f28f": "BoundField.write memory optimization (#2325)",
  "e614e71": "Clarify in documentation that Gson might cache strategy results (#2215)",
  "5f2513a": "Improve AppendableWriter performance (#1706)",
  "feaf8dd": "Reduce Maven console output for CodeQL analysis; cache Maven repo (#2105)",
  "8101ab7": "list addition optimization (#1038)",
  "45511fd": "Added support for JsonSerializer/JsonDeserializer for JsonAdapter annotation. JsonAdapter is cached per the type of the JsonAdapter class. Added a test to ensure JsonAdapter works on fields of parameterized types Keep track of registered JsonAdapters and JsonAdapterFactorys in ThreadLocal.",
  "55b4a3f": "Merge pull request #724 from cconroy/threadsafe-cache",
  "7abeb16": "Thread safe method cache",
  "70f9280": "Remove usage of StringPool as it appears to slow things down and avoid Java String intern for the common cases.",
  "8daf3aa": "Inline position computation. This is uglier but faster.",
  "bdf2cac": "Replace switch with if/else when processing whitespace. If/else is faster!",
  "c7cb503": "Restore fast skips.",
  "f406d3c": "Don't fall back when we're already in the slow case.",
  "4aaa4bf": "StringMap was suffering because the string's hashCode was not cached. Address this by preferring the regular String.hashCode until hash collision problems start to occur.",
  "aa52435": "Apply an ugly optimization to save 5% on pretty printed JSON documents. This uses locals instead of fields in an inner loop to save field reads and writes.",
  "61a549b": "Don't allocate exceptions in the common case. On one benchmark this improved performance by 20%.",
  "4c06b01": "Cache all computed type adapters. On one particularly violent test (issue 375) this improves performance by 77%.",
  "4da08b0": "Remove two implementation classes that weren't generally useful: - The cache interface has only one implementation. Drop the interface; we can add it back later if necessary. - The DefaultTypeAdapters class contains one member class. Just make that a top-level class.",
  "0bcd1b3": "Revised Gson to refuse to deserialize floating point numbers into integer types. This is probably a break from the past: previous versions of Gson allowed truncating a floating point into a long or int. However, it wasn't consistent in this behavior. It disallowed converting a BigDecimal value into BigInteger, int or long. Refusing to deserialize such values is aligned with fail-fast approach of uncovering bugs.",
  "ce79e16": "StringPooling. This makes things up to 20% faster on dalvikvm for some data sets.",
  "8246351": "Parsing numbers lazily as a performance enhancement. This avoids needing to parse number if the equivalent object field doesn't exist. It also avoids the performance penalty of trying to parse it eagerly as a big decimal, float etc.",
  "bf4ab04": "replaced multiple caches in ReflectingFieldNavigator with a single one. Two additional optimizations: - storing the field list for the entire type hierarchy in the cache instead of navigating it every time. - storing the resolved type for the field in FieldAttributes instead of using reflection every time.",
  "4d9bec2": "Caching inheritance hierarchy for a type to reduce performance impact of reflection.",
  "6d3e0e9": "Added a cache for no-args constructors to avoid expensive reflection everytime an object needs to be instantiated.",
  "dc60cb1": "Made FieldNamingStrategy2 is package protected class. Made type hierarchy adapter registration package protected. Marked some of the classes final. Minor changes in the performance tests.",
  "389f918": "Add new performance test for large objects (many fields).",
  "9c7bfc6": "Allow cache size to be configured.",
  "9816426": "Add new Cache interface and LRU Cache implementation to cache field annotations per 'Class' (rather than per instance). This results in a significant speed-up (approx. 3X) when serializing/deserializing the same classes over and over again.",
  "e3af076": "Deprecate the FieldNamingStrategy interface and replace it with FieldNamingStrategy2. This is the first step to help make it easy to cache field annotations across all instances of a class, etc.",
  "610580b": "exposed final fields of Pair for fast access. Pair is used quite a bit during serialization because of its use in ref stack.",
  "fff9147": "Added some tests to measure serialization and deserialization performance of Gson based on the discussion in http://groups.google.com/group/google-gson/browse_thread/thread/7a50b17a390dfaeb Surprising just marking a field as exposed halves the performance.",
  "eac1bea": "Added performance tests for byte array serialization and deserialization.",
  "2c25fdd": "Added a test to measure performance of Gson on large collections. Gson's parser handled a collection of 1.4 million objects for serialization. For deserialization, the numbers were lower and Gson parser gave a stack overflow beyond a collection of 87,000 objects.",
  "6a80791": "Code cleanup and some minor performance fixes.",
  "7aa1d0f": "Reusing the JsonNull instance everywhere instead of recreating it. This is a minor optimization, which is possible because JsonNull is a stateless object.",
  "4d73459": "moved performance tests under the metrics package and replaced the invalid JSON string with \n with a valid one.",
  "d74ecbf": "Updated JsonParser to use Token to match strings instead of productions. This enables Gson to handle much larger strings (~10s of MB) than previously possible (<100kb). This also reduces memory and stack requirements, and increases Gson performance as well."
}, "GsonFormat": {
  "": ""
}, "GSYVideoPlayer": {
  "ee7bd5a": "Refine code in gsyVideoPlayer-proxy_cache module",
  "c1e4e94": "fix error cache server when HostnameVerifier & TrustManager null",
  "7f7bfe7": "proxy cache support ssl error",
  "bb8a270": "update exoplayer 2.10.0 change exo cache api",
  "d733603": "修正代理缓存cache的header问题",
  "1db96c3": "cache logic",
  "996d7ad": "fix cache",
  "b36d9f0": "调整exo的cache机制",
  "1aed045": "调整exo的cache机制",
  "bb1810f": "调整cache机制",
  "163bdbb": "unlock cache file",
  "0f0d61e": "unlock cache file",
  "4c0b32e": "增加exo 的cache， cache支持m3u8等",
  "e11c4e0": "去除cache模块的log库依赖",
  "f7b2779": "add video cache (2017-10-22）",
  "44fc504": "add video cache (2017-10-22）",
  "d8e556b": "improt video cache"
}, "GT": {
  "": ""
}, "guava": {
  "5530374": "Stop comparing the performance of `common.cache` to that of `ConcurrentHashMap`.",
  "67350a3": "Add `@CheckReturnValue` to `com.google.common.cache.package-info.java`, add `@CanIgnoreReturnValue` (as necessary), and trim `com.google.common.cache` entries from the cirv exclusion list.",
  "11f526d": "Add `@CanIgnoreReturnValue` annotations and suppressions (as appropriate) to `com.google.common.cache`.",
  "dc90ff2": "Add `@CanIgnoreReturnValue` annotations and suppressions (as appropriate) to `com.google.common.cache`.",
  "7581939": "Improve the performance of Hashing's toString computation.",
  "412a420": "Use built-in cache in actions/setup-java.",
  "df55981": "Bump actions/cache from 2.1.7 to 3.",
  "6643301": "Note that Caffeine does sometimes behave differently then Guava's cache.",
  "8eff3ed": "Start with a smaller but faster growing buffer when reading to a byte array",
  "8652b45": "Bump actions/cache from 2.1.6 to 2.1.7",
  "d2c202a": "Mention the dangers of minimization/optimization for EventBus users.",
  "a902c9e": "Annotate most of `cache` for nullness.",
  "bac4f85": "Bump actions/cache from 2.1.5 to 2.1.6. Closes #5579.",
  "f141c8e": "Recommend Caffeine over common.cache.",
  "9c5cd0e": "Bump actions/cache from v2.1.4 to v2.1.5",
  "42bf4f4": "Fix compatibility between the cache compute methods and a load.",
  "a5ef129": "Add `@CheckReturnValue` to some `com.google.common.cache` APIs.",
  "a1e9a0b": "Upgraded ByteStreams#copy(InputStream, OutputStream) to use the faster FileChannel if possible. See also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.",
  "2cc4830": "Use internal fast path for getting failure without allocating a wrapper ExecutionException",
  "e2ee9b7": "Document that HashBiMap.containsValue() tends to run in faster-than-linear time (overriding the default documentation from AbstractMap.containsValue()).",
  "689a32b": "Fix some rawtypes in com.google.common.cache.",
  "daed909": "Optimize ImmutableSet's hash flooding detection, using an algorithm which allows more false positives (though we calibrate the constant factors to compensate) but runs O(log n) times faster on average.",
  "d5cd6a6": "Enable GoodTime-API for c.g.common.cache",
  "ed5e8f7": "Remove pre-mature optimization of storing a total bit size for ConcatenatedHashFunction.",
  "9bf6d95": "Add java.time.Duration overloads to CacheBuilder: cacheBuilder.expireAfterAccess(Duration) cacheBuilder.expireAfterWrite(Duration) cacheBuilder.refreshAfterWrite(Duration)",
  "96294be": "Add missing nullable annotations on the fields in the cache package.",
  "1260652": "Document why AbstractIteratorTest looks slow under GWT but really isn't.",
  "2da8a91": "Use diamond operator in base+cache+concurrent. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=165453531",
  "f5383c7": "Avoid referencing ContiguousSet directly in Range, instead just using SortedSet. This actually constitutes a general optimization, since we make it O(1) for all SortedSets and not just ContiguousSets, but it also makes a big difference to ProGuard:",
  "978fbc1": "Remove the singleton list optimization from ImmutableList.sublist",
  "32c885b": "Preconditions.java: reword the section on Performance to clarify what aspects of performance are actually expected to be an issue in practice.",
  "e375c34": "Annotate some flaky slow tests as @AndroidIncompatible.",
  "59bb189": "Defer overlap checking in ImmutableRange{Set,Map}.Builder to the build() call, which matches the behavior in ImmutableMap.Builder and allows significantly faster handling of the case where ranges are inserted in predictable order.",
  "48daa0a": "Skip GWT tests on Travis. They're just too slow.",
  "eb62df7": "Optimize directed graphs to consume less memory, at the cost of additional code complexity. Some very rough benchmarks also seem to indicate this has slightly faster runtime. I suspect this is due to improved cache performance/locality when using a single Map.",
  "a302923": "Improve EvictingQueue.addAll()'s performance by skipping the head of collections larger than the size of the queue. Also clear the backing queue in such cases to avoid calling .remove() n times.",
  "1b2cb05": "Super source Strings#isNullOrEmpty to improve JS performance.",
  "85461bd": "Super source Objects to have Objects#equal(String, String) to improve JS performance.",
  "d178325": "An optimization for removeNode() on undirected graphs. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=127583081",
  "501e335": "Update edgesConnecting().size() and edgesConnecting().isEmpty() to be more efficient for Networks with parallel edges. In particular, take advantage of the cached successor multisets. Currently the methods are always O(D). This will also be O(D) if successors hasn't been invoked, but will be O(1) for future calls. For example, with something like:",
  "1e17b25": "Migrate from easymock to mockito in javatests/com/google/common/cache ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=126971307",
  "8a2e184": "Avoid using MapRetrievalCache unless node lookup is expensive. The class constructs 'CacheEntry' objects when adding to the cache, which if the cache is not used makes us slower, and even if the cache is used is roughly a wash speed-wise if map lookup is fast (e.g. a HashMap or ImmutableMap, and an object with a reasonable hashCode()). ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=126874176",
  "f941b2d": "An optimization for Graphs and Networks, inspired by Michael. Introduce 'MapIteratorCache' and 'MapRetrievalCache'. MapIteratorCache is extremely light-weight and optimizes the follow case:",
  "9d2a5e9": "Make degree(node) on directed networks O(1) instead of O(D), at the cost of a teensy bit of memory (a self loop counter). In actuality it doesn't seem to take up any extra memory, perhaps due to how the object is padded/aligned. Additionally, this CL makes iterating through incidentEdges() slightly faster on directed networks if no self-loops are present. In the undirected case, adding and removing self-loop edges is now slightly faster.",
  "9b9286c": "A teensy weensy optimization for the no-self-loops case. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=125596848",
  "e246cf9": "Improve the performance of addEdge(). This doesn't change the big O runtime (it's already O(1)), but it does eliminate several hash lookups :) ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=125397749",
  "b8ebf50": "Lower 'expected degree' for internal maps, of which we have O(N) per graph/network. This greatly reduces memory consumption for graphs of small average degree, in exchange for a small performance hit for graphs of large average degree. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=125369630",
  "f3381da": "Push asList() cache down into ImmutableCollection subtypes to avoid holding onto the extra reference in ImmutableList. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=124186158",
  "e53a815": "Make a couple of optimizations to UnsignedLongs.toString(x, radix):",
  "dbd485e": "Small optimization for node/edge containment. It wouldn't be worth it if nodes()/edges() returned they keysets directly, but wrapping in an unmodifiableset involves an extra object creation and subsequent garbage collection. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=120366484",
  "966e8f1": "Add test coverage to IncidentNodes to ensure our equals/hashcode is compatible with other Sets. Add a (micro)optimization to avoid constructing an iterator object for calls to contains(). ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=114329541",
  "6e8370d": "Some optimizations to AbstractIteratorTester based on profiling data on MapsCollectionTest. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=113299505",
  "4b6ffd4": "Improve performance of nested calls to Iterables.concat() and Iterators.concat() *without* using any additional memory. This CL brings the runtime from O(D^3) to O(D^2), where D is the nesting depth of concatenation.",
  "0b32831": "Suppress test under Android. It is occasionally slow, making GuavaAndroidTests flaky. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=110259603",
  "1b7e284": "Adds to PairedStats toByteArray() and fromByteArray() to facilitate (faster) serialization. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=110027472",
  "e507004": "Skip cases in which checkedMultiply() fails on Gingerbread (because of an Android bug that has since been fixed). I would ideally also be unsuppressing the test now, but it's sometimes slow enough to be flaky, so I'm leaving it suppressed. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=109997357",
  "dca69d5": "Re-suppress testDivNonZeroExact, which, like testDivNonZero, is too slow. It's been flaky since I turned it back on. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=109911520",
  "ff7e92e": "Port a small optimization made to a copy of ByteStreams upstream.",
  "1f2b877": "Convert much of Guava to Truth by using Refaster.",
  "05daed8": "Optimize the GWT TimeUnit library in terms of performance.",
  "f0c1ccb": "Fix cycles com.google.common.cache. Adds @J2ObjCIncompatible to com.google.common.util.Debugger. Stop whitelisting other packages that pass the cycle test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=99038555",
  "49312a9": "Override isHashCodeFast() to return true for a couple ImmutableSet implementations for which... well, hashCode() is fast. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=96044185",
  "f79d64f": "Remove all of common.cache from @Beta. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=90542356",
  "9ff016c": "Delete redundant performance overloads from SingletonImmutableList. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=90196002",
  "bd929fa": "Trim overrides from SingletonImmutableSet that are just for tiny performance wins. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=90191174",
  "231f8ad": "Microoptimization: presize builder when deserializing ImmutableMap ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=89527038",
  "c082549": "Call file.toURI().toURL() outside of the entry iteration loop. It turns out that this sequence may end up stat'ing the jar, which can significantly slow things down. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=86990876",
  "0860d0e": "More doc tweaks based on martinrb@s comments on [] (sorry, submitted too fast!)",
  "59407b6": "Adds a small clarifying comment to the Javadoc of common.cache.RemovalListener.",
  "99d2816": "Create TrustedListenableFutureTask so that our listener executor services can produce futures compatible with the new setFuture optimization. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=82743827",
  "2a35e94": "Migrate off of deprecated Truth methods (created using Refaster) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78472045",
  "810e9ec": "Migrate off of deprecated Truth methods (created using Refaster) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78471461",
  "9113082": "Migrate off of deprecated Truth methods (created using Refaster) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78471417",
  "582bce8": "Migrate off of deprecated Truth methods (created using Refaster) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78470770",
  "a2abf89": "Change the implementation of Futures.combine to be faster!",
  "965c296": "Make Enums.getIfPresent ~16 times faster for 80% hit rate, ~72 times faster for 20% hit rate.",
  "6a122f1": "Add some performance enhancements to Striped:",
  "9363dbd": "Remove deprecated, unused, Google-internal Futures.transform overload that accepts a plain Future. The ListenableFuture overloads appear to be serving users well. For those users who are stuck with a plain Future, we still provide Futures.lazyTransform, which has similar but not identical behavior to Futures.transform. Specifically, lazyTransform does not cache the result of the transformation. This could in principle result in Futures whose value changes over time. This, along with the potential costs of repeated function application, is a reason to prefer Futures.transform when possible. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=59754254",
  "74f36d8": "Clarify the performance improvements of Ordering.sortedCopy over alternative implementations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=57924772",
  "351689a": "Don't use Preconditions.checkArgument in primitives checkedCast methods, as it boxes for what should be a very fast method. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=56995761",
  "db10165": "Lazy-initialize all the things (in Hashing). For some of these this may be overkill but we have reports of major <clinit> slowness on Android.",
  "31e1f16": "Replace CharMatcher.WHITESPACE by a much faster implementation as it doesn't deserve to be slowed down by division. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51342342",
  "3d0bd8c": "Trivial cleanups: - Remove stray paren in Ordering Javadoc. - Fix runnable/executor confusion in ExecutionQueue Javadoc. - Fix MockingModuleTester and FastStackTracer links that refer to type parameter T instead of its valid name, the erased type Object. Fix a few @see errors while there. - Remove 'This class is GWT compatible' comments, which have been redundant since we began using @GwtCompatible in testlib code. - 'unreasonable slow' => 'unreasonably slow' - Fix continued-line indent in Invokable. - Insert spaces in cast expressions. - Add missing spaces before open braces. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47059317",
  "c4a6f8f": "Add boolean parser to cache builder. add flag for record stats. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43956416",
  "45db748": "Make ExecutionList smaller and faster by using a manual queue instead of a LinkedList.",
  "6162f3a": "Minor optimizations for BaseEncoding.",
  "1404ead": "Further LongMath.sqrt optimizations, to show that a simple truncation is in fact sufficient. (This actually simplifies the proof.) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=39276105",
  "69ad96b": "Change Hashing.smear to use MurmurHash3's mixK1, which appears slightly faster and more effective for use in open-addressed hash tables. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=37090965",
  "15cef0c": "Speed up notably slow math tests for GWT's sake. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=34540675",
  "79821ec": "Applied package sanity test to common.cache. I had to add some checkNotNull() to LocalCache and CacheLoader, based on my understanding of the javadoc. Though it does change the contract: some didn't throw NPE on null, some threw UncheckedExecutionException. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=34462784",
  "b2a1546": "Some minor further optimizations to Ordering.leastOf. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=34392353",
  "8f48177": "Change Splitter#on(String) to Splitter#on(char) for single character strings - Results in a 10-25% performance improvement see bug for details",
  "1af87fe": "Rewrite Futures.immediate*Future with simple immutable Future implementations, and change Futures.immediateFailingFuture to not rethrow on Error. This speeds up the creation of immediate futures by a factor of 10, which is significant for, e.g. the upcoming asynchronous cache, which uses many more immediate futures, particularly for the translation layer between CacheLoader and AsyncCacheLoader. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=32923067",
  "4c88a39": "Further CharMatcher optimizations, eliminating more unused code and especially identifying when the negation is better to precompute than the matcher directly.",
  "464b0cf": "Guava issue 1049: minor optimizations for CharMatcher",
  "8011045": "HashIterator fix for LocalCache Remove a few unused chunks of code from common.cache ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=32015573",
  "654a760": "Decrease tasks again for get() basher, which currently takes 4x as long as any other cache test. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=31820210",
  "ce12472": "Fix a few minor issues in cache javadocs. Some of this patched from fry. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=31272683",
  "5c2ee46": "Add @Nullable annotations to computing map/cache implementations to satisfy Findbugs. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=30931750",
  "f44e441": "Add an optimization for CompoundOrdering to avoid iterator allocation. On my benchmarks, for the common two-comparator case, the speedup is ~30%. From Louis: http://codereview.appspot.com/6092047/ ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=29762878",
  "577ff97": "Adding some performance remarks/warnings regarding recursive constructions of Iterators#concat and Sets#union ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=29609623",
  "ca91565": "Delete the unnecessary DoubleUtils.fastAbs, preferring the JVM-intrinsified Math.abs. From Louis: http://codereview.appspot.com/5992076/ ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=29482263",
  "9605978": "Inline Itera*s#getLast into FluentIterable#last due to performance issue in GWT. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=29097188",
  "94225aa": "- throw InterruptedException from CacheLoader methods - propogate interruptions which occur during cache loading ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=28832819",
  "3900659": "Use murmur32 for hashing when coercing IPv6 addresses into IPv4 addresses. Although murmur32 is slightly slower, it has fewer collisions (on a sample dataset) and is licensed under the MIT License. The hash was last changed on 2010/12/06: [] ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=28793594",
  "3b4e1a6": "fix cache links ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=28332818",
  "9d782cc": "Make minor simplifications to WellBehavedMap, and small optimizations to ForwardingSet. From Louis: http://codereview.appspot.com/5719046/ (Also, sneak in a change to make toRemove final.) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=28047471",
  "a4944fb": "Roll back CL 23327883's very broken FeatureSpecificTestSuiteBuilder optimization. (We don't clone the tests, so we run all methods against the same target class (the last to be initialized).) Fix up newly failing tests (except for CompactIntegerListTest, for which I've filed a bug). Most are problems with the tests themselves: - Test suppressions weren't being carried over to tests of the reserialized collections. - Map values() collections were universally assumed to permit null queries. - EnumSet was asserted to fail fast on concurrent modification. - Many ConcurrentModificationException tests advanced the iterator past the end of size-zero or size-one collections. - It's not possible to create an empty collection that contains null. Empty collections don't contain anything :) - (Bi)MapGenerator.create is passed an Object[] containing Entry objects, not an Entry[]. - (Bi)MapGenerator.create is passed an Object[] containing Entry objects, not an Entry[]. - StandardImplForwardingNavigableMap.keySet() returned a SortedSet instead of a NavigableSet. - StandardImplForwardingNavigableMap implemented lastEntry and descendingSet in terms of one another (using the standard* methods). - Tests of null SortedMultiset values fail when run against a nullsFirst() comparator because the nulls are outside the submultiset ranges tested. - NavigableSets.synchronizedNavigableSet(SafeTreeSet) does not allow null queries. - Tables.transformValues().cellSet() permits remove operations. - collect/testing SmallTests needed their timeout increased. - CompactIntegerListTest didn't specify all the mutation operations it supports. A few are fixed by improvements to production code that arguably aren't strictly 'bug fixes': - ConcurrentHashMultiset.removeAll(collectionContainingNull) threw NPE. - Maps.unmodifiableNavigableMap().subSet/headSet/tailSet returned a SortedSet instead of a NavigableSet. - NavigableMaps.unmodifiableNavigableMap().keySet() returned a SortedSet instead of a NavigableSet. - RegularContiguousSet.contains/containsAll threw NPE (which the EmptyContiguousSet equivalents did not). - WellBehavedMap.entrySet().remove(null) threw NPE instead of returning false. (The fix removes the need for Sets.transform.) A few more are real bugs: - TreeMultiset.add(null) succeeded even for comparators that do not permit null. - TreeMultiset.remove(null) failed even for comparators that permit null. - TreeMultiset iterators couldn't remove null elements. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=28001960",
  "a122d63": "Make the shortcut methods in the new hashing API faster by using the legacy implementations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=27671418",
  "2c6e136": "Switching to non-power-of-2 bloom filter sizes, and making serialization more future-proof. Unfortunately, this changes the serialized form, since hashBitsPerFunction was hardwired to the BloomFilter, and that really assumed power-of-two tables. Also, this fixes a nasty exponential-slowdown bug that was in the previous version of BloomFilter (that code was added to support serialization, and deleted as part of the new strategy for serialization) ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=27307766",
  "49dee29": "Test suite checking for fail-fast iterators. From Louis: http://codereview.appspot.com/5556071/ ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=27129949",
  "46156c9": "take core cache classes out of Beta ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=27122549",
  "f69e0d2": "Create PriorityQueue with internal capacity 2 instead of estimating the size from the number of inputs. This is simpler, and it might be faster than iterating twice. It might be slower if the input (a) is a Collection (so that size() is available) and (b) is larger than size 2 (so that growing the array is necessary), but I'm not too concerned. Only 2 of ~8 callers have a chance of passing in more than 2 inputs, anyway. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=25641457",
  "1075566": "be more accomodating of slow gc reference enqueuing ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=25267574",
  "125c1b3": "Add GWT tests for cache and labs.concurrent. These are the last two packages that use java_and_gwt_library but not java_and_gwt_tests (excluding annotations and labs.converter, both of whose GWT-compatible classes are all annotations). The newly added tests discovered that Cache.gwt.xml contains dependencies that the package doesn't declare, and I've removed them. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=24827412",
  "d099e2b": "BigIntegerMath.factorial rewritten to be faster. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=24767128",
  "00dbf54": "Replace old 'simple' Strings.repeat with more complex, but faster implementation based on binary exponentiation. Add benchmark to compare with old method. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=24327769",
  "dc850b6": "forbid null return from cache lookups, and null parameter in invalidate ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=24168264",
  "4fc7c37": "- add cache cleanup - scrub @since tags",
  "db84b65": "Hide flattenHierarchy() behind a MapMaker cache.",
  "da891b4": "Add package info for common.cache",
  "bf3cbe7": "Introduce common.cache",
  "6acec39": "Remove collect.Cache and all associated classes and references, soon to be added in common.cache.",
  "f61b847": "Avoid storing an extra cached copy of the ToStringHelper's internal string. Also avoid storing the separator and instead store a boolean.",
  "75214c9": "Fix keySet() of transformed maps when the map iterator doesn't support remove(). Improves performance of that key set.",
  "39fbaad": "- added Equivalences.pairwise() - cleanup failed MapMaker computes with invalidateValue instead of racy removeEntry - detect recursive MapMaker computation and fail fast rather than silently deadlocking - send MapMaker notifications after unlocking related to computaiton",
  "803f44a": "Fix performance problem in LinkedHashMultimap.removeAll(key), as documented in http://code.google.com/p/guava-libraries/issues/detail?id=371&start=100",
  "4c949e3": "Fix bug in InetAddresses and performance problem in InternetDomainName (changed from regex to CharMatcher)."
}, "guice": {
  "15d95bb": "Fix issues with recursive JIT loading that would lead to a deadlock and/or crash inside Guava's LoadingCache. The problem had to do with the fact that Guice eagerly stores uninitialized JIT bindings in an attempt to allow circular dependencies, and Guice also attempts to cleanup failed JIT bindings (to remove these uninitialized JIT bindings). The JIT binding cache was a guard against a recursive call back into the constructor's cache, but we were removing that guard.",
  "2f10f64": "use java version as part of the cache key.",
  "ba107f4": "update bazel cache.",
  "25fe439": "Minor memory and performance fixes for Guice.",
  "a26bb01": "Update workflow to cache maven packages.",
  "13e9520": "A bunch of tiny optimizations based on profiling some common injector patterns.",
  "fc17191": "Split out String and InMemoryStackTraceElement caches to avoid unsafe casts. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=116294578",
  "09fec22": "Use the bridge classloader if the member being accessed is public and all its parameters are public additionally avoid using fastclass at all if the type is detected to be in a classloader with a different version of cglib.",
  "cf703c3": "Enable Travis container infra & cache maven deps",
  "06669e7": "Merge pull request #911 from mcculls/dependency-stack-performance",
  "1f9c76b": "Improve performance of internal DependencyStack collection",
  "9be698d": "Minor optimizations to InternalContext bom BUILD build_defs.bzl build.properties CONTRIBUTING.md COPYING core examples extensions mvn.bzl osgi.bzl pom-template.xml pom.xml README.md test_defs.bzl third_party tools util WORKSPACE use ArrayList.removeRange to pop the context, this allows us to elide range checks. bom BUILD build_defs.bzl build.properties CONTRIBUTING.md COPYING core examples extensions mvn.bzl osgi.bzl pom-template.xml pom.xml README.md test_defs.bzl third_party tools util WORKSPACE Don't eagerly allocate a Dependency object for the pushState(Key<?>,Object) method, instead allocate one when constructing the DependencyChain. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=85562648",
  "58d6074": "Set a bit in ProviderMethodsModule to see if we are generating provider methods for gin. If we are, skip fast class generation. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=71452336",
  "409e0f5": "Try to use cglibs FastClass to invoke @Provides methods, it's faster!",
  "31d8fbf": "Fix issue 723 -- minor optimizations to TypeConverterBindingProcessor. Description in the bug describes this best: TypeConverterBindingProcessor has two responsibilities: 1) prepare built-in type converters for primitives, enums, classes, etc. and 2) process TypeConverter bindings and register them with the containing injector.",
  "05bf8e5": "Add Scopes.isCircularProxy, for use by Scope implementations. The basic problem is that somewhere along the line, Guice is breaking the type-safety of <T> in the scope(Key<T>, Provider<T>) method. This happens when <T> is involved in a circular dependency, and the ConstructionContext creates a circular proxy for a given 'expectedType' of <T> (the type in the parameter where it's being injected). Expected type is a superclass or superinterface of <T>, not a subclass or subinterface, so if a Scope caches the result of Key<T> -> Provider<T>.get(), and then tries to reuse it, it's possible that we return something that isn't compatible with <T>. This results in either a ClassCastException (if cglib is involved) or IllegalArgumentException (java reflection) when trying to construct the object, because the parameters don't match the arguments.",
  "b5a75ed": "issue 506 - fail fast & with a useful error message when an AssistedInject factory has Provider<T> as a factory type. patch ( slightly modified) by ffaber.",
  "b5ec94a": "patch AssistedInject extension to support multi-constructor injection with FactoryModuleBuilder. reuses @AssistedInject annotation to mark valid constructors. undeprecates @AssistedInject. deprecates FactoryProvider in favor of FactoryModuleBuilder now that all functionality is matched and performance problems are fixed. you can still get the 'old' behavior (ordered matching of parameters, non-guiced objects, etc..) by using @AssistedInject+FactoryProvider, but using @Inject or @AssistedInject with FactoryModuleBuilder will give you the new behavior.",
  "141f800": "optimize assistedinject - touches on issue 435 - it is now about ~4x faster than the old style assisted inject (instead of being ~15x slower than it). the optimization only applies if the assisted objects do not inject an Injector or a Provider of an assisted key.",
  "6ee3634": "Removed redundant optimization.",
  "3ea8095": "Some small optimizations. Getting sources still takes the most time of all (~40%), followed by reflective access on the methods and fields of classes. There's not much we can do here, aside from the often-suggested compile-time code-gen DI.",
  "833265f": "patch from mcculls: Rolling back one of the optimizations to avoid leaving garbage behind in a ThreadLocal. The extra reference can cause the thread to strongly hold the injector, which is bad for application unloading.",
  "e89c49e": "Some low-hanging fruit optimizations.",
  "a56b012": "Guice Servlet now uses findBindingsByType. Should improve startup performance.",
  "b8a6552": "Multilbinder now uses findBindingsByType. Should improve startup performance.",
  "0de5e3e": "Changed ProxyFactory so that AOP generated proxy classes can be shared between injectors. We leverage cglib's cache, which required us to defer setting the callbacks until the instance is about to be created. It also requires us to support equals() and hashCode() for all objects used to configure the Enhancer.",
  "2ce244a": "Made type resolution way fast. We no longer build any collections -- instead we just do everything on demand. A very naive benchmark showed this to be much faster (50s vs 3s).",
  "4f5d1f7": "Made type resolution way fast. We no longer build any collections -- instead we just do everything on demand. A very naive benchmark showed this to be much faster (50s vs 3s).",
  "8ba9788": "This change is big, and it makes Guice slower. I'll need to follow-up with some optimizations that make TypeResolver quicker.",
  "b1d8ab4": "Changed ErrorHandler so that it's now safe to cache a reference to the ErrorHandler that can be used at both config time and runtime. Previously some classes needed to get the errorHandler via the Injector, since the errorHandler changed during construction.",
  "3ea63ff": "Updated Spring to 2.0.6. Added concurrent performance test.",
  "07bd159": "Added Queries.returns(). Renamed all() to any(). Excluded SourceConsumer from source tracing. Added performance check for indexing. Set version # to 1.0rc1.",
  "9bb6202": "Created ContainerCreationException which delivers the error messages to the client. Added performance logging. Validation performance might be a concern. Will keep the design such that we can lazily validate if desired.",
  "041e933": "Renamed performance test. Introduced AbstractModule to support more concise configuration code.",
  "9e5fe5d": "Added a hand coded implementation to the performance comparison.",
  "fc9337f": "Added code to automatically convert between primitive types and their wrapper types. Modified SingletonScope to use double checked locking which resulted in a noticable performance improvement.",
  "e9f0fa5": "Added comment to performance test.",
  "664a82e": "Used cglib for critical constructor and method invocations boosting overall performance by about 40%.",
  "70eb033": "Restored Spring performance comparison to working order.",
  "b052dd8": "Minor performance enhancements (removed unnecessary object creations)."
}, "guide-rpc-framework": {
  "": ""
}, "GuideView": {
  "": ""
}, "Guns": {
  "": ""
}, "h2database": {
  "8b0960c": "Add static cache of all TINYINT values",
  "71fc043": "Add static cache of ValueTime instances for each hour",
  "521cd2d": "more MVStore -> FileStore moves: caches, chunks, executors/locks",
  "067969f": "Merge pull request #3626 from katzyn/cache",
  "409fcd3": "Fix BITNOT(BIT_..._AGG(...) FILTER(...) OVER(...)) optimization",
  "5483ba7": "Add performance tests for SQLite",
  "dc0244f": "Use faster checks of dimension systems of geometries",
  "2efe5b4": "Fix group-sorted optimization for data types with different equal values",
  "9a438e9": "Fix single-row subquery optimization once again",
  "0dcfc4a": "Remove SessionLocal.temporaryResults and cache EXSITS directly in Query",
  "9412909": "Add simple cache for FORMATDATETIME and PARSEDATETIME",
  "a3aa95b": "Merge pull request #3261 from katzyn/optimization",
  "32058b7": "Reduce optimization from 292c5878c5b8652883b26eb8156e62fc9a8ce13c to valid cases",
  "c4d8106": "Merge pull request #3240 from katzyn/fix_optimization",
  "562fb59": "Fix single-row subquery optimization",
  "61a48fc": "update performance results",
  "ff0665e": "adjust performance/scalability tests",
  "45f6962": "Merge pull request #3079 from grandinj/3066_faster_lob_startup_and_shutdown2",
  "30054b0": "Test COUNT(notNullable) optimization from TestScript",
  "3936679": "Minor optimization of Comparison.optimizeOr()",
  "e071274": "Add missing optimization to ConditionNot.getNotIfPossible()",
  "0b9623a": "Fix a memory leak caused by query caches and table locks",
  "79232cd": "Extract checkMetaTables() from initMetaTable() to allow inline optimization",
  "72a22e7": "Fix unexpected MUST_GROUP_BY_COLUMN_1 in cached group sorted queries",
  "ea9d615": "Prevent incorrect optimization",
  "a98b9cc": "Fix incorrect optimization in CompareLike",
  "b712da1": "Use faster paths for short and very long identifiers in ParserUtil.getTokenType()",
  "d1bfbaa": "Remove remaining constants from ORDER BY clause after optimization",
  "274db3b": "fix NPE when cache is disabled",
  "6591874": "Remove faulty assertion. Purge dead chunk/pages from cache",
  "b61a58a": "expose ToC cache hit rate in meta table",
  "452fc2d": "add records into INFORMATION_SCHEMA.SETTINGS for chunk/page/cache stats",
  "d51c2ca": "Prevent incorrect CAST optimization with datetime casts",
  "f60f31d": "fix flaky test which depends on the cache state",
  "c879ebe": "minor fixes, tiny lock optimization, cleanup",
  "b7812c4": "Fix result data type of some AND, OR, and NOT conditions after optimization",
  "811a643": "Clear query cache on setSchema()",
  "f2bc214": "Minor optimization of JSONStringSource.parseNumber()",
  "80a155f": "Do not cache string representation of BidDecimal second time",
  "3befacf": "Merge pull request #1826 from grandinj/1820_periodic_slow_commit",
  "41ed120": "remove 'fast' parameter from MVStore.freeUnusedChunks()",
  "7ab7edf": "Prevert incorrect optimization",
  "ee85a66": "Do not reevaluate window aggregates in fast methods when frame is not changed",
  "3d9f22c": "Merge pull request #1603 from tledkov-gridgain/lazy-subq-res-cache",
  "61bdafc": "#1057, #1072 fix subquery result cache in lazy mode",
  "c424018": "cleanup StringUtils.cache",
  "a18685a": "Tiny optimization: use `System.arraycopy` when possible",
  "6d99dd0": "Use PageStore lock to access cache (issue #1371)",
  "46b7cd0": "Do not invoke StringUtils.cache() twice per string",
  "e5d7f85": "tiny optimization for map re-name",
  "9e7a31c": "additional optimizations for MVRTreeMap",
  "820754c": "Prevent incorrect optimizations for window aggregates too",
  "39ab205": "Prevent incorrect optimizations",
  "0047817": "Disable index lookups in join optimization if index is case sensitive, but argument is not. Modified test script to avoid coincidental success ('HElLo' < 'Hello')",
  "8a5b3ca": "use weak references in LIRS cache",
  "bd1e22b": "Check faster condition first in Parser.isToken(String)",
  "87aee30": "Minor optimizations in Parser",
  "36ad925": "fix cache size calculation in TestJmx",
  "c32b1ae": "Add fast paths for TRUE and FALSE to Parser.readBooleanSetting()",
  "1b87114": "Remove Parser.sortTableFilters(), this optimization is not needed in modern Java",
  "d02be51": "Use Long.signum() instead of slower Math.signum()",
  "19767b0": "Merge pull request #1120 from grandinj/1097_slow_querygroup",
  "cec23b7": "cachedlookup not worth it after all",
  "81110c1": "switching to HashMap makes the performance a lot better",
  "bcf436f": "forgot to clear the cachedLookup stuff",
  "670af00": "Merge remote-tracking branch 'upstream/master' into 1097_slow_querygroup",
  "b30f9e1": "cache lookups into exprToIndexInGroupByData",
  "940de59": "Do not poison cache with untrusted geometries",
  "0468cb7": "Merge pull request #1087 from grandinj/planning_performance",
  "c42281c": "improve performance of planning large queries",
  "39ff37a": "performance - fix passing concatenation to StringBuilder append",
  "82fa24a": "performance - do not check for string == when equals will be called",
  "e3a1473": "performance - duplicated delimiters in StringTokenizer",
  "78a85b1": "performance - avoid unnecessary String.substring calls",
  "beab6dd": "performance - use Colections.singletonList instead of list when possible",
  "dccd670": "performance - redundant array creation for vararg calls",
  "6e0c5af": "performance - use initialCapacity for HashMap",
  "0837f2d": "performance - use addAll instead of manually adding each element",
  "586bd8b": "Add and use fast DateTimeUtils.absoluteDayFromYear()",
  "0a5a996": "Year 1900 can use fast path in absoluteDayFromDateValue()",
  "7bae69d": "remove wrong implementation of optimization on date_trunc",
  "ccf8a6e": "Use Mode.getEnum() instead of comparison with slower Mode.getOracle()",
  "da20265": "Use fast path in AbstractFunctionCursor for first == null && last == null",
  "c4a8893": "Use cached names of months and weeks in ToChar",
  "f320d50": "Use = ANY(?) example instead of complex one in performance.html",
  "e7e6a8a": "Add DataUtils.getMapName() as faster alternative to parseMap().get('name')",
  "0f634e9": "#630 Integer overflow in CacheLRU can cause unrestricted cache growth",
  "cfbdf44": "GC overhead calculation and reporting on performance/scalability tests",
  "f3d5f26": "small optimizations, backward compatibility with 1.7 ConcurrentHashMap.keySet()",
  "5831e75": "Merge pull request #553 from andreitokar/mem_optimization",
  "baa510d": "Merge pull request #516 from StephanErb/slow-slf4j",
  "c4def34": "Reverted synchronization from query cache",
  "835c528": "MVStore: for object data types, the cache size memory estimation was sometimes far off",
  "88c6bd3": "File systems cache, memLZF, nioMemLZF did not support concurrent writes",
  "524c1ed": "#453 MVStore setCacheSize() should also limit the cacheChunkRef",
  "e4a9814": "add an option to control size of compress later cache in the nioMemLZF filesystem",
  "8cef94b": "improve performance of nioMemLZF",
  "d0282e5": "Issue #430: Subquery not cached if number of rows exceeds MAX_MEMORY_ROWS",
  "b35d4c8": "Merge pull request #419 from marschall/cache-maven-repo",
  "ac948af": "trim the list of our unit tests in fast mode",
  "47598ca": "MVStore: add feature to set the cache concurrency (benchmark)",
  "9a66385": "MVStore: add feature to set the cache concurrency",
  "3f0c90c": "MVStore: disabled the file system cache by default (test case)",
  "2b4af91": "LIRS cache: improved hit rate",
  "134a436": "MVStore: disabled the file system cache by default, because it limits concurrency",
  "3ddeeb3": "Improved performance of getting timezone offset",
  "ef9f929": "Improved performance of getting timezone offset",
  "b0264ee": "Garbage collection of unused chunks should be faster still",
  "0e9a785": "Garbage collection of unused chunks should now be faster.",
  "b99c92d": "Added missing test resource optimizations.sql",
  "ddd4d28": "Improve performance of cleaning up temp tables - patch from Eric Faulhaber.",
  "0e4cbb3": "improve performance of queries that use LIKE 'foo%' - 10x in the case of one of my queries",
  "c1c475e": "Archive tool: support for slow disks",
  "895b9da": "Sub-query or view cost could be wrong for cached ViewIndex",
  "ba7ba11": "Sub-query cache is getting dropped in finally block.",
  "0d91aa3": "Sub-query cache is getting dropped in Session.prepareLocal now + more tests.",
  "cbc072f": "Better cleanup of view index caches.",
  "bbea3c3": "Session local view index cache.",
  "1c75fd7": "LIRS cache: keep more non-resident entries",
  "89f239b": "LIRS cache: make the non-resident queue size configurable",
  "a73ec08": "Pull request #163: improved performance when not using the default timezone.",
  "9abb674": "In DateTimeUtils.getTimeTry(), Calendar instances used to evaluate Timestamps were only being cached if no timezone was specified. I've added code to reuse Calendar instances if the timezone specified matches the previous use.",
  "b821d2a": "Use array.clone(), which should be faster than System.arraycopy",
  "2eeab7e": "Use array.clone(), which should be faster than System.arraycopy",
  "ab1c98a": "Option to run only fast tests",
  "6404085": "on ConcurrentHashMap, containsKey is faster than contains, since contains() is a synonym for containsValue, and will iterate over the whole map",
  "585a36e": "When using MV_STORE=TRUE and the SET CACHE_SIZE setting, the cache size was incorrectly set, so that it was effectly 1024 times smaller than it should be.",
  "369bc80": "MVStore: updates that affected many rows were were slow in some cases if there was a secondary index.",
  "d06ff11": "The LIRS cache could grow larger than the allocated memory.",
  "d87244f": "The LIRS cache could grow larger than the allocated memory.",
  "404d245": "MVStore: old chunks no longer removed in append-only mode. MVStore: the cache for page references could grow far too big, resulting in out of memory in some cases.",
  "f9baefb": "Measure cache size in bytes, not blocks",
  "e13d98a": "MVStore: the maximum cache size was artificially limited to 2 GB (due to an integer overflow).",
  "8021286": "StringUtils.toUpperEnglish now has a small cache. This should speed up reading from a ResultSet when using the column name.",
  "1a3c5bc": "The LIRS cache now resizes the table automatically in all cases and no longer needs the averageMemory configuration.",
  "13d7033": "Fix bug in PageStore#commit method - when the ignoreBigLog flag was set, the logic that cleared the flag could never be reached, resulting in performance degradation. Reported by Alexander Nesterov.",
  "7bbfcf0": "MVStore: recovery for a database with many CLOB or BLOB entries is now much faster.",
  "670bf2b": "Improved performance for some date / time / timestamp conversion operations.",
  "e2e0397": "Server mode: the transfer buffer size has been changed from 16 KB to 64 KB, after it was found that this improves performance on Linux quite a lot.",
  "bc763c8": "Archive tool: faster compression, add documentation",
  "8f694f3": "Better (non-universal) fast hash function",
  "c9f55a5": "Updating a MVMap got slower due to synchronization",
  "15eef24": "Writing to the trace file is now faster, specially with the debug level.",
  "1bf1dde": "The LIRS cache now re-sizes the internal hash map if needed.",
  "ae0e5a9": "reduce synchronization bottleneck in processing date/time values by using a ThreadLocal for the cached Calendar object",
  "fb28c02": "getTimeTry() was never being passed a null timezone, so don't check for that. Rather check if the timezone is still the default, so we can use the local cached Calendar.",
  "4230ebb": "Revert previous change 'Bump up the sequence cache size from 64 to 1024. Prevents sequence writing from becoming a bottleneck when doing bulk load.'",
  "f5bdb35": "Bump up the sequence cache size from 64 to 1024. Prevents sequence writing from becoming a bottleneck when doing bulk load.",
  "4ab7caf": "Documentation / update performance results.",
  "cf5f531": "Support fast distinct operations",
  "5832f04": "An archive tool that uses compression and de-duplication (is faster and compresses better than 7zip / pkzip for large directories if there are many duplicates)",
  "9565bef": "MVStore mode: creating indexes is now much faster.",
  "7648963": "MVStore mode: the CLOB and BLOB storage was re-implemented and is now much faster than with the PageStore (which is still the default storage).",
  "3c5b459": "Store CLOBs and BLOBs in maps (StreamStore) to improve performance and avoid using a second connection. (WIP)",
  "96aa705": "Bugfix (fix performance degradation)",
  "570437e": "Improved performance for read operations.",
  "04feaa2": "Improved performance, bugfix",
  "e67b675": "Improved update performance, reduced memory and disk footprint",
  "f8c487d": "Slightly reduce the memory cost of View metadata, helps with people who have lots and lots of views, and there is no real performance gain in caching the plan SQL string",
  "68f814b": "Undo cache the last user defined function return value",
  "cbb01f6": "Add a single-value cache for DETERMINISTIC ALIAS method calls, reduces unnecessary calls",
  "260eb4f": "Fix performance regression for: Fix bug with ALLOW_LITERALS=NONE, where the periodic analyze table on insert would throw an exception.",
  "4941407": "LIRS cache: bugfix for caches that only contain non-resident entries.",
  "ef776d0": "LIRS cache: bugfix for very large cache sizes.",
  "4aee4f6": "LIRS cache: bugfix for very large cache sizes.",
  "f88e3f5": "Fix test (sometimes, HashMap is slower then the MVStore)",
  "51f65d8": "add a linefeed to more clearly separate performance testing-results from other results",
  "c5e867d": "Query Statistics: new feature which stores the newest 100 SQL queries executed and their performance data. Useful for tracking down badly performing queries.",
  "bda43db": "In version 1.3.172, a performance regression was introduced... (test case)",
  "f65cac4": "In version 1.3.172, a performance regression was introduced...",
  "b868c33": "In version 1.3.172, a performance regression was introduced when fixing the issue 389 (when there is a multi-column primary key, H2 does not seem to always pick the right index). This was related to boosting an index that matches the 'order by' column list (the wrong index was used in some cases).",
  "929b833": "In version 1.3.172, a performance regression was introduced when fixing the issue 389 (when there is a multi-column primary key, H2 does not seem to always pick the right index). This was related to boosting an index that matches the 'order by' column list (the wrong index was used in some cases).",
  "85e74dd": "Bug: Changes to the database structure did not result in the Session query cache being invalidated.",
  "c3e7abc": "new test case to verify query cache being dropped when table structure changes",
  "16f2bc3": "improve testFileLockSerialized - fails on slow machines. Replace Thread#sleep() with CountDownLatch Original patch by Davide Cavestro, with some modifications by myself",
  "d28ab9a": "MVStore table engine (improved performance)",
  "e3695af": "MVStore table engine (reduced memory usage and improved performance)",
  "674328a": "The optimization for IN(...) queries combined with OR could result in a strange exception of the type 'column x must be included in the group by list'.",
  "53d868b": "The optimization for IN(...) queries combined with OR could result in a strange exception of the type 'column x must be included in the group by list'.",
  "237b1a5": "MVStore table engine - now almost as fast as the page store (WIP)",
  "f4d43c7": "MVStore: statement processing (currently relatively slow)",
  "09769f1": "MVStore: larger stores (multiple GB) are now much faster.",
  "e36c870": "There was a possibility that the .lock.db file was not deleted when the database was closed, which could slow down opening the database.",
  "b12bb79": "MVStore: simplify the cache API a bit",
  "1e391a6": "MVStore: simplify the cache API a bit",
  "e15005f": "A persistent multi-version map: small performance optimization (for write-heavy operations)",
  "37f5de8": "A persistent multi-version map: small performance optimization (for write-heavy operations)",
  "2895f2b": "LIRS cache: use a better secondary hash function.",
  "749d082": "LIRS cache: concurrent and concurrent with long key",
  "38e8ce1": "LIRS cache: concurrent and concurrent with long key",
  "9199e12": "LIRS cache: concurrent and concurrent with long key",
  "c3170f7": "LIRS cache: concurrent and concurrent with long key",
  "f4e7837": "LIRS cache: concurrent",
  "66b7ede": "LIRS cache: guard against bad hash functions.",
  "3570ae0": "add performance test for dropping of table",
  "20eeda8": "Use HMAC for authenticating remote LOB id's, removing the need for maintaining a cache, and removing the limit on the number of LOBs per result set.",
  "99fe80e": "Use HMAC for authenticating remote LOB id's, removing the need for maintaining a cache, and removing the limit on the number of LOBs per result set.",
  "038e36e": "Server mode: the number of CLOB / BLOB values that were cached on the server is now the maximum of: 5 times the SERVER_RESULT_SET_FETCH_SIZE (which is 100 by default), and SysProperties.SERVER_CACHED_OBJECTS.",
  "c89ab9e": "Server mode: the number of CLOB / BLOB values that were cached on the server is now 5 times the SERVER_RESULT_SET_FETCH_SIZE (which is 100 by default).",
  "eafec1c": "MathUtils.getSecureRandom could log a warning to System.err in case the /dev/random is very slow, and the System.getProperties().toString() returned a string larger than 64 KB.",
  "3c5a9b6": "Lucene fulltext search: creating an index is now faster if the table already contains data. Thanks a lot to Angel Leon from the FrostWire Team for the patch!",
  "4bef1ee": "The optimization for 'group by' was not working correctly if the group by column was aliased in the select list.",
  "de81a80": "Sequences with cache size smaller than 0 did not work correctly.",
  "83ffe3f": "Conditions of the form IN(SELECT ...) where slow and increased the database size if the subquery result size was larger then the configured MAX_MEMORY_ROWS.",
  "3b06081": "Improved performance for large databases (many GB), and databases with a small page size.",
  "8dfa08e": "Adding data to databases with a small page size is now faster.",
  "ff1a2ce": "Possible slight optimization",
  "5054bfd": "Converting a hex string to a byte array is now faster.",
  "980d447": "The optimization for COUNT(..) on columns that are not nullable was also used for COUNT(DISTINCT ..), which is incorrect.",
  "fc19e64": "Improved performance for reading and writing date and time values.",
  "33633d3": "The built-in connection pool is now a bit faster.",
  "27d7caa": "The built-in connection pool is a bit faster.",
  "205a390": "The following prepared statements are now cached as well: insert, update, delete, merge, and transactional commands.",
  "fb9f497": "The built-in connection pool is now a bit faster, specially if the system property 'h2.runFinalize' is set to 'false'.",
  "f45d185": "Improved performance.",
  "014c8a1": "If the database contained many CLOB or BLOB values, then closing a connection was very slow.",
  "fbe949a": "Improved performance.",
  "46c1e5e": "Simplify synchronization (should also be a bit faster).",
  "d982a97": "Slightly faster Unicode processing",
  "58468ab": "Issue 290: Conditions using subqueries were sometimes evaluated before much simpler conditions, which was very bad for performance. This includes subqueries returning a value, EXISTS subqueries, and IN(SELECT ..) subqueries.",
  "8779152": "Issue 290: Conditions using subqueries were sometimes evaluated before much simpler conditions, which was very bad for performance. This includes subqueries returning a value, EXISTS subqueries, and IN(SELECT ..) subqueries.",
  "9384550": "Build: jar files are now downloaded using Maven if possible (and cached in the local Maven repository).",
  "83579e6": "H2 Console: opening a MS SQL Server database is now faster. Also, listing the database meta data sometimes resulted in an exception.",
  "341be22": "Clob.getSubString and Blob.getBytes are now up to 3 times faster.",
  "65f044a": "Issue 284: If the query cache was used (enabled by default in version 1.3.x), and multiple threads used the same connection, and the same query but different prepared statements, parameters of one prepared statement could be overwritten by another.",
  "ac16dad": "New database setting OPTIMIZE_IN_SELECT (enabled by default for version 1.3.x). If enabled, IN(SELECT...) conditions are faster if there are many rows in the table or subquery.",
  "d8ea7a9": "New database setting OPTIMIZE_IN_SELECT (enabled by default for version 1.3.x). If enabled, IN(SELECT...) conditions are faster if there are many rows in the table or subquery.",
  "df440fa": "New database setting OPTIMIZE_IN_SELECT (enabled by default for version 1.3.x). If enabled, IN(SELECT...) conditions are faster if there are many rows in the table or subquery.",
  "84fc48c": "The scan-resistant cache type 'TQ' (two queue) is again available. To use it, append ;CACHE_TYPE=TQ to the database URL.",
  "382e2b7": "The scan-resistant cache type 'TQ' (two queue) is again available. To use it, append ;CACHE_TYPE=TQ to the database URL.",
  "9616af4": "When the system property h2.lobInDatabase is set, reading a BLOB is a bit faster because the length is not read.",
  "f7deacd": "The INSERT optimizations (INSERT ... DIRECT SORTED SELECT) were not parsed correctly when using a column list.",
  "ba5baa9": "The INSERT optimizations (INSERT ... DIRECT SORTED SELECT) were not parsed correctly when using a column list.",
  "96d51cc": "Trace: slight performance improvement.",
  "1a31334": "A new String cache is now created at most once every 5 second, so that out of memory exceptions are not artifically delayed.",
  "f85e917": "A new String cache is now created at most once every 5 second, so that out of memory exceptions are not artifically delayed.",
  "bbebd0d": "Opening and closing encrypted databases is now much faster.",
  "2eebcdd": "Re-added the internal utility class BitField which improves performance of opening and closing a database (because it supports setByte / getByte, unlike java.util.BitSet).",
  "d764504": "Cluster: auto-commit was disabled after opening a connection. Connection.getAutoCommit() is now much faster, specially when using the server mode.",
  "02abb81": "Cluster: auto-commit was disabled after opening a connection. Connection.getAutoCommit() is now much faster, specially when using the server mode.",
  "abc39a1": "Cluster: auto-commit was disabled after opening a connection. Connection.getAutoCommit() is now much faster, specially when using the server mode.",
  "c9eb169": "Cluster: auto-commit was disabled after opening a connection. Connection.getAutoCommit() is now much faster, specially when using the server mode.",
  "1c46c37": "Opening an closing a database is now faster.",
  "c3a8b48": "In some cases (specially when using a small cache size or a large database over 1 GB) for some operations like ALTER TABLE the data was written before the transaction log entries, which could cause a corrupt database if the process was killed during the ALTER TABLE operation.",
  "851e0b8": "New experimental feature 'SHUTDOWN DEFRAG'. This option optimizes the page layout so that a full table scan is faster.",
  "4f3a642": "New experimental feature 'SHUTDOWN DEFRAG'. This option optimizes the page layout so that a full table scan is faster.",
  "7482769": "New experimental feature 'SHUTDOWN DEFRAG'. This option optimizes the page layout so that a full table scan is faster.",
  "d6c65c1": "Locking disabled, see http://h2database.com/html/performance.html#fast_import",
  "67bed1a": "Opening an closing a database is now faster.",
  "eab1130": "Data modifications (inserts, updates, and deletes) are now up to 5 times faster in some cases.",
  "a1622ab": "Data modifications (inserts, updates, and deletes) are now faster for existing tables because converting objects to byte arrays is avoided if possible.",
  "e8b8498": "LOG=0 is now a bit faster (previously undo log entries were still written).",
  "202e687": "More accurate cache size calculation.",
  "c3bf3a2": "The default MAX_LOG_SIZE is now 16 MB instead of 2 MB. Some uses cases are 3 times faster now.",
  "3405c36": "The cache was not used efficiently when reading (behaving like a FIFO cache instead of an LRU cache).",
  "0cc31f5": "SHUTDOWN COMPACT is now faster.",
  "7f09403": "SHUTDOWN COMPACT is now faster.",
  "29e2a7e": "Storing lobs in the database has been changed. It is now faster.",
  "22e6097": "Storing lobs in the database has been changed. It is now faster.",
  "9150f83": "SHUTDOWN COMPACT and compacting in general is faster.",
  "f5c6cbe": "SHUTDOWN COMPACT and compacting in general is faster.",
  "b9cafa0": "Storing lobs in the database has been changed. It is now faster.",
  "5dd78b0": "After deleting a lot of data (for example by dropping or altering tables, or indexes, or after a large transaction), opening a large database was very slow. Fixed. When killing the process after creating and dropping many tables (specially temporary tables), the database could not be opened sometimes.",
  "8473a1f": "New experimental query cache.",
  "7dff79a": "New experimental query cache.",
  "b9dab1d": "Automatic upgrade: Fix 'split:', rename old lobs dir, faster import via UNDO_LOG=0, 'analyze', 'shutdown compact' after import",
  "a0b1180": "When opening an existing database, the cache size is set to at most half the amount of memory available for the virtual machine.",
  "13317fa": "Creating a cached temporary non persistent table with a primary key threw a NullPointerException.",
  "fb538d4": "DECIMAL: faster precision and memory usage calculations.",
  "6f60022": "Temporary tables can now be 'cached'.",
  "e831430": "Operations that don't fit in memory are now faster. Temporary file handling was changed.",
  "ee98e77": "The MERGE statement is now about 30% faster when using a PreparedStatement.",
  "3b349bd": "When using large transactions or a small log size, the database could get very slow.",
  "6f59d42": "When using large transactions or a small log size, the database could get very slow.",
  "dadfe1d": "Small performance improvement.",
  "c30a3fb": "Improve performance a bit.",
  "798a504": "The cache types WEAK_* and TQ are no longer supported.",
  "255c2d6": "Slightly improved performance.",
  "aa840b1": "Slightly improved performance if the table is already locked.",
  "bcd904f": "CompressLZF: faster decompression.",
  "b3bd3a5": "Page store: adding data to new database is now faster.",
  "481585b": "File system: getting the file name from a path is now faster.",
  "bd74ac9": "Profiler: list open and close separately; only if slow.",
  "6857dfd": "The compression algorithm 'LZF' is now about 33% faster.",
  "8376df8": "Inserting LOBs got slower each time the process was restarted.",
  "dfaf34f": "Inserting LOBs got slower each time the process was restarted.",
  "f866464": "Sorted insert optimization",
  "ff4d721": "Page store: opening a large database was slow if it was not closed before.",
  "a847d39": "More bugs in the server-less multi-connection mode have been fixed: 90097 The database is read only, caches must be cleared on reconnect, etc. .",
  "05e6303": "The cache algorithm TQ is disabled",
  "f756c00": "The cache algorithm TQ is disabled",
  "76011ce": "Page store: make caches re-entrant",
  "f9c4131": "Small performance improvements.",
  "46943a3": "Page store: avoid writing empty pages more than once; better cache free list.",
  "2bd3384": "Page store: respect cache size at startup",
  "788bc07": "Page store: compact the database file when closing (currently always completely, which may be slow).",
  "ded7361": "Page store: compact the database file when closing (currently always completely, which may be slow).",
  "f68db85": "Page store: use 2 KB pages (faster)",
  "7ad501b": "A bit faster.",
  "adcec35": "An optimization for IN(..) and IN(SELECT...) using the system property h2.optimizeInList",
  "062151c": "An optimization for IN(..) and IN(SELECT...) using the system property h2.optimizeInList",
  "6cf69f5": "An optimization for IN(..) and IN(SELECT...) using the system property h2.optimizeInList",
  "a4774af": "An optimization for IN(..) and IN(SELECT...) using the system property h2.optimizeInList",
  "18a3b3c": "An optimization for IN(..) and IN(SELECT...) using the system property h2.optimizeInList",
  "284e2b7": "Small performance optimization",
  "b731e1e": "Small performance optimization",
  "d4f2298": "Minor DiskFile summary optimization BitField.setRange optimization BitField methods made static for performance -- getAddress / getBitMask methods.",
  "79268cf": "Issue 102: Page store: performance bugs",
  "6b70f47": "Parsing SQL script files is now faster.",
  "eff9d79": "CSV reading is now faster.",
  "2785e9a": "Creating indexes is now a bit faster.",
  "047ecea": "H2 Console: Oracle system tables are no longer listed, improving performance.",
  "2229acf": "The soft-references cache (CACHE_TYPE=SOFT_LRU) could throw a NullPointerException.",
  "d00707a": "Cache: support for a second level soft-references cache.",
  "46464f4": "Improved performance on some platforms",
  "35fb066": "Improved performance",
  "5a7685a": "After truncating tables, opening large databases could become slow.",
  "1387bf9": "After truncating tables, opening large databases could become slow.",
  "cfc9bc7": "After truncating tables, opening large databases could become slow.",
  "1f5b62d": "Some internal caches did not use the LRU mechanism.",
  "04e8cba": "The optimization for IN(...) is now only used if comparing a column with an index.",
  "c142344": "slightly improved performance when comparing values",
  "ac5a6c0": "Connection.isValid is a bit faster.",
  "d6e381f": "Testing for local connections was very slow on some systems.",
  "4b0e8bc": "The cache memory usage calculation is more conservative.",
  "2159480": "Allocating space got slower and slower the larger the database.",
  "b5faeeb": "Queries with more than 10 joins are now faster.",
  "7345f4f": "Opening a connection with AUTO_SERVER=TRUE is now fast.",
  "5546209": "Opening large database is now faster.",
  "5b5a787": "The optimization to group using an index didn't work.",
  "d8f7209": "The optimization for IN(...) is now enabled by default. Use -Dh2.optimizeInJoin=false to disable it.",
  "b840143": "Conditions such as ID=? AND ID>? were slow.",
  "e4877c9": "Opening a large database was slow if there was a problem opening the previous time.",
  "29aba6e": "Make sure the object cache size is a power of two.",
  "c1d91a7": "improved referential constraint performance"
}, "hackpad": {
  "": ""
}, "hadoop": {
  "422bf3b24": "HDFS-16973. RBF: MountTableResolver cache size lookup should take read lock (#5533)",
  "b4bcbb951": "HDFS-16959. RBF: State store cache loading metrics (#5497)",
  "f8d0949f7": "HDFS-16953. RBF: Mount table store APIs should update cache only if state store record is successfully updated (#5482)",
  "f3c427757": "HDFS-16882. RBF: Add cache hit rate metric in MountTableResolver#getDestinationForPath (#5276)",
  "d5c046518": "HDFS-16910. Fix incorrectly initializing RandomAccessFile caused flush performance decreased for JN (#5359)",
  "0ae075a2a": "HDFS-16848. RBF: Improve StateStoreZooKeeperImpl performance (#5147)",
  "2fa540dca": "HDFS-16858. Dynamically adjust max slow disks to exclude. (#5180)",
  "2067fcb64": "HDFS-16550. Allow JN edit cache size to be set as a fraction of heap memory (#4209)",
  "a48e8c9be": "MAPREDUCE-5608. Replace and deprecate mapred.tasktracker.indexcache.mb (#5014)",
  "d3c1c453f": "HDFS-16785. Avoid to hold write lock to improve performance when add volume. (#4945). Contributed by ZanderXu.",
  "21bae31d5": "YARN-11265. Upgrade JUnit from 4 to 5 in hadoop-yarn-server-sharedcachemanager (#4772)",
  "0075ef15c": "YARN-8482. [Router] Add cache for fast answers to getApps. (#4769)",
  "682931a6a": "HADOOP-18028. High performance S3A input stream (#4752)",
  "e1842b2a7": "HADOOP-18103. Add a high-performance vectored read API. (#4476)",
  "2daf0a814": "HADOOP-11867. Add a high-performance vectored read API. (#3904)",
  "cb0421095": "HDFS-16634. Dynamically adjust slow peer report size on JMX metrics (#4448)",
  "e199da3fa": "HADOOP-17833. Improve Magic Committer performance (#3289)",
  "9e3fc40ec": "HDFS-16613. EC: Improve performance of decommissioning dn with many ec blocks (#4398)",
  "93a13202d": "HDFS-16582. Expose aggregate latency of slow node as perceived by the reporting node (#4323)",
  "2dfa928a2": "HDFS-16521. DFS API to retrieve slow datanodes (#4107)",
  "b9ade7a4c": "HDFS-16528. Reconfigure slow peer enable for Namenode (#4186)",
  "4ff8a5dc7": "HDFS-16526. Addendum Add metrics for slow DataNode (#4191)",
  "f14f30505": "HDFS-16526. Add metrics for slow DataNode (#4162)",
  "a9b43966c": "HDFS-16518: Add shutdownhook to invalidate the KeyProviders in the cache",
  "6b07c851f": "HDFS-16397. Reconfig slow disk parameters for datanode (#3828)",
  "0c194f215": "HDFS-16396. Reconfig slow peer parameters for datanode (#3827)",
  "94b884ae5": "HDFS-16262. Async refresh of cached locations in DFSInputStream (#3527)",
  "d69938994": "HDFS-16403. Improve FUSE IO performance by supporting FUSE parameter max_background (#3842)",
  "e35564633": "HDFS-16399. Reconfig cache report parameters for datanode (#3841)",
  "46b02788b": "HDFS-16371. Exclude slow disks when choosing volume (#3753)",
  "b22528791": "HDFS-16348. Mark slownode as badnode to recover pipeline (#3704)",
  "00e2405fb": "YARN-8234. Improve RM system metrics publisher's performance by pushing events to timeline server in batch (#3793)",
  "9420cb6f8": "HDFS-16385. Fix Datanode retrieve slownode information bug. (#3803)",
  "1364847fd": "HDFS-15788. Correct the statement for pmem cache to reflect cache persistence support (#3761)",
  "53edd0de5": "HADOOP-18033. Upgrade fasterxml Jackson to 2.13.0 (#3749)",
  "c0f405a46": "HDFS-16314. Support to make dfs.namenode.block-placement-policy.exclude-slow-nodes.enabled reconfigurable (#3664)",
  "c88640c4a": "HDFS-16320. Datanode retrieve slownode information from NameNode (#3654)",
  "db89a9411": "HDFS-16287. Support to make dfs.namenode.avoid.read.slow.datanode reconfigurable (#3596)",
  "a73ff6915": "HDFS-7612: Fix default cache directory in TestOfflineEditsViewer.testStored. Contributed by Michael Kuchenbecker (#3571)",
  "17c58ac95": "HDFS-16223. AvailableSpaceRackFaultTolerantBlockPlacementPolicy should use chooseRandomWithStorageTypeTwoTrial() for better performance. (#3424). Contributed by Ayush Saxena.",
  "1d808f59d": "HADOOP-15129. Datanode caches namenode DNS lookup failure and cannot startup (#3348) Co-authored-by: Karthik Palaniappan",
  "ee466d4b4": "HADOOP-17628. Distcp contract test is really slow with ABFS and S3A; timing out. (#3240)",
  "fdef2b4cc": "HDFS-16076. Avoid using slow DataNodes for reading by sorting locations (#3117)",
  "56d249759": "HDFS-13671. Namenode deletes large dir slowly caused by FoldedTreeSet#removeAndGet (#3065)",
  "72037a63b": "HDFS-15879. Exclude slow nodes when choose targets for blocks (#2748)",
  "5f34271bb": "HADOOP-17475. ABFS : add high performance listStatusIterator (#2548)",
  "1448add08": "HADOOP-17347. ABFS: Read optimizations",
  "fa4cf91b5": "YARN-10541. capture the performance metrics of ZKRMStateStore (#2568)",
  "ac7045b75": "HADOOP-17313. FileSystem.get to support slow-to-instantiate FS clients. (#2396)",
  "f813f14b5": "MAPREDUCE-7309. Improve performance of reading resource request for mapper/reducers from config. Contributed by Peter Bacsko & Wangda Tan",
  "173310e2f": "HDFS-15629. Add seqno when warning slow mirror/disk in BlockReceiver. Contributed by Haibin Huang.",
  "c78d18023": "HDFS-15555. RBF: Refresh cacheNS when SocketException occurs. (#2267)",
  "9afec2ed1": "YARN-10390: LeafQueue: retain user limits cache across assignContainers() calls. Contributed by Samir Khan (samkhan).",
  "56ebabd42": "HADOOP-17222. Create socket address leveraging URI cache (#2241)",
  "10716040a": "HDFS-15493. Update block map and name cache in parallel while loading fsimage. Contributed by Chengwei Wang",
  "e820baa6e": "HDFS-15417. RBF: Get the datanode report from cache for federation WebHDFS operations (#2080)",
  "fbb877543": "Revert 'MAPREDUCE-7277. IndexCache totalMemoryUsed differs from cache contents. Contributed by Jon Eagles (jeagles).'",
  "be374faf4": "HDFS-13639. SlotReleaser is not fast enough (#1885)",
  "2abcf7762": "HDFS-15202 Boost short circuit cache (rebase PR-1884) (#2016)",
  "4525292d4": "Revert 'HDFS-15202 Boost short circuit cache (rebase PR-1884) (#2016)'",
  "86e6aa8ee": "HDFS-15202 Boost short circuit cache (rebase PR-1884) (#2016)",
  "7fddf4855": "HDFS-14283. DFSInputStream to prefer cached replica. Contributed by Lisheng Sun.",
  "e2322e111": "MAPREDUCE-7277. IndexCache totalMemoryUsed differs from cache contents. Contributed by Jon Eagles (jeagles).",
  "453771f17": "HDFS-15295. AvailableSpaceBlockPlacementPolicy should use chooseRandomWithStorageTypeTwoTrial() for better performance. Contributed by Jinglun.",
  "ea688631b": "MAPREDUCE-7237. Supports config the shuffle's path cache related parameters (#1397)",
  "1a636da04": "HDFS-15033. Support to save replica cached files to other place and make expired time configurable. Contributed by Yang Yun.",
  "954930e9d": "HADOOP-16850. Support getting thread info from thread group for JvmMetrics to improve the performance. Contributed by Tao Yang.",
  "d10f77e3c": "HDFS-15119. Allow expiration of cached locations in DFSInputStream. Contributed by Ahmed Hussein.",
  "7b62409ac": "HDFS-15108. RBF: MembershipNamenodeResolver should invalidate cache incase of active namenode update. Contributed by Ayush Saxena.",
  "7030722e5": "HDFS-15080. Fix the issue in reading persistent memory cached data with an offset. Contributed by Feilong He.",
  "d79cce20a": "HDFS-14740. Recover data blocks from persistent memory read cache during datanode restarts. Contributed by Feilong He.",
  "f3eaa84f9": "HDDS-2164 : om.db.checkpoints is getting filling up fast. (#1536)",
  "53ed78bcd": "HDDS-2224. Fix loadup cache for cache cleanup policy NEVER. (#1567)",
  "9221704f8": "HADOOP-16490. Avoid/handle cached 404s during S3A file creation.",
  "a23417533": "HADOOP-16531. Log more timing information for slow RPCs. Contributed by Chen Zhang.",
  "c92a3e94d": "HADOOP-15565. Add an inner FS cache to ViewFileSystem, separate from the global cache, to avoid file system leaks. Contributed by Jinglun.",
  "2f70b52a5": "HDFS-14812. RBF: MountTableRefresherService should load cache when refresh. Contributed by xuzq.",
  "48cb58390": "HDFS-14710. RBF: Improve some RPC performance by using previous block. Contributed by xuzq.",
  "894e2300d": "HDFS-14761. RBF: MountTableResolver cannot invalidate cache correctly (#1334)",
  "f6fa865d6": "HDFS-14700. Clean up pmem cache before setting pmem cache capacity. Contributed by Feilong He.",
  "aebac6d2d": "HADOOP-16461. Regression: FileSystem cache lock parses XML within the lock.",
  "73e6ffce6": "HDDS-1802. Add Eviction policy for table cache. (#1100)",
  "b4466a3b0": "HADOOP-16341. ShutDownHookManager: Regressed performance on Hook removals after HADOOP-15679",
  "30a8f840f": "HDFS-14357. Update documentation for HDFS cache on SCM support. Contributed by Feilong He.",
  "8f6f9d9c8": "HDFS-13443. RBF: Update mount table cache immediately after changing (add/update/remove) mount table entries. Contributed by Mohammad Arshad.",
  "e3172221e": "HDFS-12770. Add doc about how to disable client socket cache. Contributed by Weiwei Yang.",
  "d1aad4449": "HDFS-14356. Implement HDFS cache on SCM with native PMDK libs. Contributed by Feilong He.",
  "18c1eebc0": "HDDS-1502. Add metrics for Ozone Ratis performance.Contributed by Shashikant Banerjee(#833).",
  "37900c563": "HDFS-14402. Use FileChannel.transferTo() method for transferring block to SCM cache. Contributed by Feilong He.",
  "9b0aace1e": "HDFS-14401. Refine the implementation for HDFS cache on SCM. Contributed by Feilong He.",
  "7a3188d05": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.",
  "f1673b0db": "HDDS-1478. Provide k8s resources files for prometheus and performance tests",
  "945e8c606": "YARN-9394. Use new API of RackResolver to get better performance. Contributed by Lantao Jin.",
  "e62cbcbc8": "HADOOP-16011. OsSecureRandom very slow compared to other SecureRandom implementations. Contributed by Siyao Meng.",
  "35ff31dd9": "HDFS-14355 : Implement HDFS cache on SCM by using pure java mapped byte buffer. Contributed by Feilong He.",
  "f3f51284d": "HDFS-14393. Refactor FsDatasetCache for SCM cache implementation. Contributed by Rakesh R",
  "ff06ef063": "HDFS-14366. Improve HDFS append performance. Contributed by Chao Sun.",
  "ba50a36a3": "HDFS-14354: Refactor MappableBlock to align with the implementation of SCM cache. Contributed by Feilong He.",
  "41e18feda": "HDFS-14235. Handle ArrayIndexOutOfBoundsException in DataNodeDiskMetrics#slowDiskDetectionDaemon. Contributed by Ranith Sardar.",
  "e7d1ae52d": "HDDS-1017. Use distributed tracing to indentify performance problems in Ozone. Contributed by Elek, Marton.",
  "040a202b2": "HADOOP-15323. AliyunOSS: Improve copy file performance for AliyunOSSFileSystemStore. Contributed wujinhu.",
  "d8f670ff2": "HADOOP-15819. FileSystem cache misused in S3A integration tests. Contributed by Adam Antal.",
  "c81ac2ff0": "HDFS-13607. [SBN read] Edit Tail Fast Path Part 1: Enhance JournalNode with an in-memory cache of recent edit transactions. Contributed by Erik Krogen.",
  "784ea3aff": "HADOOP-15965. Upgrade to ADLS SDK which has major performance improvement for ingress/egress.",
  "396169003": "HADOOP-15973. Configuration: Included properties are not cached if resource is a stream. Contributed by Eric Payne",
  "703b2860a": "HADOOP-15923. create-release script should set max-cache-ttl as well as default-cache-ttl for gpg-agent.",
  "568935578": "HDFS-13768. Adding replicas to volume map makes DataNode start slowly. Contributed by Surendra Singh Lilhore.",
  "6b5838ed3": "YARN-8784. DockerLinuxContainerRuntime prevents access to distributed cache entries on a full disk. Contributed by Eric Badger",
  "df2166a64": "HADOOP-15719. Fail-fast when using OAuth over http. Contributed by Da Zhou.",
  "0c8a43b9e": "HDDS-429. StorageContainerManager lock optimization. Contributed by Nanda Kumar.",
  "6e2129cf4": "HDDS-428. OzoneManager lock optimization. Contributed by Nanda Kumar.",
  "47b72c87e": "HADOOP-15635. s3guard set-capacity command to fail fast if bucket is unguarded. Contributed by Gabor Bota.",
  "be1ec005f": "HDDS-408. Read (getKey) operation is very slow. Contributed by Nandakumar.",
  "e780556ae": "HADOOP-15696. KMS performance regression due to too many open file descriptors after Jetty migration. Contributed by Wei-Chiu Chuang.",
  "81847392b": "HDFS-13821. RBF: Add dfs.federation.router.mount-table.cache.enable so that users can disable cache. Contributed by Fei Hui.",
  "40f9b0c5c": "HDFS-13322 fuse dfs - uid persists when switching between ticket caches. Contributed by Istvan Fajth.",
  "b3b4d4ccb": "MAPREDUCE-7118. Distributed cache conflicts breaks backwards compatability. (Jason Lowe via wangda)",
  "45d9568aa": "HADOOP-15547/ WASB: improve listStatus performance. Contributed by Thomas Marquardt.",
  "d9ba6f365": "yarn.resourcemanager.fail-fast is used inconsistently. Contributed by Yuanbo Liu.",
  "f51da9c4d": "HADOOP-15554. Improve JIT performance for Configuration parsing. Contributed by Todd Lipcon.",
  "100470140": "YARN-8451. Multiple NM heartbeat thread created when a slow NM resync with RM. Contributed by Botong Huang",
  "c687a6617": "HADOOP-15423. Merge fileCache and dirCache into ine single cache in LocalMetadataStore. Contributed by Gabor Bota.",
  "34710c66d": "HDDS-143. Provide docker compose files to measure performance in a pseudo cluster. Contributed by Elek, Marton.",
  "f24c842d5": "YARN-8213. Add Capacity Scheduler performance metrics. (Weiwei Yang via wangda)",
  "ae2b77a0e": "HDFS-12546. Ozone: DB listing operation performance improvement. Contributed by Weiwei Yang.",
  "fd1564b87": "HDFS-12506. Ozone: ListBucket is too slow. Contributed by Weiwei Yang.",
  "a28557ac0": "HDFS-11712. Ozone: Reuse ObjectMapper instance to improve the performance. Contributed by Yiqun Lin.",
  "e9588c642": "HDFS-11627. Block Storage: Cblock cache should register with flusher to upload blocks to containers. Contributed by Mukul Kumar Singh.",
  "17a6e6262": "HDFS-11537. Block Storage : add cache layer. Contributed by Chen Liang.",
  "23044c1db": "HDFS-11361. Block Storage: add cache interface. Contributed by Chen Liang.",
  "d0422a74e": "HDFS-10932. Ozone: fix XceiverClient slow shutdown. Contributed by Chen Liang.",
  "09999d7e0": "YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).",
  "725b10e3a": "Revert 'YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).'",
  "2a2ef15ca": "YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).",
  "59a392694": "HDFS-11014: libhdfs++: Make connection to HA clusters faster. Contributed by James Clampffer.",
  "5dc2da1e6": "HDFS-9487. libhdfs++ Enable builds with no compiler optimizations. Contributed by Bob Hansen.",
  "a82be7754": "YARN-7999. Added file cache initializer for Linux container-executor. Contributed by Jason Lowe",
  "afe1a3ccd": "HDFS-13212. RBF: Fix router location cache issue. Contributed by Weiwei Wu.",
  "3bd6b1fd8": "HADOOP-15292. Distcp's use of pread is slowing it down. Contributed by Virajith Jalaparti.",
  "b27ab7dd8": "HADOOP-15076. Enhance S3A troubleshooting documents and add a performance document. Contributed by Steve Loughran.",
  "c7101fe21": "YARN-7879. NM user is unable to access the application filecache due to permissions. Contributed by Jason Lowe.",
  "6e42d0582": "MAPREDUCE-7029. FileOutputCommitter is slow on filesystems lacking recursive delete. Contributed by Karthik Palaniappan",
  "9195a6e30": "HADOOP-15027. AliyunOSS: Support multi-thread pre-read to improve sequential read from Hadoop to Aliyun OSS performance. (Contributed by Jinhu Wu)",
  "d9006d8a4": "HDFS-12802. RBF: Control MountTableResolver cache size. Contrubuted by Inigo Goiri.",
  "83b513ac6": "HDFS-12988. RBF: Mount table entries not properly updated in the local cache. Contributed by Inigo Goiri.",
  "b7b8cd532": "YARN-7538. Fix performance regression introduced by Capacity Scheduler absolute min/max resource refactoring. (Sunil G via wangda)",
  "53509f295": "HDFS-11754. Make FsServerDefaults cache configurable. Contributed by Mikhail Erofeev.",
  "462e25a3b": "HDFS-12814. Add blockId when warning slow mirror/disk in BlockReceiver. Contributed by Jiandan Yang.",
  "9711b7899": "YARN-7374. Improve performance of DRF comparisons for resource types in fair scheduler",
  "46eb1033a": "YARN-6546. SLS is slow while loading 10k queues. (Yufei Gu via Haibo Chen)",
  "7e76f85bc": "YARN-2960. Add documentation for the YARN shared cache.",
  "c114da5e6": "YARN-7250. Update Shared cache client api to use URLs.",
  "123342cd0": "HDFS-12412. Change ErasureCodingWorker.stripedReadPool to cached thread pool. (Lei (Eddy) Xu)",
  "2ffe93ab6": "HADOOP-14856. Fix AWS, Jetty, HBase, Ehcache entries for NOTICE.txt. (rchiang)",
  "a6989af1d": "YARN-7030. [YARN-3926] Performance optimizations in Resource and ResourceUtils class. Contributed by Wangda Tan.",
  "3aeaafecb": "YARN-6788. [YARN-3926] Improve performance of resource profile branch (Contributed by Sunil Govindan via Daniel Templeton)",
  "b3a4d7d2a": "HDFS-12400. Provide a way for NN to drain the local key cache before re-encryption.",
  "f29a0fc28": "HDFS-12303. Change default EC cell size to 1MB for better performance. Contributed by Wei Zhou.",
  "18f3603bc": "YARN-6996. Change javax.cache library implementation from JSR107 to Apache Geronimo. (Ray Chiang via Subru).",
  "b0fbf1796": "YARN-6957. Moving logging APIs over to slf4j in hadoop-yarn-server-sharedcachemanager. Contributed by Yeliang Cang.",
  "77791e4c3": "HDFS-12044. Mismatch between BlockManager.maxReplicationStreams and ErasureCodingWorker.stripedReconstructionPool pool size causes slow and bursty recovery. (Contributed by Lei (Eddy) Xu)",
  "1a79dcfc4": "HDFS-12143. Improve performance of getting and removing inode features. Contributed by Daryn Sharp.",
  "24853bf32": "YARN-6768. Improve performance of yarn api record toString and fromString. Contributed by Jonathan Eagles",
  "d670c3a4d": "HADOOP-14535 wasb: implement high-performance random access and seek of block blobs. Contributed by Thomas Marquardt",
  "75043d342": "HADOOP-14424. Add CRC32C performance test. Contributed by LiXin Ge.",
  "99634d10e": "YARN-6682. Improve performance of AssignmentInformation datastructures. Contributed by Daryn Sharp.",
  "06ffeb8d4": "HADOOP-14405. Fix performance regression due to incorrect use of DataChecksum. Contributed by LiXin Ge.",
  "8b5f2c372": "HADOOP-14351. Azure: RemoteWasbAuthorizerImpl and RemoteSASKeyGeneratorImpl should not use Kerberos interactive user cache. Contributed by Santhosh G Nayak",
  "0116c3c95": "YARN-5797. Add metrics to the node manager for cleaning the PUBLIC and PRIVATE caches. (Chris Trezzo via mingma)",
  "73835c73e": "HDFS-11560. Expose slow disks via NameNode JMX. Contributed by Hanisha Koneru.",
  "5485d93bd": "HDFS-11603. Improve slow mirror/disk warnings in BlockReceiver.",
  "6b0933643": "HDFS-11577. Combine the old and the new chooseRandom for better performance. Contributed by Chen Liang.",
  "64ea62c1c": "HDFS-11486. Client close() should not fail fast if the last block is being decommissioned. Contributed by Wei-Chiu Chuang and Yiqun Lin.",
  "cd014d57a": "YARN-6339. Improve performance for createAndGetApplicationReport. (Yunjiong Zhao via wangda)",
  "db2adf356": "Configuration#get return value optimization (jeagles)",
  "e7c8da614": "HDFS-11545. Propagate DataNode's slow disks info to the NameNode via Heartbeats. Contributed by Hanisha Koneru.",
  "ffa160ddb": "HDFS-11547. Add logs for slow BlockReceiver while writing data to disk. Contributed by Xiaobing Zhou.",
  "7f8e92840": "HDFS-11517. Expose slow disks via DataNode JMX. Contributed by Hanisha Koneru",
  "615ac0949": "HDFS-11419. DFSTopologyNodeImpl#chooseRandom optimizations. Contributed by Chen Liang.",
  "dcd03df9f": "HDFS-11432. Federation : Support fully qualified path for Quota/Snapshot/cacheadmin/cryptoadmin commands. Contributed by Brahma Reddy Battula.",
  "53d372a25": "YARN-6228: EntityGroupFSTimelineStore should allow configurable cache stores. Contributed by Li Lu",
  "02c549484": "HDFS-11410. Use the cached instance when edit logging SetAclOp, SetXAttrOp and RemoveXAttrOp.",
  "11e44bdda": "YARN-6131. FairScheduler: Lower update interval for faster tests. (kasha)",
  "b57368b6f": "HDFS-11194. Maintain aggregated peer performance metrics on NameNode.",
  "b1a9ec856": "HDFS-11290. TestFSNameSystemMBean should wait until JMX cache is cleared. Contributed by Erik Krogen.",
  "c3973e708": "YARN-5969. FairShareComparator: Cache value of getResourceUsage for better performance. (zhangshilong via kasha)",
  "4e9029653": "HDFS-10917. Collect peer performance statistics on DataNode. Contributed by Xiaobing Zhou.",
  "5daa8d863": "HDFS-10913. Introduce fault injectors to simulate slow mirrors. Contributed by Xiaobing Zhou.",
  "754f15bae": "HDFS-11226. cacheadmin, cryptoadmin and storagepolicyadmin should support generic options. Contributed by Brahma Reddy Battula",
  "c6a392324": "HADOOP-13871. ITestS3AInputStreamPerformance.testTimeToOpenAndReadWholeFileBlocks performance awful. Contributed by Steve Loughran",
  "96c574927": "HDFS-8674. Improve performance of postponed block scans. Contributed by Daryn Sharp.",
  "99c2bbd33": "MAPREDUCE-6797. Job history server scans can become blocked on a single, slow entry. Contributed by Prabhu Joseph",
  "1c8ab41e8": "YARN-5773. RM recovery too slow due to LeafQueue#activateApplications (Bibin A Chundatt via Varun Saxena)",
  "1b79c417d": "YARN-5767. Fix the order that resources are cleaned up from the local Public/Private caches. Contributed by Chris Trezzo",
  "9cad3e235": "HADOOP-13614. Purge some superfluous/obsolete S3 FS tests that are slowing test runs down. Contributed by Steve Loughran.",
  "f32e9fc8f": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.",
  "44f48ee96": "HDFS-10956. Remove rename/delete performance penalty when not using snapshots. Contributed by Daryn Sharp.",
  "744208431": "HDFS-10940. Reduce performance penalty of block caching when not used. Contributed by Daryn Sharp.",
  "e52d6e7a4": "HDFS-10875. Optimize du -x to cache intermediate result. Contributed by Xiao Chen.",
  "ec3ea1887": "HDFS-9895. Remove unnecessary conf cache from DataNode. Contributed by Xiaobing Zhou.",
  "03a9343d5": "HADOOP-12765. HttpServer2 should switch to using the non-blocking SslSelectChannelConnector to prevent performance degradation when handling SSL connections. Contributed by Min Shen.",
  "b047bc727": "HDFS-10560. DiskBalancer: Reuse ObjectMapper instance to improve the performance. Contributed by Yiqun Lin.",
  "2ed58c40e": "HADOOP-13403. AzureNativeFileSystem rename/delete performance improvements. Contributed by Subramanyam Pattipaka.",
  "7f3c306e2": "YARN-5432. Lock already held by another process while LevelDB cache store creation for dag. Contributed by Li Lu.",
  "ecff7d035": "MAPREDUCE-6738. TestJobListCache.testAddExisting failed intermittently in slow VM testbed. Contributed by Junping Du.",
  "58e185080": "YARN-5298. Mount usercache and NM filecache directories into Docker container. Contributed by Sidharta Seethana.",
  "4ba635471": "MAPREDUCE-6546. reconcile the two versions of the timeline service performance tests. (Sangjin Lee via Naganarasimha G R)",
  "8c7b6dd2c": "MAPREDUCE-6335. Created MR job based performance test driver for the timeline service v2. Contributed by Sangjin Lee.",
  "ce9c00643": "YARN-5214. Fixed locking in DirectoryCollection to avoid hanging NMs when various code-paths hit slow disks. Contributed by Junping Du.",
  "9683eab0e": "HADOOP-13263. Reload cached groups in background after expiry. (Contributed bt Stephen O'Donnell)",
  "4ee354362": "HADOOP-13203 S3A: Support fadvise 'random' mode for high performance readPositioned() reads. Contributed by Rajesh Balamohan and stevel.",
  "d433b16ce": "HDFS-7597. DelegationTokenIdentifier should cache the TokenIdentifier to UGI mapping. Contributed by Daryn Sharp, Bob Hansen, and Xiao Chen.",
  "605b4b613": "MAPREDUCE-6719. The list of -libjars archives should be replaced with a wildcard in the distributed cache to reduce the application footprint in the state store (Daniel Templeton via sjlee)",
  "5f6b4157a": "HDFS-10328. Add per-cache-pool default replication num configuration (xupeng via cmccabe)",
  "709a814fe": "HDFS-10516. Fix bug when warming up EDEK cache of more than one encryption zone. Contributed by Xiao Chen.",
  "705286cca": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.",
  "27c4e90ef": "HADOOP-13028 add low level counter metrics for S3A; use in read performance tests. contributed by: stevel patch includes HADOOP-12844 Recover when S3A fails on IOException in read() HADOOP-13058 S3A FS fails during init against a read-only FS if multipart purge HADOOP-13047 S3a Forward seek in stream length to be configurable",
  "27b131e79": "HADOOP-12822. Change 'Metrics intern cache overflow' log level from WARN to INFO. Contributed by Andras Bokor.",
  "938222b2e": "HADOOP-12947. Update documentation Hadoop Groups Mapping to add static group mapping, negative cache. Contributed by Wei-Chiu Chuang.",
  "e3bb38d62": "HDFS-9405. Warmup NameNode EDEK caches in background thread. Contributed by Xiao Chen.",
  "2c8496ebf": "HDFS-8791. block ID-based DN storage layout can be very slow for datanode on ext4. Contributed by Chris Trezzo.",
  "03cfb454f": "HADOOP-12825. Log slow name resolutions. (Sidharta Seethana via stevel)",
  "0f72da7e2": "MAPREDUCE-6622. Add capability to set JHS job cache to a task-based limit (rchiang via rkanter)",
  "b68901d7d": "YARN-4708. Missing default mapper type in TimelineServer performance test tool usage. Contributed by Kai Sasaki.",
  "1de1641f1": "HDFS-9801. ReconfigurableBase should update the cached configuration. (Arpit Agarwal)",
  "e6a7044b8": "HDFS-9768. Reuse ObjectMapper instance in HDFS to improve the performance. Contributed by Lin Yiqun.",
  "5cf5c41a8": "YARN-4360. Improve GreedyReservationAgent to support 'early' allocations, and performance improvements (curino via asuresh)",
  "193d27de0": "HDFS-9752. Permanent write failures may happen to slow writers during datanode rolling upgrades. Contributed by Walter Su.",
  "1bcfab8e7": "HDFS-9724. Degraded performance in WebHDFS listing as it does not reuse ObjectMapper. Contributed by Akira Ajisaka.",
  "dd9ebf6ee": "HDFS-9260. Improve the performance and GC friendliness of NameNode startup and full block reports (Staffan Friberg via cmccabe)",
  "e30ce01dd": "HDFS-9494. Parallel optimization of DFSStripedOutputStream#flushAllInternals. Contributed by Gao Rui.",
  "9fab22b36": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by Li Lu",
  "c07f7fa8f": "HDFS-9624. DataNode start slowly due to the initial DU command operations. (Lin Yiqun via wang)",
  "5b7078d06": "MAPREDUCE-6436. JobHistory cache issue. Contributed by Kai Sasaki",
  "e8964589d": "YARN-4341. add doc about timeline performance tool usage (Chang Li via sjlee)",
  "6039059c3": "HDFS-9443. Disabling HDFS client socket cache causes logging message printed to console for CLI commands. Contributed by Chris Nauroth.",
  "0eb9c60c5": "HADOOP-12482. Race condition in JMX cache update. (Tony Wu via lei)",
  "3e1745d8e": "HADOOP-12544. Erasure Coding: create dummy raw coder to isolate performance issues in testing. Contributed by Rui Li.",
  "4c0bae240": "HADOOP-12436. GlobPattern regex library has performance issues with wildcard characters (Matthew Paduano via aw)",
  "cb26cd4be": "MAPREDUCE-6489. Fail fast rogue tasks that write too much to local disk. Contributed by Maysam Yabandeh",
  "58590fef4": "YARN-2556. Tool to measure the performance of the timeline server (Chang Li via sjlee)",
  "dc45a7a7c": "Revert 'HADOOP-12436. GlobPattern regex library has performance issues with wildcard characters (Matthew Paduano via aw)'",
  "0d77e85f0": "HADOOP-12436. GlobPattern regex library has performance issues with wildcard characters (Matthew Paduano via aw)",
  "7bff8ca1c": "HDFS-8920. Erasure Coding: when recovering lost blocks, logs can be too verbose and hurt performance. Contributed by Rui Li",
  "0113e4528": "HDFS-9033. dfsadmin -metasave prints 'NaN' for cache used%. Contributed by Brahma Reddy Battula.",
  "b6ceee9bf": "HDFS-8865. Improve quota initialization performance. Contributed by Kihwal Lee.",
  "48774d0a4": "HADOOP-12325. RPC Metrics : Add the ability track and log slow RPCs. Contributed by Anu Engineer",
  "80a29906b": "HDFS-8884. Fail-fast check in BlockPlacementPolicyDefault#chooseTarget. (yliu)",
  "d25cb8fe1": "HDFS-7213. processIncrementalBlockReport performance degradation. Contributed by Eric Payne. Moved CHANGES.TXT entry to 2.6.1",
  "bff67dfe2": "MAPREDUCE-6425. ShuffleHandler passes wrong 'base' parameter to getMapOutputInfo if mapId is not in the cache. Contributed by zhihai xu.",
  "afe9ea3c1": "HDFS-8646. Prune cached replicas from DatanodeDescriptor state on replica invalidation.",
  "8d58512d6": "YARN-3832. Resource Localization fails on a cluster due to existing cache directories. Contributed by Brahma Reddy Battula",
  "7b424f938": "HDFS-8480. Fix performance and timeout issues in HDFS-7929 by using hard-links to preserve old edit logs, instead of copying them. (Zhe Zhang via Colin P. McCabe)",
  "e965dcec3": "HDFS-8470. fsimage loading progress should update inode, delegation token and cache pool count. (Contributed by surendra singh lilhore)",
  "7817674a3": "HDFS-7609. Avoid retry cache collision when Standby NameNode loading edits. Contributed by Ming Ma.",
  "15ccd967e": "YARN-3505. Node's Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.",
  "7a7960be4": "HDFS-7433. Optimize performance of DatanodeManager's node map. Contributed by Daryn Sharp.",
  "f9427f176": "HDFS-7980. Incremental BlockReport will dramatically slow down namenode startup. Contributed by Walter Su",
  "b72507810": "YARN-3491. PublicLocalizer#addResource is too slow. (zxu via rkanter)",
  "3fe79e1db": "HDFS-7397. Add more detail to the documentation for the conf key 'dfs.client.read.shortcircuit.streams.cache.size' (Brahma Reddy Battula via Colin P. McCabe)",
  "7660da95c": "HDFS-7931. DistributedFileSystem should not look for keyProvider in cache if Encryption is disabled (asuresh)",
  "b6dea9776": "MAPREDUCE-579. Streaming slowmatch documentation.",
  "d4f7e2507": "MAPREDUCE-6282. Reuse historyFileAbsolute.getFileSystem in CompletedJob#loadFullHistoryData for code optimization. (zxu via rkanter)",
  "e43882e84": "HDFS-7898. Change TestAppendSnapshotTruncate to fail-fast. Contributed by Tsz Wo Nicholas Sze.",
  "115428176": "HDFS-7721. The HDFS BlockScanner may run fast during the first hour (cmccabe)",
  "ee7d22e90": "HADOOP-11466. FastByteComparisons: do not use UNSAFE_COMPARER on the SPARC architecture because it is slower there (Suman Somasundar via Colin P. McCabe)",
  "ba5116ec8": "YARN-2217. [YARN-1492] Shared cache client side changes. (Chris Trezzo via kasha)",
  "10ac5abb8": "MAPREDUCE-6173. Document the configuration of deploying MR over distributed cache with enabling wired encryption at the same time. Contributed by Junping Du.",
  "53caeaa16": "HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena.",
  "b7f64823e": "YARN-2203. [YARN-1492] Web UI for cache manager. (Chris Trezzo via kasha)",
  "9b4ba409c": "YARN-2189. Admin service for cache manager. Addendum to sort entries",
  "390642acf": "HDFS-7503. Namenode restart after large deletions can cause slow processReport (Arpit Agarwal)",
  "e227fb8fb": "HDFS-7459. Consolidate cache-related implementation in FSNamesystem into a single class. Contributed by Haohui Mai.",
  "78968155d": "YARN-2189. [YARN-1492] Admin service for cache manager. (Chris Trezzo via kasha)",
  "7caa3bc98": "HDFS-6735. A minor optimization to avoid pread() be blocked by read() inside the same DFSInputStream (Lars Hofhansl via stack)",
  "b36f29298": "HADOOP-11301. [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack) -- REAPPLY #2",
  "692d3b83e": "Revert 'HBASE-11301 [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack) -- REAPPLY'",
  "74f4d8590": "HBASE-11301 [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack) -- REAPPLY",
  "4e312a434": "Revert 'HBASE-11301 [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack)'",
  "fb4161588": "HBASE-11301 [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack)",
  "fe1f2db5e": "YARN-2188. [YARN-1492] Client service for cache manager. (Chris Trezzo and Sangjin Lee via kasha)",
  "9e81be011": "HDFS-7398. Reset cached thread-local FSEditLogOp's on every FSEditLog#logEdit. Contributed by Gera Shegalov.",
  "06b797947": "YARN-2803. MR distributed cache not working correctly on Windows after NodeManager privileged account changes. Contributed by Craig Welch.",
  "256697acd": "YARN-2186. [YARN-1492] Node Manager uploader service for cache manager. (Chris Trezzo and Sangjin Lee via kasha)",
  "73e626ad9": "YARN-2755. NM fails to clean up usercache_DEL_<timestamp> dirs after YARN-661. Contributed by Siqi Li",
  "e226b5b40": "HDFS-7213. processIncrementalBlockReport performance degradation. Contributed by Eric Payne.",
  "58c0bb9ed": "HDFS-6606. Optimize HDFS Encrypted Transport performance. (yliu)",
  "e7859015b": "HADOOP-11233. hadoop.security.kms.client.encrypted.key.cache.expiry property spelled wrong in core-default. (Stephen Chu via yliu)",
  "c51e53d7a": "YARN-2183. [YARN-1492] Cleaner service for cache manager. (Chris Trezzo and Sangjin Lee via kasha)",
  "f44cf9959": "YARN-2314. Disable ContainerManagementProtocolProxy cache by default to prevent creating thousands of threads in a large cluster. Contributed by Jason Lowe",
  "4799570df": "HDFS-7266. HDFS Peercache enabled check should not lock on object (awang via cmccabe)",
  "d3d3d4720": "HDFS-7209. Populate EDEK cache when creating encryption zone. (Yi Liu via wang)",
  "4f426fe22": "YARN-2180. [YARN-1492] In-memory backing store for cache manager. (Chris Trezzo via kasha)",
  "9b8a35aff": "HDFS-7128. Decommission slows way down when it gets towards the end. Contributed by Ming Ma.",
  "29f520052": "YARN-2624. Resource Localization fails on a cluster due to existing cache directories. Contributed by Anubhav Dhoot",
  "17d1202c3": "YARN-2179. [YARN-1492] Initial cache manager structure and context. (Chris Trezzo via kasha)",
  "1147b9ae1": "MAPREDUCE-6073. Description of mapreduce.job.speculative.slowtaskthreshold in mapred-default should be moved into description tags (Tsuyoshi OZAWA via aw)",
  "df8c84cba": "HADOOP-11071. KMSClientProvider should drain the local generated EEK cache on key rollover. (tucu)",
  "258c7d0f5": "HADOOP-10833. Remove unused cache in UserProvider. (Benoy Antony)",
  "55a2b550b": "YARN-2034. Description for yarn.nodemanager.localizer.cache.target-size-mb is incorrect. Contributed by Chen He",
  "be117cbcd": "HADOOP-10967. Improve DefaultCryptoExtension#generateEncryptedKey performance. (hitliuyi via tucu)",
  "6d39525f6": "YARN-2352. Add missing file. FairScheduler: Collect metrics on duration of critical methods that affect performance. (kasha)",
  "14864e9c7": "YARN-2352. FairScheduler: Collect metrics on duration of critical methods that affect performance. (kasha)",
  "d3a2fe280": "HDFS-6772. Get DN storages out of blockContentsStale state faster after NN restarts. (Contributed by Ming Ma)",
  "551024915": "HDFS-6599. 2.4 addBlock is 10 to 20 times slower compared to 0.23 (daryn)",
  "905c90b06": "HADOOP-10734. Implement high-performance secure random number sources. (Yi Liu via Colin Patrick McCabe)",
  "9b5d551ad": "HDFS-6610. TestShortCircuitLocalRead tests sometimes timeout on slow machines. Contributed by Charles Lamb.",
  "297e3c72f": "HDFS-6604. The short-circuit cache doesn't correctly time out replicas that haven't been used in a while (cmccabe)",
  "988bc17bc": "HADOOP-10674. Improve PureJavaCrc32 performance and use java.util.zip.CRC32 for Java 7 and above.",
  "214aceb9f": "HADOOP-10659. Refactor AccessControlList to reuse utility functions and to improve performance. (Contributed by Benoy Antony)",
  "bd23a2ff2": "MAPREDUCE-5896. InputSplits should indicate which locations have the block cached in memory. (Sandy Ryza via kasha)",
  "66598697a": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)",
  "1228f8f6f": "HBASE-6110 adding more slow action log in critical write path (Liang Xie via stack)",
  "8f4876066": "HDFS-6345. DFS.listCacheDirectives() should allow filtering based on cache directive ID. (wang)",
  "9274626a1": "YARN-1923. Make Fair Scheduler resource ratio calculations terminate faster (Anubhav Dhoot via Sandy Ryza)",
  "cde7b1756": "YARN-1914. Fixed resource-download on NodeManagers to skip permission verification of public cache files in Windows+local file-system environment. Contribued by Varun Vasudev.",
  "328fc86bd": "HDFS-5846. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic.",
  "a90a5c245": "MAPREDUCE-5791. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic.",
  "d265dd9eb": "HDFS-6107. When a block cannot be cached due to limited space on the DataNode, it becomes uncacheable (cmccabe)",
  "9a65a9aad": "HDFS-6106. Reduce default for dfs.namenode.path.based.cache.refresh.interval.ms (cmccabe)",
  "53790d330": "YARN-1771. Reduce the number of NameNode operations during localization of public resources using a cache. Contributed by Sangjin Lee",
  "842aa2bc9": "HDFS-6080. Improve NFS gateway performance by making rtmax and wtmax configurable. Contributed by Abin Shahab",
  "a3616c58d": "HDFS-6086. Fix a case where zero-copy or no-checksum reads were not allowed even when the block was cached. (cmccabe)",
  "e1162ebb1": "HDFS-5167. Add metrics about the NameNode retry cache. Contributed by Tsuyoshi OZAWA.",
  "8e809b8c8": "HDFS-6033. PBImageXmlWriter incorrectly handles processing cache directives. Contributed by Aaron T. Myers.",
  "beb0d25d2": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)",
  "60eca33e8": "HDFS-5900. Cannot set cache pool limit of unlimited via CacheAdmin. Contributed by Andrew Wang.",
  "12c2582c1": "HDFS-5895. HDFS cacheadmin -listPools has exit_code of 1 when the command returns 0 result. Contributed by Tassapol Athiapinya.",
  "fd2ba4911": "HDFS-5790. LeaseManager.findPath is very slow when many leases need recovery. Contributed by Todd Lipcon.",
  "c96d07803": "HDFS-5845. SecondaryNameNode dies when checkpointing with cache pools.",
  "20176840f": "Addendum patch for HADOOP-9652 to fix performance problems. Contributed by Andrew Wang",
  "782a223ad": "HADOOP-10228. FsPermission#fromShort() should cache FsAction.values(). Contributed by Haohui Mai.",
  "8deb7a605": "HDFS-5589. Namenode loops caching and uncaching when data should be uncached. (awang via cmccabe)",
  "b4eb963c3": "HDFS-5659. dfsadmin -report doesn't output cache information properly. Contributed by Andrew Wang.",
  "07e4fb145": "HDFS-5708. The CacheManager throws a NPE in the DataNode logs when processing cache reports that refer to a block not known to the BlockManager. Contributed by Colin Patrick McCabe.",
  "b9ae3087c": "HDFS-5636. Enforce a max TTL per cache pool (awang via cmccabe)",
  "991c453ca": "HDFS-5431. Support cachepool-based limit management in path-based caching. (awang via cmccabe)",
  "55e5b0653": "HDFS-5630. Hook up cache directive and pool usage statistics. (wang)",
  "13edb391d": "HDFS-5556. Add some more NameNode cache statistics, cache pool stats (cmccabe)",
  "512475e56": "YARN-674. Fixed ResourceManager to renew DelegationTokens on submission asynchronously to work around potential slowness in state-store. Contributed by Omkar Vinit Joshi.",
  "4f15d0af4": "HDFS-5520. loading cache path directives from edit log doesnt update nextEntryId (cmccabe)",
  "9d0663171": "HDFS-5450. better API for getting the cached blocks locations. Contributed by Andrew Wang.",
  "f79b3e6b1": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)",
  "3fccdec6e": "HDFS-5364. Add OpenFileCtx cache. Contributed by Brandon Li",
  "7e820b996": "HADOOP-10072. TestNfsExports#testMultiMatchers fails due to non-deterministic timing around cache expiry check. Contributed by Chris Nauroth.",
  "e86f4a2e2": "HDFS-5276. FileSystem.Statistics should use thread-local counters to avoid multi-threaded performance issues on read/write. (Colin Patrick McCabe)",
  "d61af9781": "HDFS-5203. Concurrent clients that add a cache directive on the same path may prematurely uncache each other. (Chris Nauroth via Colin Patrick McCabe)",
  "1d96e3601": "HDFS-5388. Loading fsimage fails to find cache pools during namenode startup (Chris Nauroth via Colin Patrick McCabe)",
  "3cc7a38a5": "HDFS-5096. Automatically cache new data added to a cached path (contributed by Colin Patrick McCabe)",
  "8da82eba1": "HDFS-5373. hdfs cacheadmin -addDirective short usage does not mention -replication parameter. Contributed by Chris Nauroth.",
  "f7eaacc10": "HDFS-5322. HDFS delegation token not found in cache errors seen on secure HA clusters. Contributed by Jing Zhao.",
  "3fc8792b5": "HDFS-5304. Expose if a block replica is cached in getFileBlockLocations. (Contributed by Andrew Wang)",
  "eb2175db1": "HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)",
  "db06f1bcb": "MAPREDUCE-4421. Run MapReduce framework via the distributed cache. Contributed by Jason Lowe",
  "68ec07cad": "HDFS-5197. Document dfs.cachereport.intervalMsec in hdfs-default.xml. Contributed by Chris Nauroth.",
  "2f8297215": "HDFS-5198. NameNodeRpcServer must not send back DNA_FINALIZE in reply to a cache report.",
  "02e0e158a": "HDFS-5158. Add command-line support for manipulating cache directives",
  "3a9cd79e9": "HDFS-5120. Add command-line support for manipulating cache pools.",
  "f41f8b884": "HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)",
  "97b726797": "HDFS-5121. Add RPCs for creating and manipulating cache pools. (Contributed by Colin Patrick McCabe)",
  "fc14a92c6": "HDFS-5141. Add cache status information to datanode heartbeat. (Contributed by Andrew Wang)",
  "920b4cc06": "HDFS-5052. Add cacheRequest/uncacheRequest support to NameNode. (Contributed by Colin Patrick McCabe.)",
  "6fd8766a5": "HDFS-5045. Add more unit tests for retry cache to cover all AtMostOnce methods. Contributed by Jing Zhao.",
  "cae55de2c": "MAPREDUCE-5462. In map-side sort, swap entire meta entries instead of indexes for better cache performance. (Sandy Ryza)",
  "52ccc6c6d": "HDFS-5051. Propagate cache status information from the DataNode to the NameNode (Andrew Wang via Colin Patrick McCabe)",
  "deec7ca21": "HADOOP-9757. Har metadata cache can grow without limit (Cristina Abad via daryn)",
  "a00a72972": "MAPREDUCE-5399. Unnecessary Configuration instantiation in IFileInputStream slows down merge. (Stanislav Barton via Sandy Ryza)",
  "8c7a7e619": "HDFS-5025. Record ClientId and CallId in EditLog to enable rebuilding retry cache in case of HA failover. Contributed by Jing Zhao.",
  "8bb035509": "MAPREDUCE-5411. Refresh size of loaded job cache on history server. Contributed by Ashwin Shankar",
  "ec1898425": "MAPREDUCE-1981. Improve getSplits performance by using listLocatedStatus. Contributed by Hairong Kuang and Jason Lowe",
  "1b531c1db": "HDFS-4979. Implement retry cache on Namenode. Contributed by Suresh Srinivas.",
  "78331cfec": "MAPREDUCE-5300. Fix backward incompatibility for o.a.h.mapreduce.filecache.DistributedCache. Contributed by Zhijie Shen.",
  "ac44e0a0d": "MAPREDUCE-5268. Improve history server startup performance. Contributed by Karthik Kambatla",
  "a720a524e": "MAPREDUCE-5263. Bring back old methods and fields in filecache.DistributedCache for binary compatibility with mapred in 1.x. Contributed by Zhijie Shen.",
  "9fdb11747": "HDFS-4824. FileInputStreamCache.close leaves dangling reference to FileInputStreamCache.cacheCleaner. Contributed by Colin Patrick McCabe.",
  "da05873e0": "HDFS-4826. TestNestedSnapshots times out due to repeated slow edit log flushes when running on virtualized disk. Contributed by Chris Nauroth",
  "ffd7dbb34": "YARN-583. Moved application level local resources to be localized under the filecache sub-directory under application directory. Contributed by Omkar Vinit Joshi.",
  "801b484f9": "HDFS-347. DFS read performance suboptimal when client co-located on nodes with data. Contributed by Colin Patrick McCabe.",
  "b96d18bd2": "YARN-99. Modify private distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.",
  "2100e93b0": "YARN-538. RM address DNS lookup can cause unnecessary slowness on every JHS page load. (sandyr via tucu)",
  "e67e3ff05": "YARN-467. Modify public distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.",
  "0e6604aab": "HDFS-4633 TestDFSClientExcludedNodes fails sporadically if excluded nodes cache expires too quickly (Chris Nauroth via Sanjay)",
  "81192e4e4": "HDFS-4621. Additional logging to help diagnose slow QJM syncs. Contributed by Todd Lipcon.",
  "64741f463": "HDFS-4521. Invalid network toploogies should not be cached. Contributed by Colin Patrick McCabe.",
  "74ffc7a74": "MAPREDUCE-4946. Fix a performance problem for large jobs by reducing the number of map completion event type conversions. Contributed by Jason Lowe.",
  "d08b1af26": "HDFS-4400. DFSInputStream#getBlockReader: last retries should ignore the cache. Contributed by Colin Patrick McCabe.",
  "ec8ed4e95": "HADOO-8998. set Cache-Control no-cache header on all dynamic content. (tucu)",
  "f8c486fbc": "HADOOP-7115. Add a cache for getpwuid_r and getpwgid_r calls (tucu)",
  "be94bf6b5": "HDFS-3990. NN's health report has severe performance problems (daryn)",
  "895029b2f": "MAPREDUCE-4730. Fix Reducer's EventFetcher to scale the map-completion requests slowly to avoid HADOOP-8942. Contributed by Jason Lowe.",
  "224de4f92": "HADOOP-8926. hadoop.util.PureJavaCrc32 cache hit-ratio is low for static data (Gopal V via bobby)",
  "ded304e6a": "HDFS-4049. Fix hflush performance regression due to nagling delays. Contributed by Todd Lipcon.",
  "a7bcdcc05": "HDFS-3373. Change DFSClient input stream socket cache to global static and add a thread to cleanup expired cache entries. Contributed by John George",
  "2526a96aa": "YARN-108. FSDownload can create cache directories with the wrong permissions (Jason Lowe via bobby)",
  "02c0317ef": "YARN-87. NM ResourceLocalizationService does not set permissions of local cache directories (Jason Lowe via tgraves)",
  "f6b7f067c": "HDFS-3884. Journal format() should reset cached values. Contributed by Todd Lipcon.",
  "7b541d619": "MAPREDUCE-4408. allow jobs to set a JAR that is in the distributed cached (rkanter via tucu)",
  "82910ecaa": "YARN-14. Symlinks to peer distributed cache files no longer work (Jason Lowe via bobby)",
  "72789336b": "MAPREDUCE-4503. Should throw InvalidJobConfException if duplicates found in cacheArchives or cacheFiles (Robert Evans via jeagles)",
  "fe17d871d": "HDFS-3513. HttpFS should cache filesystems. (tucu)",
  "e217a0525": "MAPREDUCE-4342. Distributed Cache gives inconsistent result if cache files get deleted from tasktracker. (mayank_bansal via tucu)",
  "02a5551ba": "HDFS-3608. fuse_dfs: detect changes in UID ticket cache. Contributed by Colin Patrick McCabe.",
  "03f2f9b58": "MAPREDUCE-4228. mapreduce.job.reduce.slowstart.completedmaps is not working properly (Jason Lowe via bobby)",
  "74dfa8f1f": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.",
  "eca2c850a": "HDFS-3376. DFSClient fails to make connection to DN if there are many unusable cached sockets. Contributed by Todd Lipcon.",
  "e7d03636a": "HADOOP-8323. Revert HADOOP-7940, cause it may cause a performance regression. (harsh)",
  "25882b199": "HDFS-3359. DFSClient.close should close cached sockets. Contributed by Todd Lipcon.",
  "170ff8d81": "MAPREDUCE-4087. [Gridmix] GenerateDistCacheData job of Gridmix can become slow in some cases (ravigummadi)",
  "0ac5e8941": "HADOOP-8088. User-group mapping cache incorrectly does negative caching on transient failures (Khiwal Lee via bobby)",
  "4ce5f6553": "MAPREDUCE-3944. Change the history jobs/ webservice to return partial job info for a significant performance improvement. (Contributed by Robert Joseph Evans)",
  "7decf112c": "HDFS-3024. Improve performance of stringification in addStoredBlock. Contributed by Todd Lipcon.",
  "165cd626c": "MAPREDUCE-2855. Passing a cached class-loader to ResourceBundle creator to minimize counter names lookup time. Contributed by Siddarth Seth.",
  "8a2073cc6": "MAPREDUCE-3787. [Gridmix] Optimize job monitoring and STRESS mode for faster job submission. (amarrk)",
  "90a14f89e": "HDFS-2973. Re-enable NO_ACK optimization for block deletion. Contributed by Todd Lipcon.",
  "7527e943e": "HDFS-2972. Small optimization building incremental block report. Contributed by Todd Lipcon.",
  "063be5749": "HADOOP-6502. Improve the performance of Configuration.getClassByName when the class is not found by caching negative results. Contributed by Sharad Agarwal and Todd Lipcon.",
  "82ffe0e73": "HADOOP-8070. Add a standalone benchmark for RPC call performance. Contributed by Todd Lipcon.",
  "04f685ea7": "MAPREDUCE-3827. Changed Counters to use ConcurrentSkipListMap for performance. Contributed by Vinod K V.",
  "c6282df3e": "MAPREDUCE-3813. Added a cache for resolved racks. Contributed by Vinod K V.",
  "f7d20b219": "HDFS-2751. Datanode may incorrectly drop OS cache behind reads even for short reads. Contributed by Todd Lipcon.",
  "74697f231": "MAPREDUCE-3512. Batching JobHistory flushing to DFS so that we don't flush for every event slowing down AM. Contributed by Siddarth Seth.",
  "08f8abf56": "MAPREDUCE-3572. Moved AM event dispatcher to a separate thread for performance reasons. Contributed by Vinod K V.",
  "f445eb31f": "MAPREDUCE-3529. TokenCache does not cache viewfs credentials correctly. (sseth)",
  "197634f2f": "HDFS-2653. DFSClient should cache whether addrs are non-local when short-circuiting is enabled. Contributed by Eli Collins",
  "c56e05196": "MAPREDUCE-3102. Changed NodeManager to fail fast when LinuxContainerExecutor has wrong configuration or permissions. Contributed by Hitesh Shah.",
  "dbc82dbdf": "MAPREDUCE-3379. Fixed LocalResourceTracker in NodeManager to remove deleted cache entries correctly. Contributed by Siddharth Seth.",
  "6733a1ca5": "MAPREDUCE-3291. App fail to launch due to delegation token not found in cache (Robert Evans via mahadev)",
  "5f9e67e22": "MAPREDUCE-2766. Fixed NM to set secure permissions for files and directories in distributed-cache. Contributed by Hitesh Shah.",
  "0e7518719": "HADOOP-7761. Improve the performance of raw comparisons. Contributed by Todd Lipcon.",
  "d0016c612": "MAPREDUCE-3154. Fix JobSubmitter to check for output specs before copying job submission files to fail fast. Contributed by Abhijit Suresh Shingate.",
  "8fb67650b": "MAPREDUCE-2691. Finish up the cleanup of distributed cache file resources and related tests. Contributed by Siddharth Seth.",
  "cda43d71b": "HDFS-1774. Small optimization to FSDataset. Contributed by Uma Maheswara Rao G",
  "e45025c7c": "HDFS-420. Fuse-dfs should cache fs handles. Contributed by Brian Bockelman and Eli Collins",
  "a213c5676": "HADOOP-7183. WritableComparator.get should not cache comparator objects. Contributed by Tom White",
  "76a7219ce": "HADOOP-7184. Remove deprecated config local.cache.size from core-default.xml. Contributed by Todd Lipcon.",
  "33754052e": "HADOOP-7019 Refactor build targets to enable faster cross project dev cycles. Contributed by Luke Lu.",
  "e89ac4b07": "HADOOP-6652. Removes the unnecessary cache from ShellBasedUnixGroupsMapping. Contributed by Devaraj Das.",
  "4eedc7727": "HADOOP-6467. Improve the performance on HarFileSystem.listStatus(..). Contributed by mahadev",
  "115ef5b8c": "HADOOP-6545. Changes the Key for the FileSystem cache to be UGI. Contributed by Devaraj Das.",
  "f95ec3f5b": "HADOOP-6133. Add a caching layer to Configuration::getClassByName to alleviate a performance regression introduced in a compatibility layer. Contributed by Todd Lipcon",
  "8621b830f": "HADOOP-6166. Further improve the performance of the pure-Java CRC32 implementation. Contributed by Tsz Wo (Nicholas), SZE",
  "09d826ebe": "HADOOP-6180. NameNode slowed down when many files with same filename were moved to Trash. Contributed by Boris Shkolnik.",
  "53c127013": "HADOOP-6132. RPC client create an extra connection because of incorrect key for connection cache. (Kan Zhang via rangadi)",
  "8bd2486b5": "HADOOP-6148. Implement a fast, pure Java CRC32 calculator which outperforms java.util.zip.CRC32. Contributed by Todd Lipcon and Scott Carey",
  "e93ebeae5": "HADOOP-6109. Change Text to grow its internal buffer exponentially, rather than the max of the current length and the proposed length to improve performance reading large values. Contributed by thushara wijeratna"
}, "halo": {
  "194850b": "fix: the issue of local cache not being cleared after saving a new post (#3551)",
  "af07b42": "feat: add indexer implementation to solve the slow tag stats (#3420)",
  "e9389ac": "refactor: lru cache key for template engine manager (#3243)",
  "2a70d59": "Adapt spring.web.resources.cache configuration (#3130)",
  "efc940d": "fix: not clearing the template engine cache after upgrading the theme (#2970)",
  "03aeb70": "chore: disable thymeleaf cache in dev profile (#2630)",
  "52b3e4f": "Fix the problem jsonToCacheWrapper crashes when cache value is not JSON format (#1695)",
  "34b7c7a": "refactor: comment list component code optimization (halo-dev/console#464)",
  "9ee10b0": "refactor: custom sheet list component code optimization (halo-dev/console#446)",
  "2f77524": "refactor: post list component code optimization (halo-dev/console#445)",
  "b412d5d": "Fix incorrect cache lock of journal like api (#1279)",
  "9951a83": "chore: remove redis cache store (#1190)",
  "fc5742e": "chore: remove hazelcast cache store. (#1076)",
  "437d4bd": "Add hazelcast cache store, revised the cache implementation (#1047)",
  "1e40cc3": "pref: validation optimization of many edit form. (halo-dev/console#223)",
  "18ab2bd": "pref: form validation optimization of journal edit form. (halo-dev/console#221)",
  "23768f1": "pref: code optimization again. (halo-dev/console#215)",
  "522027e": "pref: code optimization. (halo-dev/console#213)",
  "2b8f218": "chore: remove fastjson dependency. (#871)",
  "9ec3088": "support distributed cache and customized halo home. (#754)",
  "301fa35": "chore(deps): bump fastjson from 1.2.67 to 1.2.68 (#800)",
  "76cbf46": "chore: upgrade fastjson dependency. (#732)",
  "73bea52": "Enable github action cache for CI",
  "d867f4c": "feat: add leveldb cache store impl (#494)",
  "6768689": "feat: performance optimization.",
  "1c15e07": "feat: performance optimization.",
  "66e9c98": "feat: performance optimization.",
  "f2fac95": "feat: performance optimization.",
  "fb31e60": "feat: performance optimization.",
  "2db2de1": "feat: performance optimization.",
  "f3e81b9": "Clear cache before application id destroyed",
  "5a0d21b": "feat: performance optimization.",
  "5a2ff4e": "feat: performance optimization.",
  "c3878af": "feat: performance optimization.",
  "803e419": "Fixed store cache options error.",
  "8189cc0": "Enable image cache custom",
  "978df36": "Add jar cache of travis ci",
  "3dcf20a": "Add jar cache of travis ci",
  "f7fb7c7": "Disable auto delete in cache lock for admin controller",
  "0b35392": "Fix cache expiry calculation error",
  "cea6a55": "Add option cache feature",
  "6e8ef4b": "Refactor string cache store usage",
  "b0cb31a": "Enhance string cache store",
  "fae4b9a": "Clear cache when theme uploaded.",
  "184523c": "Clear theme cache when saving options",
  "e5f5a66": "Run a timer for cache cleaner",
  "6ce7721": "Remove ehcache",
  "847828c": "Refactor cache owo",
  "c9c68ee": "Code optimization",
  "cdc9db0": ":art: disable cache for dev",
  "c293379": "Disable cache in development environment",
  "1b1ec58": ":apple: 配置ehcache缓存",
  "6e7f717": ":alien: 测试Ehcache"
}, "haven": {
  "9b48c77": "script to clean up fastlane file format",
  "e22dba8": "rename fastlane metadata to follow standard locale names",
  "6761a40": "sync title to fastlane",
  "5721fd7": "Initial commit on Signal flow optimization",
  "a1609c4": "lower the camera resolution a small amount to improve performance",
  "a117f9b": "update transifex config to add fastlane app store info",
  "d2d4f54": "Lint: recommended performance changes",
  "807ea72": "include app title, short, and long descriptions in fastlane"
}, "hawk": {
  "8b2acd7": "- delete - contains - performance improvement"
}, "hazelcast": {
  "d4bfb2fe": "Fix test by using slow EP [HZ-2331] (#24346)",
  "e98fbe3a": "Exclude slow corrupted snapshot tests from PR builder runs (#24125)",
  "2821831b": "Improve near-cache read-only entry processor tests (#24052)",
  "da0ff4ca": "'put' changed to 'putIfAbsent', little optimization. (#23852)",
  "1ab0ab01": "Let existing map/cache see added wan config [HZ-1456] (#23754)",
  "f9582ab3": "Do not cache outputstream [HZ-2085] (#23753)",
  "81db1bcf": "Refresh cached partitions [HZ-1715] (#22725)",
  "a6d7c70e": "Fix stress test - faster result compare (#22445)",
  "f321677f": "[HZ-1262] Invalidating plan cache after view replace (#22091)",
  "020680c1": "Remove parameter from the Rest and Memcached tests (#21685)",
  "a37a6372": "Use ConcurrentReferenceHashMap instead of CHM to cache serializers (#21376)",
  "69f16fd3": "Replace Guava cache with custom CHM-based one (#20655)",
  "d2f0c631": "Improve performance of getPartitionAssignment (#21032)",
  "15b0b30d": "Fix performance of JmxPublisher (#20368)",
  "38086c2c": "Fix performance of SqlPage.getColumnValueForClient (#20398)",
  "df234c7b": "[HZ-771] Align query-cache and near-cache default behavior (#20265)",
  "824ee253": "Fix number interpretation for memcache protocol implementation (#19653)",
  "2e126b41": "Prevent null near-cache name (#19245)",
  "2f45f652": "Do not (re)create MapContainer on validating cached SQL plans (#19244)",
  "7ef1dc2d": "Fix SQL optimization tests (#19098)",
  "86ee2a04": "Fail fast at startup for invalid WAN merge policy (#18875) (#18928)",
  "58adb8b8": "Add jcache jar to the distributions (#18920)",
  "693faf4c": "Bump actions/cache from 2.1.5 to 2.1.6 (#244)",
  "3d18117f": "Bump actions/cache from 2.1.5 to 2.1.6 (#319)",
  "0562ac12": "Bump actions/cache from 2.1.5 to 2.1.6 (#87)",
  "eceaf6ad": "Bump actions/cache from 2 to 2.1.5 (#314)",
  "464dc1be": "Bump actions/cache from 2 to 2.1.5 (#237)",
  "16487826": "Bump actions/cache from 2 to 2.1.5 (#83)",
  "54c6cb37": "Invalidate cached SQL plans on mapping changes (#18556)",
  "123fd22b": "Limit the number of parallel partition reads for map/cache.",
  "0d5daea2": "assert cache size with QueryCache#tryRecover",
  "fba83d74": "Refactor cacheable SQL plans (#18504)",
  "2d0d7f30": "Copy Nearcacheconfig when it needs to be changed",
  "4c379317": "Revert 'Make NearcacheConfig equal before and after it is used'",
  "5dabe508": "Fix for query_cache_recreates_itself_after_server_restart: Wait for cache size to be 100 (#18233)",
  "0156bcc4": "Fail fast when using IndexType#BITMAP on HD (#18118)",
  "e891589d": "Use cached deserialized values in SQL when possible (#18172)",
  "c08acc93": "Micro-optimization in the QueryDataType.normalize method (#18156)",
  "9ef8cad6": "Make NearcacheConfig equal before and after it is used",
  "cc864522": "finish cache eviction policy tests once CacheEvictionPolicyComparator was invoked (#18153)",
  "035270bf": "Improve CSV reading performance in SQL (#2753)",
  "713cc67d": "Ensure MemcacheProtocol config is not overwritten when parsing (#17945)",
  "90c2aa6a": "Moves top slowest serial tests to SlowTest category",
  "956b68e0": "Use 'default' when nearcache name is empty on client xml (#17541)",
  "2e1c0045": "Improved performance of PartitionIdSet.equals (#17548)",
  "a6e0b05a": "Cleanup cache tests with statistics",
  "da71f523": "Bump spymemcached from 2.12.2 to 2.12.3 (#17367)",
  "5e43956b": "SQL plan cache implementation (#17277) (#17278)",
  "f8944694": "Ignore failures in net.spy.memcached.MemcachedClient.shutdown() (IBM JDK related workaround)",
  "1740e1c0": "Merge pull request #17288 from hazelcast/fixes/add-name-to-simple-cache-config-constructor/master",
  "a58cce02": "Fix race in (JCache) cache creation",
  "813ee32f": "Merge pull request #16925 from pveentjer/v4.1/performance/multiple-connections-2",
  "e25d62b3": "Update 2020-07-16-designing-evergreen-cache-cdc.md",
  "cd1d0b84": "Add A CDC use-case for an evergreen cache blog post (#2264)",
  "bb05e4f5": "Merge pull request #17210 from pveentjer/v4.1/performance/17207-paging-predicate",
  "c9a0ee2a": "Resolved performance problem with PagingPredicate JDK8",
  "1dc6c0dd": "Merge pull request #17077 from pveentjer/v4.1/performance/SwCounter-simplify",
  "aa010664": "Tenant cache create fix master (#17122)",
  "2b04ed21": "Return cached value under concurrent requests",
  "977a15da": "SQL: Basic optimization for project/filter/scan (#17005) (#17039)",
  "a1496221": "Merge pull request #16971 from pveentjer/v4.1/performance/thread-affinity",
  "b6c32947": "Do not assume resolved cache config in pre-join op",
  "de813b5d": "Allow longer metric words, fail-fast if exceeded (#16869)",
  "98857112": "Bump cache-api from 1.0.0 to 1.1.1 (#153)",
  "167677a7": "Move file to internal nearcache package",
  "3d390eea": "Ensure cache is created in test (#16598)",
  "68b83a61": "Small improvements on map and cache iterators (#16464)",
  "0de97987": "Follow changes in map/cache iterators",
  "a4d2dd56": "Move query cache to map impl package",
  "da2e006f": "Merge pull request #15875 from pveentjer/v4.0/performance/smart-client-threadcount-for-fast-boxes",
  "6f210b08": "Ensure near cache populated once putAsync completes",
  "041fc6a6": "Improve query cache test (#16341)",
  "6d58529b": "Fail fast if one of loaded key or value is null",
  "761a14ca": "Destroy near caches on shutdown",
  "2f5e1bd0": "Update default parallelism of map/cache sources and sinks to 1 (#1774)",
  "a098945a": "Move near cache managers to client context",
  "97d26755": "update NearCacheManager API to use compound key to identify near cache instance (#16098)",
  "3ca6579f": "Remove providing cache near cache metrics on member (#16127)",
  "c7ebfdcf": "Set non-null key to query cache event",
  "10d134f5": "Invalidate near client cache after execute on keys operation (#15477)",
  "7dfc5247": "Fixes handling of cache statistics (#15937)",
  "3824577f": "Include cache stats in the dynamically collected metrics (#15926)",
  "ea23bdf2": "Merge pull request #15668 from pveentjer/v4.0/performance/enable-writethrough-by-default",
  "113cd41e": "Implement the parallel leader & follower Raft log flush optimization",
  "77ff2d16": "Merge pull request #15435 from gdela/improvement/3.x/faster-transaction-log",
  "c5725a2f": "Merge pull request #15586 from gdela/improvement/3.x/faster-tx-commit",
  "08972c23": "Added the missing cachePartitionLostListenerConfigs to CacheConfig serialization and client protocol (#15608)",
  "160b7b3b": "Merge pull request #15552 from pveentjer/v4.0/performance/drop-niothreads-queue-for-writes",
  "52ad55bf": "Merge pull request #15081 from pveentjer/v4.0/performance/smart-client-default-to-3-io-threads",
  "c72a156c": "Merge pull request #15587 from pveentjer/v4.0/performance/ssl-increase-iothread-count",
  "c66ee9f8": "New implementation of EntryTaskScheduler that solves the performance issue described in #15301.",
  "71da5646": "Improve performance of TransactionLog.add() (#15111)",
  "8e691a85": "Merge pull request #15414 from gdela/improvement/4.x/faster-tx-commit",
  "57ac2b53": "fix the fast forward to the endframe logic (#15489)",
  "077793c8": "IMap.putAllAsync and performance improvement (#15463)",
  "215e4d32": "Overhaul of map/cache sinks to make use of better parallelism (#1539)",
  "5aaf2647": "Improve performance of TransactionLog.add() by avoiding LinkedList.remove() call.",
  "a377cdd2": "New implementation of EntryTaskScheduler that solves the performance issue described in #15301.",
  "51644499": "Merge pull request #15325 from pveentjer/v4.0/performance/dedicated-io-threads",
  "984ea5ed": "Regression test for job submission slowness (#1511)",
  "05ebde64": "Remove deprecated config parameters from near cache config (#15313)",
  "54d318a3": "Adds invalidation events log to client cache near cache test",
  "b3e4d70c": "Set publisher-listener-id if query-cache has already one (#15215)",
  "d3edc4c7": "Remove support of special 'setupRef' cache (#15063)",
  "c02c4c18": "Remove deprecated cache eviction configs (#15065)",
  "f089d9c3": "Merge pull request #15068 from metanet/maint/raft-snapshotting-optimization-improvement",
  "99f02711": "Improve the Raft snapshotting optimization",
  "6cb7fae2": "Merge pull request #15062 from metanet/raft-snapshotting-optimization-improvement",
  "c391a80a": "Improve the Raft snapshotting optimization",
  "c83e1748": "Merge pull request #14986 from metanet/raft-linearizable-read-optimization",
  "ebd91243": "Minor refactoring for using the new linearizable read optimization",
  "68993e79": "Implement linearizable read optimization of the Raft dissertation",
  "e1361b62": "Merge pull request #14952 from tezc/fix/3.12/shutdown-memcached",
  "8c4bc105": "Merge pull request #14951 from tezc/fix/4.0/shutdown-memcached",
  "1a998482": "Shutdown memcached client to prevent leak beyond test case",
  "0a98d6f9": "Shutdown memcached client to prevent leak beyond test case",
  "9f31b0bf": "Removes RU code paths from cache package",
  "a4d3d57f": "Ensure cache configuration is fully completed before returning (#14821)",
  "bcc34843": "Merge pull request #14846 from pveentjer/v3.12/performance/revert-writethrough",
  "d845e871": "Merge pull request #14696 from pveentjer/v3.12/performance/write-through-final",
  "1f6d7e35": "Rollback 'Fail-fast if max-idle-seconds is set below 2 seconds' (#14794)",
  "c5de981e": "Merge pull request #14779 from pveentjer/v3.12/performance/NioChannelOption-buffer-sizing-warning",
  "336bd4dd": "Fail-fast if max-idle-seconds is set below 2 seconds (#14727)",
  "5a1d950b": "Merge pull request #14755 from pveentjer/v3.12/performance/metrics-nionetworking",
  "39e9198a": "Attempt to identify text protocol and fail-fast (#14720)",
  "c93fa6ff": "Merge pull request #14687 from ahmetmircik/fix/3.12/cacheExpiryTest",
  "24e42927": "Test changes to support EE TLS Memcached fixes (#14660)",
  "dbadbf46": "Merge pull request #14627 from pveentjer/v3.12/performance/pipelining-perf-improvement",
  "c5337d17": "Merge pull request #14624 from mustafaiman/fix/near-cache-test",
  "c8334b83": "Fixes MultiMap Remove(Backup)Operation performance problem",
  "44d74571": "Introduce query cache recreate method, a query cache can recreate itself with this method",
  "dc580154": "Merge pull request #14443 from pveentjer/v3.12/performance/pipeline-final",
  "49bdf272": "Merge pull request #14437 from pveentjer/v3.12/performance/NioThread-select-timeout-configurable",
  "fc4eaa9e": "Merge pull request #14389 from pveentjer/v3.12/performance/client-responsehandling-dynamic",
  "d58f6a1a": "Fixed typo to reflect only caller's near cache is cleared after removeAll-call",
  "bf79af5b": "Fixed typo to reflect only caller's near cache is cleared after removeAll-call",
  "d381cf5a": "Merge pull request #14283 from yozank/bckprt_test_expiryPolicy_after_cache_backupPromotion",
  "b7066e00": "Merge pull request #14282 from yozank/test_expiryPolicy_after_cache_backupPromotion",
  "624f4c3a": "NioChannel fast close",
  "7e36e092": "Additional querycache tests",
  "f19f78fb": "NioChannel fast close (#14206)",
  "693dcad5": "Use one instance of Extractors for all query-cache operations",
  "1a6047bd": "Use one instance of Extractors for all query-cache operations",
  "09f23cc9": "Merge pull request #14240 from ahmetmircik/fix/3.11.1/clientcachetestfailure",
  "4e58d227": "Merge pull request #14230 from ahmetmircik/fix/3.12/clientcachetestfailure",
  "461e28f0": "Disable reconciliation on near cache test. It can cause to see unexpected invalidation request stats.",
  "14ed2da1": "Disable reconciliation on near cache test. It can cause to see unexpected invalidation request stats.",
  "58ac69e9": "Swallow exception on MemcachedClient.shutdown() & typo fix",
  "10e2abab": "Swallow exception on MemcachedClient.shutdown() & typo fix",
  "bc875907": "Merge pull request #14162 from yozank/querycache-mapattributes-backport",
  "5d6bd06d": "fixed query cache errors when using map attribute in cqc predicate",
  "72bc53d7": "fixed query cache errors when using map attribute in cqc predicate",
  "3dbd985c": "Always cache field and method getters (#14160)",
  "d2f55634": "Always cache field and method getters (#14077)",
  "1cb86f35": "remove check for future.get on client executor. It has too much performance penalty right now. Solution for that is postponed to another pr",
  "d150acef": "- Unified map&cache bouncing member tests - Sent queued expired keys on shutdown - Sent left over expired keys in queues instead of clearing them. - Removed expired key sending on commit migration since it became obsolete with this fix.",
  "644c0314": "- Unified map&cache bouncing member tests - Sent queued expired keys on shutdown - Sent left over expired keys in queues instead of clearing them. - Removed expired key sending on commit migration since it became obsolete with this fix.",
  "64e793b6": "Checked if near cache was available before access",
  "877e201e": "Allow for overrideable hard-remove behavior in cache record store",
  "9e904dd9": "- Removed keys after collection in cache and map backup cleaner operations. Because removals during iteration can cause missed entries on hd maps. - Added expiration stress test for imap - Added disposeDeferredBlocks method for icache record store",
  "d4e6fc12": "Put test to slow category",
  "b1689d8d": "- Made periodic near cache expiration task run configurable - Used parallel runners for the appropriate tests",
  "8729946f": "Merge pull request #13864 from sancar/fix/npeWhenJcacheNotInCP/maint3.x",
  "f2567eb8": "Merge pull request #13863 from sancar/fix/npeWhenJcacheNotInCP/master",
  "25ea34f6": "Refactored expiration cleaners for map and cache",
  "a805f327": "Fix NPE when jcache not in classpath",
  "0ae63554": "Fix NPE when jcache not in classpath",
  "15a030c7": "Fixed backup evictor operations that are sent upon expiration on primary - Used evictor if map has eviction configured otherwise entries are removed hardly. - Hard remove is fixed for cache backup eviction operation",
  "0ddc7c9d": "Local cache configs are recreated when client connect to cluster",
  "075b27e9": "Local cache configs are recreated when client connect to cluster",
  "fd080084": "Wait for safe state before destroying cache (#13805)",
  "bade4158": "Terminate test Hazelcast instances instead of a slow shutdown in the TestAwareInstanceFactory.",
  "11b57136": "Add WAN specific map and cache entry view to keep compatibility (#13528)",
  "5f2cd43c": "Skip server near cache for client txn request",
  "397a00a0": "Skip server near cache for client txn request",
  "0b9a0b2f": "remove direct cache signatures from Sources and Sinks",
  "11f4cb55": "Direct map/cache/list in source/sink factories",
  "ac024774": "Fix constructor cache in ClassLoaderUtil & typos (#13512)",
  "ce11380d": "Add workaround for constructor cache bug (#13679)",
  "72a312eb": "Refactored client query cache server-response handling code paths.",
  "bac587f4": "Removed looping while clearing query cache. Instead directly called clear method of backing data structure.",
  "6600d106": "Introduced reachedMaxCapacity method to quit pre-population if query cache is its evictable max capacity",
  "696bbe9e": "Increases wait time in cache expiration backup test",
  "22e8679c": "Sets cache record store expirable when a backup is put",
  "58cae254": "Revert 'Generate near cache invalidation upon expiration'",
  "ad796706": "Generate near cache invalidation upon expiration",
  "df717c4e": "Merge pull request #13516 from mustafaiman/fix/cacheexpirationtest",
  "76dfe99f": "Merge pull request #13507 from ahmetmircik/fix/3.11/cacheEventTypeValues",
  "e9c55546": "Fixed HazelcastInstanceImpl casting in cache tests",
  "f48e8d2f": "Used cached event types",
  "cd373373": "Use getOrPutSynchronized while creating repairing handler instead of getOrPutIfAbsent. Otherwise repairing handler can be created more than one times in some scenarios like node restart. This may cause unneeded removal of already near-cached entries.",
  "45b74d3b": "Use getOrPutSynchronized while creating repairing handler instead of getOrPutIfAbsent Otherwise repairing handler can be created more than one times in some scenarios like node restart. This may cause unneeded removal of already near-cached entries.",
  "f79a1926": "Increase timings to min chance of hiccup failure & moved to slow test (#13442)",
  "aa568421": "Initialize query cache config only once at construction phase",
  "0a727684": "Initialize query cache config only once at construction phase",
  "0788aabe": "Fix client cacheManager.getCache(null) behaviour",
  "3026d043": "Fix client cacheManager.getCache(null) behaviour",
  "69af0f27": "Reset Cache.cacheManager to null when Cache is closed",
  "32b7bd91": "Reset Cache.cacheManager to null when Cache is closed",
  "839cc63d": "Send end-of-sequence-event to query-cache if local promotion happened.",
  "739a0e14": "Fixes cache config propagation on a mixed 3.9 - 3.10 cluster",
  "f0197edd": "Use less resource for client near cache test",
  "73d91219": "Only increment cache eviction stats on primary record store",
  "74174018": "Only increment cache eviction stats on primary record store",
  "54ede33e": "Shutdown client instances properly in cache tests",
  "13ce5c3c": "Shutdown client instances properly in cache tests",
  "18cad5cc": "Merge pull request #12964 from ahmetmircik/fix/3.11/cacheTypeValues",
  "49cbba33": "Return same query cache instance for all getQueryCache calls",
  "546fc766": "Merge pull request #12819 from leszko/fail_fast_on_unknown_properties",
  "a2e43b15": "Return same query cache instance for all getQueryCache calls",
  "c6145b97": "Use query cache cacheId when registering a preconfigured user listener",
  "78d63071": "Use query cache cacheId when registering a preconfigured user listener",
  "5071ceb7": "Delayed resolution of factories and listener configurations for caches just like key / value types in case classes are not available at pre-join time fixes #11905",
  "9c10d200": "Retry map and cache partition destroy operations (#12686)",
  "13bed900": "Merge pull request #12724 from mdogan/nearcache-invalicadation-fix-x",
  "37330c5c": "Merge pull request #12723 from mdogan/nearcache-invalicadation-fix",
  "3821fe13": "Near-cache batch invalidation events should have sourceUuid set always",
  "5c244feb": "Near-cache batch invalidation events should have sourceUuid set always",
  "ba964949": "Merge pull request #12633 from pveentjer/v3.10/performance/response-handling-threading",
  "8daee170": "Cleanup query cache code",
  "bc399f44": "Cleanup query cache code",
  "bdd0bb5c": "Handle CLEAR_ALL and EVICT_ALL events for query cache",
  "d8aa9507": "Handle CLEAR_ALL and EVICT_ALL events for query cache",
  "4aca8d2b": "[BACKPORT] Respect index config in query caches (#12580)",
  "10800d7f": "Respect index config in query caches (#12577)",
  "265cf3aa": "Throw CacheNotExistsException when cache config does not exist (#12593)",
  "048f3284": "Do not rethrow exceptions cached in futures in ProxyRegistry.destroy()",
  "692a7679": "Populate data from client-without-near-cache",
  "4cbce334": "Publish oldValue after imap#set when map has a query cache",
  "76c36dc0": "Acquire WanReplicationService from NodeEngine while deleting cache",
  "27d0d13e": "Acquire WanReplicationService from NodeEngine while deleting cache",
  "6bc677af": "Publish oldValue after imap#set when map has a query cache",
  "d19b15ce": "Move long running parameterized tests to slow category",
  "1babe884": "Fail fast only if cluster version is >= 3.10 otherwise print a warning log for an illegitimate merge policy",
  "52ecaf15": "Drop legacy merge policy for cache",
  "fc48111c": "Merge pull request #12440 from pveentjer/v3.10/improvement/AbstractChannel-caches-remote-local-socketaddress",
  "5a8ffa04": "AbstractChannel caches local/remote socketAddress",
  "a47dbd26": "- Unify icache and imap merge task runnable codes - Remove record stores from partition containers and destroy them during dispose - Iterate over record stores to get records instead of eager copying them to heap",
  "2607510c": "Merge pull request #12393 from jerrinot/improvements/slow-op-detector-descriptor/master",
  "109c7497": "Improve operation descriptor of slow operation detector",
  "4ce38886": "Do not resolve Cache KV types while creating cache proxy",
  "c08f4e0d": "Moved client side query cache test to map impl package",
  "ea038f33": "Create query-cache with cacheId",
  "918c9f3e": "Create query-cache with cacheId",
  "dbe5943b": "Merge pull request #12227 from mmedenjak/wan-cachemerge-op-forward",
  "065fb796": "Merge pull request #12226 from mmedenjak/wan-cachemerge-op",
  "90028f11": "Merge pull request #12181 from sancar/fix/cacheConfigCreateException/maint3.x",
  "8cfea6d8": "Merge pull request #12172 from sancar/fix/cacheConfigCreateException/master",
  "8a8d054f": "Client cache config creation exception handling fixed",
  "e1611948": "Client cache config creation exception handling fixed",
  "72d61468": "Use existing near-cache for TransactionalMap, do not create a new one",
  "7895e0cf": "Merge pull request #12148 from vbekiaris/fixes/3.9.3/fix-getcacheentryrequest-test",
  "c5cdec45": "Merge pull request #12147 from vbekiaris/fixes/3.10/fix-getcacheentry-test",
  "a3f06071": "Merge pull request #12114 from vbekiaris/fixes/3.9.3/jcache-1.1",
  "ef56cca9": "Make the slow scheduled executor tests run in serial",
  "17e6ac17": "Make the slow scheduled executor tests run in serial",
  "117ddbe0": "Removing memory leak from quorum name cache. Adding quorum name cache to all quorum-aware data-structures.",
  "985f3d3b": "Fixes default cache manager tests ClientCachingProviderTest",
  "095603cc": "Use existing near-cache for TransactionalMap, do not create a new one",
  "3f48cc1f": "Merge pull request #12014 from vbekiaris/fixes/3.10/jcache-1.1",
  "4e49d3dc": "adds test entry processor for client near cache tests",
  "f6735255": "Merge pull request #12015 from emre-aydin/fwd-port-serializable-get-cache-entry-request",
  "1b5705e6": "Fix for OverlappingFileLockException with NearcachePreloader",
  "abb65a8b": "Fix for OverlappingFileLockException with NearcachePreloader",
  "d1fe06c6": "Merge pull request #11985 from emre-aydin/serializable-get-cache-entry-request",
  "d30d8fcb": "Improve map/cache journal defaults (#650)",
  "93c13e99": "Removed user defined event listeners upon query-cache destruction and fixed race in NodeQueryCacheEventService during destruction of query-cache",
  "413d99e7": "Removed user defined event listeners upon query-cache destruction and fixed race in NodeQueryCacheEventService during destruction of query-cache",
  "592d9ec8": "Merge pull request #11725 from vbekiaris/fixes/3.10/npe-cachePutAll-backup",
  "5015980b": "Merge pull request #11726 from vbekiaris/fixes/3.9.1/npe-on-cachePutAll-backup",
  "175af3bc": "Prevent division by zero for fast repeat operations. Fixes #11605.",
  "6a9e5cc4": "Merge pull request #11582 from vbekiaris/fixes/3.9/default-cache-merge-policy",
  "0cfea9b6": "Test all near cache local-update-policy settings for eventual consistency",
  "2ec40450": "Merge pull request #11560 from mmedenjak/journal-cache-config-improvements",
  "c5e1652f": "Avoid cache and map config lookup when writing to event journal",
  "0e2de760": "Merge pull request #11513 from vbekiaris/fixes/3.9/cache-config-class-resolution",
  "9308887d": "Introduces new wire format for transferring cache configs in pre-join op",
  "bb9e8866": "ClientStatisticsTest test cases may fail on cluster reconnect with default connection attempt limit when instance shutdown/startup is slow (#11516)",
  "e9c41dea": "Fixed place of contains key check from near cache",
  "e270bc40": "Invalidated near cache after txn map operations",
  "5b6dc724": "Merge pull request #11315 from mmedenjak/cache-wan-publisher-init-race",
  "456a6366": "Minor cache improvements",
  "5377111e": "Invalidated near cache after txn map operations",
  "f89e61e1": "Merge pull request #11468 from vbekiaris/fixes/3.9/cache-already-exists-fix-test",
  "0b4c4590": "add a workaround to the tests for cache creation issue",
  "e5a34391": "Refactored query cache leak tests",
  "0cf8d4e4": "Merge pull request #11390 from vbekiaris/fixes/3.9/inject-dependencies-in-cache-resources",
  "a18d0e13": "Merge pull request #11399 from vbekiaris/fixes/3.9/revert-mutexes-in-cache-lifecycle",
  "aea66ce5": "Initialize NodeAware/SpringAware cache listeners with managedContext",
  "e7d55070": "Initialize NodeAware/SpringAware cache resources with managedContext",
  "19182d02": "Merge pull request #11366 from mmedenjak/cache-remove-all-namespaces",
  "1fb45b93": "Make cache remove all operations namespace aware",
  "501957b5": "Merge pull request #11104 from sancar/fast_failure_detction/client",
  "b38a1690": "Syncronized query cache create and destroy methods",
  "998e9e3b": "Merge pull request #11356 from ahmetmircik/fix/3.8.6/cacheNameToCacheUuid",
  "3b4d4449": "Converted cacheName --> cacheId and userGivenCacheName --> cacheName",
  "53d0fc28": "Syncronized query cache create and destroy methods",
  "4acda633": "Handled near cache compatibility for versions smaller than 3.8",
  "c164bd9a": "Handled near cache compatibility for versions smaller than 3.8",
  "ab402596": "Improvement for fast failure detection",
  "9128e286": "Empty address check for fail fast in client config",
  "ee87b9ee": "Empty address check for fail fast in client config",
  "d780f4bb": "Merge pull request #11250 from vbekiaris/fixes/3.9/refactor-cacheService-destroySegments",
  "309ff0ea": "Merge pull request #11222 from ahmetmircik/fix/3.9/cacheNameToCacheUuid",
  "0e6b91cb": "Merge pull request #11121 from jerrinot/fixes/discovery-spi-failfast/master",
  "1b2a9a2d": "Converted cacheName to cacheId and userGivenCacheName to cacheName",
  "b7c7cf58": "Merge pull request #11303 from mdogan/jcache-postjoin",
  "ca509b11": "Merge pull request #11297 from jerrinot/fixes/jcache-ep-exists-state-machine/maintenance-3.x",
  "f887e064": "Merge pull request #11268 from jerrinot/fixes/jcache-ep-exists-state-machine/master",
  "a659332f": "Merge pull request #11073 from vbekiaris/fixes/3.9/fail-fast-cache-config",
  "f0b5c20e": "Fail fast when cache in memory format incompatible with eviction config",
  "e4b8f519": "Merge pull request #11076 from vbekiaris/fixes/3.9/do-not-replace-cachemanager",
  "6efc2514": "Merge pull request #11219 from pveentjer/v3.9/fix/slowoperationplugin-unit-error",
  "bf4cdfd8": "Reverted query cache fix for map destroy",
  "852e9f2d": "Merge pull request #11172 from vbekiaris/fixes/3.8.5/proper-cache-lifecycle",
  "a3314867": "Add forgotten public address check from cache (#11151)",
  "432308fd": "Allow parameterized values for map cache-deserialized-values config",
  "581913f1": "Closeable cache entry listeners are properly closed on deregistration",
  "daa082f6": "Merge pull request #11135 from vbekiaris/fixes/3.9/proper-cache-destroy-lifecycle",
  "451b2e81": "Add forgotten public address check from cache",
  "f2a831d9": "Closeable cache entry listeners are properly closed on deregistration",
  "37f8a136": "Merge pull request #11165 from vbekiaris/fixes/3.8.5/cache-destroy-op",
  "fcd8d2d9": "Merge pull request #11138 from vbekiaris/fixes/3.9/cache-destroy-op",
  "5038e48d": "Merge pull request #11154 from ahmetmircik/fix/3.8.5/qcacheLeak",
  "4560e60d": "Made ClientStatisticsTest more tolerant for too fast collections",
  "f8743dbc": "Cleared query caches on map destroy",
  "a65cac7c": "Merge pull request #11149 from ahmetmircik/fix/3.9/qcacheLeak",
  "da10f620": "Cleared query caches on map destroy",
  "951ffdc2": "Wildcard usage for query cache configuration at the client does not work as expected (#11109)",
  "80b48eae": "Merge pull request #10786 from mmedenjak/wan-cache-putAll",
  "3927e71f": "Changed test runner to serial and put test to slow category",
  "6c4e3add": "Changed test runner to serial and put test to slow category",
  "e6667194": "Merge pull request #11053 from vbekiaris/fixes/3.9/client-side-getorcreate-jcache",
  "abc5a79b": "Remove the unneded duplicate interface in legacy cache config classes.",
  "fea40322": "Merge pull request #11012 from vbekiaris/fixes/3.9/dyn-cache-config",
  "20c8c399": "Ported metadagenerator destroy fix from imap to icache to prevent memory leak on icache destroy",
  "49657817": "Fixes and additional tests for dynamic cache config",
  "d9788ef7": "Ported metadagenerator destroy fix from imap to icache to prevent memory leak on icache destroy",
  "d50d59c8": "Removed near cache clear on listener registrations, reconciliation task will handle any missing invalidation cases",
  "231fdfb5": "Ported metadagenerator destroy fix from imap to icache to prevent memory leak on icache destroy",
  "7f2850c0": "Unified near cache config validation",
  "6ab86c73": "introduce jet cache manager",
  "f271b5a5": "Removed map sequence generator even there is no near cache",
  "d01ec035": "Fixed containsKey when it is called for a null cached key",
  "e2295818": "Fixed containsKey when it is called for a null cached key",
  "bbc1af04": "Prevented premature removal of near cached entries",
  "3915b3c2": "Prevented premature removal of near cached entries",
  "7812e4cf": "Merge pull request #10903 from jerrinot/fixes/do-not-cache-static-build-version/master",
  "d0b7dc0a": "Do not cache BuildInfo / Version in static fields",
  "b31ce48d": "Removed miss increase on null cached keys",
  "a46d4140": "Removed miss increase on null cached keys",
  "53d4bd32": "Add map and cache event journal",
  "56b89110": "Increased timeout of slow Near Cache preloader tests to 10 minutes",
  "d953a5a2": "Fail fast when adding non-serializable processor supplier (#463)",
  "63b98931": "Merge pull request #10712 from pveentjer/v3.9/performance/io-balancing-bytebased",
  "009bad09": "Changed parameter order of NearCachedClientCacheProxy.cacheOrInvalidate()",
  "68abf9ca": "Merge pull request #10697 from pveentjer/v3.9/performance/partition-thread-idle-strategy",
  "9f09ba4f": "localMemberUuid should not be cached since it can change after split-brain merge",
  "9c9c2c5c": "Convert cache service to FragmentedMigrationAwareService",
  "b5897b22": "Fixed some FindBugs warnings in the cache tests",
  "84d4ab5c": "Merge pull request #10516 from vbekiaris/fixes/3.9/icache-permissions",
  "baa94894": "Merge pull request #10504 from vbekiaris/fixes/3.8.2/icache-permissions",
  "84b48dcd": "Merge pull request #10280 from pveentjer/v3.8.2/performance-client-tobytearray-for-calculcatedaasize",
  "be57ef38": "Merge pull request #10497 from pveentjer/v3.9/performance/socketchannelwrapperfactory-add-directbuffer-parameter",
  "2ed79150": "Fixes query performance degredation for native - backport to 3.8.x",
  "43ed3723": "Merge pull request #10360 from pveentjer/v3.9/performance/io-balancing-improvements",
  "a6cc89e0": "Merge pull request #10366 from pveentjer/v3.9/performance/nonblockingsocketwriter-currentframe-not-volatile",
  "46fca481": "Merge pull request #10333 from jerrinot/improvements/near-cache-uuid-generator/master",
  "d6296417": "Cleanup of client cache related proxy classes",
  "337acc57": "Merge pull request #10340 from pveentjer/v3.9/performance/default-clientbuffer-size-increase-128kb",
  "d7691726": "Merge pull request #10344 from pveentjer/v3.9/performance/default-member-socketbuffersize-increase-128kb",
  "0055ae7b": "Merge pull request #10350 from pveentjer/v3.9/performance/abstractreadhandler-minor-unregisterOp-optimization",
  "458a7bc9": "Minor AbstractHandler.unregisterOp optimization",
  "cfc1bcfd": "Merge pull request #10318 from pveentjer/v3.9/performance/outbound-normalresponse-optimizations",
  "af8b7c00": "Invalidated near cache in finally block",
  "c687fac6": "NormalResponse optimizations",
  "b333274a": "Merge pull request #10317 from pveentjer/v3.9/performance/outbound-response-optimizations",
  "c008bf21": "Merge pull request #10269 from pveentjer/v3.9/performance/response-thread-skip-deserialize",
  "0ac05be5": "Merge pull request #10311 from jerrinot/experiments/log-on-slow-logging/master",
  "2a880f79": "Experiment: DelegatingTestLogger to log slow logging",
  "a7f03f19": "Merge pull request #10267 from pveentjer/v3.9/performance/operationrunner-contented-counter",
  "3c404836": "Merge pull request #10284 from pveentjer/v3.9/performance/heapdata-write-data",
  "d96fd2d8": "Merge pull request #10279 from pveentjer/v3.9/performance/client-tobytearray-for-calculatedatasize",
  "c5b57e30": "Merge pull request #10275 from pveentjer/v3.9/cleanup/tcp-selector-optimization-logging-noise",
  "4e184a37": "Selector optimization logging noise fix",
  "f40dda72": "Merge pull request #10258 from pveentjer/v3.9/performance/optimize-selector-by-default",
  "2787357b": "Merge pull request #10148 from pveentjer/3.9/performance/io-response-configurable-backoff",
  "c1d0c4ee": "Simple cleanup of client cache related proxy classes",
  "5d25c340": "added jet-cache-manager to conceal cache-api",
  "0299a2e3": "conceal cache-api with inner static class",
  "7d8e29cb": "Returned values from near cache on getAsync call",
  "81660d50": "Merge pull request #10173 from vbekiaris/fixes/3.9/nearcached-jcache-statistics-doublecounted",
  "5fcecafa": "Cache.getAsync on a near-cached client cache should count once in statistics",
  "0c5004f0": "removed Cache.Entry serializer, added a wrapper for cache-reader",
  "6966d293": "Shared same query-cache-context object by all query caches",
  "37d56831": "Shared same query-cache-context object by all query caches",
  "ed06c07b": "Combined Map/Cache read processors to ReadWithPartitionIteratorP, introduced WriteBufferedP for map/cache/list writers",
  "ccd594be": "Added static imports in client cache related classes",
  "6e75e2a7": "Improved some variable names in client cache proxies",
  "87324491": "Used separate proxy for near cached jcache",
  "0b75675b": "added GetCacheEntryRequest for MC cache browser",
  "506ea8be": "Merge pull request #10093 from vbekiaris/fixes/3.8.1/jcache-hz-instance",
  "afa75d63": "Merge pull request #9973 from vbekiaris/fixes/3.9/cachemanager-hz-instance",
  "bcf8bd40": "Allow multiple client near-cache configurations",
  "95228748": "OverloadedConnectionsPluginTest moved to a slow test category",
  "bdd4f59c": "SlowOperationDetectorBasicTest moved to the slow test category",
  "c5d82f2e": "Merge pull request #9942 from mdogan/cache-split-brain-x",
  "c61842e1": "Merge pull request #9941 from mdogan/cache-split-brain",
  "01ebbde6": "Merge pull request #9989 from vbekiaris/fixes/3.9/throw-exception-client-cache-local-entries",
  "986f4c28": "Fail fast when near-cache configuration for clients is invalid",
  "e05039b3": "Decreased max cache size in near cache test",
  "d573e716": "Decreased max cache size in near cache test",
  "3a2d5a53": "fix jcache jar problem after #9959 (#9974)",
  "6f339402": "added GetCacheEntryRequest for MC cache browser (#9959)",
  "933d080e": "Merge pull request #9955 from ahmetmircik/fix/3.8.1/spymemcachedVersion",
  "217921db": "Merge pull request #9954 from ahmetmircik/fix/3.9/spymemcachedVersion",
  "e7eadf91": "Fix attempt for ConcurrentModificationException in MemcacheTest.testReplace",
  "57b714fd": "Fix attempt for ConcurrentModificationException in MemcacheTest.testReplace",
  "bd36fd65": "Put value to near cache if there is no exception from remote call",
  "cda123f8": "Put value to near cache if there is no exception from remote call",
  "48ca47a0": "Thrown IllegalArgumentException when NATIVE storage type is used for a near cache without configuring native memory",
  "64f00732": "Merge pull request #9857 from ahmetmircik/fix/3.8/jcachePortStaleReadTest",
  "16b06b88": "Added jcache port of near cache stale read test",
  "36179d4f": "Don't cache null values in jcache near cache",
  "3e923c74": "Set cache-local-entries to true, otherwise near cache is not populated",
  "7160a725": "Added near cache serialization count tests",
  "0a00c1a6": "Fixed issues related with near cache local invalidations: - Removed stale read probability during near cache updates. - Removed `KeyStateMarker` and introduced record states. A record can have 2 main states now RESERVED, READ_PERMITTED. This new approach will help to utilize near cache more effectively compared to existing approach. Because in existing approach, only one thread can operate on a partition, if other threads want to put some other keys belonging to that partition, they can't do it because partition is already locked by first thread. - fixes https://github.com/hazelcast/hazelcast/issues/9403 - Implemented `computeIfPresent` for `IConcurrentMap` and introduced `IBiFunction`",
  "3c9ef003": "Merge pull request #9716 from vbekiaris/fixes/3.8/nearCacheConfig-cacheLocalEntries",
  "82e0523c": "Relax near cache client-side config validation",
  "c4a812f4": "Merge pull request #9708 from jerrinot/fixes/cache-executor-service-spurious-wake-up/master",
  "ffa9efd3": "Merge pull request #9673 from mmedenjak/slow-test-partition-loss",
  "81054066": "Merge pull request #9521 from mmedenjak/near-cache-lite-member-test-fix",
  "12f7ebb4": "Increased code coverage of MemcacheUtils",
  "eed85108": "Merge pull request #9656 from jerrinot/fixes/memcache-bulkget/maintenance-3.x",
  "5a5dcf21": "Memcache: BulkGet implemented as a single command",
  "a43f8ee8": "Merge pull request #9642 from jerrinot/fixes/memcache-bulkget/master",
  "49248457": "Increase performance of assertContains() methods in HazelcastTestSupport",
  "f87f2b59": "Memcache: BulkGet implemented as a single command",
  "74312fe1": "Ignored MemcacheTest.testBulkSetGet_withManyKeys() due to failures",
  "730935ff": "Improved query cache accumulators",
  "208b683f": "Cleanup of query cache related eviction tests.",
  "321433be": "Improved asserts in query cache eviction tests.",
  "17e7370d": "Fix near cache lite member test",
  "078c7e99": "Merge pull request #9463 from vbekiaris/fixes/3.8/jcache-synchronized-cacheresources",
  "7175b804": "Small cleanup of MemcacheTest.",
  "0ec7a854": "Merge pull request #9456 from jerrinot/fixes/jcache-loader-writer-factory-not-on-client/master",
  "b2d593a9": "Rename throwable to cachedExceptionResult",
  "b031f6ef": "Added `batchOrderKey` to distribute invalidation processing among workers more granularly. Detailed explanation: Members are sending invalidations to clients. Clients'-striped-executor uses `batchOrderKey` to find a worker to process batch invalidations. By using `batchOrderKey` we are putting all invalidations coming from the same member into the same workers' queue. So if there is more than one member all members will have their own worker to process invalidations. This provides more granular processing compared to old approach that we were making use of `mapName` to find workers and same worker was processing all batch-invalidations from all members for the same map/cache.",
  "1b0070f6": "Use more granular mutexes when creating set of closeable cache resources",
  "9c46cb59": "Merge pull request #9448 from vbekiaris/fixes/3.7/npe-when-cacheconfig-null",
  "1d32f0be": "Merge pull request #9447 from vbekiaris/fixes/3.8/npe-when-cacheconfig-null",
  "9254ca7d": "Moved invalidations to internal near cache package and made some cleanup",
  "cdf9ba66": "Fix potential NPE when client cache manager gets cache config not found on member",
  "221dd80a": "Fix potential NPE when client cache manager gets cache config not found on member",
  "9b20b9f6": "Fixed keyStateMarker problems - Unmarked marked keys after getAll - Unmarked marked keys in the event of any exception - Prevented key marking when local update policy is not cacheOnUpdate for icache#putAll - Renamed keyStateMarker interface methods to make it more readable - Added stress tests for imap&jcache",
  "68b6547a": "Used same implementation for jcache and imap invalidators and removed code duplication",
  "00cb4cd5": "Removing fast closed connection in auth response",
  "9f3e4501": "Merge pull request #9414 from mdogan/cache-dataloss",
  "7001ec8c": "Merge pull request #9413 from ahmetmircik/fix/3.8/cacheRepOpRegression",
  "2ee618a8": "Merge pull request #9396 from vbekiaris/fixes/3.8/continuous-query-cache",
  "0cad4d65": "Fixed keyStateMarker problems - Unmarked marked keys after getAll - Unmarked marked keys in the event of any exception - Added stress tests for imap&jcache",
  "e253ba2e": "Merge pull request #9395 from metanet/fix/maint/cache-replication-clear",
  "02928f13": "Merge pull request #9394 from metanet/fix/cache-replication-clear",
  "c2c14392": "Fix test's near cache config. Fix checkstyle issues",
  "8a6bf2d2": "Client-side continuous query cache",
  "47c969ae": "Clear local records before cache replication data is applied to local",
  "a1490f0f": "Clear local records before cache replication data is applied to local data",
  "2e2f1f5f": "updates on listeners for performance related to https://github.com/hazelcast/hazelcast/pull/6475",
  "40c3b5a0": "continous query cache client protocol implementation.",
  "0b335a94": "continuous query cache implementation initial commit",
  "aff62af3": "Noted near cache clearing issue after calling removeAll with predicate",
  "55ce86bf": "Merge pull request #9338 from ahmetmircik/fix/3.8/eventually-consistent-near-cache2",
  "2b18f61b": "Added client protocol compatibility tests for eventually consistent near cache implementation",
  "a90f5653": "Introduced eventual consistency for member/client maps and client caches",
  "d070f125": "Added common classes needed for near cache eventual consistency",
  "f5eafdf6": "Merge pull request #9763 from ahmetmircik/fix/3.8/cacheOnUpdate",
  "ef1f88c8": "update word count tests to include fast aggregations",
  "4d91ea78": "Remove cached call ID from AsyncOperation",
  "524d162c": "Porting all in-built aggregators from map-reduce to fast-aggregations",
  "5d1dc3c0": "Moved near-cache tests to internal test package",
  "21a91a6a": "Moved all near-cache related classes to internal package",
  "762c7b1d": "cache partition id in case outbox is full",
  "45334bd3": "Merge pull request #9119 from pveentjer/performance/3.8/diagnostics-mapstore",
  "46171a96": "Findbugs fix for : Load of known null value in com.hazelcast.client.impl.protocol.task.cache.AbstractCacheMessageTask.serializeCacheConfig(Object) [com.hazelcast.client.impl.protocol.task.cache.AbstractCacheMessageTask] At AbstractCacheMessageTask.java:[line 79]",
  "ee7ffde1": "Merge pull request #9126 from pveentjer/performance/3.8/partition-predicate",
  "7c279b94": "Merge pull request #9113 from vbekiaris/rolling/3.8/cache-ds-to-ids",
  "14e0824f": "The PR https://github.com/hazelcast/hazelcast/pull/8782 made the enterprise tests fail. The memory manager should not be accessed after it is closed. Since when using the executor for delivering the SHUTTING_DOWN event to AbstractHazelcastCacheManager lifecycle listener, it is possible that the listener is called after the memory manager destruction. We also realized that there is no need for cache manager close while the client is shutting down. Hence, the solution is to remove cachemanager close for client but just leave it for the server side (and server side does not use executor for lifecycle event deliveries it just works fine). (#9104)",
  "fee26c97": "Merge pull request #9089 from mdogan/cache-shutdown-clear-x",
  "f4210674": "Merge pull request #9088 from mdogan/cache-shutdown-clear",
  "a4c05605": "Moved cache configuration tests to correct package.",
  "dd331fe6": "Deprecated <cache-local-entries/> in client config, since it has no effect on clients",
  "1964ddd3": "Small cleanup of Spring cache related tests",
  "b94c2792": "Added near-cache clear invalidation",
  "6d2f31db": "Small cleanup of client cache related classes.",
  "6749a1be": "Merge pull request #8955 from jerrinot/fixes/jcache-cache-not-found/maintanance-3.x",
  "d980349a": "Logged potential near-cache configuration mismatch among members as finest",
  "f47fe94d": "Merge pull request #8916 from jerrinot/fixes/jcache-cache-not-found/master",
  "1527306f": "Makes member near cache invalidations via events as in client near cache invalidations",
  "d638d25b": "Merge pull request #8631 from LoneRifle/memcacheentry-getkey",
  "e109d028": "Ignore very slow tests of spill-to-disk (#140)",
  "36ca305d": "Merge pull request #8807 from vbekiaris/fixes/master/jcache-nearche-invalidationevents",
  "1d7b4be0": "Restores JCache near cache invalidation events behavior",
  "3e59c9c3": "Introduces test to verify invalidation events are received or not, as proper, on cache operations.",
  "47d4f123": "Merge pull request #8802 from vbekiaris/fixes/maintenance-3.x/jcache-nearcache-invalidationEvents-tests",
  "35a4ee2a": "Restores JCache near cache invalidation events behavior",
  "83b01d9d": "Introduces test to verify invalidation events are received or not, as proper, on cache operations.",
  "d7be8279": "Added test to verify that near cache invalidations work for ICache.loadAll as expected. (#8739)",
  "652c6a2b": "Added test to verify that near cache invalidations work for ICache.loadAll as expected. (#8737)",
  "d9972dc6": "Makes imap#clear and imap#evictAll to send only one clear event to clients near-cache-invalidation-listener",
  "ace97758": "Makes imap#clear and imap#evictAll to send only one clear event to clients near-cache-invalidation-listener",
  "cba9e693": "Fix for decreasing the cache clear callbacks for the client for a single clear request. Current implementation can cause up to partition count callbacks for a single clear request. Added code for generating only one clear cache invalidation event when cache.clear is called. New tests are added to test this behaviour. (#8649) (#8703)",
  "da4dee8e": "Fix for decreasing the cache clear callbacks for the client for a single clear request. Current implementation can cause up to partition count callbacks for a single clear request. Added code for generating only one clear cache invalidation event when cache.clear is called. New tests are added to test this behaviour. (#8649)",
  "d8259162": "Clears member side local near cache after imap#clear call",
  "5901f34c": "Clears member side local near cache after imap#clear call",
  "eb58b765": "Merge pull request #8687 from mdogan/rm-query-index-performance-test-x",
  "e940a667": "Merge pull request #8688 from mdogan/rm-query-index-performance-test",
  "793f0f85": "Implement MemcacheEntry.getKey",
  "68ac54c0": "Merge pull request #8629 from vbekiaris/fixes/master/move-queryIndexMigrationTest-slowTest",
  "4be39516": "Improve performance of convertions to java.sql classes",
  "3bec931c": "Merge pull request #8479 from vbekiaris/fixes/coverage/hz-instance-icache",
  "7d756ad9": "Disables invalidations for testGetAsyncPopulatesNearCache, no need invalidations for this test because it only tries to validate whether or not near-cache is populated by getAsync",
  "b41c3804": "Disables invalidations in testGetAll, no need invalidations for this test because it only tries to validate whether or not near-cache is populated by getAll",
  "ddc28319": "Merge pull request #8456 from serkan-ozal/refactor/master/abstract-cache-operation-cleanup",
  "e2edfdcf": "Use `ICacheRecordStore` interface instead of implementation class (`CacheRecordStore`) for cache record store property in the `AbstractCacheOperation`",
  "3060d618": "Prevents indefinite read of stale value from near-cache",
  "a92c3e5e": "Merge pull request #8441 from serkan-ozal/enhancement/master/jcache-iterator-code-coverage-improvements",
  "eca7cec5": "Merge pull request #8434 from vbekiaris/fixes/master/get-cache-indirectly",
  "f85d7ef4": "Merge pull request #8433 from serkan-ozal/enhancement/master/jcache-custom-eviction-policy-code-coverage-improvements",
  "3f0821bc": "Merge pull request #7152 from snicoll/spring-sync-cache",
  "e1f5d9ad": "Forward port: Class cache introduced by @jerrinot in 3.4.8",
  "a066948a": "Merge pull request #8376 from serkan-ozal/enhancement/master/hz-instance-jcache-integration-code-coverage-improvements",
  "5dc34f5d": "Merge pull request #8347 from serkan-ozal/enhancement/master/jcache-enhancements-code-coverage-improvements",
  "98f1b41d": "added cache dependency due to mockito problem",
  "b688d4f9": "Disables invalidations test testGetAll, no need invalidations because test only tries to validate whether or not near-cache is populated by getAll",
  "4d4af69f": "Fail-fast on null condition name",
  "2b6f1845": "Fail-fast @RequireAssertEnabled (#8251)",
  "db714a81": "Cache stats might not be ready even if cache config exists, fixes https://github.com/hazelcast/management-center/issues/289",
  "81d1b9ca": "Set closed flag after destroying caches while destroying cache manager",
  "e99c92e9": "Set closed flag after destroying caches while destroying cache manager",
  "38f9980c": "Interpret duration time `0` as eternal for cache entry expiration",
  "65abbb6b": "Interpret duration time `0` as eternal for cache entry expiration",
  "225747bf": "Merge pull request #8173 from pveentjer/performance/3.x/backup-remove-caller-uuid",
  "c8b073ee": "Remove destroyed cache proxy from owner `CacheManager` on destroy",
  "0deb3aed": "Remove destroyed cache proxy from owner `CacheManager` on destroy",
  "121a2c82": "Merge pull request #8163 from pveentjer/performance/3.x/backup-operation-reduce-size",
  "e72b3c75": "Merge pull request #8161 from pveentjer/performance/3.x/map-readonly-operations-size-reduction",
  "948f165a": "Be sure that cache config is exist also on other nodes by sending cache config via `CacheCreateConfigOperation` to them",
  "d7f3e130": "Query performance test",
  "fa16c0cc": "Query performance test",
  "2150e2ad": "Split migration test parameters for quick and slow categories",
  "127e4be1": "JMH performance test",
  "26fde86f": "Merge pull request #8009 from pveentjer/performance/3.x/fastqueue-responsethread-partititionthread",
  "535d9cbf": "Merge pull request #8096 from pveentjer/cleanup/3.x/renamed-performancemonitor-to-diagnostics",
  "5dfaa2bb": "Renamed the performancemonitor to diagnostics",
  "3bbe757a": "Merge pull request #8010 from pveentjer/performance/3.x/client-response-handling-not-async",
  "68341c3c": "Merge pull request #7990 from serkan-ozal/feature/master/hazelcast-instnace-jcache-integration",
  "0b1ff05c": "Merge pull request #7939 from pveentjer/performance/3.x/nonblocking-invocationfutures",
  "0b239498": "Merge pull request #7981 from pveentjer/feature/3.x/performance-log-configurable-path",
  "c4ce1813": "Merge pull request #7869 from sancar/fix/nullPointer_clientnearcache/maint3.x",
  "007dea47": "Merge pull request #7870 from sancar/fix/nullPointer_clientnearcache/master",
  "91c50121": "fixes null pointer exception in client near cache",
  "e6a9ae79": "fixes null pointer exception in client near cache",
  "ceb66f26": "slow test should be run on PR runner and ignore hanging test",
  "3ad9c0c4": "Merge pull request #7837 from pveentjer/fix/3.x/performance-monitor-wrong-property",
  "3a2f8fc4": "Merge pull request #7834 from pveentjer/fix/3.x/performancemonitor-scheduler-task-catchandlog-exception",
  "f9a0c2ef": "Merge pull request #7790 from pveentjer/feature/3.x/slow-invocations-plugin",
  "886a9069": "Merge pull request #7782 from pveentjer/fix/3.x/performance-monitoring-name-inconsistency-fix",
  "ab92b4f8": "Fixes inconsistency in naming of performance monitor property",
  "9b30a93e": "Merge pull request #7773 from pveentjer/fix/3.x/jcache-create-logging-noise",
  "b823632e": "Fixes invalidation message sending problem to client near-caches upon member side putAll/loadAll call",
  "a9426af6": "Fixes invalidation message sending problem to client near-caches upon member side putAll/loadAll call",
  "2a2bc33f": "Merge pull request #7713 from pveentjer/cleanup/3.x/operationservice-remove-deprecated-dump-performance-metrics",
  "d7540c96": "Merge pull request #5975 from pveentjer/performance/3.x/reduce-litter-selection-set",
  "2cfa6cf9": "Merge pull request #7679 from pveentjer/performance/3.x/removed-instanceofchecks-socketwriters",
  "d942cab7": "Async puts in cache reflects to near-cache immediately when its `future.get()` returns or when its scheduled task executed eventually as it is currently",
  "c80fe6d5": "Introducing ability to disable cache invalidation events for per entry. However full-flush invalidation events are still enabled",
  "6070ce29": "Merge pull request #7624 from serkan-ozal/enhancement/master/cache-configurable-fetchSize-for-iterator",
  "b7183d85": "Merge pull request #7532 from pveentjer/performance/3.x/direct-buffers",
  "0f549745": "Reduced reliance performance plugins on NodeEngineImpl",
  "21c09825": "Merge pull request #7509 from pveentjer/cleanup/3.x/performance-log-should-not-be-dependent-on-nodeengineimpl",
  "9dce54d2": "Completed the content for <cache> element.",
  "ff6c4c49": "Added content for <near-cache> element.",
  "2c34b3f1": "Merge pull request #7373 from pveentjer/performance/3.x/serialization-bufferpool-threadlocal-2",
  "4dc664a6": "Merge pull request #7426 from pveentjer/performance/3.x/method-probe-varargs-litter",
  "b83a45b0": "Don't count cache records as entry count if they are backup",
  "2226f68f": "Don't count cache records as entry count if they are backup",
  "4bfc41ee": "Merge pull request #6900 from serkan-ozal/enhancement/master/simplified-cache-entry-count-resolver",
  "83121360": "`CacheEntryCountResolver` and its usage by cache stats are simplified",
  "99d04cb7": "Tests for near-cache, MapProxyImpl.setAsyncInternal",
  "fc6ab479": "Merge pull request #7333 from serkan-ozal/fix/3.x/cache-dont-send-invalidation-message-when-backup",
  "99f718ea": "Don't send cache invalidation events if the node is backup for that partition",
  "aac99e05": "Merge pull request #7326 from serkan-ozal/enhancement/master/cache-invalidation-queue-tests",
  "a291b4c4": "Calculate owned entry count to be used as expected near-cache hit count by checking partition ownership in `NearCacheTest::testGetAll`",
  "95160be4": "Merge pull request #7301 from mdogan/cache-expiry-fix",
  "d833421e": "Fix cache record creation with expiry time",
  "d3a5452f": "Introducing composite max-size checker for cache",
  "c34a3668": "Return cache config as response even though found and created cache config could not put into cache configs inside cache service in case of parallel access",
  "24afd70a": "Return cache config as response even though found and created cache config could not put into cache configs inside cache service in case of parallel access",
  "9fd7a063": "changed assertion timeout to default(120) seconds since near cache batch invalidation happens every 10 seconds, it could happen that triggering the batch invalidation + execution on the remote machine could take more than 10 seconds",
  "de1c5f45": "Distinguish map/cache service reset, shutdown and single map/cache destroy",
  "d6f7b44f": "`NoSuchElementException` is expected while iterating over cache entries when there is a worker thread that removes random entries.",
  "2c42c9b8": "`NoSuchElementException` is expected while iterating over cache entries when there is a worker thread that removes random entries.",
  "aaa98a15": "Merge pull request #7127 from serkan-ozal/fix/master/clientcacheproxy-loadAll-fix",
  "16ec6173": "At load-all operation, exception should not be wrapped and underlying exception should be propagated. Also on cache close, on-going load-all calls should be waited to finish.",
  "c990d22e": "Merge pull request #7118 from ahmetmircik/fix/3.6/nearcacheInvalidatorTestCoverage",
  "ed13a37e": "Merge pull request #7111 from cangencer/docs/near-cache-config",
  "62475200": "Merge pull request #7110 from cangencer/fixes/3.m/near-cache-miss",
  "c53ca9ea": "Merge pull request #7097 from cangencer/fixes/near-cache-miss",
  "7349fa51": "NearCache heap cost calculation is wrong when the cache gets concurrent misses",
  "ec04fb6e": "Merge pull request #7086 from cangencer/fixes/near-cache-test",
  "7494ee28": "NearCache heap cost calculation is wrong when the cache gets concurrent misses",
  "bafa48e2": "Adds missing near-cache eviction config part",
  "23b16ac2": "Increase timeout of the test to 30 mins since the CI environment has big variations on the performance, sometimes test takes 6 mins sometimes it takes more than 20 mins.",
  "5f5a6358": "Merge pull request #7045 from pveentjer/performance/3.x/serialization-performance-regression-fix",
  "2be608b2": "For cache/map split brain tests, partitions should be assigned at the beginning and we should ensure that merging is not applied before mutations are done on cache/map data structure",
  "237ded5a": "Resolves performance regression with Externalizable",
  "bb14b9ec": "Merge pull request #7034 from mdogan/hr-cache",
  "157b940d": "Added near-cache invalidation checks",
  "16702ec5": "Merge pull request #6984 from serkan-ozal/atomicity-between-update-and-writer-in-cache",
  "d8294f73": "Merge pull request #6992 from mdogan/cache-putall-backup",
  "48482bf9": "Atomicity supported between cache record store and `CacheWriter` while updating existing entry",
  "73644e24": "Refactored client-map-near-cache tests",
  "4338d83d": "Fixed leaking local map stats, near cache invalidation queues and map containers",
  "7557be13": "`LoadAllTask` for client and server side cache proxies also handles `Throwable`, not just `Exception`",
  "d32b58c8": "Merge pull request #6947 from mdogan/cache-hr-cleanup",
  "fb51c3d5": "Remove unused transferRecordsFrom() method from cache record store",
  "d1b29572": "Merge pull request #6935 from serkan-ozal/fix/master/atomicity-between-add-and-writer-in-cache",
  "b4380664": "Atomicity supported between cache record store and `CacheWriter` while adding new entry",
  "2ff6dc4e": "Merge pull request #6737 from jerrinot/fix/cache-entry-race-lockfree/master",
  "a8b8ad71": "Fixed possible race between slow operation detection and assert of detected operations in SlowOperationDetector tests.",
  "c7ebd711": "Added `isNearCacheAndInvalidationEnabled` check before sending invalidation operations to remote near-caches.",
  "bc56bed9": "Check backup record in `put`, `putIfAbsent`, `replace` and `getAndReplace` operations if it is null or not. Because it may be null due to destroying cache record store by `CacheDestroyOperation` outside of partition thread.",
  "30bb070b": "Check backup record in `put`, `putIfAbsent`, `replace` and `getAndReplace` operations if it is null or not. Because it may be null due to destroying cache record store by `CacheDestroyOperation` outside of partition thread.",
  "04b041fe": "Fixed broken test due to the introduction of near-cache batch invalidation.",
  "83e81bef": "Used faster String.indexOf(char) in ExtractorHelper (SonarQube issue).",
  "a3449916": "Introduced near-cache batch invalidation",
  "ae449f8d": "Check value if it is null or not while iterating over cache",
  "4d7ea4f7": "Used faster String.indexOf(char) in ExtractorHelper (SonarQube issue).",
  "c6914663": "Flush invalidation events for clearing near-caches of caches while node is shutdown (in `SHUTTING_DOWN` state)",
  "f352f00f": "Adds fail fast for Discovery SPI when enabled with TCP/IP discovery. Adds a property to enable use of public IP addresses in DiscoveryJoiner.",
  "32090148": "Merge pull request #6757 from serkan-ozal/enhancement/master/jcache-sync-putifabsent-to-nearcache",
  "24471045": "Added method to register a near cache invalidation listener to the NearCachedClientMapProxy. Used the listener in client near cache tests to get rid of race conditions.",
  "fe1a339b": "For JCache, put to near-cache as sync if putIfAbsent is sync, put as async if putIfAbsent is async",
  "bebcf8c3": "Merge pull request #6749 from serkan-ozal/enhancement/master/jcache-sync-put-to-nearcache",
  "f06442eb": "adds tests to cache PartitionLostListener",
  "a87f54da": "For JCache, put to near-cache as sync if put is sync, put as async if put is async",
  "c4f879ca": "Merge pull request #6714 from mdogan/hot-restart-integration-cache",
  "dad5438f": "Merge pull request #6665 from sancar/fix/cacheNearCacheDeserialization/maint3.x",
  "e1f1f814": "Merge pull request #6664 from sancar/fix/cacheNearCacheDeserialization/master",
  "53c02a40": "Removed unnecessary `CacheLoader` stuff on client and server side at cache proxies",
  "23123c5e": "Fixed unnecessary deserializtion in ICache near cache",
  "7bfddc48": "Fix for unnecessary deserialization in ICache near cache",
  "b86a817e": "Removed unnecessary cache null check in `CacheLoadAllOperation`",
  "fe02cf21": "Merge pull request #6625 from mustafaiman/enhancemente/cache-test",
  "b272f09c": "Merge pull request #6558 from pveentjer/fix/3.x/performance-monitor",
  "5dd16b87": "Merge pull request #6551 from serkan-ozal/enhancement/master/jcache-splitbrain-codecoverage",
  "98f89ffe": "Merge pull request #6543 from serkan-ozal/fix/master/cache-partition-segment-close-and-claear-fix",
  "c8bb26bc": "We have suspected from timeout is too short for this test. Shutdowns are concertede to terminate to make the test faster and timeout duration is doubled. Fixes #6371",
  "353523ef": "Merge pull request #6526 from mustafaiman/fix/spring-cache-manager",
  "5a3b2847": "Update cache client near-cache tests as now putting to cache is forwarded to near-cache as async. Fixes #5576",
  "54f8d6d2": "Check value of key if it is null or not while iterating on cache since entry might be removed or evicted.",
  "58511d51": "When `optimizerQuery = true` then cache deserialized objects if Record type is CachedDataRecord or CachedDataRecordWithStats",
  "6d57dde0": "Merge pull request #6480 from serkan-ozal/enhancement/master/client-cache-batch-putAll",
  "8e0f22c9": "Client side cache batch putAll implementation",
  "2790c122": "Merge pull request #6441 from emrahkocaman/fix/3.6/cachemergepolicybackwardcompat",
  "2f69266b": "Refactored NearCache related stuff. Made all near-caches impl. in whole code-base to use same NearCache interface. Moved all NearCache related logic to NearCachedMapProxyImpl and ClientNearCachedMapProxyImpl",
  "ae80ad3a": "Wait all `Future`s even there is an error before return exception to caller in cache putAll.",
  "ffd77d21": "Merge pull request #6450 from mustafaiman/enhancement/spring/cachemanager",
  "340ffce5": "disabled memcache and rest as default",
  "90cf3fba": "fix memory leaks caused by missing responses on invocations and added basic performance test",
  "737051b1": "Merge pull request #6447 from serkan-ozal/enhancement/master/cache-batch-putAll",
  "92b2b7f1": "Server side cache batch putAll implementation",
  "1c8aa690": "Change package of cache merge policies for backward compat, fixes #6439",
  "f82e72e6": "jcache support for spring cache manager",
  "c37f1bc6": "Merge pull request #6415 from eminn/replicatedmap-clear-near-cache",
  "718e9799": "Be sure that all partitions are assigned and cluster is in safe state before checking partition based cache record stores on backups in `CacheBackupTest`",
  "2625eeec": "EWR infra for cache",
  "95214e31": "added near cache invalidation events for map.clear() and added tests for listener",
  "08efde3b": "Merge pull request #6384 from sancar/performance/queryChanges/newClient",
  "fa6115f2": "Merge pull request #6391 from jerrinot/experiments/cache-query-entry",
  "fa45bdaf": "Owned entry count check in `CacheStatsTest::testEntryCount` updated as eventually after cache destroy",
  "65d6c6a5": "Owned entry count check in `CacheStatsTest::testEntryCount` updated as eventually after cache destroy",
  "962a0291": "Merge pull request #6365 from serkan-ozal/enhancement/master/client-cache-stats-improvement",
  "74db29e3": "Merge pull request #6366 from serkan-ozal/enhancement/3.x/client-cache-stats-improvement",
  "90a1a4f5": "Client side cache statistics implementation",
  "14032a36": "Client side cache statistics implementation",
  "b00aba99": "Merge pull request #6356 from jerrinot/papercuts/cache-name-missing/master",
  "d9c876f6": "CacheNotExistsException contains name of cache",
  "b48104d8": "Merge pull request #6334 from pveentjer/performance/3.x/queryresult-implements-identifieddataserializable",
  "eb280337": "Merge pull request #6343 from serkan-ozal/enhancement/3.x/cache-stats-improvement",
  "a1577890": "Merge pull request #6331 from serkan-ozal/enhancement/master/cache-stats-improvement",
  "6926be9b": "Clear near caches of maps on both servers and clients",
  "b1c345be": "Merge pull request #6293 from pveentjer/performance/3.x/mapentryset",
  "87ae19d8": "NativeClientTest is converted to slow test.",
  "c7387537": "NativeClientTest changed to slow test.",
  "b7f3d54b": "Merge pull request #6288 from pveentjer/performance/3.x/map-keyset-not-download-values",
  "66263987": "Merge pull request #6298 from serkan-ozal/enhancement/master/jcache-improvements",
  "ce3b25f2": "Get existing cache record on put without extra record map access",
  "0dad1d55": "No need to check completion latch if its ignored in cache proxies",
  "f5a501bc": "Merge pull request #6270 from serkan-ozal/feature/master/jcache-split-brain-impl",
  "1007cc22": "Some additional cleanup. Changed tests to avoid possible race condition between cache eviction and cache iterator by ensuring that no eviction will happen.",
  "331f2443": "Merge pull request #6260 from mustafaiman/nightly-slow-test-convert",
  "81a0f802": "nightly tests converted to slowtest",
  "b94f683f": "security related methods of cache and ringbuffer client requests are implemented",
  "5bdc5733": "Cleanup of basic cache tests (mostly removing warnings due to missing generics).",
  "8994ab62": "Provides fast `Set` implementation for cases where items are known to not contain duplicates.",
  "2286e295": "Made RingbufferContainerSerializationTest less sensitive to slowness of jenkins",
  "bd321445": "Merge pull request #6133 from pveentjer/performance/3.x/single-item-transactions-speedup",
  "f9900b42": "Adding missing client cache tests",
  "c507df1c": "Adding missing client cache tests",
  "3bc44e3b": "Moved eviction package from `com.hazelcast.cache.impl.eviction` to `com.hazelcast.internal.eviction`",
  "150ed77c": "Merge pull request #6137 from pveentjer/performance/3.x/metrics-memory-usage",
  "d472cbea": "Merge pull request #6094 from pveentjer/performance/3.x/map-put-all",
  "e75e7d3a": "Merge pull request #6005 from kobalski/feature/master/partition_lost_listener_for_jcache",
  "0d9f8460": "Merge pull request #6012 from sancar/fix/jcacheExceptionsProtocol",
  "a7452e4f": "Merge pull request #6011 from mustafaiman/spring-for-jcache-quorum",
  "ad4ddf2d": "Updated`backup-count` and `async-backup-count` explanation for cache in `hazelcast-spring-3.5.xsd`",
  "4be3c67d": "Corrected `backup-count` and `async-backup-count` explanation for cache in `hazelcast-spring-3.6.xsd`",
  "275a113d": "Removed default values of `backup-count` and `async-backup-count` and corrected `backup-count` and `async-backup-count` explanation for cache in `hazelcast-config-3.5.xsd`",
  "9dfb34ed": "Corrected `backup-count` and `async-backup-count` explanation for cache in `hazelcast-config-3.6.xsd`",
  "6a23b062": "Load jcache exceptions only wheb jcache is avaliable",
  "e7e5c0e8": "spring support for jcache quorum",
  "5d0c5a84": "Merge pull request #5988 from mustafaiman/quorum-for-jcache-implementation",
  "14e4bd80": "Merge pull request #5996 from mtopolnik/rename-cache-impl-methods",
  "74495870": "Merge pull request #5995 from pveentjer/performance/3.x/select-now",
  "eea7a684": "now webfilter caches null attributes",
  "d454814d": "Fix naming of some internal cache API methods",
  "77cbe038": "quorum for jcache",
  "f504910a": "Merge pull request #5985 from serkan-ozal/improvement/3.x/jcache-cleanup",
  "3af5fdb6": "now webfilter caches null attributes",
  "8f9b2e2e": "Merge pull request #5977 from serkan-ozal/improvement/master/jcache-cleanup",
  "e66fb39e": "Merge pull request #5963 from sancar/fix/cacheRemoveReturnType/master",
  "11c5bbf1": "Merge pull request #5966 from jerrinot/improvements/slow-splitbraintest-reassigned/master",
  "8553c461": "return type cacheRemove in protocol converted to boolean.",
  "1ac2f37a": "1. ClientCacheContextTest(s) refactored to use mock network as it's faster and it allows to run test in parallel with other. 2. Both ClientCacheContextTest and CacheContextTest switched to use ParallelTestRunner as with mock network there is no need to run it sequentially.",
  "8d16c8ee": "ClientNearCacheTest re-factored to use mock network. Cluster with Mock Network is way faster to start. Also the mock network allows to use ParallelTest runner -> additional speed gain.",
  "c218d78a": "added to localcache",
  "0752535c": "added to localcache",
  "ebdbc6da": "Merge pull request #5838 from pveentjer/performance/3.x/packet-extends-data",
  "4c79a491": "Merge pull request #5821 from pveentjer/performance/3.x/selector-count-control",
  "854f464a": "Use List instead of Collection when dealing with query-cache events since order is important.",
  "92b892f8": "cache entry setreload marked as false",
  "08bffa09": "cache entry setreload marked as false",
  "490b6a45": "Added near cache listener to invalidate client replicated map when there is changes from other clients.",
  "c4f34dc3": "Added near cache listener to invalidate client replicated map when there is changes from other clients.",
  "ec7826ba": "Merge pull request #5727 from pveentjer/cleanup/3.x/map-intruduced-nearcache-package",
  "fb0e8311": "Merge pull request #5731 from pveentjer/fix/3.x/5729-performance-log-java6-incompatiblity",
  "b7e70f40": "Introduced map nearcache package",
  "0d3c78b6": "Merge pull request #5713 from serkan-ozal/fix/3.x/cache-event-conversion-fix",
  "ea13a9c8": "Merge pull request #5714 from serkan-ozal/fix/master/cache-event-conversion-fix",
  "4716e1f7": "Merge pull request #5712 from serkan-ozal/improvement/master/cache-event-improvement",
  "42565555": "Merge pull request #5704 from serkan-ozal/improvement/3.x/cache-event-improvement",
  "9a5812a8": "Merge pull request #5685 from serkan-ozal/improvement/3.x/near_cache_improvement",
  "1a93b354": "Merge pull request #5683 from serkan-ozal/improvement/master/near_cache_improvement",
  "c2300656": "Merge pull request #5684 from serkan-ozal/improvement/3.x/near_cache_invalidation_message_diet",
  "f01f9ee7": "Merge pull request #5680 from serkan-ozal/improvement/master/near_cache_invalidation_message_diet",
  "d87c119e": "Cache proxy and near-cache record store based near-cache improvements",
  "a984caeb": "Reduce transmitted data for cache invalidation message",
  "48fe131a": "Null check on near-cache",
  "679d38d4": "Cache proxy and near-cache record store based near-cache improvements",
  "3654f17a": "Reduce transmitted data for cache invalidation message",
  "7474037e": "Merge pull request #5644 from pveentjer/performance/3.m/balancer-issues",
  "b42a162a": "Merge pull request #5639 from pveentjer/performance/3.x/balancer-issues",
  "96890ef0": "Merge pull request #5571 from pveentjer/performance/3.x/serialization-inputbuffer-pooling",
  "31a30ec8": "Merge pull request #5549 from pveentjer/performance/3.x/response-handler",
  "8f53ade3": "Improve LOCAL mode Hibernate caching along the same lines as the improvements for DISTRIBUTED mode: checkstyle codecov.yml CONTRIBUTING.md distribution docs extensions hazelcast hazelcast-archunit-rules hazelcast-build-utils hazelcast-coverage-report hazelcast-it hazelcast-spring hazelcast-spring-tests hazelcast-sql hazelcast-tpc-engine images kubernetes-rbac.yaml LICENSE licenses modulepath-tests mvnw mvnw.cmd NOTICE owasp-check-suppressions.xml pom.xml README.md SECURITY.md src Rework AbstractAccessDelegate to factor out only the common methods between the various Delegate classes. checkstyle codecov.yml CONTRIBUTING.md distribution docs extensions hazelcast hazelcast-archunit-rules hazelcast-build-utils hazelcast-coverage-report hazelcast-it hazelcast-spring hazelcast-spring-tests hazelcast-sql hazelcast-tpc-engine images kubernetes-rbac.yaml LICENSE licenses modulepath-tests mvnw mvnw.cmd NOTICE owasp-check-suppressions.xml pom.xml README.md SECURITY.md src Truly implement READ_COMMITTED transactional semantics (i.e., handle insert, update, and remove as no-ops, and only apply modifications to the cache on afterInsert, afterUpdate, and unlockItem) in all asynchronous cache access strategies. checkstyle codecov.yml CONTRIBUTING.md distribution docs extensions hazelcast hazelcast-archunit-rules hazelcast-build-utils hazelcast-coverage-report hazelcast-it hazelcast-spring hazelcast-spring-tests hazelcast-sql hazelcast-tpc-engine images kubernetes-rbac.yaml LICENSE licenses modulepath-tests mvnw mvnw.cmd NOTICE owasp-check-suppressions.xml pom.xml README.md SECURITY.md src Implement NonStrictReadWrite and ReadOnly AccessDelegates for improved performance. checkstyle codecov.yml CONTRIBUTING.md distribution docs extensions hazelcast hazelcast-archunit-rules hazelcast-build-utils hazelcast-coverage-report hazelcast-it hazelcast-spring hazelcast-spring-tests hazelcast-sql hazelcast-tpc-engine images kubernetes-rbac.yaml LICENSE licenses modulepath-tests mvnw mvnw.cmd NOTICE owasp-check-suppressions.xml pom.xml README.md SECURITY.md src In LocalRegionCache, improve handling of invalidations in the following cases: - post-commit deletion (in unlockItem), - Collections that have a VersionComparator but null version, - Hibernate bulk / multi-table updates (in unlockRegion). checkstyle codecov.yml CONTRIBUTING.md distribution docs extensions hazelcast hazelcast-archunit-rules hazelcast-build-utils hazelcast-coverage-report hazelcast-it hazelcast-spring hazelcast-spring-tests hazelcast-sql hazelcast-tpc-engine images kubernetes-rbac.yaml LICENSE licenses modulepath-tests mvnw mvnw.cmd NOTICE owasp-check-suppressions.xml pom.xml README.md SECURITY.md src Small optimization: Nodes do not have to listen to their own events published on the TopicService.",
  "58bc7c41": "Merge pull request #5574 from pveentjer/performance/3.x/reduced-object-litter-fast-string-creator",
  "f33e8753": "Added continuous query cache documentation.",
  "baed3905": "Added continuous query cache documentation.",
  "7344e8b8": "type added to 'timed-expiry-policy-factory' element in cache config xml element",
  "4fc02c3a": "Merge pull request #5477 from serkan-ozal/improvement/master/put_to_near_cache_as_sync_if_get_is_sync",
  "b0c3d74f": "Updated ChangeLog and Release Notes by adding the fail fast on invalid configuration topic.",
  "79928ebe": "Added a note related to the fail fast on invalid configuration.",
  "7bb808c2": "continous query cache related preperation code",
  "d40ce942": "Put to near-cache as sync if get from cache is sync",
  "1ac165a3": "Merge pull request #5452 from pveentjer/feature/3.x/slow-invocation-detector",
  "d54216af": "slow invocation detector",
  "de61a1b9": "Merge pull request #5431 from ajermakovics/mi/query-slow-test-refactoring",
  "535f2b12": "Merge pull request #5427 from ajermakovics/m/query-slow-test-refactoring",
  "277a94a8": "cache wan rep doc update",
  "e90813e1": "Merge pull request #5439 from serkan-ozal/documentation/master/near_cache_documentation",
  "341e4756": "Findbugs fix for 'Load of known null value in com.hazelcast.cache.impl.CacheService.sendInvalidationEvent(...)'",
  "c8f0f244": "Minor refactor for near-cache invalidation",
  "f4270918": "Merge pull request #5428 from serkan-ozal/enhancement/master/near_cache_batch_invalidation_event_impl",
  "467e8dfa": "Near-cache invalidation event batching implementation",
  "e627a921": "Add cache wan ref config sample",
  "abe30b82": "Merge pull request #5420 from sancar/simulatorFix/cache/master",
  "f6e79287": "fix for simulator tests https://github.com/hazelcast/hazelcast-simulator/blob/master/tests/src/main/java/com/hazelcast/simulator/tests/icache/MangleICacheTest.java and https://github.com/hazelcast/hazelcast-simulator/blob/master/tests/src/main/java/com/hazelcast/simulator/tests/icache/CreateDestroyICacheTest.java",
  "090824a5": "jcache jsr tests are passing",
  "d81bf31c": "Merge pull request #5398 from emrahkocaman/cache-publish-event-refactor",
  "90d07f1d": "Move cache event publishing parameters to CacheEventContext class",
  "c9a12176": "jcache task bug fixes",
  "afb15495": "Show hit/miss ratio as percentage at near cache statistics",
  "4426427f": "Pass 'caller' to sub-methods while updating the cache record as invalidation source",
  "3df357ea": "Merge pull request #5300 from serkan-ozal/fix/master/define_jcache_as_optional_at_osgi_bundle_definition",
  "71445b86": "Send cache configs to the new node at join - Backport fix for issue #4841 (On Dynamic Cluster, New Member Doesn't Know Cache Configs At Join)",
  "8bee0c20": "Send cache configs to the new node at join - Fix for issue #4841 (On Dynamic Cluster, New Member Doesn't Know Cache Configs At Join)",
  "c345ce82": "Check status of 'ICompletableFuture' while waiting for completion latch in cache - Fix for issue #4335 (JCache sync listener completion latch problems)",
  "37bca69a": "defined 'jcache' as optional at osgi bundle definition",
  "62636a2a": "Merge pull request #5013 from ajermakovics/m/cacheloader-keys",
  "61280cbd": "Merge pull request #5049 from jerrinot/improvements/query-performance-single-thread/master",
  "9d188ccc": "Add support for 'CacheMaxSizePolicy' in 'CacheEvictionConfig' - fix for issue #5180 (Backward compatibility of eviction configuration for cache is broken)",
  "ebd8b515": "Improved logging in tests for SlowOperationDetector. Made use of assertTrueEventually() to give SlowOperationDetector enough time to scan for slow operations. Implemented toString() methods for PartitionWideEntryWithPredicateOperation and TruePredicate.",
  "00955389": "No need for 'CacheSimpleConfig' deals with 'CacheEvictionConfig' since it is not part of public API - fix for issue #5180 (Backward compatibility of eviction configuration for cache is broken)",
  "e72719bd": "jcache tasks imlps",
  "98ca9861": "'CacheSimpleConfig' deals with 'EvictionConfig', but 'CacheConfig' deals with 'CacheEvictionConfig' - fix for issue #5180 (Backward compatibility of eviction configuration for cache is broken)",
  "d4796751": "Added 'CacheEvictionConfig' back and used for eviction configuration of 'CacheConfig' for keeping backward compatibility - fix for issue #5180 (Backward compatibility of eviction configuration for cache is broken)",
  "c9145735": "Some Nightly tests marks removed from ClientNearCacheTest since they are not slow and should be run at PR builds",
  "f1f9a0df": "git ignore performance.log files",
  "90410ba8": "Merge pull request #5107 from serkan-ozal/feature/master/near_cache_eviction_impl",
  "f3b3b083": "near cache configuration validations checks + javadocs added",
  "c16387e2": "Merge pull request #4901 from cherednichenko/cacheNullIssue",
  "b8734c28": "near cache eviction implementation",
  "6ac8c9c7": "Merge pull request #5059 from Donnerbart/slowOperationDetectorLogging",
  "8d462ba5": "Merge pull request #5064 from serkan-ozal/feature/master/near_cache_expiration_impl",
  "d2cfc3c7": "Added class header to cache package.",
  "8b548cdb": "near cache expiration implementation",
  "9c0e5b30": "Changed the content of operation in slow operation logs to contain the fully qualified classname instead of operation.toString(). Added operation.toString() as details to each invocation and SlowOperationInvocationDTO. Added a property to switch off stack trace logging.",
  "4e929712": "backport fix findbugs for 'Load of known null value in com.hazelcast.cache.impl.AbstractHazelcastCacheManager.getCache(String)'",
  "b487f373": "fix for issue #4631 (CacheManager.getCache() does not re-open closed cache)",
  "c4e2fb8d": "Marked some ClientNearCacheTests as nightly tests because slow",
  "7f1b028a": "Marked ExecutionDelayTest as nightly test because it is slow",
  "0bf82d0f": "Marked a slow CLientServiceTest as nightly",
  "1e6bd5d6": "Marked some slow ClientRegressionTests as nightly",
  "2ec63b5f": "Marked some slow CLientMapIssuesTests as nightly",
  "4d6a7bfe": "Moved slow UTFEncoderDecoderTest to nightly",
  "8f683f60": "Marked a slow MapTransactionTest.testTxnOwnerDies as nightly test",
  "15f01eb3": "fix for issue #4631 (CacheManager.getCache() does not re-open closed cache)",
  "9cb0d971": "Merge pull request #5004 from pveentjer/test/3.x/speedup-jcachelistenertest",
  "582d23bb": "Merge pull request #4938 from pveentjer/performance/3.x/clientrequest-reduce-litter",
  "3c9750ca": "UTFEncoderDecoder test is now fast; don't abuse a unit test for a stress test",
  "d9292fd7": "Merge pull request #4984 from serkan-ozal/feature/master/near_cache_implementation",
  "53e599da": "Merge remote-tracking branch 'origin/master' into feature/master/near_cache_implementation",
  "189867a5": "Merge pull request #4840 from cherednichenko/jcacheConfig2",
  "ce450af0": "near cache implementation",
  "35ab3927": "Made changes according comments to PR 'j cache config tests #4840'.",
  "f7b217ed": "Merge pull request #4934 from pveentjer/performance/3.x/remoteresponsehandler-dropped-atomicbooleaninstance",
  "5f4960fd": "Moved performance/health monitor into com.hazelcast.internal from hazelcast.util",
  "1fffffc2": "Merge pull request #4884 from bilalyasar/fail-fast-client-new",
  "019d9b1c": "fail-fast impl. for new client module",
  "71ad2a88": "Merge pull request #4813 from emrahkocaman/Feature/master/cache-wan-imp",
  "108d2c36": "j cache config tests",
  "3c784fa3": "Merge pull request #4583 from noctarius/jcache-icache-javadocs",
  "454a413f": "Merge pull request #4701 from bilalyasar/fail-fast-rebase",
  "3d6d2309": "Make tests wait that cluster is partitioned eventually with a timeout. Failures showed us that in a mock network environment network partition handled so fast even before node is removed from the cluster. Fixes #4734",
  "2f96938b": "Make tests wait that cluster is partitioned eventually with a timeout. Failures showed us that in a mock network environment network partition handled so fast even before node is removed from the cluster. Fixes #4734",
  "bf9f9bf9": "fail-fast tests added fail-fast implementation",
  "734139c7": "Merge pull request #4735 from emrahkocaman/Feature/master/jcache-publish-event-expiration-time",
  "47a8bfca": "Merge pull request #4728 from emrahkocaman/Feature/master/wan-rep-cache-conf",
  "99356197": "refactor on cacherecordstore for expiration time for wan replication",
  "fb607855": "added a trigger method to near cache eviction tests",
  "6fc7952a": "added a trigger method to near cache eviction tests",
  "776064df": "refactored near cache eviction percentage calculation to make it less fragile and introduced eviction-factor",
  "19d010cb": "Added SlowOperationDetector which monitors and logs slow operations on OperationThreads. Added SlowOperationLog which contains information about slow operations. Added LocalOperationStats to add information about slow operations to Management Center JSON.",
  "514466b0": "Merge pull request #4657 from pveentjer/performance/3.x/opservice-skipderegistration-for-readonly-local-calls",
  "620dbd7e": "Merge pull request #4585 from noctarius/jcache-readwritethrough-unittest",
  "5a16e5ad": "Merge pull request #4597 from mdogan/jcache-config-create-3.x",
  "521f9e5e": "Merge pull request #4598 from mdogan/jcache-config-create",
  "0e9329ff": "Merge pull request #4606 from sancar/fix/nearcacheMaxsizeEviction/maint3.x",
  "b6bc4bf6": "Merge pull request #4605 from sancar/fix/nearcacheMaxsizeEviction/master",
  "40021c74": "Merge pull request #4575 from sancar/fix/nearcacheMaxsizeEviction/master",
  "81094d8e": "Merge pull request #4576 from sancar/fix/nearcacheMaxsizeEviction/maint3.x",
  "69a01ea6": "Converted jcache config creation to synchronous for callers but still async for partition threads.",
  "b765023c": "Converted jcache config creation to synchronous for callers but still async for partition threads.",
  "dc418295": "Added more clarification to Javadoc and streamlined it to the exception rules of javax.cache.Cache - related #4504",
  "67522281": "If cache config is not exist, throw a retryable exception so that request can be retried",
  "d1bd14be": "fixes #4568. Nearcache eviction will run again if cache size is not below under max size in first run.",
  "c799ebb7": "If cache config is not exist, throw a retryable exception so that request can be retried",
  "d9c3dcf3": "fixes #4568. Nearcache eviction will run again if cache size is not below under max size in first run.",
  "6aba33ee": "Merge pull request #4478 from sancar/fix/nearcacheComparatorProblem/master",
  "ec906084": "Merge pull request #4479 from sancar/fix/nearcacheComparatorProblem/maint3.x",
  "14347f4b": "Merge pull request #4554 from kazuhira-r/fix-jcache-document",
  "cdaeba77": "Merge pull request #4540 from pveentjer/performance/3.x/remove-operationservicename-part1",
  "7d150d74": "Merge pull request #4518 from jerrinot/fix/missing-jcache-in-hazelcast-full/master",
  "ab8fbb10": "Fix: Entry listeners elements are prefixed with 'cache-' when a declarative configuration is used.",
  "f9bede59": "Merge pull request #4472 from pveentjer/performance/3.x/operation-compressed-serialization",
  "788d94ff": "Adds smart serialization of operation to optimize performance/reduce size",
  "487f21c1": "Merge pull request #4470 from pveentjer/performance/3.x/operation-replicaindex-from-int-to-byte",
  "96ed6c62": "Merge pull request #4409 from pveentjer/performance/3.x/invocationfuture-remove-atomicinteger",
  "d14eb6ec": "Merge pull request #4424 from gurbuzali/cache-declerative-configuration",
  "0f81beb7": "Merge pull request #4425 from gurbuzali/cache-declerative-configuration-master",
  "31fa9b22": "fixed assigning cacheLoaderFactory to cacheWriterFactory and expirationFactory",
  "11c3bc55": "fixed assigning cacheLoaderFactory to cacheWriterFactory and expirationFactory",
  "7fb5a3f9": "Waiting logic for last packages coming from a just closed connection is fixed(was broken because of a fast checkstyle refactoring).",
  "e0f22285": "Merge pull request #4395 from pveentjer/performance/3.x/queries-reflection-caching",
  "38a75503": "Merge pull request #4317 from pveentjer/performance/3.x/queries-remove-unwanted-serialization",
  "abdbc027": "Reviewed near cache related updates.",
  "7585eb4e": "Merge pull request #4347 from mdogan/cachemanager-close-fix",
  "fa83abec": "Merge pull request #4346 from mdogan/cachemanager-close-fix-mx",
  "5b2302dd": "Merge pull request #4332 from mdogan/jcache-sync-mx",
  "8c14b676": "Merge pull request #4333 from mdogan/jcache-sync",
  "4a693f7f": "Threads waiting JCache sync listener completion events should be waken up when client is shutdown, cache is closed and destroyed.",
  "0fc47e68": "Threads waiting JCache sync listener completion events should be waken up when client is shutdown, cache is closed and destroyed.",
  "823eddc9": "Merge pull request #4095 from pveentjer/performance/3.x/remove-remotecallkey",
  "de557b4b": "OP_WRITE optimization and simplification of WriteHandler",
  "7d598861": "Merge pull request #4298 from noctarius/fix-eviction-on-jcache-backup",
  "72aaa917": "refine jcache entry processor test",
  "143f4fdf": "Merge pull request #4276 from gurbuzali/jcache-sync-condition-false",
  "5d50e8d5": "Merge pull request #4279 from noctarius/serialization-fix-jcache",
  "f74f92d0": "Merge pull request #4271 from serkan-ozal/feature/master/cache_eviction_config",
  "4ffbf96b": "Fixed #4278 - inconsistent serialization in case of multiple defined caches",
  "26556bcb": "Merge pull request #4263 from noctarius/jcache-eviction-documentation",
  "ebd4151a": "unit test update new cache eviction config impl",
  "00249085": "merge max-size config and eviction policy config into a single cache eviction config",
  "2badc0ae": "Merge pull request #4191 from serkan-ozal/feature/master/cache_eviction_impl",
  "6e261fa3": "Merge remote-tracking branch 'origin/master' into feature/master/cache_eviction_impl",
  "12ed080f": "Object creation optimization on 'SampleableConcurrentHashMap'",
  "8c0289da": "Merge pull request #4216 from gurbuzali/jcache-declarative-listener-fix",
  "13b8ae83": "Merge remote-tracking branch 'origin/master' into feature/master/cache_eviction_impl",
  "35101e3e": "Improved JavaDocs for cache.impl.record reviewed.",
  "f1f383f9": "Backport for #3882, honor query cache config",
  "3a0572f7": "Fixes #3882, honor query cache config",
  "1cc7d282": "Merge pull request #4126 from serkan-ozal/feature/master/per_cache_based_max_size",
  "530aabb6": "Merge remote-tracking branch 'origin/master' into feature/master/per_cache_based_max_size",
  "30882773": "unit test update for cache max-size config on core module",
  "f36a182b": "cache max-size config impl",
  "1169eba5": "xsd and parser update for cache max-size config on core module",
  "4ca3c92a": "unit test update for cache max-size config on spring module",
  "225a0d4a": "xsd and parser update for cache max-size config on spring module",
  "72370450": "refactored as review comments of @mdogan and @ahmetmircik, 'CacheMaxSizeChecker' interface and implementations moved to new package named 'maxsize' under 'cache.impl' package and some minor comment/documentation updates.",
  "7e0c259f": "Merge remote-tracking branch 'origin/master' into feature/master/per_cache_based_max_size",
  "72430ec3": "Near-cache has its own eviction/expiration mechanism, eviction/expiration on IMap should not force any near-cache eviction/expiration",
  "d931c2b7": "Near-cache has its own eviction/expiration mechanism, eviction/expiration on IMap should not force any near-cache eviction/expiration",
  "7f8cd30e": "Merge pull request #4125 from gurbuzali/cache-eviction-fix",
  "b81b0f6b": "Merge remote-tracking branch 'origin/master' into feature/master/per_cache_based_max_size",
  "053edf20": "Merge pull request #4119 from pveentjer/improvement/3.x/performance-monitor-includes-response-info",
  "83cd5dbb": "Included response information in the performance monitor",
  "9be83b6e": "Merge remote-tracking branch 'origin/master' into feature/master/per_cache_based_max_size",
  "782fa636": "Merge remote-tracking branch 'origin/master' into feature/master/per_cache_based_max_size",
  "594e3870": "Re-implement Hazelcast hibernate region cache to implement SoftLock correctly, IMap locks where possible in favour of CAS or entry processors",
  "a8ed375d": "Merge remote-tracking branch 'origin/master' into feature/master/per_cache_based_max_size",
  "1301c9c1": "Added pending operation count to performance monitor:",
  "c81bd745": "Merge pull request #4100 from gurbuzali/jcache-entry-processor-test-fix",
  "eb63f07d": "Merge remote-tracking branch 'origin/master' into feature/master/per_cache_based_max_size",
  "48efb17c": "Merge branch 'feature/master/per_cache_based_max_size' of /Users/serkanozal/Documents/workspace/hazelcast with conflicts.",
  "305ecd0c": "Merge pull request #4040 from serkan-ozal/feature/master/jcache_road_to_release_from_ea_for_3_4",
  "d3853d89": "Merge remote-tracking branch 'origin/master' into feature/master/jcache_road_to_release_from_ea_for_3_4",
  "24f5c769": "Merge pull request #4065 from gurbuzali/jcache-sync-listener",
  "bab7c4a4": "Merge branch 'master' of github.com:hazelcast/hazelcast into jcache-sync-listener",
  "f5b278e5": "now cacherecordstore supports expiration task",
  "daa9b0f7": "Merge remote-tracking branch 'origin/master' into feature/master/jcache_road_to_release_from_ea_for_3_4",
  "8c51ab3f": "basic cache test fix",
  "97a9b4c4": "copyedit of performance docs",
  "c8b6e7ee": "eviction statistics impl on cacherecordstore",
  "5918bdae": "Merge remote-tracking branch 'origin/master' into feature/master/jcache_road_to_release_from_ea_for_3_4",
  "2b08e68d": "refactor on cacherecordstore and cacherecord",
  "21d0a591": "Merge pull request #4041 from pveentjer/feature/3.x/performance-monitor",
  "98787c65": "cache recordstore eviction impl",
  "9ad95780": "Initial work on adding the performance monitor",
  "7b43e093": "Merge pull request #4031 from emrahkocaman/fix/maintenance-3.x/cache-avg-put-time",
  "bddf9980": "Merge pull request #4030 from emrahkocaman/fix/master/cache-avg-put-time",
  "b200c6c0": "Merge pull request #3987 from mdogan/fix/master/jcache-listner",
  "f3810c4f": "Fixed jcache sync listener test",
  "c2ac8889": "Merge pull request #3965 from asimarslan/feature/master/jcache-sipring-config",
  "c75de608": "jcache spring config parser and xsd update",
  "b592a7d8": "Merge pull request #3964 from mdogan/fix-jcache",
  "fef28c04": "Fixes due to PR comments. Fixed findbugs issues. Improved jcache doc.",
  "1c392c64": "Merge branch 'feature/master/jcache-config' of github.com:asimarslan/hazelcast",
  "2b274e65": "jcache declarative configuration",
  "6aa478bb": "hazelcast config xsd update for jcache configurations",
  "70f2b441": "Removed cache eviction from default recordstore",
  "e505ac66": "Merge pull request #3939 from serkan-ozal/jcache-final",
  "4be98d8a": "Fixed CacheManager returns names of already closed caches sometimes",
  "04bfb31c": "Fixed cache destroy race condition",
  "56fa7050": "Merge pull request #3930 from noctarius/jcache-backup-entryprocessor",
  "e5db59e2": "jcache documentation",
  "61fb3170": "jcache documentation",
  "ae66e67c": "started jcache configuration docs",
  "7472e68b": "started jcache configuration docs",
  "6e0642d3": "Merge remote-tracking branch 'origin/feature/jcache' into feature/jcache",
  "2436eae5": "more jcache docs",
  "addf40e3": "to run tck tests with off-heap jcache",
  "3748c5d0": "moving some methods of CacheRecordStore to AbstractCacheRecordStore + cacheconfig refactor",
  "d1abf041": "Improved JavaDocs for cache.impl.record reviewed.",
  "17694192": "Improved JavaDocs for cache.impl.operation reviewed.",
  "e040cfbb": "Merge pull request #3837 from noctarius/jcache-comments",
  "cd45aa3b": "Improved JavaDocs for cache.impl.client reviewed.",
  "596782e6": "Improved JavaDocs for com.hazelcast.cache reviewed.",
  "2ad7051c": "Improved JavaDocs for cache.impl reviewed.",
  "5cc8dcd4": "Improved JavaDocs for cache.impl reviewed.",
  "028bd93e": "Removed unused line from jcache documentation",
  "6b72fbcc": "Improved JavaDocs for cache.impl.record reviewed.",
  "9f387d8b": "added enterprise cache data serializable",
  "590c6477": "Merge pull request #3861 from gurbuzali/jcache-record-serialization-fix",
  "17975884": "fixed cache replication and some refactor",
  "02076189": "JCache java doc update of com.hazelcast.cache.impl.record package",
  "100598a1": "added operation provider to cache-proxy and made some refactorings according to",
  "3f8b5633": "fixes #3858 serialization of value moved from abstract record to data/object records, added serializtion test for cache",
  "e8c7eb3f": "Merge pull request #1 from serkan-ozal/feature/jcache",
  "229c8367": "refactor for making enterprise cache configurable as onheap/offheap",
  "08ad3735": "started pluggable jcache module implementation",
  "311bc09f": "Merge pull request #3759 from mheemskerk/update-mapcontainer-nearcacheenabled",
  "6be3578d": "Merge pull request #3714 from asimarslan/feature/master/jcache5",
  "c9fc0949": "fix jcache provider instance name to be compatible with jmx",
  "2d262648": "fix jcache provider instance name to be compatible with jmx",
  "25408a0c": "javaDoc improvement for jcache implementation classes",
  "9d58bb80": "javaDoc improvement for jcache implementation classes",
  "1e7749aa": "Merge branch 'jcache-fixes/master' of github.com:gurbuzali/hazelcast",
  "742d5fc5": "Merge branch 'jcache-fixes/maintenance' of github.com:gurbuzali/hazelcast into maintenance-3.x",
  "46f8754b": "removed sync block since there is no specific rule in spec to check before adding to the listeners set added np check to near-cache config",
  "a19d5316": "removed sync block since there is no specific rule in spec to check before adding to the listeners set added np check to near-cache config",
  "5f2e2bfd": "CacheConfig does not extend MutableConfiguration anymore cache.getConfiguration now returns an immutable instance, as stated in the spec listenerConfigurations should be thread-safe now added null check for waiting count-down completion of sync listeners",
  "e30adaa1": "CacheConfig does not extend MutableConfiguration anymore cache.getConfiguration now returns an immutable instance, as stated in the spec listenerConfigurations should be thread-safe now added null check for waiting count-down completion of sync listeners",
  "c3c3c0dc": "close proxies before any other services are closed. This was causing near cache listener not being remove succesfully upon client shutdown. fixes #3669",
  "4c62e0e8": "close proxies before any other services are closed. This was causing near cache listener not being remove succesfully upon client shutdown. fixes #3669",
  "7e427293": "Jcache integration, master branch merge",
  "675c0937": "Merge pull request #3649 from asimarslan/feature/master/jcache2-client",
  "31cff463": "Merge pull request #3648 from asimarslan/feature/maintance-3.x/jcache2-client",
  "5bcee06f": "checkstyle fix for cache client",
  "c6337151": "cache Service reset fix",
  "1957f30d": "jcache-mancenter integration, resolves #106",
  "d27c691a": "Merge pull request #3634 from asimarslan/feature/maintance-3.x/jcache2-client",
  "21b8aa56": "mancenter jcache integration docs",
  "d09f6875": "jcache integration",
  "0cf18ddc": "checkstyle fix for cache client",
  "d72fac1d": "cache Service reset fix",
  "726f42fb": "jcache-mancenter initial",
  "cf8596c5": "Merge pull request #3601 from asimarslan/features/master/jcache2",
  "16342591": "fix cache destroy test",
  "5ee81954": "cache provider thread safety fix",
  "1fddf353": "create cache minor fix",
  "33b10219": "Merge pull request #3578 from asimarslan/feature/maintance-3.x/jcache2",
  "d00fcd3f": "fix cache destroy test",
  "497cfed1": "cache provider thread safety fix",
  "69b7503c": "ASCII aware performance improvement commented-out because of some failing unit tests for issue #3483",
  "309236aa": "Buffer or DataInput overflow bug fix + ASCII aware performance improvement for issue #3483",
  "2ed06408": "create cache minor fix",
  "55ab0e2e": "Merge pull request #3550 from asimarslan/feature/master/jcache-master",
  "79092192": "Merge pull request #3543 from asimarslan/feature/maintance-3.x/jcache",
  "b22f2fa3": "Merge pull request #3502 from gurbuzali/jcache-dev",
  "a77867fb": "Merge branch 'master' of github.com:hazelcast/hazelcast into jcache-dev",
  "a7b6a6fc": "Merge pull request #3487 from asimarslan/jcache-dev",
  "fb48be50": "unused class removal and client cache proxy clean up",
  "dedb6f15": "ignore custom cache tests",
  "99bd1050": "remove jcache api dependency",
  "65fdc3ed": "checkstyle fixes for jcache",
  "daffc8e4": "checkstyle fixes for jcache",
  "48030701": "client cache proxy fix",
  "5358a63f": "cache manager fix and refactor CacheProxy",
  "e1827f54": "cache manager refactor init",
  "2fa71e51": "fix cacheManager close issue",
  "c7fd539c": "Merge pull request #3369 from mheemskerk/fix/hazelcast-httpsession-performance-fix",
  "aaf40bcd": "Memcache Binary Protocol not supported note added",
  "1fe622bf": "remove read only optimization from entry processor processing operations. From now on read only operations fire entry added event.",
  "06461809": "Merge pull request #3263 from pveentjer/performance/3.x/client2",
  "6fb0b457": "Initial work on client performance improvement fix",
  "d492020e": "added tests to nightly slow tests, fixes #3250",
  "abb4ad75": "Refactored condition.await() test to make it fail faster.",
  "b154ca88": "move jcache doc to upper",
  "fccab272": "added spring cache annotation based configuration section",
  "cd8ad2c9": "With this pr, map.clear operation clears client nearcache. fixes #2363",
  "315b5382": "Merge pull request #2700 from pveentjer/performance/3.x/2663-mapentries",
  "03ac2943": "Merge pull request #2631 from bturner/2064-bturner-configurable-localregioncache",
  "24f95322": "Test added for configuration of near cache in-memory format through XML.",
  "4292917f": "Removed one node from client aggregation tests for faster startup",
  "79bcd78f": "Fixed client near cache",
  "8c052ef4": "Merge pull request #2797 from mesutcelik/jcacheckstylefixes",
  "3bab534f": "additional optimization when reading decoding Strings",
  "1cb6b363": "utf decoding optimizations",
  "cf64cc35": "trivial performance related improvements",
  "24c3338f": "More optimization cleanups",
  "d3a28ed5": "Merge pull request #2521 from mheemskerk/hazelcastcache-get-fix",
  "9b21a848": "no need to check hits on near cache population tests",
  "ca99e98b": "no need to check hits on near cache population tests",
  "c212136c": "fixed alter function by removing wrong optimization",
  "603b536a": "fixed alter function by removing wrong optimization",
  "5fdd6a37": "Return cached value upon IMap.get() if near cache is enabled",
  "eee381d1": "Merge pull request #2428 from noctarius/optimized-hibernate-cache",
  "3308c3cd": "Merge pull request #2465 from noctarius/mapreduce-optimizations",
  "ce805f9c": "Avoid race condition when returning value from near-cache.",
  "7547801a": "Use the exact same logic to return a value from the near cache after putting the value in the near cache as if the value was already there before.",
  "c407ea15": "Merge pull request #2426 from sancar/fix/clientNearcache/master",
  "c0718500": "Merge pull request #2425 from sancar/fix/clientNearcache/maint3.x",
  "ec35c4b3": "Client NearCache is cleared after re-registering to a node , so that near cache will not have stale data because of lost invalidations between old registered nodes death and reregistering to new ones.",
  "433c7745": "Client NearCache is cleared after re-registering to a node , so that near cache will not have stale data because of lost invalidations between old registered nodes death and reregistering to new ones.",
  "21b6831c": "Memcache and REST client updates reviewed",
  "8efa0336": "Merge pull request #2362 from sancar/memcacheAndRestClientRefManualDraftmaint3.x",
  "c1c313ca": "Memcache and REST client updates reviewed",
  "1df18df7": "Merge pull request #2361 from sancar/memcacheAndRestClientRefManualDraft",
  "439323dc": "testMemcacheWithIMap test fix.",
  "119d42a3": "testMemcacheWithIMap test fix.",
  "db71dc4c": "memcacheAndRestClientRefManualDraft, and small code changes related to Rest response codes",
  "b42c706b": "memcacheAndRestClientRefManualDraft, and small code changes related to Rest response codes",
  "8f9e4cf4": "Minor performance-based modifications.",
  "e4caa8ee": "Avoid second deserialization upon IMap.get() if local near cache is enabled.",
  "dec0b7d1": "invalidation on change is set to false for almost all near cache tests",
  "3faa5c84": "memcache doc typo",
  "3f3d131a": "Fixes #2065. Operations that changes value invalidates local cache immediately",
  "e886e420": "Fixes #2065. Operations that changes value invalidates local cache immediately",
  "da70818a": "add execution callback to getAsync() methods to update the near caches.",
  "98d75a34": "add execution callback to getAsync() methods to update the near caches.",
  "f7f0c2e5": "remove cache-value doc parts",
  "c65cd68b": "remove cache-value doc parts",
  "4d89a97d": "Merge pull request #2256 from pveentjer/performance-itopic",
  "414d9d75": "Merge pull request #2236 from ahmetmircik/checkstyle/nearcache2",
  "77be7243": "Merge pull request #2237 from ahmetmircik/maintenance/checkstyle/nearcache",
  "ff5dfc91": "make near cache checkstyle compliant.",
  "40805419": "make near cache checkstyle compliant",
  "b19c2be0": "make near cache checkstyle compliant",
  "0f4aab74": "Merge pull request #2230 from pveentjer/map-slow-tests-to-nightly",
  "2d3ea915": "MapStoreTest: Moved slow tests to nightly",
  "c3fe8840": "'cache-value' attribute removed, 'Why Hazelcast' section improved",
  "538d9091": "Merge pull request #2193 from gurbuzali/near-cache-config-fix/3.2.1",
  "820f00bf": "check if near cache enabled",
  "d6873ac1": "check if near cache enabled",
  "57171ae6": "immediate invalidate local near caches (fixes issue #2163)",
  "2f7bd833": "immediate invalidate local near caches (fixes issue #2163)",
  "2fe58355": "Merge pull request #2192 from gurbuzali/near-cache-config-fix/3.3",
  "76084ff3": "Fixed issue #2187 - deferred write cached value isn't overridden on chached NULL_ENTRY",
  "139e410d": "Fixed issue #2187 - deferred write cached value isn't overridden on chached NULL_ENTRY",
  "e9f50e81": "Merge pull request #2129 from gurbuzali/specific-near-cache-config/3.2.1",
  "1f12d46a": "Merge pull request #2130 from gurbuzali/specific-near-cache-config/3.3",
  "605b7957": "Merge pull request #2147 from noctarius/npe-classloader-cache-fix",
  "84494ff5": "Merge pull request #2148 from noctarius/backport-npe-classloader-cache-fix",
  "2bade516": "Backport: Fixed possible NPE when no explicit classloader was given to the classloader cache",
  "97a8ff7f": "Fixed possible NPE when no explicit classloader was given to the cache",
  "f12365a4": "Problimatic test for near cache",
  "81e17f85": "Merge pull request #2113 from eminn/enhancement/containskeychecknearcache",
  "ad74200f": "missing near cache test",
  "177f728a": "containsKey operation now checks first client near cache if the value exists in the near cache. fixes #2100",
  "574a176d": "Merge pull request #2109 from eminn/fix/nearcachetests",
  "d81b9dc2": "fix near cache problematic tests.",
  "31345c40": "client map reduce test moved to slow tests category",
  "b1ad98f5": "Refactored ClientNearCacheTest, fix to init near cache on call to getAll()",
  "188f98a9": "slow to nightly tests",
  "7ba73668": "added a test for the near cache getting expired due to Idle time out",
  "3eb00b72": "added a test for the near cache TTL,",
  "9f40e5db": "move slow tests into nightly-build profile",
  "ee554eff": "Client shutdown improvement. Near cache cleanup fix.",
  "9fef2d0a": "Added some more test from nightly to slowtest",
  "184f8f21": "Renamed slow test to nightly test",
  "bd458e9e": "String.indexOf(char) is faster than String.indexOf(String).",
  "8894dbcc": "String.indexOf(char) is faster than String.indexOf(String).",
  "e2c42196": "Merge pull request #1938 from gurbuzali/near-cache-test-fix/3.2-RC3",
  "6113a2d6": "parallel flagged tests which uses real network (slow test) should not be run concurrently",
  "9b217acc": "fix getAll() returns data instead of object when nearcache enabled.",
  "063c53c9": "fix getAll() returns data instead of object when nearcache enabled.",
  "cd8b0084": "while populating map, near-cache invalidate operation may execute after map.get changed the test so that population of map is done with a map-loader",
  "0e9660ce": "locally invalidate local near cache after put and remove methods.",
  "7fc9a400": "Moved testHighConcurrentLockAndUnlock to slowtest",
  "c87e3863": "Moved testTxnGetForUpdateAndIncrementStressTest to slowtests",
  "0ebafc73": "return the result early if all read from near cache",
  "4a9d354b": "clear hashcode from nearcache",
  "ba050230": "clear hashcode from nearcache",
  "fbdd8153": "Merge pull request #1643 from pveentjer/performance/StringAndPartitionAwarePartitioningStrategy-singleton",
  "36d5b918": "pom for problematic-Tests profile, explictly exclude quick and slow test, and show all out put from tests",
  "c723977f": "fixes #1570 null in near cache",
  "5e092968": "fixes #1570 null in near cache",
  "80bbd9a3": "Fully weak reference using constructor cache to be cleaned on classloader unload",
  "92b4a0df": "Fixed performance issue on reflective string constructor",
  "f60e2cf7": "Disabled all slow tests",
  "5e43b3fa": "Marked ClientReplicatedMapTest as slow test",
  "3ef9ed8d": "Merge pull request #1471 from pveentjer/performance/partitionview-replicascheaper",
  "a396b0aa": "Improves performance of PartitionView.getReplicaAddress",
  "f7a9a105": "Added preparation for faster string creation on enterprise",
  "42b6f284": "Merge pull request #1462 from noctarius/utf-optimizations",
  "0a597437": "Merge pull request #1464 from pveentjer/performance/invocationbuilder",
  "ba4bf234": "More optimizations for UTF serializing / deserializing",
  "b49d20f1": "fix error on replicated map since it has no near cache",
  "45cc40f2": "Merge pull request #1410 from noctarius/3.2-fix-destroy-nearcache-on-mapdestroy",
  "87ac6d71": "Removing near cache on destroying MapProxy",
  "b3c8701e": "Merge branch 'replicatedmap-nearcache-test' of github.com:noctarius/hazelcast",
  "03089fe8": "containsKey() checks near cache first",
  "816263b9": "Added nearcache testcase",
  "24936694": "Merge pull request #1383 from noctarius/fixed-replicatedmap-nearcache",
  "809a1639": "Fixed put to nearcache",
  "8b273482": "Added near cache to ReplicatedMap and made ClientNearCache a bit more generic",
  "4e60a457": "Marked LockTest as quick (except test specifically marked as slow).",
  "ba0df25d": "Marked hibernate tests as slow.",
  "046564c4": "Adds PartitionControlledIdTest to fast tests",
  "5d75b755": "AtomicReference: backup optimization for alter calls",
  "20390a15": "AtomicReference optimization for setAndGet",
  "1af8bca4": "Fixes #1186. Added near-cache clear process to clear operation. Added basic near-cache test.",
  "823c853c": "Fixes #1186. Moved near-cache clear process to clear operation. Added basic near-cache test.",
  "89ba006f": "Merge pull request #1168 from gurbuzali/near-cache-invalidation",
  "4be74828": "Merge pull request #1167 from gurbuzali/near-cache-invalidation-master",
  "2e1cfbe5": "upon disconnect clear client near-cache",
  "fa775ec5": "upon disconnect clear client near-cache",
  "93883ba7": "check near cache",
  "607ff84c": "check near cache",
  "9bccf0be": "check near cache",
  "a057f1d5": "Updated spy-memcached test dependency, removed its repository entry.",
  "b0da0cc6": "Updated spy-memcached test dependency, removed its repository entry.",
  "f78d0ff1": "map clear should trigger near cache eviction",
  "d534eff3": "map clear should trigger near cache eviction",
  "c7f610e9": "Merge pull request #1037 from gurbuzali/fix/3.x/near-cache-master",
  "4a7940a4": "Merge pull request #1036 from gurbuzali/fix/3.x/near-cache",
  "99fe9a0f": "fixes #1019 removed the optimization: putting evictable null when mapstore.load() returns null users can easily add such optimization to their mapstore implementation. meanwhile internal optimization causes bugs",
  "0960cb4b": "fixes #1019 removed the optimization: putting evictable null when mapstore.load() returns null users can easily add such optimization to their mapstore implementation. meanwhile internal optimization causes bugs",
  "119a5411": "some code cleanup & optimizations",
  "15a6e220": "some code cleanup & optimizations",
  "c43a597b": "some code cleanup & optimizations",
  "dcdf838c": "Fixes #848 . Memcache document update. And a small typo.",
  "64698cac": "Memcache document update. And a small typo.",
  "5dda3d82": "Merge pull request #740 from pveentjer/improvement/3.maintenance/inmemoryformat-cached-and-equals",
  "bc7b1c7a": "Merge pull request #738 from pveentjer/improvement/3.x/inmemoryformat-cached-and-equals",
  "32f07f74": "fixed spring hazelcast cache set after changing behaviour of set with zero ttl",
  "db4a3e1f": "Merge pull request #623 from pveentjer/fix/2.x/near-cache-in-client-incorrect",
  "8ce442ec": "Query, don't cache 'this' getter, can lead to oome.",
  "4340f926": "Merge pull request #581 from notz/3.0-client-nearcache-pattern",
  "cbedd395": "support patterns in client near cache config like on normal map config",
  "e3230e94": "Merge pull request #574 from pveentjer/fix/2.x/495-cache-value-stuck",
  "465fa0e8": "Fixes issue #495 : the cache value can get out of sync with the actual value due to a data race",
  "ad6f5ac1": "Fixes #281: optimization: call only once : HazelcastClient.getMap -> mapProxies.get(o)",
  "22465d63": "map eviction optimization",
  "68364085": "If generated ObjectOutputStream.pos < 1024 after writing all data a OOS.flush() is needed to write the cached data to the ObjectDataOutput",
  "3a68c674": "map near cache refactoring",
  "dc2cb194": "map near cache refactoring",
  "2e6ebbd1": "map optimization: null returned from get() is cached with 100 msec ttl",
  "468be360": "Separated in and out threads selector threads, this adds a significant performance boost.",
  "8a03ff5d": "Hibernate: Added invalidation to local cache remove.",
  "28299d7c": "Hibernate: Added invalidation to local cache remove op.",
  "21186d3c": "Fixed local region cache ttl check.",
  "63f1022b": "added checks for handling non existing map keys in client near cache implementation",
  "875dd979": "correctly handle non existing map keys in client near cache implementation",
  "9e2174e6": "only apply maximum cache size to guava cach if it is greater than zero",
  "849ac3a6": "map near cache revision, support for storing data as object",
  "74dd570d": "queue transaction test TransactionImpl checked for backupAddress TransactionObjects cached in context",
  "5a0fd87f": "near cache and connection timeout implementation for client",
  "191f709d": "Memcache & Rest typo, tests.",
  "e9ac7a8e": "pom update for memcache",
  "2d50103f": "Memcache client fix",
  "cf866882": "Memcache client",
  "4c59be7c": "backup test and queue performance test",
  "55b5a70b": "IMapRegionCache returns false even cache is updated.",
  "74f787df": "WIP: new query/index implementation New CachedDataRecord type ReflectionHelper caches Getters Parallel Predicate query when there is no index.",
  "e82e5efb": "map near cache revised",
  "c8521f15": "map ner cache",
  "712796dc": "added documentation for near cache on client",
  "fc87fa6d": "test for near cache system property",
  "eca573d6": "near cache is optional with System parameter",
  "1357c14b": "make near cache implementation abstract",
  "ab2ad5f7": "fix create a nearcache object before reading into",
  "f95a5bd3": "implemented near cache on client using Guava Cache",
  "e25d1e8c": "Added Hibernate 2nd level cache, local/invalidation mode.",
  "6dd6cbc2": "[WIP] - Local Hibernate cache mode implementation.",
  "75b53d28": "client thread is no longor fixed, now on it is going to use internal Hazelcast cached thread pool",
  "ed2f2d03": "Merged from commit 20eff51ea1f599d4f8e83a2df7c207e80f492425. Changed client threads from being hash based into cached pool. Blocking client operations should no longer block any other operation.",
  "e8164250": "performance improvements on server for client protocol",
  "dc50e15d": "Fixed stale read of put value when cache-value is true",
  "c5ff68ae": "logging performance improvement and some string contact improvements",
  "448090ec": "Updated backup of multi remove operation. This part should be fixed for performance or should be done out of ClientService.",
  "b6e45ca7": "Replaced Hibernate L2 cache super client param with lite member param.",
  "4c3ff6b8": "Added 'hibernate.cache.hazelcast.native_client_address' property and automatic member switching",
  "9fa505df": "cacheValue is false if mapForQueue or elastic_memory is enabled. Cleanup",
  "5952487c": "hibernate cache javadoc fix",
  "af65b8f3": "mapstore, nearcache config improvements, cleanups, fixes",
  "181622e9": "New MapStore Operations (no more StoreAwareOperation) NearCache optimizations",
  "236b16b9": "New MapStore Operations (no more StoreAwareOperation) NearCache optimizations",
  "62fdab63": "IMap.getAll(keys) near-cache support",
  "4a6dd778": "Removed the log, causing decreased performance on multimap remove",
  "6441d067": "Fixes memcache namespace issue New REST support for queue.poll over HTTP DELETE // poll in 3 seconds http://127.0.0.1:5701/hazelcast/rest/queues/default/3",
  "b454b953": "Fixes issue 538. IMap.destroy and MultiMap.destroy memory leaking the near cache.",
  "9708278d": "A Finest log that printed all multimap values on add was reducing the performance as the value set was growing. Commented out",
  "54f0d7aa": "Fix for Hibernate cache access strategies",
  "91ccd1e3": "Memcache bug fix. We should not ignore the 'flag' variable!",
  "3a097cec": "hibernate-cache-provider typo fix",
  "b6ee1a8b": "mapstore and nearcache config builder patch and hibernate 2nd level cache config",
  "101e35da": "mapstore and nearcache config builder patch",
  "158b4e57": "mapstore and nearcache config builder patch",
  "9384f039": "The test is fixed. It was sometimes failing because of the fact that the map.asyncRemove call is executed so fast. We have to make sure that the execution takes long enough to get TimeoutException.",
  "981f0d2e": "Hazelcast Client performance enhancements: - Do not flush the socket outputstream if you don't have to - ParallelExecutor is costly, slows down client executions on the server side",
  "8c765a30": "RecordEntry is removed <cache-value> default true <read-backup-data> default false",
  "e831be57": "record look up optimization. Request contains the related Record Unnecessary concurrent map. mapCalls",
  "1c1c7f81": "command ns wasn't working. Because instance proxies were cached. Fixed now.",
  "bab95c5c": "Queue enhancements. RecordEntry cached value-object invalidation upon value change.",
  "2c7d337c": "Fixes issue 370. Update issue 398. Query optimization. pom updates to 1.9.1-SNAPSHOT",
  "d85c703b": "Cleanup Better integration between REST and Memcache interfaces",
  "aa47cf8a": "HazelcastTest was splitted into quick'n'fast and long run parts",
  "da86f002": "checkstyle codecov.yml CONTRIBUTING.md distribution docs extensions hazelcast hazelcast-archunit-rules hazelcast-build-utils hazelcast-coverage-report hazelcast-it hazelcast-spring hazelcast-spring-tests hazelcast-sql hazelcast-tpc-engine images kubernetes-rbac.yaml LICENSE licenses modulepath-tests mvnw mvnw.cmd NOTICE owasp-check-suppressions.xml pom.xml README.md SECURITY.md src Fixed HazelcastCacheProvider && HazelcastCache timestamp mismatch. checkstyle codecov.yml CONTRIBUTING.md distribution docs extensions hazelcast hazelcast-archunit-rules hazelcast-build-utils hazelcast-coverage-report hazelcast-it hazelcast-spring hazelcast-spring-tests hazelcast-sql hazelcast-tpc-engine images kubernetes-rbac.yaml LICENSE licenses modulepath-tests mvnw mvnw.cmd NOTICE owasp-check-suppressions.xml pom.xml README.md SECURITY.md src Added 2nd level cache to connect Hazelcast cluster as super-client or via native-client.",
  "f62a94ad": "Fix for the destroy(). it should not shutdown the cachedexecutorservice. HC.shutdown should.",
  "f3fb9eed": "Fixes issue 290. Client New Buffered OutRunnable fix. Flush when you have enough written. ServiceThread wait at most 10ms. Shutdown() wait at most 3 seconds Client packet uses cached ByteBuffer for header read/write Cleanup.",
  "9693db99": "Client New Buffered OutRunnable fix. Flush when you have enough written. ServiceThread wait at most 10ms. Shutdown() wait at most 3 seconds Client packet uses cached ByteBuffer for header read/write Cleanup.",
  "e583921f": "executormanager stops cached executor service. no hz. threads hanging. queue backup ignore interruptions",
  "90c6348b": "gzip performance fix. cluster membership listener concurrency fix.",
  "ecf8113e": "Lock should invalidate the locally owned cache. Fixes issue 265.",
  "7c26e1a3": "Query index optimizations.",
  "aa8ce9b4": "Locally owned entries are now cached as objects.",
  "30d92086": "JMX details (map, queue contents) optional and disabled by default because it is extremely expensive and slows everything down.",
  "aeb68852": "Added java doc and small optimizations.",
  "f771194f": "Small performance optimization and code cleanup",
  "a04c3a48": "Small optimization",
  "160daaaf": "Small optimization",
  "4f750ea6": "Small optimization",
  "cac4f77c": "Small optimizations",
  "67164999": "Small optimization",
  "eb3f9dd1": "Near cache invalidation support. Fixes issue 173.",
  "cb7e5a2f": "Performance enhancement for the map.get on the locally owned entries. Significant performance boost for get calls. Locally owned records are cached. Get call will first look into the cache. if found, it will check to see if the record is still active (not removed). if not found, call will continue as normal and ServiceThread will offer the locally owned Record to the cache (only for local calls). if node starts migrating, cache is cleared.",
  "94095d66": "unit test for performance measurement and benchmarking",
  "4f3f7a05": "Convenience class for performance measurement",
  "fdbb6e1b": "Added performance tests",
  "be2a9905": "Minor optimizations + Documentation updates",
  "1ffeadf5": "TTL for Map entries + Minor optimizations + Documentation of MapEntry and backups",
  "4b4218c6": "TTL for Map entries + Minor optimizations",
  "e0a2d9d6": "Fix for issue 34 (There is no ready-to-run performance tests) now there is...",
  "8a237c56": "Fix for issue 24 ClusterService can use an array based lookup for faster/cleaner Invocation processing"
}, "hbase": {
  "ce29f97a": "HBASE-27848:Should fast-fail if unmatched column family exists when using ImportTsv (#5225)",
  "ced4ff18": "HBASE-27535: Separate slowlog thresholds for scans vs other requests (#5188)",
  "d56e7f29": "HBASE-27796 Improve MemcachedBlockCache (#5181)",
  "2b098b08": "HBASE-27536: Include more request information in slowlog for Scans (#5155)",
  "f20efafb": "HBASE-27650 Merging empty regions corrupts meta cache (#5037)",
  "c30f53c1": "HBASE-27253 make slowlog configurations dynamic (#4926)",
  "54a82302": "HBASE-27365 Minimise block addition failures due to no space in bucket cache writers queue by introducing wait time - addendum added mistakenly removed in-memory flag",
  "5ffb2968": "HBASE-27365 Minimise block addition failures due to no space in bucket cache writers queue by introducing wait time - addendum fixing the test case failure",
  "14b3899a": "HBASE-27365 Minimise block addition failures due to no space in bucket cache writers queue by introducing wait time (#4805)",
  "3f4734ed": "HBASE-27370 Avoid decompressing blocks when reading from bucket cache… (#4781)",
  "70a2ee17": "HBASE-27053 IOException during caching of uncompressed block to the block cache (#4610)",
  "779c4e23": "HBASE-27186 Report block cache size metrics separately for L1 and L2 (#4608)",
  "50f11151": "HBASE-26790 getAllRegionLocations can cache locations with null hostname (#4565)",
  "1aa07d5e": "HBASE-27043 Let lock wait timeout to improve performance of SnapshotHFileCleaner (#4437)",
  "369adcdf": "HBASE-27019 Minor compression performance improvements (#4420)",
  "e9046a64": "HBASE-27000 Block cache stats (Misses Caching) display error in RS web UI (#4406)",
  "da551540": "HBASE-26989 TestStochasticLoadBalancer fixes for performance and consistency (#4385)",
  "f2f2a895": "HBASE-26942 cache region locations when getAllRegionLocations (#4335)",
  "2a3ac5b3": "HBASE-26878 TableInputFormatBase should cache RegionSizeCalculator (#4271)",
  "b3b4405d": "HBASE-26576 Allow pluggable queue to be used with the fast path executor or normal balanced executor (#3944)",
  "b948ddbf": "HBASE-26347 Support detect and exclude slow DNs in fan-out of WAL (#3800)",
  "c148d5bb": "HBASE-26479 Print too slow/big scan's operation_id in region server log (#3870)",
  "82ccd331": "HBASE-26186 jenkins script for caching artifacts should verify cached file before relying on it. (#3590)",
  "d19728b8": "HBASE-25642 Fix or stop warning about already cached block (#3638)",
  "b2487301": "HBASE-26151 Reimplement MasterAddressTracker to also cache backup master addresses (#3548)",
  "fb4af2a8": "HBASE-25914 Provide slow/large logs on RegionServer UI (#3319)",
  "6a778728": "HBASE-25894 Improve the performance for region load and region count related cost functions (#3276)",
  "5910e9e2": "HBASE-25767 CandidateGenerator.getRandomIterationOrder is too slow on large cluster (#3149)",
  "b2f85e5f": "HBASE-23887 AdaptiveLRU cache (#2934)",
  "84c4033b": "HBASE-25489 improve performance of --parse-release-tags (#2867)",
  "eef07682": "Shenshengli hbase-25450 The parameter 'hbase.bucketcache.size' is misdescribed (#2821)",
  "56dd3eba": "HBASE-25363 Improve performance of HFileLinkCleaner by using ReadWriteLock instead of synchronize",
  "fb6e498b": "HBASE-25277 postScannerFilterRow impacts Scan performance a lot in HBase 2.x (#2675)",
  "dfe36722": "HBASE-25127 Enhance PerformanceEvaluation to profile meta replica performance. (#2644) (#2682)",
  "1528aaca": "Revert 'HBASE-25127 Enhance PerformanceEvaluation to profile meta replica performance. (#2644)'",
  "4ee22704": "HBASE-25127 Enhance PerformanceEvaluation to profile meta replica performance. (#2644)",
  "bdcafa89": "HBASE-24025: Improve performance of move_servers_rsgroup by using async region move API (#1549)",
  "58618e35": "HBASE-24991 Replace MovedRegionsCleaner with guava cache (#2357)",
  "ef5da4a6": "HBASE-24949 Optimize FSTableDescriptors.get to not always go to fs when cache miss (#2317)",
  "5b515de7": "HBASE-24915 Improve BlockCache read performance by specifying BlockType (#2288)",
  "a4e5ccc7": "HBASE-24742 Improve performance of SKIP vs SEEK logic.",
  "2ecbaf13": "HBASE-24547 : Thrift support for HBASE-23941 (Operator support for get_slowlog_responses API) (#1892)",
  "f0f9a20c": "HBASE-23941 : FilterBy operator support in get_slowlog_responses API (#1793)",
  "e1d7dc82": "HBASE-24405 : Document hbase:slowlog related operations (#1747)",
  "86a2692d": "HBASE-23938 : System table hbase:slowlog to store complete slow/large… (#1681)",
  "294c228c": "HBASE-24211: Create table is slow in large cluster when AccessController is enabled. (#1631)",
  "39a1bc53": "Revert 'HBASE-24212: Create table is slow in large cluster when AccessController is enabled. (#1546)'",
  "e6cc5eb2": "HBASE-24211: Create table is slow in large cluster when AccessController is enabled. (#1546)",
  "0b3918fe": "HBASE-24021 Fail fast when bulkLoadHFiles method catch some IOException (#1343)",
  "f411e395": "HBASE-22978 : Online slow response log (#1228) Addendum to fix errorprone ERROR",
  "b24ea32b": "HBASE-22978 : Online slow response log",
  "77229c79": "HBASE-23350 Make compaction files cacheonWrite configurable based on threshold",
  "eee9480c": "HBASE-23066 Allow cache on write during compactions when prefetching … (#935)",
  "ec9bd20e": "Revert 'HBASE-23066 Allow cache on write during compactions when prefetching is (#919)'",
  "d561130e": "HBASE-23066 Allow cache on write during compactions when prefetching is (#919)",
  "0043dfeb": "HBASE-23107 Avoid temp byte array creation when doing cacheDataOnWrite (#678)",
  "ef79b40e": "HBASE-23035 Retain region to the last RegionServer make the failover slower (addendum) (#652)",
  "cb04c6c1": "HBASE-23035 Retain region to the last RegionServer make the failover slower (#631)",
  "83e77940": "HBASE-22943 Various procedures should not cache log trace level (#557)",
  "f4ff4803": "HBASE-20509 putting List in HashSet directly without using addAll function to improve performance",
  "a9773ec5": "HBASE-22417 DeleteTableProcedure.deleteFromMeta method should remove table from Master's table descriptors cache",
  "9a4a8ef2": "HBASE-22363 Remove hardcoded number of read cache block buckets",
  "06f5c43d": "HBASE-22610 [BucketCache] Rename hbase.offheapcache.minblocksize",
  "0e34dcbf": "Revert 'HBASE-22610 [BucketCache] Rename hbase.offheapcache.minblocksize'",
  "fe450b50": "HBASE-22610 [BucketCache] Rename hbase.offheapcache.minblocksize",
  "d1eb6171": "HBASE-22127 Ensure that the block cached in the LRUBlockCache offheap is allocated from heap",
  "876d2acf": "HBASE-22284 optimization StringBuilder.append of AbstractMemStore.toString #182",
  "5dcfe5f8": "HBASE-22441 BucketCache NullPointerException in cacheBlock",
  "47b4ab7b": "HBASE-22301 Consider rolling the WAL if the HDFS write pipeline is slow",
  "b0075a16": "HBASE-22278 RawAsyncHBaseAdmin should not use cached region location",
  "353f9226": "HBASE-22236 AsyncNonMetaRegionLocator should not cache HRegionLocation with null location",
  "9e273b3f": "HBASE-22092 Typo in block cache monitoring documentation",
  "4c1765f1": "HBASE-22092 Typo in block cache monitoring documentation",
  "fd6bc5d9": "HBASE-21874 Bucket cache on Persistent memory",
  "d9793c31": "Revert 'HBASE-21874 Bucket cache on Persistent memory'",
  "763202d4": "HBASE-21874 Bucket cache on Persistent memory",
  "c90e9ff5": "HBASE-21806 add an option to roll WAL on very slow syncs",
  "e92b62be": "HBASE-21775 The BufferedMutator doesn't ever refresh region location cache Fix server location metadata refresh in multi-actions",
  "35ed5d6c": "HBASE-21750 Most of KeyValueUtil#length can be replaced by cell#getSerializedSize for better performance because the latter one has been optimized",
  "b0131e19": "HBASE-21734 Some optimization in FilterListWithOR",
  "67d6d508": "HBASE-21568 Use CacheConfig.DISABLED where we don't expect to have blockcache running",
  "6d0dc960": "HBASE-21387 Race condition surrounding in progress snapshot handling in snapshot cache leads to loss of snapshot files",
  "42d7ddc6": "HBASE-21103 nightly job should make sure cached yetus will run.",
  "56ac4705": "HBASE-21196 HTableMultiplexer clears the meta cache after every put operation",
  "86cb8e48": "HBASE-21228 Memory leak since AbstractFSWAL caches Thread object and never clean later",
  "39738831": "HBASE-21025 Add cache for TableStateManager",
  "1e065095": "HBASE-20697 Can't cache All region locations of the specify table by calling table.getRegionLocator().getAllRegionLocations()",
  "d2daada9": "HBASE-20447 Only fail cacheBlock if block collisions aren't related to next block metadata",
  "a67909d3": "HBASE-20545 Improve performance of BaseLoadBalancer.retainAssignment",
  "2e9b96e4": "HBASE-20414 TestLockProcedure#testMultipleLocks may fail on slow machine",
  "1633d9d6": "HBASE-20470 [2.0.0RC1] has broken unit tests... Fix test that depended upon flush being slow and one family only. Fix MemStoreSize compare to allow passing alternate implementation (needed when IMC was no longer default everywhere).",
  "70377bab": "HBASE-20059 Make sure documentation is updated for the offheap Bucket cache usage",
  "e2b0490d": "HBASE-16499 slow replication for small HBase clusters - addendum for updating in the document",
  "5937202f": "HBASE-16499 slow replication for small HBase clusters",
  "f346a144": "HBASE-20116 addendum fix javadoc and also a simple optimization",
  "6cfa208a": "HBASE-17825: Backup further optimizations",
  "51954359": "HBASE-18452 VerifyReplication by Snapshot should cache HDFS token before submit job for kerberos env",
  "6011641c": "HBASE-19581 Fixed remaining Checkstyle error in hbase-external-blockcache and enabled Checkstyle to fail on violations",
  "8580ba7b": "HBASE-19643 Need to update cache location when get error in AsyncBatchRpcRetryingCaller",
  "d5aefbd2": "HBASE-19511 Splits causes blocks to be cached again and so such blocks cannot be evicted from bucket cache (Ram) Signed-off Duo Zhang, Anoop Sam John <palomino219@gmail.com, anoop.hbase@gmail.com>",
  "86043ef6": "HBASE-19000 Group multiple block cache clear requests per server",
  "ba4f9f83": "HBASE-19357 Bucket cache no longer L2 for LRU cache.",
  "d107e33f": "Revert 'HBASE-19357 Bucket cache no longer L2 for LRU cache.'",
  "d34e30ca": "HBASE-19357 Bucket cache no longer L2 for LRU cache.",
  "1a4037b9": "HBASE-19311 Promote TestAcidGuarantees to LargeTests and start mini cluster once to make it faster",
  "bff619ef": "HBASE-19187 Remove option to create on heap bucket cache.",
  "c463e9c8": "HBASE-19185 ClassNotFoundException: com.fasterxml.jackson.*",
  "2ceeb54c": "HBASE-18652 Expose individual cache stats in a CombinedCache through JMX (Biju Nair); ADDENDUM",
  "f36fb11e": "HBASE-18757 Fix improper bitwise & in bucketcache offset calculation",
  "f362ef70": "HBASE-18737 Display configured max size of memstore and cache on RS UI",
  "36371ace": "HBASE-18652 Expose individual cache stats in a CombinedCache through JMX",
  "a7270cc0": "HBASE-18705 bin/hbase does not find cached_classpath.txt",
  "321bc55f": "HBASE-18647 Parameter cacheBlocks does not take effect in REST API for scan",
  "04f114b8": "HBASE-18532 Improve cache related stats rendered on RS UI",
  "5915d73a": "HBASE-18485 Performance issue: ClientAsyncPrefetchScanner is slower than ClientSimpleScanner",
  "bc93b661": "HBASE-16993 BucketCache throw java.io.IOException: Invalid HFile block magic when configuring hbase.bucketcache.bucket.sizes.",
  "0c49185c": "HBASE-17738 BucketCache startup is slow - addendum (Ram)",
  "d0e4a643": "HBASE-17738 BucketCache startup is slow (Ram)",
  "7d007eac": "HBASE-17705 Procedure execution must fail fast if procedure is not registered (Vladimir Rodionov)",
  "50bb0457": "HBASE-18002 Investigate why bucket cache filling up in file mode in an exisiting file is slower (Ram)",
  "aef67426": "HBASE-18281 created private static pattern matcher for performance",
  "1520c8fd": "HBASE-18056 Make the default behavior of CompactionPipeline to merge it segments into one, due to better read performance in this case",
  "ad9ffaaa": "HBASE-18055 Releasing L2 cache HFileBlocks before shipped() when switching from pread to stream causes result corruption",
  "da68537a": "HBASE-17786 Create LoadBalancer perf-test tool to benchmark Load Balancer algorithm performance",
  "1a701ce4": "HBASE-17836 CellUtil#estimatedSerializedSizeOf is slow when input is ByteBufferCell",
  "16900c8c": "Added hbase high performance cookbook to the book resources page on the website",
  "e39e0e63": "HBASE-17582 Fix broken drop page cache hint (broken by HBASE-15236).",
  "e67eb6c4": "HBSE-15314 Allow more than one backing file in bucketcache (Chunhui Shen)",
  "0ecb6782": "HBASE-17723 ClientAsyncPrefetchScanner may end prematurely when the size of the cache is one",
  "e7d16db2": "HBASE-17057 Minor compactions should also drop page cache (Ashu Pachauri)",
  "a8fd1119": "HBASE-16630 Handle Fragmentation in bucket cache",
  "e4c06c12": "HBASE-17590 Drop cache hint should work on store file write path (Ashu Pachauri)",
  "6c5eec24": "HBASE-17484 Add non cached version of OffheapKV for write path (Ram)",
  "521730eb": "HBASE-16869 Fixed typo in 'Disabling Blockcache' doc",
  "da97569e": "HBASE-17090 Procedure v2 - fast wake if nothing else is running (Matteo Bertozzi)",
  "66781864": "HBASE-17330 SnapshotFileCache will always refresh the file cache (Jianwei Cui)",
  "b6f5d5b8": "HBASE-17151 New API to create HFile.Reader without instantiating block cache (Vladimir Rodionov)",
  "ec9c9e20": "HBASE-17127 Locate region should fail fast if underlying Connection already closed",
  "81623a35": "HBASE-17047 Add an API to get HBase connection cache statistics (Weiqing Yang)",
  "a3f14906": "HBASE-16950 Print raw stats in the end of proc performance tools for parsing results from scripts.",
  "0ae211eb": "HBASE-16414 Improve performance for RPC encryption with Apache Common Crypto (Colin Ma)",
  "ec87b4bf": "HBASE-15109 HM/RS failed to start when 'fs.hdfs.impl.disable.cache' is set to true (Pankaj Kumar)",
  "0daeb635": "HBASE-16763 Remove unintentional dependency on net.sf.ehcache.search.Results",
  "b952e647": "HBASE-15560 TinyLFU-based BlockCache - revert pending performance verification",
  "250ad644": "HBASE-16738 L1 cache caching shared memory HFile block when blocks promoted from L2 to L1.",
  "19bbf445": "HBASE-16651 LRUBlockCache#returnBlock should try return block to Victim Handler L2 cache.",
  "da3abbcb": "HBASE-16534 Procedure v2 - Perf Tool for Scheduler. Tool to test performance of locks and queues in procedure scheduler independently from other framework components. Inserts table and region operations in the scheduler, then polls them and exercises their locks. Number of tables, regions and operations can be set using cli args.",
  "8ef6c763": "HBASE-16388 Prevent client threads being blocked by only one slow region server",
  "981200bf": "HBASE-16612 Use array to cache Types for KeyValue.Type.codeToType (Phil Yang)",
  "c66bb48c": "HBASE-16101 Tool to microbenchmark procedure WAL performance.",
  "0d99e827": "HBASE-16213 A new HFileBlock structure for fast random get. (binlijin)",
  "32c21f45": "HBASE-14921 In-Memory MemStore Flush and Compaction : Memory optimizations. (Anastasia)",
  "fb4ef535": "HBASE-15635 Mean age of Blocks in cache (seconds) on webUI should be greater than zero",
  "907ac1f6": "HBASE-16341 Missing bit on 'Regression: Random Read/WorkloadC slower in 1.x than 0.98'",
  "977858c9": "HBASE-16362 Mob compaction does not set cacheBlocks to false when creating StoreScanner",
  "19c609fa": "HBASE-16303 FilterList with MUST_PASS_ONE optimization (Ram)",
  "78361243": "HBASE-16296 Reverse scan performance degrades when using filter lists (Ted Yu)",
  "d016338e": "HBASE-16157 The incorrect block cache count and size are caused by removing duplicate block key in the LruBlockCache (ChiaPing Tsai)",
  "561eb829": "HBASE-15844 We should respect hfile.block.index.cacheonwrite when write intermediate index Block",
  "5a7c9939": "HBASE-16157 The incorrect block cache count and size are caused by removing duplicate block key in the LruBlockCache (ChiaPing Tsai)",
  "432868b0": "HBASE-15976 RegionServerMetricsWrapperRunnable will be failure when disable blockcache. - Addendum",
  "e768c4af": "HBASE-15976 RegionServerMetricsWrapperRunnable will be failure when disable blockcache.",
  "ee86e91e": "HBASE-16023 Fastpath for the FIFO rpcscheduler Adds an executor that does balanced queue and fast path handing off requests directly to waiting handlers if any present. Idea taken from Apace Kudu (incubating). See https://gerrit.cloudera.org/#/c/2938/7/src/kudu/rpc/service_queue.h",
  "fa50d456": "HBASE-15971 Regression: Random Read/WorkloadC slower in 1.x than 0.98 Restore FIFO as the default in place of 'deadline' that sorted on request priority. The sort costs us throughput. Enable it if you want it rather than have it as default.",
  "7d9d3ea3": "HBASE-15890 Allow setting cacheBlocks for TScan",
  "4793988a": "HBASE-15856 Don't cache unresolved addresses for connections",
  "ce318a29": "HBASE-15658 Avoid excess meta cache clearing for RegionServerCallable",
  "03f3c392": "HBASE-15674 HRegionLocator#getAllRegionLocations should put the results in cache",
  "6dd938c2": "HBASE-15640 L1 cache doesn't give fair warning that it is showing partial stats only when it hits limit",
  "ff6a3395": "HBASE-15569 Make Bytes.toStringBinary faster",
  "cadfb21f": "HBASE-15064 BufferUnderflowException after last Cell fetched from an HFile Block served from L2 offheap cache - Addendum.",
  "12f66e30": "HBASE-15477 Purge 'next block header' from cached blocks",
  "c49d0caf": "Revert 'HBASE-15477 Purge 'next block header' from cached blocks' Overcommit. Revert.",
  "54a543de": "Revert 'HBASE-15477 Purge 'next block header' from cached blocks'",
  "000117ad": "HBASE-15477 Purge 'next block header' from cached blocks",
  "ef94b552": "HBASE-15477 Purge 'next block header' from cached blocks",
  "e477c143": "HBASE-15354 Use same criteria for clearing meta cache for all operations (addendum) (Ashu Pachauri)",
  "4483b3cb": "HBASE-15338: Add a option to disable the data block cache for testing the performance of underlying file system",
  "27cf0c8c": "HBASE-15354 Same criteria to clear metacache across operations (Ashu Pachauri)",
  "8f6e2978": "HBASE-15351 Fix description of hbase.bucketcache.size in hbase-default.xml",
  "a8073c4a": "HBASE-15232 Handle region location cache mgmt in AsyncProcess for multi()'s",
  "ab50c7c8": "HBASE-15255 Add pointer to linkedin blog on putting jvm logs on fast disk",
  "dfd8a31a": "HBASE-15221 Reload the cache on re-tried puts in HTableMultiplexer and adds a close() method to HTableMultiplexer",
  "7cd09bfb": "HBASE-15064 BufferUnderflowException after last Cell fetched from an HFile Block served from L2 offheap cache.",
  "6e2c5d21": "HBASE-15014 Fix filterCellByStore in WALsplitter is awful for performance",
  "e75e26e3": "HBASE-14849 Add option to set block cache to false on SparkSQL executions (Zhan Zhang)",
  "7099ab4c": "HBASE-14984 Allow memcached block cache to set optimze to false",
  "9a91f5ac": "HBASE-14737 Clear cachedMaxVersions when HColumnDescriptor#setValue(VERSIONS, value) is called (Pankaj Kumar)",
  "a591df10": "HBASE-14708 Use copy on write Map for region location cache",
  "a48d3098": "HBASE-14793 Allow limiting size of block into L1 block cache.",
  "ea795213": "HBASE-14778 Make block cache hit percentages not integer in the metrics system",
  "263a0adf": "HBASE-14463 Severe performance downgrade when parallel reading a single key from BucketCache (Yu Li)",
  "e874a31d": "HBASE-14625 Chaos Monkey should shut down faster",
  "0ed8b0e5": "HBASE-14597 Fix Groups cache in multi-threaded env",
  "1aab3914": "HBASE-14582 Regionserver status webpage bucketcache list can become huge",
  "b014ba12": "HBASE-14480 Small optimization in SingleByteBuff.",
  "20ed465d": "HBASE-14205 RegionCoprocessorHost System.nanoTime() performance bottleneck",
  "7b08f4c8": "HBASE-14334 Move Memcached block cache in to it's own optional module.",
  "b7a67c63": "HBASE-14314 Metrics for block cache should take region replicas into account",
  "a399ac9c": "HBASE-14098 Allow dropping caches behind compactions",
  "aa3538f8": "HBASE-14188- Read path optimizations after HBASE-11425 profiling- Addendum(Ram)",
  "7a9e10dc": "HBASE-14188 - Read path optimizations after HBASE-11425 profiling (Ram)",
  "5d2708f6": "HBASE-14186 Read mvcc vlong optimization.",
  "e087a9ef": "HBASE-14146 Fix Once replication sees an error it slows down forever",
  "88038cf4": "HBASE-14120 ByteBufferUtils#compareTo small optimization.",
  "a4bd2b78": "HBASE-13448 New Cell implementation with cached component offsets/lengths.",
  "623fd638": "HBASE-13876 Improving performance of HeapMemoryManager",
  "cba9ea61": "HBASE-13821 WARN if hbase.bucketcache.percentage.in.combinedcache is set",
  "7f2b33db": "HBASE-13071 synchronous scanner -- cache size-in-bytes bug fix",
  "1fbde3ab": "HBASE-13721 - Improve shell scan performances when using LIMIT(JMS)",
  "92af695e": "HBASE-13307 Making methods under ScannerV2#next inlineable, faster",
  "fef8ae9c": "HBASE-13406 TestAccessController is flaky when create is slow",
  "a4a235b8": "HBASE-13170 Allow block cache to be external",
  "5e1fc258": "HBASE-13311 TestQuotaThrottle flaky on slow machine",
  "65d37818": "HBASE-13281 'hbase.bucketcache.size' description in hbase book is not correct (Ram)",
  "e405017a": "HBASE-12561 Replicas of regions can be cached from different instances of the table in MetaCache",
  "f9cf565f": "HBASE-9910 TestHFilePerformance and HFilePerformanceEvaluation should be merged in a single HFile performance test class (Vikas Vishwakarma)",
  "9d6b237a": "HBASE-12992 TestChoreService doesn't close services, that can break test on slow virtual hosts (Andrey Stepachev)",
  "4388fed8": "HBASE-12957 region_mover#isSuccessfulScan may be extremely slow on region with lots of expired data (Hongyu Bi)",
  "b866e01a": "HBASE-12925 Use acl cache for doing access control checks in prepare and clean phases of Bulkloading (Srikanth Srungarapu)",
  "8b7a20f4": "HBASE-12393 The regionserver web will throw exception if we disable block cache (ChiaPing Tsai)",
  "305267b8": "HBASE-12270 A bug in the bucket cache, with cache blocks on write enabled (Liu Shaohui)",
  "baa2d053": "HBASE-12740 Improve performance of TestHBaseFsck",
  "734324e8": "Revert 'HBASE-12740 Improve performance of TestHBaseFsck' Undo because Jurriaan Mous did update in meantime.",
  "042743ff": "HBASE-12740 Improve performance of TestHBaseFsck",
  "0d094d87": "HBASE-12768 - Support enable cache_data_on_write in Shell while creating table",
  "15cf0a6e": "HBASE-12223 MultiTableInputFormatBase.getSplits is too slow (Yuanbo Peng)",
  "eb4c194a": "HBASE-10536 ImportTsv should fail fast if any of the column family passed to the job is not present in the table (denny joesph)",
  "a98f2d30": "HBASE-11939 Document Compressed Blockcache",
  "c29318c0": "Revert 'HBASE-12457 Regions in transition for a long time when CLOSE interleaves with a slow compaction.'",
  "9d634772": "Revert 'Amend HBASE-12457 Regions in transition for a long time when CLOSE interleaves with a slow compaction; Test import fix'",
  "f6d8cde1": "Amend HBASE-12457 Regions in transition for a long time when CLOSE interleaves with a slow compaction; Test import fix",
  "231d3ee2": "HBASE-12457 Regions in transition for a long time when CLOSE interleaves with a slow compaction.",
  "71f73fcd": "HBASE-12402 ZKPermissionWatcher race condition in refreshing the cache leaving stale ACLs and causing AccessDenied",
  "f20fac41": "HBASE-12384 TestTags can hang on fast test hosts",
  "889333a6": "HBASE-12313 Redo the hfile index length optimization so cell-based rather than serialized KV key",
  "728fc543": "HBASE-12264 ImportTsv should fail fast if output is not specified and table does not exist (Ashish)",
  "3c1fbd2d": "HBASE-12198 Fix the bug of not updating location cache",
  "e952e736": "HBASE-12199 Make TestAtomicOperation and TestEncodedSeekers faster",
  "7546f9a4": "HBASE-12191 Make TestCacheOnWrite faster.",
  "bc4f25ff": "HBASE-12104 Some optimization and bugfix for HTableMultiplexer (Yi Deng)",
  "0c0d7eb2": "Amend HBASE-12156 TableName cache isn't used for one of valueOf methods; make TestTableName a medium test",
  "ff847978": "HBASE-12156 TableName cache doesn't used for once of valueOf methods (Andrey Stepachev)",
  "9f780499": "HBASE-11949 Setting hfile.block.cache.size=0 doesn't actually disable blockcache",
  "29b274a1": "HBASE-11845 HFile tool should implement Tool, disable blockcache by default",
  "eec15bd1": "HBASE-11331 [blockcache] lazy block decompression",
  "a20c2376": "Note on bucketcache needs 0.98.6",
  "edac8456": "HBASE-11898 CoprocessorHost.Environment should cache class loader instance. (Vladimir Rodionov)",
  "ea32555b": "HBASE-11752 Document blockcache prefetch option (Misty Stanley-Jones)",
  "05e0f747": "Revert 'Document blockcache prefetch option (Misty Stanley-Jones)'",
  "7f567830": "Document blockcache prefetch option (Misty Stanley-Jones)",
  "1f1a676c": "edit on why bucketcache",
  "cabcb6ca": "HBASE-11717 Remove unused config 'hbase.offheapcache.percentage' from hbase-default.xml and book. (Anoop)",
  "c2bfc647": "HBASE-11705 callQueueSize should be decremented in a fail-fast scenario (Esteban Gutierrez)",
  "d7011a9d": "HBASE-11527 Cluster free memory limit check should consider L2 block cache size also when L2 cache is onheap. (Anoop)",
  "3cff0d34": "Add note on how to set up blockcache so we cache META blocks only and pull in DATA blocks on each access",
  "7335f5f8": "Edit of doc on block cache adding reference to blockcache doc with findings recommending when to use offheap blockcache",
  "e11e89e5": "HBASE-11697 Improve the 'Too many blocks' message on UI blockcache status page (Mikhail Antonov)",
  "12d9697d": "HBASE-11527 Cluster free memory limit check should consider L2 block cache size also when L2 cache is onheap. (Anoop)",
  "62d51bb3": "HBASE-11621 Make MiniDFSCluster run faster",
  "dcec5514": "Add doc of since removed hbase.bucketcache.percentage.in.combinedcache",
  "60d3e3c9": "More suggestion folks use offheap block cache",
  "19979d77": "Add doc on direct memory, the block cache UI additions, list block cache options, downplay slab cache even more",
  "a99b71da": "Add a upgrading to 1.0 section to the upgrade part of the book; talk about HBASE-11520 removing hbase.bucketcache.percentage.in.combinedcache",
  "8a481b87": "HBASE-11520 Simplify offheap cache config by removing the confusing 'hbase.bucketcache.percentage.in.combinedcache'",
  "c694ec11": "HBASE-11240 Print hdfs pipeline when hlog's sync is slow ADDENDUM",
  "96dcd67f": "HBASE-11514 Fix findbugs warnings in blockcache",
  "ad78a9cf": "HBASE-11240 Print hdfs pipeline when hlog's sync is slow (Liu Shaohui)",
  "14a09e79": "HBASE-11332 Fix for metas location cache from HBASE-10785",
  "48ffa4d5": "HBASE-10785 Metas own location should be cached",
  "579f305b": "HBASE-10794 multi-get should handle replica location missing from cache",
  "d313103a": "HBASE-10791 Add integration test to demonstrate performance improvement",
  "3ed3c551": "HBASE-11364 [BlockCache] Add a flag to cache data blocks in L1 if multi-tier cache",
  "3d3784dd": "HBASE-11329 Minor fixup of new blockcache tab number formatting",
  "2ab3b325": "HBASE-11320 Reenable bucket cache logging",
  "369141b7": "HBASE-11279 Block cache could be disabled by mistake",
  "be85f89c": "Amend HBASE-9857 Blockcache prefetch option; add missing license header to correct file this time",
  "ea9e6576": "HBASE-11229 Change block cache percentage metrics to be doubles rather than ints -- ADDENDUM to fix broke TestMetricsRegionServer",
  "46e53b08": "HBASE-11229 Change block cache percentage metrics to be doubles rather than ints",
  "264725d5": "Amend HBASE-9857 Blockcache prefetch option; add missing license header",
  "58818496": "HBASE-9857 Blockcache prefetch option",
  "a5f6c55e": "HBASE-11171 More doc improvements on block cache options -- ADDENDUM TO FIX JAVADOC WARNINGS",
  "b42fd10a": "HBASE-11171 More doc improvements on block cache options",
  "19f6522e": "HBASE-11098 Improve documentation around our blockcache options - addendum",
  "01f6b954": "HBASE-11098 Improve documentation around our blockcache options",
  "4b2a4d10": "HBASE-10926 Use global procedure to flush table memstore cache (Jerry He)",
  "bdef3320": "HBASE-11010 TestChangingEncoding is unnecessarily slow.",
  "e124054e": "HBASE-10850 essential column family optimization is broken",
  "5ae0acfd": "Add link to Nick's blockcache series",
  "98cf3e27": "HBASE-10476 HBase Master log grows very fast after stopped hadoop (due to connection exception) (Demai Ni)",
  "f032023e": "HBASE-10660 MR over snapshots can OOM when alternative blockcache is enabled",
  "c14dd4f5": "HBASE-10506 Fail-fast if client connection is lost before the real call be executed in RPC layer",
  "74b5a394": "HBASE-10156 FSHLog Refactor (WAS -> Fix up the HBASE-8755 slowdown when low contention)",
  "16943fe2": "HBASE-10344 Improve write performance by ignoring sync to hdfs when an asyncer's writes have been synced by other asyncer",
  "6bd06665": "HBASE-10207 ZKVisibilityLabelWatcher : Populate the labels cache on startup",
  "5f3672b7": "HBASE-10138 incorrect or confusing test value is used in block caches",
  "c56d41dc": "HBASE-5349 Automagically tweak global memstore and block cache sizes based on workload",
  "3fb88f10": "HBASE-10079 Race in TableName cache",
  "997d1bb7": "HBASE-10026 HBaseAdmin#createTable could fail if region splits too fast",
  "d9b983bb": "HBASE-10001 Add a coprocessor to help testing the performances without taking into account the disk i/o",
  "5583310b": "HBASE-9757 Reenable fast region move in SlowDeterministicMonkey",
  "1427e3a4": "HBASE-9956 Remove keyLength cache from KeyValue",
  "d6bdd54e": "HBASE-9855 evictBlocksByHfileName improvement for bucket cache",
  "76b5c4f3": "HBASE-9771 [WebUI] Humanize store and blockcache statistics on RS",
  "de3d34bd": "HBASE-9488 Improve performance for small scan",
  "b99bbd73": "HBASE-9428 Regex filters are at least an order of magnitude slower since 0.94.3",
  "20728884": "HBASE-9208 ReplicationLogCleaner slow at large scale",
  "93ea2059": "HBASE-7325 Replication reacts slowly on a lightly-loaded cluster (Gabriel Reid via JD)",
  "10a25c52": "HBASE-8778 Region assigments scan table directory making them slow for huge tables",
  "505b4e9f": "HBASE-8768 Improve bulk load performance by moving key value construction from map phase to reduce phase (Rajeshbabu)",
  "e8b5cd0f": "HBASE-7952 Remove update() and Improve ExplicitColumnTracker performance (Raymond Liu)",
  "a0e51bc4": "HBASE-6295 Possible performance improvement in client batch operations: presplit and send in background - addendum",
  "fea9d369": "HBASE-6295 Possible performance improvement in client batch operations: presplit and send in background - round 2",
  "fe92821e": "HBASE-6295 Possible performance improvement in client batch operations: presplit and send in background",
  "f5ecf2c8": "HBASE-8680: distributedLogReplay performance regression",
  "bc0b7899": "HBASE-8639 very poor performance of htable#getscanner in multithreaded environment (Ted Yu)",
  "f6a5cabe": "HBASE-8504 HTable.getRegionsInRange() should provide a non-cached API",
  "2a5c92c0": "HBASE-8547. Fix java.lang.RuntimeException: Cached an already cached block (Addendum3 to remove assertion)",
  "2c3d36cc": "HBASE-8547. Fix java.lang.RuntimeException: Cached an already cached block (Addendum2 to check cached buffers for equality)",
  "0a183765": "HBASE-8547. Fix java.lang.RuntimeException: Cached an already cached block (Addendum to add better log)",
  "ba37032a": "HBASE-8547 Fix java.lang.RuntimeException: Cached an already cached block",
  "bacb37c2": "HBASE-7247 Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening",
  "4c9177de": "hbase-8183. performance.xml. Fixed typo introduced in hbase-8180.",
  "423f0742": "hbase-8180. performance.xml. Adding entry for using byte-array constants.",
  "34ebf732": "HBASE-7884 ByteBloomFilter's performance can be improved by avoiding multiplication when generating hash (clockfly)",
  "77d05003": "HBASE-7174 [snapshots] Refactor snapshot file cleaner cache to use Snapshot FileVisitor (Matteo Bertozzi)",
  "963d5f00": "HBASE-7268 correct local region location cache information can be overwritten (or deleted) w/stale information from an old server, Addendum (Sergey)",
  "c637f33c": "HBASE-5664 CP hooks in Scan flow for fast forward when filter filters out a row (Anoop)",
  "f17016bd": "HBASE-7268. Correct local region location cache information can be overwritten w/stale information from an old server (Sergey Shelukhin)",
  "96c32807": "HBASE-7383 create integration test for HBASE-5416 (improving scan performance for certain filters) (Sergey)",
  "39954ddc": "HBASE-5416 Improve performance of scans with some kind of filters (Max Lapan and Sergey)",
  "c001f73c": "HBASE-7376 Acquiring readLock does not apply timeout in HRegion#flushcache (binlijin)",
  "fb934909": "HBASE-5898 Consider double-checked locking for block cache lock (Todd, Elliot, LarsH)",
  "04381e1a": "HBASE-7033. Add hbase.lru.blockcache.acceptable.factor to configuration (Sergey Shelukhin)",
  "f065232d": "HBASE-7002 Fix all 4 findbug performance warnings (Liang Xie)",
  "c4f7a537": "HBASE-6321 ReplicationSource dies reading the peer's id HBASE-6647 [performance regression] appendNoSync/HBASE-4528 doesn't take deferred log flush into account",
  "2b7f8503": "HBASE-6654 io.encoding.TestChangingEncoding could be faster",
  "5876b5b6": "HBASE-6509 Implement fast-forwarding FuzzyRowFilter to allow filtering rows e.g. by '???alex?b' (Alex Baranau)",
  "d6ed913c": "HBASE-6368 Upgrade Guava for critical performance bug fix",
  "52b67979": "HBASE-5609 Add the ability to pass additional information for slow query logging",
  "ff2bcd47": "HBASE-6109 Improve RIT performances during assignment on large clusters (N Keywal)",
  "7693a7c9": "HBASE-5998 Bulk assignment: regionserver optimization by using a temporary cache for table descriptors when receveing an open regions request (N Keywal)",
  "9a0673f8": "HBASE-3443 ICV optimization to look in memstore first and then store files (HBASE-3082) does not work when deletes are in the mix",
  "81461668": "HBASE-5755 Region sever looking for master forever with cached stale data",
  "7ab74398": "HBASE-5724 Row cache of KeyValue should be cleared in readFields().",
  "8e84390b": "HBASE-5568 Multi concurrent flushcache() for one region could cause data loss (Chunhui)",
  "fc08d20e": "[jira] [HBASE-4542] Add filter info to slow query logging",
  "961455cd": "[jira] [HBASE-5074] Support checksums in HBase block cache",
  "0c4e1dfa": "hbase-5503. performance.xml, troubleshooting.xml - adding Troubleshooting case study",
  "0f708f73": "HBASE-5439 Fix some performance findbugs issues (Gregory Chanan)",
  "b45071a8": "hbase-5397. performance.xml, configuration.xml - correction to ZK config.",
  "421c120f": "hbase-5404. book.xml, performance.xml - more info on compression and schema design",
  "af0612f8": "[jira] [HBASE-5382] Test that we always cache index and bloom blocks",
  "b4f585e6": "HBASE-5267 Add a configuration to disable the slab cache by default (Li Pi)",
  "457d51be": "HBASE-5310 HConnectionManager server cache key enhancement (Jimmy Xiang)",
  "fa1fe609": "ops_mgt.xml - updating metrics descriptions (block cache, fs latency)",
  "07dbe903": "HBASE-5230 : ensure that compactions do not cache-on-write data blocks",
  "a56613fd": "Add Riley's slow query doc from hbase-4117",
  "c06edb68": "performance.xml - added another paragraph in 'One Hot Region' section.",
  "22bc7c82": "hbase-5226. troubleshooting.xml, client section: adding reference to client slowdown due to admin API calls.",
  "1df784d1": "HBASE-5177 Differential Revision: 1197 HTable needs a non cached version of getRegionLocation (Pritam Damania)",
  "39a1e07c": "HBASE-3565 Add metrics to keep track of slow HLog appends (Mubarak)",
  "d619a545": "HBASE-5127 [ref manual] Better block cache documentation",
  "7e095fa6": "HBASE-4683 Always cache index and bloom blocks",
  "cd0c4cff": "HBASE-5001 Improve the performance of block cache keys (Lars H and J-D)",
  "69b7530f": "HBASE-5017 Bump the default hfile.block.cache.size because of HFileV2",
  "fe60d5dc": "HBASE-5000 Speed up simultaneous reads of a block when block caching is turned off; bit of doc and why its a bad idea disabling block cache completely",
  "806ccf03": "HBASE-4932 Block cache can be mistakenly instantiated by tools",
  "b955fa6c": "Ability to calculate the blockcache hit ratio for the last few minutes",
  "f584f122": "HBASE-4833 HRegionServer stops could be 0.5s faster (N Keywal)",
  "6ce8bf91": "HBASE-4832 TestRegionServerCoprocessorExceptionWithAbort fails if the region server stops too fast",
  "dab526e4": "HBASE-4786 book.xml,performance.xml adding and reorg of schema info",
  "ae6af9e6": "HBASE-4743 book.xml, performance.xml, troubleshooting.xml scan info",
  "f0444014": "HBASE-4730 book.xml, ops_mgt.xml, performance.xml - handful of changes",
  "b6259953": "HBASE-4613 hbase.util.Threads#threadDumpingIsAlive sleeps 1 second, slowing down the shutdown by 0.5s",
  "9d172f9b": "HBASE-4641 Block cache can be mistakenly instantiated on Master (jgray)",
  "9f2204fb": "HBASE-4673 NPE in HFileReaderV2.close during major compaction when hfile.block.cache.size is set to 0",
  "1f44a8ce": "HBASE-4599. performance.xml - correcting small error in EC2 section",
  "8adbd7f6": "HBASE-4597 performance.xml ec2 section",
  "fc5c533c": "HBASE-4568 Make zk dump jsp response faster",
  "52c4ce5c": "HBASE-4422 Move block cache parameters and references into single CacheConf class (jgray)",
  "ead9159e": "HBASE-4465 Lazy-seek optimization for StoreFile scanners (mikhail/liyin)",
  "2345d929": "HBASE-4434 seek optimization: don't do eager HFile Scanner next() unless the next KV is needed",
  "7f0c31e5": "HBASE-4432 Enable/Disable off heap cache with config (Li Pi)",
  "65713767": "HBASE-4195 Possible inconsistency in a memstore read after a reseek, possible performance improvement",
  "a76a708a": "HBASE-4330 Fix races in slab cache (Li Pi & Todd)",
  "f86382fa": "HBASE-4309 slow query log metrics spewing warnings",
  "31e9c817": "HBASE-4249 - performance.xml (adding network section)",
  "f43cb324": "HBASE-4208 updates to book.xml, performance.xml",
  "0cfb97d0": "HBASE-4189 small fixes in book.xml and performance.xml",
  "ac8b6f9e": "HBASE-4181 HConnectionManager can't find cached HRegionInterface and makes clients work very slow",
  "dc8bf136": "HBASE-4172 laundry list of changes (book, configuration, developer, performance)",
  "2af2f5db": "HBASE-4165 reorganized performance chapter",
  "22bb923b": "HBASE-4092 performance.xml - adding batch-loading entry for using deferred log flush",
  "aaad7574": "HBASE-4091 book.xml - description of block cache in arch, description of inMemory in schema creation",
  "d6c03384": "HBASE-4090 book.xml - minor clarification of block cache metric",
  "5148146d": "HBASE-1938 Make in-memory table scanning faster ; reverted 20110726_1938_MemStore.patch till we figure why it seems to slow tests",
  "a02c83a1": "HBASE-1938 Make in-memory table scanning faster",
  "b6fc5b0b": "HBASE-4095 make cacheFlushLock.waittime longer",
  "547394ad": "HBASE-451 relax cachehits check in TestFSTableDescriptors",
  "cdc62bf6": "Make TestFSTableDescriptors pass if cache hits are >= rather than ==; I had test the wrong way around",
  "1f46c437": "Make TestFSTableDescriptors pass if cache hits are >= rather than ==",
  "ac2e192a": "HBASE-3928 Some potential performance improvements to Bytes/KeyValue",
  "09d3d6be": "HBASE-3976 Disable block cache on compactions",
  "f046c79c": "HBASE-3858 performance.xml / troubleshooting.xml - porting rest of PerformanceTuning wiki page",
  "df267ce6": "HBASE-3825 performance.xml - adding a few common configuration changes in the 'config' sub-section",
  "49f339cc": "Attempted fix for test that fails sporadically; allow that on split, the zk state can be SPLIT or SPLITTING (We were expecting SPLIT but looking in logs, it could run slower and be in SPLITING when zk state is tested",
  "04ac5314": "HBASE-1364 [performance] Distributed splitting of regionserver commit logs",
  "8e4fc55f": "HBASE-3655 Revision to HBase book, more examples in data model, more metrics, more performance",
  "1cab7fc7": "HBASE-3660 HMaster will exit when starting with stale data in cached locations such as -ROOT- or .META.",
  "97331fb7": "HBASE-3655 Revision to HBase book, more examples in data model, more metrics, more performance -- part one",
  "a8beafc5": "HBASE-3650 HBA.delete can return too fast",
  "7c8f6406": "HBASE-3610 : Improve RegionSplitter performance",
  "896b1930": "HBASE-3620 : Make HBCK utility faster",
  "0f2700df": "HBASE-3383 [0.90RC1] bin/hbase script displays 'no such file' warning on target/cached_classpath.txt",
  "ceaf3ee3": "HBASE-3308 SplitTransaction.splitStoreFiles slows splits a lot HBASE-3318 Split rollback leaves parent with writesEnabled=false",
  "00c0dec8": "HBASE-3292 Expose block cache hit/miss/evict counts into region server metrics",
  "826fbd99": "HBASE-3287 Add option to cache blocks on hfile write and evict blocks on hfile close",
  "590ada40": "HBASE-2253 Show Block cache hit ratio for requests where cacheBlocks=true",
  "2fe608ef": "HBASE-3121 [rest] Do not perform cache control when returning results",
  "1ef04625": "HBASE-3073 New APIs for Result, faster implementation for some calls",
  "94682d09": "HBASE-3019 Make bulk assignment on cluster startup run faster",
  "1334d518": "HBASE-3040 BlockIndex readIndex too slowly in heavy write scenario; add in fix to address kannan review",
  "b11ac8d6": "HBASE-3040 BlockIndex readIndex too slowly in heavy write scenario",
  "e5322933": "HBASE-3006 Reading compressed HFile blocks causes way too many DFS RPC calls severly impacting performance--Now add fix I intended, a spelling mistake in HFile",
  "96f8cbe9": "HBASE-3006 Reading compressed HFile blocks causes way too many DFS RPC calls severly impacting performance--Revert mistaken over commit",
  "cac06d45": "HBASE-3006 Reading compressed HFile blocks causes way too many DFS RPC calls severly impacting performance",
  "76386563": "HBASE-3006 Reading compressed HFile blocks causes way too many DFS RPC calls severly impacting performance",
  "d48a3d0a": "HBASE-2720 TestFromClientSide fails for client region cache prewarm on Hudson",
  "461c835f": "HBASE-2922 HLog preparation and cleanup are done under the updateLock, major slowdown",
  "5215e49d": "HBASE-1729 Move cache stats out of RS log and into metrics",
  "24ced568": "Setting write buffer to 12MB in PE is dumb. Causes OOMEs when running w/ a 1G heap. If HDFS slow, handlers get backed up carrying 10MB plus and this memory consumption is outside of our general memory accounting",
  "436698d5": "HBASE-2720 TestFromClientSide fails for client region cache prewarm on Hudson",
  "d92c4962": "HBASE-2468 Improvements to prewarm META cache on client",
  "adbcfc38": "Make unit test run faster, fix javadoc, fix scan merge error, and remove unused variable",
  "49458a95": "HBASE-2451 .META. by-passes cache; BLOCKCACHE=>'false'",
  "2a8ed43a": "HBASE-2451 .META. by-passes cache; BLOCKCACHE=>'false'",
  "b9aeb3e1": "HBASE-1892 [performance] make hbase splits run faster",
  "beefa3b7": "HBASE-2346 Usage of FilterList slows down scans",
  "6befceaf": "raising NewSize to 128m from 64m generally improves performance",
  "39505bcc": "HBASE-2189 HCM trashes meta cache even when not needed",
  "443d61e4": "HBASE-2180 Bad random read performance from synchronizing hfile.fddatainputstream -- putting this as improvement in CHANGES because thats what j-d wants though I think it a bug because our perf. was so bad",
  "8bc28882": "HBASE-2140 findbugs issues - 2 performance warnings as suggested by findbugs",
  "e30b9d47": "HBASE-1945 Remove META and ROOT memcache size bandaid",
  "360b8bba": "HBASE-1506 [performance] Make splits faster",
  "3b8bed11": "HBASE-1481 Add fast row key only scanning",
  "c2db3972": "HBASE-1874 Client Scanner mechanism that is used for HbaseAdmin methods (listTables, tableExists), is very slow if the client is far away from the HBase cluster",
  "ebb08cdd": "HBASE-1866 Scan(Scan) copy constructor does not copy value of cacheBlocks",
  "a4ee96d5": "HBASE-1827 Add disabling block cache scanner flag to the shell",
  "69bd17fe": "HBASE-1823 Ability for Scanners to bypass the block cache",
  "cff34ea9": "HBASE-1771 PE sequentialWrite is 7x slower because of MemStoreFlusher#checkStoreFileCount",
  "3a118552": "HBASE-1692 Web UI is extremely slow / freezes up if you have many tables",
  "9955e11d": "HBASE-1692 Web UI is extremely slow / freezes up if you have many tables",
  "2a21d475": "HBASE-1644 Result.row is cached in getRow; this breaks MapReduce",
  "10c178fc": "HBASE-1644 Result.row is cached in getRow; this breaks MapReduce",
  "ed63b575": "cache strings produced for getSize for subsequent use in writeTo",
  "6ab29a6c": "HBASE-1577 Move memcache to ConcurrentSkipListMap from ConcurrentSkipListSet; second attempt",
  "7886526f": "HBASE-1578 Change the name of the in-memory updates from 'memcache' to 'memtable' or....",
  "0f0a133a": "HBASE-1577 Move memcache to ConcurrentSkipListMap from ConcurrentSkipListSet",
  "cc920fe6": "HBASE-1576 TIF needs to be able to set scanner caching size for smaller row tables & performance",
  "6c10644a": "HBASE-1547 atomicIncrement doesnt increase hregion.memcacheSize",
  "78af4ede": "HBASE-1528 Ensure scanners work across memcache snapshot",
  "839ce86b": "HBASE-1192 LRU-style map for the block cache",
  "e7afa864": "HBASE-1192 LRU-style map for the block cache",
  "2b47c152": "HBASE-1192 LRU-style map for the block cache",
  "1895a6f0": "HBASE-1415 Stuck on memcache flush",
  "ac347387": "HBASE-1008 [performance] The replay of logs on server crash takes way too long",
  "22f8591f": "HBASE-1358 Bug in reading from Memcache method (read only from snapshot)",
  "0ce8963a": "HBASE-1355 [performance] Cache family maxversions; we were calculating on each access",
  "90e8591c": "HBASE-1309 HFile rejects key in Memcache with empty value",
  "dd3a1401": "HBASE-1186 Memory-aware maps with LRU eviction for cell cache",
  "bfda6ae2": "HBASE-1262 Eclipse warnings, including performance related things like synthetic accessors",
  "2ec433e9": "HBASE-1188 Memory size of Java Objects - Make cacheable objects implement HeapSize",
  "2ab4b145": "HBASE-1052 Stopping a HRegionServer with unflushed cache causes data loss from org.apache.hadoop.hbase.DroppedSnapshotException",
  "0d735d26": "HBASE-910 Scanner misses columns / rows when the scanner is obtained durring a memcache flush",
  "d6997a94": "HBASE-975 Improve MapFile performance for start and end key",
  "c75ea989": "HBASE-576 Investigate IPC performance",
  "9bc4c5cb": "HBASE-576 Investigate IPC performance; fix miscommit that made for broken build",
  "e45a9317": "HBASE-576 Investigate IPC performance",
  "f9e04bcf": "HBASE-832 Problem with row keys beginnig with characters < than ',' and the region location cache",
  "6cab23c4": "HBASE-729 lient region/metadata cache should have a public method for invalidating entries",
  "809180ee": "HBASE-783 For single row, single family retrieval, getRow() works half as fast as getScanner().next()",
  "5af2380b": "HBASE-779 Test changing hbase.hregion.memcache.block.multiplier to 2",
  "b022dd6a": "HBASE-727 Client caught in an infinite loop when trying to connect to cached server locations",
  "1f93bb57": "HBASE-674 Memcache size unreliable",
  "80fa3369": "HBASE-613 Timestamp-anchored scanning fails to find all records HBASE-681 NPE in Memcache",
  "132a6442": "HBASE-686 MemcacheScanner didn't return the first row(if it exists), because HScannerInterface's output incorrect (LN via Jim Kellerman)",
  "1bc0a2a0": "HBASE-682 unnecessary iteration in HMemcache.internalGet? got much better reading performance after break it.",
  "2a543ce1": "HBASE-663 Incorrect sequence number for cache flush",
  "7e0dd33f": "HBASE-659 HLog#cacheFlushLock not cleared; hangs a region; revert code mistakenly committed",
  "359fdf62": "HBASE-659 HLog#cacheFlushLock not cleared; hangs a region",
  "cffa3a25": "HBASE-586 HRegion runs HStore memcache snapshotting -- fix it so only HStore knows about workings of memcache",
  "ef5bb6f3": "HBASE-532 Odd interaction between HRegion.get, HRegion.deleteAll and compactions Found an issue in the 532 commit. The MemcacheScanner had a flipped isWildcardScanner test; fixing it returned wrong columns because using okCols rather than the literals passed in.",
  "49e0eaf8": "HBASE-512 Add configuration for global aggregate memcache size",
  "7813444a": "HBASE-564 Don't do a cache flush if there are zero entries in the cache.",
  "feb4f2d2": "HBASE-528 table 'does not exist' when it does -Changed HStore and Memcache methods for computing closest row at or before -Added more test cases for verifying this functionality -Simplified the getClosestRowBefore interface so that it does not take timestamps -Noted that getClosestRowBefore is assumed to work correctly ONLY on tables where updates are always with ascending timestamps (method is still not a part of HTable interface, so not available to clients)",
  "ea1ac1f7": "HBASE-524 Problems with getFull -Added new test case to exercise the problems -Fixed getFull implementation in HStore and Memcache",
  "8c815c72": "HBASE-443 Move internal classes out of HStore -Moved out classes Memcache, StoreFileScanner, MapFileCompactionReader, and HStoreScanner, and interface CompactionReader -Updated TestHMemcache to use the correct type declaration.",
  "6b8c95d8": "HBASE-444 hbase is very slow at determining table is not present",
  "3067b43d": "HBASE-407 Client should cache region locations in an LRU structure",
  "5d2ec250": "HADOOP-1398. Add HBase in-memory block cache. Contributed by Tom White.",
  "40ed226c": "HADOOP-2621 Memcache flush flushing every 60 secs with out considering the max memcache size",
  "27afba4e": "HADOOP-2443 Keep lazy cache of regions in client rather than an 'authoritative' list",
  "0e8bbbf2": "HADOOP-2495 inor performance improvements: Slim-down BatchOperation, etc.",
  "70004192": "HADOOP-2262 HADOOP-2261 fail fast on non-existing table, change abort to function after commit even if commit was successful",
  "c64eb9eb": "HADOOP-2274 Excess synchronization introduced by HADOOP-2139 negatively impacts performance",
  "26b3d944": "HADOOP-2161 getRow() is orders of magnitudes slower than get(), even on rows with one column",
  "20a6c00b": "HADOOP-1888 NullPointerException in HMemcacheScanner (reprise)",
  "1596f8aa": "HADOOP-1888 NullPointerException in HMemcacheScanner",
  "1d19158a": "HADOOP-1834 Scanners ignore timestamp passed on creation M src/contrib/hbase/src/test/org/apache/hadoop/hbase/HBaseTestCase.java (addContents): Added overrides that allow specifying a timestamp. M src/contrib/hbase/src/test/org/apache/hadoop/hbase/TestTimestamp.java Made it so test inherits from HBaseTestCase instead of from HBaseClusterTestCase so could add in tests that do not use cluster. (testTimestampScanning): Added test for hadoop-1834 bug. (testTimestamp): Refactored to remove duplicated code. M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HStore.java (getNext): Make it respect the timestamp set on construction. M src/contrib/hbase/src/java/org/apache/hadoop/hbase/HMemcache.java Removed eclipse yellow flag warnings around empty parens and auto-boxing longs. (getNext): Make it respect the timestamp set on construction.",
  "790e3d76": "HADOOP-1662 Make region splits faster Splits are now near-instantaneous. On split, daughter splits create 'references' to store files up in the parent region using new 'HalfMapFile' class to proxy accesses against the top-half or bottom-half of backing MapFile. Parent region is deleted after all references in daughter regions have been let go.",
  "a31d0e5f": "HADOOP-1534. [hbase] Memcache scanner fails if start key not present bin CHANGES.txt conf dev-support hbase-annotations hbase-archetypes hbase-assembly hbase-asyncfs hbase-backup hbase-balancer hbase-build-configuration hbase-checkstyle hbase-client hbase-common hbase-compression hbase-endpoint hbase-examples hbase-external-blockcache hbase-hadoop-compat hbase-hbtop hbase-http hbase-it hbase-logging hbase-mapreduce hbase-metrics hbase-metrics-api hbase-procedure hbase-protocol-shaded hbase-replication hbase-resource-bundle hbase-rest hbase-server hbase-shaded hbase-shell hbase-testing-util hbase-thrift hbase-zookeeper LICENSE.txt NOTICE.txt pom.xml README.md src src/contrib/hbase/src/java/org/apache/hadoop/hbase/HMemcache.java (findFirstRow): Change compare from startsWith -- looking for an 'exact' match -- to instead use compareTo and if >= 0, then we are at first key. bin CHANGES.txt conf dev-support hbase-annotations hbase-archetypes hbase-assembly hbase-asyncfs hbase-backup hbase-balancer hbase-build-configuration hbase-checkstyle hbase-client hbase-common hbase-compression hbase-endpoint hbase-examples hbase-external-blockcache hbase-hadoop-compat hbase-hbtop hbase-http hbase-it hbase-logging hbase-mapreduce hbase-metrics hbase-metrics-api hbase-procedure hbase-protocol-shaded hbase-replication hbase-resource-bundle hbase-rest hbase-server hbase-shaded hbase-shell hbase-testing-util hbase-thrift hbase-zookeeper LICENSE.txt NOTICE.txt pom.xml README.md src src/contrib/hbase/src/java/org/apache/hadoop/hbase/HRegionServer.java Add logging of problematic directory if server won't start because log file exists."
}, "helidon": {
  "f2b56e6f": "Improved performance of metric lookups in MetricProducer. There is no longer filtering by metric type before executing a lookup. New test that bounds the time expected to perform a certain number of calls. (#6842)",
  "6917a24f": "Avoid calling getPackage() on an annotation type due to an issue with GraalVM 21.3.X. Sometimes it returns the correct package, sometimes it does not (returning the annotation's proxy class package instead). Also fixed package name in filtering optimization. See issue 4296. (#4350)",
  "95b10220": "Nocache 3.x (#4258)",
  "6f182a0e": "Forward port of CORS `@CrossOrigin` checking and request-time performance improvements (#3932)",
  "607bc4e4": "Handle potential connection reset conditions when waiting for a 413 while attempting to write more data to the server. This appears to be a problem in slower systems causing testActualLengthExceededWithPayload() to fail. (#3360)",
  "c9d27c64": "Host IPv6 matching is now cached (#3028)",
  "3de77e65": "Add extended key performance indicators metrics support (#3021)",
  "f6f4c8f2": "Added overall timeout to evictable cache (#2659)",
  "2171ed5a": "Do not create and cache handler for fallbacks. These handlers require access to the current invocation context (for fallback method parameters) and caching them fails when that changes. Handlers are now cached for all FT annotations except fallbacks. New test added to verify the changes. (#2546)",
  "c20e2614": "Weaken test assertion for executions in very slow systems. In those cases, it is possible for the second retry to never take place. See #2258.",
  "b31d0c24": "Tracing performance optimization. (#1916)",
  "60abc974": "New implementation of PublisherInputStream that improves performance and fixes race conditions (#1690)",
  "c369146f": "[Reactive] Fix Multi.flatMap losing items on the fastpath when conditions are not met (#1669)",
  "ab648141": "Improve metrics interceptor performance; avoid MetricID creations - 2.x (#1602)",
  "828d7c6e": "Fail fast when policy validation fails because of setup/syntax. (#1491)",
  "dfe2fcd2": "Config cache is not using `SoftReference` anymore.",
  "ca0e11ff": "Changes to content length optimization to handle chunks used for flushing connections. ByteBuffer's created from Jersey data are freshly allocated so a DataChunk that wraps one of these can be marked as read only as well. (#783)",
  "4c3d6ce9": "WIP: Content-length optimization (#773)",
  "d83fe73b": "Small minor performance improvements (#711)",
  "a09805b6": "Ensure that the context class loader is propagated across FT threads. This is required to access the proper config from our cache.",
  "e242a8da": "Update quickstart Dockerfiles so /libs layer can be cached/reused (#96)",
  "5c36b769": "Eager cleanup of queues to reduce memory usage during heavy loads, including performance testing. Note that the cleanup is conditional and may not take place if some data has not been consumed yet.",
  "904a9d34": "Fixed test to register data in histograms at the same time to avoid problems with slow runs. See issue #44 for more information.",
  "720eae3c": "Refactoring of evictable cache. Use interface instead of class. Support loading from configuration."
}, "hello-algo": {
  "d934ce0": "Remove __pycache__"
}, "hellocharts-android": {
  "d4a1fc7": "Fixed drawing filled area chart below not filled lines, that makes chart a little slower:(",
  "6f8c0f3": "Improved performance for drawing values labels",
  "c800ee7": "Improved performance for drawing manual axes"
}, "hertzbeat": {
  "d02c4e1": "optimize caffeine cache (#875)",
  "49e727d": "[home] notice jvm code_cache only support jdk8 (#391)",
  "4c29497": "[manager] bugfix oracle performance metrics collect error, update win name (#201)",
  "f35c5d3": "[collector]feature: reuse redis connection cache (#146)",
  "a3f4e42": "[manager]code format and optimization"
}, "hibernate-orm": {
  "b3e27788": "fix bug in query plan cache where fetch profiles were not considered",
  "f2017cd5": "HHH-16651 improve probability of getting cached loader",
  "f38de621": "HHH-16601 log second-level cache RegionFactory initiation",
  "3368c0c3": "using infinispan + improve section on cache config",
  "9aa64412": "document query cache",
  "02c179d0": "flushing, flush modes, and cache modes",
  "e60d2c87": "HHH-16397 Allow fk optimization for correlated paths in subqueries",
  "40f22e48": "HHH-16218 Natural id cache is extremely slow for entities with compound natural id",
  "c5897db9": "HHH-16218 Natural id cache is extremely slow for entities with compound natural id",
  "c9640c2e": "HHH-16281 Inconsistent Behaivor of L2 cache between Hibernate 5 and 6",
  "973437ce": "HHH-16281 Inconsistent Behaivor of L2 cache between Hibernate 5 and 6",
  "3f029e1d": "HHH-13627 Invalidate cache on update for CacheMode GET and IGNORE",
  "5a6be7ba": "HHH-16328 Upgrade to Ehcache 3.10.8",
  "27cab33c": "HHH-16126 TransientObjectException when loading versioned entity from second-level cache",
  "01659ed7": "HHH-14514 Fix auto eviction of collection cache",
  "105253df": "HHH-16172 Expose internal state of 2nd-level cache keys",
  "8bce5959": "Update 'com.gradle.enterprise' to '3.12.3', 'com.gradle.common-custom-user-data-gradle-plugin' to '1.8.2', GitHub actions workflow steps setup-java, cache and upload-artifact to v3, and run dependabot on github actions versions",
  "4ca59026": "mention the query result set cache in the javadoc",
  "87551296": "HHH-16050 StandardStack optimization using custom array implementation",
  "98957c35": "HHH-15854 Improve CollectionInitializer and EntityDelayedFetchInitializer resolveInstance methods performance when the parent entity is initialized",
  "9ea6f162": "slight cleanup to the docs for o.h.cache.spi.support",
  "d886c562": "examples of @Cache and documentation around cache enablement",
  "733e6caf": "HHH-15840 HibernateException: Found shared references to a collection when loading a collection from the cache",
  "d3830422": "HHH-15811 Avoid secondary super-type cache pollution when casting to AttributeMapping",
  "a7c34552": "HHH-15810 Avoid secondary super-type cache pollution when casting to EntityInitializer",
  "8ebf3c85": "HHH-15809 Secondary super-type cache pollution mitigations for HibernateBasicProxy",
  "fbf46983": "HHH-15790 Make HibernateProxy also type-cache friendly",
  "366a1e9c": "HHH-15790 Apply the new type-cache enhancements to CompositeTracker and CompositeOwner",
  "be2999d0": "HHH-15693 Introduce a fast-path access for ClassLoaderService being retrieved from ServiceRegistry",
  "7d9ffc61": "HHH-15728 Improve query cache key hash code to reduce collisions",
  "e72d0aeb": "even more jdoc about query cache invalidation",
  "110596ad": "deprecate two unused types in the cache SPI + add javadoc",
  "a12ba4c2": "more verbiage surrounding cache concurrency",
  "f9164fc3": "explain what a second-level cache is in Javadoc",
  "bedbd402": "HHH-15649 Additional performance fixes relating to Klass's _secondary_super_cache interaction with entity enhancement",
  "53076f30": "HHH-15616 Mitigate performance impact of entity enhancement on Klass's _secondary_super_cache",
  "20183269": "HHH-14544 Document Ehcache Performance degradation when the default cache is used",
  "6bf0b0ae": "HHH-15502 Improve NoCachingRegionFactory instantiation performance: Refactored NoCachingTransactionSynchronizationImpl to avoid timestamp creation, Renamed CacheTransactionSynchronization#getCurrentTransactionStartTimestamp method to getCachingTimestamp and removed SharedSessionContractImplementor#getTransactionStartTimestamp method",
  "1905b03c": "HHH-15479 Improve ListresultConsumer duplication check method performance",
  "e5e2931b": "HHH-15100 Limitation of metamodel imports cache causes severe performance drops in large projects",
  "6507ac4f": "HHH-15455 User Guide Contains a reference to hibernate-ehcache, no longer supported",
  "04fd92b2": "HHH-15339 Add foreign key part name as target key property name for fk optimization",
  "3d893712": "HHH-15300 - Lazy evaluation to statement.toString() when logging slow queries",
  "9d35e3dd": "HHH-15267 Make ParameterBindingsMemento extend Serializable so that cache keys can be serialized",
  "ca8f151d": "Improve migration guide query result cache section",
  "58aa445b": "Add query result cache changes to migration guide",
  "293315ff": "HHH-15105 Test and fix for NPE when access default query cache region statistics",
  "662182ad": "Gradle Enterprise - remote build cache",
  "075cc8d1": "Fix not increase the statistic loaded entity number when query cache is hit",
  "cc750a9a": "Fix Session#setProperty() for cache and timeout related properties",
  "1e823386": "Support FK column access optimization also for associations in embeddables of an element collection",
  "a84793bd": "remove hibernate.cache.provider_configuration_file_resource_path",
  "2e0a2eea": "Fix issues with multi table values inserts and add optimization for simple values inserts",
  "3ea5a066": "Add query plan cache statistics for native queries and implement proper caching",
  "cef98f67": "Test multiloading on partial cached entities",
  "55db5189": "HHH-14837 : Re-enable hibernate-jcache module.",
  "cbcec73d": "build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Handle quoted identifiers in HQL and the Ordering parser build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Switch from the 'expression' to 'expressionOrPredicate' rule in the HQL grammar where it makes sense as required by some HQL tests build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Cleanup parser rule ordering to allow more keywords in the identifier rule build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Implement literal support for Ordering parser build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Add special AvgFunction as needed by H2, HSQL, DB2, SQL Server and Sybase that casts arguments to double if necessary build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix wrong deduplication of order by fragments in case a plural attribute is fetched multiple times build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Implement support for de-referencing any-valued mappings in HQL build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Avoid unnecessary entity subtypes in polymorphic splitted queries if a base type also matches the requested type build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Implement pagination support for polymorphic splitted queries build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Cleanup path part resolving by removing lots of duplicate code build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Aligh HQL parsing expectations to the expected behavior of 5.x build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Add method to `JavaType` that allows determining if a type is can be widened to another which is used for arithmetic type resolving build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Implement validations for fetch owner checking build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix issues with the id table creation due to lacking column lengths in the column DDL type build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix issues and add some optimizations related to multi-table delete handling build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Add the notion of a special 'implicit' alias to avoid generating a unique alias for unaliased or implicit HQL joins build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Properly implement multiple bag fetch validation build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Make sure filter predicates are applied for all plural attribute joins build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix some issues with undecidable parameter type inference build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix some issues with negated SQM predicates not being converted to the proper SQL AST predicates build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix issues with qualifying DML target referencing columns build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix `is null` semantics for tuples referring to embeddable types build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Capture necessary details from JdbcValuesMetadata in the cached data to avoid executing a query on cache hit when types should be inferred build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Get rid of special CollectionPropertyNames and writeup a migration guide section for the replacements",
  "24c758c2": "Do not alter the join type anymore for non-real table groups that have table reference joins. Handle nullable key tables for to-ones properly and implement bidirectional one-to-one fetching optimization",
  "6ffcee44": "search second level cache if proxy entity metamodel has subclasses",
  "c5baae7e": "Improve SQL rendering performance by avoiding intermediate String objects",
  "ac1123be": "Fix NPE with cache key",
  "5ffed50f": "HHH-14826 Fix failure of o.h.test.onetoone.cache.OneToOneCacheTest#OneToOneCacheByForeignKey()",
  "a652822f": "HHH-14826 Fix regression caused by one-to-one L2 cache support",
  "b15433a4": "HHH-14826 Add test to check regression caused by OneToOne cache support",
  "6866a1e7": "disable local build-cache for CI jobs",
  "3ae60573": "Fixed and reorganized tests in hibernate-jcache",
  "86000e9f": "Capture whether a foreign key is constrained and allow skipping the foreign key access optimization explicitly",
  "4ee71fae": "Improve SemanticQueryBuilder performance and fix a few generics related issues",
  "a716b348": "japmodelgen xjc task cacheability",
  "9f2ae953": "Gradle task cache Gradle 7 prep",
  "fc911312": "make jakarta tasks cacheable",
  "e782ddf8": "HHH-14733 Not useful to clear the bycodeprovider caches on sessionFactoryClosing",
  "2527e6b5": "build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix issues with order by fragments for collections build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix quite a lot of caching and related statistics use cases build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Support selecting ToOne- and PluralAttributeMappings in LoaderSelectBuilder build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix multiple bag role handling in LoaderSelectBuilder build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix dynamic batch id entity loader problems build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Simplify lock handling and cache JdbcSelect for SingleIdLoadPlan build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Add support for, but at the same time deprecation-warn about component mappings with different structure but same Java type. See HHH-14660 build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix enhancement issues and implement support for property laziness build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Implement association key access for both sides of the FK build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix subpart access for nullable + TARGET side ToOneAttributeMapping build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Pass through fetch timing to CircularFetch to respect fetch profiles build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Respect fetch profiles for CollectionLoader and SingleIdLoadPlan build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Support group by and order by for entity and embeddable paths/joins build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Don't apply lock clause for LockMode.READ and less build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Change result type for round to argument type build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Fix inference for tuple parameter elements when comparing against embeddables",
  "db6701cc": "Move annotations, bytecode, cache, cascade, cdi, cfg, cid, component, compositeelement, customstructures, deletetransient, dialect, dirtyness, entitymode, exceptionhandling, extendshbm, fetchprofiles, fetchstrategyhelper, flush, foreignkey, generatedkeys, hbm, hql, jpa, mapping packages.",
  "fb69172a": "HHH-14650 AbstractRowReader: no need to pre-compute the entityInitializerByEntityReference cache in advance",
  "703a121c": "HHH-12416 : Drop `hibernate-ehcache`",
  "5b0b8227": "Move tests to orm/test and fix query cache stats, native query variable substitution and named query support as loader",
  "de3f3c1d": "HHH-14443 Add hashcode to ObjectTypeCacheEntry, so query cache can do a successfull lookup for queryies with AnyTypes",
  "3a24c700": "cache the @NaturalId loaders",
  "47807c25": "Don't use prepared statement cache for PostgreSQL in matrix test",
  "0617c99e": "HHH-14324 Add .gradletasknamecache to .gitignore",
  "dd9c687b": "HHH-14324 Remove .gradletasknamecache from repository",
  "aec21d21": "HHH-14216 Add one-to-one second level cache tests.",
  "f3396805": "HHH-14293 JPAMetadataProvider needs to be able to reset its internal caches",
  "42369702": "HHH-14153 further optimization for single-table HQL update",
  "4e868f03": "HHH-14159 update 'hibernate.cache.query_cache_factory' config",
  "84b3167f": "HHH-14133 fix obvious example code error for 'second level cache' in user guide",
  "0ee25a41": "HHH-14137 Empty String check performance improvements",
  "d17f19d3": "HHH-14098 Query plan cache query-level statistics Documentation, used getQueryPlanCacheMissCount instead of getPlanCompilationTotalMicroseconds",
  "4c856725": "fix some logging performance issues",
  "4755e199": "build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Verified / implemented query-result cache support - improved fetch test checks",
  "1f1f5f11": "build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Verified named 'result mapping' support - e.g. JPA's `@SqlResultMapping`; gets stored correctly, but can't test it getting applied correctly until after native-query support is implemented build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Verified / implemented query-result cache support",
  "f919358e": "make use of Collections.addAll() for better performance",
  "68e8ad64": "HHH-13972 Disable the ForbiddenAPI classloader cache",
  "52ca2703": "HHH-13850 Clear the BytecodeProvider caches both after SessionFactory creation and stop",
  "4b037cdf": "HHH-13792 evict entity cache after transaction has committed for read-write cache access strategy",
  "26d914f4": "(perf) Antlr parsing performance - what they call '2 step parsing'",
  "5482c55e": "remove caching of ColumnReferences inside ColumnReferenceQualifier - they are already cached as part of the SqlExpressionResolver, which has a broader scope and is therefore more efficient place",
  "d9e16fe8": "HHH-13249 Introduce an option to Log slow queries instead of all queries",
  "fa2f0359": "HHH-11032 : performance improvements of PersistentBag.equalsSnapshot",
  "f096445c": "HHH-11032 performance improvements of PersistentBag.equalsSnapshot",
  "4c2a43b8": "HHH-11032 performance improvements of PersistentBag.equalsSnapshot",
  "da8c5014": "HHH-13462 Introduce a fastpath for SessionImpl#fireLoad to be used by internal loops",
  "4d79ffb6": "HHH-13152 - managed/cached entities and fetching (test case)",
  "5fe874f7": "HHH-13209 Avoid leaking invalid data in side cache of SessionFactoryServiceRegistryImpl",
  "7abcf9bc": "HHH-13189 org.hibernate.Query#setParameter(String, Object) is extremely slow",
  "77cdaa08": "HHH-13146 - Hibernate Ehcache no longer supports the `net.sf.ehcache.hibernate.cache_lock_timeout` configuration property",
  "9ff14a33": "HHH-13147 - Fix DelayedPostIdentifierInsert when second-level cache enabled.",
  "509f6fed": "HHH-13091 Upgrade Ehcache 2 to 2.10.6 and Ehcache 3 to 3.6.1",
  "736d9dd6": "HHH-13090 Allow to use specific cache implementations in Ehcache cache provider",
  "512dfa57": "HHH-12944 - MultiIdentifierLoadAccess ignores the 2nd level cache",
  "52e72f5d": "HHH-12979 - Setting hibernate.javax.cache.uri property value as relative path causes an error",
  "e3ae85f8": "HHH-13028 Make ASTPrinter caches use less memory",
  "656b2737": "HHH-13009 - No documentation for 'hibernate.javax.cache.cache_manager'",
  "519905b9": "HHH-12962 - Document how to tune the query plan cache size",
  "20c6f15a": "HHH-10782 Add a comment about what clearing the query plan cache means",
  "fa77c29b": "HHH-12869 Do not check the cacheManager is not null when creating it",
  "f8964847": "HHH-12829 Update the Ehcache documentation to use the new short names",
  "cf3622f6": "HHH-12771 - Caused by: java.lang.UnsupportedOperationException: Cache provider [org.hibernate.cache.ehcache.internal.EhcacheRegionFactory@3271ec2a] does not support `transactional` access",
  "535a33ea": "HHH-12797 Fix cache modes relationships table layout",
  "3883abf0": "HHH-12649 Use the 'create-warn' missing cache strategy by default in hibernate-jcache",
  "21eac287": "HHH-12531 Default to using legacy region names when default query caches do not exist in the EhCache and JCache integrations",
  "2649e137": "HHH-12649 Move the created cache warning to org.hibernate.cache.spi.SecondLevelCacheLogger",
  "033203ab": "HHH-12649 Document the behavior on missing caches",
  "e91a0514": "HHH-12649 Use the 'create-warn' missing cache strategy by default in hibernate-ehcache",
  "dc8a0dc8": "HHH-12549 Test the various missing cache strategies for hibernate-ehcache",
  "f70bb504": "HHH-12549 Test the various missing cache strategies for hibernate-jcache",
  "c52ff4d0": "HHH-12549 Allow the behavior when a cache is missing to be configured by users",
  "432adb36": "HHH-12549 Remove mentions of JCache in hibernate-ehcache",
  "6c5e71fc": "HHH-11495 Only cache values if the class is mapped somehow",
  "9684afda": "HHH-11495 Reduce criteria overhead by adding an implementors cache",
  "7a4b38c6": "HHH-12657 - Fix ClassCastException for cached natural-id entity with subclasses",
  "9d4d0ae6": "HHH-12584 In fact, we can provide a ReflectionOptimizer, just without the fast class instantiator",
  "ae890b46": "HHH-12617 - Improved cache warning on non-root entity configurations.",
  "9b98e61e": "HHH-12562 : Remove DefaultSchemaNameResolver#delegate since the value should not be cached",
  "43d15578": "HHH-12469 - Add support for IN clause parameter padding to better reuse cached statements",
  "01ba7d95": "HHH-11766 : Accessing lazy basic property on entity loaded from 2nd level cache throws exception",
  "1a75fb3b": "HHH-7809 - ehcache region factory should set a name for the CacheManager",
  "97dd42cf": "HHH-7809 override or set cachemanager name",
  "9ba05c1e": "HHH-12441 - Deprecate hibernate-ehcache",
  "1ae38f27": "HHH-11356 - Adjust the 2nd-Cache SPIs to better reflect supported uses HHH-12323 - Update Statistics API and SPI based on changes to 2nd level caching changes HHH-12416 - set up relocation for hibernate-ehcache HHH-12417 - default strategy based on registrations with StrategySelector",
  "7f12e2a1": "HHH-11356 - Adjust the 2nd-Cache SPIs to better reflect supported uses HHH-12323 - Update Statistics API and SPI based on changes to 2nd level caching changes HHH-12416 - set up relocation for hibernate-ehcache HHH-12417 - default strategy based on registrations with StrategySelector",
  "dae31640": "HHH-11356 - Adjust the 2nd-Cache SPIs to better reflect supported uses HHH-12323 - Update Statistics API and SPI based on changes to 2nd level caching changes HHH-12416 - set up relocation for hibernate-ehcache",
  "0bc7aecb": "HHH-12370 Lazily-initialized byte[] LOB gets turned into a String, resulting in poor performance",
  "8cfe4126": "HHH-12282 - Allow disabling of invalidation of second-level cache entries for multi-table entities",
  "992fdbcf": "HHH-12107 - ClassCastException when using L2Cache with 'structured_cache'=true",
  "b0c27562": "Fix User Guide tests failing and triggereing other 2nd-level cache tests to fail as well",
  "1965a9bc": "HHH-10677 Local Timestamp cache is not updated right after cache.put",
  "5d2c3534": "HHH-12036 Use cache.clear() for bulk removal on non-tx cache",
  "93559d2e": "HHH-11374 - ConcurrentStatisticsImpl#getSecondLevelCacheStatistics() throws NPE if second level cache is not activated",
  "1c349144": "HHH-11703 - Entity with Natural ID not being cached in the persistenceContext, causing extra queries",
  "12a1b3c2": "HHH-11516 : Level two cache may not be enabled when using @Cacheable without/instead of @Cache",
  "4fcc0d22": "HHH-9763 - hibernate.cache.default_cache_concurrency_strategy configuration is ignored",
  "e0da35e5": "HHH-11532 - Loading extended entity by natural ID of base entity that exists in second level cache throws WrongClassException",
  "7c90905d": "HHH-11518 Log4DelegatingLogger slows down testsuite execution by formatting messages too eagerly",
  "1ba6e00e": "HHH-11372 Do not send RemoveExpiredCommands in repl/dist caches",
  "8b2a852a": "HHH-11445 - Improve Infinispan second-level cache documentation",
  "2868f1bb": "HHH-11420 - Update Byte Buddy to 1.6.6. and use more granular locks on type caches",
  "99a033c2": "HHH-11202 : IllegalAccessException on Embeddable ID after serializing Getter in cache key",
  "4a32f1a0": "Update Byte Buddy to v1.6.0. Use cache for type storage to avoid leaks.",
  "45a65daf": "HHH-11083 Fix compilation failures in hibernate-jcache",
  "60d420b0": "HHH-11083 : clarify that hibernate.cache.keys_factory is only supported when using Infinispan",
  "6d8f93c1": "Document `hibernate.cache.keys_factory`",
  "9c376a39": "HHH-11083 WrongClassException using Infinispan and sharing cache regions",
  "865d5398": "HHH-11226 Hibernate cache throws NullPointerException during wildfly app server startup",
  "a21c0865": "HHH-11254 Timestamps cache fails validation if eviction strategy = MANUAL",
  "52fcd906": "HHH-11105 - Update Ehcache to 2.10.3",
  "de3153a8": "HHH-11023 - Startup performance regression : schema update/validate",
  "d4d2b8f7": "HHH-11119 Improve performance of StringHelper.qualify() and StringHelper.unqualify()",
  "81aba177": "HHH-11098 - Attributeconverter converttoEntityAttribute and convertToDatabaseColumn code is called within a query.list() call -> slow",
  "0a2a5c62": "HHH-11097 - Performance problem if cached entity has attribute state with an expensive toString() method (LOB, etc)",
  "c7c9e421": "HHH-11097 - Performance problem if cached entity has attribute state with an expensive toString() method (LOB, etc)",
  "4f991c3e": "HHH-9739 : Updated object is written to second level cache with CacheMode.IGNORE",
  "dfa3f52e": "HHH-10427 Make sure to cache Provided services in the fast-access map as well",
  "73aa3592": "HHH-10664 Remove duplicate cacheAccess.close() invocation",
  "a872885a": "HHH-10770 JCache 2nd-level cache",
  "45e76918": "HHH-10773 - Add a toString() implementation to the READ_WRITE Ehcache Item object",
  "e6d3ad50": "HHH-9406 - Add method for get avg execution time for offen but really fast queries (where avg execution time ~0-1 ms)",
  "66d24367": "HHH-10631 - Auto evict collection cache not work when owner side update parent to null",
  "732abea8": "HHH-10614 - Auto evict collection cache throws exception with null values",
  "0385b143": "HHH-10602 - Retrieve cached value with enable_lazy_load_no_trans throws an exception",
  "009d8813": "HHH-10593 - Avoid NullPointerException with auto_evict_collection_cache and many-to-many",
  "8b181857": "HHH-10593 - Avoid NullPointerException with auto_evict_collection_cache and many-to-many",
  "58c6c7a9": "HHH-10546 InfinispanRegionFactory should stop any caches it starts",
  "b03947e4": "HHH-10545 InfinispanRegionFactory inadvertently starts the default cache during stop()",
  "9584a7b0": "HHH-10272 Make pending-puts cache template configurable",
  "af59f6a5": "Update documentation of second-level-caches",
  "3aef8de8": "HHH-10416 Drop superfluous immutable-entity cache configuration. Default to entity cache configuration if undefined.",
  "828a83dc": "HHH-10286 SessionFactoryImpl doesn't cache and reuse existing collection cache region access strategies",
  "840d906c": "Testcase for HHH-9764 Conflicts: hibernate-core/src/test/java/org/hibernate/test/cache/CollectionCacheEvictionTest.java",
  "c802042f": "HHH-10366 Improve performance and reduce CPU load when fetching reference cached objects",
  "caf902dd": "HHH-10289 - CPU performance regression in StatefulPersistenceContext.addEntry()",
  "da4593de": "HHH-10289 - CPU performance regression in StatefulPersistenceContext.addEntry()",
  "0b57c4e7": "HHH-10124 HHH-8732 Upgraded Ehcache to 2.10.1",
  "1d5b0779": "HHH-10264 - hibernate.cache.auto_evict_collection_cache problems; HHH-9140 - Error in CollectionCacheInvalidator when hibernate.cache.auto_evict_collection_cache is enabled",
  "bf2eb018": "HHH-10264 - Values weren't cached after persist",
  "9128b84b": "HHH-9481 - SQL query clears all cache",
  "1729067c": "HHH-10190 - org.hibernate.engine.spi.ActionQueue#executeActions() optimization",
  "5edcf26a": "HHH-10083 Support replicated and distributed caches",
  "3689924d": "HHH-10030 Add read-write cache concurrency strategy to Infinispan 2LC",
  "1d62197b": "HHH-10008 SessionImplementor.getTimestamp() does not return transaction start time; HHH-9962 Second level query cache returns stale data if query and update statements are executed concurrently",
  "eaf4c789": "HHH-9975 CacheImpl.containsQuery(String) does not check if query cache is enabled",
  "93d39fa4": "HHH-9868, HHH-9881 Must not write into non-transactional caches during transactional write",
  "1f24fa63": "HHH-9868, HHH-9881 Implementation for non-transactional caches and non-JTA transactions.",
  "fa8e9407": "HHH-9988 Separate transaction manager used for Hibernate and caches",
  "ab4c6841": "HHH-10005 Query in context needs precedence over query in cache",
  "0cb00db3": "HHH-7898 Regression on org.hibernate.cache.infinispan.query.QueryResultsRegionImpl.put(Object, Object)",
  "33b00de3": "HHH-9913 - NPE in org.hibernate.cache.internal.CacheDataDescriptionImpl.decode()",
  "750d6fb0": "HHH-9857 - Reuse of EntityEntry for bytecode enhanced read-only reference cached entities",
  "3a515b5d": "HHH-9857 - Reuse of EntityEntry for bytecode enhanced read-only reference cached entities",
  "2f1b67b0": "HHH-9843 Use optimized cache key implementation in Infinispan 2LC build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle When multi-tenancy is not used, entity's @Id can be used as key to the cache build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Added Type to CacheDataDescription (in SPI), later used for container key equivalence build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Introduced CacheKeysFactory to SPI build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Pending puts cache is now per region - this is necessary as we need to use custom key equivalence",
  "16ae00a5": "HHH-9840 Allow 2nd level cache implementations to customize the various key implementations",
  "9ac0a343": "HHH-9840 Refactor org.hibernate.cache.spi.CacheKey into an interface",
  "f593a9c1": "HHH-9874 Perform Infinispan configuration parsing using the classloader of the cache integration module",
  "53a8b18c": "HHH-9844 : org.hibernate.cache.spi.access.AccessType enum names are not valid values for hibernate.cache.default_cache_concurrency_strategy",
  "ccc83405": "HHH-9695 Use non-transactional cache for immutable entities",
  "5514aea2": "HHH-9629 - l2 cache key constructed wrong for entity with inheritance when fetching lazy property",
  "4b3a655d": "HHH-9804 Ehcache integration uses a write lock where a read lock is requested in EhcacheTransactionalDataRegion",
  "df898f3f": "HHH-9796 : Allow running hibernate-infinspan tests using Infinispan configuration specified by hibernate.cache.infinispan.cfg",
  "72a50ae3": "HHH-9497 Remove call to Ehcache ClassLoaderUtil.getStandardClassLoader()",
  "033f084e": "HHH-9600 remove outdated info about cache concurrency strategies support",
  "3cc8cb31": "HHH-9573 : Add EntityManager test case illustrating usage of query cache",
  "b8923b1e": "HHH-9337 Region.destroy() attempts to remove a cache listener, but region class is not annotated with @Listener",
  "0f85e847": "HHH-8949 @QueryHint( name='javax.persistence.cache.retrieveMode', value='<valid value>') does not work",
  "f9a49efd": "HHH-9231 : Uncommitted data can remain in transactional collection cache after rollback if collection is initialized after flush",
  "af5791f6": "HHH-9231 HHH-5690 : Test cases for transactional cache strategy",
  "dad4c64d": "HHH-5690 : Entity cache after persist, flush, rollback (test case)",
  "478e2e26": "HHH-9201 - Evict cache instead of remove after transaction completion",
  "07bc5ce8": "HHH-9200 - Natural id cache statistics are not cleared",
  "656997a8": "HHH-9174 cache SqlExceptionHelper reference",
  "5979046d": "HHH-9174 Increase performance of SqlExceptionHelper#handleAndClearWarnings Conflicts: hibernate-core/src/main/java/org/hibernate/engine/jdbc/spi/SqlExceptionHelper.java",
  "5d3ed894": "HHH-9028 Test case: when second level cache is enabled, the session returns the objects even if the class doesn't match",
  "f51fead7": "HHH-9010: Revert 'HHH-8961 Reduce allocation cost of org.hibernate.cache.spi.CacheKey instances'",
  "0dc24f10": "HHH-8961 corrected test failure Conflicts: hibernate-infinispan/src/test/java/org/hibernate/test/cache/infinispan/functional/cluster/EntityCollectionInvalidationTestCase.java",
  "f69e1a6b": "HHH-8961 Reduce allocation cost of org.hibernate.cache.spi.CacheKey instances",
  "f3da202b": "HHH-8946 Optimize JdbcCoordinatorImpl for CPU performance",
  "324d5536": "HHH-8947 Optimize performance of ServiceRegistry for intense lookup, small contents and almost no writes",
  "9f215c84": "HHH-7205: Added catching exception for executing session.get when session cache contains proxy for non-existing object",
  "11033040": "HHH-8738 NPE in HibernateUtil if no default ehcache configuration",
  "e012809f": "HHH-6004 improved HashMap performance in StructuredCacheEntry",
  "1658a477": "HHH-8647 - hibernate.cache.use_reference_entries + queries",
  "a9aaf878": "HHH-7130 Query cache eviction logging",
  "bd93745a": "HHH-4577 - 2L query cache: Low performance of flush and commit due many unnecessary (pre)invalidate calls on UpdateTimestampsCache",
  "31ad2673": "HHH-4577 - 2L query cache: Low performance of flush and commit due many unnecessary (pre)invalidate calls on UpdateTimestampsCache",
  "7faae967": "HHH-6576 NPE in Ehcache HibernateEhcacheUtils",
  "bcd61858": "HHH-4910 The collection cache is evicted if a related collection element is inserted, removed or updated",
  "8dae133b": "HHH-4577 - 2L query cache: Low performance of flush and commit due many unnecessary (pre)invalidate calls on UpdateTimestampsCache",
  "7bca11a5": "HHH-4577: Improved performance of ActionQueue",
  "ad5c0f1f": "HHH-5920: improve the performance of PersistentClass",
  "90532087": "HHH-7959 gracefully handle non-transactional entity cache",
  "8aff7db2": "HHH-8410 NaturalIdXrefDelegate could miss some cached entries from naturalIdResolutionCacheMap",
  "ab47eae5": "HHH-8211 Fixed checkstyle issues in hibernate-ehcache module",
  "489ee4a7": "HHH-7943 Added support for ehcache and infinispan strategies and OSGi services. Numerous ehcache and infinispan CL fixes.",
  "6d6dcdf2": "HHH-7605 - Event cache descriptive error messages",
  "7d99ca57": "HHH-7402 - Improve performance of named query registry",
  "8998b415": "HHH-7869 bad performance problem with org.hibernate.internal.util.StringHelper#firstIndexOfChar",
  "e5f8039f": "HHH-8044 Remove mention of unsupported cache providers from documentation",
  "1a20b129": "HHH-7994 Improve OsgiClassLoader performance",
  "9c3998da": "HHH-7872 - Improved L2 cache storage of 'reference' data",
  "2ff69d24": "HHH-7872 - Improved L2 cache storage of 'reference' data",
  "b0efdb4d": "HHH-7871 Write cache should not using LOCAL flag",
  "263a8415": "HHH-7840 org.hibernate.id.IncrementGenerator very slow",
  "49ea5d65": "HHH-7763 No need to clear caches when these are going to be stopped",
  "a074d324": "HHH-7640 Improve single node Infinispan 2LC performance",
  "c9fd71fe": "HHH-7683 - Optimize performance of AbstractLazyInitializer.prepareForPossibleSpecialSpecjInitialization()",
  "58fa4c2e": "HHH-4459 Query with Composite Primary Key parameter crashes when query cache is on",
  "f85e9247": "HHH-7631 - Improve performance of UpdateTimestampsCache",
  "7d5ece82": "HHH-7309 Natural-id not cached in shared cache after insert",
  "d4eade81": "HHH-7560 ehcache unit test intermittently failing (UnknownServiceException)",
  "fae0d3f4": "HHH-7509 NPE regression in second level cache",
  "8e73bb05": "HHH-7509 fix NPE in second level cache",
  "45118e72": "HHH-7502 - Problems with multi-tenancy and 2nd level cache",
  "97ac8311": "HHH-7426 Setting cacheable='true' in orm.xml does not enable caching of entity in 2lc",
  "27df7364": "HHH-7350 - Fixed up the unit tests, to allow the lock of the cache region for an access strategy of READ_ONLY.",
  "66579833": "HHH-7350 - removed overridden methods in ReadOnlyAccess lock/unlock an instance and/or region of the cache, since inserts and deletes are allowed with a CacheConcurrencyStrategy of READ_ONLY.",
  "0bca4ab9": "testcase for HHH-7245 (Inline natural-id synchronization doesn't consider objects loaded from shared cache)",
  "a2bbe3cb": "HHH-7282 - Move org.hibernate.cache.internal.Timestamper to hibernate-testing module",
  "a334b9f0": "HHH-7238 Remove unneeded cache listeners",
  "52d5d374": "HHH-7179 QueryResultsRegionImpl needs the @Listener annotation (otherwise org.jboss.as.test.integration.jpa.secondlevelcache.JPA2LCTestCase will fail)",
  "9c207b11": "HHH-7210 - Natural-id cache put stats not being correctly updated on insert for 'asynch' cache providers",
  "4f64b56a": "HHH-7160 - NaturalIdXrefDelegate#cache() needs to remove obsolete entries in shared cache when NaturalId values changed",
  "fd6b3b4d": "HHH-7089 Return naturalId cache region instead of null",
  "34497524": "HHH-7127 Fix query cache evictAll in single node",
  "c4735205": "HHH-6974 Class level naturalId cache and stats",
  "5eee5262": "HHH-1706 Support evictAll for LOCAL second level cache environments",
  "d4e8e997": "HHH-6921 com.fasterxml:classmate dependency should not be exported to published pom",
  "a6b761e2": "HHH-6862 Some additional small performance improvements",
  "d12396ee": "HHH-6862 Reuse cached entryArray of IdentityMap in StatefulPersistenceContext as much as possible",
  "fb0255a8": "HHH-6858 non-intrusive performance improvements",
  "ba764816": "HHH-6827 correct testing 2L cache impl, mostly are copied from ehcache impl",
  "15a46a96": "HHH-6827 correct testing 2L cache impl, mostly are copied from ehcache impl",
  "31ab12f8": "HHH-5945 Race condition in building query cache",
  "2357dcc4": "HHH-6735 Introduces an InstrumentationService that caches isInstrumented per class",
  "b307a801": "Immutable natural key lookup not recognized using query cache",
  "e655163c": "change ehcache disk location used for testing to avoid conflicts",
  "2a15694f": "ColumnName cache now uses a map which supports multithreaded access. The implementation now uses ConcurrentHashMap which provides faster multithreaded gets and safe writes.",
  "b2cae5b1": "HHH-5478 Updated docs for ehcache transactional & clustered support",
  "d0476de7": "HHH-6451 adapt hibernate-ehcache to the new api",
  "c26a23bf": "EHC-864 Moved all Hibernate dependent classes from ehcache-core to hibernate-ehcache module and fixed to use new API",
  "9fde4c0d": "HHH-6297 remove legacy cache api",
  "11f83b03": "HHH-6297 remove legacy cache api",
  "92ad3eed": "HHH-6297 remove legacy cache api",
  "dd46fe07": "HHH-6258: Change the un-released batch message from WARN to DEBUG for performance improvement.",
  "0c9a55d3": "HHH-5025: waiting max 3 seconds for the cache to be written to disk",
  "4be53e9a": "HHH-6276 org.hibernate.test.cache.ehcache.EhCacheRegionFactoryImpl fails due to no slf4j in test configuration",
  "1ec6f9f7": "HHH-6276 org.hibernate.test.cache.ehcache.EhCacheRegionFactoryImpl fails due to no slf4j in test configuration",
  "0f18069e": "HHH-6276 org.hibernate.test.cache.ehcache.EhCacheRegionFactoryImpl fails due to no slf4j in test configuration",
  "7dc925fc": "HHH-5580 - Improving findEntityTypesChangedInRevision() method performance",
  "c930ebcd": "HHH-6191 - repackage org.hibernate.cache per api/spi/internal split",
  "e9f16e4a": "HHH-6014: ignoring the performance tests",
  "329486bc": "HHH-5990 - Remove non-maintained second level cache integrations",
  "7f7f073c": "HHH-5990 - Remove non-maintained second level cache integrations",
  "29c9e812": "Removed docs folder from swarmcache module",
  "4aa9cbe5": "HHH-5823 - Poor multithread performance in UpdateTimestampsCache class",
  "ddbeaf56": "HHH-5824 - Poor multithread performance in SessionFactoryImpl.getQueryCache method",
  "ccd23dbd": "HHH-5823 - Poor multithread performance in UpdateTimestampsCache class",
  "4d6a68c2": "HHH-5824 - Poor multithread performance in SessionFactoryImpl.getQueryCache method",
  "04da2750": "HHH-5793 - All put/remove calls should skip cache load and remote get",
  "0a9e201a": "HHH-5793 - Apply skip cache load optimization to timestamp updates",
  "1dc73176": "Create new Ehcache CacheRegionFactory implementation. This delegates to underlying classes in Ehcache.",
  "863864fc": "HHH-5793 - Query and timestamp caches to use cluster cache loader",
  "b3aa9e0c": "HHH-5793 - Query and timestamp caches to use cluster cache loader",
  "06e4f69b": "HHH-5655 - In Gradle build, better account for non-standard local maven repo cache locations",
  "cf19ba33": "HHH-5616 - Switch to Gradle for builds .. swarmcache",
  "d19182f3": "HHH-5616 - Switch to Gradle for builds .. oscache",
  "429d0fd8": "HHH-5616 - Switch to Gradle for builds .. ehcache",
  "5064d481": "[HHH-5563] (JndiInfinispanRegionFactory creates region with a stopped cache, if region previously existed) Fix compilation error as a result of merge.",
  "19300880": "HHH-5490 - dirty data be inserted into 2L cache",
  "d587904e": "[HHH-5552] (Infinispan listener implementations need to load entities and keys using application classloader) A wrapper class now puts the right classloader for listener calls. [HHH-5563] (JndiInfinispanRegionFactory creates region with a stopped cache, if region previously existed) A check was added to start the cache if no invocations are allowed any more.",
  "a4ea233e": "[HHH-5542] (Infinispan region factory uses same cache instance for all timestamp regions)",
  "df6072d2": "[HHH-5545] (Resolve query cache results not up to date testsuite failures)",
  "9c919ee9": "HHH-5372: applying patch by Matthew B. Jones and Erik-Berndt Scheper Using the revend column in queries that retrieve historical data, which is much faster then doing the subselect.",
  "21c49fff": "HHH-5520 - Per org.hibernate.cache.RegionFactory javadocs, implementors should be allowed to use no-arg constructor",
  "487ccb38": "HHH-5489 - Deprecate jbosscache as a second level cache provider, in favor of infinispan",
  "efe2ad80": "[HHH-5519] (VersionedItem should not extend Item, otherwise query cache results are confusing) Fixed.",
  "31037bd1": "[HHH-5511] (Infinispan Region.destroy() impl should call cache.stop()) Fixed. [HHH-5512] (JndiInfinispanRegionFactory shouldn't try to stop CacheManager) Fixed.",
  "222e0937": "Fix unit test by adding necessary Configuration.buildMappings() call, otherwise cache strategy is not set correctly in entity.",
  "39b0774a": "HHH-5469 - HHH-3659 is only half done, due to HHH-4989 (i.e. no HQL performance log when running Java 5)",
  "b621e682": "HHH-5426 - HQL update/delete does not invalidate the query cache",
  "dc6fe99c": "HHH-5259 Invalid reflection optimization configuration property name in Hibernate documentation",
  "be6042d8": "HHH-2350 : second-level cache broken for non-inverse bidirectional one-to-many relation",
  "03f6f7fd": "HHH-5380 Added annotations in the cache configuration mix",
  "29c16a5f": "HHH-5150 Added the properties hibernate.id.new_generator_mappings and hibernate.cache.default_cache_concurrency_strategy to the configuration poroperties section",
  "c53359d4": "HHH-5251 : NativeSQLQueryReturn impls pre-cache a final hashcode based on non-final fields",
  "8e76bf96": "HHH-5210 Query Cache effective only after closing the session that created the cache",
  "dfc43107": "HHH-2350 : tests for 2nd level cache broken for non-inverse bidirectional one-to-many relation",
  "b15adba4": "Disable lock striping to avoid potential deadlocks like the ones explained in http://www.jboss.org/index.html?module=bb&op=viewtopic&p=4218955#4218955. It's worth noting that In Infinispan, each entity/collection has its own cache and the update timestamps and query cache are maintained separately, so the chances of this happening are much lower.",
  "d88f65ff": "[HHH-4836] (Infinispan: 2L QueryCache don't considers cached queries which belong to current transaction) Fixed by not suspending transactions on get any more, since no locks are aquired on get.",
  "89acfc76": "HHH-4898 : Results from read-only Criteria and Query obtained from query cache are not read-only",
  "6abbd54e": "HHH-4896 : Read-only proxy targets initialized from second-level cache are not read-only",
  "c57ab61d": "HHH-4659 - Add support for standard declarative cache (@Cacheable)",
  "b34bb068": "[HHH-4814] (Configure global/cache level JMX statistics from Hibernate configuration file) Added hibernate.cache.infinispan.statistics that enables cache manager and individual cache statistics.",
  "5d8d7003": "HHH-4659 - Add support for standard declarative cache (@Cacheable)",
  "9fc77941": "HHH-4659 - Add support for standard declarative cache (@Cacheable)",
  "d24ed1a1": "HHH-4659 - Add support for standard declarative cache (@Cacheable)",
  "fca12484": "HHH-4786 - SerializableType + custom Serializable class + L2 cache causes problems",
  "e264d8e8": "HHH-4735 : Proxy can be associated with a new session when it is already connected to a different one (removed cached EntityKey)",
  "e183c40e": "HHH-4659 HHH-4668 add mapping support for validation-mode and shared-cache-mode",
  "16528acc": "[HHH-4520] (Infinispan second level cache integration can cache stale collection data) testManyUsers now enabled after ISPN-277 was fixed.",
  "1005f19b": "HHH-3860 - Cascading performance problems when session contains many entities",
  "abc165ea": "[HHH-4520] (Infinispan second level cache integration can cache stale collection data) Ported fix. testManyUsers has been disabled while ISPN-277 gets fixed. Finally, Infinispan version has been upgraded to 4.0.0.CR2.",
  "aa8ad85c": "HHH-4550 - Document that update-timestamps cache region should not be configured for expiry.",
  "f5f26545": "Upped ehcache dependency to version 1.5",
  "6cfe3ba6": "[HHH-4103] Added cache infinispan to root modules.",
  "ce8df153": "[HHH-4103] Initial cache provider implementation.",
  "577024e7": "HHH-4022 : Add an actual API contract for querying/managing cache regions (from app code)",
  "a41506f4": "HHH-4034 - Update org.hibernate.action.BulkOperationCleanupAction to use new Region cache APIs",
  "b339e331": "HHH-4022 - Add an actual API contract for querying/managing cache regions (from app code)",
  "cd23a6c3": "HHH-4029 - Remove cache-jbosscache2 module",
  "d5124a50": "HHH-4028 - Move current cache-jbosscache2 module content to cache-jbosscache",
  "e36b0c67": "HHH-4028 - Move current cache-jbosscache2 module content to cache-jbosscache",
  "374fed2b": "HHH-4028 - Move current cache-jbosscache2 module content to cache-jbosscache",
  "6e7c0b76": "HHH-4029 - Remove cache-jbosscache2 module",
  "a5983266": "HHH-4028 - Move current cache-jbosscache2 module content to cache-jbosscache",
  "b6bfb72d": "HHH-4028 - Move current cache-jbosscache2 module content to cache-jbosscache",
  "d928a452": "HHH-4027 - Remove current cache-jbosscache module content",
  "640d95bb": "HHH-4027 - Remove current cache-jbosscache module content",
  "1aed1637": "Upgraded JBoss Cache to 3.1.0.GA Enable org.hibernate.test.cache.jbc2.functional.MVCCConcurrentWriteTest.testManyUsers() now that JBCACHE-1494 is fixed",
  "fd8f6fbb": "[HHH-3817] Don't cache stale data via putFromLoad [HHH-3818] Handle evictAll 'without regard for transactions'",
  "eb601601": "[HHH-3817] Don't cache stale data via putFromLoad [HHH-3818] Handle evictAll 'without regard for transactions'",
  "c520c686": "cleaned up pom for ehcache integration",
  "687b28fc": "HHH-3357 : clear() performance",
  "0e071763": "HHH-3580 set forkmode to perTest. This was also needed in the old ant structure. Unfortunately, this slows down the build. We need to identify why this is needed. One of the troublemaers is PersistTest. There are also other thest which seem dubious. All test needs a review.",
  "20dd9ccc": "build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Moved orm_1_0.xsd into the src/main/resources so that it properly get copied at build time build.gradle changelog.txt checkerstubs ci CONTRIBUTING.md databases dco.txt design dialects.adoc docker_db.sh documentation drivers edb etc gradle gradle.properties gradlew gradlew.bat hibernate-agroal hibernate-c3p0 hibernate-community-dialects hibernate-core hibernate-ehcache hibernate-envers hibernate-graalvm hibernate-hikaricp hibernate-integrationtest-java-modules hibernate-jcache hibernate_logo.gif hibernate-micrometer hibernate-platform hibernate-proxool hibernate-spatial hibernate-testing hibernate-vibur Jenkinsfile lgpl.txt local-build-plugins migration-guide.adoc nightly.Jenkinsfile patched-libs README.adoc release rules settings.gradle shared tck test-case-guide.adoc tooling utilities.gradle Enabled query cache in hibernate.properties",
  "a6ca833e": "HHH-3392 : query cache cluster replication with ResultTransformers",
  "77f9830c": "[HHH-3390] Use READ_COMMITTED for JBC 2 cache",
  "9b76275d": "[HHH-3390] Use READ_COMMITTED for JBC 2 cache",
  "b3ae358a": "[HHH-3340] Don't fail if cache TM != discovered TM",
  "eca1c43d": "[HHH-3340] Don't fail if cache TM != discovered TM",
  "bd22a99f": "added releasenotes module structure; updated jbosscache2 manual pom to not use SNAPSHOTS",
  "94a5cdf3": "pin jdocbook plugin at version 2.1.0; temporarily disable jbosscache manual building (seems the jdocbook plugin may not like empty translations)",
  "0e6db9d0": "HHH-3140 : region prefix for entity and collection caches",
  "7ee71407": "HHH-2957 : ActionQueue insertions sorting performance",
  "e9d83eeb": "Move to JBC 2.1.0.CR2/JGroups 2.6.1 Add some properties that testsuite can set for faster test execution",
  "8294650c": "Add some properties that testsuite can set for faster test execution Remove unsupported TCP_NIO configs",
  "dd931020": "HHH-2863 : isolate cache integration testing",
  "a15cab09": "HHH-2863 : isolate cache integration testing",
  "252123d9": "Run tests w/ java.net.preferIPv4Stack=true; cluster formation is very slow otherwise on some systems",
  "27223c6b": "HHH-2921 : added test cases that execute polymorphic queries when there is a superclass proxy for the resulting entity in the session cache",
  "fb398102": "Add some timestamp cache validation",
  "d0634874": "jbosscache 2.x work",
  "c832aeba": "[HHH-2156] Section 19.3, 'Managing the caches' doesn't document CacheMode.IGNORE",
  "210f4faa": "jbosscache 2.x work",
  "66736582": "partial jbosscache2.x support"
}, "Highlight": {
  "": ""
}, "HikariCP": {
  "330e64e": "Fixes #1528 regression in fail fast handling.",
  "93c7178": "Fixes #1528 regression in fail fast handling.",
  "ea3043d": "Fixes #817 restore former failfast=false behavior by completely bypassing the connection validation if initializationFailTimeout is negative.",
  "f8e7f9a": "Revert change to clear travis .m2 cache.",
  "44fb9ac": "Attempt to clear broken cache (org.hamcrest.core dependency)",
  "b1e2b97": "Add cache back.",
  "c48a7b2": "Temporarily remove cache.",
  "f0b3c52": "Great simplification of the ConcurrentBag using a direct handoff queue (SynchronousQueue) with a huge performance win (1.8x) for contended pool access and at least 25% for non-contended access.",
  "6e06620": "I didn't like this change, but missed it in the review. Readability over performance in this case. Not to mention that the JVM is likely to hoist the instanceof check and cast out of the loop because it is final invariant.",
  "5f851a4": "reverted. using cachedExecutor for setting network timeout as before",
  "5c39c0a": "cache and refresh 'volatile' validationTimeout too",
  "075084c": "set lastAccess only if rolled back closeStatements() already caches sqlexception",
  "d362ed5": "set lastAccess only if rolled back closeStatements() already caches sqlexception",
  "dbe9320": "Back-out deoptimization. Benchmark shows degradation, which makes sense because of a new conditional in close() -- the return value of closeOpenStatements() -- which is 'true' 99.999% of the time and therefore the conditional is merely overhead.",
  "8fd73d2": "HikariPool: Log consitency PoolElf: I think two more round trips to db/driver is overkill (for pool to support bad driver) especially jdbc spec reads 'closing statement must close any current result set'. It is already slow (compare to others) having network timeout as well as query timeout to validate connection!",
  "7ad373a": "Logging useful to troubleshoot slow pool cycling.",
  "ada15b6": "Logging useful to troubleshoot slow pool cycling.",
  "54c70c7": "FastList reuse and other minor optimizations.",
  "6811e36": "Somewhat mitigate minor performance regression.",
  "11aab3d": "Escew fastpath if there are pending threads waiting to avoid starvation of those threads.",
  "5ff480a": "Remove the only String.format() call that could possibly have any effect on performance. Left the others, they're more readable.",
  "2667687": "Fixed#233 shutdown the pool during fail-fast initialisation on failure.",
  "2843864": "Make initializationFailFast fail faster.",
  "77d6f50": "Issue #213 allow initialization fail fast even when minimumIdle is 0.",
  "5a90be9": "Make non-overridden methods final. Gets back to pre-refactor performance.",
  "688d191": "Merge more common code. HikariConfig is not a critical class, but we need to be careful about what we merge due to performance implications of inheritance and virtual dispatch that cannot be optimized by the JIT.",
  "da4ffe6": "Fix a fast-spin loop when the pool is suspended and and connections are attempted to be added.",
  "b64dc6f": "Revert over-aggressive optimization, and various cleanup.",
  "6818783": "Improve accuracy of pool stat reporting (at a slight performance cost).",
  "c04f59f": "Minor performance tweaks and readability changes.",
  "00b77f9": "Tweak the leak task handling and resetConnection() handling for small performance gains in the *nominal* case. Possibly slower in edge-cases (but who cares).",
  "028996b": "Minor optimizations.",
  "fd15648": "Minor performance tuning to avoid excessive connection attempts of downed databases.",
  "9ab0b17": "Performance optimizations. Remove unnecessary int -> long implicit conversions. These are hidden costs easily missed.",
  "b516149": "Performance optimizations.",
  "fb69033": "Fix tests to use fail fast initialization",
  "53558b6": "Add back java7/8 fairness optimization without breaking Java 6.",
  "d80d793": "ConcurrentBag optimizations.",
  "aea65f9": "Delete performance benchmarks, they are now hosted as a separate github repository.",
  "ab94cf4": "Delete performance benchmarks, they are now hosted as a separate github repository.",
  "a447e52": "Delete performance benchmarks, they are now hosted as a separate github repository.",
  "947e787": "Rollback auto commit optimization, it performed worse.",
  "4bf148f": "fix fast statement list overflow inconsistency",
  "2ecedd9": "Added configuration flags for fail-fast initialization and MBean registration.",
  "555075a": "Minor performance tweak.",
  "aeb8c91": "Changes to prevent over aggressive optimization by the JIT which was producing incorrect benchmarking results.",
  "29520cd": "Added configuration flags for fail-fast initialization and MBean registration.",
  "5812d0e": "Minor performance tweak.",
  "8378ab9": "Changes to prevent over aggressive optimization by the JIT which was producing incorrect benchmarking results.",
  "352a269": "Replace bound check with try..catch it is faster in the nominal case.",
  "4a6eb29": "Use our own list implementation which does not do bounds checking, among other optimizations.",
  "a754c87": "Micro optimization, avoids unnecessary assignment.",
  "3861c17": "Increate timing window to avoid time-sensitive failures in unit tests on slow machines (travis-ci)",
  "1ed2153": "Increate timing window to avoid time-sensitive failures in unit tests on slow machines.",
  "970e3a5": "Increate timing window to avoid time-sensitive failures in unit tests on slow machines.",
  "519c9c8": "osgi unit tests #21: switch to fax-exam-container-native (faster)",
  "a2eee44": "More performance tweaks.",
  "8f09fd5": "Increased thread count and re-ran performance runs.",
  "90ccb08": "Update performance numbers after more profiling."
}, "hippo4j": {
  "97c9bb2": "Console i18n optimization",
  "f951e89": "Format optimization",
  "4757e00": "Code optimization and logic refactoring (#909)",
  "4366f9f": "Code optimization (#847)",
  "9371f9e": "Code optimization",
  "678ec1d": "Code optimization",
  "1acfb98": "Http tool code and format optimization",
  "e2ece1f": "Code format optimization",
  "50746f4": "Optimize client cache capacity",
  "e08068e": "Front-end console optimization",
  "8ee0e4e": "Code formatting optimization",
  "b9247ef": "Comment formatting optimization",
  "b805989": "replace fastjson to JSONUtil (#636)",
  "f236718": "Code formatting optimization",
  "a124169": "RabbitMQ adapter optimization",
  "6ee4104": "Bump fastjson (#565)",
  "7467ea6": "Code formatting optimization",
  "22fc38b": "Code formatting optimization",
  "7b461ba": "Front-end console UI optimization",
  "1bf74be": "Front-end console UI optimization",
  "af3de5c": "Alibaba dubbo thread pool optimization",
  "220eaa1": "Front-end console optimization",
  "2045f13": "Front-end console optimization",
  "e76e1a2": "Basic monitoring package directory optimization",
  "1da8eda": "Configure refresh code optimization",
  "71e965c": "Console style optimization",
  "f0031ee": "Console style optimization",
  "d320a16": "Thread pool dynamic registration optimization",
  "0647857": "Thread pool monitoring optimization",
  "ef93ab4": "Add thread pool automatic registration function & log printing optimization",
  "b9e3d72": "Log print content optimization",
  "df628c5": "hippo4j-config code naming and log optimization",
  "676e0fe": "hippo4j-adapter code naming and log optimization",
  "4a4f7a4": "hippo4j-server code naming and log optimization",
  "27f1d3d": "hippo4j-monitor code naming and log optimization",
  "6ccecf1": "hippo4j-discovery code naming and log optimization",
  "d4b0b46": "hippo4j-core code naming and log optimization",
  "abae0d1": "hippo4j-core-spring-boot-starter code naming and log optimization",
  "1164eaa": "hippo4j-spring-boot-starter code naming and log optimization",
  "06e9cf8": "Console optimization (#438)",
  "10f4b7d": "Optimized the performance of Dingding and Enterprise WeChat to read notification templates",
  "0e06311": "Thread pool monitoring page chart UI optimization (#358) (#432)",
  "cab1ebf": "Thread pool monitoring page chart UI optimization (#358)",
  "4d95c95": "fix: issue #428: delete fastjson version number",
  "7b1af5f": "Front-end style optimization",
  "4689005": "Console thread pool alarm UI and function optimization (#375)",
  "0452bfd": "Web, framework, thread pool editing, pop-up UI optimization (#384)",
  "38194f8": "Thread pool adding and editing page UI optimization (#380)",
  "b7df63b": "Thread pool run details page front end UI optimization (#357)",
  "af46623": "Code format optimization",
  "23daaa4": "Hystrix thread pool monitoring optimization",
  "45fd3d8": "Hystrix thread pool monitoring optimization",
  "c1e5b4a": "Hystrix thread pool monitoring optimization",
  "36e7f64": "Hystrix thread pool monitoring optimization",
  "241de5b": "Hystrix thread pool monitoring optimization",
  "9f00d5e": "Hystrix thread pool monitoring optimization",
  "5e57311": "Front end interaction optimization of adapter pool",
  "92c93ab": "Front end interaction optimization of adapter pool",
  "ea86ec7": "Front end console thread pool stack page optimization",
  "1635327": "Front end console optimization list display field",
  "14e1f41": "Dubbo thread pool adaptation code optimization",
  "f15469f": "Dubbo thread pool adaptation code optimization",
  "6b6066f": "Dubbo thread pool adaptation logic optimization",
  "258bda4": "Format optimization",
  "306ed67": "Clean up the adapter cache when the client is shut down",
  "5ca6e50": "Merge pull request #203 from weihubeats/performance_optimization",
  "0393b86": "Code formatting optimization",
  "9dbdd07": "Merge pull request #170 from weihubeats/feature_generic_optimization",
  "ed3517c": "generic optimization"
}, "hive": {
  "7bca1b31": "HIVE-26035: Implement direct SQL for add partitions to improve performance at HMS (#3905)",
  "2cdd5f2c": "HIVE-26928: LlapIoImpl::getParquetFooterBuffersFromCache throws exception when metadata cache is disabled (Simhadri Govindappa, reviewed by Denys Kuzmenko)",
  "856d8070": "HIVE-26671: Incorrect results with Top N Key optimization (Stephen Carlin, reviewed by Krisztian Kasa)",
  "a017e54c": "HIVE-25848: Empty result for structs in point lookup optimization with vectorization on (#3592) (Gergely Hanko, reviewed by Alessandro Solimando and Adam Szita)",
  "ec284379": "HIVE-26438: Remove unnecessary optimization in canHandleQbForCbo (Abhay Chennagiri reviewed by John Sherman, Stamatis Zampetakis)",
  "fa111f15": "HIVE-26115: LLAP cache utilization for Iceberg Parquet files (#3480) (Adam Szita, reviewed by Laszlo Pinter)",
  "c4f6eb2f": "HIVE-26184: COLLECT_SET with GROUP BY is very slow when some keys are highly skewed (#3253) (okumin reviewed by Zoltan Haindrich)",
  "f29cb224": "HIVE-26238: Decouple sort filter predicates optimization from digest normalization in CBO (Stamatis Zampetakis, reviewed by Zoltan Haindrich)",
  "6626b556": "HIVE-25907: IOW Directory queries fails to write data to final path when query result cache is enabled (#2978) (Syed Shameerur Rahman reviewed by Peter Vary)",
  "1662a902": "HIVE-26060: Invalidate acid table directory cache on drop table (Antal Sinkovits, reviewed by Denys Kuzmenko)",
  "a6d5e7b5": "HIVE-25971: Closing the thread pool created for async cache (#3078)",
  "62668e5b": "HIVE-25955: Partitioned tables migrated to Iceberg aren't cached in LLAP (#3026) (Adam Szita, reviewed by Peter Vary)",
  "8f758769": "HIVE-25753: Improving performance of getLatestCommittedCompactionInfo (Yu-Wen Lai reviewed by Karen Coppage)",
  "3c9ea5d8": "HIVE-25841: Improve performance of deleteColumnStatsState (Peter Vary reviewed by Zoltan Haindrich) (#2914)",
  "f2d29efb": "HIVE-25768: Extend lifetime of query-level HMS response cache (John Sherman, reviewed by Stephen Carlin, Krisztian Kasa)",
  "08f1ea28": "HIVE-25757: Use cached database type to choose metastore backend queries (#2833) (Yongzhi Chen, reviewed by Peter Vary)",
  "1a6414ac": "HIVE-21075 : Metastore: Drop partition performance downgrade with Postgres (#2826) (Oleksiy Sayankin, reviewed by Peter Vary, Yongzhi Chen))",
  "5ed4049d": "HIVE-25651: Enable LLAP cache affinity for Iceberg ORC splits (Adam Szita, reviewed by Marton Bod and Peter Vary)",
  "a35a6ea7": "HIVE-25628: Avoid unnecessary file ops if Iceberg table is LLAP cached (Adam Szita, reviewed by Marton Bod)",
  "2d923cbd": "HIVE-25580: Increase the performance of getTableColumnStatistics and getPartitionColumnStatistics (Peter Vary reviewed by David Mollitor and Zoltan Haindrich) (#2692)",
  "c6d78ef6": "HIVE-25277: fix slow partition deletion issue by removing duplicated isEmpty checks (#2421)",
  "69c97c26": "HIVE-25370: Improve SharedWorkOptimizer performance (#2536) (Zoltan Haindrich reviewed by Krisztian Kasa)",
  "3fe1d587": "HIVE-25242. Query performs extremely slow with vectorized.adaptor = chosen (#2390) (Attila Magyar reviewed by Panagiotis Garefalakis)",
  "35221a70": "HIVE-25142 : Rehashing in map join fast hash table causing corruption for large keys (#2300)",
  "bc6c3cf6": "HIVE-21935: Hive Vectorization : degraded performance with vectorize UDF (Mustafa Iman, reviewed by Laszlo Bodor, Panagiotis Garefalakis and Rajesh Balamohan)",
  "2b196f1f": "Improve Table#getEmptyTable performance by disabling registerAllFunctionsOnce (#2251)",
  "94d72763": "HIVE-24729: Implement strategy for llap cache hydration (Antal Sinkovits, reviewed by Adam Szita)",
  "3e380ccb": "HIVE-24874: Worker performance metric (Denys Kuzmenko, reviewed by Peter Varga)",
  "cca0da1b": "HIVE-24871: Initiator / Cleaner performance performance metrics (Denys Kuzmenko, reviewed by Peter Varga)",
  "4f438f55": "HIVE-24728: Low level reader for llap cache hydration (Antal Sinkovits, reviewed by Adam Szita)",
  "300cc9c6": "HIVE-24259: [CachedStore] Constraints read from cache should be consistent snapshot (Ashish Sharma, reviewed by Adesh Rao, Sankar Hariappan)",
  "b63a7df3": "HIVE-23882: Compiler extensions for MJ probe optimization",
  "64af1445": "HIVE-24726: Track required data for cache hydration (Antal Sinkovits, reviewed by Adam Szita)",
  "210c4dcb": "HIVE-24725: Collect top priority items from llap cache policy (Antal Sinkovits, reviewed by Adam Szita)",
  "642efda5": "HIVE-24736: Make buffer tracking in LLAP cache with BP wrapper more accurate (Adam Szita, reviewed by Peter Vary)",
  "7ec44884": "HIVE-24741: get_partitions_ps_with_auth performance improvement (Vihang Karajgaonkar reviewed by Naveen Gangam)",
  "7281ab8d": "HIVE-24295: Apply schema merge to all shared work optimizations (#1662) (Zoltan Haindrich reviewed by Krisztian Kasa)",
  "08fd61d7": "HIVE-24667: Truncate optimization to avoid unnecessary per partition DB get operations (Denys Kuzmenko, reviewed by Peter Varga)",
  "5d735c20": "HIVE-18284: Fix NPE when inserting data with 'distribute by' clause with dynpart sort optimization (#1400) (Syed Shameerur Rahman reviewed by Zoltan Haindrich)",
  "138b662b": "HIVE-24337: Cache delete delta files in LLAP cache (Adam Szita, reviewed by Peter Vary)",
  "19324b01": "HIVE-24388: Enhance swo optimizations to merge EventOperators (#1750) (Zoltan Haindrich reviewed by Jesus Camacho Rodriguez)",
  "9037f8aa": "HIVE-24377: Instant deallocation option for proactive cache eviction (Adam Szita, reviewed by Antal Sinkovits and Peter Vary)",
  "0ea9d618": "HIVE-24341: Sweep phase for proactive cache eviction (Adam Szita reviewed by Antal Sinkovits, Peter Vary)",
  "fa187557": "HIVE-24241: Enable SharedWorkOptimizer to merge downstream operators after an optimization step (#1562) (Zoltan Haindrich reviewed by Jesus Camacho Rodriguez)",
  "0cd38cbd": "HIVE-24340: Mark phase for proactive cache eviction (Adam Szita, reviewed by Peter Vary and Antal Sinkovits)",
  "98c9a936": "HIVE-24325: Cardinality preserving join optimization fails when column is backtracked to a constant (Jesus Camacho Rodriguez, reviewed by Krisztian Kasa)",
  "8f4f3b90": "HIVE-24202: Clean up local HS2 HMS cache code (II) (Jesus Camacho Rodriguez, reviewed by Vineet Garg)",
  "a8d12dd7": "HIVE-24168: Disable hdfsEncryptionShims cache during query-based compaction (Karen Coppage, reviewed by Adam Szita)",
  "6d03aa40": "HIVE-24183: Clean up local HS2 HMS cache code (Jesus Camacho Rodriguez, reviewed by Vineet Garg)",
  "faac6140": "HIVE-24176: Create query-level cache for HMS requests and extend existing local HS2 HMS cache (Jesus Camacho Rodriguez, reviewed by Vineet Garg)",
  "54aff33d": "HIVE-24065: Bloom filters can be cached after deserialization in VectorInBloomFilterColDynamicValue (Laszlo Bodor reviewed by Ashutosh Chauhan)",
  "13ac9cd8": "HIVE-24061: Improve llap task scheduling for better cache hit rate (#1431)",
  "3998cd08": "HIVE-24025: Add getAggrColStatsFor to the HS2 local cache (Soumyakanti Das, reviewed by Jesus Camacho Rodriguez)",
  "71c9af7b": "HIVE-24001: Don't cache MapWork in tez/ObjectCache during query-based compaction (Karen Coppage, reviewed by Marta Kuczora)",
  "9fc8da6f": "HIVE-24004: Improve performance for filter hook for superuser path(Sam An, reviewed by Naveen Gangam)",
  "7293956f": "HIVE-23901: Overhead of Logger in ColumnStatsMerger damage the performance",
  "11e069b2": "HIVE-23822 Sorted dynamic partition optimization could remove auto stat task (#1231)",
  "03efbb3d": "HIVE-23768: Metastore's update service wrongly strips partition column stats from the cache (Stamatis Zampetakis, reviewed by Kishen Das, Jesus Camacho Rodriguez)",
  "2e18a740": "HIVE-23741: Store CacheTags in the file cache level (Antal Sinkovits, reviewed by Adam Szita)",
  "f39f518a": "HIVE-23729: LLAP text cache fails when using multiple tables/schemas on the same files (Adam Szita, reviewed by Oliver Draese, Peter Vary)",
  "b8f25ab7": "HIVE-23365: Put RS deduplication optimization under cost based decision (Stamatis Zampetakis, reviewed by Jesus Camacho Rodriguez)",
  "66642089": "HIVE-22437 : LLAP Metadata cache NPE on locking metadata. (Slim Bouguerra via Ashutosh Chauhan)",
  "f7e5de1e": "HIVE-23083 : Enable fast serialization in xprod edge (Rajesh Balamohan via Ashutosh Chauhan)",
  "5de00c78": "HIVE-22821: Add necessary endpoints for proactive cache eviction (Adam Szita, reviewed by Peter Vary, Slim Bouguerra)",
  "5dda1b1a": "HIVE-22948: QueryCache: Treat query cache locations as temporary storage (Gopal V, reviewed by Vineet Garg)",
  "7e39a2c1": "HIVE-22964: MM table split computation is very slow (Aditya Shah reviewed by Peter Vary)",
  "2033449a": "HIVE-22931: HoS dynamic partitioning fails with blobstore optimizations off (Adam Szita, reviewed by Marta Kuczora)",
  "bdd99f14": "HIVE-22583: LLAP cache always misses with non-vectorized serde readers such as OpenCSV (Adam Szita, reviewed by Slim Bougerra)",
  "ff9fa68e": "HIVE-22819: Refactor Hive::listFilesCreatedByQuery to make it faster for object stores (Marton Bod reviewed by Steve Loughran and Peter Vary)",
  "bc4cc9b4": "HIVE-22721: Add option for queries to only read from LLAP cache (Adam Szita, reviewed by Peter Vary)",
  "f826283d": "HIVE-22816 : QueryCache: Queries using views can have them cached after CTE expansion (Gopal V via Jesus Camacho Rodriguez)",
  "50129543": "HIVE-22896 : Increase fast hashtable size on detecting initial collision (Rajesh Balamohan via Ashutosh Chauhan)",
  "2a66c3f4": "HIVE-22777: Sorted dynamic partition optimization doesn't work if plan require implicit cast (Vineet Garg, reviewed by Prasanth Jayachandrana)",
  "1266f828": "HIVE-22705: LLAP cache is polluted by query-based compactor (Adam Szita, reviewed by Peter Vary, Laszlo Pinter)",
  "5c3a42e6": "HIVE-22122: TxnHandler.getValidWriteIdsForTable optimization for compacted tables (Denys Kuzmenko via Peter Vary)",
  "d13e00d0": "HIVE-22599: Query results cache: 733 permissions check is not necessary (Jason Dere, reviewed by gopalv)",
  "41b51fc4": "HIVE-22624: Fix results_cache_invalidation and results_cache_lifetime (Zoltan Haindrich reviewed by László Bodor)",
  "6360b9cd": "HIVE-22621: disable unstable results_cache_invalidation and results_cache_lifetime",
  "463dae9e": "HIVE-22391: NPE while checking Hive query results cache (Jason Dere, reviewed by gopalv)",
  "c6626edb": "HIVE-22298: Allow Llap IO cache for reading tables without delete delta (Peter Vary reviewed by Slim Bouguerra)",
  "c6875a37": "HIVE-22227: Tez bucket pruning produces wrong result with shared work optimization (Vineet Garg, reviewed by Jesus Camacho Rodriguez)",
  "75b0b0ea": "HIVE-22145: Avoid optimizations for analyze compute statistics (Vineet Garg, reviewed by Ashutosh Chauhan)",
  "5c7adaba": "HIVE-22059: hive-exec jar doesn't contain (fasterxml) jackson library (Zoltan Haindrich reviewed by Laszlo Bodor)",
  "1f10d587": "HIVE-22168: Remove very expensive logging from the llap cache hotpath (Slim B via Jesus Camacho Rodriguez)",
  "959ebeb6": "HIVE-21225: ACID: getAcidState() should cache a recursive dir listing locally (Vaibhav Gumashta reviewed by Vineet Garg)",
  "3223bda8": "HIVE-21949: Revert HIVE-21232 LLAP: Add a cache-miss friendly split affinity provider (Antal Sinkovits reviewed by Gopal V, Oliver Draese and Peter Vary)",
  "b36b89ce": "HIVE-21787: Metastore table cache LRU eviction (Sam An, reviewed by Daniel Dai)",
  "922b24e1": "HIVE-21145: Enable cbo to use runtime statistics during re-optimization (Zoltan Haindrich reviewed by Jesus Camacho Rodriguez)",
  "066a10b4": "HIVE-21805 : HiveServer2: Use the fast ShutdownHookManager APIs (Gopal V via Ashutosh Chauhan)",
  "734cc2c6": "HIVE-21760: Sharedwork optimization should be bypassed for SMB joins (Vineet Garg, reviewed by Jesus Camacho Rodriguez)",
  "a500116d": "HIVE-21509: LLAP may cache corrupted column vectors and return wrong query result (Adam Szita via Slim Bouguerra)",
  "e8ca5a27": "HIVE-21386: Extend the fetch task enhancement done in HIVE-21279 to make it work with query result cache (Vineet Garg, reviewed by Jason Dere)",
  "72d72d4d": "HIVE-21457: Perf optimizations in ORC split-generation (Prasanth Jayachandran reviewed by Gopal V)",
  "5708a0b7": "HIVE-21479: NPE during metastore cache update (Daniel Dai, reviewed by Zoltan Haindrich)",
  "12f83719": "HIVE-21478: Metastore cache update shall capture exception (Daniel Dai, reviewed by Zoltan Haindrich)",
  "6d742225": "HIVE-21305: LLAP: Option to skip cache for ETL queries (Prasanth Jayachandran reviewed by Gopal V)",
  "741630c1": "HIVE-21422: Add metrics to LRFU cache policy (Oliver Draese, reviewed by Gopal V)",
  "6a33d260": "HIVE-21382: Group by keys reduction optimization - keys are not reduced in query23 (Vineet Garg, reviewed by Jesus Camacho Rodriguez)",
  "fc3eefad": "HIVE-21312: FSStatsAggregator::connect is slow (Rajesh Balamohan, reviewed by Zoltan Haindrich)",
  "c45751fb": "HIVE-21232: LLAP: Add a cache-miss friendly split affinity provider (Gopal V, reviewed by Slim Bouguerra)",
  "8e3c5fcb": "HIVE-21206: Bootstrap replication is slow as it opens lot of metastore connections (Sankar Hariappan, reviewed by Mahesh Kumar Behera)",
  "0223cbf1": "HIVE-21063 : Support statistics in cachedStore for transactional table. (Mahesh Kumar Behera, reviewed by Sankar Hariappan, Daniel Dai)",
  "3f60b31e": "HIVE-21043: Enable move optimization for cloud replication with strict managed tables (Sankar Hariappan, reviewed by Mahesh Kumar Behera)",
  "ef7c3963": "HIVE-18661 : CachedStore: Use metastore notification log events to update cache. (Mahesh Kumar Behera, reviewed by Daniel Dai)",
  "4f3377c6": "HIVE-20440: Create better cache eviction policy for SmallTableCache (Antal Sinkovits reviewed by Sahil Takiar, Denys Kuzmenko and Peter Vary)",
  "9f2e8e61": "HIVE-20915: Make dynamic sort partition optimization available to HoS and MR (Yongzhi Chen, reviewed by Naveen Gangam)",
  "8fca02e5": "HIVE-20910 : Insert in bucketed table fails due to dynamic partition sort optimization (Vineet Garg via Ashutosh Chauhan)",
  "fc18e4a1": "HIVE-20804: Further improvements to group by optimization with constraints (Vineet Garg, reviewed by Jesus Camacho Rodriguez)",
  "670e49fd": "HIVE-20834: Hive QueryResultCache entries keeping reference to SemanticAnalyzer from cached query (Jason Dere, reviewed by GopalV)",
  "5eebbdf7": "HIVE-20703: Put dynamic sort partition optimization under cost based decision (Vineet Garg, reviewed by Prasanth Jayachandran, Sergey Shelukhin)",
  "d7be4b9f": "HIVE-17231: ColumnizedDeleteEventRegistry.DeleteReaderValue optimization (Eugene Koifman, reviewed by Gopal V)",
  "3c6a36b9": "HIVE-20719: SELECT statement fails after UPDATE with hive.optimize.sort.dynamic.partition optimization and vectorization on (Eugene Koifman, reviewed by Gopal V)",
  "61a027af": "HIVE-20623: Shared work: Extend sharing of map-join cache entries in LLAP (Jesus Camacho Rodriguez, reviewed by Gopal V)",
  "d9d431cf": "HIVE-20657 : pre-allocate LLAP cache at init time (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "c44853c9": "HIVE-20609 : Create SSD cache dir if it doesnt exist already (Miklos Gergely via Sergey Shelukhin)",
  "778c47cc": "HIVE-20552: Get Schema from LogicalPlan faster (Teddy Choi, reviewed by Jesus Camacho Rodriguez)",
  "34331f3c": "HIVE-17917: VectorizedOrcAcidRowBatchReader.computeOffsetAndBucket optimization (Saurabh Seth via Eugene Koifman)",
  "c44f2b53": "HIVE-20621: GetOperationStatus called in resultset.next causing incremental slowness (Prasanth Jayachandran reviewed by Gopal V)",
  "99b8c370": "HIVE-20515 : Empty query results when using results cache and query temp dir, results cache dir in different filesystems (Jason Dere via Thejas Nair)",
  "cf5486dd": "HIVE-20433 : Implicit String to Timestamp conversion is slow (Deepak Jaiswal, reviewed by Gopal Vijayaraghavan)",
  "3f3d9189": "HIVE-20279 : HiveContextAwareRecordReader slows down Druid Scan queries. (Nishant Bangarwa via Ashutosh Chauhan)",
  "8f5974a5": "HIVE-20281: SharedWorkOptimizer fails with 'operator cache contents and actual plan differ' (Jesus Camacho Rodriguez, reviewed by Ashutosh Chauhan)",
  "44f955ed": "HIVE-20247 : cleanup issues in LLAP IO after cache OOM (Sergey Shelukhin, reviewed by Prasanth Jayachandran) ADDENDUM",
  "40eb9a51": "HIVE-20247 : cleanup issues in LLAP IO after cache OOM (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "2d097dcb": "HIVE-20242: Query results cache: Improve ability of queries to use pending query results (Jason Dere, reviewed by GopalV)",
  "cce3a052": "HIVE-20127 : fix some issues with LLAP Parquet cache (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "1b5903b0": "HIVE-20006: Make materializations invalidation cache work with multiple active remote metastores (Jesus Camacho Rodriguez, reviewed by Ashutosh Chauhan)",
  "cac971b4": "HIVE-20069: Fix reoptimization in case of DPP and Semijoin optimization (Zoltan Haindrich reviewed by Ashutosh Chauhan, Zoltan Haindrich)",
  "733c4f31": "HIVE-19387: Truncate table for Acid tables conflicts with ResultSet cache (Eugene Koifman, reviewed by Jason Dere)",
  "cc8ac97b": "HIVE-19860 : HiveServer2 ObjectInspectorFactory memory leak with cachedUnionStructObjectInspector (Rajkumar Singh)",
  "80c3bb58": "HIVE-20028: Metastore client cache config is used incorrectly (Prasanth Jayachandran reviewed by Sergey Shelukhin)",
  "9cd3960d": "HIVE-19892: Disable query results cache for for HiveServer2 doAs=true (Jason Dere, reviewed by Sergey Shelukhin)",
  "bd21f890": "HIVE-19884 : Invalidation cache may throw NPE when there is no data in table used by materialized view (Jesus Camacho Rodriguez via Ashutosh Chauhan)",
  "5a9a328a": "HIVE-19912: Schema evolution checks prints a log line in INFO mode for each vectorized rowbatch, impacts performance (Nita Dembla reviewed by Prasanth Jayachandran)",
  "086700ef": "HIVE-19866 : improve LLAP cache purge (Sergey Shelukhin, reviewed by Gopal Vijayaraghavan)",
  "91cdd4f4": "HIVE-19334: Use actual file size rather than stats for fetch task optimization with external tables (Jason Dere, reviewed by GopalV)",
  "bf70bd27": "HIVE-19096: query result cache interferes with explain analyze (Jason Dere, reviewed by Zoltan Haindrich)",
  "4463c2bd": "HIVE-19432 : GetTablesOperation is too slow if the hive has too many databases and tables (Rajkumar Singh via Ashutosh Chauhan)",
  "5df1eb3f": "HIVE-18866 : Semijoin and analyze: Implement a Long -> Hash64 vector fast-path (Gopal Vijayaraghavan, Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "e030170b": "HIVE-19637: Add slow test report script to testutils (Prasanth Jayachandran reviewed by Jesus Camacho Rodriguez)",
  "6f9368b7": "HIVE-19510 : Add performance metrics in Ptest to find the total time spend in rsync (Vihang Karajgaonkar)",
  "1121ab46": "HIVE-19446: QueryCache: Transaction lists needed for pending cache entries (Jason Dere, reviewed by GopalV)",
  "0fd74db2": "HIVE-19310 : Metastore: MetaStoreDirectSql.ensureDbInit has some slow DN calls which might need to be run only in test env (Sergey Shelukhin, reviewed by Gopal Vijayaraghavan)",
  "c52e1955": "HIVE-19410 : don't create serde reader in LLAP if there's no cache (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "6dfa27c8": "HIVE-19362 : enable LLAP cache affinity by default (Sergey Shelukhin, reviewed by Gopal Vijayaraghavan)",
  "e89f98c4": "HIVE-19133 : HS2 WebUI phase-wise performance metrics not showing correctly (Bharathkrishna Guruvayoor Murali reviewed by Zoltan Haindrich, Vihang Karajgaonkar)",
  "34ced306": "HIVE-19247 : StatsOptimizer: Missing stats fast-path for Date (Gopal V via Ashutosh Chauhan)",
  "e9094483": "HIVE-19232: results_cache_invalidation2 is failing (Jason Dere, reviewed by Vineet Garg)",
  "d38b58d7": "HIVE-18743 : CREATE TABLE on S3 data can be extremely slow. DO_NOT_UPDATE_STATS workaround is buggy (Alexander Kolbasov, reviewed by Zoltan Haindrich via Vihang Karajgaonkar)",
  "4cfec3eb": "HIVE-19126: CachedStore: Use memory estimation to limit cache size during prewarm (Vaibhav Gumashta reviewed by Thejas Nair)",
  "28f7d19a": "HIVE-19154: Poll notification events to invalidate the results cache (Jason Dere, reviewed by GopalV)",
  "ad20ff4b": "HIVE-18609: Results cache invalidation based on ACID table updates (Jason Dere, reviewed by GopalV)",
  "f6dbcac3": "HIVE-19138: Results cache: allow queries waiting on pending cache entries to check cache again if pending query fails (Jason Dere, reviewed by Deepak Jaiswal)",
  "a2eb16d0": "HIVE-19033: Provide an option to purge LLAP IO cache (Prasanth Jayachandran reviewed by Sergey Shelukhin)",
  "e4fb7bf9": "HIVE-18909: Metrics for results cache (Jason Dere, reviewed by GopalV)",
  "733aecf2": "Revert 'HIVE-19033: Provide an option to purge LLAP IO cache (Prasanth Jayachandran reviewed by Sergey Shelukhin)'",
  "13f59a22": "HIVE-19033: Provide an option to purge LLAP IO cache (Prasanth Jayachandran reviewed by Sergey Shelukhin)",
  "245c39b4": "HIVE-18433: Upgrade version of com.fasterxml.jackson (Janaki Lahorani, reviewed by Aihua Xu)",
  "fc3dd4e5": "HIVE-18825: Define ValidTxnList before starting query optimization (Jesus Camacho Rodriguez, reviewed by Eugene Koifman)",
  "ba180623": "HIVE-18855 : Fix unit test TestMiniLlapLocalCliDriver.testCliDriver[results_cache_1] (Jason Dere via Sergey Shelukhin)",
  "26c0ab6a": "HIVE-18264: CachedStore: Store cached partitions/col stats within the table cache and make prewarm non-blocking (Vaibhav Gumashta reviewed by Daniel Dai, Alexander Kolbasov)",
  "50e0077a": "HIVE-18846: Query results cache: Allow queries to refer to the pending results of a query that has not finished yet (Jason Dere, reviewed by GopalV)",
  "165e35c0": "HIVE-18961: Error in results cache when query has identifiers with spaces (Jason Dere, reviewed by GopalV)",
  "4cb24ce8": "HIVE-18899: Separate FetchWork required for each query that uses the results cache (Jason Dere, reviewed by GopalV)",
  "31e36f01": "HIVE-17626: Query reoptimization using cached runtime statistics (Zoltan Haindrich reviewed by Ashutosh Chauhan)",
  "1837846d": "HIVE-17937 : llap_acid_fast test is flaky (Teddy Choi, reviewed by Sergey Shelukhin)",
  "0b03b819": "HIVE-18259: Automatic cleanup of invalidation cache for materialized views (Jesus Camacho Rodriguez, reviewed by Ashutosh Chauhan)",
  "5ddd5851": "HIVE-18665: LLAP: Ignore cache-affinity if the LLAP IO elevator is disabled (Gopal V, reviewed by Sergey Shelukhin)",
  "905d84e8": "HIVE-17848 : Bucket Map Join : Implement an efficient way to minimize loading hash table. Implemented LlapObjectSubCache which acts as a subcache within llap cache. (Deepak Jaiswal, reviewed by Jason Dere)",
  "e29aea6f": "HIVE-18269 : LLAP: Fast llap io with slow processing pipeline can lead to OOM (Sergey Shelukhin, reviewed by Jason Dere and Prasanth Jayachandran)",
  "148807a9": "HIVE-16970: General Improvements To org.apache.hadoop.hive.metastore.cache.CacheUtils (BELUGA BEHR, reviewed by Ashutosh Chauhan)",
  "856d88db": "HIVE-18263: Ptest execution are multiple times slower sometimes due to dying executor slaves (Adam Szita, reviewed by Barna Zsombor Klara)",
  "2a89e83c": "HIVE-17620: Use the default MR scratch directory (HDFS) in the only case when hive.blobstore.optimizations.enabled=true AND isFinalJob=true (Gergely Hajós reviewed by Rajesh Balamohan via Zoltan Haindrich)",
  "07fe7e21": "HIVE-18160: Jar localization during session initialization is slow (Prasanth Jayachandran reviewed by Sergey Shelukhin)",
  "c5c29860": "HIVE-18026: Hive webhcat principal configuration optimization (ZhangBing Lin via Rui)",
  "d8bc002a": "HIVE-18009: Multiple lateral view query is slow on hive on spark (Aihua Xu, reviewed by Yongzhi Chen & Xuefu Zhang)",
  "c2be4b71": "HIVE-18008 : Add optimization rule to remove gby from right side of left semi-join (Vineet Garg, reviewed by Ashutosh Chauhan)",
  "fde194e3": "Revert 'HIVE-18008 : Add optimization rule to remove gby from right side of left semi-join (Vineet Garg, reviewed by Ashutosh Chauhan)'",
  "ff3b327d": "HIVE-18008 : Add optimization rule to remove gby from right side of left semi-join (Vineet Garg, reviewed by Ashutosh Chauhan)",
  "df321c84": "HIVE-17918: NPE during semijoin reduction optimization when LLAP caching disabled (Jason Dere, reviewed by Sergey Shelukhin)",
  "2c871e4a": "HIVE-17139: Conditional expressions optimization: skip the expression evaluation if the condition is not satisfied for vectorization engine. (Jia Ke, reviewed by Ferdinand Xu)",
  "f6b4f9e8": "HIVE-17611: Add new LazyBinary SerDe for faster writes (Jason Dere, reviewed by Prasanth Jayachandran)",
  "50fb6f3c": "HIVE-15665 : LLAP: OrcFileMetadata objects in cache can impact heap usage (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "2b71ad30": "HIVE-16784: Missing lineage information when hive.blobstore.optimizations.enabled is true (Barna Zsombor Klara, reviewed by Peter Vary, Sahil Takiar)",
  "c9c71624": "HIVE-17220: Bloomfilter probing in semijoin reduction is thrashing L1 dcache (Prasanth Jayachandran reviewed by Gopal V)",
  "3c7fb2a9": "HIVE-17147: Vectorization: Add code for testing MapJoin operator in isolation and measuring its performance with JMH (Matt McCline via Prasanth Jayachandran)",
  "555f0011": "HIVE-17036: Lineage: Minor CPU/Mem optimization for lineage transform (Rajesh Balamohan, reviewed by Ashutosh Chauhan)",
  "91919d3f": "HIVE-16901: Distcp optimization - One distcp per ReplCopyTask (Sankar Hariappan, reviewed by Anishek Agarwal, Daniel Dai)",
  "fafa953f": "HIVE-16969: Improvement performance of MapOperator for Parquet (Colin Ma, reviewed by Ferdinand Xu)",
  "314fe44e": "HIVE-16912 Improve table validator's performance against Oracle (Naveen Gangam, reviewed by Aihua Xu)",
  "d85beaa9": "HIVE-16579: CachedStore: improvements to partition col stats caching and cache column stats for unpartitioned table (Daniel Dai, Thejas Nair, Vaibhav Gumashta reviewed by Daniel Dai, Thejas Nair)",
  "ed3c3edc": "HIVE-16698: HoS should avoid mapjoin optimization in case of union and using table stats (Chao Sun, reviewed by Xuefu Zhang)",
  "5d459665": "HIVE-16550: Semijoin Hints should be able to skip the optimization if needed (Deepak Jaiswal, reviewed by Jason Dere)",
  "fefeb2ac": "HIVE-16542 make merge that targets acid 2.0 table fail-fast (Eugene Koifman, reviewed by Wei Zheng)",
  "739c6ce5": "HIVE-16311: Improve the performance for FastHiveDecimalImpl.fastDivide (Colin Ma, reviewed by Xuefu Zhang)",
  "9d5d737d": "HIVE-16423: Add hint to enforce semi join optimization (Deepak Jaiswal, reviewed by Jason Dere)",
  "7d333879": "HIVE-16328: HoS: more aggressive mapjoin optimization when hive.spark.use.ts.stats.for.mapjoin is true (Chao Sun, reviewed by Xuefu Zhang)",
  "a398ce0d": "HIVE-16318 : LLAP cache: address some issues in 2.2/2.3 (Sergey Shelukhin, reviewed by Siddharth Seth and Prasanth Jayachandran)",
  "0a10f959": "HIVE-15829 : LLAP text cache: disable memory tracking on the writer (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "de0dfa00": "HIVE-16282: Semijoin: Disable slow-start for the bloom filter aggregate task (Deepak Jaiswal, reviewed by Jason Dere)",
  "0466fca7": "HIVE-16278 : LLAP: metadata cache may incorrectly decrease memory usage in mem manager (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "a086d6c7": "HIVE-16215 : counter recording for text cache may not fully work (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "e32f6622": "HIVE-16133 : Footer cache in Tez AM can take too much memory (Sergey Shelukhin, reviewed by Gunther Hagleitner and Siddharth Seth)",
  "0eea6871": "HIVE-16060: GenericUDTFJSONTuple's json cache could overgrow beyond its limit (Chao Sun, reviewed by Xuefu Zhang)",
  "e17a0409": "HIVE-15847 : In Progress update refreshes seem slow (Anishek Agarwal, via THejas Nair)",
  "091ac8e0": "HIVE-15891 : Detect query rewrite scenario for UPDATE/DELETE/MERGE and fail fast (Wei Zheng, reviewed by Eugene Koifman)",
  "8432dd8d": "HIVE-15901 : LLAP: incorrect usage of gap cache (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "95891261": "HIVE-15878 : LLAP text cache: bug in last merge (Sergey Shelukhin, reviewed by Gopal V)",
  "8f273cc5": "HIVE-15672 : LLAP text cache: improve first query perf II (Sergey Shelukhin, reviewed by Prasanth Jayachandran, Owen O'Malley)",
  "341225a7": "HIVE-13667: Improve performance for ServiceInstanceSet.getByHost (Rajesh Balamohan reviewed by Siddharth Seth, Prasanth Jayachandran)",
  "bb33ffac": "HIVE-15709: Vectorization: Fix performance issue with using LazyBinaryUtils.writeVInt and locking / thread local storage (Matt McCline, reviewed by Gopal Vijayaraghavan)",
  "79eb2243": "HIVE-15693: LLAP: cached threadpool in AMReporter creates too many threads leading to OOM (Rajesh Balamohan, reviewed by Siddharth Seth, Lefty Leverenz)",
  "881deac6": "HIVE-15664 : LLAP text cache: improve first query perf I (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "7c57c05c": "HIVE-15617: Improve the avg performance for Range based window (Aihua Xu, reviewed by Yongzhi Chen)",
  "d357f385": "HIVE-15147 : LLAP: use LLAP cache for non-columnar formats in a somewhat general way (Sergey Shelukhin, reviewed by Gopal V)",
  "a28b28f3": "HIVE-15520: Improve the sum performance for Range based window (Aihua Xu, reviewed by Yongzhi Chen)",
  "e4e3a07d": "HIVE-15129: LLAP : Enhance cache hits for stripe metadata across queries (Rajesh Balamohan reviewed by Sergey Shelukhin)",
  "ed8cc8aa": "HIVE-15123: LLAP UI: The UI should work even if the cache is disabled (Gopal V, reviewed by Siddharth Seth)",
  "dedfaf90": "HIVE-14977:Flaky test: fix order_null.q and union_fast_stats.q (Prasanth Jayachandran reviewed by Siddharth Seth)",
  "f562dfb5": "HIVE-14921: Move slow CliDriver tests to MiniLlap - part 2 (Prasanth Jayachandran reviewed by Siddharth Seth)",
  "1f258e96": "HIVE-14877: Move slow CliDriver tests to MiniLlap (Prasanth Jayachandran reviewed by Siddharth Seth)",
  "8e0b19b3": "HIVE-14892: Test that explicitly submit jobs via child process are slow (Prasanth Jayachandran reviewed by Siddharth Seth)",
  "05e25103": "HIVE-14767: Migrate slow MiniMr tests to faster options (Prasanth Jayachandran reviewed by Siddharth Seth)",
  "cd6c3cdf": "HIVE-14608 : LLAP: slow scheduling due to LlapTaskScheduler not removing nodes on kill (Sergey Shelukhin, reviewed by Gopal V)",
  "cb534ab0": "HIVE-14515: Schema evolution uses slow INSERT INTO .. VALUES (Matt McCline, reviewed by Prasanth Jayachandran)",
  "9a90c65d": "HIVE-14648: LLAP: Avoid private pages in the SSD cache (Gopal V, reviewed by Sergey Shelukhin)",
  "fb86e89a": "HIVE-14533: improve performance of enforceMaxLength in HiveCharWritable/HiveVarcharWritable (Thomas Friedrich reviewed by Prasanth Jayachandran)",
  "bfdc74ff": "HIVE-14504: tez_join_hash.q test is slow (Prasanth Jayachandran reviewed by Siddharth Seth)",
  "d97e4e2c": "HIVE-14433 : refactor LLAP plan cache avoidance and fix issue in merge processor (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "5d5aeb6c": "HIVE-14501: MiniTez test for union_type_chk.q is slow (Prasanth Jayachandran reviewed by Siddharth Seth)",
  "f008a38b": "HIVE-14408 : thread safety issue in fast hashtable (Sergey Shelukhin, reviewed by Gopal V)",
  "75e8be81": "HIVE-14377 : LLAP IO: issue with how estimate cache removes unneeded buffers (Sergey Shelukhin, reviewed by Prasanth J)",
  "12c8de04": "HIVE-14187: JDOPersistenceManager objects remain cached if MetaStoreClient#close is not called (Mohit Sabharwal, reviewed by Vaibhav Gumasha, via Sergio Pena)",
  "146a1528": "HIVE-13887 : LazySimpleSerDe should parse 'NULL' dates faster (Gopal V via Ashutosh Chauhan)",
  "5cf0c1cc": "HIVE-13901 : Hivemetastore add partitions can be slow depending on filesystems (Rajesh Balamohan via Sergey Shelukhin)",
  "4f3c27cc": "HIVE-14070: hive.tez.exec.print.summary=true returns wrong performance numbers on HS2 (Pengcheng Xiong, reviewed by Thejas M Nair, Sergey Shelukhin, Ashutosh Chauhan)",
  "4e3da98d": "HIVE-13841: Orc split generation returns different strategies with cache enabled vs disabled (Prasanth Jayachandran reviewed by Sergey Shelukhin)",
  "fedd6596": "HIVE-13789: Repeatedly checking configuration in TextRecordWriter/Reader hurts performance (Rui reviewed by Xuefu)",
  "f25b8652": "HIVE-13622 WriteSet tracking optimizations (Eugene Koifman, reviewed by Alan Gates)",
  "3f316cb5": "HIVE-13293: Cache RDD to improve parallel order by performance for HoS (Rui reviewed by Xuefu)",
  "e7389141": "Remove unintended import that caused build failure for JDK 8 in commit 4533d21b0be487e1f11fcc95578a2ba103e72a64 HIVE-13682: EOFException with fast hashtable (Matt McCline, reviewed by Sergey Shelukhin)",
  "4533d21b": "HIVE-13682: EOFException with fast hashtable (Matt McCline, reviewed by Sergey Shelukhin)",
  "db8a6db9": "HIVE-13542 : Missing stats for tables in TPCDS performance regression suite (Hari Subramaniyan via Ashutosh Chauhan)",
  "b870d526": "HIVE-13027: Configuration changes to improve logging performance (Prasanth Jayachandran reviewed by Sergey Shelukhin)",
  "f41d693b": "HIVE-13653 : improve config error messages for LLAP cache size/etc (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "58450d12": "HIVE-13346 : LLAP doesn't update metadata priority when reusing from cache; some tweaks in LRFU policy (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "09b00fc8": "revert HIVE-12531 : Implement fast-path for Year/Month UDFs for dates between 1999 and 2038 (Jason Dere via Sergey Shelukhin)",
  "e384b2b6": "HIVE-12531 : Implement fast-path for Year/Month UDFs for dates between 1999 and 2038 (Jason Dere via Sergey Shelukhin)",
  "4fabd038": "HIVE-13151 : Clean up UGI objects in FileSystem cache for transactions, ADDENDUM (Wei Zheng, reviewed by Eugene Koifman)",
  "f9d1b6ab": "HIVE-13151 : Clean up UGI objects in FileSystem cache for transactions (Wei Zheng, reviewed by Eugene Koifman)",
  "2bf0d92d": "HIVE-13126: Clean up MapJoinOperator properly to avoid object cache reuse with unintentional states (Wei Zheng via Vikram Dixit K)",
  "c659b202": "HIVE-13082: Enable constant propagation optimization in query with left semi join (Chaoyu Tang, reviewed by Aihua Xu and Gopal V)",
  "49d31f8c": "HIVE-12990 : LLAP: ORC cache NPE without FileID support (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "ca8662be": "HIVE-12809: Vectorization: fast-path for coalesce if input.noNulls = true (Gopal V, reviewed by Sergey Shelukhin)",
  "ceb57733": "HIVE-12220 : LLAP: Usability issues with hive.llap.io.cache.orc.size (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "a6debb95": "HIVE-12664 : Bug in reduce deduplication optimization causing ArrayOutOfBoundException (Johan Gustavsson via Ashutosh Chauhan)",
  "8069b59a": "HIVE-12597 : LLAP - allow using elevator without cache (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "b340ecb5": "HIVE-11927: Implement/Enable constant related optimization rules in Calcite: enable HiveReduceExpressionsRule to fold constants (Pengcheng Xiong, reviewed by Laljo John Pullokkaran)",
  "7df62023": "HIVE-12075 : add analyze command to explictly cache file metadata in HBase metastore (Sergey Shelukhin, reviewed by Alan Gates)",
  "df7f6fe4": "HIVE-12675 : PerfLogger should log performance metrics at debug level(Hari Subramaniyan, reviewed by Laljo John Pullokkaran)",
  "0f1c112f": "HIVE-12610: Hybrid Grace Hash Join should fail task faster if processing first batch fails, instead of continuing processing the rest (Wei Zheng via Vikram Dixit K)",
  "747384b1": "HIVE-12445 : Tracking of completed dags is a slow memory leak (Sergey Shelukhin, reviewed by Siddharth Seth)",
  "e7abf72c": "HIVE-11531: Add mysql-style LIMIT support to Hive, or improve ROW_NUMBER performance-wise (Hui Zheng, reviewed by Sergey Shelukhin, Jesus Camacho Rodriguez)",
  "560e4feb": "HIVE-12591 : LLAP cache counters displays -ve value for CacheCapacityUsed (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "22fc3979": "HIVE-12444 Global Limit optimization on ACID table without base directory may throw exception ADDENDUM (Wei Zheng via Eugene Koifman)",
  "bef879d0": "HIVE-12557 : NPE while removing entry in LRFU cache (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "1d02ab57": "HIVE-12532 : LLAP Cache: Uncompressed data cache has NPE (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "1c69604c": "HIVE-12444 - Global Limit optimization on ACID table without base directory may throw exception ADDENDUM (Wei Zheng via Eugene Koifman)",
  "0bab072d": "HIVE-12444 - Global Limit optimization on ACID table without base directory may throw exception (Wei Zheng via Eugene Koifman)",
  "249bcd80": "HIVE-12329 :Turn on limit pushdown optimization by default (Ashutosh Chauhan via Prasanth J)",
  "558b35cf": "HIVE-7575 GetTables thrift call is very slow (Navis via Aihua Xu, reviewed by Szehon Ho, Aihua Xu)",
  "526c507b": "HIVE-12354 : MapJoin with double keys is slow on MR (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "96cbc970": "HIVE-7723 : Explain plan for complex query with lots of partitions is slow due to in-efficient collection used to find a matching ReadEntity (Hari Subramaniyan, reviewed by Ashutosh Chauhan)",
  "1db4b60e": "HIVE-12062 : enable HBase metastore file metadata cache for tez tests (Sergey Shelukhin, reviewed by Alan Gates)",
  "cc63373c": "HIVE-12053 : Stats performance regression caused by HIVE-11786 (Chaoyu Tang, reviewed by Siddharth Seth)",
  "e044fb46": "HIVE-11533 : Loop optimization for SIMD in integer comparisons. (Teddy Choi, reviewed by ChengXiang Li)",
  "13dda360": "HIVE-12048 : metastore file metadata cache should not be used when deltas are present (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "25b15fdd": "HIVE-12027 : simplify file metadata cache ppd api (Sergey Shelukhin, reviewed by Alan Gates)",
  "bc1c434f": "HIVE-11553 : use basic file metadata cache in ETLSplitStrategy-related paths (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
  "e1ce9a23": "HIVE-11952 : disable q tests that are both slow and less relevant (Sergey Shelukhin, reviewed by Sergio Peña)",
  "ba21806b": "HIVE-11940: 'INSERT OVERWRITE' query is very slow because it creates one 'distcp' per file to copy data from staging directory to target directory (Sergio Pena, reviewd by Ferdinand Xu)",
  "b98a60df": "HIVE-10328 : Loop optimization for SIMD in IfExprColumnColumn.txt (Teddy Choi via Ashutosh Chauhan)",
  "91c46a44": "HIVE-9898: LLAP: Sort out issues with UGI and cached FileSystems (Prasanth Jayachandran)",
  "21861592": "HIVE-11891 - Add basic performance logging to metastore calls (Brock via Szehon)",
  "f08a0330": "HIVE-11860: StatsNoJobTask fails to collect fast stats when table have subdirectories (Prasanth Jayachandran reviewed by Sergey Shelukhin)",
  "61ca07d5": "HIVE-11803: LLAP: MiniLlapCluster tests are slow",
  "7281a460": "HIVE-11617: Explain plan for multiple lateral views is very slow (Aihua Xu, reviewed by Jesus Camacho Rodriguez)",
  "2ef40ca6": "Revert 'HIVE-10175: DynamicPartitionPruning lacks a fast-path exit for large IN() queries (Gopal V, reviewed by Jesus Camacho Rodriguez)'",
  "ce258168": "HIVE-11659: Make Vectorization use the fast StringExpr (Gopal V, reviewed by Matt McCline)",
  "b6d1143a": "HIVE-10175: DynamicPartitionPruning lacks a fast-path exit for large IN() queries (Gopal V, reviewed by Jesus Camacho Rodriguez)",
  "7796dd67": "HIVE-11521 : Loop optimization for SIMD in logical operators (Teddy Choi via Ashutosh Chauhan)",
  "ab03dc97": "HIVE-11502: Map side aggregation is extremely slow (Yongzhi Chen, reviewed by Chao Sun)",
  "538ae703": "HIVE-11387: CBO: Calcite Operator To Hive Operator (Calcite Return Path) : fix reduce_deduplicate optimization (Pengcheng Xiong, reviewed by Jesus Camacho Rodriguez, Hari Subramaniyan)",
  "b6f1dfac": "HIVE-11428: Adding missing files for Performance: Struct IN() clauses are extremely slow (Hari Sankar Sivarama Subramaniyan, reviewed by Gopal V)",
  "af8dbecb": "HIVE-11428: Performance: Struct IN() clauses are extremely slow (Hari Sankar Sivarama Subramaniyan, reviewed by Gopal V)",
  "c7e1d34b": "HIVE-11406: Vectorization: StringExpr::compare() == 0 is bad for performance (Matt McCline, reviewed by Gopal V)",
  "311f6e74": "HIVE-11305 : LLAP: Hybrid Map-join cache returns invalid data (Sergey Shelukhin, reviewed by Gopal V)",
  "c53c6f45": "HIVE-11294 Use HBase to cache aggregated stats (gates)",
  "aef30cae": "HIVE-10535 : LLAP: Cleanup map join cache when a query completes (Sergey Shelukhin, reviewed by Siddharth Seth)",
  "82074894": "HIVE-11131: Get row information on DataWritableWriter once for better writing performance (Sergio Pena, reviewed by Ferdinand Xu, Dong Chen & Ryan Blue)",
  "210b5bcb": "HIVE-11053 add more qtest for Dynamic RDD caching optimization. gaolun via chengxiang",
  "dbd89ac4": "HIVE-10736: HiveServer2 shutdown of cached tez app-masters is not clean (Vikram Dixit K, reviewed by Gunther Hagleitner)",
  "5c602159": "HIVE-10946 : LLAP: recent optimization introduced wrong assert to elevator causing test to faill (Sergey Shelukhin)",
  "88c8506b": "HIVE-10913 : LLAP: cache QF counters have a wrong value for consumer time (Sergey Shelukhin) ADDENDUM",
  "40e9bd3c": "HIVE-10913 : LLAP: cache QF counters have a wrong value for consumer time (Sergey Shelukhin)",
  "441d4c08": "HIVE-10550: Dynamic RDD caching optimization for HoS [Spark Branch] (Chengxiang reviewed by Xuefu)",
  "3f27c6ed": "HIVE-10671: yarn-cluster mode offers a degraded performance from yarn-client [Spark Branch] (Rui via Xuefu, reviewed by Chengxiang)",
  "7a4eca49": "HIVE-10678 : update sql standard authorization configuration whitelist - more optimization flags (Thejas Nair reviewed by Gunther Hagleitner)",
  "46100846": "HIVE-10550: Dynamic RDD caching optimization for HoS [Spark Branch] (Chengxiang reviewed by Xuefu)",
  "93c552e8": "HIVE-10777 : LLAP: add pre-fragment and per-table cache details (Sergey Shelukhin)",
  "889c41f1": "HIVE-10671: yarn-cluster mode offers a degraded performance from yarn-client [Spark Branch] (Rui via Xuefu, reviewed by Chengxiang)",
  "05a3d2ab": "HIVE-10636 : CASE comparison operator rotation optimization (Ashutosh Chauhan via Gopal V)",
  "9e4803cd": "HIVE-10651: ORC file footer cache should be bounded (Prasanth Jayachandran reviewed by Sergey Shelukhin)",
  "4a0ccd11": "HIVE-10530: Aggregate stats cache: bug fixes for RDBMS path (Vaibhav Gumashta reviewed by Mostafa Mokhtar, Thejas Nair)",
  "48a243ef": "HIVE-9644 : CASE comparison operator rotation optimization (Ashutosh Chauhan via Gopal V)",
  "c0116739": "HIVE-10607 : Combination of ReducesinkDedup + TopN optimization yields incorrect result if there are multiple GBY in reducer (Ashutosh Chauhan via Sergey Shelukhin)",
  "4aff07e3": "HIVE-10529: Remove references to tez task context before storing operator plan in object cache (Rajesh Balamohan reviewed by Gunther Hagleitner)",
  "9c184928": "HIVE-10529: Remove references to tez task context before storing operator plan in object cache (Rajesh Balamohan via Gunther Hagleitner)",
  "3f5659f0": "HIVE-10235 Loop optimization for SIMD in ColumnDivideColumn.txt (chengxiang, reviewed by Gopal V)",
  "c90cb3ad": "HIVE-10382 : Aggregate stats cache for RDBMS based metastore codepath (Vaibhav Gumashta via Thejas Nair)",
  "3562c52f": "HIVE-10023 : Fix more cache related concurrency issue [Spark Branch] (Jimmy Xiang via Szehon)",
  "198bb4b2": "HIVE-9993 : Retrying task could use cached bad operators [Spark Branch] (Jimmy Xiang via Szehon)",
  "d533b393": "HIVE-10334 : LLAP: Self-joins with the cache enabled (Sergey Shelukhin)",
  "9353c3b8": "HIVE-10336 : LLAP: small improvement to unlocking cache data (Sergey Shelukhin)",
  "b30dd3b1": "HIVE-10189: Create a micro benchmark tool for vectorization to evaluate the performance gain after SIMD optimization.(Ferdinard Xu via Chengxiang)",
  "dfd5a657": "HIVE-10180: Loop optimization for SIMD in ColumnArithmeticColumn.txt(Chengxiang, reviewed by Gopal V)",
  "1d4261b1": "HIVE-10172: Fix performance regression caused by HIVE-8122 for ORC (Prasanth Jayachandran reviewed by Gopal V)",
  "913dba22": "HIVE-9693: Introduce a stats cache for aggregate stats in HBase metastore (Vaibhav Gumashta reviewed by Alan Gates)",
  "154283a5": "HIVE-10103 : LLAP: Cancelling tasks fails to stop cache filling threads (Sergey Shelukhin)",
  "aacca40d": "HIVE-10063 : LLAP: LowLevelCacheImpl does not match cached ranges properly (Sergey Shelukhin)",
  "9b512122": "HIVE-10043: LLAP: cache counters are incorrect (Prasanth Jayachandran)",
  "827fab20": "HIVE-10023 : Fix more cache related concurrency issue [Spark Branch] (Jimmy Xiang via Szehon)",
  "b89a3eea": "HIVE-9993 : Retrying task could use cached bad operators [Spark Branch] (Jimmy Xiang via Szehon)",
  "a8d828fd": "HIVE-9729p4 : LLAP: design and implement proper metadata cache (Sergey Shelukhin)",
  "e9c582a9": "HIVE-9729p4 : LLAP: design and implement proper metadata cache (tests part 1)",
  "4403c0ee": "HIVE-9729p3 : LLAP: design and implement proper metadata cache",
  "2f676d0f": "HIVE-9729p2 : LLAP: design and implement proper metadata cache (most of the implementation)",
  "46f107a0": "HIVE-9844 : LLAP: change caches to use unique file ID, not name",
  "af4ab987": "HIVE-9729p1 : LLAP: design and implement proper metadata cache - make sure java metadata objects are not accessed via cache from decode side (so they could be evicted); also clean up some interfaces",
  "3dc2dd9c": "Fix an issue with cache collisions",
  "28986369": "Remove FS cache, fix potential read issue",
  "7ebf999e": "Change the way DiskRange-s are managed, and fix decref for cache, some more bugfixes",
  "39fd3888": "HIVE-9665: Parallel move task optimization causes race condition (Gunther Hagleitner, reviewed by Thejas M Nair)",
  "4104b2c3": "Yet more fixes; right now buffers are permanently locked in cache after reading, which I will fix shortly (better than assert)",
  "7d0173b0": "HIVE-9574: Lazy computing in HiveBaseFunctionResultList may hurt performance [Spark Branch] (Jimmy via Xuefu)",
  "b7143f22": "HIVE-9586: Too verbose log can hurt performance, we should always check log l first (Rui via Xuefu) merged from trunk, r1657742",
  "58f3c068": "HIVE-9586: Too verbose log can hurt performance, we should always check log level first (Rui via Xuefu)",
  "1a272eb0": "HIVE-9525 : Enable constant propagation optimization in few existing tests where it was disabled. (Ashutosh Chauhan via Prasanth J)",
  "a228a807": "HIVE-9477: No error thrown when global limit optimization failed to find enough number of rows [Spark Branch] (Rui via Xuefu)",
  "be2cb4e1": "HIVE-9418p1 : ORC using low-level cache",
  "39c82b01": "HIVE-9382: Fix Global Limit optimization when Fetch optimizations are off (Wei Zheng, reviewed by Gopal V)",
  "a8dfec5d": "HIVE-8121 - Create micro-benchmarks for ParquetSerde and evaluate performance (Sergio via Brock)",
  "7775f7cb": "Add tests for cache, clean up allocator debug logging left over",
  "541fcbe7": "Separated allocator and cache; unit tests for allocator, fixed a bunch of bugs",
  "c8ba0f96": "HIVE-9331 : get rid of pre-optimized-hashtable memory optimizations (Sergey Shelukhin, reviewed by Ashutosh Chauhan)",
  "53094ba7": "Finish reworking LRFU policy for low-level cache (not clear if it's a good pick due to concurrency); tests; some pipeline adjustments",
  "f3a51a70": "HIVE-7550 : Extend cached evaluation to multiple expressions (Navis via Ashutosh Chauhan)",
  "0f556fe3": "Preliminary patch for low-level cache, needs few more touches and LRFU policy would not be thread-safe",
  "7d1ea695": "experimental version of orc metadata cache",
  "2dfd8457": "Refactor prototype with regard to updated design, remove chunk format (currently discarded). Builds, but doesn't work in any form; cache is a no-op too (layering for cache will be different)",
  "cc067076": "HIVE-9106 : improve the performance of null scan optimizer when several table scans share a physical path (Pengcheng Xiong via Ashutosh Chauhan)",
  "55ae5080": "HIVE-9127: Improve CombineHiveInputFormat.getSplit performance (Brock via Xuefu)",
  "c73c3328": "HIVE-9127: Improve CombineHiveInputFormat.getSplit performance (Brock via Xuefu)",
  "9cdf4f96": "HIVE-8843: Release RDD cache when Hive query is done [Spark Branch] (Jimmy via Xuefu)",
  "c9c2656a": "HIVE-8638: Implement bucket map join optimization [Spark Branch] (Jimmy via Xuefu)",
  "6128739a": "HIVE-8975 : Possible performance regression on bucket_map_join_tez2.q (Prasanth J via Ashutosh Chauhan)",
  "f61c1977": "HIVE-8774 Fix groupBy index optimization (Pengcheng Xiong via Laljo John Pullokkaran)",
  "3834edfb": "HIVE-8774 Fix groupBy index optimization (Pengcheng Xiong via Laljo John Pullokkaran)",
  "8e6a483c": "HIVE-8970: Enable map join optimization only when hive.auto.convert.join is true [Spark Branch] (Chao via Xuefu)",
  "8b69d1ca": "HIVE-8435 : Add identity project remover optimization (Jesús Camacho Rodríguez via Ashutosh Chauhan)",
  "5d2b0047": "HIVE-8610: Compile time skew join optimization doesn't work with auto map join (Rui via Xuefu)",
  "e63b9f2c": "HIVE-8535: Enable compile time skew join optimization for spark [Spark Branch] (Rui via Xuefu)",
  "4c2d7716": "HIVE-8518: Compile time skew join optimization returns duplicated results (Rui via Xuefu) merged from trunk r1633422",
  "794518f5": "HIVE-8518: Compile time skew join optimization returns duplicated results (Rui via Xuefu)",
  "be4fa196": "HIVE-7951 : InputFormats implementing (Job)Configurable should not be cached (Navis reviewed by Ashutosh Chauhan)",
  "e4cf0bd3": "HIVE-7623 : hive partition rename fails if filesystem cache is disabled (Navis reviewed by Thejas M Nair)",
  "d4fce290": "HIVE-8328: Mapjoins in reducer vertices should reuse cached hashtables (Gopal V, reviewed by Vikram Dixit)",
  "751a427d": "HIVE-8350 : Constant folding should happen before group-by optimization (Ashutosh Chauhan via Gunther Hagleitner)",
  "3a46e15f": "HIVE-8151: Dynamic partition sort optimization inserts record wrongly to partition when used with GroupBy (Prasanth J reviewed by Gunther Hagleitner)",
  "0a17518f": "HIVE-8196: Joining on partition columns with fetch column stats enabled results it very small CE which negatively affects query performance (Prasanth J reviewed by Gunther Hagleitner)",
  "de130225": "HIVE-8162: Dynamic sort optimization propagates additional columns even in the absence of order by (Prasanth J reviewed by Vikram Dixit)",
  "458424f7": "HIVE-8124: Move local_mapred_error_cache.q to minimr (Gunther Hagleitner)",
  "70e17913": "HIVE-7704: Create tez task for fast file merging (Prasanth J, reviewed by Gunther Hagleitner, Vikram Dixit)",
  "e1f5cf13": "HIVE-7975 - HS2 memory optimization: Internalizing instance fields of Thrift-generated metastore API classes (Wilbur Yang via Brock)",
  "fa14b53a": "HIVE-7655: Reading of partitioned table stats slows down explain (Harish Butani via Gunther Hagleitner)",
  "8d657c75": "HIVE-7524 : Enable auto conversion of SMBjoin in presence of constant propagate optimization (Ashutosh Chauhan via Vikram Dixit)",
  "906314ea": "HIVE-7299: Enable metadata only optimization on Tez (Gunther Hagleitner, reviewed by Vikram Dixit K)",
  "07440352": "HIVE-7314 : Wrong results of UDF when hive.cache.expr.evaluation is set (Navis reviewed by Ashutosh Chauhan)",
  "58df64d9": "HIVE:7219 - Improve performance of serialization utils in ORC (Prasanth J reviewed by Gunther Hagleitner, Gopal V)",
  "138c0cce": "HIVE-7116 : HDFS FileSystem object cache causes permission issues in creating tmp directories (Vikram Dixit K via Thejas Nair)",
  "3e0fb8ec": "HIVE-6956 : Duplicate partitioning column for union when dynamic partition sort optimization is enabled (Prasanth J via Ashutosh Chauhan)",
  "f1e332cc": "HIVE-5336 : HCatSchema.remove(HCatFieldSchema hcatFieldSchema) should renumber the fieldPositionMap and the fieldPositionMap should not be cached by the end user (Hari Sankar Sivarama via Sushanth Sowmyan)",
  "324929b6": "HIVE-6883 : Dynamic partitioning optimization does not honor sort order or order by (Prasanth J, reviewed by Vikram Dixit K)",
  "7ea02c64": "HIVE-6834 Dynamic partition optimization bails out after removing file sink operator (Prasanth J via Harish Butani)",
  "62905f0f": "HIVE-6703 Tez should store SHA of the jar when uploading to cache (Sergey Shelukhin, reviewed by Gunther Hagleitner)",
  "a39be725": "HIVE-6455 : Scalable dynamic partitioning and bucketing optimization (Prasanth J via Vikram Dixit)",
  "77d6b423": "HIVE-6551 : group by after join with skew join optimization references invalid task sometimes (Navis via Ashutosh Chauhan)",
  "339da1cd": "HIVE-6288 : MSCK can be slow when adding partitions (Sergey Shelukhin via Ashutosh Chauhan)",
  "347d6d4e": "HIVE-6157: Fetching column stats slower than the 101 during rush hour (Sergey Shelukhin via Gunther Hagleitner)",
  "cbae3082": "HIVE-5951 : improve performance of adding partitions from client (Sergey Shelukhin via Ashutosh Chauhan)",
  "98893823": "HIVE-6017: Contribute Decimal128 high-performance decimal(p, s) package from Microsoft to Hive (Hideaki Kumura via Eric Hanson)",
  "293699a7": "HIVE-6041 : Incorrect task dependency graph for skewed join optimization (Navis via Ashutosh Chauhan)",
  "2fd5b4ba": "HIVE-3815 : hive table rename fails if filesystem cache is disabled (Thejas Nair reviewed by Navis)",
  "dd4e94a1": "HIVE-5503 : TopN optimization in VectorReduceSink (Sergey Shelukhin via Ashutosh Chauhan)",
  "fdb4ec82": "HIVE-5415 : Remove System.err.println from vectorization optimization (Gunther Hagleitner via Ashutosh Chauhan)",
  "5d3cd9e5": "HIVE-4959 : Vectorized plan generation should be added as an optimization transform. (Jitendra Nath Pandey via Ashutosh Chauhan)",
  "f9fc6584": "HIVE-5029 : direct SQL perf optimization cannot be tested well (Sergey Shelukhin via Ashutosh Chauhan)",
  "0204cc4e": "HIVE-5095: Hive needs new operator walker for parallelization/optimization for tez (Gunther Hagleitner)",
  "aba95a1b": "HIVE-5080: Add hook to do additional optimization on the operator plan in tez (Gunther Hagleitner)",
  "d61571c0": "HIVE-4051 : Hive's metastore suffers from 1+N queries when querying partitions & is slow (Sergey Shelukhin via Ashutosh Chauhan)",
  "b3c86fdd": "HIVE-2206 [jira] add a new optimizer for query correlation discovery and optimization (Yin Huai via Ashutosh Chauhan)",
  "ad46cdaf": "HIVE-4486 FetchOperator slows down SMB map joins by 50% when there are many partitions (Gopal V via omalley)",
  "2c87e89b": "HIVE-4550 local_mapred_error_cache fails on some hadoop versions (Gunther Hagleitner via omalley)",
  "53831432": "HIVE-4439 : Remove unused join configuration parameter: hive.mapjoin.cache.numrows (Gunther Hagleitner via Ashutosh Chauhan)",
  "fd1a4f6f": "HIVE-4318 : OperatorHooks hit performance even when not used (Gunther Hagleitner via Ashutosh Chauhan)",
  "21e78a28": "HIVE-4378 : Counters hit performance even when not used (Gunther Hagleitner via Ashutosh Chauhan)",
  "73f40a49": "HIVE-948: more query plan optimization rules (Navis via Ashutosh Chauhan)",
  "e5ff0ac2": "HIVE-3852 Multi-groupby optimization fails when same distinct column is used twice or more (Navis via namit)",
  "37e871e4": "HIVE-3696 Revert HIVE-3483 which causes performance regression (Gang Tim Liu via namit)",
  "f056af65": "HIVE-2206:add a new optimizer for query correlation discovery and optimization (Yin Huai via He Yongqiang)",
  "3d4bdc42": "HIVE-3092 Hive tests should load Hive classes from build directory, not Ivy cache (Kevin Wilfong via namit)",
  "22090675": "HIVE-2559 : Add target to install Hive JARs/POMs in the local Maven cache (Alan Gates via Ashutosh Chauhan)",
  "c16db214": "HIVE-2700: Add 'ivy-clean-cache' and 'very-clean' Ant targets (Carl Steinbach via Ashutosh Chauhan)",
  "81f85b99": "HIVE-2750 Hive multi group by single reducer optimization causes invalid column reference error (Kevin Wilfong via namit)",
  "f8476afc": "HIVE-2642 fix Hive-2566 and make union optimization more aggressive (Yongqiang He via namit)",
  "ac4749ef": "HIVE-2458. Group-by query optimization Followup: add flag in conf/hive-default.xml (Prajakta Kalmegh via jvs)",
  "1b346391": "HIVE-2440. make hive mapper initialize faster when having tons of input files (Yongqiang He via Ning Zhang)",
  "2d232455": "HIVE-2385. Local Mode can be more aggressive if LIMIT optimization is on (Siying Dong via cws)",
  "ace83a5c": "HIVE-2364. Make performance logging configurable. (Kevin Wilfong via Ning Zhang)",
  "5dba4e88": "HIVE-2370. Improve RCFileCat performance significantly (Tim Armstrong via Ning Zhang)",
  "8c36aa4b": "HIVE-2052 - PostHook and PreHook API to add flag to indicate it is pre or post hook plus cache for content summary (Siying Dong via jssarma)",
  "a36e10b6": "HIVE-2030 isEmptyPath() to use ContentSummary cache (Siying via He Yongqiang)",
  "c602be6c": "HIVE-1910 Provide config parameters to control cache object pinning (Mac Yang via namit)",
  "21f1a88d": "HIVE-1797 Compressed the hashtable dump file before put into distributed cache (Liyin Tang via He Yongqiang)",
  "34ceed64": "HIVE-1641. add map joined table to distributed cache. (Liyin Tang via He Yongqiang)",
  "b5c7488b": "HIVE-1464 improve test query performance (Joydeep Sen Sarma via Ning Zhang)",
  "ffce1b93": "HIVE-1357. optimize CombineHiveInputFormat to cache inputFormat (Ning Zhang via namit)",
  "d85fb2a1": "HIVE-968. remove mapjoin files and use a MRU cache to optimize lookups (Ning Zhang via namit)",
  "566abb4c": "bug in mapjoin when rows are getting aged out from cache.",
  "e605e0a4": "HIVE-827. Increase hive.mapjoin.cache.numrows default value. (Namit Jain via zshao)",
  "d4b42d94": "HIVE-502. Optimize RCFile's performance by removeing all synchronized modifiers. (Yongqiang He via zshao)"
}, "HMCL": {
  "32fad77": "Optimize logging performance",
  "c32a14a": "chore(multiplayer): test NAT by fast method.",
  "7da9d0f": "feat: cache detected game version",
  "dc31674": "fix: Do not throw exception when path to cached jvm installations does not exist.",
  "7ece35e": "fix: move .hmcl directory to $HOME/.cache/hmcl to fulfill XDG standard. Closes #849.",
  "c3f19d2": "perf: cache Java version from executable.",
  "6ad5ba3": "alt: change UI of game installation wizard. Also UI performance improved.",
  "bc4b41e": "add: clear button for cache directory",
  "829d92c": "Exclude logs and CustomSkinLoader cache",
  "91bd67d": "Restore default cache directory if needed. Closes #489",
  "16ea88a": "Fixed failing to download file when cached entry was removed by user",
  "07a701e": "Cache asset indexes by ETag cache",
  "84c18c8": "Move cache repository to HMCLCore",
  "1392ad4": "Only cache verified files and copy cached files to current directory",
  "1404a08": "library download optimization",
  "e5ccc40": "clear cached skin records when refrshing account state",
  "eeccdbc": "proxy settings ui optimization",
  "7fe3e28": "Add default log4j config file for better performance",
  "b415a2c": "Switching tabs animation optimization",
  "52f7610": "Fixed button animation & performance problem",
  "151b865": "fix performance problem about downloading file."
}, "hmily": {
  "7224505": "add hmily lock cache manager & init lock hmily repository (#264)"
}, "HomeMirror": {
  "": ""
}, "hope-boot": {
  "0faa423": ":art: delete cached"
}, "hsweb-framework": {
  "b3ba029": "优化cache",
  "ebe5a2e": "fastjson 1.2.83",
  "dd92471": "使用share代替cache",
  "c671639": "Merge pull request #179 from hs-web/dependabot/maven/hsweb-concurrent/hsweb-concurrent-cache/com.google.guava-guava-29.0-jre",
  "5a7d5e8": "Bump guava in /hsweb-concurrent/hsweb-concurrent-cache",
  "26d5256": "fastjson 1.2.74",
  "5262ed6": "增加cache支持",
  "d9f5396": "add cache config",
  "4987893": "增加fastdfs支持",
  "1cc7c95": "升级fastjson",
  "e7b990e": "优化cache",
  "b668319": "升级fastjson",
  "54638b4": "升级fastjson",
  "27383bb": "完善注释，升级fastjson版本",
  "c3ac262": "优化cache创建逻辑"
}, "HTextView": {
  "": ""
}, "http-request": {
  "ad99090": "make CI build faster"
}, "hudi": {
  "f04f959": "[MINOR] Avoid synchronized block in HoodieLockMetrics if key is present in cache (#8778)",
  "ab86512": "[HUDI-6084] Added FailOnFirstErrorWriteStatus for MDT to ensure that write operations fail fast on any error (#8467)",
  "8afe549": "[HUDI-6099] Improved the performance of checking for valid commits when tagging record location (#8494)",
  "144512a": "[MINOR] Avoid synchronized block if key is present in cache (#8433)",
  "628dc8c": "[HUDI-5633] Fixing performance regression in `HoodieSparkRecord` (#7769)",
  "45da30d": "[HUDI-5485] Add File System View API for batch listing and improve savepoint performance with metadata table (#7690)",
  "b1552ef": "[HUDI-5384] Adding optimization rule to appropriately push down filters into the `HoodieFileIndex` (#7423)",
  "f8028a4": "[HUDI-4911][HUDI-3301] Fixing `HoodieMetadataLogRecordReader` to avoid flushing cache for every lookup (#6782)",
  "2567ada": "Revert '[HUDI-5409] Avoid file index and use fs view cache in COW input format (#7493)' (#7526)",
  "cc1c1e7": "[HUDI-5409] Avoid file index and use fs view cache in COW input format (#7493)",
  "8de5357": "[HUDI-5346][HUDI-5320] Fixing Create Table as Select (CTAS) performance gaps (#7370)",
  "6f4edb0": "[HUDI-5347] FIxing performance traps in Spark SQL `MERGE INTO` implementation (#7395)",
  "df7b767": "[HUDI-5066] Support flink hoodie source metaclient cache (#7017)",
  "a922a5b": "add test for 2 different recursion depths, fix schema cache key",
  "5e62469": "[HUDI-4363] Support Clustering row writer to improve performance (#6046)",
  "c50b634": "[HUDI-4482] remove guava and use caffeine instead for cache (#6240)",
  "cfd0c1e": "[HUDI-4081][HUDI-4472] Addressing Spark SQL vs Spark DS performance gap (#6213)",
  "e7c8df7": "[HUDI-4250][HUDI-4202] Optimize performance of Column Stats Index reading in Data Skipping (#5746)",
  "b513232": "[HUDI-4458] Add a converter cache for flink ColumnStatsIndices (#6205)",
  "a5348cc": "[HUDI-4436] Invalidate cached table in Spark after write (#6159)",
  "340c3db": "[HUDI-4437] Fix test conflicts by clearing file system cache (#6123)",
  "de37774": "[HUDI-3896] Porting Nested Schema Pruning optimization for Hudi's custom Relations (#5428)",
  "35afdb4": "[HUDI-4178] Addressing performance regressions in Spark DataSourceV2 Integration (#5737)",
  "6285a23": "[HUDI-3995] Making perf optimizations for bulk insert row writer path (#5462)",
  "7a9d48d": "[HUDI-3834] Fixing performance hits in reading Column Stats Index (#5266)",
  "1da196c": "[HUDI-2777] Improve HoodieSparkSqlWriter write performance (#5187)",
  "2e2d08c": "[HUDI-3539] Flink bucket index bucketID bootstrap optimization. (#5093)",
  "9da2dd4": "[HUDI-3719] High performance costs of AvroSerizlizer in DataSource wr… (#5137)",
  "b147065": "[HUDI-3689] Remove Azure CI cache (#5121)",
  "51ee500": "[HUDI-2973] RFC-27: Data skipping index to improve query performance (#4728)",
  "bc7882c": "[HUDI-2872][HUDI-2646] Refactoring layout optimization (clustering) flow to support linear ordering (#4606)",
  "8547f11": "[HUDI-3271] Code optimization and clean up unused code in HoodieSparkSqlWriter (#4631)",
  "79bf6ab": "[HUDI-3281][Performance]Tuning performance of getAllPartitionPaths API in FileSystemBackedTableMetadata (#4643)",
  "f1e3762": "[HUDI-2950] Addressing performance traps in Bulk Insert/Layout Optimization (#4234)",
  "772f5ca": "Fixed partitions produced by layout optimization in case order-by key is composed of a single column (#4183)",
  "e41f13f": "[MINOR] Put Azure cache tasks first (#3118)",
  "6763b45": "[HUDI-2030] Add metadata cache to WriteProfile to reduce IO (#3090)",
  "cb642ce": "[HUDI-1999] Refresh the base file view cache for WriteProfile (#3067)",
  "5b3608f": "[HUDI-1778] Add setter to CompactionPlanEvent and CompactionCommitEvent to have better SE/DE performance for Flink (#2789)",
  "d035fcb": "[HUDI-1767] Add setter to HoodieKey and HoodieRecordLocation to have better SE/DE performance for Flink (#2779)",
  "d429169": "[HUDI-1688]hudi write should uncache rdd， when the write operation is finnished (#2673)",
  "3b36cb8": "[HUDI-1552] Improve performance of key lookups from base file in Metadata Table. (#2494)",
  "2d2d5c8": "[HUDI-1555] Remove isEmpty to improve clustering execution performance (#2502)",
  "8b5d6f9": "[HUDI-1437] support more accurate spark JobGroup for better performance tracking (#2322)",
  "e79fbc0": "[HUDI-1054] Several performance fixes during finalizing writes (#1768)",
  "6318e94": "[HUDI-1016] Code optimization in MergeOnReadRollbackActionExecutor(#1718)",
  "8c7cef3": "[HUDI - 738] Add validation to DeltaStreamer to fail fast when filterDupes is enabled on UPSERT mode. (#1505)",
  "83c8ad5": "[HUDI-625] Fixing performance issues around DiskBasedMap & kryo (#1352)",
  "d09eacd": "[HUDI-25] Optimize HoodieInputformat.listStatus() for faster Hive incremental queries on Hoodie",
  "845a050": "[MINOR] Some minor optimizations in HoodieJavaStreamingApp (#1046)",
  "1a29d46": "- Fix realtime queries by removing COLUMN_ID and COLUMN_NAME cache in inputformat (#814)",
  "173e0b6": "exlude fasterxml and parquet from presto bundle",
  "e43efa0": "Downgrading fasterxml jackson to 2.6.7 to be spark compatible",
  "345aaa3": "Add m2 directory to Travis cache",
  "989afdd": "BUGFIX - Use Guava Optional (which is Serializable) in CompactionOperation wcached to avoid NoSerializableException",
  "66e272e": "Docs for performance section (#80)"
}, "hugo": {
  "": ""
}, "hutool": {
  "df139f8": "!821 hutool-extra ftp 支持上传文件或目录（包含当前及子孙目录的所有文件） Merge pull request !821 from fasttime/v5-dev",
  "6ed8588": "add cache",
  "edd57e8": "fix flaky test cn.hutool.core.util.JAXBUtilTest#beanToXmlTest. no performance regress related. test file changed only.",
  "a8add39": "fix cache",
  "de7575c": "optmize cache",
  "8d81a59": "fix cache bug"
}, "Hystrix": {
  "45d7875": "throw IllegalStateException if request cache is not available for clearing",
  "c6eba37": "Make toObservable lazy. Prevents work (like cache key calculation) from happening before subscription build.gradle CHANGELOG.md codequality CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat hystrix-contrib hystrix-core hystrix-examples hystrix-examples-webapp hystrix-serialization LICENSE-2.0.txt OSSMETADATA README.md settings.gradle This also implies that queue()/observe() will not throw anymore build.gradle CHANGELOG.md codequality CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat hystrix-contrib hystrix-core hystrix-examples hystrix-examples-webapp hystrix-serialization LICENSE-2.0.txt OSSMETADATA README.md settings.gradle The IllegalStateException now gets wrapped in a HystrixRuntimeException for consistency",
  "8a5c48c": "Larger metric buckets in unit tests to allow for slower CI processing",
  "77e9860": "Fix memory leak where TimerReference was not getting cleared on lost-race request-cache insert",
  "0e4e004": "Fix to handling of case when 2 commands attempt to put an Observable in the request-cache and the loser needs to get cleaned up (unsubscribed)",
  "59e1f63": "Increased batch command timeout in HystrixCollapserTest to accommodate Travis slowness",
  "cd2414a": "Made unit test more lenient on timing to accommodate Travis slowness",
  "9508e83": "Made latency check in unit test more lenient to account for Travis slowness",
  "01d7d17": "Made latency check in unit test more lenient to account for Travis slowness",
  "b2a7f9c": "Increased timeout in HystrixRequestLogTest to accommodate Travis slowness",
  "38c4514": "Increased timeout value in HystrixObservableCollapserTest to accomodate slow Travis",
  "0ab2aef": "Increased the timeout value for commands to accommodate Travis slowness",
  "4037b50": "Merge pull request #1127 from mattrjacobs/observable-command-slow-execution",
  "4ae31e9": "Merge pull request #1102 from mattrjacobs/fix-request-cache-null-check",
  "ec642b0": "Merge pull request #1093 from caarlos0/request-cache",
  "f8da6aa": "Fixed NPE on request cache when HystrixRequestContext is not initialized",
  "80e88a8": "Remove request context, and de-dupe response from cache from RequestEvents stream",
  "26db2f7": "Merge pull request #1071 from mattrjacobs/remove-sun-misc-cache-import",
  "56ef8c2": "Merge pull request #1056 from mattrjacobs/deflake-slow-cacheable-command",
  "bf81634": "Consistency between work being performance-tested in metrics-read JMH test",
  "5938e85": "iss-907: implemented fallback and cache",
  "f1d9b7a": "Merge pull request #888 from mattrjacobs/master-single-collapser-request-cache-lookup",
  "36e0ec0": "In HystrixCollapser, only check if request cache is enabled once",
  "0dc58bb": "Merge pull request #886 from mattrjacobs/master-single-lookup-of-request-cache",
  "3e429e8": "Only lookup if the request cache is enabled once per command invocation build.gradle CHANGELOG.md codequality CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat hystrix-contrib hystrix-core hystrix-examples hystrix-examples-webapp hystrix-serialization LICENSE-2.0.txt OSSMETADATA README.md settings.gradle This helps performance and eliminates chance that start/end of command see this value differently",
  "d66dae4": "Move all reads of Histograms to a single-threaded path. Either cache the commonly-accessed summaries at construction, or support arbitrary calculations via a synchronized path",
  "2070141": "Merge pull request #681 from mattrjacobs/add-cache-hit-hook",
  "261f695": "Add execution hook for cache hit",
  "2a9d70b": "A smaller testcase demonstrating that a slow fallback also triggers a failure",
  "61a24a7": "Fixing test assertions for fast(!) Cloudbees",
  "903eff8": "Replace explicit iteration with library support for fast list creation",
  "ad0c9de": "Merge pull request #489 from dmgcodevil/iss380-javanica-cache",
  "742bb6e": "Merge branch 'iss380-javanica-cache' of github.com:dmgcodevil/Hystrix into iss380-javanica-cache",
  "bda7a6b": "iss380: remove cacheKeyMethod from HystrixCommand annotation",
  "6b37bce": "iss380: javanica cache implementation",
  "7220a9c": "Merge pull request #184 from benjchristensen/queue-cached-future-exception"
}, "iceberg": {
  "c03f126": "Build: Bump fastavro from 1.7.3 to 1.7.4 in /python (#7671)",
  "f07bedc": "Build: Bump com.fasterxml.jackson.core:jackson-annotations (#7601)",
  "4b53fb6": "AWS: Make AuthSession cache static (#7289)",
  "6671c37": "Build: Bump fastavro from 1.7.2 to 1.7.3 in /python (#7084)",
  "8c3c9cc": "Build: Bump fastavro from 1.7.1 to 1.7.2 in /python (#6942)",
  "c3d36cd": "Build: Bump fastavro from 1.7.0 to 1.7.1 in /python (#6689)",
  "9fcfe79": "Spark 3.2: Automatically set Arrow properties for read performance (#6671)",
  "ba63f25": "Spark 3.3: Automatically set Arrow properties for read performance (#6550)",
  "5147a0b": "Spark 3.1: Fix a separate table cache being created for each rewriteFiles (#6285)",
  "4e6af36": "Spark 3.2: Fix a separate table cache being created for each rewriteFiles (#6284)",
  "f86f3ee": "Python: Fix Avro scan performance in PyArrow (#6283)",
  "4caf1b4": "Spark 3.3: Fix a separate table cache being created for each rewriteFiles (#5392)",
  "5195d28": "Flink: Add 'cache.expiration-interval-ms' option to FlinkCatalog (#6111)",
  "6c7e8d1": "core: Provide mechanism to cache manifest file content (#4518)",
  "f0ac5d3": "Build: Bump fastavro from 1.6.0 to 1.6.1 in /python (#5745)",
  "b88f011": "Python: Bump fastavro from 1.5.3 to 1.5.4 in /python (#5396)",
  "883f867": "Build: Fix gradle warning for optimizations disabled for API tests (#5252)",
  "6cc4a19": "Spark: Add Spark catalog for loading tables from cache (#5247)",
  "fa07d9f": "Core: Fix wrapper performance for delete filters (#5249)",
  "e9b47f7": "Spark: Port performance fix for Spark 3.2 to 3.3 (#5155)",
  "58a9c6d": "Python: Replace vars with cached_property decorator (#5068)",
  "75fb871": "Python: Use struct constant to improve pack/unpack performance (#4929)",
  "610714e": "Spark: Allow Bin-Pack optimization to work across different partition specs (#4279)",
  "e75d732": "Core: Improve GenericReader performance (#4218)",
  "8dab33c": "Core: Replace set with bitmap for faster delete filtering (#3535)",
  "8e16f30": "Docs: Add cache.expiration-interval-ms for Spark catalogs (#3787)",
  "35419b4": "Spark 3.1: Add cache.expiration-interval-ms SparkCatalog (#3735)",
  "5fb7c0f": "Spark 3.0: Add cache.expiration-interval-ms SparkCatalog (#3735)",
  "9c3e340": "Core: Add cache expiration option to CachingCatalog (#3543)",
  "a6b0f42": "Docs: Add cache-enabled to catalog property list (#2648)",
  "66f4683": "[Site][Doc] fix performance pdf url (#2477)",
  "5648962": "Spark: Remove softValues for Spark 2 catalog cache (#2363)",
  "36080f8": "Hive: Use HiveClientPool cache instead of HiveCatalog global cache. (#2325)",
  "6bf58e5": "Docs: Add Adobe blog on read optimizations (#2250)",
  "c84d441": "Core: Use listStatusIterator in HadoopCatalog to improve performance #2124 (#2125)",
  "eca7dc3": "Spark: Refresh relation cache in DELETE and MERGE (#2154)",
  "b1eff51": "Spark: Make refresh of Spark cache optional in procedures (#1811)",
  "b1c94dc": "Spark: Remove cache expiration in HiveCatalogs cache (#1674)",
  "444779d": "Fix IN predicate performance (#1672)",
  "94ad905": "Docs: Fix typo in performance doc (#1401)",
  "d46c7d6": "Expire snapshots action without cache (#1344)",
  "c8d9c85": "Core: Add file stats range optimizations for DeleteFileIndex (#1338)",
  "b68eb3f": "Remove table cache expiration (#1203)",
  "55d27ed": "Allow cherry-picking any commit as long as it is a fast-forward. (#799)",
  "affaff7": "Use filtered manifests from cache in snapshot updates."
}, "IDDD_Samples": {
  "": ""
}, "igniter": {
  "9330c3c": "fix ArrayIndexOutOfBoundsException, when click the delete button as faster as possible.",
  "46cab67": "Revert 'force to ignore battery optimization'",
  "d0fa812": "force to ignore battery optimization",
  "075d901": "update golibs with go-tun2socks DNS cache fixes",
  "320303c": "Write and read exempted app list in file instead of in SharedPreferences. Since ProxyService and MainActivity run in different process, it is better to share the data in file, because SharedPreferences is of bad performance in multiprocess environment. Now that file takes the place of SharedPreferences, CommonSP is deprecated and should be removed.",
  "10867f5": "Migrate ProxyService to proxy process. Replace ProxyControlActivity with ProxyHelper, because starting Activity in tile service might be slow or prohibited in some manufacturer ROMs.",
  "cf0b895": "update golibs with refined dnscache and fakedns",
  "ce93112": "add menu item to show cached server list, which makes it possible to switch trojan configuration conveniently.",
  "fa9e122": "CircleCI: update golibs with tcp optimization from"
}, "IJPay": {
  "328711d": "升级fastjson版本到1.2.83,1.2.83版本之前存在代码执行漏洞风险，CVE-2022-25845 升级fastjson版本到1.2.83,1.2.83版本之前存在代码执行漏洞风险，CVE-2022-25845"
}, "ImagePicker": {
  "": ""
}, "ImmersionBar": {
  "": ""
}, "immutables": {
  "c3344b5": "Avoid invalidating Gson type adapter cache when creating Mongo Repository (#1406)",
  "09c002c": "Add mongo optimization to convert $in/$nin into $eq/$ne (for special case)",
  "8e66c3f": "Add CachedIdResolution for faster ID lookups",
  "2a22c8b": "Geode cache IdExtractor during session creation",
  "e44ccfb": "#307 revising on-demand collection initialization, better aligning it with #299 by using nulls instead of empty collections. strictBuilder=true attribute effectively disables this allocation optimization",
  "9ab93bf": "code generation tweaking and (doubtful) optimizations + inlining of simple templates + for top level templates we use method dispatch instead of anonymous classes + public templates are only exported public and non-inlinable + refinement of logic of singleton generation: less supplementary methods generated for simple cases",
  "91d325c": "cache .m2 directory",
  "568c3a8": "simplified ordinal domain to not use guava cache + refined generated code",
  "fec2a6c": "optimizations of token assertions, explicit 'outer' if statement added. Inlining was not good enough in practice. Related to #68",
  "05c702e": "removed optimization for #6, it adds complexity, but no improvements in real cases after JIT. Actually in target cases some it makes things slower a bit",
  "4479928": "modest performance increases in JSON marshalers"
}, "im-server": {
  "c30a688": "remove useless fastjson",
  "e8b105f": "switch to gradle gradle files added gradle: plugins added build: files added .travis.yml: gradle cache stored distribution: tar and zip file stuff added broker/build.gradle: osgi plugin added build: bintray upload added pom: files removed distribution: assembly.xml removed gradle: test ouput added to sub builds .editorconfig: gradle files added build: wrapper task added osgi: added to h2_ and mapdb_storage gradle: files cleaned build.gradle: jars used for tar/zip",
  "52415c5": "h2-storage: test folder moved H2MessagesStore: fixed retain messages H2MessagesStore: code formater for travis rebuild H2PersistentQueueTest: performance test disabled",
  "23b903e": "- moved and cleaned many part of Paho integration tests to unit tests - fixed bug that on conflicting connect close old channel but not dropped from ConnectionDescriptors cache",
  "07093ab": "Merge pull request #255 from AndreasMager/subscription-store-performance-test",
  "46fcdc0": "Allow InterceptHandler to specify the messages they can intercept. This allows us to improve the performance of the broker interceptor, and will make log traces more clear. - Add methods to return an unique identifier and the supported message types at the InterceptHandler interface. - Include a default implementation of the new methods in the AbstractInterceptHandler. By default, all the interceptors will be able to handle any message (same as before). - Comment verifyNoMoreInteractions() call from the BrokerInterceptorTest.testAddAndRemoveInterceptHandler(). The removeInterceptHandler() method of the broker interceptor polls the InterceptHandler, so an interaction will always exist after the call to onSubscribe().",
  "4e2a0db": "Switched to netty 4.1.6 to include Netty's official mqtt codec to make some performance tests",
  "8aa6834": "Added performance project module, to stress test specifics part of Moquette",
  "50e1005": "Added moquette.processor.benchmark sys property to enable/disable processor performance recording",
  "8f10f3e": "Moved the clientIDs map (ConnectionDescriptors cache) from SimpleMessaging to ProtocolProcessor"
}, "incubator-heron": {
  "5084318": "Fixing RVO optimization (#3549)",
  "467bbaa": "add a switch for metricscache (#2744)",
  "391afe4": "[metricscache] align metricscache toggle switch (#2707)",
  "c530424": "[metricscache] reduce exception stack trace to first 2 lines (#2706)",
  "b72e106": "[metricscache] make default log level to INFO (#2705)",
  "4d44f5b": "add exception handling for metricscache process (#2572)",
  "fcac777": "fix metricscache location bug (#2556)",
  "8bd4e59": "adding metricscache-sink entry to configs (#2506)",
  "b4bb9a2": "update metricscachemgr (#2401)",
  "c84ec53": "Revert 'Take override.yaml in stmgr, metricsmgr, metricsmgr-cache, tmaster, instance (#2311)' (#2332)",
  "3df0a4d": "Take override.yaml in stmgr, metricsmgr, metricsmgr-cache, tmaster, instance (#2311)",
  "6610ca9": "Make metrics cache client in healthMgr fetch location from statemgr (#2232)",
  "b4659fc": "Added ability in tuple cache to take in checkpoint messages to be sent to downstream tasks (#2058)",
  "a037526": "Fail Heron-instance fast for errors (#1839)",
  "c9e5090": "update statemgr dependency in metricscache",
  "fc24536": "add test update for aurora metricscache",
  "372dd79": "Stream manager code cleanup and optimization (#1665)",
  "740b3b9": "rename tmaster to metricscache in functon FetchMetricsCacheLocation()",
  "e7641f4": "update to metricscachesink test according to bill's comment",
  "161b2ce": "hook metricscache purge timer task into heron server looper",
  "289c39c": "update metric cache design",
  "694ee51": "Remove notify in SlaveLooper.wakeUp. It is useless and affects performance.",
  "e0bcb3b": "metricscache server and client interaction established.",
  "624be34": "remove unused stuff in metricscachemanager and its server",
  "b3b6d39": "update metriccachemanager and metriccachemanagerserver",
  "8e25df7": "add dummy main entry to make metricscachemgr run as a process.",
  "835dc38": "add more metricscachemgr tests",
  "6249ffc": "move sla metric cache to separate top level package",
  "24cf53a": "update sla metric cache test BUILD package name",
  "5afd6a1": "rename package heron.slamgr.cach->heron.slamgr.metriccache",
  "5199528": "Use BaseMemPool in tuple-cache (#1585)",
  "5d1c6e2": "Change std::list to std::deque for tuple cache (#1532)",
  "b859b72": "Make metrics mgr fail fast when unexpected errors happen. (#1473)",
  "557c980": "Stream manager performance improvement (#1421)",
  "ad12ca3": "Pex without interpreter cache disabled (#1167)",
  "1b8f970": "fail travis build fast if unit test fails (#555)",
  "9c92ea1": "cli should bail out fast (#541)"
}, "incubator-streampark": {
  "bdbe63a": "[Improve] Front-end module code optimization, typo fixed (#2265)",
  "024ce6e": "[improve] mysql-data.sql optimization (#1616)",
  "d250621": "build strategy optimization, spark only adapts to scala 2.12 (#1374)",
  "2b24adc": "Revert '[Improve] Polish maven wrapper and bump maven version to 3.8.4 for better performance and arm support. (#1334)' (#1336)",
  "5d39c72": "[Improve] Polish maven wrapper and bump maven version to 3.8.4 for better performance and arm support. (#1334)",
  "c1f7125": "docker deployment optimization (#1317)",
  "102e50a": "[Improve]scala hashcode code optimization (#1293)",
  "76b5a52": "[BUG] Fix the job status bug And add the getSqlClientJar exception optimization (#1283)",
  "9e303a7": "[Improve] k8s mode rebuild optimization, jump to flink dashboard ui bug fixed",
  "1300f08": "[Improve] docker image namespace optimization. (#1114)",
  "d2899bb": "[Improve] maven dependency optimization (#1014)",
  "0e2129c": "[Improve] account token optimization (#989)",
  "60123bb": "[Improve] code optimization (#977)",
  "ecf4af1": "[Improve] clickhouse connector optimization (#970)",
  "f5979fe": "datastream connector code optimization (#936)",
  "f09a321": "[improve] flink job submit optimization (#759)",
  "6420217": "[improve] about job launch status optimization (#750)",
  "67fa9fd": "[improve] code format optimization (#745)",
  "537424e": "[improve] flink job submit optimization (#739)",
  "22b06ec": "[Feat] flink local mode submit optimization (#738)",
  "d5bd3ac": "optimization eslasticseach sink (#733)",
  "265e277": "[improve] job submit close resource optimization (#732)",
  "60504ec": "[improve] flink shims proxy include lib optimization (#724)",
  "dab0519": "[improve] job submit optimization (#716)",
  "fca054a": "[improve] job submit optimization (#714)",
  "9542caf": "[improve] job submit optimization (#713)",
  "252f408": "[improve] job submit optimization (#711)",
  "64ea8bc": "[improve] code and sql optimization (#710)",
  "e6bc9b7": "[improve] code optimization (#709)",
  "abe2205": "[improve] job submission parameter optimization (#708)",
  "1e0f02d": "[improve] ddl sql optimization (#707)",
  "39b0ce9": "[improve] job submission parameter optimization (#706)",
  "6bb11e6": "[improve] optimization redis sink (#690)",
  "e45d637": "optimization redis sink (#683)",
  "39da1a3": "remove fastjson dependency. (#572)",
  "a9d6335": "Improved fastjson version, fixing its own vulnerabilities (#570)",
  "b0f87c7": "[Improve] packing and reading resource file optimization #543 (#546)",
  "f785a49": "[]packing and reading resource file optimization (#544)",
  "edd5f1a": "[Feature] project build optimization, better support for front-end and back-end packaging (#533)",
  "0e05ba8": "[Feature] project build optimization, better support for front-end and back-end packaging (#532)",
  "5b10a20": "code optimization",
  "dfdb853": "flink shims classloader and relevant cache.",
  "c8f502a": "workspace optimization,spelling correction of some words (#347)",
  "164eb42": "workspace optimization,spelling correction of some words (#335)",
  "e6d6017": "Using cache to speed up build fatjar (#287)",
  "b22792e": "[Optimization] Flink multi version support optimization!",
  "27507a5": "[Optimize] alarm email template optimization",
  "5cbc631": "[Optimize] alarm email template optimization",
  "60db89c": "[Optimize] alarm email template optimization"
}, "InfiniteCycleViewPager": {
  "": ""
}, "Infinity-For-Reddit": {
  "adb77f4": "Fix app crashes when applying Material You theme after changing wallpaper. Tweak the design of the fast scroller.",
  "87ab682": "Some more spoiler parsing optimizations",
  "46e0aef": "Merge pull request #139 from OHermesJunior/fastlane-structure",
  "dc39cb7": "Enable EventBus Index, avoids reflection, and better performance.",
  "784d579": "Add fast scroller for MultiRedditListingActivity and FollowedUsersListingFragment.",
  "90fa50f": "Add a fast scroller on SubscribedSubredditsListingFragment.",
  "60b659e": "Use GifImageView to display all the images in order to prevent slow playing of the gifs. Extend GifImageView as AspectRatioGifImageView to retain the features of AspectRatioImageView."
}, "initializr": {
  "fd76c7d": "Document default metadata cache expiration policy",
  "8d61cdd": "Allow auto-configured caches to be overridden",
  "76b853a": "Enable CI maven cache",
  "58ae44d": "Merge pull request #624 from a1dutch:sts4-cache",
  "5f9d80d": "Ignore the new .sts4-cache folder added as part of STS 4",
  "4de86e1": "Configure a cache busting resource chain",
  "58a651d": "Add cache starter"
}, "InstaMaterial": {
  "5942df8": "Added onClick to user profile photo, small performance improvements for FeedAdapter",
  "3ad0fb9": "updated feed mock images (resized for better performance)"
}, "InternetArchitect": {
  "": ""
}, "interview": {
  "197058d": "update stock buy max profit to add slow solution",
  "cbf242d": "Removing slow method",
  "76cb38e": "Removing slow method",
  "fd261d2": "Slighty faster version of quick sort"
}, "interviewGuide": {
  "": ""
}, "ion": {
  "2260a31": "Add method to remove cached bitmap if it exists.",
  "0b95ad4": "Always null out the bitmap fetcher after executing it, to prevent reexuection. This was not happening in the cache-hit-post case.",
  "5ad622b": "watch out for recycled bitmaps in the cache",
  "0f85f71": "Ion is now used for most HTTP access and picture cache in Plume",
  "0c6a684": "More optimizations:",
  "574a689": "Move all cache related stuff into subpackage. Contain libcore.",
  "8fad080": "cache status",
  "ddd8d4c": "Provide access to caches/stores",
  "7ff1a74": "rework store/cache api",
  "cdb3bf4": "Ion caching: try to recover from cache initialization failure.",
  "941d1f6": "Move deepZoom into BitmapFetcher. Enable fastLoad support for deepZoom. Use BitmapFactory to load non-animated gifs. Fix up ImageView cached exception delivery. Clean up execute/request resolution to properly invoke onto main handler. Use BitmapFactory.decode with bounds to get the image mime type instead of isGif. Replace IonBitmapCache.decode(InputStream, ...) variant with File.",
  "5cdefe8": "IonBitmapCache performance fixes.",
  "2a80a4a": "Add dynamic cache size adjustments. Send resize width/height header as hints.",
  "453ff5d": "Use weak references on cache eviction.",
  "a19375d": "Gif decoding: optimizations around allocations and bitmap reading",
  "aba57ed": "Refactor config options into configure(). Add a persistent store and cache.",
  "4fbf211": "Bitmaps: fix how bitmap load errors are cached. Fix NRE that occurs when a errored out bitmap is retrieved from cache.",
  "40117d1": "Loader: add fast path for bitmap loads",
  "b4464e8": "add support for bypassing the cache on requests",
  "eaded0d": "Fix bug in ion disk cache optimization. Only use the cache for transformed images.",
  "daefb90": "Transformed image cache fix. Write all entries. Outputstream Cleanup needs to handle sink close.",
  "d079095": "Optimization: cache transformed images. Transformed images are now stored in the same DiskLruCache as the response cache. Prior to this change, transformed images were always retransformed from the original image on cache hit. This change has the benefit of allowing the original image (which may be very large) to stagnate and drop off the cache, while allowing the transformed image to persist. It also speeds up load times by not having to perform the transformation every reload.",
  "7db26ba": "do not indefinitely cache bitmaps that fail to load due to whatever reason. try again after a specifiable duration.",
  "979f692": "Add method to allow manual removal of items form the cache.",
  "8d6dca5": "Add support for setRequestCallback which also returns the headers with the request result. Does not currently work with Bitmaps and ImageViews which can also be served from cache, etc.",
  "850faef": "turn on logging for the sample to watch for cache and conditional cache hits, etc. The bitmap cache should not use the entire heap."
}, "iotdb": {
  "67d70cea": "[IOTDB-5887] Optimize the construction performance of PathPatternTree without wildcards",
  "e66c4e50": "Support schema cache when querying all measurement of devices using template (#9871)",
  "b48bc0a4": "[IOTDB-5858] fix the clear of metric in datanode schema cache",
  "b938948b": "Fix only update last cache on follower (#9827)",
  "921faa06": "[IOTDB-5858] Remove useless class cast and update schema cache hit",
  "52eb8586": "Follower doesn't need to update last cache when using IoT_consensus (#9811)",
  "61600958": "[IOTDB-5841] Modify IoTConsensus default parameters to improve performance in more scenarios (#9771)",
  "d66dff32": "[IOTDB-5828] Optimize the performance of some parts in metrics, and correcting the metrics count of temporal file size in inner space compaction (#9753)",
  "8db6527e": "[IOTDB-5825]Fix error in aligned empty value chunk in fast compaction (#9719)",
  "86be5ea1": "[IOTDB-5803] Improve query performance by reducing cpu consuming",
  "8d7ca050": "[IOTDB-5807]Fix decompression error for aligned series in fast compaction (#9701)",
  "b6f78dce": "Support update last cache for data insertion when using template (#9696)",
  "348763f2": "Add a cache to avoid initialize duplicated device id object in write process (#9644)",
  "788c58dd": "[IOTDB-5715] Improve the performance of query order by time desc",
  "2d843366": "[IOTDB-5701] Optimize the management of performance overview related metrics (#9381)",
  "279b775b": "[CLIENT-PY] Optimize array concatenation performance in `todf()` (#9001)",
  "eb7095ec": "[grafana-plugin] Preparing grafana-plugin launching in Grafana Marketplace: serveral bug fixes & code optimization (#9293)",
  "2557b1db": "[IOTDB-5613] Remove unnecessary serialization in IoTConsensus when replicaNum is 1 to improve write performance (#9204)",
  "5148854e": "Bump http-cache-semantics from 4.1.0 to 4.1.1 in /grafana-plugin (#8980)",
  "a14022a2": "[IOTDB-5585] Change InternalReporterType from IoTDB to Memory to reduce performance degradation",
  "78d233ba": "[IOTDB-5189][IOTDB-5529]Optimize the memory usage and execution of fast compaction (#9048)",
  "00350a08": "Open schema cache statistics (#8969)",
  "309206e5": "[IOTDB-5392] accelerate pointPriorityReader in fast compaction",
  "7c9395de": "[IOTDB-5342][IOTDB-5359][IOTDB-5360] Some optimization in AbstractTreeVisitor (#8721)",
  "65fb4808": "[IOTDB-5208]Fix file handles increase when TsFileResource is degraded and compacted with fast performer (#8573)",
  "3bc92acd": "Eliminate schema region device cache (#8563)",
  "394ecc0f": "Modify the default value of `iot_consensus_cache_window_time_in_ms` to 10s (#8553)",
  "b40d7b17": "[IOTDB-5210] Fix closed TsFileSequenceReader still cached in FileReaderManager",
  "7f2218b4": "[IOTDB-5141]Fix fast compaction scheduler bug",
  "64ed75f5": "add uts of fast compaction performer (#8346)",
  "d3d2cf99": "Try to fix query performance (#8208)",
  "e5b4dfe0": "Fix slot query bug; add optimization for getSchemaPartition (#8200)",
  "1c016088": "[IOTDB-4881] Add feature StorageGroup fast activation (#7944)",
  "1bb7b0ac": "Remove code of last cache for old standalone (#8075)",
  "ebad1dd5": "Grafana plugin code optimization (#7934)",
  "c8b50b89": "use cached thread pool to accelerate short-lived asynchronous tasks (#7870)",
  "8d0c685b": "Improve query performance (#7894)",
  "876564dd": "[IOTDB-4778][IOTDB-4031][IOTDB-4764][IOTDB-4514] restServer module adaptation and optimization (#7897)",
  "9fe28899": "[IOTDB-3656] mpp load supports last cache (#7529)",
  "8a4b8ea3": "[IOTDB-4517] Fix cross_space and unseq_space compaction are slower at common timeseries and template timeseries (#7433)",
  "19c8c8a3": "[IOTDB-4541] Improve: cache latest snapshot info for ratis leader (#7450)",
  "5cc478c8": "[IOTDB-4392] build separate cache queue for MultiLeader log sync",
  "94b5a5fe": "[IOTDB-4412][MultiLeader] add `cacheWindowTimeInMs` into config. (#7322)",
  "fd60088a": "[IOTDB-4351] Enhance client-cpp for performance (#7256)",
  "4808d89e": "[IOTDB-4258]Replace StorageGroupNode inside cache member if setToEntity (#7184)",
  "3c1f57c0": "[IOTDB-4126] Optimize cache implementation using HashMap to find Node instead of traversal with a for loop (#6986)",
  "6517daf6": "[IOTDB-3950] Transport layer optimization for sync modules (#7038)",
  "aeddc67f": "[IOTDB-4207] Clear RegionGroup cache after Region migration",
  "6c4a87c1": "[IOTDB-3938] Avoid serializing schema in wal for better write performance of standalone version (#7050)",
  "0292905e": "Upgrade maven-wrapper to 3.8.6 for performance improvements and ARM more native support (#7003)",
  "23cb64c1": "[IOTDB-4121] logical optimizations for ImportCsv (#6998)",
  "371b3b4d": "[IOTDB-3938] Fix SeriesSlotExecutor initialization logic for insertion performance (#7007)",
  "c046fd3c": "[IOTDB-4109] Optimize merge、flush、clear cache operation (#6956)",
  "f1787b83": "[IOTDB-3938] Optimize Standalone schema fetch performance (#6949)",
  "df9c6294": "Improve the performance of Raw Query Without ValueFilter for nonAligned (#6853)",
  "2db18ee7": "[IOTDB-3727] Support clear cache in new cluster (#6756)",
  "7c0a6209": "[IOTDB-3975]refactoring cache from authorityFetcher (#6791)",
  "f4d1323f": "[IOTDB-3938] Avoid performance decline caused by fsync twice (#6769)",
  "2b7dc520": "[IOTDB-3723] Replace FilterOperator with FilterAndProjectOperator and use batch processing for better performance (#6714)",
  "67d78fe4": "[IOTDB-3827]support partition cache for query. (#6673)",
  "f465aac4": "IOTDB-3901 C++ client method of insertRecordsOfOneDevice sorting optimization (#6734)",
  "e271ddcf": "[IOTDB-3871] Make last query be able to update last cache even if there is no other write happens after restarting (#6699)",
  "967cde60": "[IOTDB-3851] C++ client method of tablet sorting optimization (#6690)",
  "203b15ba": "[IOTDB-3352][IOTDB-3782] Fix the cache problem in PartitionCache and Optimize. (#6624)",
  "d1f2ce37": "[CLIENT-PY]Optimize the performance of filling null values (#6555)",
  "ad60df61": "grafana plugin add password input type and optimization (#6052)",
  "3fe02638": "temporarily close partition cache. (#6486)",
  "e71044e1": "Enable partition cache and change default size to 10000 (#6448)",
  "5008c785": "[IOTDB-3352] Fix partition cache (#6443)",
  "56d6940b": "Change default partition cache size to 0 (#6434)",
  "8d20e48b": "Optimize multiLeaderConsensus performance (#6413)",
  "18a514c3": "[IOTDB-3456] Optimize PathPattarnTree for improving write performance (#6294)",
  "1871e60f": "[IOTDB-3476] remove error log when update cache",
  "4fde65e4": "[IOTDB-3394] Add cache metrics (#6201)",
  "22268001": "[IOTDB-3300] Improve measurement check performance for session api (#6019)",
  "3b900430": "Update last cache when insert (#6048)",
  "064c1667": "Use cache for last query (#6042)",
  "c115adde": "[IOTDB-3083] DataNode AuthorInfo cache (#5943)",
  "44885d5a": "[IOTDB-3268] Refactor measurement check logic in session api for better performance (#5995)",
  "e108016b": "remove enable_performance_stat in iotdb-engine.properties, and add enablePerformanceStat in iotdb-metric.yml (#5920)",
  "f7f857e5": "[IOTDB-3062] add last cache in DataNodeSchemaCache (#5906)",
  "5e6274c1": "[IOTDB-3076]Optimize StandAloneConsensus read/write performance && consensus modu… (#5768)",
  "245621ca": "[IOTDB-3032]Fix storage group cache (#5711)",
  "4bf3dbb6": "[IOTDB-2960]Add partition cache (#5685)",
  "907c06e5": "Fix schema file with cache of size 1 (#5651)",
  "b2d060cf": "[IOTDB-2651] Fix write performance deteriorates severely (#5170)",
  "9195d3ed": "[IOTDB-2532] Query with align by device can't get value after clear cache (#5045)",
  "38eaf0eb": "[IOTDB-2526] Fix NPE when setting meta_data_cache_enable=false (#5029)",
  "76143508": "Avoid flush stream in get position() to improve flush performance (#4963)",
  "000cf58d": "[IOTDB-2433] Fix insert aligned timeseries performance reduction (#4968)",
  "349a9b46": "[IOTDB-2220] Fix unit tests too slow issue caused by the MQTTService (#4649)",
  "4dbe90ab": "[IOTDB-2193] Reduce unnecessary lock operations of RaftLogManager to improve writing performance (#4638)",
  "6a88895c": "[IOTDB-2061] Add max cached buffer size and max concurrent sub query parameter (#4486)",
  "6487443c": "[IOTDB-2065] TsFileSequenceReader will be cached for 100s even no longer used (#4478)",
  "1eb9e0e2": "Refactor the todf() function of client-py to improve performance (#4242)",
  "b3d9b267": "Update last cache while doing show latest timeseries query (#4393)",
  "5a7abfb2": "[IOTDB-1950] Add Bloom Filter cache for query (#4350)",
  "87dc695e": "[IOTDB-1924]Remove the operation of clearing the cache after the compaction is over (#4315)",
  "d35eab40": "Add compaction version in cache key (#4298)",
  "bc47312c": "[IOTDB-1895] Cache leader optimization for batch write interfaces on multiple devices (#4286)",
  "461d22b5": "[IOTDB-1280] Solve the performance reduction caused by syntax error in SLL prediction mode (#4234)",
  "96b5269f": "[IOTDB-1730] client-cpp, enhance session::insertTablet() etc.'s performance (#4022)",
  "8a039ebd": "[IOTDB-1703] Fix MManager slow recover with tag (#3997)",
  "62135fc8": "[IOTDB-1587] SessionPool optimization: a more aggressive Session creation strategy (#3823)",
  "8ec3e128": "[ISSUE-3805] OOM caused by Chunk cache (#3807)",
  "bf220015": "Using cached pool to reduce the String memory size in TsFileResourse (#3555)",
  "98bbec77": "Improve group by month performance (#3517)",
  "adfcffb0": "[Cluster] enable cacheLeader by default (#3468)",
  "66918f3f": "Remove the broken cached leader connection & optimize the insertRecords method in session (#3364)",
  "4bfac46b": "[ISSUE-3309] Fix InsertRecordsOfOneDevice runs too slow (#3310)",
  "79f4b4ba": "Fix CI failed caused by updating unnecessary vector last cache (#3044)",
  "3f5af4ac": "[IOTDB-1298] Insertion performance loss due to meaningless autoboxing and unboxing (#3003)",
  "e67b7700": "[IOTDB-1236] Improve jdbc performance for creating timeseries in cluster module (#2872)",
  "8fc8de3e": "[IOTDB-854] Limit the memory foorprint of the committed log cache (#2879)",
  "d3e20eae": "[ISSUE-2709,IOTDB-1178] Fix cache not cleared after unseq compaction bug, Fix windows 70,10 ci bug in unseq compaction ci (#2707)",
  "978dd58b": "use remote schema cache when check timeseries exist or not",
  "aa979801": "fix last query non cached path bug (#2651)",
  "af20b89d": "[Distributed] fix session cache leader interface and docs (#2222)",
  "060f4fc1": "Replace TreeSet with TimeSelector (heap-based) for better raw query performance (#2495)",
  "85d4a003": "[IOTDB-1068] Fix Time series metadata cache bug (#2316)",
  "35fb6c09": "change parallelism in timeseries metadata cache (#2289)",
  "2bd067bb": "[To rel/0.11] Remove unnecessary dependency of com.clearspring.analytics:stream and fastutil (#2254) (#2255)",
  "dd0ade6f": "Pass 0-length array to List#toArray to improve performance (#2094)",
  "fc0f3f7a": "[IOTDB-962] Improve the chunk metadata cache process (#1874)",
  "64dc16bb": "[IOTDB-927] Remove fastjson introduced by rocketmq (#1782)",
  "74eedae2": "add device chunk point cache (#1758)",
  "eba7c0b6": "[IOTDB-916] Add a config entry to make Last cache configurable (#1770)",
  "1e3d9456": "[IOTDB-919] Update License binary as fastjson has been removed (#1773)",
  "5fa23d05": "[IOTDB-892] Replace fastjson with Gson (#1728)",
  "0de9fff3": "[IOTDB-904] fix update last cache NullPointerException (#1752)",
  "0f2f84b8": "use device node when update last cache",
  "a019a90a": "[IOTDB-736] Query performance tracing (#1399)",
  "a5e9dd0f": "Accelerate cache usage: combine get and contains (#1356)",
  "ae723b71": "[IOTDB-732] Upgrade fastjson version to 1.2.70 (#1299)",
  "4466180b": "fix timeseries metadata cache return null bug (#1280)",
  "249ec54a": "do not cache fullPath in LeafMNode",
  "19b7f590": "add clear cache command (#1223)",
  "7385db7d": "print cache size log only when cache enabled",
  "bd4b22e8": "decrease cache size in query",
  "65f3d722": "change the way to calculate chunkmetadata cache",
  "f4d28fd7": "[IOTDB-656] Upgrade fastjson version to 1.2.68 (#1179)",
  "bef8a97b": "[IOTDB-631] Using new TsFile MetadataIndex to optimize query and cache (#1134)",
  "f512b2c6": "add cache size log",
  "f9c63e59": "[IOTDB-624]Fix a Last cache bug when WAL is disabled (#1109)",
  "1572237c": "change to cache",
  "933537cd": "improve cache",
  "5ca6be41": "enable cacheDeviceMetadata in TsFileSequenceReader",
  "2f615280": "fix timegenerator cache bug (#905)",
  "0b22aff9": "fix timegenerator cache bug",
  "83701daa": "fix Timegenerator cache",
  "f1f07774": "diable timegenerator cache and add test",
  "7a5b3b03": "fix cache key to string",
  "78bf3518": "try to solve the bug 'if the flushing thread is too fast, the tmpMemTable.wait() may never wakeup' in TsFileProcessor syncFlush() 2",
  "487850dc": "try to solve the bug 'if the flushing thread is too fast, the tmpMemTable.wait() may never wakeup' in TsFileProcessor syncFlush()",
  "5a563b82": "fix OOM when there are too many columns in one query by adding a IChunkLoader cache",
  "c400bf1f": "[IOTDB-405] cache results in the client and makes the display look nice. (#782)",
  "e8efe6e4": "[IOTDB-262]fix that CachedPriorityMergeReader fails to deduplicate the last cache element (#463)",
  "4ea7bcca": "reconstruct antlrv3 grammar to improve performance (#440)",
  "8563691e": "display cache hit rate through jconsole (#431)",
  "62f8f2fa": "[IOTDB-224] fix buffer size and remove cache (#400)",
  "26ffc58f": "code optimization.",
  "2028c1b4": "Merge pull request #341 from apache/add_cache_configuration",
  "f94d4211": "increase configuration parameters of cache",
  "d41d4ab2": "do not cache metadata until the file selection is done",
  "403fbd1f": "clear resource caches after merge files are selected.",
  "126eac76": "[IOTDB-144]meta data cache for query (#262)",
  "0a7bcbb8": "use reader cache in MergeResource to construct MergeReader",
  "fc05734d": "Merge pull request #239 from apache/fix_performance_stats",
  "2f0f4f09": "modify log info in performance stats",
  "0fb2a961": "Merge pull request #111 from apache/fix_faster_release_mem",
  "a58b084d": "[IOTDB-56] faster memtable.getSortedTimeValuePairList (#105)",
  "786a9562": "Add cache directories for travis",
  "72d11508": "fix start JDBC service too slowly bug (#50)",
  "2b5bbee2": "remove treemap for performance",
  "0df54aef": "add detailed error log for iotdb metadata cache and add exception (#262)",
  "6d06fd58": "fix read process RecordReader cache remove problem"
}, "IoT-Technical-Guide": {
  "": ""
}, "ipscan": {
  "ae4d448": "cache created popup menu",
  "8d1bf6c": "implement icon cache to avoid re-creating and leaking images",
  "ce088da": "cache created dialog icon to avoid creating and leaking them",
  "cecb1f0": "getLocalHost() is very slow on a mac in virtual machine - let's use a faster version that doesn't do any lookups",
  "d5c1ec0": "upgrade dagger to 2.8, which is supposed to have some optimizations",
  "e562974": "try travis's faster docker container",
  "e7ad7cb": "comments are now saved to a separate preferences node to improve performance when there are lots of them",
  "c315533": "socket options added for optimization"
}, "itstack-demo-design": {
  "": ""
}, "j2objc": {
  "9e686f3": "Switch to os_unfair_lock for volatile locks. os_unfair_lock are (somewhat) faster, still handle QoS inversions, and match what Apple is using for atomic properties in current runtimes.",
  "b17ab51": "Use C11 atomic_flag to implement synchronization (~6% performance improvement).",
  "23cb934": "restore objective-c fast enumeration",
  "7587dce": "Removed Reflection.getCallerClass() call from AtomicReferenceFieldUpdater (performance regression).",
  "48eba16": "Removed IOSObjectArray optimization for retaining its elements.",
  "cc7e8c2": "Reintroduce branch optimization in initialize macros.",
  "b88d8df": "Fixed source file lookup to check the source path first for the actual file name. This is slightly faster than first converting to a fully-qualified type name, and enables lookup of module files that have the fully-qualified module name as its directory.",
  "0552af0": "Enable Objective C modules to improve build performance.",
  "09bfd68": "Use only core foundation functions in IOSReference, to reduce thread contention and improve performance a little.",
  "86a19b8": "Replaced platform logger's weak referenced cache with LRU cache to improve performance.",
  "f0d4268": "Only buffer one object fetch per fast enumeration callback, to match JVM behavior.",
  "ea1f287": "Added JVM option -XX:+UseParallelGC to make J2ObjC faster",
  "c2f74a0": "Commented out very slow JRE unit tests, added autoreleasepool for iOS memory failure.",
  "b6717d8": "Adds a nil_chk of the iterator in the default fast enumeration implementation.",
  "1b09ccf": "Convert IOSCharset to use CFStringEncoding instead of NSStringEncoding. This will make it easier to add new encodings that aren't available as NSStringEncoding and the CFString API also performs faster than the NSString API for the fast path conversions in NSString.",
  "587f5d3": "Only print stats with environment variable in JreEmulation test app (faster).",
  "0a0c699": "Merge pull request #840 from smdvdsn/usecaches_ios_diskcache",
  "3ebf222": "Removed validation after tree conversion to help javac front-end performance.",
  "e9b9b08": "Flush cached time zone when system time zone changes (#784)",
  "3c18fff": "Attempts to resolve flakiness in URLConnectionTest again. This time by using NSURLCache to set a clean cache for each test.",
  "16b656c": "Improve method lookup performance by passing around a single mutable string to build the expected parameter list.",
  "b21e4bf": "Replace enclosingName with enclosingClassIdx, using the class name of the enclosing class. Marginally improves binary size and improves performance of getEnclosingClass().",
  "a14d83a": "Switch the field type in metadata from a string based on the Java name to a string based on the ObjC name of the class. Field.getType() becomes 28x faster. This also fixes the return value when the field is a type variable with a bounded type.",
  "c4dc670": "Rewrote JavaMetadata class as C functions to improve reflection performance.",
  "1d4c24d": "Fixed compiler optimization for change of property of integer i, where condition (i<0) and (i<100) was false for i = Integer.min_value.",
  "85595e9": "Improve boxed primitive initialization by allocating all the cached small values together. Change on 2016/01/21 by kstanger <kstanger@google.com> ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=112717952",
  "fb1d0a2": "Improve boxed primitive initialization by allocating all the cached small values together. Change on 2016/01/21 by kstanger <kstanger@google.com> ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=112717952",
  "2a6578b": "Don't test for unresolved ports, because OS X 10.11 now returns all ports as resolved to improve socket performance. Previously, iOS had this feature, so our test only ran on OS X. Change on 2016/01/04 by tball <tball@google.com> ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=111319490",
  "b6ce405": "Cached ICU function pointers to improve performance. Change on 2015/10/22 by tball <tball@google.com> ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=106071753",
  "2ce8b2e": "Adds the J2OBJC_STRICT_ATOMIC_ASSIGN macro that, when defined, makes object assignment (on non-volatile fields) atomic as is guaranteed by the Java language. The macro will remain undefined because it comes with a performance cost and we don't have evidence that it is required by any users. Change on 2015/09/30 by kstanger <kstanger@google.com> ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=104328951",
  "000e1e8": "Slight optimization to avoid grabbing the mutex lock twice on the first lookup. Change on 2015/08/11 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=100397223",
  "87d6eed": "Rewrite check_protocol_cast using [IOSClass isInstance:] which is faster than 'conformsToProtocol'. Change on 2015/07/27 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=99224716",
  "157bf33": "Uniquified runtime lambda names. Tested outer instance method calls from within lambdas. Added assertions to fail faster and more logically when errors occur creating lambda classes at runtime. Change on 2015/07/20 by kirbs <kirbs@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=98652549",
  "0354d09": "Properly cast 'hasNext' and 'next' implementations in the default fast enumeration routine. Change on 2015/03/17 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=88839303",
  "58ea183": "Rewrite instanceof for interface types as a 'isInstance' call instead of 'conformsToProtocol'. This more than doubles the performance of such expressions. Change on 2015/01/30 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=85154256",
  "7f728cc": "Adds a map with lock-free lookups for faster lookups of IOSClass objects. Improves performance of getClass() by more than 4x. Change on 2015/01/29 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=85065318",
  "f44b422": "Adds J2OBJC_DISABLE_ARRAY_BOUND_CHECKS so that bound checks and type checks can be disabled separately. Make array accessors inline (except the object array setter) for better performance and so that disabling checks doesn't have to be done on the jre_emul. Change on 2015/01/20 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=84337423",
  "b0125d5": "Restored fast enumeration support in LinkedList. Change on 2014/11/07 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=79442533",
  "ebd1d7b": "Only statically load the default charset, UTF-8, to improve startup performance. Change on 2014/10/21 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=78203867",
  "fbc5d89": "Convert AbstractStringBuilder to a native implementation for improved performance. Change on 2014/10/01 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=76780176",
  "c067e0e": "Improves the performance of System.arraycopy by ~25%. (for a small copy) Change on 2014/09/04 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74778887",
  "2a88d6b": "Only cache immutable string hashes, fixed leak in hash calculation. Change on 2014/09/02 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74615236",
  "898def7": "A bit of performance refactoring in NSString+JavaString.m Change on 2014/09/02 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74612793",
  "2963f6b": "Greatly improve the performance of String.getChars(). Change on 2014/09/02 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74593811",
  "ead2180": "Moves IntegralToString implementations to native code to improve performance and eliminate dependency on ThreadLocal. Change on 2014/08/28 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=74303249",
  "4369b5a": "Fix a bug in bounded TreeMap fast enumeration. Change on 2014/08/08 by pankaj <pankaj@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=72897756",
  "b43122b": "Adds a new custom AST that will allow us more flexibility and performance with our mutations. Change on 2014/07/15 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=71177584",
  "abfc757": "Disable build optimization temporarily. Change on 2014/05/08 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=66537885",
  "b7c3a42": "Issue 345: set -Os to be default optimization, unless DEBUG build. Change on 2014/05/07 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=66435345",
  "603bedc": "Improves array creation performance by removing init methods. Arrays can now be created with either 'newArrayWith...' or 'arrayWith...' class methods. Change on 2014/04/09 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64622582",
  "b5659de": "Rewrite the enum values array as a native array. This should save a bit of space and improve performance a bit. Change on 2014/04/04 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=64367705",
  "bbe96a8": "Adds fast enumeration implementations to the moved ArrayList.java and Arrays.java. Change on 2014/03/03 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=62481536",
  "b9a2af5": "Call mach_timebase_info during static init, not on every invocation of System.nanotime; this should make the latter about twice as fast with only a tiny overhead during static init. Change on 2014/02/24 by pankaj <pankaj@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=62071731",
  "b55dcfa": "Retain metadata caches. Change on 2013/12/17 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=58346122",
  "fee3b3a": "Fill out the nanoproto performance tests. Change on 2013/11/18 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=56836722",
  "a532272": "Adds a fast enumeration implementation to the new TreeSet. Change on 2013/10/18 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=55148219",
  "562d537": "Adds fast enumeration implementations to the new TreeMap. Change on 2013/10/18 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=55145926",
  "c4fda0e": "Upgraded java.util.BitSet to Android version, which is much faster. This found a translation bug with left-shifting signed longs more than 32 bits, so fixed translator to use unsigned longs instead. Change on 2013/10/15 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=54775074",
  "fbb0181": "Adds fast enumeration implementations to HashSet, LinkedHashSet and TreeSet. Change on 2013/10/09 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=54001646",
  "9f48bd1": "Adds fast enumeration implementations for TreeMap. Change on 2013/10/08 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53893741",
  "82452d9": "Adds fast enumeration implementations for TreeMap. Change on 2013/10/02 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53604888",
  "f95943b": "Adds a fast enumeration implementation for LinkedList. Change on 2013/09/30 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53492209",
  "150052a": "Adds fast enumeration implementations for HashMap' and LinkedHashMap's keySet and valuesCollection. Change on 2013/09/27 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53395112",
  "5a8a4f5": "Make IOSClass lookups thread-safe, and improve their performance by using associated objects. Change on 2013/09/25 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53271959",
  "18a9f8d": "Adds a fast enumeration implementation to ArrayList.java. Change on 2013/09/19 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52562736",
  "dfb33b9": "Adds fast enumeration implementations for TreeMap. Change on 2013/10/08 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53893741",
  "0b2d310": "Adds fast enumeration implementations for TreeMap. Change on 2013/10/02 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53604888",
  "426fa3e": "Adds a fast enumeration implementation for LinkedList. Change on 2013/09/30 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53492209",
  "11711f5": "Adds fast enumeration implementations for HashMap' and LinkedHashMap's keySet and valuesCollection. Change on 2013/09/27 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53395112",
  "7473c12": "Make IOSClass lookups thread-safe, and improve their performance by using associated objects. Change on 2013/09/25 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53271959",
  "b97027e": "Adds a fast enumeration implementation to ArrayList.java. Change on 2013/09/19 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52562736",
  "098d71a": "Makes link references weak in the LinkedList iterator to improve performance. Change on 2013/08/30 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51659675",
  "9f74eb7": "Remove deprecations on array access methods as they still provide a clean api for non-translated code where performance is not important. Change on 2013/08/23 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51305316",
  "31520f1": "Speed up reflection by using pointer values instead of strings as the cache key. Change on 2013/08/15 by kstanger <kstanger@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50910989",
  "e6a0ad2": "Replaced NSThread callStackSymbols use with faster backtrace_symbols. Change on 2013/05/23 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47056200",
  "1be7e7e": "Fixed unretained IOSClass singleton cache. Change on 2013/04/30 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45978185",
  "5e72bce": "Integrated Ian Roth's patch for a O(2^N) translator performance bug. Change on 2013/03/01 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43290514",
  "0e61ae5": "Performance optimization in ArrayList.java. In ArrayList ctor, instead of creating two arrays and copying from one to the other, we create one array and copy data into it directly. This has a 3.5% performance boost for tests that use this ctor heavily. Change on 2013/02/25 by iroth <iroth@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43073843",
  "3d5738f": "Added IOSClass cache to fix == incompatibility (Class instances are singletons in Java, and now j2objc). Issue 95. Change on 2013/01/09 by tball <tball@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=40920607",
  "5ec0f5a": "Make nil_chk a 'static inline' function instead of 'static' to improve performance. Change on 2012/11/30 by dvh <dvh@google.com> ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=39500040"
}, "jabref": {
  "14c12b1e": "Merge pull request #9789 from JabRef/dependabot/gradle/com.fasterxml.jackson.datatype-jackson-datatype-jsr310-2.15.0",
  "1b8b4ed3": "Bump com.fasterxml.jackson.datatype:jackson-datatype-jsr310",
  "e0c13e80": "Merge pull request #9790 from JabRef/dependabot/gradle/com.fasterxml.jackson.dataformat-jackson-dataformat-yaml-2.15.0",
  "8b7ec059": "Bump com.fasterxml.jackson.dataformat:jackson-dataformat-yaml",
  "fc09082c": "Bump com.fasterxml.jackson.datatype:jackson-datatype-jsr310 (#9656)",
  "752dc043": "Merge pull request #9637 from JabRef/dependabot/gradle/com.fasterxml.jackson.dataformat-jackson-dataformat-yaml-2.14.2",
  "92f3de39": "Bump com.fasterxml.jackson.dataformat:jackson-dataformat-yaml",
  "1d899b6e": "Add TODO for optimization",
  "569bf0ed": "Remove confusing micro-optimization",
  "dca9f889": "Correction of typos and optimizations",
  "60f5c1b9": "Fix performance regresssion (#9045)",
  "cde21fd2": "Merge pull request #8119 from JabRef/dependabot/gradle/com.fasterxml.jackson.dataformat-jackson-dataformat-yaml-2.13.0",
  "5a1b936d": "Merge pull request #8120 from JabRef/dependabot/gradle/com.fasterxml.jackson.datatype-jackson-datatype-jsr310-2.13.0",
  "0b404e25": "Use new 'cache' property of setup-java",
  "c8949bde": "Added cache and comments",
  "c7d77670": "Improve performance for loading files (#6332)",
  "bc57d22f": "Improve performance massively by fixing a stupid binding mistake (#6316)",
  "5217bade": "Remove cache of auto completion results (#6310)",
  "771af5dc": "Improve performance (#6270)",
  "ce7bb895": "disable fail fast for the moment to let linux and windows build mac errors due to gradle dependecny fetching error",
  "11d15cb8": "activate cache on mac limit has been increased to 5GB",
  "6319d059": "Improve performance by throttling database change events (#5843)",
  "f545ac5a": "Merge pull request #5573 from JabRef/githubcache",
  "f88fc31e": "Improve performance (#5539)",
  "ac7247b8": "snap: Add custom gradle plugin avoid committing python cache to git",
  "2db46d27": "Improve performance and exception handling",
  "ce4f925f": "Improve performance in the entry editor tab by searching for only the given entry",
  "e1dc129c": "Added Validator and some minor optimizations",
  "4b673a02": "Merge pull request #5070 from JabRef/performance",
  "ba56ddeb": "UI Preferences->advanced tab optimization : separators and text modification (#4922)",
  "cb41cf8a": "Do not cache database properties dialog",
  "8baece5a": "Do not cache external file type edit action",
  "15c0a782": "Do not cache bibtex key pattern dialog",
  "cf8e6e64": "add search performance tweak from master",
  "68b37978": "Improve search performance (#3950)",
  "b3c6f0a5": "Improve performance for managing journal abbreviations (#3729)",
  "d29a4ca5": "Update tracis cache config as recommned by the docs (#3575)",
  "12aab7e2": "Add cache for the current search. This is work in progress!",
  "6d2ec481": "Fix preview performance (#3533)",
  "1df1612e": "Fix location bundle with fast access (#3327)",
  "5cc97472": "Improve performance of journal abbreviation loader (#3009)",
  "52b887dd": "Improve performance of entry editor (#2892)",
  "01e85482": "Fix #2852: Improve performance of group filtering.",
  "36d172b2": "Introduce annotaton cache",
  "653c8a98": "define xjc input/ouput dir (subsequent builds will be faster) (#1628)",
  "a24b5444": "Improve group performance (#1520)",
  "f9414da2": "Merge pull request #1118 from tobiasdiez/performance",
  "b39c657c": "Small performance improvements in parser",
  "1c4accb8": "Improve performance of search",
  "9990281e": "Improve performance of db write by reworking FieldContentParser",
  "756be328": "Merge pull request #1100 from JabRef/fast-search",
  "2c8e33f3": "Improve performance of database mode detection",
  "8aabec31": "Merge branch 'master' into fast-search",
  "480dae7f": "Improve performance once again, and a few refactorings as well.",
  "55c3f9e1": "Merge branch 'master' into fast-search",
  "b29ba7f5": "Merge branch 'master' into fast-search",
  "86a14d27": "Refactor BibDatabase and fix performance bug caused by ID lookup",
  "a36921a0": "Fix another performance bug which now allows to load bib databases very quickly (5 sec vs. 60 sec for 40k entries)",
  "6f45a465": "Search is now blazingly fast.",
  "02a86958": "Fix performance bug which caused the UI to slow down extremely.",
  "c4bff8cc": "Add ANTLR3 and ANTLR4 to the dependencies to be cached",
  "f80b0e04": "Use shadowJar instead of the gradle fatJar plugin as this is much faster.",
  "81a4a4f6": "Use List<String> instead of String[] for the cache",
  "8b2821d1": "Remove call to clone and introduce cache to improve saving speed",
  "54a00244": "Enables the cache for all gradle dependencies and the gradle wrapper.",
  "ac6b85d7": "Make SearchRules in group classes more explicit. SearchExpression can now cache the AST internally. SearchGroup simplified as it now just uses the selected searchRule.",
  "048d53d9": "Upgrade gradle and gradlew to 2.4, replace mavenCentral with jcenter for faster and more reliable downloads",
  "3656a49d": "Adds CLI call information as documentation in github for faster access",
  "742d4818": "[intellij] Java6 optimizations using generics etc.",
  "ca090472": "[intellij] converts StringBuffer to faster StringBuilder when used within a single method only.",
  "13d6657e": "Improves FindUnlinkedFiles build.gradle buildres buildSrc CHANGELOG.md codecov.yml config CONTRIBUTING.md crowdin.yml docs eclipse.gradle external-libraries.md flatpak GitVersion.yml gradle gradle.properties gradlew gradlew.bat javafx lib LICENSE.md licenses MAINTAINERS mkdocs.yml mlc_config.json README.md rewrite.yml scripts settings.gradle snap src Obsolotes new search triggered after importing PDFs build.gradle buildres buildSrc CHANGELOG.md codecov.yml config CONTRIBUTING.md crowdin.yml docs eclipse.gradle external-libraries.md flatpak GitVersion.yml gradle gradle.properties gradlew gradlew.bat javafx lib LICENSE.md licenses MAINTAINERS mkdocs.yml mlc_config.json README.md rewrite.yml scripts settings.gradle snap src Removes unnessary thread.sleep. build.gradle buildres buildSrc CHANGELOG.md codecov.yml config CONTRIBUTING.md crowdin.yml docs eclipse.gradle external-libraries.md flatpak GitVersion.yml gradle gradle.properties gradlew gradlew.bat javafx lib LICENSE.md licenses MAINTAINERS mkdocs.yml mlc_config.json README.md rewrite.yml scripts settings.gradle snap src Updates to new jgoodies build.gradle buildres buildSrc CHANGELOG.md codecov.yml config CONTRIBUTING.md crowdin.yml docs eclipse.gradle external-libraries.md flatpak GitVersion.yml gradle gradle.properties gradlew gradlew.bat javafx lib LICENSE.md licenses MAINTAINERS mkdocs.yml mlc_config.json README.md rewrite.yml scripts settings.gradle snap src lookupEntry: Uses JabRef's Util method build.gradle buildres buildSrc CHANGELOG.md codecov.yml config CONTRIBUTING.md crowdin.yml docs eclipse.gradle external-libraries.md flatpak GitVersion.yml gradle gradle.properties gradlew gradlew.bat javafx lib LICENSE.md licenses MAINTAINERS mkdocs.yml mlc_config.json README.md rewrite.yml scripts settings.gradle snap src EntryFromFileCreator: filename shortened at creation. build.gradle buildres buildSrc CHANGELOG.md codecov.yml config CONTRIBUTING.md crowdin.yml docs eclipse.gradle external-libraries.md flatpak GitVersion.yml gradle gradle.properties gradlew gradlew.bat javafx lib LICENSE.md licenses MAINTAINERS mkdocs.yml mlc_config.json README.md rewrite.yml scripts settings.gradle snap src Caching optimizations build.gradle buildres buildSrc CHANGELOG.md codecov.yml config CONTRIBUTING.md crowdin.yml docs eclipse.gradle external-libraries.md flatpak GitVersion.yml gradle gradle.properties gradlew gradlew.bat javafx lib LICENSE.md licenses MAINTAINERS mkdocs.yml mlc_config.json README.md rewrite.yml scripts settings.gradle snap src UnlinkedPDFFileFilter instantiated ones build.gradle buildres buildSrc CHANGELOG.md codecov.yml config CONTRIBUTING.md crowdin.yml docs eclipse.gradle external-libraries.md flatpak GitVersion.yml gradle gradle.properties gradlew gradlew.bat javafx lib LICENSE.md licenses MAINTAINERS mkdocs.yml mlc_config.json README.md rewrite.yml scripts settings.gradle snap src Search result cached",
  "6e721bed": "Small optimization to duplicate check: look into non-required fields only if required fields result in a value close to the duplicate threshold.",
  "6ac9281b": "Added findAssociatedFiles for faster searching related pdfs.",
  "557e3382": "Added progress bar to main window which is available for general use, and utilized it for the slow PDF/PS sync operation.",
  "df823f79": "Added [authorN] from Wolfgang Pauli. Minor experimental change to EntrySorter to improve performance.",
  "f7500339": "new target rebuild (slow) and insert the depend task into the compile target, now build is a 'fast' version",
  "9cad2e78": "removed name cache in globals",
  "bb1d446f": "Added caching of reorganized names, which should have removed a significant bottleneck in performance.",
  "240d7763": "Some optimization for EntryTable and EntryTableModel"
}, "jackson-databind": {
  "9906b13": "#3876 Fix TypeFactory cache performance degradation with `constructSpecializedType` (#3875)",
  "508efeb": "Flush readonly map together with shared on serialization cache flush (#3791)",
  "db9946a": "Fix #3771: avoid Class leak by using class name (not class) as Map key for cache (#3773)",
  "6eacc7b": "remove unused map code from new (2.14) cache impl (#3667)",
  "907cb5a": "Fix #3311: essentially backporting #1994 from 3.0 to establish limits on serializer cache (#3532)",
  "c4a81e8": "another place where fast parser can be used (#3527)",
  "023733e": "check for fast parser flag in more places (#3523)",
  "6351460": "Support fast double parser (#3475)",
  "da8bd5f": "tiny perf optimization (return array builders)",
  "664b869": "fix flaky test com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd#testUpperSnakeCaseTranslations (#3315)",
  "c848b85": "Fix #3099 (minor, but measurable, perf optimization!)",
  "9b4bf2f": "Another optimization (with some promise)",
  "7d6fe9a": "Minor optimization: check `StreamReadCapability.UNTYPED_SCALARS` to allow from-string coercion for XML etc",
  "ecd23e2": "Refactor `java.sql` type related tests under `com.fasterxml.jackson.databind.ext`",
  "e6df267": "Update release notes wrt #2719 (and minor optimization wrt fix)",
  "247c311": "Minor optimization for finding JsonNode bean info",
  "ddf8cfa": "Remove useless cache from BasicClassIntrospector",
  "85e7a39": "Add a method in SimpleMixInResolver for future optimizations",
  "ba2c4a3": "Minor code simplification to remove now-obsolete optimization wrt creators",
  "2698e53": "Tiny optimization",
  "e343916": "Minor simplification of optimization for `JsonNode` reader lookups",
  "3ac8ccc": "Add JDK9 Automatic-Module-Name 'com.fasterxml.jackson.databind'",
  "6498557": "Improve handling of `AnnotatedClass` wrt simple-array optimization",
  "6eb32dc": "minor optimization for case-insensitive enum lookup",
  "1a9058f": "minor optimization for arrayToSet",
  "6a7931c": "Minor fix to non-working earlier optimization for creating ArrayList/HashMap",
  "c426de1": "Add method caching (field, ctors already cached), seems to help a lot too",
  "cbb008c": "Improve lookups for optional Java6 type (DOM, javax.xml) (de)serializers, to reduce performance overhead",
  "4ef5c32": "Try bit of caching to help performance of non-reused-mapper case (mostly for Android)",
  "0438f83": "Minor optimization to avoid re-creating SimpleType instances for java.lang.Object",
  "b28dac3": "Minor improvement to cache int/long/String deserializers, to reduce lookup cost for commonly needed deserializers",
  "88059ce": "... round and round. Remove specialized 1/2/3 property variants, mildy faster",
  "5646c93": "Undo hashCode improvement: while giving better spread, not faster (possibly mildly slower)",
  "003e5b0": "Minor performance tweaking for enum/string resolution for serialization",
  "66e8ac6": "Javadoc improvements: add a note to MapperFeature#CAN_OVERRIDE_ACCESS_MODIFIERS indicating that disabling can have drastic performance consequences.",
  "457caf6": "Minor optimization for TokenBuffer",
  "24a10cc": "small performance optimization",
  "078251b": "Further refinements for cachability handling; nothing with value type deserializer should be cached",
  "8c7f3cd": "Further improve caching, so that all kinds of collection deserializer are cached, as well as 'untyped' (Object) and JsonNode deserializers.",
  "8a5ec37": "Minor optimization to avoid including non-value-returning methods as possible getters",
  "3c950dd": "Minor refactoring of handling of root name, to cache PropertyName",
  "5044e7d": "Update src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
  "aad2175": "minor optimization for tests",
  "3ac5fa9": "change cache key creation to lazy, minor perf improvement",
  "d7ca142": "Minor performance improvement by allowing ObjectReader to pre-fetch root Deserializer",
  "bf355ca": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache"
}, "jacoco": {
  "71f9341": "Update filter for suspending functions with tail call optimization (#1016)",
  "7232b74": "Trac #147: Add performance warning concerning Ant's zipfileset.",
  "21c16d3": "Trac #130: Pre-allocate lines buffer for method (performance).",
  "396ea7e": "Trac #113: Remove HashSet for performance optimization.",
  "f9b1dc9": "Run performance test suite as part of the build.",
  "6083ea3": "Additional, more complex performance test target.",
  "2c3a708": "Initial drop for performance test suite."
}, "jadx": {
  "5aaceee": "fix: cache finally extract checks on multiple paths (#1853)",
  "6912ed4": "feat(gui): save usage data into disk cache",
  "15c9d33": "fix(gui): handle possible classes overlap in disk cache (#1633)",
  "e641b77": "fix(gui): improve search dialog performance",
  "e01ea70": "fix: save classes with code generation error into cache (#1568)",
  "8123120": "fix(gui): reset disk cache on new jadx version",
  "fcd58ae": "fix: remap class names for store in disk cache (#1503)",
  "98c0416": "fix(gui): correct close and reopen for decompiler and cache",
  "1df217c": "fix: save cache dir for reuse on project save/reopen",
  "0606c90": "feat(gui): disk code cache and search rewrite (PR #1483)",
  "ecf2002": "chore: cache current working dir in static field, other minor changes",
  "0ab933e": "perf: cache 'implements' list (heavily used in type inference)",
  "31d5715": "fix: prevent duplicated override annotations and minor optimization (#1188)(PR #1190)",
  "4732fa3": "fix(gui): improve code area performance and line numbers repaint (#1167)",
  "f26032e": "fix(gui): small search dialog optimizations (PR #1143)",
  "19572a6": "fix: improve deobfuscation performance for overridden methods (#1133)",
  "49a82c8": "fix: method info cache error (#868)",
  "489fbb5": "gui: Improve performance of renaming",
  "aad70c7": "perf: cache types in dex nodes",
  "11cee08": "style: use character instead of string, for better performance (PR #503)",
  "82d0d62": "fix: refactor, improve performance and fix some issues in resource processing",
  "7cba2c3": "gui: remove suffix tree search cache",
  "895ddfa": "gui: cache renderer results in find/usage dialogs",
  "b46093b": "core: add method info cache",
  "2d8d416": "core: add cache for JavaNodes, fix definition annotations",
  "0111172": "travis: tune cache options",
  "95afe12": "core: don't cache dex strings (old workaround for bug in dx)",
  "1fe24ad": "travis: cache dependencies"
}, "janusgraph": {
  "698a516": "Fix broken performance test (#3466)",
  "d17f975": "Bump actions/cache from 2 to 3",
  "497fd97": "Bump actions/cache from 2 to 3",
  "d039caa": "Add possibility to invalidate cached indices with indexOnly constraint",
  "7ac198f": "Add possibility to manual db-cache invalidation",
  "a0307ab": "Bump fastutil from 8.5.2 to 8.5.9",
  "625dcca": "Replace Guava caches with Caffeine caches",
  "8199fa0": "Add clear way to disable db-cache per transaction",
  "c30c707": "Replace Guava cache with Caffeine cache for vertex cache",
  "7adbba6": "Report benchmark performance per Pull Request",
  "ac000a4": "Mark cache expiration test as flaky",
  "7604775": "Bump fastutil from 8.5.5 to 8.5.6",
  "f479483": "Make db-cache configuration parameters maskable",
  "4027033": "Bump fastutil from 8.5.2 to 8.5.5",
  "340f6b0": "Properly invalidate stale cached index data",
  "0439610": "Do not trigger iteration on small cache in JanusGraphEdgeVertexStep initialization",
  "0aa13aa": "Merge pull request #2643 from mad/2627-fix-cache-eviction",
  "b6f2eaa": "Break vertices selection loop for properties prefetching when cache size is reached",
  "e7a7dcc": "[docs] Explain cache mechanism in more detail",
  "41dae44": "Add CacheVertex::refresh method to allow clearing vertex cache",
  "5c800c3": "Bump fastutil from 8.4.4 to 8.5.2",
  "bb5daf2": "Refactor transaction-wise index query cache",
  "b6a0f20": "Bump fastutil from 6.5.7 to 8.4.4",
  "39ac149": "Fix cached relation update hashcode change bug",
  "ac97c6f": "Reorganize optimization strategies (#2202)",
  "4a99a8d": "Fix wrong example in index-performance.md [doc only]",
  "0f7af8d": "Apply optimizations to queries to make use of adjacent ids",
  "e257408": "Merge pull request #1926 from gguttikonda/improve_cql_iterator_performance",
  "45822dc": "APACHE-2.0.txt AUTHORS.txt BUILDING.md cassandra-hadoop-util CC-BY-4.0.txt CODE_OF_CONDUCT.md CONTRIBUTING.md CONTRIBUTORS.txt DCO.txt docs docs.Dockerfile janusgraph-all janusgraph-backend-testutils janusgraph-benchmark janusgraph-berkeleyje janusgraph-bigtable janusgraph-core janusgraph-cql janusgraph-dist janusgraph-doc janusgraph-driver janusgraph-es janusgraph-examples janusgraph-grpc janusgraph-hadoop janusgraph-hbase janusgraph-inmemory janusgraph-lucene janusgraph-mixed-index-utils janusgraph.png janusgraph-scylla janusgraph-server janusgraph-solr janusgraph-test KEYS LICENSE.txt mkdocs.yml NOTICE.txt pom.xml README.md RELEASING.md requirements.txt scylla-hadoop-util SECURITY.md TESTING.md Improve the CQLIterator performance by using getPagingStateUnsafe ( this should avoid md5sum calculation of resultset)",
  "b59796c": "Merge pull request #1732 from mad/berkeleydb-shared-cache",
  "c1540da": "Use shared cache by default for berkeleydb",
  "2fef1b4": "Pin deleted vertices to guava volatile cache map",
  "8321c11": "external-locking configuration parameter is added which allows to disable build-in locking mechanism in JanusGraph for the case when locking is already provided by the application. This allows to improve performance of underlying storage (Cassandra in our case) and doesn't make it perform redundant read-before-write operation for each column participated in transaction.",
  "bf9b454": "Fix adjacent optimization for detached vertices",
  "50ea163": "Enable multiQuery optimization traversal parent steps #1044",
  "2cc4276": "Document graph cache and bindings for JG clusters",
  "9071f9c": "Merge pull request #897 from dpitera/graph-cache-evictions",
  "8cbe871": "Evict graph from cache upon config changes",
  "b7fd903": "Revert 'Document graph cache and bindings for JG clusters'",
  "ece2a78": "Document graph cache and bindings for JG clusters",
  "8dcd91c": "Issue #855: hasId optimization updates broke TinkerPop g_V_hasIdX1X_hasIdX2X process test",
  "67a7f4d": "Check if vertex tx open on cache removal",
  "e741dce": "Merge pull request #384 from sjudeng/cql-performance",
  "f1aa119": "Merge pull request #355 from rafatuita/fast-property",
  "60766bb": "Adding query optimization time to profile",
  "ea08312": "Titan strategies are not vendor optimizations.",
  "3c2ccad": "registered more classes in AbsatractTitanGraphProvider as stuff was being cached. @spmallette -- this is so crazy and error prone. Is there a way around having to do this?",
  "c1d5dbd": "Added strategy that checks that IDs are supplied in the correct type and are not mixed within one query. Also make in memory graph fast by reducing id allocation wait to zero. https://github.com/thinkaurelius/titan/issues/1080",
  "7344c33": "Disable transaction cache for compute https://github.com/thinkaurelius/titan/issues/1031",
  "168fb44": "Add a new config option for waitSearcher that defaults to false. Allows unit tests to run without race conditions and other users to run a maximum performance.",
  "867fb39": "Introduces overwrite semantics for vertex properties. If a new property is added with cardinality single or set then it overwrites any existing ones without throwing an exception. If possible, it will try to avoid reading existing properties from the backend for better performance. Fixes #938.",
  "6deeea7": "Use TermsFilter for lucene test queries. This should be faster and also fixes the unit tests. Revert the default property cardinality to single.",
  "eba374e": "Only apply cache.tx-cache-size min on r/w tx",
  "a97710d": "Put a min of 100 on cache.tx-cache-size",
  "9655018": "Disable cache on correct tx for schema reads",
  "10454c3": "Add SolrIndex to reflective opt loader fast path",
  "f991580": "Implementing TP3 optimization strategies",
  "8889a15": "Added method getVertices(long.. ids) to retrieve multiple vertices at once with better performance and usability than retrieving them individually. Fixes #575",
  "4ba83ee": "titan-dist pom optimization",
  "5f615ee": "Added additional test coverage and made caching configurable on a per transaction basis so that schema retrieval operations can bypass the cache and cache eviction works as desired.",
  "09c5af1": "Disabled for now: test case for edge TTL constrained by vertex TTL where db-cache=true",
  "a31802d": "Add tx vertex cache size regression test",
  "a0b3fc2": "Fix cached_classpath generation for `mvn package`",
  "5de7451": "Keep all modified vertices in cache, not just those with added relations, so that we can keep track of vertex lifecycle states.",
  "7484589": "disabled test (for now) since its only performance related (move into corresponding profile)",
  "c976669": "Minor optimization by checking whether a store multi query is actually needed.",
  "fd77d82": "Refactored cache in KCVS, implemented new typecache, instrumented both with Metrics, updated test cases accordingly, and a lot of other minor refactoring changes.",
  "c05edc0": "Refactored cache in KCVS, implemented new typecache",
  "6c2c2c9": "Using reuseIterator in SimpleVerteyxQueryProcessor and IndexSerializer for better performance. BUILDS BUT NOT TESTED!",
  "e50826b": "Merge branch 'fix-for-performance' of github.com:mpouttuclarke/titan into mpouttuclarke-fix-for-performance",
  "6bcb26f": "added TitanHBase testing with Faunus -- very slow and requires HBase is running. Now two integration test flags -- skipCassandra and skipHBase.",
  "66cdb1c": "Added test case to investigate warm up query performance.",
  "6576a7a": "Set cache concurrency to available processors",
  "ca48986": "use Guava cache in RelationQueryCache",
  "a1870b3": "improved database level cache sizing",
  "ee21e37": "updated cache configuration for non-embedded local configuration to use 3 minute timeout.",
  "1a19b02": "Updated configuration files to enable cache by default",
  "10a0e03": "Added a concurrent update test for db level cache.",
  "1887ef9": "Improved database cache test coverage",
  "7311776": "Better size estimation for cache",
  "eb38250": "Tweaks to performance test surefire config",
  "9b59abf": "Reverted back to Guava cache which is slightly slower but better behaved since it does not require a separate cleanup thread.",
  "e9f4a13": "relaxed performance test case requirement to not fail on outliers.",
  "a39c3cb": "Implemented a database level storage cache for Titan that significantly increases warm cache performance. Added tests for the cache.",
  "e0c5f71": "Use simple hashmap for caching in CacheVertex and made sure all access to it is synchronized. This a single vertex in a single transaction it not contended a lot, this should be a lot more space and memory efficient than a heavy Guava cache. In the future, we should investigate how to release memory heuristically on such this 'cache'.",
  "d0fb48f": "Modify cache store adapter for locking",
  "86bc51a": "Added metric and cache hit based test cases to ensure that the correct number of storage backend retrievals are happening. Removed query limit check for static query caching. Fixes #479. Made hashcode for SliceQuery children based on HashCodeBuilder.",
  "28f1f56": "Added vertex centric index handling to SimpleVertexQueryProcessor for further performance improvements.",
  "51f9ca3": "Performance optimization by introducing SimpleVertexQueryProcessor that can handle the most common queries more efficiently.",
  "881248f": "Tweaks and fixes to Infinispan cache & manager",
  "763aada": "Merge branch 'fix-for-performance' into infinispan",
  "0fec266": "Merge branch 'fix-for-performance'",
  "820f683": "Tweak memory/performance test profile activation",
  "63cda81": "Merge branch 'fix-for-performance' into infinispan",
  "13dd48a": "fix VertexLRUCache get to actually cache non-existing vertices",
  "0b82db1": "Merge branch 'fix-for-performance' of github.com:thinkaurelius/titan into fix-for-performance",
  "4453864": "1) Added subsumption test to CacheVertex so that more restrictive queries can be answered from cache. 2) Renamed ImmutableLongObjectMap to RelationCache 3) Fixed ByteBufferUtilTest by using signum",
  "452a229": "replace guava cache in LRUVertexCache with Solr based CLRUCache backed by NonBlockingHashMapLong",
  "04edd7f": "Merge branch 'master' into fix-for-performance",
  "c761721": "titan-core performance improvements",
  "9692b2e": "Reduce default cache size of CachedKeyColumnValueStore to 1000.",
  "6bd2ad3": "Implements a property prefetching configuration option that will instruct transaction to load all properties on a vertex when a property is first looked up on the vertex. This leads to much better latencies on multiple vertex lookups against high latency storage backends and is hence enabled by default for distributed storage backends. Added performance test cases to validate its behavior and test performance. Closes #145",
  "ad6c72e": "Change hazelcast config from kcvs to cache",
  "b6c4402": "Extended performance test coverage for benchmarking read heavy transactions (i.e. traversals only).",
  "0db4efc": "Make mvn -Pperformance-test run MemoryTests",
  "41d3fad": "Better GraphQuery execution to take advantage of multiple indexes covering a single index. This takes care of the performance aspect of #373.",
  "b16a34e": "Renaming Groovy-based performance test",
  "fa7b919": "Refactored MultiQuery performance tests",
  "639d431": "Added TransactionBuilder interface which gives the user the ability to configure transactions prior to opening them and thereby controlling performance and consistency checking aspects of the transaction on a per transaction basis. Use TitanGraph.buildTransaction() for that. One aspect TransactionBuilder lets you control is whether a TitanTransaction should verify the existence of all vertices internally. Since this is expensive, its disabled by default but can selectively be enabled via TransactionBuilder in the face of data degradation on eventually consistent storage backends. Fixes #363. Fixes #214.",
  "7d69240": "Fixes #335 by way of introducing an LRU VertexCache. Added configuration option tx-cache-size to make its size configurable on a per transaction basis. Greatly refactored the PerformanceTest Case to verify that the LRU cache indeed solves the running out of memory problem as well as test for other memory leaks.",
  "69ce5e9": "Merge branch 'performance-test-rewrite'",
  "e73afae": "Moved performance test tuning into JUBProvider",
  "eef1dd2": "Merge branch 'master' into performance-test-rewrite",
  "d2673ff": "add KeyColumnValueTest for HazelcastKeyColumnValueStore (+ performance improvements)",
  "702f289": "Serial performance test refactoring",
  "746dfde": "delete titan-ehcache module",
  "5bc3cf6": "Initial rewrite of singlethreaded performance tests",
  "22500d4": "Merge branch 'performance-test'",
  "66a3912": "Reenabling performance and concurrent JUB tests",
  "f54f1be": "Finished query optimization and execution refactoring. NOT YET TESTED.",
  "3f689bb": "Temporary performance testing changes",
  "063f0a1": "Changed the storage format to: 1) Make it faster to read relation information without having to read properties of the relation (i.e. header only) by writing the relation and vertexDiffId backward 2) Moving the value for properties into the value part of the entry to allow longer properties than 2^15 byte.",
  "283366d": "Merge remote-tracking branch 'origin/master' into performance-test",
  "4726e73": "BlueprintsMapOutputReduce has been generalized to support arbitrary definitions of uniqueness using Gremlin/Groovy distributed-cache style scripting. Bam.",
  "90c88bf": "BlueprintsMapOutputReduce has been generalized to support arbitrary definitions of uniqueness using Gremlin/Groovy distributed-cache style scripting. Bam.",
  "a49e69e": "Simple performance benchmark implementation",
  "08940fc": "Reapply bugfix/optimization changes",
  "45a1fb8": "excluding the performance and concurrence tests from the default test suite",
  "6517555": "Improved performance of in memory key column value store by a factor of 3-5",
  "838fc7d": "disabling the exchange cache, it was causing the concurrent tests to fail",
  "0d0aede": "cleaning up some of the persistit performance notes",
  "35420a4": "Improve performance of Persistit adapter for Titan",
  "61fce12": "more memory mapper optimizations.",
  "57b7214": "more memory mapper optimizations.",
  "eedfe35": "more memory mapper optimizations.",
  "8c83e21": "migrated the optimized GremlinScriptEngine from TinkerPop Gremlin to FaunusGremlinScriptEngine. Much better performance as import is not callled on ever evaluation.",
  "a6ee345": "Playing with performance test",
  "5fafe91": "added simple performance test for key column value store",
  "da8901b": "refactored ID acquisition to make it more robust and faster. Added test cases to test multi-threaded id acquisition through two different storage manager instances.",
  "d2b1ccc": "founds some optimizations, cleanups, and made CountMapReduce emit a long -- and use a NullWritable key.",
  "4159a77": "more optimizations to combiners.",
  "87e8af7": "vearious Writable optimizations in mapreduce classes. Fixed a counting bug in SideEffectMap.",
  "fa47b09": "optimization to CommitVerticesMapReduce and small pathEnabled() tweaks -- getting ready for the biggy.",
  "b111301": "Uses a fixed key length of 8 for the BerkeleyJE adapter which improves performance.",
  "f8e8eca": "Moved test cases opening the database 100 times to performance since it takes quite a while.",
  "f4d8e06": "added optimization around static final Strings for edge labels to have the same in-memory reference.",
  "9296324": "added optimization around static final Strings for edge labels to have the same in-memory reference.",
  "70ff988": "added more new() optimizations and added new logo for documentation.",
  "26fadd4": "memory and speed optimization in various operators.",
  "f27f876": "memory optimization to Transpose and more testss in TransposeTest. Added a stub for EdgeDirectionFilter.",
  "43b6a1e": "trivival nick nack syntax optimizations to FaunusElement.",
  "ff4c4b8": "performance test exclusion in pom.xml"
}, "Java": {
  "": ""
}, "Java8InAction": {
  "": ""
}, "java8-tutorial": {
  "": ""
}, "java-algorithms-implementation": {
  "8d1770c": "More improvements in the probing hashmap performance",
  "fd62d7b": "Updates to HashMap to help with performance",
  "1c96e35": "Tree updates to improve performance",
  "c2e37cf": "Streamlined some tree code in an effort to improve performance",
  "95eeedb": "Fixed a bug in interval tree #9 premature optimization kills me again",
  "8b6bea6": "Found the issue with Skip List add performance!",
  "bd1b69a": "Missed a minor optimization in the PatriciaTrie",
  "fe53b66": "Caught a bug in the heap array optimization",
  "0d5241b": "More optimizations for the array based structures",
  "486c3da": "Changed back to Arrays.copy because it seems to have better performance",
  "11cc75e": "Favoring System.arraycopy over Arrays.copyOf for performance",
  "54b0652": "Favoring System.arraycopy over Arrays.copyOf for performance",
  "779948a": "Updated the testing code to detect duplicates faster",
  "6b40993": "Augmented the Dynamic Segment Tree for faster range queries",
  "48d51cd": "A little optimization for the BTree remove code",
  "591ec8f": "More Skip List optimizations",
  "2d61529": "More skip list optimizations",
  "5ac04d3": "Added some optimizations",
  "d530e84": "Added a couple of comments for performance"
}, "javacpp": {
  "0e07735": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Add 'org.bytedeco.javacpp.cacheLibraries' system property to disable cache for libraries (pull bytedeco/gradle-javacpp#21)",
  "ecf562e": "Add missing cache entry for Maven on Travis CI",
  "a7144ce": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Accelerate `Loader.extractResource()` for directories already cached, also preventing failures (issue #197)",
  "f7d2a61": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Fix `Loader.cacheResource()` with the 'jrt' protocol as used by jlink (pull #305)",
  "7ed4191": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Synchronize `Loader.cacheResources()` on `Runtime` to avoid `OverlappingFileLockException` with multiple class loaders (issue bytedeco/javacpp-presets#650)",
  "572500b": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Enhance `Loader.cacheResource()` with support for HTTP connections",
  "00cd483": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Allow `Builder` to create links for resource libraries even when no Java classes are built CHANGELOG.md LICENSE.txt platform pom.xml README.md src Fix `Loader.cacheResource()` creating a subdirectory named 'null' when caching a top-level file",
  "1797745": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Prevent race condition that could occur in `Loader.cacheResource()` (pull #188)",
  "93ccf7f": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Let users bundle arbitrary resources, have them extracted in cache, and used as `include` or `link` paths (pull #43)",
  "d7d6af2": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Add new 'org.bytedeco.javacpp.cachedir.nosubdir' system property to restore old behavior (issue #167)",
  "de43b82": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Fix broken `outputDirectory` property and corresponding `-d` command line option (issue #153) CHANGELOG.md LICENSE.txt platform pom.xml README.md src Add `Loader.extractResources()` and `cacheResources()` methods to extract or cache all resources with given name",
  "076fd04": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Make `Loader` cache libraries (in `~/.javacpp/cache/` by default) instead of using temporary files",
  "d49be20": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Include new `platform.compiler.debug` options inside the default properties file (pull #90) CHANGELOG.md LICENSE.txt platform pom.xml README.md src Always use the `platform.compiler.default` options unless `@Platform(compiler='!default', ...)` is specified CHANGELOG.md LICENSE.txt platform pom.xml README.md src Move optimization options from `platform.compiler.output` to `platform.compiler.default`, allowing users to override",
  "1aadbcc": "arm6 flags and fastfpu for arm7",
  "e4208cc": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Improve the performance of `BytePointer.getString()` by using `strlen()`",
  "fd663f1": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Add new 'org.bytedeco.javacpp.cachedir' system property to specify where to extract and leave native libraries to share across multiple JVM instances",
  "9922f74": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Fix `Generator` performance issue on classes with a lot of methods (issue bytedeco/javacpp-presets#36)",
  "d0093ee": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src Add slow but generic `Indexer.putDouble()` to complement existing `Indexer.getDouble()` (useful for testing)",
  "5c5a58a": "CHANGELOG.md LICENSE.txt platform pom.xml README.md src New `@NoException` annotation to reduce the size of generated code and optimize runtime performance of functions that are guaranteed not to throw exceptions, or for cases when we do not mind that the JVM may crash and burn CHANGELOG.md LICENSE.txt platform pom.xml README.md src Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue #19) CHANGELOG.md LICENSE.txt platform pom.xml README.md src Fixed regression where the `@Adapter` notation generates incorrect code for types other than `Pointer` (issue #20)"
}, "javacv": {
  "6ae006a": "CHANGELOG.md LICENSE.txt platform pom.xml README.md samples src Add `FFmpegFrameGrabber(InputStream, int)` constructor to set the maximum cache size used for seeking",
  "ae13613": "speed optimization on convert(Frame):Bitmap",
  "c6dc8bc": "CHANGELOG.md LICENSE.txt platform pom.xml README.md samples src Let users call `FFmpegFrameFilter.push(null)` to indicate EOF, as required by some filters like 'palettegen' (issue #287) CHANGELOG.md LICENSE.txt platform pom.xml README.md samples src Call `cvHaarDetectObjects()` with `CV_HAAR_FIND_BIGGEST_OBJECT | CV_HAAR_DO_ROUGH_SEARCH` instead of `CV_HAAR_DO_CANNY_PRUNING` in the face detection samples to get acceptable performance with OpenCV 3.0 (issue #272)"
}, "java-developer-roadmap": {
  "": ""
}, "JavaEETest": {
  "": ""
}, "java-eight-part": {
  "": ""
}, "java-faker": {
  "06ece70": "Merge pull request #374 from DiUS/performance",
  "c51f0ef": "remove shuffle and replace with random index call to improve performance"
}, "java-jwt": {
  "9024318": "Improve JWT parse / decode performance (#620)",
  "c8d0ba9": "Bump `com.fasterxml.jackson.core:jackson-databind` to 2.13.4.2 (#630)",
  "ba902e9": "Merge pull request #198 from inventage/improve-performance"
}, "java-learning": {
  "": ""
}, "javaparser": {
  "eaad372": "explicit use asString for performance",
  "b457603": "Add InMemoryCache in CombinedTypeSolver as a default cache",
  "3b123f2": "Merge pull request #3525 from javaparser/dependabot/github_actions/actions/cache-3",
  "910c4b7": "Merge branch 'master' into dependabot/github_actions/actions/cache-3",
  "64d69e7": "Bump actions/cache from 2.1.7 to 3",
  "db2fbd4": "chore(deps): update actions/cache action to v2.1.7",
  "bbe6de9": "Merge pull request #3343 from 4everTheOne/type-solver-cache",
  "9c4f9ef": "Merge branch 'master' into type-solver-cache",
  "d66abee": "Updated CombinedTypeSolver to support the cache of symbols",
  "e9cd496": "Updated JavaParserTypeSolver to support parametrized cache",
  "ca71b3f": "Added cache that wraps Guava Cache",
  "3ecdf53": "Added a in-memory cache implementation",
  "38a318b": "Added a no-cache implementation",
  "f1d7028": "chore(deps): update actions/cache action to v2.1.6",
  "56f6a97": "Merge pull request #3185 from Col-E/fix/3181_optimization",
  "dc4c7b8": "Merge branch 'master' into fix/3181_optimization",
  "8944db4": "Merge branch 'master' into fix/3181_optimization",
  "2713dff": "Revert 'Use List instead of Set to avoid slow hashCode calculations on big Nodes'",
  "853048d": "Revert 'Use List instead of Set to avoid slow hashCode calculations on big Nodes'",
  "530fc9e": "Use List instead of Set to avoid slow hashCode calculations on big Nodes",
  "06495fa": "Use List instead of Set to avoid slow hashCode calculations on big Nodes",
  "91aad3c": "Avoid using the slow String.format(...) method and use SimpleName#getId() instead of the slow toString()",
  "7a8796f": "chore(deps): update actions/cache action to v2.1.5",
  "79b73b0": "Merge branch 'master' into fix/3181_optimization",
  "2d5ab86": "Added cache for known types to speed up solving process",
  "4f28635": "Further improve optimization from changes in #3072",
  "7850ebe": "Removed import optimization from unedited files",
  "fb2321c": "Removed import optimization from unedited files",
  "9d75a2e": "Minor performance improvement on getCanonicalName method call",
  "05b6ac5": "Merge pull request #3070 from javaparser/dependabot/github_actions/actions/cache-v2.1.4",
  "0640700": "Bump actions/cache from v2 to v2.1.4",
  "fef5521": "Remove the PhantomNodeLogic that generates memory issues when LexicalPreservingPrinter is used. Phantom node is now an attribut of each node. This is an optimization of the JP memory usage.",
  "7b24d76": "Manage memory on test suite (clear internal cache to release memory)",
  "382acb5": "Partial revert to keep the original performance",
  "ba818bf": "Added cache size configuration to JavaParserTypeSolver",
  "b7d20da": "Merge pull request #2516 from quanturium/fix-cache",
  "4c284e8": "Merge pull request #1900 from matozoid/test_performance_tweak",
  "e3f98db": "Merge branch 'master' into test_performance_tweak",
  "97fbfdd": "Merge branch 'master' into test_performance_tweak",
  "26f0db8": "enable slow tests on Travis",
  "9c35b2a": "add profile to run slow tests and reduce Category usages",
  "df3dcb6": "marking some tests as slow tests",
  "59942de": "Merge pull request #1323 from sergerrr/fast-lexical-printer",
  "cae5236": "Make global cache thread safe",
  "5b6aa3c": "Cache the newline split pattern for performance reasons",
  "189a39c": "Merge pull request #291 from javaparser/improve_JavaParserTypeSolver_performance",
  "70c124d": "Merge pull request #1026 from arturbosch/sourceprinter-performance",
  "ecddaa4": "issue124: following cal101 suggestions we implemented a cache for determining which nodes are phantomnodes",
  "84bfde2": "Added a type cache to the JavaParserTypeSolver and checks to JavaParserClassDeclaration to fix issue #144",
  "066dd30": "Revert optimization that caused concurrency issues",
  "9055ed9": "issue73: cache parse java files in JavaSymbolSolver",
  "627b563": "introduce cache in JavaParserFacade",
  "a27c8a8": "Improve performance by not keeping all comment tokens in memory"
}, "javapoet": {
  "f24801f": "Fail fast with null AnnotationSpec on type.",
  "c248d40": "Merge pull request #529 from cconroy/named-faster",
  "2e61386": "optimize TypeName#toString() with cache",
  "cdc51fd": "specialize CodeWriter#emit(String) for optimization",
  "fae2776": "Merge pull request #147 from square/jw/travis-cache"
}, "javassist": {
  "b4279f6": "Replace StringBuffer with StringBuilder and other minor String optimizations",
  "7279bda": "Fix a bottleneck. If the jar entries is big, List.contains is O(n) and very slow!",
  "eb36a2f": "performance tuning",
  "5a38e85": "performance tuning",
  "90a63c7": "for performance tuning",
  "829a336": "for performance tuning",
  "702704c": "fixed potential strong cyclic reference from proxy cache entries back to their class loader -- fixes JASSIST-104",
  "50da9b9": "fixed a performance bug caused by many calls to CtBehavior#setBody()",
  "3ddcbaa": "Add performance info",
  "4237ad1": "JIRA JASSIST-28 (including a performance bug) has been fixed.",
  "eb12cc5": "updated CtMember.append() for better performance.",
  "0446eb7": "improved the performance of Bytecode and ConstPool. Added clone() to Bytecode.",
  "b253884": "added detach() in CtClass, which is necessary so that some people who deal with a large number of classes can get better performance.",
  "c86c20c": "performance tuning.",
  "17ac0d8": "edited for improving runtime performance.",
  "2d7afcd": "get0 should look in cached classes first as code extending ClassPool behavior may use different mechanism than parent/child.",
  "d0add86": "Improved the performance of $proceed when it represents a static method. This change does not make any difference on WindowsXP but on Solaris/SPARC."
}, "java-tron": {
  "2a7f5aab": "Merge pull request #4994 from 317787106/hotfix/fastforward",
  "9e086c75": "add fastForwardNode to activeNodes only if not exist",
  "b41826f4": "fix(net):fix the issue of fast forwarding service",
  "f99e9a6f": "feat(freezeV2): delegate resource account index cache",
  "8f78620a": "Merge pull request #4815 from tronprotocol/fix/cache_store",
  "e54c324a": "Merge pull request #4740 from halibobo1205/feat/second_cache",
  "31bb4d4b": "fix(db): remove trans-cache from checkpoint",
  "5758b660": "feat(db): improve performance for getting transaction hash",
  "74ec8167": "feat(db): improve performance for db query",
  "217469db": "feat(block): improve performance for transaction packing",
  "5ac7f0c9": "feat(delegate): add test for delegate optimization",
  "02782349": "perf(net): optimize the k-bucket data structure to improve performance",
  "f5d9e313": "Merge pull request #4581 from tronprotocol/feature/txcache_config",
  "f53fee84": "feat(tx-cache): change the default value of the txCache.estimatedTransactions param.",
  "40b250cb": "fix(tx-cache): fix lite node init error.",
  "77fb40fe": "perf(net): configurable block cache validity period",
  "63bb0183": "Merge pull request #4538 from tronprotocol/feature/tx_cache",
  "7d171727": "refactor(tx-cache): limit param estimatedBlockTransactions",
  "8198fb94": "refactor(tx-cache): add volatile to increase multi-threaded safety",
  "e0be5999": "refactor(tx-cache): recover partial transaction db for light nodes",
  "8f3410da": "refactor(tx-cache): add log information and modify default parameters",
  "2b7db1b7": "refactor(tx-cache): use Bloom filters to refactor txCacheDB to reduce memory usage",
  "80f04d88": "Merge pull request #4508 from halibobo1205/feature/optimization_readme",
  "2f20cf36": "Merge pull request #4387 from tronprotocol/feature/generate_block_optimization",
  "7866be8d": "fix(vm,api): fix constant trigger smart contract over pre cache",
  "9b508c1d": "Merge pull request #4431 from wubin01/cache_set",
  "e7e0bca4": "perf: set the block cache to be valid for one hour",
  "3089df94": "Merge pull request #4405 from tronprotocol/hotfix/fastjson",
  "64396866": "Merge pull request #4393 from tronprotocol/hotfix/fastjson",
  "e086266e": "dependency: upgrade for security. 1. fastjson: 1.2.70 -> 1.2.83 2. enable SafeMode",
  "222baf47": "Merge pull request #4380 from yanghang8612/feature/revert_contract_cache",
  "0e33a0f9": "fix(vm): revert contract cache",
  "c08a41e5": "Merge pull request #4375 from tronprotocol/feature/vm_performance_improvement",
  "d1eafe41": "Merge branch 'release_v4.5.0' into feature/vm_performance_improvement",
  "d2110c47": "feat(metrics): fix `trans-cache` db metric.",
  "6237a138": "Merge pull request #4319 from wubin01/opt_cache_load",
  "1317da53": "Merge remote-tracking branch 'origin/feature/vm_performance_improvement' into feature/vm_performance_improvement",
  "f4597703": "Merge branch 'feature/vm_performance_improvement' of github.com:tronprotocol/java-tron into feature/vm_performance_improvement",
  "5242b488": "Merge branch 'feature/vm_performance_improvement' of github.com:tronprotocol/java-tron into feature/vm_performance_improvement",
  "b57ea15e": "perf(tvm): reduce serialization/deserialization for cache in VM Repository",
  "b99c3417": "change : change lrucachesize default value",
  "acda14f9": "change : add programPreCompile lru cache",
  "ec41673f": "change : add parameter to set lru cache size",
  "6690a73d": "perf(trx-cache): add update recent transaction cache test",
  "b2825bc0": "perf(trx-cache): solve the sonar problem and remove test info",
  "02058f79": "gc perf: optimize transaction cache loading logic",
  "20669893": "add lru cache of contract and code",
  "050fc5c7": "Merge pull request #4250 from forfreeday/peer_cache",
  "4192f5b5": "Optimized network message broadcast caching 1. adjusting the broadcast cache pool size",
  "d03c5b62": "optimization block message check logic",
  "0f305d53": "Merge pull request #4018 from halibobo1205/db/adjust-write-cache",
  "c2cef773": "add expire time for txs cache",
  "c8095358": "Merge pull request #3947 from forfreeday/feature/asset_optimization_merge",
  "5da03eb8": "Merge pull request #3946 from forfreeday/feature/asset_optimization_merge",
  "5440f035": "Merge pull request #3937 from forfreeday/feature/asset_optimization_merge",
  "439237e9": "tools dbconvert optimization",
  "3c3fd83c": "Merge pull request #3906 from forfreeday/feature/asset_optimization_merge",
  "f41a34a0": "Merge branch 'release_v4.3.0' of github.com:tronprotocol/java-tron into feature/asset_optimization_merge",
  "c6e96176": "Merge pull request #3916 from forfreeday/feature/optimization_precompiled",
  "b16ca26a": "add enabled asset optimization proposal function",
  "f2849781": "Merge pull request #3907 from halibobo1205/db/close_init_trx_cache",
  "1f8521e0": "Merge remote-tracking branch 'upstream/release_v4.3.0' into feature/asset_optimization_merge",
  "422548ea": "Merge pull request #3874 from forfreeday/feature/optimization_processTransaction",
  "330d45ab": "bug: check if abi moved out and abi exist while commit contract cache",
  "a8363d1b": "Merge pull request #3830 from forfreeday/feature/optimization_processBlock",
  "200f18ac": "Merge pull request #3827 from forfreeday/feature/optimization_processBlock",
  "36b4ca01": "Merge pull request #3799 from forfreeday/memory_optimization",
  "35879641": "memory optimization",
  "2189bdd1": "add account asset optimization proposal",
  "a6c40dc8": "add account asset optimization proposal",
  "27da14c7": "add account asset optimization proposal",
  "cd0cf950": "add account asset optimization proposal",
  "ed803477": "add account asset optimization proposal",
  "b1e49052": "add account asset optimization proposal",
  "a3abe13e": "add account asset optimization proposal",
  "a4db5cbb": "Merge branch 'release_v4.2' of github.com:tronprotocol/java-tron into feature/asset_optimization",
  "82b5e348": "optimization AccountCapsule",
  "01186c65": "optimization AccountCapsule",
  "8fc075ba": "bug: fix method code exceed 8000 causing performance down",
  "f80c50a4": "Merge branch 'release_v4.2' of github.com:tronprotocol/java-tron into feature/asset_optimization",
  "07f4ad05": "feature: add methods to operate total energy in cache",
  "2fb76320": "feature: add methods and caches to operate resource delegation",
  "c38401af": "fix security issues 1.modify jackson-databind version 2.modify fastjson version",
  "88951884": "Merge pull request #3565 from tronprotocol/bugfix_solidity_performance_problem",
  "3ed58bd7": "Merge pull request #3460 from EleanoraJo/if_optimization",
  "4d4fe0aa": "optimization get market interface",
  "940c25c5": "Merge pull request #3370 from EleanoraJo/code_optimization",
  "c4245c30": "code optimization and sonar solution",
  "78c34648": "Merge pull request #3160 from paoerpaul/optimization_http_if",
  "75408eb5": "optimization getTransaction http interface",
  "ec469d98": "code optimization and sonar repair",
  "d8efef00": "Optimize calculation performance",
  "56b9f2a8": "Optimize calculation performance for market",
  "c0552ab4": "code reformat & GetAssetIssueListByNameServlet optimization",
  "6e8fb0f9": "Merge pull request #2756 from gregary01/optimization_node_reputation",
  "0d0ea179": "optimization of node reputation",
  "92306183": "code optimization and checkstyle solve",
  "775a15fc": "Merge pull request #2651 from tronprotocol/code_optimization",
  "0b948ebb": "code optimization",
  "5c56fb36": "solve handle block exception & code optimization",
  "9c960cf6": "Merge pull request #2605 from tronprotocol/code_optimization01",
  "7e329b93": "optimization code",
  "aa26167a": "Merge pull request #2594 from tronprotocol/code_optimization",
  "8de9ac4b": "code optimization",
  "6a8cb667": "code optimization",
  "ad4cf0ed": "optimization if statement",
  "b0e9b2de": "Merge pull request #2531 from tronprotocol/optimization_transaction_dev",
  "2aafb701": "Merge branch 'feature/multi_module' into optimization_transaction_dev",
  "22b09afb": "optimization transaction model",
  "a1916be3": "optimization transaction model",
  "00537f08": "Merge pull request #2473 from tronprotocol/fastjson-update",
  "466991aa": "fastjson update",
  "4315d8da": "Merge pull request #2467 from tronprotocol/p2p_optimization",
  "88203177": "code and log optimization",
  "667c61fd": "Add multivalisign performance test case",
  "eb416f1e": "modify fastnode config",
  "4e85f59a": "modify fastnode process block",
  "dcbe0503": "optimizing the logic of fast forward node",
  "b291028f": "Merge pull request #2291 from tronprotocol/fast_forward",
  "8ee72537": "modify fastForward logic",
  "184fe50d": "modify fastForward logic",
  "33faedd5": "modify fastForward logic",
  "f38801a4": "Merge pull request #2286 from tronprotocol/fast_forward",
  "e273b3a3": "add fastforwad node note",
  "0e5e378e": "Merge pull request #2269 from tronprotocol/fast_forward",
  "19bab744": "modify fast forward schedule function",
  "a399ba35": "optimization fast forward function",
  "f8701c9c": "16 test case for shieldedtransaction and 4 optimization.",
  "9761556c": "broadcasting transaction optimization",
  "99b8a6d3": "Merge pull request #2144 from tronprotocol/fast_forward_for_block",
  "060a625d": "Merge branch 'develop' of https://github.com/tronprotocol/java-tron into fast_forward_for_block",
  "379a619c": "Merge branch 'develop' of https://github.com/tronprotocol/java-tron into fast_forward_for_block",
  "f2a3edd9": "nodemanage add fast forward logic",
  "35eb3048": "Merge pull request #2117 from tronprotocol/fast-sync-use-cpdb",
  "9659aafa": "optimization code",
  "7d5929d3": "Merge branch 'develop' of https://github.com/tronprotocol/java-tron into fast_forward_for_block",
  "98dd3839": "Merge pull request #2113 from tronprotocol/fast-sync-use-cpdb",
  "4d13293a": "Merge pull request #2111 from tronprotocol/fast-sync-use-cpdb",
  "52b93af1": "Merge pull request #2109 from tronprotocol/fast-sync-use-cpdb",
  "cf96bfdb": "Merge pull request #2106 from tronprotocol/fast-sync-use-cpdb",
  "e6292e56": "Merge pull request #2103 from tronprotocol/fast-sync-use-cpdb",
  "2deb8e1b": "remove the trie cache",
  "7f1ded7b": "fast forward for block",
  "6ceb2ca4": "Merge pull request #2034 from tronprotocol/fast-sync-use-cpdb",
  "359ad9fa": "Merge pull request #2084 from tronprotocol/fast_forward",
  "47059c43": "modify fast forward logic",
  "d4fb57b2": "fast forward switch for witness",
  "6140305f": "Merge branch 'develop' of https://github.com/tronprotocol/java-tron into fast_forward",
  "4b22d0ef": "Merge branch 'develop' of https://github.com/tronprotocol/java-tron into fast_forward",
  "f6ba2787": "Merge branch 'develop' of https://github.com/tronprotocol/java-tron into fast_forward",
  "ad16653b": "modify adv inventory logic for fast forward node",
  "1e6a627a": "net add fast forward func",
  "ea29e0b0": "add fast forward",
  "db4d7230": "rebase deferred transaction cache",
  "7b8ce2c0": "fix deferred transaction cache bug",
  "87da54c9": "Merge branch 'develop' into fast-sync-use-cpdb",
  "085f311d": "add cache",
  "d4a67545": "Merge branch 'develop' into fast-sync-use-cpdb",
  "f9abbd49": "Merge branch 'master' into fast-sync-use-cpdb",
  "0a10caaf": "Merge branch 'develop' into fast-sync-use-cpdb",
  "09663302": "Merge branch 'develop' into fast-sync-use-cpdb",
  "cb371d27": "Merge branch 'develop' into fast-sync-use-cpdb",
  "3fd0c3f5": "Merge branch 'develop' into fast-sync-use-cpdb",
  "d29d7c9a": "Merge branch 'develop' into fast-sync-use-cpdb",
  "d18ca63e": "Merge pull request #1924 from tronprotocol/cache_tx",
  "e893640d": "Merge pull request #1907 from tronprotocol/cache_tx",
  "98e4d0e1": "Merge branch 'cache_tx' of github.com:tronprotocol/java-tron into cache_tx",
  "d346c424": "db1 not use txcache",
  "2343e52b": "init cache txs",
  "d2cbfc06": "add txcacheDb",
  "43b17156": "Merge branch 'master' into fast-sync-dev",
  "6d566ea0": "add the cache expire time",
  "3f4d01be": "cache txs in recent block",
  "4896fe4d": "improve performance",
  "18d2e8ed": "if is fast model don't execute transaction",
  "37a3be8c": "fast sync support: 1、command support for fast sync; 2、add GetNodeData and NodeData message; 3、add stateRoot in blockheader, refer to Tron.proto;",
  "908f0673": "Merge branch 'transation-receipt-dev' into fast-sync-dev",
  "7325c2d1": "optimization db2",
  "e315621e": "optimization grpc broadcast trx interface",
  "cc17ae54": "Merge pull request #1758 from tronprotocol/improve_trc10performance",
  "7c334cc6": "improve trc10 performance test",
  "2520a882": "Merge pull request #1731 from tronprotocol/add_trc10_performancetest",
  "c66394ba": "add performance test and change deploy, trigger method",
  "42e33b5f": "improve performance",
  "25e275f3": "improve performance get/getunchecked",
  "4863a40b": "improve performance get/getunchecked",
  "3e8f4ecf": "improve performance",
  "a3c3db33": "improve performance",
  "5c817ecd": "improve performance",
  "0a9c3573": "Merge pull request #1538 from tronprotocol/fastPop",
  "16892900": "fast pop",
  "9152a39b": "mdf trx cache size",
  "e50417b5": "optimization stest case, move some param to the config",
  "a6afda71": "optimization stest case",
  "e71f74b6": "improve index query performance",
  "d3ebd8d4": "Merge pull request #1159 from tronprotocol/cacheDB",
  "e7e4d52f": "optimization the net connect",
  "df5168a8": "fastjson",
  "25c31fec": "Merge pull request #816 from tronprotocol/trans_cache",
  "18e244c1": "add tansid cache",
  "4dee0dbb": "add tansid cache",
  "23c32d00": "add wallet and net trans cache",
  "0eeae590": "add trans hash cache",
  "21c7c7a3": "mdf cache size",
  "a45323af": "mdf cache size",
  "74e5fb09": "mdf cache size and sync log",
  "710754dc": "Merge pull request #493 from tronprotocol/sync_cache",
  "eb9e9cde": "mdf cache size",
  "5e34e6e6": "optimize WitnessScheduleStore store performance",
  "950a9b9f": "disable travis cache",
  "d536ddac": "rm cached directory",
  "8f88ed15": "StringBuilder is faster than using String concatenation",
  "090bd1a4": "Merge pull request #104 from tronprotocol/feature/code_optimization_0205"
}, "JavaTutorial": {
  "8da36a4": "modify cache",
  "2a9f7bd": "modify big backend and cache",
  "f4f8cb0": "modify db and cache",
  "ca87e91": "cache"
}, "Java-WebSocket": {
  "95a615e": "improved servers performance",
  "31dcbc1": "replaced byte[] with ByteBuffer in order to ( be able to ) spare memory allocations improved Draft75/76 framing performance",
  "c04d285": "Changed the way clients are hold internally. Iterators will be FAILFAST but dealing with large numbers client faster."
}, "JAViewer": {
  "": ""
}, "JCSprout": {
  "42aede7": ":white_check_mark: Adding tests.guava cache test",
  "1491ba2": ":sparkles: Introducing new features.LRU cache",
  "974a350": ":sparkles: Introducing new features.LRU cache"
}, "JCTools": {
  "f5caab6": "Fixed issue #119 for this queue which was hidden behind a slow isEmpty",
  "a65111b": "Refactor resize/slowOffer to eliminate code duplication",
  "993a109": "Merge pull request #91 from guidomedina/mpsc-linked-queue-fill-optimization",
  "78f5df4": "Move slow path to own method.",
  "200cdbf": "move to use Nitan's fastflow queue implementation for the channel",
  "4752a37": "Grrr... caught out by wishful concurrency... all better now and performance didn't suffer much for it",
  "aa9db72": "Cleanup. Use common class throughout. Implement cached counters for MPSC/SPMC",
  "8bd1260": "32bits mask is faster"
}, "JDA": {
  "d1b06b6": "Fix slow shutdown during reconnects (#2464)",
  "936d85f": "Add generic slowmode channel manager to slowmode channel interface (#2348)",
  "7660750": "Remove archived threads from cache (#2322)",
  "5bab345": "Add some missing documentation to clarify cache (#2306)",
  "b579a8d": "Improve usage of cache in Guild#retrieveMemberById (#2200)",
  "215d275": "Do not ignore member cache policy when chunking is enabled (#2053)",
  "79e5014": "mention that Guild#getBoosters requires cache in the docs (#2108)",
  "3364789": "Remove manager instance cache (#2106)",
  "abf29a6": "Build the User from data in the Interaction if the User was not cached. (#2060)",
  "88eb284": "Fix issues with event cache (#2045)",
  "ac3104d": "Fixes NPE from uncached users (#2035)",
  "e328d17": "Add missing cache cleanup for news/stage/thread channels (#2029)",
  "67e2d34": "Added proper cache-restoration for unarchived threads",
  "c61b951": "Add members to cache from retrieveMember methods",
  "f1becef": "Fix GuildChannel#createCopy for uncached members (#1229)",
  "68f9fd2": "Let ChannelUpdateHandler add overrides to cache",
  "2a6df59": "Don't insert null into override cache",
  "fef2f9f": "Clear cached lists for channels",
  "ca6c661": "Clear cached role lists when position is updated",
  "2df1197": "Remove Voice channel from JDA cache on deleteion",
  "a74726d": "Fix store channel cache invalidation",
  "9ed44a9": "Added StoreChannel cache methods to ShardManager (#1060)",
  "5042569": "Disable client status handling if cache disabled",
  "87ae192": "Update slowmode limit to 6 hours",
  "1bfe650": "Use RW-Lock for more efficient cache view access (#834)",
  "52ab3b6": "Added copying of the slowmode when cloning a channel (#825)",
  "0cdd7cf": "Prevent creation of audio managers for uncached guilds (#756)",
  "8f5558c": "WebSocketClient optimization/enhancements (#645)",
  "72d5a74": "Merge remote-tracking branch 'origin/hotfix-cache-view'",
  "3c8e4c8": "Fixed issues with cache view iterators not being thread-safe and signature clashes on CacheView.all(...)",
  "a931bfa": "Made audio manager cache accessible from JDA instances",
  "f872ecb": "Fixed handling of GuildMemberRemove and added cleanup to event cache (#455)",
  "4fbdac1": "Removed check for cache in atomic role add/remove methods of GuildController",
  "4abd26a": "Do not remove SelfUser from user cache (#382)",
  "e6caa89": "Merge remote-tracking branch 'pr/patch-1' into patch-cache",
  "9a51172": "Fixed a cache bug where PermissionOverrides would not be loaded on channel creation",
  "02435a1": "Fixed bug in MessageHistory#retrievePast where messages wouldn't be added if the cached history is not empty",
  "76fc7a3": "User#openPrivatechannel no longer throws IllegalStateException when having a PrivateChannel already. Instead it returns the cached one in an EmptyRestAction.",
  "279c1f0": "Fixed Member cache bug (nickname -> nick)",
  "edebd56": "Merge pull request #148 from MinnDevelopment/cache-fix",
  "6596188": "Fixed a cache bug for roles updates",
  "012cf6b": "First pass on the Call system. Incomplete, but should maintain the cache for the most part. Fixed cache issues related to removal of relationships. Made EntityBuilder#createMessage update fake user info correct. Create GuildVoiceState and CallVoiceState. Will implement acquring in-process calls on startup later. Needs many events, will implement later.",
  "bc0b8ef": "Implemented support for RELATIONSHIP_ADD and RELATIONSHIP_REMOVE. Created FriendAdded, FriendRemoved, UserBlocked, UserUnblocked, FriendRequestSent, (FR)Canceled, (FR)Received, and (FR)Ignored events. Reordered the events checked in ListenerAdapter to make Messages checked first for faster events for Messages.",
  "15a216a": "Second pass on Relationship + Group stuff. Group caching and cache updating should be valid. Adds support for CHANNEL_RECIPIENT_ADD and CHANNEL_RECIPIENT_REMOVE Adds Join, Leave, all Update types, UserJoin, and UserLeave events for Groups. Adds all Group message types. Adds Message#getChannelType() and Message#isFromType(ChannelType) Removes Message#isPrivate() Reworked EntityBuilder#createUser / createFakeUser logic",
  "d14f966": "Backported the token auth code from 3.0 to make login times MUCH faster.",
  "825d0b7": "Made the reconnect routine cache+replay socket-messages received before jda is fully (re)initialized",
  "1ca36e9": "Small fixes and small performance boost",
  "3fc082b": "Implemented event cache to deal with the events we recieve before JDA has finished loading.",
  "0589be5": "Changed MessageHistory.retrieve() to get 100 messages (max) instead of old 50 => better performance and less calls"
}, "jd-gui": {
  "": ""
}, "jdk": {
  "466ec300f": "8302736: Major performance regression in Math.log on aarch64",
  "bdd240283": "8260943: C2 SuperWord: Remove dead vectorization optimization added by 8076284",
  "f4f5542f8": "8306842: Classfile API performance improvements",
  "ecc1d85db": "8307869: Remove unnecessary log statements from arm32 fastlocking code",
  "4251b5621": "8306843: JVMTI tag map extremely slow after JDK-8292741",
  "7f6358a8b": "8291555: Implement alternative fast-locking scheme",
  "1f57ce0a0": "8307446: RISC-V: Improve performance of floating point to integer conversion",
  "6fe959c62": "8307306: Change some ConstantPool::name_ref_at calls to uncached_name_ref_at",
  "e9807a4b0": "8306042: C2: failed: Missed optimization opportunity in PhaseCCP (adding LShift->Cast->Add notification)",
  "67dd84143": "8305093: Linker cache should not take layout names into account",
  "eb358619d": "8205592: BigDecimal.doubleValue() is depressingly slow",
  "d0e8aec04": "8306374: (bf) Improve performance of DirectCharBuffer::append(CharSequence[,int,int])",
  "28829f308": "8306734: Shenandoah: Missing barriers on deoptimization path",
  "314db55f6": "8304818: Prune HttpURLConnection cache when corresponding Authenticator is garbage collected",
  "20b1d19d2": "8305746: InitializeEncoding should cache Charset object instead of charset name",
  "8858d5434": "8305811: (bf) Improve performance of CharBuffer::append(CharSequence[,int,int])",
  "6831f9db8": "8278583: Open source SwingMark - Swing performance benchmark",
  "736096045": "8305625: Stress test crashes with SEGV in Deoptimization::deoptimize_frame_internal(JavaThread*, long*, Deoptimization::DeoptReason)",
  "c67bbcea9": "8305711: Arm: C2 always enters slowpath for monitorexit",
  "62bd2ebac": "8303147: [s390x] fast & slow debug builds are broken",
  "40aea0468": "8278268: (ch) InputStream returned by Channels.newInputStream should have fast path for FileChannel targets",
  "aa762102e": "8304893: Link Time Optimization with gcc can be faster",
  "65e01da92": "8304013: Add a fast, non-manual alternative to test/jdk/java/util/zip/ZipFile/TestTooManyEntries",
  "c65bb2c58": "8304334: java/awt/color/ICC_ColorSpace/ToFromCIEXYZRoundTrip.java times out on slow platforms",
  "b7945bc9e": "8303154: Investigate and improve instruction cache flushing during compilation",
  "548d552bc": "8303548: Arguments::get_default_shared_archive_path() should cache the result for future use",
  "f54e1080c": "8302831: PPC: compiler/codecache/TestStressCodeBuffers.java fails after JDK-8301819",
  "9a797228f": "8299234: JMX Repository.query performance",
  "f82385e58": "8302623: jarsigner - use BufferedOutputStream to improve performance while creating the signed jar",
  "84e47996e": "8297292: java/nio/channels/FileChannel/FileExtensionAndMap.java is too slow",
  "db1b48ef3": "8302167: Avoid allocating register in fast_lock()",
  "af474ce35": "8297582: C2: very slow compilation due to type system verification code",
  "476f58adc": "8298424: Remove redundant FOUND_CORES variable in build-performance.m4",
  "4b0e656bb": "8298118: split-if optimization causes empty loop to temporarily have more than one phi",
  "11aadc9d9": "8244400: MenuItem may cache the size and did not update it when the screen DPI is changed",
  "e1ee6727f": "8300725: Improve performance of ColorConvertOp for default destinations with alpha",
  "5b0af1a80": "8208077: File.listRoots performance degradation",
  "66f7387b5": "8299074: nmethod marked for deoptimization is not deoptimized",
  "289aed465": "8298128: runtime/ErrorHandling/TestSigInfoInHsErrFile.java fails to find pattern with slowdebug",
  "05a0a7103": "8297933: [REDO] Compiler should only use verified interface types for optimization",
  "8c70bf3ff": "8299544: Improve performance of CRC32C intrinsics (non-AVX-512) for small inputs",
  "be64bf8cf": "8299329: Assertion failure with fastdebug build when trying to use CDS without classpath",
  "3d4d9fd6e": "8298947: compiler/codecache/MHIntrinsicAllocFailureTest.java fails intermittently",
  "f07acfc16": "8298699: java/lang/reflect/IllegalArgumentsTest.java times out with slowdebug bits",
  "203251ffc": "8297379: Enable the ByteBuffer path of Poly1305 optimizations",
  "eab0ada3a": "8296545: C2 Blackholes should allow load optimizations",
  "b49fd920b": "8298055: AArch64: fastdebug build fails after JDK-8247645",
  "6e5470525": "8295424: adjust timeout for another JLI GetObjectSizeIntrinsicsTest.java subtest 8297367: disable TestRedirectLinks.java in slowdebug mode 8297369: disable Fuzz.java in slowdebug mode",
  "9430f3e65": "8297934: [BACKOUT] Compiler should only use verified interface types for optimization",
  "99d3840d3": "8297359: RISC-V: improve performance of floating Max Min intrinsics",
  "88957a7ce": "8297147: UnexpectedSourceImageSize test times out on slow machines when fastdebug is used",
  "45d1807ad": "6312651: Compiler should only use verified interface types for optimization",
  "bcc6b12b7": "8296945: PublicMethodsTest is slow due to dependency verification with debug builds",
  "bd57e2138": "8296602: RISC-V: improve performance of copy_memory stub",
  "636040f87": "8296405: java/util/concurrent/forkjoin/AsyncShutdownNow.java is too slow",
  "e81359f14": "8296170: Refactor stack-locking path in C2_MacroAssembler::fast_unlock()",
  "5e08b3f40": "8296931: NMT tests slowed down considerably by JDK-8242181",
  "47d2c7b4c": "8295376: Improve debug agent virtual thread performance when no debugger is attached",
  "7619602c3": "8296136: Use correct register in aarch64_enc_fast_unlock()",
  "706d1b750": "8295798: (ch) Test java/nio/channels/Channels/ReadXBytes.java is very slow on Windows",
  "8c86e9253": "8295847: slow debug build error after JDK-8294466",
  "74a51ccc8": "8292698: Improve performance of DataInputStream",
  "fe70487d0": "8294958: java/net/httpclient/ConnectTimeout tests are slow",
  "5dd851d87": "8281453: New optimization: convert ~x into -1-x when ~x is used in an arithmetic expression",
  "a4f2078bd": "8294437: java/nio/channels/FileChannel tests slow on Windows",
  "fd594302f": "8294610: java/net/vthread/HttpALot.java is slow on Linux",
  "37f83b9b8": "8294375: test/jdk/java/nio/channels/vthread/BlockingChannelOps.java is slow",
  "9f90eb052": "8294062: Improve parsing performance of j.l.c.MethodTypeDesc",
  "6fca9ae04": "8288474: Move EventContinuationFreezeOld from try_freeze_fast to freeze_slow",
  "ec2629c05": "8275275: AArch64: Fix performance regression after auto-vectorization on NEON",
  "205f992e9": "8293326: jdk/sun/security/tools/jarsigner/compatibility/SignTwice.java slow on Windows",
  "2c61efe3d": "8282648: Weaken the InflaterInputStream specification in order to allow faster Zip implementations",
  "c3380c03b": "8292995: improve the SA page cache",
  "f766d9275": "8290344: Start/stop displaysync affects performance in metal rendering pipeline",
  "9424d6d48": "8293012: ConstantPool::print_on can crash if _cache is NULL",
  "a476ec5c8": "8292983: ModuleReferenceImpl.computeHash should record algorithm for cache checks",
  "ab6988599": "8292215: java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java times out with slowdebug",
  "476c484e3": "8292656: G1: Remove G1HotCardCache::_use_cache",
  "da477b136": "8292509: ProblemList java/lang/invoke/lambda/LogGeneratedClassesTest.java on windows 8292510: ProblemList runtime/cds/appcds/cacheObject/ArchivedEnumTest.java",
  "fd4b2f286": "8291718: Remove mark_for_deoptimization from klass unloading",
  "bc7a1ea24": "8288948: Few J2DBench tests indicate lower primitive drawing performance with metal rendering pipeline",
  "9b7805e3b": "8289069: Very slow C1 arraycopy jcstress tests after JDK-8279886",
  "198cec9e1": "8286103: VThreadMonitorTest fails 'assert(!current->cont_fastpath() || (current->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(current))) failed'",
  "d5cd2f2ca": "8284849: Add deoptimization to unified logging",
  "08400f18b": "8287349: AArch64: Merge LDR instructions to improve C1 OSR performance",
  "b5a646ee6": "8287425: Remove unnecessary register push for MacroAssembler::check_klass_subtype_slow_path",
  "48f19e43c": "8287453: RenderPerfTest incorrectly measures performance",
  "796494d0f": "8284944: assert(cnt++ < 40) failed: infinite cycle in loop optimization",
  "0948c097a": "8272094: compiler/codecache/TestStressCodeBuffers.java crashes with 'failed to allocate space for trampoline'",
  "9eb15c9b1": "8286681: ShenandoahControlThread::request_gc misses the case of GCCause::_codecache_GC_threshold",
  "e98ac2355": "8285793: C2: optimization of mask checks in counted loops fail in the presence of cast nodes",
  "6c79671e5": "8285633: Take better advantage of generic MethodType cache",
  "32593df39": "8279888: Local variable independently used by multiple loops can interfere with loop optimizations",
  "e524107a7": "8280872: Reorder code cache segments to improve code density",
  "6ebf845ff": "8283566: G1: Improve G1BarrierSet::enqueue performance",
  "2c43ecb43": "8283323: libharfbuzz optimization level results in extreme build times",
  "557ff4b35": "8282625: Formatter caches Locale/DecimalFormatSymbols poorly",
  "5c408c141": "8282874: Bad performance on gather/scatter API caused by different IntSpecies of indexMap",
  "7822cbce1": "8276711: compiler/codecache/cli tests failing when SegmentedCodeCache used with -Xint",
  "76398c840": "8279573: compiler/codecache/CodeCacheFullCountTest.java fails with 'RuntimeException: the value of full_count is wrong.'",
  "d28b048f3": "8281815: x86: Use short jumps in TIG::generate_slow_signature_handler",
  "f823bed04": "8280007: Enable Neoverse N1 optimizations for Arm Neoverse V1 & N2",
  "e44dc638b": "8271055: Crash during deoptimization with 'assert(bb->is_reachable()) failed: getting result from unreachable basicblock' with -XX:+VerifyStack",
  "85d839fb4": "8280601: ClhsdbThreadContext.java test is triggering codecache related asserts",
  "c74b8f48f": "8275914: SHA3: changing java implementation to help C2 create high-performance code",
  "a24f44d17": "8280526: x86_32 Math.sqrt performance regression with -XX:UseSSE={0,1}",
  "c43ce85f0": "8278302: [s390] Implement fast-path for ASCII-compatible CharsetEncoders",
  "0bf95a1a7": "8279607: Existing optimization '~x+1' -> '-x' can be generalized to '~x+c' -> '(c-1)-x'.",
  "ff8565931": "8279833: Loop optimization issue in String.encodeUTF8_UTF16",
  "ddddec7d7": "8274243: Implement fast-path for ASCII-compatible CharsetEncoders on aarch64",
  "c3d0a9404": "8279833: Loop optimization issue in String.encodeUTF8_UTF16",
  "4471e9517": "8279645: JFR: The cacheEventType in Dispatcher is never assigned",
  "1f101b04f": "8278329: some TraceDeoptimization code not included in PRODUCT build",
  "8703f1480": "8273322: Enhance macro logic optimization for masked logic operations.",
  "f32630539": "8278114: New addnode ideal optimization: converting 'x + x' into 'x << 1'",
  "54517fa3d": "8279074: ProblemList compiler/codecache/jmx/PoolsIndependenceTest.java on macosx-aarch64",
  "8eb453bae": "8277072: ObjectStreamClass caches keep ClassLoaders alive",
  "0602f4c48": "8277621: ARM32: multiple fastdebug failures with 'bad AD file' after JDK-8276162",
  "352435581": "8277882: New subnode ideal optimization: converting 'c0 - (x + c1)' into '(c0 - c1) - x'",
  "30f0c6475": "8277992: Add fast jdk_svc subtests to jdk:tier3",
  "bd7c54aee": "8278341: Liveness check for global scope is not as fast as it could be",
  "6994d8093": "8278291: compiler/uncommontrap/TraceDeoptimizationNoRealloc.java fails with release VMs after JDK-8154011",
  "f39fe5b3d": "8154011: Make TraceDeoptimization a diagnostic flag",
  "9642629d1": "8276779: (ch) InputStream returned by Channels.newInputStream should have fast path for SelectableChannels",
  "4f15be2cd": "8277965: Enclosing instance optimization affects serialization",
  "a5f2a58ba": "8277846: Implement fast-path for ASCII-compatible CharsetEncoders on ppc64",
  "3d810ad69": "8277411: C2 fast_unlock intrinsic on AArch64 has unnecessary ownership check",
  "17e68caad": "8277042: add test for 8276036 to compiler/codecache",
  "7b67a49f8": "8261847: performance of java.lang.Record::toString should be improved",
  "79350b9b4": "8276216: Negated character classes performance regression in Pattern",
  "0a9e76c4f": "8277485: Zero: Fix _fast_{i,f}access_0 bytecodes handling",
  "976c2bb05": "8277212: GC accidentally cleans valid megamorphic vtable inline caches",
  "e4362007d": "8008243: Zero: Implement fast bytecodes",
  "fe45835f7": "8274856: Failing jpackage tests with fastdebug/release build",
  "8c5f03049": "8276453: Undefined behavior in C1 LIR_OprDesc causes SEGV in fastdebug build",
  "0ab910d62": "8276066: Reset LoopPercentProfileLimit for x86 due to suboptimal performance",
  "61cb4bc6b": "8276036: The value of full_count in the message of insufficient codecache is wrong",
  "99b7b95e0": "8276205: Shenandoah: CodeCache_lock should always be held for initializing code cache iteration",
  "d6d82f52d": "8275608: runtime/Metaspace/elastic/TestMetaspaceAllocationMT2 too slow",
  "cb989cf3a": "8275052: AArch64: Severe AES/GCM slowdown on MacOS for short blocks",
  "a343fa876": "8275865: Print deoptimization statistics in product builds",
  "b0d1e4ff4": "8273585: String.charAt performance degrades due to JDK-8268698",
  "1271fbf3d": "8248584: Enable CHECK_UNHANDLED_OOPS for Windows fastdebug builds",
  "8a3e0a1fc": "7008363: TEST_BUG: test/java/lang/StringCoding/CheckEncodings.sh does nothing and is very slow at that",
  "8e0206428": "8049520: FileCredentialsCache loads cache once and is never refreshed",
  "c355704a4": "8041125: ColorConvertOp filter much slower in JDK 8 compared to JDK7",
  "b8bd259bb": "8271737: Only normalize the cached user.dir property once",
  "b7b78ff1f": "8274561: sun/net/ftp/TestFtpTimeValue.java timed out on slow machines",
  "c57ed22e7": "8274528: Add comment to explain an HKDF optimization in SSLSecretDerivation",
  "aaa36cc00": "8274242: Implement fast-path for ASCII-compatible CharsetEncoders on x86",
  "db23ecdfa": "8274191: Improve g1 evacuation failure injector performance",
  "544193a3b": "8247980: Exclusive execution of java/util/stream tests slows down tier1",
  "a73c06de2": "8273021: C2: Improve Add and Xor ideal optimizations",
  "7f80683cf": "8272783: Epsilon: Refactor tests to improve performance",
  "741f58c18": "8272417: ZGC: fastdebug build crashes when printing ClassLoaderData",
  "73da66ffb": "8272318: Improve performance of HeapDumpAllTest",
  "82688258f": "8272297: FileInputStream should override transferTo() for better performance",
  "87d2761f1": "8271883: Math CopySign optimization for x86",
  "bd7f9b4fb": "8272459: ProblemList compiler/codecache/TestStressCodeBuffers.java on aarch64",
  "020aec531": "8271366: [REDO] JDK-8266054 VectorAPI rotate operation optimization",
  "5350b9901": "8272131: PhaseMacroExpand::generate_slow_arraycopy crash when clone null CallProjections.fallthrough_ioproj",
  "04134fcda": "8264543: Cross modify fence optimization for x86",
  "d7b5cb688": "8271368: [BACKOUT] JDK-8266054 VectorAPI rotate operation optimization",
  "d994b93e2": "8266054: VectorAPI rotate operation optimization",
  "c0d4efff3": "6506405: Math.abs(float) is slow",
  "9cac94d58": "8269404: Base64 Encoding optimization enhancements for x86 using AVX-512",
  "2c883eeed": "8267982: Set the node after peephole optimization to be removed",
  "5b8e1a266": "8266595: jdk/jfr/jcmd/TestJcmdDump.java with slowdebug bits fails with AttachNotSupportedException",
  "be0ac92e1": "8269614: [s390] Interpreter checks wrong bit for slow path instance allocation",
  "3b83bc1bc": "8268427: Improve AlgorithmConstraints:checkAlgorithm performance",
  "c37988d07": "8268276: Base64 Decoding optimization for x86 using AVX-512",
  "f37591641": "8269186: [REDO] Remove CodeCache::mark_for_evol_deoptimization() method",
  "52d5d1b36": "8269188: [BACKOUT] Remove CodeCache::mark_for_evol_deoptimization() method",
  "ae3eedce9": "8268727: Remove unused slowpath locking method in OptoRuntime",
  "33c23a1cf": "8264941: Remove CodeCache::mark_for_evol_deoptimization() method",
  "4d8b5c70d": "8268347: C2: nested locks optimization may create unbalanced monitor enter/exit code",
  "f69e2d565": "8267397: AlgorithmId's OID cache is never refreshed",
  "5ebd4199c": "8267972: Inline cache cleaning is not monotonic",
  "204b4929f": "8267703: runtime/cds/appcds/cacheObject/HeapFragmentationTest.java crashed with OutOfMemory",
  "4e6748c54": "8267687: ModXNode::Ideal optimization is better than Parse::do_irem",
  "20b631278": "8268151: Vector API toShuffle optimization",
  "f67847f52": "8267396: Avoid recording 'pc' in unhandled oops detector for better performance",
  "99fcc410a": "8234532: Remove ThreadLocalAllocBuffer::_fast_refill_waste since it is never set",
  "c2b50f93a": "8266480: Implicit null check optimization does not update control of hoisted memory operation",
  "65a8bf58b": "8265126: [REDO] unified handling for VectorMask object re-materialization during de-optimization",
  "599d07c0d": "8263006: Add optimization for Max(*)Node and Min(*)Node",
  "8468001f8": "8263452: Javac slow compilation due to algorithmic complexity",
  "0f925d1f5": "8266015: Implement AdapterHandlerLibrary lookup fast-path for common adapters",
  "b5b31197e": "8266589: (fs) Improve performance of Files.copy() on macOS using copyfile(3)",
  "ff65920cd": "8265491: Math Signum optimization for x86",
  "5c083e856": "8266129: tools/jpackage/windows/WinInstallerIconTest.java hangs with fastdebug",
  "2a0373953": "8266014: Regression brought by optimization done with JDK-4926314",
  "6bb71d9e2": "8264762: ByteBuffer.byteOrder(BIG_ENDIAN).asXBuffer.put(Xarray) and ByteBuffer.byteOrder(nativeOrder()).asXBuffer.put(Xarray) are slow",
  "91226fa12": "8265940: Enable C2's optimization for Math.pow(x, 0.5) on all platforms",
  "3f9879f1c": "8266190: mark hotspot compiler/codecache tests which ignore VM flags",
  "f40bf1d24": "8266087: Move 'buffer' declaration in get_user_name_slow() inside of linux specific code",
  "ab2aec2af": "8265938: C2's conditional move optimization does not handle top Phi",
  "879a77f17": "8265757: stack-use-after-scope in perfMemory_posix.cpp get_user_name_slow()",
  "52f9d2297": "8265884: ProblemList compiler/codecache/jmx/PoolsIndependenceTest.java on macOS-X64",
  "e0fd5fc06": "8265028: JDWP debug agent thread lookup can be made faster",
  "4c83d24f0": "8058176: [mlvm] tests should not allow code cache exhaustion",
  "27dd88bf9": "8262957: (fs) Fail fast in UnixFileStore.isExtendedAttributesEnabled",
  "283d64f81": "8262896: [macos_aarch64] Crash in jni_fast_GetLongField",
  "3b576ed99": "8265100: (fs) WindowsFileStore.hashCode() should read cached hash code once",
  "18bec9cf9": "8265084: [BACKOUT] 8264954: unified handling for VectorMask object re-materialization during de-optimization",
  "f71be8b5d": "8264954: unified handling for VectorMask object re-materialization during de-optimization",
  "42f4d7062": "8264649: runtime/InternalApi/ThreadCpuTimesDeadlock.java crash in fastdebug C2 with -XX:-UseTLAB",
  "f26cd2ac1": "8264997: Remove SystemDictionary::cache_get",
  "011f6d13a": "8264223: CodeHeap::verify fails extra_hops assertion in fastdebug test",
  "52d8a2294": "8264054: Bad XMM performance on java.lang.MathBench.sqrtDouble",
  "16acfafb6": "8012229: [lcms] Improve performance of color conversion for images with alpha channel",
  "1f54ed07a": "8264096: slowdebug jvm crashes when StrInflatedCopy match rule is not supported",
  "99b4bab36": "8263188: JSSE should fail fast if there isn't supported signature algorithm",
  "2fa6a3c47": "8264006: Fix AOT library loading on CPUs with 256-byte dcache line",
  "0b03d0479": "8167015: compiler/codecache/jmx/PoolsIndependenceTest.java timeout",
  "d2c137d40": "8263558: Possible NULL dereference in fast path arena free if ZapResourceArea is true",
  "20297a1be": "8263577: C2: reachable nodes shouldn't have dead uses at the end of optimizations",
  "a6e056fd5": "8263125: During deoptimization vectors should reassign scalarized payload after all objects are reallocated.",
  "18fc35053": "8259886: Improve SSL session cache performance and scalability",
  "433096a45": "8261744: Implement CharsetDecoder ASCII and latin-1 fast-paths",
  "95d73129c": "8261585: Restore HandleArea used in Deoptimization::uncommon_trap",
  "5183d8ae1": "8260355: AArch64: deoptimization stub should save vector registers",
  "81e730e5f": "8259276: C2: Empty expression stack when reexecuting tableswitch/lookupswitch instructions after deoptimization",
  "c52c6c66d": "8260273: DataOutputStream writeChars optimization",
  "58ceb2544": "8259842: Remove Result cache from StringCoding",
  "bf28f9255": "8259713: Fix comments about ResetNoHandleMark in deoptimization",
  "4f881ba54": "8258652: Assert in JvmtiThreadState::cur_stack_depth() can noticeably slow down debugging single stepping",
  "722f23610": "8259231: Epsilon: improve performance under contention during virtual space expansion",
  "dd8996c5f": "8258946: Fix optimization-unstable code involving signed integer overflow",
  "f351e155e": "8258382: Fix optimization-unstable code involving pointer overflow",
  "1e03ca13c": "8258471: 'search codecache' clhsdb command does not work",
  "7320e051e": "8258647: TestCharVect2 is very slow",
  "cb5a6b1a7": "8258225: compiler/c2/cr6340864/TestIntVect.java runs faster in interpreter",
  "7aac4dc17": "8257621: JFR StringPool misses cached items across consecutive recordings",
  "2273f9555": "8234930: Use MAP_JIT when allocating pages for code cache on macOS",
  "f0b119400": "8235784: java/lang/invoke/VarHandles/VarHandleTestByteArrayAsInt.java fails due to timeout with fastdebug bits",
  "129c37700": "8257594: C2 compiled checkcast of non-null object triggers endless deoptimization/recompilation cycle",
  "cc1915b3b": "8253821: Improve ByteBuffer performance with GCM",
  "6eb25d7cb": "8254082: AbstractStringBuilder.insert(int dstOffset, CharSequence s, int start, int end) is missing fast-path for String",
  "e77aed624": "8256754: Deoptimization::revoke_for_object_deoptimization: stack processing start call is redundant",
  "41c05876b": "8255367: C2: Deoptimization during vector box construction is broken",
  "503590f6b": "8256056: Deoptimization stub doesn't save vector registers on x86",
  "defdd12e7": "8142984: Zero: fast accessors should handle both getters and setters",
  "eab170c0a": "8256415: Shenandoah: Should evacuate/update codecache concurrently when class unloading is off",
  "eb021848b": "8134630: make code and comments consistent for stack lock optimization",
  "3455fa9bf": "8256050: JVM crashes with -XX:+PrintDeoptimizationDetails",
  "e281b1359": "8255011: [TESTBUG] compiler/codecache/stress/UnexpectedDeoptimizationAllTest.java timed out",
  "17f04fc9e": "8254078: DataOutputStream is very slow post-disabling of Biased Locking",
  "faf23de54": "8255534: Shenandoah: Fix CmpP optimization wrt native-LRB",
  "0efdde188": "8238669: Long.divideUnsigned is extremely slow for certain values (Needs to be Intrinsic)",
  "b509e31e5": "8254602: compiler/debug/TestStressCM.java failed with 'RuntimeException: got the same optimization stats for different seeds: expected 45'",
  "424d7d648": "8252881: [JVMCI] ResolvedJavaType.resolveMethod fails in fastdebug when invoked with a constructor",
  "0f26ab16d": "8252518: cache result of CompilerToVM.getComponentType",
  "0e98fc1cc": "8253237: [REDO] Improve large object handling during evacuation 8253238: [REDO] Improve object array chunking test in G1's copy_to_survivor_space 8253236: [REDO] Investigate fast-path for scanning only objects with references during gc",
  "3d88d387c": "8252070: Some platform-specific BLIT optimizations are not effective",
  "f37c34d32": "8253270: Limit fastdebug inlining in G1 evacuation",
  "81e2cf82d": "8251397: NPE on ClassValue.ClassValueMap.cacheArray",
  "f972155d6": "8252196: ZGC: TestUncommit.java fails due to 'Exception: Uncommitted too fast' again(2)",
  "dafcf1056": "8027545: Improve object array chunking test in G1's copy_to_survivor_space 8158045: Improve large object handling during evacuation 8027761: Investigate fast-path for scanning only objects with references during gc",
  "9687dcabb": "8252494: C2: TypeAryPtr::cast_to_autobox_cache does not use ptr_type",
  "850d62301": "8252720: clean up FileInstaller $test.src $cwd in vmTestbase/vm/compiler/optimizations tests",
  "0f64d4bea": "8245308: Replace ThreadLocalCoders decoder/encoder cache in java.net.URI",
  "e8d284faa": "8248266: ZGC: TestUncommit.java fails due to 'Exception: Uncommitted too fast' again",
  "39616b4d7": "8250930: [TESTBUG] Some forceEarlyReturn00* tests failed due to compiler optimization",
  "ca91da0e0": "8248794: Transition JFR Periodic Task Thread to '_thread_in_native' before invoking performance counters",
  "c7ecaa4a1": "8248219: aarch64: missing memory barrier in fast_storefield and fast_accessfield",
  "4682835fb": "8203005: The top-of-stack type specified for nofast_* bytecodes are wrong",
  "601e566b2": "8245128: Kitchensink fails with: assert(destination == (address)-1 || destination == entry) failed: b) MT-unsafe modification of inline cache",
  "2f09989ec": "8247532: Records deserialization is slow 8248135: Build microbenchmarks with --enable-preview",
  "a72a8984a": "8249719: MethodHandle performance suffers from bad ResolvedMethodTable hash function",
  "326ba3178": "8237950: C2 compilation fails with 'Live Node limit exceeded limit' during ConvI2L::Ideal optimization",
  "6f4f6a2a5": "8245955: Shenandoah: Remove LRB/is_redundant optimization",
  "dfc7905a1": "8246027: Minimal fastdebug build broken after JDK-8245801",
  "e04e05288": "8239013: java.util.logging.Logger catalog cache keeps strong references to ResourceBundles",
  "3f7cd1f20": "8244416: Remove incorrect assert during inline cache cleaning",
  "74132fe7e": "8244615: build-performance.m4 is not always parsing /proc/cpuinfo correctly",
  "6bd9391f0": "8244433: Remove saving of RSP in Assembler::pusha_uncached()",
  "2594f0b9b": "8242848: Improve performance of InflaterOutputStream.write()",
  "268ea904e": "8243254: Examine ZipFile slash optimization for non-ASCII compatible charsets",
  "3cb0f002b": "8242502: UnexpectedDeoptimizationTest.java failed 'assert(phase->type(obj)->isa_oopptr()) failed: only for oop input'",
  "9687723c8": "8243932: compiler/codecache/cli/printcodecache/TestPrintCodeCacheOption.java test can use driver mode",
  "83a6527e4": "8243619: compiler/codecache/CheckSegmentedCodeCache.java test misses -version",
  "64aee56ad": "8242365: Shenandoah: use uint16_t instead of jushort for liveness cache",
  "343f7603e": "8242316: Shenandoah: Turn NULL-check into assert in SATB slow-path entry",
  "cbfcae774": "8233439: G1 zero_filled optimization when committing CardCountsTable does not work",
  "d94599986": "8241874: [PPC64]: Improve performance of Long.reverseBytes() and Integer.reverseBytes() on Power9",
  "aeb2f9492": "8242596: Improve JarFile.getEntry performance for multi-release jar files",
  "7bd2cd0bf": "8242597: Remove GenericTaskQueue<>::push_slow",
  "048c5c0dd": "8241041: C2: 'assert((Value(phase) == t) || (t != TypeInt::CC_GT && t != TypeInt::CC_EQ)) failed: missing Value() optimization' still happens after fix for 8239335",
  "61940fe4c": "8241988: DatagramSocket incorrectly caches the first set of socket options",
  "80b864449": "8241670: Enhance heap region size ergonomics to improve OOTB performance",
  "990a11e42": "8241909: Remove useless code cache lookup in frame::patch_pc",
  "6d44ff7d9": "8186780: clang fastdebug assertion failure in os_linux_x86:os::verify_stack_alignment()",
  "de7ea8db9": "8241845: Shenandoah: align ShenandoahHeapRegions to cache lines",
  "e2353cc32": "8248987: AOT's Linker.java seems to eagerly fail-fast on Windows",
  "2e09a58f6": "8246019: PerfClassTraceTime slows down VM start-up",
  "459da4aa1": "8248219: aarch64: missing memory barrier in fast_storefield and fast_accessfield",
  "9d5f38849": "8245512: CRC32 optimization using AVX512 instructions",
  "f7cb0f760": "8244278: Excessive code cache flushes and sweeps",
  "99d6bea20": "8244660: Code cache sweeper heuristics is broken",
  "06b49fa3f": "8244658: Remove dead code in code cache sweeper",
  "116aee495": "8242527: ZGC: TestUncommit.java fails due to 'Exception: Uncommitted too fast'",
  "dd63eec6e": "8241232: -XX:+BootstrapJVMCI is not compatible with TieredStopAtLevel < CompLevel_full_optimization",
  "2a35bc5ae": "8240854: [REDO] some jaotc failures of fastdebug build with specific flags",
  "0992e17b9": "8240829: Use a fast O(1) algorithm for exact_log2",
  "39ab07317": "8240830: [BACKOUT] 8240195: some jaotc failures of fastdebug build with specific flags",
  "42ff13ab8": "8240195: some jaotc failures of fastdebug build with specific flags",
  "b58c8601b": "8239335: C2: assert((Value(phase) == t) || (t != TypeInt::CC_GT && t != TypeInt::CC_EQ)) failed: missing Value() optimization",
  "289513cc2": "8239235: Examine SignatureStream performance after consolidation",
  "04c1e2e93": "8223260: NamingManager should cache InitialContextFactory",
  "398ce2948": "8240248: Extend superword reduction optimizations for x86",
  "4ca069958": "8237479: 8230305 causes slowdebug build failure",
  "832baeaf4": "8236153: ZGC: gc/z/TestUncommit.java fails with java.lang.Exception: Uncommitted too fast",
  "f0c804676": "8233680: JavacFileManager.close() doesn't clear some cache instance variables",
  "4e29c964f": "8236124: Minimal VM slowdebug build failed after JDK-8212160",
  "ed044e914": "8236124: Minimal VM slowdebug build failed after JDK-8212160",
  "3e9a17c53": "8235984: C2: assert(out->in(PhiNode::Region) == head || out->in(PhiNode::Region) == slow_head) failed: phi must be either part of the slow or the fast loop",
  "cb2eeb7d9": "8239142: C2's UseUniqueSubclasses optimization is broken for array accesses",
  "b0b8190ea": "8238782: Cleanup Deoptimization::deoptimize(): remove unused RegisterMap argument and don't update RegisterMap in callers if UseBiasedLocking is enabled",
  "590f5996c": "8136414: Large performance penalty declaring a method strictfp on strict-only platforms",
  "00ba4ea7b": "8229377: [JVMCI] Improve InstalledCode.invalidate for large code caches",
  "6a547f957": "8235510: java.util.zip.CRC32 performance drop after 8200067",
  "7eadf5b37": "8220465: Use shadow regions for faster ParallelGC full GCs",
  "c023983c7": "8235250: Create (test) abstraction for allocating objects that is immune to removal by optimizations",
  "6864634fb": "8216041: [Event Request] - Deoptimization",
  "8aafb0e12": "8234321: Call cache flush after generating trampoline",
  "007a0fb23": "8231084: Large performance regression in SwingMark TextArea in 14-b13 8231336: Corrupted option dialog in JTHarness with JDK14b13",
  "78995ebe6": "8233232: AArch64: Shenandoah: jni_fast_GetLongField is broken",
  "6e08f8434": "8232162: Object reallocation in Deoptimization::fetch_unroll_info_helper should not depend on EliminateNestedLocks",
  "1c9dd1571": "8232260: Remove g1 prefix in G1CollectedHeap::g1_hot_card_cache() getter",
  "0dbfc97c0": "8231717: Improve performance of charset decoding when charset is always compactable",
  "2f4bd6db0": "8225681: vmTestbase/nsk/jvmti/RedefineClasses/StressRedefine fails due a) MT-unsafe modification of inline cache",
  "3e8d409ce": "8230162: ScopeImpl.remove() has O(N) performance",
  "dce5f5dbc": "8221092: UseAVX=3 has performance degredation on Skylake (X7) processors",
  "c1b844a22": "8229022: BufferedReader performance can be improved by using StringBuilder",
  "29e4d9fa8": "8231321: compiler/codecache/stress/UnexpectedDeoptimizationAllTest.java failed assertion",
  "d564ab722": "8229853: Problemlist compiler/codecache/jmx/PoolsIndependenceTest.java",
  "c1865c4ad": "8219724: ZGC: Make inline cache cleaning more robust",
  "a03e92201": "8231223: C2's conditional move optimization fails with assert(bol->Opcode() == Op_Bool) failed",
  "6ccf3351d": "8185005: Improve performance of ThreadMXBean.getThreadInfo(long ids[], int maxDepth)",
  "c299c4fd4": "8228757: Fail fast if the handshake type is unknown",
  "793585b49": "8225625: AES Electronic Codebook (ECB) encryption and decryption optimization using AVX512 + VAES instructions",
  "47c9c44b1": "8229416: Shenandoah: Demote or remove ShenandoahOptimize*Final optimizations",
  "57dac13ec": "8228658: test GetTotalSafepointTime.java fails on fast Linux machines with Total safepoint time 0 ms",
  "01e4da680": "8228658: test GetTotalSafepointTime.java fails on fast Linux machines with Total safepoint time 0 ms",
  "ec5bfaba5": "8219687: G1 asserts nmethod should not be unloaded during parallel code cache unloading",
  "c6c82dd73": "8227080: (fs) Files.newInputStream(...).skip(n) is slow",
  "a7511da8a": "8226778: [JVMCI] Handle unpacking properly in Deoptimiziation::get_cached_box()",
  "685c7b8a4": "8223173: Implement fast class initialization checks on AARCH64",
  "f5a2730b4": "8214542: JFR: Old Object Sample event slow on a deep heap in debug builds",
  "dcf57abbc": "8228601: AArch64: Fix interpreter code at JVMCI deoptimization entry",
  "3eaf9567b": "8224827: Implement fast class initialization checks on s390",
  "98e6903c5": "8224826: Implement fast class initialization checks on PPC64",
  "b15639648": "8225402: events logging in deoptimization.cpp should go to deopt-log",
  "829c81bbf": "8225141: Better handling of classes in error state in fast class initialization checks",
  "145f06a15": "8223504: Improve performance of forall loops by better inlining of 'iterator()' methods",
  "e72bfe15a": "8223213: Implement fast class initialization checks on x86-64",
  "abe90da66": "8224539: C2 compilation fails during ArrayCopyNode optimizations with assert(i < _max) failed: oob: i=1, _max=1",
  "22dfc6db0": "8224522: Shenandoah should apply barriers on deoptimization",
  "18a59944e": "8224210: Shenandoah: Refactor ShenandoahRootScanner to support scanning CSet codecache roots",
  "ef5194182": "8130017: use _FORTIFY_SOURCE in gcc fastdebug builds",
  "8b07b191c": "8223389: Shenandoah optimizations fail with assert(!phase->exceeding_node_budget())",
  "63dbcdc87": "8222670: pathological case of JIT recompilation and code cache bloat",
  "921b46738": "8222799: java.beans.Introspector uses an obsolete methods cache",
  "0ff8db34c": "8221542: ~15% performance degradation due to less optimized inline decision",
  "8e1bb92b0": "8223258: Shenandoah: SRP::process_all_roots_slow processes JvmtiExport weak oops twice",
  "142c9b490": "8223184: Shenandoah: Missing roots in SRP::process_all_roots_slow",
  "2468ac91e": "8222035: minimal inference context optimization is forcing resolution with incomplete constraints",
  "246544eeb": "8221183: Avoid code cache walk in MetadataOnStackMark",
  "3f0955154": "8219612: compiler.codecache.stress.Helper.TestCaseImpl can't be defined in different runtime package as its nest host",
  "b77b4b254": "8220613: java/util/Arrays/TimSortStackSize2.java times out with fastdebug build",
  "82cc38398": "8218468: Load barrier slow path node should be MachTypeNode",
  "06e17e05a": "8222333: fastdebug build broken after JDK-8221393 (phase_mapping[] doesn't match enum Phase in WeakProcessorPhases)",
  "57c2735dd": "8219635: aarch64: missing LoadStore barrier in TemplateTable::fast_storefield",
  "b24f8ba2e": "8011135: (bf) CharBuffer.put(String) is slow because of String.charAt() call for each char",
  "e84f0388f": "8153413: Exceptions::_throw always logs exceptions, penalizing performance",
  "799c9a66f": "8218721: C1's CEE optimization produces safepoint poll with invalid debug information",
  "4ac927853": "8219006: AArch64: Register corruption in slow subtype check",
  "3a94607c6": "8218163: C2: Continuous deoptimization w/ Reason_speculate_class_check and Action_none",
  "8f5e561d1": "8139551: Scalability problem with redefinition - multiple code cache walks",
  "d3339d45e": "8216060: [PPC64] Vector CRC implementation should be used by interpreter and be faster for short arrays",
  "755d163e9": "8213695: gc/TestAllocateHeapAtMultiple.java is slow in some configs",
  "cb06712f5": "8220302: Better Kerberos ccache handling",
  "2cf4de1a7": "8216350: AArch64: monitor unlock fast path not called",
  "32ea2e534": "8215205: javaVFrame much slower than vframeStream",
  "f5458c589": "8188133: C2: Static field accesses in clinit can trigger deoptimizations",
  "c998ead18": "8215354: x86_32 build failures after JDK-8214074 (Ghash optimization using AVX instructions)",
  "3623c99b2": "8214074: Ghash optimization using AVX instructions",
  "0639a6303": "8214128: ARM32: wrong stack alignment on Deoptimization::unpack_frames",
  "6962adcbb": "8217747: ZGC: Minor optimization of ZLoadBarrierStubC1",
  "996968d48": "8216050: Superword optimization fails with assert(0 <= i && i < _len) failed: illegal index",
  "aef52a6e3": "8215228: Use a constant hash table size in order to enable compiler optimization",
  "3254283f7": "8210476: sun/security/mscapi/PrngSlow.java fails with Still too slow",
  "d4acf9654": "8208277: Code cache heap (-XX:ReservedCodeCacheSize) doesn't work with 1GB LargePages",
  "055ed2b78": "8214257: IC cache not clean after cleaning assertion failure",
  "e303e3131": "8214338: Move IC stub refilling out of IC cache transitions",
  "f44e59355": "8216302: StackTraceElement::fill_in can use cached Class.name",
  "44b1ed07f": "8213486: SIGSEGV in CompiledMethod::cleanup_inline_caches_impl with AOT",
  "388e1ebbb": "8210985: Update the default SSL session cache size to 20480",
  "4b45441ae": "8213033: Archive remaining primitive box caches",
  "29e742273": "8185496: Improve performance of system properties initialization in initPhase1 8213424: VersionProps duplicate and skipped initialization",
  "4b2754797": "8177899: Tests fail due to code cache exhaustion on machines with many cores",
  "80ad2c7e7": "8212995: Placing the Integer.IntegerCache and cached Integer objects in the closed archive heap region",
  "bf800514f": "8213337: windows-x64-slowdebug build is broken by 8177708",
  "9a043c50f": "8209495: NMethodSweeper::sweep_code_cache cause severe delays",
  "497de2039": "8209862: CipherCore performance improvement",
  "f7b890ae5": "8211241: Missing obj equals in TemplateTable::fast_aldc",
  "38660e946": "8170937: Swing apps are slow if displaying from a remote source to many local displays",
  "2d7d9b838": "8152910: Get performance improvement with Stable annotation",
  "90d6bbd01": "8211776: 8210887 broke arraycopy optimization when ZGC is enabled",
  "b1375858c": "8210416: [linux] Poor StrictMath performance due to non-optimized compilation",
  "6b8fd447c": "8210647: libsaproc is being compiled without optimization",
  "3cbb33f0e": "8210736: jdk/javax/xml/crypto/dsig/GenerationTests.java slow on linux",
  "ba0203b2d": "8210761: libjsig is being compiled without optimization",
  "d778b4cd2": "8210425: [x86] sharedRuntimeTrig/sharedRuntimeTrans compiled without optimization",
  "4e74846da": "8210523: runtime/appcds/cacheObject/DifferentHeapSizes.java crash",
  "052a74069": "8209544: AES encrypt performance regression in jdk11b11",
  "68f33ebd5": "8206290: Better FileChannel transfer performance",
  "6c65a9f19": "8210040: TestOptionsWithRanges.java is very slow",
  "1ddabdf0d": "8209534: [TESTBUG]runtime/appcds/cacheObject/ArchivedModuleCompareTest.java fails with EnableJVMCI",
  "5b511a4a7": "8207317: SSLEngine negotiation fail exception behavior changed from fail-fast to fail-lazy",
  "fe80e5564": "8189747: JDK9 javax.lang.model.util.Elements#getTypeElement regressed 1000x in performance",
  "c7a1b6431": "8207005: Disable the file canonicalization cache by default",
  "55cf3de09": "8209633: Avoid creating WeakEntry wrappers when looking up cached MethodType",
  "29cd9fe2e": "8194740: UseSubwordForMaxVector causes performance regression",
  "2db58ca8c": "8206394: missing ResourceMark in AOTCompiledMethod::metadata_do, AOTCompiledMethod::clear_inline_caches , CompiledMethod::clear_ic_stubs , CompiledMethod::cleanup_inline_caches_impl",
  "1682e3972": "8205055: Fix compilation optimization errors with new Solaris toolchain",
  "3f825e0a9": "8203838: javac performance regression in 11+11",
  "480062274": "8202768: [macos] Appkit thread slows when any Window Manager active",
  "da0babd9b": "8204504: Fix for 8198285 breaks slowdebug builds",
  "72a9d65a2": "8170159: Improve the performance of BitSet traversal",
  "b0af57a01": "8179098: Crypto AES/ECB encryption/decryption performance regression (introduced in jdk9b73)",
  "cd4516743": "8139876: Exclude hanging nsk/stress/stack from execution with deoptimization enabled",
  "6776b453e": "8193717: Import resolution performance regression in JDK 9",
  "313a25555": "8184030: TestUseRTMLockingOptionOnUnsupportedVM - RTM locking optimization not supported is missing",
  "d1cf230fc": "8187123: (reflect) Class#getCanonicalName and Class#getSimpleName is a part of performance issue",
  "3e3414dbf": "8203837: Split nmethod unloading from inline cache cleaning",
  "a4c593416": "8202373: Forcing eager initialization of CHM$ReservationNode avoids deoptimization",
  "eed00fcf0": "8202184: Reduce time blocking the ClassSpecializer cache creating SpeciesData",
  "3dfa260af": "8025091: VisibleMemberMap.java possible performance improvements 8198890: The standard doclet incorrectly produces wrong method signatures in certain cases",
  "a6649eb08": "8233741: AES Countermode (AES-CTR) optimization using AVX512 + VAES instructions",
  "14475e47b": "8233491: Crash in AdapterHandlerLibrary::get_adapter with CDS due to code cache exhaustion",
  "c62a6abe9": "8201490: Improve concurrent mark keep alive closure performance",
  "ffd8e19ea": "8202075: Crash when running compiler/codecache/OverflowCodeCacheTest.java",
  "eb393cd01": "8200556: AArch64: assertion failure in slowdebug builds",
  "716ac034c": "8202037: Split slow ctw_1 tests",
  "6e6a9ea8a": "8200233: Simple G1 evacuation path performance enhancements",
  "0173db08e": "8198909: [Graal] compiler/codecache/stress/UnexpectedDeoptimizationTest.java crashed with SIGSEGV",
  "6ec2cfcc4": "8202788: Explicitly reclaim cached thread-local direct buffers at thread exit",
  "97a42c860": "8199331: Don't limit debug information for fastdebug JDK native libraries",
  "d4d8c255b": "8198966: To make CoderResult.Cache.cache final and allocate it eagerly",
  "522a9d15f": "8198955: String#repeat loop optimization",
  "3a03cd060": "8187653: Lock in CoderResult.Cache becomes performance bottleneck",
  "5d3e5d927": "8197518: Kerberos krb5 authentication: AuthList's put method leads to performance issue",
  "ea27ad47f": "8199656: Make slow metaspace verifications switchable in debug builds",
  "3da040b2b": "8199518: test/hotspot/jtreg/runtime/SelectionResolution tests take a lot longer to run with fastdebug after JDK-8198423",
  "b5ae43641": "8199511: Do not generate g1_{pre|post}_barrier_slow_id without CardTable-enabled barrier set",
  "07db7c6fd": "8193369: post_field_access does not work for some functions, possibly related to fast_getfield",
  "f6ca24c05": "8164278: java.util.Base64.EncOutputStream/DecInputStream is slower than corresponding version in javax.mail package",
  "553380e69": "8196488: [aix] TOC overflow for libjvm.so in fastdebug build",
  "5e9d4e4ea": "7007967: DefaultRowSorter: incorrect sorting due to not updating comparator cache",
  "d103b59ac": "8189747: JDK9 javax.lang.model.util.Elements#getTypeElement regressed 1000x in performance",
  "4f0ea9242": "8184947: ZipCoder performance improvements",
  "a110ef1d2": "8189809: Large performance regression in Swing text layout",
  "0fa3f5ebf": "8193407: jdk/hs fails Solaris slowdebug test-image build",
  "238ca2e78": "8191216: SimpleTimeZone.clone() has a data race on cache fields",
  "1fd81dac3": "8192825: PPC64: Missing null check in C1 inline cache check",
  "11a8bac64": "8192892: Improve JrtPath::getResolved fast-path test 8175891: JrtPath::resolve off-by-one pre-sizing cause for memory pressure",
  "a908316a6": "8182755: [JVMCI] Deoptimization in synchronized methods can lead to a crash or exception when using EnableJVMCI but not UseJVMCICompiler",
  "3e52d3479": "8189845: Fix for 8157000 causes significant performance regression",
  "c2d94a007": "8189840: CheckCachedResolvedReferencesApp has no cached resolved references",
  "2ea646cc2": "8186226: Improve ConcurrentSkipListMap performance on weak memory model machines",
  "1af1d42ac": "8011352: C1: TraceCodeBlobStacks crashes fastdebug Solaris SPARC",
  "a17ce440a": "8187547: PPC64: icache invalidation is incorrect in some places",
  "844e594fe": "8187822: C2 conditonal move optimization might create broken graph",
  "2abb1c7d7": "8186738: (sl) ServiceLoader::stream doesn't update cache",
  "34622112b": "8189067: SuperWord optimization crashes with 'assert(out == prev || prev == __null) failed: no branches off of store slice'",
  "4a77945c8": "8179302: Pre-resolve constant pool string entries and cache resolved_reference arrays in CDS archive 8185924: G1NoteEndOfConcMarkClosure::doHeapRegion() does not do remembered set cleanup work for archive region",
  "263d11de6": "8179302: Pre-resolve constant pool string entries and cache resolved_reference arrays in CDS archive",
  "366e6ac79": "8180627: gc/gctests/Steal/steal001: guarantee(cp->cache() == NULL) failed",
  "a1f70549e": "7133093: Improve system dictionary performance",
  "a4fac2bab": "8180659: [s390] micro-optimization in resize_frame_absolute()",
  "b0b3a780e": "8184344: [aix] libjvm.so TOC overflow for slowdebug",
  "5c529d31c": "8185013: Disable subword vector analysis optimization until 8184995 is fixed",
  "143eab3a8": "8184337: CodeCache::get_code_cache_containing wrongly asserts that start can not be NULL",
  "43fc1b68a": "8182743: Ineffective use of volatile hurts performance of Charset.atBugLevel()",
  "5c7381d73": "8068513: Adding elements to a javascript 'object' (a map) is slow",
  "0c193dfda": "8158361: AArch64: Address calculation missed optimizations",
  "76f126d1b": "8183038: Minimal vm slowdebug build fails with undefined reference to MetaspaceShared::is_valid_shared_method",
  "d54de52f1": "8179026: Remove explicit code cache options processing",
  "9ba467589": "8181147: JNU_GetStringPlatformChars should have a fast path for UTF-8",
  "81a4918f1": "8181147: JNI_GetStringPlatformChars should have a fast path for UTF-8 8182451: Inconsistency between String.getBytes('Cp1252') and JNU_GetStringPlatformChars",
  "5d2b14d19": "8179882: C2: Stale control info after cast node elimination during loop optimization pass",
  "7a4f23e55": "8179389: X509Certificate generateCRLs is extremely slow using a PEM crl list",
  "95093ee7f": "8178968: AArch64: Remove non-standard code cache size",
  "065a8981f": "8181868: Remove use of 'has_fast_fxtof()'",
  "3e624c317": "8162928: Micro-optimizations in scanning the remembered sets",
  "f820e2f2e": "8166848: Performance bug: SystemDictionary - optimization",
  "961c25100": "8177963: Parallel GC fails fast when per-thread task log overflows",
  "3be6ab78e": "8177631: Outdated performance advice in StringCoding",
  "ab97b96be": "8177567: cache VisibleMemberMap",
  "c40d2d5af": "8176593: Throwable::getStackTrace performance regression",
  "3d264c5a7": "8072114: javac performance should be improved",
  "e0ddba9b9": "8176102: Rename hotspot_fast* test groups to hotspot_tier1*",
  "5ae76b508": "8175261: Per-protocol cache setting not working for JAR URLConnection",
  "240fd78fc": "8174985: NTLM authentication doesn't work with IIS if NTLM cache is disabled",
  "1c03567bb": "8173581: performance regression in com/sun/crypto/provider/OutputFeedback.java",
  "f3fcb0ec7": "8172844: Assert fails in deoptimization due to original PC at the end of code section",
  "721001933": "8173117: Compilation significantly slower after JDK-8169197",
  "b9e2a5384": "8173699: Crash during deoptimization with 'assert(result == __null || result->is_oop()) failed: must be oop'",
  "95a45889e": "8172921: Zip filesystem performance improvement and code cleanup",
  "85b40fde0": "8037325: Class.getConstructor() performance regression",
  "446836d83": "8166187: Regression: NPE during reparse when using persistent code cache and optimistic types",
  "c104608e3": "8172017: Two tests sun/security/krb5/auto/ReplayCacheTestProc.java and rcache_usemd5.sh fail on Solaris",
  "9c8183b4a": "8170814: Reuse cache entries (part II)",
  "3e707c367": "8176102: Rename hotspot_fast* test groups to hotspot_tier1*",
  "f6acd61df": "8170767: Zero fastdebug build triggers assertion",
  "d08eb8c2a": "8170831: ZipFile implementation no longer caches the last accessed entry/pos",
  "df8736b78": "8158517: Minor optimizations to ISO10126PADDING",
  "36779a0df": "8170733: HashMap.HashIterator.remove method does not use cached value for the hash code",
  "7257873cb": "8170153: PPC64/s390x/aarch64: Poor StrictMath performance due to non-optimized compilation",
  "99684f14f": "8170153: PPC64/s390x/aarch64: Poor StrictMath performance due to non-optimized compilation",
  "801a14a0e": "8076577: Do not allow ccache prior to 3.2 on macosx",
  "62fe00f62": "8169751: sun/security/krb5/auto/rcache_usemd5.sh fails on solaris",
  "3630a6a4f": "8168500: (se) EPollArrayWrapper optimization for update events should be robust to dynamic changes in file descriptor resource limits",
  "d55905fe1": "8156079: consider making empty instances singletons 8169222: minor immutable collections optimizations",
  "e10da9956": "8168518: rcache interop with krb5-1.15",
  "cbdf3828d": "8170098: AArch64: VM is extremely slow with JVMTI debugging enabled",
  "df8bbfafc": "8167656: Unstable MethodHandle inlining causing huge performance variations",
  "f53059ee3": "8163520: Reuse cache entries",
  "8049802fc": "8146257: sun/net/www/protocol/jar/B4957695.java fails intermittently with java.lang.RuntimeException: some jar_cache files left behind",
  "da8b135bc": "8167479: arm 32/64 slowdebug fails to build on unpack200",
  "33ae322e2": "8157623: Make --enable-ccache work properly with CCACHE from the environment",
  "698c52a1e": "8166988: Improve image processing performance",
  "dd45be3f4": "8168770: Fix for 8151988 causes performance regression on SPARC",
  "04e0dfd1e": "8166591: [macos 10.12] Trackpad scrolling of text on OS X 10.12 Sierra is very fast (Trackpad, Retina only)",
  "5735e2f33": "8166948: Exploded image too slow to be usable",
  "7995a7872": "8166948: Exploded image too slow to be usable",
  "371c29a65": "8164852: Move slow tier1/tier2 runtime tests to later tiers",
  "453166437": "8165372: StackWalker performance regression following JDK-8147039",
  "e1f4b79e9": "8157992: Improve jlink help message on optimization-related options",
  "ebb0356d3": "8064892: Non-methods code cache overflow is not handled correctly",
  "7c11898ff": "8164319: CLHSDB dumpcodecache throws StackOverflowError",
  "d7fd2d916": "8164189: Collectors.toSet() parallel performance improvement",
  "c0cfad4f3": "8151345: compiler/codecache/jmx/PeakUsageTest.java is failing on jdk9/dev for JPRT -testset hotspot",
  "5b54998a2": "8129376: SPECjvm98-client performance regression in 9-b66",
  "e3c3a54f7": "8133740: NMT for Linux/x86/x64 and bsd/x64 slowdebug builds includes NativeCallStack::NativeCallStack() frame in backtrace",
  "dfce7d89b": "8163366: compiler/codecache/jmx/ThresholdNotificationsTest.java doesn't set -XX:+UnlockDiagnosticVMOptions while using WB",
  "432e69e8f": "8160083: compiler.codecache.jmx.InitialAndMaxUsageTest can not be used w/ disabled SegmentedCodeCache",
  "91f070660": "8163243: [TESTBUG] compiler/codecache/jmx/UsageThresholdIncreasedTest.java failed with: Failed to find sun/hotspot/WhiteBox.class",
  "8d7182f2a": "8157498: compiler/codecache/jmx/InitialAndMaxUsageTest.java times out on 32-bit platforms",
  "66630877b": "8148548: [Linux/Solaris] debuginfo and fastdebuginfo bundle contains demo info",
  "d9c6c4744": "8159638: Improve array caches and renderer stats in Marlin renderer",
  "68a523601": "8162439: Runtime.Version.parse needs fast-path for major versions",
  "5599ff526": "8156959: compiler/codecache/jmx/UsageThresholdExceededSeveralTimesTest.java fails with exit 134",
  "103caee30": "6591280: getting IPP connection causes disabling jar caches",
  "2d98fa482": "8161203: ResourceBundle.getBundle performance regression",
  "78d6b5e1c": "8160721: Avoid deoptimizations in Font.equals",
  "43e27faa9": "8160435: Source.baseURL is slow for URLs with unregistered protocol",
  "9f373603a": "8159167: [JVMCI] fix HotSpotVMConfig startup performance",
  "18e69df0e": "8157495: SHA-3 Hash algorithm performance improvements (~12x speedup)",
  "3fddb3692": "8159244: Partially initialized string object created by C2's string concat optimization may escape",
  "c36a7cfd2": "8158149: test bug for SystemModuleFinder when fast path is supported",
  "99b0f7996": "8068764: java/lang/ClassLoader/ExtDirs.java failed with java.lang.IllegalThreadStateException with fastdebug",
  "75909b48f": "8157841: aarch64: prefetch ignores cache line size",
  "769459656": "8157834: aarch64: Hello World crashes with fastdebug build",
  "f18e025eb": "8157574: Mac fastdebug bundles have wrong directory layout",
  "847a2d2de": "8157555: com/sun/jdi/RedefineClearBreakpoint.sh times out due to Indify String Concat being slow in debug mode",
  "81a0fa24d": "8149901: [Solaris] Use of -XX:+UseThreadPriorities crashes fastdebug",
  "6986e9dca": "6477756: GraphicsDevice.getConfigurations() is slow taking 3 or more seconds",
  "a8a3dae37": "8160411: SIGSEGV in frame::safe_for_sender on incomplete DeoptimizationBlob frame",
  "b45ea8903": "6328855: String: Matches hangs at short and easy Strings containing \r \n 6192895: java.util.regex.Matcher: Performance issue 6345469: java.util.regex.Matcher utilizes 100% of the CPU 6988218: RegEx matcher loops 6693451: RegEx matcher goes into infinite delay 7006761: Matcher.matches() has infinite loop 8140212: Slow performance of Matcher.find 8151481: j.u.regex.Pattern cleanup 6609854: Regex does not match correctly for negative nested character classes 4916384: CANON_EQ supports only combining character sequences with non-spacing marks 4867170: Pattern doesn't work with composite character in CANON_EQ mode 6995635: CANON_EQ pattern flag is buggy 6728861: ExceptionInInitializerError is caught when the pattern has precomposed character 6736245: A character in Composition Exclusion Table does not match itself 7080302: the normalization in java regex pattern may have flaw",
  "d3f1fdbc0": "8150496: (zipfs) Fix performance issues in zip-fs 8150366: (zipfs) lastAccessTime and createTime returned as null instead of default value",
  "28efea675": "8156126: LogCompilation: Dump additional info about deoptimization events",
  "6db653621": "8155600: Performance optimization of Arrays.asList().iterator()",
  "fe4860fe5": "8155214: java/lang/invoke/PermuteArgsTest.java fails due to exhausted code cache",
  "2b0d77bef": "8154739: AArch64: TemplateTable::fast_xaccess loads in wrong mode",
  "6c9522048": "8154174: Improve JitTester performance",
  "9bb620e36": "8154394: Bad test for ENABLE_SJAVAC in build-performance.m4",
  "247189626": "8150641: Repeated compilation with a long classpath significantly slower on JDK 9",
  "589c46da4": "8152115: (proxy) Examine performance of dynamic proxy creation",
  "611e659be": "8153267: nmethod's exception cache not multi-thread safe",
  "b26b78a4d": "8067247: Crash: assert(method_holder->data() == 0 ...) failed: a) MT-unsafe modification of inline cache",
  "69d14c811": "8072422: Cleanup: Remove some unused flags/code in loop optimizations",
  "3a6485928": "8067247: Crash: assert(method_holder->data() == 0 ...) failed: a) MT-unsafe modification of inline cache",
  "8496a7c53": "8067247: Crash: assert(method_holder->data() == 0 ...) failed: a) MT-unsafe modification of inline cache",
  "3a33180c0": "8151348: quarantine compiler/codecache/jmx/PeakUsageTest.java in JDK9-dev",
  "90771aaba": "8150319: ScheduledExecutorTest:testFixedDelaySequence timeout with slow VMs",
  "fbca99beb": "8134119: Use new API to get cache line sizes",
  "103aff334": "8146801: Allocating short arrays of non-constant size is slow",
  "ac6fe07b0": "8141618: Change JVMCI compilerToVM constant pool tests to support CP cache",
  "a026f88a3": "8067014: LinearScan::is_sorted significantly slows down fastdebug builds' performance",
  "719c59724": "8098581: SecureRandom.nextBytes() hurts performance with small size requests",
  "e41fea88e": "8148115: Stream.findFirst for unordered source optimization",
  "16f749ef4": "8148751: [TESTBUG] compiler/whitebox/AllocationCodeBlobTest.java fails due to unexpected code cache allocation",
  "7b4b8a2ee": "8169041: com/sun/corba/cachedSocket should be added to exclusiveAccess.dirs",
  "7a379cb6b": "8146403: Windows build can be faster",
  "264f84a2f": "8146403: Windows build can be faster",
  "40987b7c0": "8085903: New fix for memory leak in ProtectionDomain cache",
  "8f8cd2d81": "8146736: Move sun.misc performance counters to jdk.internal.perf",
  "ed581c190": "8146736: Move sun.misc performance counters to jdk.internal.perf",
  "2ed4c9cc8": "8146736: Move sun.misc performance counters to jdk.internal.perf",
  "ea1091ca7": "8146286: aarch64: guarantee failures with large code cache sizes on jtreg test java/lang/invoke/LFCaching/LFMultiThreadCachingTest.java",
  "83e2c4bdf": "8145564: 8036003: startup regression on linux fastdebug builds",
  "85c44d968": "8145427: [aix] xlc: wrong flag used to switch off optimization",
  "a82be0112": "8071374: -XX:+PrintAssembly -XX:+PrintSignatureHandlers crash fastdebug VM with assert(limit == __null || limit <= nm->code_end()) in RelocIterator::initialize",
  "c19bf5ef4": "8145212: ISO-8859-1 isn't properly handled as 'fastEncoding' in jni_util.c",
  "c095394bc": "8144498: aarch64: large code cache generates SEGV",
  "dc93a924e": "6856817: Poor performance of Writer#append with CharBuffer",
  "875bccb11": "8067767: type inference performance regression",
  "81c502660": "8029574: TreeMap: optimization of method computeRedLevel()",
  "816a40ae0": "8147468: Allow users to bound the size of buffers cached in the per-thread buffer caches",
  "ff90534bb": "8141678: sun.invoke.util.Wrapper eagerly initializes all integral type caches",
  "261e7583a": "8069330: Adjustment of concurrent refinement thresholds does not take hot card cache into account",
  "cb20fc207": "8000316: Huge performance bottleneck in com.sun.tools.javac.comp.Check.localClassName",
  "8a269a674": "8134607: Remove per-compiler performance counters",
  "279a05d2b": "8072682: getBounds call on graphics.getDeviceConfiguration() returning cached information",
  "6aec53bd9": "8139086: Solaris/Sparc slowdebug build fails for memset_with_concurrent_readers.cpp",
  "8c5566230": "8146403: Windows build can be faster",
  "6947623b7": "8134607: Remove per-compiler performance counters",
  "4becd274e": "8077874: [TESTBUG] com/sun/corba/cachedSocket/7056731.sh should not be run on JRE",
  "8ac86c17f": "8061436: Processing of options related to segmented code cache should be enhanced",
  "6ed8c2358": "8141624: Limit calculation of pre loop during super word optimization is wrong",
  "5d86db4b6": "8067378: Add segmented code heaps info into jfr events: vm/code_cache/stats and vm/code_cache/config",
  "981c6dc29": "8078093: Severe compiler performance regression Java 7 to 8 for nested method invocations",
  "ed2b735ba": "8134915: Improve performance of CLDRLocaleProviderAdapter.getCandidateLocales",
  "70993527e": "8087292: nashorn should have a 'fail-fast' option for scripting, analog to bash 'set -e'",
  "2f46e61a8": "8129962: Investigate performance improvements in langtools combo tests",
  "7b6480cfa": "8134493: Cleaning inline caches of unloaded nmethods should be done in sweeper",
  "d883302b0": "8134403: Nashorn react.js benchmark performance regression",
  "c2255f8c9": "8075171: Contended Locking fast notify bucket",
  "d7f565d9e": "8075171: Contended Locking fast notify bucket",
  "88a6ccaaa": "8131782: C1 Class.cast optimization breaks when Class is loaded from static final",
  "981dbca21": "8131486: SecureClassLoader key for ProtectionDomain cache also needs to take into account certificates",
  "f1d95bc67": "8079156: [TESTBUG] 32 bit Java 9-fastdebug hit assertion in client mode with StackShadowPages flag value from 32 to 50",
  "562e4371a": "8087201: OGL: rendering of lcd text is slow",
  "fba308328": "8129937: compiler/codecache/jmx/UsageThresholdIncreasedTest.java fails with 'Usage threshold was hit'",
  "934ad8e49": "8079775: Java 9-fastdebug ia32 Error: Unimplemented with '-XX:CompilationPolicyChoice=1 -XX:-TieredCompilation' options 8079062: Java 9-fastdebug crash(hit assertion) with '-XX:CompilationPolicyChoice=1 -XX:-TieredCompilation' options",
  "e5f22567a": "8130008: compiler/codecache/jmx/UsageThresholdIncreasedTest.java should be quarantined",
  "1a88faab8": "8129757: ppc/aarch: Fix passing thread to runtime after '8073165: Contended Locking fast exit bucket.'",
  "36d62dcbb": "8080945: Improve the performance of primitive Arrays.sort for certain patterns of array elements",
  "31e48bc56": "8039262: Java compiler performance degradation jdk1.7 vs. jdk1.6 should be amended",
  "7b960a2e5": "8081022: java/time/test/java/time/format/TestZoneTextPrinterParser.java fails by timeout on slow device",
  "13711e78f": "8071306: GUI perfomance are very slow compared java 1.6.0_45",
  "f79ca89ac": "8074002: java.time.ZoneId.systemDefault() should be faster",
  "4f33aa234": "8041654: OutOfMemoryError: RepaintManager doesn't clean up cache of volatile images",
  "cbe55b316": "8071571: Move substring of same string to slow path",
  "18f713525": "8079135: C2 disables some optimizations when a large number of unique nodes exist",
  "608c2ef49": "8061254: SPECjvm2008-XML performance regressions in 9-b33",
  "d7f446589": "8029098: Exclude javax/management/remote/mandatory/notif/ListenerScaleTest.java from running on fastdebug builds",
  "e21c57f2a": "8076104: Key collisions in ZipFileIndexFileObject content cache lead to wrong content",
  "43a5abc87": "8078497: C2's superword optimization causes unaligned memory accesses",
  "a692523e9": "8079359: disable JDK-8061553 optimization while JDK-8077392 is resolved",
  "08e8a63ab": "8078612: Persistent code cache should support more configurations",
  "add46c476": "8078666: JVM fastdebug build compiled with GCC 5 asserts with 'widen increases'",
  "f7c143cbb": "8073705: more performance issues in class redefinition",
  "642e0ac6f": "8078369: [testbug] java/time/tck/java/time/TCKOffsetTime[now] fails on slow devices",
  "883ba1923": "8077402: JMXStartStopTest fails intermittently on slow hosts",
  "a880f3d13": "8078563: Restrict reduction optimization",
  "7840b0e7c": "8059455: LambdaForm.prepare() does unnecessary work for cached LambdaForms",
  "a000d5154": "8077955: Undeclared globals in eval code should not be handled as fast scope",
  "884f0d320": "8073165: Contended Locking fast exit bucket",
  "89256b01c": "8066679: jvmtiRedefineClasses.cpp assert cache ptrs must match",
  "23908e7eb": "7042645: Numerous api/java_awt jck tests fail - AWT Assertion Failure on fastdebug ri bundles b138 win7 x86",
  "0a0a22f7e": "8058354: SPECjvm2008-Derby -2.7% performance regression on Solaris-X64 starting with 9-b29",
  "80819a736": "8058354: SPECjvm2008-Derby -2.7% performance regression on Solaris-X64 starting with 9-b29",
  "eaf7ce63d": "8078349: remove dead code - fast_iagetfield",
  "0f4227cfd": "8075231: Typed array setters are very slow when index exceeds capacity",
  "d4860ee85": "8071546: hotspot/test/compiler/codecache/jmx/PoolsIndependenceTest.java has been fixed, but still is in the exclude list",
  "1b5090da9": "8076968: PICL based initialization of L2 cache line size on some SPARC systems is incorrect",
  "9e55e44c8": "8074981: Integer/FP scalar reduction optimization",
  "f82562e36": "8075443: AARCH64: Missed L2I optimizations in C2",
  "24c51e1e1": "8048838: type inference performance regression",
  "e834a4810": "8130309: Need to bailout cleanly if creation of stubs fails when codecache is out of space",
  "5449ba922": "8076173: VirtualSpaceNode container_count() and container_count_slow() have different return types",
  "7b384c695": "8061205: MetadataOnStackMark only needs to walk code cache during class redefinition",
  "33c1f7d18": "8075774: Small readability and performance improvements for zipfs",
  "a6d31e225": "8074048: ccache 1.3.10 still not detected properly",
  "37cfc9fb6": "8073257: compiler/codecache/stress/RandomAllocationTest.java + fastdebug + -XX:+LogCompilation, 'allocating without ResourceMark'",
  "88848bd9e": "6912521: System.arraycopy works slower than the simple loop for little lengths",
  "c71eca0cb": "8068461: compiler/codecache/jmx/UsageThresholdIncreasedTest.java failed: java.lang.RuntimeException: Usage threshold was hit: 1 times for CodeHeap 'non-nmethods'",
  "a9e28164e": "8061553: Contended Locking fast enter bucket",
  "24bc77380": "8062223: Upgrading to ccache 1.3.10 disables the use of ccache",
  "5c3507989": "8069072: GHASH performance improvement",
  "01716f18f": "8071821: Assert failed in UnexpectedDeoptimizationTest.java",
  "e6ac3ca09": "8072016: Array copy may cause infinite cycle of deoptimization/compilation",
  "d4e635337": "8062141: Various performance issues parsing JSON",
  "87ac24f1e": "8071995: compiler/codecache/jmx/InitialAndMaxUsageTest.java fails with large pages",
  "efd80ec6a": "8068915: uncommon trap w/ Reason_speculate_class_check causes performance regression due to continuous deoptimizations",
  "ad9c86bc9": "8064940: JMH javac performance regressions on solaris-sparcv9 in 9-b34",
  "fb6e6379b": "8069125: compiler/codecache/stress tests timeout in nightlies",
  "427f25366": "8068385: [TESTBUG] hotspot/test/compiler/codecache/jmx/PoolsIndependenceTest.java sometimes fails(unstable behaviour)",
  "bdccde66c": "8069021: Exclude compiler/codecache/stress tests from JPRT runs",
  "21cd501d2": "8069590: AIX port of '8050807: Better performing performance data handling'",
  "c041b882e": "8068746: Exclude hotspot/test/compiler/codecache/jmx/PoolsIndependenceTest.java from nightly runs",
  "ea23edb88": "8059625: JEP-JDK-8043304: Test task: DTrace- tests for segmented codecache feature",
  "c2cd1906d": "8066669: dust.js performance regression caused by primitive field conversion",
  "cb05b8a49": "8058446: G1 Hot card cache should use ArrayAllocator to allocate the cache array",
  "0dbf9d716": "8067144: SIGSEGV with +TraceDeoptimization in Deoptimization::print_objects",
  "8bb3ef2ca": "8066508: JTReg tests timeout on slow devices when run using JPRT",
  "ea89dad13": "8057020: LambdaForm caches should support eviction",
  "3a8d0b8ce": "8072434: 8064457: introduces performance regressions in 9-b47",
  "bb207a1cc": "8072692: Improve performance of SecurityManager.checkPackageAccess",
  "b07bdeb8b": "8067005: Several java/lang/invoke tests fail due to exhausted code cache",
  "ef64d5393": "8064701: Some CDS optimizations should be disabled if bootclasspath is modified by JVMTI",
  "3f915eeaf": "8050807: Better performing performance data handling",
  "bdac82281": "8059624: Test task: WhiteBox API for testing segmented codecache feature",
  "043a07e65": "8062386: Different versions of nashorn use same code cache directory",
  "1c866d843": "8062250: [TESTBUG] compiler/codecache/CheckSegmentedCodeCache.java fails after CodeCacheMinimumFreeSpace removal",
  "4c036f573": "8037842: Failing to allocate MethodCounters and MDO causes a serious performance drop",
  "8cd1a874e": "8059780: SPECjvm2008-MPEG performance regressions on x64 platforms",
  "4725c2509": "8058547: Memory leak in ProtectionDomain cache",
  "f571816c7": "8060241: Immediately invoked function expressions cause lot of deoptimization",
  "f1ab0fae7": "8049737: Contended Locking reorder and cache line bucket",
  "d30a6e88b": "8059943: [macosx] Aqua LaF should use BI.TYPE_INT_ARGB_PRE for a better performance",
  "2134f7554": "8059938: NPE restoring cached script with optimistic types disabled",
  "8bef42ee6": "8058695: [TESTBUG] Reinvokers with arity >253 can't be cached",
  "72eb3f064": "8059390: code cache fills up for bigapps/Weblogic+medrec/nowarnings",
  "20abfd774": "8058661: Compiled LambdaForms should inherit from Object to improve class loading performance",
  "ad7e67c98": "8058564: Tiered compilation performance drop in PIT",
  "5e63b8cfc": "8057109: manual cleanup of white space issues prior to Contended Locking reorder and cache line bucket",
  "e1a36d62a": "8057107: cleanup indent white space issues prior to Contended Locking reorder and cache line bucket",
  "693c89e3b": "8038261: JSR292: cache and reuse typed array accessors",
  "4d6624b43": "8057696: java -version triggers assertion for slowdebug zero builds",
  "5db7b3a4e": "8056124: Hotspot should use PICL interface to get cacheline size on SPARC",
  "d90a333e5": "8053998: Hot card cache flush chunk size too coarse grained",
  "b0b75a537": "8056913: Limit the size of type info cache on disk",
  "635e35d00": "8057037: Verification in ClassLoaderData::is_alive is too slow",
  "4bca3ec0b": "8056050: runExternalJsTest method in test/jdk/nashorn/internal/runtime/ClassFilter.java slows down 'ant test'",
  "250fbb065": "8049228: Improve multithreaded scalability of InetAddress cache 7186258: InetAddress$Cache should replace currentTimeMillis with nanoTime for more precise and accurate",
  "bc41f7d7e": "8055095: Improve 'do nothing' incremental build performance after modularized source code integration",
  "74d5ddea1": "8055095: Improve 'do nothing' incremental build performance after modularized source code integration",
  "6f75087c9": "8027480: Build Windows x64 fastdebug builds using /homeparams",
  "ad89797fb": "8055635: Missing include in g1RegionToSpaceMapper.hpp results in unresolved symbol of fastdebug build without precompiled headers",
  "391a556d1": "8054817: File ccache only recognizes Linux and Solaris defaults",
  "99237ec5d": "8047952: Remove _FORTIFY_SOURCE from fastdebug and slowdebug builds",
  "957078829": "8047952: Remove FORTIFY_SOURCE from fastdebug and slowdebug builds",
  "f2ebff72b": "8054993: type info cache may be disabled for test262 and tests explicitly changing that property should use @fork",
  "5ef677511": "8048025: Ensure cache consistency",
  "b79daf935": "8054221: StringJoiner imlementation optimization",
  "7d0337349": "8060479: [TESTBUG] compiler/codecache/CheckSegmentedCodeCache.java test fails with product build",
  "e56234c6c": "8054013: run hotspot JTREG compiler tests only on fastdebug platforms and also on macosx",
  "023c23b23": "8054013: run hotspot JTREG compiler tests only on fastdebug platforms and also on macosx",
  "4c9f643e1": "8054292: code comments leak in fastdebug builds",
  "377f09b1f": "8071726: Better RSA optimizations",
  "4e83db432": "8049252: VerifyStack logic in Deoptimization::unpack_frames does not expect to see invoke bc at the top frame during normal deoptimization",
  "6a2504398": "8044659: Java SecureRandom on SPARC T4 much slower than on x86/Linux",
  "23f341125": "8006627: UUID to/from String performance should be improved by reducing object allocations",
  "1439e307d": "8050972: Concurrency problem in PcDesc cache",
  "a06d36cad": "8049717: expose L1_data_cache_line_size for diagnostic/sanity checks",
  "287671432": "8047104: cleanup misc issues prior to Contended Locking reorder and cache",
  "3e0fd9922": "8048586: String concatenation with optimistic types is slow",
  "147f6a092": "8048298: Clang needs to lower optimization level for some files",
  "b531babf0": "8043541: 'fastdebug' is printed twice in java -version",
  "fa6b22061": "8022968: Some codecache allocation failures don't result in invoking the sweeper",
  "f4c68a9cf": "8046921: Deoptimization type information peristence",
  "bc8c6370e": "8046611: Build errors with gcc on sparc/fastdebug",
  "d8ce93cea": "6642881: Improve performance of Class.getClassLoader()",
  "f5e233d84": "8049244: XML Signature performance issue caused by unbuffered signature data",
  "aa12c8fbf": "6642881: Improve performance of Class.getClassLoader()",
  "ea1882be4": "8048073: Cannot read ccache entry with a realm-less service name",
  "0a5b921c1": "8038321: RMIConnector_NPETest.java can't start rmid if running on fastdebug or Solaris-sparc",
  "92675f527": "8038392: Generating prelink cache breaks JAVA &#39;jinfo&#39; utility normal behaviour",
  "1694fa432": "8046499: nativecache.c prints to stdout in debug build",
  "075ea2546": "8046226: assert(_thread == Thread::current()) failed: thread must be current w/ -XX:+TraceDeoptimization -XX:+Verbose",
  "ea992354d": "8046014: MultiGlobalCompiledScript should cache :createProgramFunction handle",
  "61a1a26d7": "8041129: [OGL] surface->sw blit is extremely slow 8017626: [OGL] Translucent VolatileImages don't paint correctly",
  "4d074d630": "8005873: JRuby test_respond_to.rb asserts with: MT-unsafe modification of inline cache",
  "a6e90a4ba": "8044012: Integrate the latest best known performance flags int ant octane jobs, and make sure that it's easy to compare 'ant octane-nashorn' and 'ant octane-v8' at the push of a button. (or rather; the entry of a command line)",
  "8bd4b5624": "8030976: Untaken paths should be more vigorously pruned at highest optimization level",
  "9e710c30f": "8043551: [TESTBUG] sun/tools/jcmd/TestJcmdSanity.java failure in nightly jdk9-dev fastdebug build",
  "26308e1cd": "8034206: Make parts of code pipeline reusable in order to facilitate faster warmup and faster lazy compilation",
  "c336175c9": "8038212: Method::is_valid_method() check has performance regression impact for stackwalking",
  "b0873269d": "8043235: Type-based optimizations interfere with continuation methods",
  "6242ce6c5": "8043002: Improve performance of Nashorn equality operators",
  "b705fef9d": "8041697: CompiledScript slower when eval with binding",
  "ff3717e71": "8040085: dtrace/jsdt tests crash on solaris. found an unadvertised bad scavengable oop in the code cache",
  "60a0f257d": "8040078: Avoid repeated reading of source for cached loads",
  "0ef4fb710": "8040140: System.nanoTime() is slow and non-monotonic on OS X",
  "bdad6d51d": "8040747: Improve performance of IP address parsing",
  "89f65d600": "8040089: Apply to call transform was incomplete. Now passes all tests and performance is back",
  "aa0087826": "8027553: Change the in_cset_fast_test functionality to use the G1BiasedArray abstraction",
  "4841e826d": "8038939: Some options related to RTM locking optimization works inconsistently",
  "eea84b4fe": "8039348: -XX:+TraceDeoptimization -XX:+Verbose -Xcomp can crash VM",
  "3273c46da": "8038262: Workaround for ccache in vm.make is missing for aix",
  "6202e3a60": "8030780: test/com/sun/corba/cachedSocket/7056731.sh leaves HelloServer behind",
  "ca1752f33": "8033334: Make sure that scope depth information is maintained in the RecompilableScriptFunctionDatas, to avoid unnecessary slow proto linkage when doing on demand compilation",
  "1a95f3a40": "8035735: Metaspace::contains become extremely slow in some cases",
  "8d4fc394e": "8035836: Array performance improvements",
  "a07b2194f": "8036860: Pad and cache-align the BiasedMappedArray",
  "cde8aa670": "8035815: Cache-align and pad the from card cache",
  "856f5c582": "8027827: Improve performance of catchException combinator 8034120: MethodHandles.catchException doesn't handle VarargsCollector right",
  "a6354ef8f": "8035904: Solaris fastdebug builds are failing",
  "74db1cc75": "8035970: PPC64: fix ad file after 8027754: Enable loop optimizations for loops with MathExact",
  "493557fc9": "8031752: Failed speculative optimizations should be reattempted when root of compilation is different",
  "dbc858114": "8035326: Assume non-NULL references in G1CollectedHeap::in_cset_fast_test",
  "6ec684397": "8034068: Label.toString performance improvement",
  "3eb1ac89c": "8028735: runtime/RedefineObject/TestRedefineObject.java interrupted (timed out?) on solaris_sparcv9-fastdebug-c2-runtime and solaris_x64-debugOpen-c2-runtime",
  "8cdace257": "8032012: String.toLowerCase/toUpperCase performance improvement",
  "26689adbd": "8042778: Getting all visible methods in ReferenceTypeImpl is slow",
  "ad5f12b1f": "8027584: Disable ccache by default",
  "0b85ee832": "8027754: Enable loop optimizations for loops with MathExact inside",
  "7591b3dd8": "7015395: [TESTBUG] runtime/6626217/Test6626217.sh fails if compilation happens fast enough for timestamps to be equal",
  "2f84f7d5f": "7194669: CodeCache::mark_for_deoptimization should avoid verifying dependencies multiple times",
  "8ce7c46ec": "8020277: Young GC could be extremely slow due to assertion in ObjectStartArray::object_starts_in_range 8009462: Young GC's (ParNewGC and SerialGC) have unexpected variances",
  "4bb363185": "8027476: Improve performance of Stringtable unlink 8027455: Improve symbol table scan times during gc pauses",
  "368816ed8": "8034033: [parfait] JNI exception pending in share/native/sun/security/krb5/nativeccache.c",
  "97d83a1cd": "8030089: java/util/zip/ZipFile/FinalizeZipFile.java intermittently fails with fastdebug builds",
  "f7868d329": "8031046: Native Windows ccache might still get unsupported ticket",
  "3a3cc4bad": "8026300: VM warning: increase O_BUFLEN in ostream.hpp -- output truncated occurs with fastdebug VM when printing flags",
  "5f4d0e9c2": "8028993: Full collections with ParallelScavenge slower in JDK 8 compared to 7u40",
  "63f7ba004": "8025277: Add -XX: flag to print code cache sweeper statistics",
  "2656f6d60": "8029091: Bug in calculation of code cache sweeping interval",
  "234b4044b": "8028109: compiler/codecache/CheckReservedInitialCodeCacheSizeArgOrder.java crashes in RT_Baseline",
  "e820946a1": "8028126: nsk/jvmti/scenarios/hotswap/HS101/hs101t006 Crashed the vm on Solaris-sparc64 fastdebug builds: only current thread can flush its registers",
  "22478ae2e": "8027675: Full collections with Serial slower in JDK 8 compared to 7u40",
  "a7c123880": "8028471: PPC64 (part 215): opto: Extend ImplicitNullCheck optimization",
  "6c4294c2d": "6703075: (process) java/lang/ProcessBuilder/Basic.java fails with fastdebug",
  "18ca4cc30": "8027593: performance drop with constrained codecache starting with hs25 b111",
  "5d27126a4": "8023462: TEST_BUG: test/com/sun/net/httpserver/bugs/B6433018.java fails on slow/single core machine",
  "d8b9e9f68": "8027968: Adapt PPC to 8024927: Nashorn performance regression with CompressedOops",
  "bb01d169d": "8024635: Caching MethodType's descriptor string improves lambda linkage performance",
  "535b48955": "8027616: Off by one error in putback for compressed oops nashorn performance improvement",
  "e95f42858": "8024633: Lambda linkage performance - initialize generated class earlier",
  "7055290bb": "8024637: Lambda linkage performance - use reflection instead of ASM to manipulate parameter types 8023984: Lambda linkage performance - use a method ref to a static factory instead of a ctor ref",
  "3e6630c07": "8024927: Nashorn performance regression with CompressedOops",
  "fd2c7a374": "8024660: TEST_BUG: java/lang/ProcessBuilder/*IOHandle.java leaving hotspot.log open in fastdebug builds",
  "d68110003": "8026701: Array.prototype.splice is slow on dense arrays",
  "46736337e": "8025909: Lambda Library Spec Updates 8024179: Document limitations and performance characteristics of stream sources and operations 8024138: (Spec clarification) Lambda Metafacory spec should state DMH constraint on implMethod",
  "c3a2245bb": "6804470: JvmstatCountersTest.java test times out on slower machines",
  "811bbcded": "8008733: Psr:perf:osb performance regression (18%) in wss_bodyenc",
  "d5dda0a43": "8026167: Class cache/reuse of 'eval' scripts results in ClassCastException in some cases",
  "62ee211c8": "8024761: JSR 292 improve performance of generic invocation",
  "3b34e78d2": "8024838: Significant slowdown due to transparent huge pages",
  "e2466c150": "8025004: -XX:+CheckUnhandledOops asserts for JDK 8 Solaris fastdebug binaries",
  "b364358af": "8024990: JT_JDK: 11 failures with SIGSEGV on arm-sflt platforms in nightly fastdebug build",
  "84fd9150e": "8014447: Object.hashCode intrinsic breaks inline caches",
  "0dee555ea": "8020151: PSR:PERF Large performance regressions when code cache is filled",
  "00c37e4e9": "8024895: xrender MaskImage cache isn't accounting for change in alpha",
  "2cab7ea03": "8024718: Metaspace performance counters and memory pools should report the same data",
  "d8b770b0c": "8024261: xrender: improve performance of small fillRect operations",
  "451ff188a": "8013938: Native OOME on fastdebug VM on Solaris",
  "e2940a0e2": "8023639: Difference between LocalTime.now(Clock.systemDefaultZone()) and LocalTime.now() executed successively is more than 100 000 000 nanoseconds for slow machines",
  "0f6bcbe0b": "8024050: Incorrect optimization level and comment specified for unsafe.cpp",
  "98c327bc7": "8009062: poor performance of JNI AttachCurrentThread after fix for 7017193",
  "ef64db06e": "8014659: NPG: performance counters for compressed klass space",
  "5d8a44e11": "8023228: Debugger information gather is too slow",
  "dac98bcc0": "8023472: C2 optimization breaks with G1",
  "b81e7785d": "8016127: NLS: logging.properties translatability recommendation 8024131: Issues with cached localizedLevelName in java.util.logging.Level",
  "dc14220ea": "8016594: Native Windows ccache still reads DES tickets",
  "4ee53ef4e": "8021898: Broken JIT compiler optimization for loop unswitching",
  "3ea9481c2": "8014659: NPG: performance counters for compressed klass space",
  "4ca00ef5a": "8020531: Test compiler/codecache/CheckUpperLimit.java fails when memory limited",
  "3dfcb4125": "8020309: Eliminate InstanceKlass::_cached_class_file_len",
  "1338c067a": "8007898: Incorrect optimization of Memory Barriers in Matcher::post_store_load_barrier()",
  "1bc320c73": "8015635: Crash when specifying very large code cache size",
  "8ebb70135": "8011629: Object.defineProperty performance issue",
  "329abc402": "8017540: Improve multi-threaded contention behavior of radix conversion cache",
  "de4b9dace": "8017538: Clang support broke slowdebug build for i586",
  "53f06da30": "8016610: javac, add new internal symbols to make operator resolution faster",
  "3a7679599": "4837946: Faster multiplication and exponentiation of large integers 4646474: BigInteger.pow() algorithm slow in 1.4.0",
  "a48b1a1a9": "8016267: javac, TypeTag refactoring has provoked performance issues",
  "9821ebcba": "8016236: Class.getGenericInterfaces performance improvement",
  "90aebf1cf": "7131192: BigInteger.doubleValue() is depressingly slow",
  "526f21a95": "8015379: PropertyMap.addProperty() is slow",
  "135a46476": "8015522: CharSequence.codePoints can be faster",
  "63c141c51": "7186887: Test T6567415.java can fail on a slow machine",
  "6a7e90e36": "6726963: multi_allocate() call does not CHECK_NULL and causes crash in fastdebug bits",
  "c39235c37": "8015486: PSScavenge::is_obj_in_young is unnecessarily slow with UseCompressedOops",
  "c13149ab8": "8015422: Large performance hit when the StringTable is walked twice in Parallel Scavenge",
  "cdf127649": "8011630: JSON parsing performance issue",
  "c7a9104bb": "8014862: Add fast Metasapce capacity and used per MetadataType",
  "114b57822": "8012371: Adjust Tiered compile threshold according to available space in code cache",
  "4e4591b4d": "8013395: StringBuffer.toString performance regression impacting embedded benchmarks",
  "5504a220f": "8013874: Function argument's prototype seem cached and wrongly reused",
  "6ee68537b": "8013794: JDK-8006220 caused an octane performance regression",
  "ec8f960d2": "8013155: [pack200] improve performance of pack200",
  "dedfcd5aa": "8012547: Code cache flushing can get stuck reclaming of memory",
  "65661628a": "8006559: Octane:pdfjs leaks memory, runs slower iteration to iteration",
  "806256d65": "8013208: Octane performance regression",
  "34f8be0bc": "8013496: Code cache management command line options work only in special order. Another order of arguments does not deliver the second parameter to the jvm",
  "3c7d12fc0": "8012656: cache frequently used name strings for DocImpl classes",
  "92ef5fe74": "8006952: Slow VM due to excessive code cache freelist iteration",
  "6b89fa96a": "8007774: Enable code cache again",
  "2ca495dd4": "8010309: Improve PlatformLogger.isLoggable performance by direct mapping from an integer to Level",
  "89120e782": "7014552: gc/lock/jni/jnilockXXX works too slow on 1-processor machine",
  "6c0e48042": "8005530: [lcms] Improve performance of ColorConverOp for default destinations",
  "46b80b341": "8008759: Do not let internal JDK zlib symbols leak out of fastdebug libzip.so",
  "8d2496d7d": "7102300: performance warnings cause results diff failure in Test6890943",
  "d258e2c06": "8007639: Workaround for ccache in vm.make is incorrect",
  "05b1c69fc": "8009761: Deoptimization on sparc doesn't set Llast_SP correctly in the interpreter frames it creates",
  "f3d702931": "8014854: (bf) CharBuffer.chars too slow with default implementation",
  "6a910ea8f": "8006851: When TieredCompilation is set, max code cache should be bumped to 256mb",
  "327a6cf1b": "8006766: Array-like access to characters of a string is slow",
  "9fa237705": "7162007: Clean up i18n related caches",
  "a0a0d0b65": "8005817: Shark: implement deoptimization support",
  "38c81fb41": "8005419: Improve intrinsics code performance on x86 by using AVX2",
  "8d91f983e": "8001341: SIGSEGV in methodOopDesc::fast_exception_handler_bci_for(KlassHandle,int,Thread*)+0x3e9",
  "cfcd28fd9": "8005522: use fast-string instructions on x86 for zeroing",
  "d8b54b121": "8005345: JSR 292: JDK performance tweaks",
  "14d669246": "7200229: NPG: possible performance issue exposed by closed/runtime/6559877/Test6559877.java",
  "fb1294fec": "7196533: TimeZone.getDefault() slow due to synchronization bottleneck",
  "b6ea800f9": "7050528: Improve performance of java.text.DecimalFormat.format() call stack",
  "03d65ced3": "7198606: Improve VM optimization",
  "64bb35a5c": "7186954: Improve connection performance",
  "24043fa40": "7181199: [macosx] Startup is much slower in headless mode for apps using Fonts",
  "f3b6368c3": "7196167: NPG: mismerge in make/solaris/makefiles/fastdebug.make",
  "54f3f7f7e": "7168172: (fs) Files.isReadable slow on Windows",
  "c4f31fd22": "7200493: Improve cache handling",
  "e3c3c8527": "6340864: Implement vectorization optimizations in hotspot-server",
  "12901d0e5": "7023639: JSR 292 method handle invocation needs a fast path for compiled code 6984705: JSR 292 method handle creation should not go through JNI",
  "360d51285": "7023639: JSR 292 method handle invocation needs a fast path for compiled code 6984705: JSR 292 method handle creation should not go through JNI",
  "c7ff53f5c": "7145771: [macosx] CreateFont/Register.java test fails because of cached results of getAllFonts()",
  "8c4cefaa9": "7179138: Incorrect result with String concatenation optimization",
  "4c73c02d6": "7176485: (bf) Allow temporary buffer cache to grow to IOV_MAX",
  "4824bf600": "7173919: Minor optimization of hashing methods",
  "e1774fc7a": "7169050: (se) Selector.select slow on Solaris due to insertion of POLLREMOVE and 0 events",
  "6d2f5978f": "7168550: [macosx] duplicate OGL context state changes related to vertex cache",
  "05ffd97b0": "7165102: Only run assertion on Integer autoboxing cache size once",
  "ac620e811": "7152564: Improve CodeSource.matchLocation(CodeSource) performance 7155693: CodeSource.matchLocation getPort test can be improved",
  "8716e4744": "7157903: JSSE client sockets are very slow",
  "98f297ba2": "7150046: SIGILL on sparcv9 fastdebug",
  "3385cfe8c": "7118280: The gbyc00102 JCK7 test causes an assert in JVM 7.0 fastdebug mode",
  "27720df27": "7133138: Improve io performance around timezone lookups",
  "40d87232e": "7089914: Focus on image icons are not visible in javaws cache with high contrast mode",
  "4c5ba0d84": "7145837: a little performance improvement on the usage of SecureRandom",
  "b972e5271": "7145345: Code cache sweeper must cooperate with safepoints",
  "3887a6d01": "7142086: performance problem in Check.checkOverrideClashes(...)",
  "9599296d9": "7013347: allow crypto functions to be called inline to enhance performance",
  "301215b86": "7132779: build-infra merge: Enable ccache to work for most developer builds",
  "179d6df8c": "7133038: G1: Some small profile based optimizations",
  "b25a3c3f1": "7131153: GetDC called way too many times - causes bad performance",
  "cec41c4c9": "7030453: JSR 292 ClassValue.get method is too slow",
  "5cbd245ba": "7118809: rcache deadlock",
  "eafb7ad68": "7088989: Improve the performance for T4 by utilizing the newly provided crypto APIs",
  "f8400651e": "7128441: StrictMath performance improvement note shared with Math",
  "5fa281c0e": "7127235: (fs) NPE in Files.walkFileTree if cached attributes are GC'ed",
  "c323bcdca": "7125934: Add a fast unordered timestamp capability to Hotspot on x86/x64",
  "2928feab6": "7121073: secondary_super_cache memory slice has incorrect bounds in flatten_alias_type",
  "6ffc2c3b6": "6776144: java/lang/ThreadGroup/NullThreadName.java fails with Thread group is not destroyed ,fastdebug LINUX",
  "890f9e288": "7107019: sun.security.krb5.internal.ccache.CCacheInputStream.readCred does not use auth data",
  "93fbade63": "6636110: unaligned stackpointer leads to crash during deoptimization",
  "47e357e16": "7081933: Use zeroing elimination optimization for large array",
  "ed9a60ae0": "7108383: JSR 292: JRuby bench_define_method_methods.rb: assert(slow_jvms != NULL) failed: miss path must not",
  "9f6770738": "6898310: (cs) Charset cache lookups should be synchronized",
  "238bb5d3b": "7082971: More performance tuning of BigDecimal and other java.math classes",
  "5f2157a8b": "7061125: Proposed javac argument processing performance improvement",
  "69c745533": "7060642: (javadoc) improve performance on accessing inlinedTags",
  "774aa0130": "6951623: 3/3 possible performance problems in FollowReferences() and GetObjectsWithTags()",
  "b3505a88a": "7044738: Loop unroll optimization causes incorrect result",
  "565f8579a": "6990015: Incorrect Icache line size is used for 64 bit x86",
  "bc408da53": "7043987: 3/3 JVMTI FollowReferences is slow",
  "015e872ef": "7046558: G1: concurrent marking optimizations",
  "c0d64ac59": "6918185: Remove unused code for lost card-marking optimization in BacktraceBuilder",
  "e666162b0": "7050554: JSR 292 - need optimization for selectAlternative",
  "c0d9c39aa": "7049122: java/lang/invoke/RicochetTest.java with MAX_ARITY=255 in -Xcomp mode overflows code cache",
  "57769e360": "7033141: assert(has_cp_cache(i)) failed: oob",
  "a16e057c0": "6996747: SIGSEGV in nmethod::cleanup_inline_caches / CompiledIC::verify",
  "7fb4bcc55": "7036960: TemplateTable::fast_aldc in templateTable_x86_64.cpp uses movptr instead of load_klass",
  "899e0913f": "7028818: (lc) Lazily initialize locale extension 7029740: (lc) New Locale class implementation doesn't follow the Java coding conventions 7032820: (lc) sun.util.locale.InternalLocaleBuilder.CaseInsensitiveChar.equals problems 7033503: (lc) Restore optimization code for Locale class initialization 7033504: (lc) incompatible behavior change for ja_JP_JP and th_TH_TH locales",
  "bc945571e": "7034700: (unpack200) build fails with fastdebug builds",
  "8a4683b5e": "7034513: enable fast accessors and empty methods for ZERO and -Xint",
  "4819e529c": "7033960: Do not check for mapfiles when fastdebug building",
  "fad93836a": "6565585: Remove critical section in Method.invoke, Constructor.newInstance, Field.getFieldAccessor improving performance",
  "363df8be6": "6751338: ZIP inflater/deflater performance",
  "f94d7776c": "7033154: Improve C1 arraycopy performance",
  "3ecb9f51d": "7029152: Ideal nodes for String intrinsics miss memory edge optimization",
  "6a1b36334": "6981922: DNS cache poisoning by untrusted applets",
  "4770417e7": "7025485: leverage shared x86-only deoptimization code",
  "c64ee496c": "7026167: Broken fastdebug only build",
  "c88813019": "6611830: UUID thread-safety and performance improvements",
  "aa60df678": "7021927: javac: regression in performance",
  "6d172a6a6": "7018753: tools/javac/varargs/warning/Warn5.java times out on slow machines",
  "3899f14f1": "7019557: SharedMiscDataSize too small for 64-bit fastdebug JVM",
  "b88a6b82c": "6722351: sun.print.Win32PrintService.initMedia() is slow",
  "3e9fe24dd": "7023069: G1: Introduce symmetric locking in the slow allocation path 7023151: G1: refactor the code that operates on _cur_alloc_region to be re-used for allocs by the GC threads 7018286: G1: humongous allocation attempts should take the GC locker into account",
  "c2275649b": "7026932: G1: No need to abort VM when card count cache expansion fails",
  "3b676c492": "7018859: javac turn off the Zip optimization by default",
  "daf8e751d": "7019441: No lookup cache for internal composite font creation leads to java heap growth",
  "4b61d914f": "7016856: dashing performance was reduced during latest changes to the OpenJDK rasterizer",
  "561c09043": "7009309: JSR 292: compiler/6991596/Test6991596.java crashes on fastdebug JDK7/b122",
  "1551fd74e": "7010528: javadoc performance regression",
  "bc1df6851": "6994297: G1: do first-level slow-path allocations with a CAS",
  "f2bb972af": "7003643: [Fmt-Me] MessageFormat.toPattern produces wrong quoted string and subformat modifiers 7008195: [Fmt-Me] Improve MessageFormat.applyPattern performance",
  "5119e6d87": "6927458: font system should cache transient strikes with weak references",
  "ecddc15f7": "6579789: Internal error 'c1_LinearScan.cpp:1429 Error: assert(false,'')' in debuggee with fastdebug VM",
  "33b174749": "6635462: D3D: REGRESSION: XOR rendering is extremly slow",
  "c1d0a22ea": "6644493: [Fmt-Da] SimpleDateFormat parsing RFC822 time offset is slow",
  "80cb99bac": "6766342: Improve performance of Ductus rasterizer",
  "aeae2e420": "6999460: Glassfish build with JDK 6 / 7 is 5x-10x slower on Windows than on Linux",
  "e54cb28a9": "6977034: Thread.getState() very slow",
  "d22377ef7": "6775317: Improve performance of non-AA transformed rectangles and single wide lines in software pipelines",
  "2cb1aa048": "6999872: java.awt.Window instantiation leads to JVM CRASH on Windows, JDK7b118+ fastdebug",
  "11c0d2dbe": "6979329: CCacheInputStream fails to read ticket cache files from Kerberos 1.8.1",
  "823b331f1": "6712185: java/util/concurrent/Executors/AutoShutdown.java fails on slow or busy systems",
  "aa4bee613": "6998063: new Scope impl to fix Scope performance issues",
  "fbe778aea": "6991380: (cal) Calendar.cachedLocaleData should be transitioned from Hashtable to ConcurrentHashMap 6560965: [Fmt-Da] defaultCenturyStart In SimpleDateFormat should be protected 6560980: [Fmt-Da] DateFormatSymbols.cacheLookup doesn't update cache correctly",
  "7ed3e0a89": "4837564: (bf) Please make DirectByteBuffer performance enhancements",
  "bbded477b": "6954275: XML signatures with reference data larger 16KB and cacheRef on fails to validate",
  "e1a504b34": "6991577: add IfOp optimization to C1",
  "2e08a8295": "6975829: Perf. of gzip in existing JDKs is too slower than in 1.3.1",
  "2c29ae4f3": "6550798: Using InputStream.skip with ResponseCache will cause partial data to be cached",
  "0f3151171": "6986270: guarantee(*bcp != Bytecodes::_monitorenter || exec_mode != Deoptimization::Unpack_exception) fails",
  "fbf72650b": "6980862: too aggressive compiler optimization causes stale results of Types.implementation()",
  "a54b1ff70": "6978249: spill between cpu and fpu registers when those moves are fast",
  "7ee29eeb6": "6973570: OrderAccess::storestore() scales poorly on multi-socket x64 and sparc: cache-line ping-ponging",
  "f0b6dc4e4": "6973308: Missing zero length check before repne scas in check_klass_subtype_slow_path()",
  "d44a3683b": "6888526: Linux getCurrentThreadCpuTime is drastically slower than Windows",
  "5c3da1ee7": "6956639: G1: assert(cached_ptr != card_ptr) failed: shouldn't be, concurrentG1Refine.cpp:307",
  "4bd038146": "6964774: Adjust optimization flags setting",
  "0eca63f39": "6960853: Cleanup makefiles, remove unused vars etc 6959596: Windows fastdebug build broken 6960335: Add top level 'make test' rule that uses test/Makefile, runs all test batches",
  "3cf74e191": "6930994: Code cache is full warning should be visible in product",
  "d72f8abed": "6937111: Restore optimization for Phi of AddP (6552204)",
  "8a72fb502": "6939845: zero needs fallback path in C++ interpreter for platform dependent fast bytecodes",
  "7dcf59914": "6932496: c1: deoptimization of jsr subroutine fails on sparcv9",
  "51fc36cc9": "6877221: Endless deoptimizations in OSR nmethod",
  "17a0e10b0": "6926048: Improve Zero performance",
  "7f9ba03c3": "6914402: G1: assert(!is_young_card(cached_ptr),'shouldn't get a card in young region')",
  "f23b68b36": "6902182: 4/4 Starting with jdwp agent should not incur performance penalty",
  "a57d68e35": "4360113: Evict nmethods when code cache gets full",
  "bac125984": "6911204: generated adapters with large signatures can fill up the code cache",
  "8214fc3a3": "6912065: final fields in objects need to support inlining optimizations for JSR 292",
  "eca996c10": "6910484: incorrect integer optimization (loosing and op-r in a given example)",
  "47f2433a5": "6893268: additional dynamic language related optimizations in C2",
  "375527d84": "6829187: compiler optimizations required for JSR 292",
  "eb547a56a": "5057818: codecache full and compiler disabled in bigapps fastdebug run",
  "2fdf51d31": "6899078: potential deadlock and performance issue in freeing strike resources with D3D pipeline",
  "450da8a06": "6897553: LinkedList performance improvements",
  "fb6b9445d": "6897993: (se) Close or cancel performance issue when number of pending updates is high (lnx)",
  "3e515ef90": "6897550: BigInteger constructor should use local cached String length",
  "debdf79d1": "6480728: Byte.valueOf(byte) returns a cached value but Byte.valueOf(String) 6655735: Integer.toString() and String.valueOf(int) contain slow delegations",
  "e261aecad": "6863023: need non-perm oops in code cache for JSR 292",
  "a89a6c4ae": "6878481: Add performance counters in the JDK",
  "d1839690e": "6802944: Nimbus initialization is too slow",
  "779247f1c": "6875393: 2/3 JNI itable index cache is broken",
  "97e10327e": "6870926: (file) Path.toRealPath performance can be improved (win)",
  "0217f432c": "6873777: FPU control word optimization still performed with SSE",
  "f6f2d510b": "6829127: Deoptimization Failure on Specjvm98 _227_mtrt with -XX:+DeoptimizeALot since Hs11 b01",
  "1a7648b1c": "6866585: debug code in ciObjectFactory too slow for large objects",
  "36917caf5": "6865703: G1: Parallelize hot card cache cleanup",
  "59b2cbc44": "6827648: Extremely slow compilation time for visitor pattern code + generics",
  "df5da31f5": "6785442: ConcurrentLinkedQueue.remove() and poll() can both remove the same element 6493942: ConcurrentLinkedQueue.remove sometimes very slow",
  "08f5aeffc": "6857194: Add hotspot perf counters to aid class loading performance measurement",
  "0ed9b1c52": "6557223: Resize cursor stays after fast outline-resize of JInternalFrame with JScrollPane",
  "cab60341e": "6853806: Prefer (cd $dir && jar) to jar -C for performance reasons",
  "7c0161356": "6834805: Improve jar -C performance",
  "0c39548e0": "7195063: [TEST] jtreg flags com/sun/corba/cachedSocket/7056731.sh with Error failure",
  "5bf951e2a": "6511515: poor performance of LogRecord.inferCaller depending on java.lang.Throwable.getStackTraceElement",
  "e487e2558": "6797688: Umbrella: Merge all JDK 6u4 - 6u12 deployment code into JDK7 6845973: Update JDK7 with deployment changes in 6u13, 6u14 4802695: Support 64-bit Java Plug-in and Java webstart on Windows/Linux on AMD64 6825019: DownloadManager should not be loaded and referenced for full JRE 6738770: REGRESSION:JSException throws when use LiveConnect javascript facility 6772884: plugin2 : java.lang.OutOfMemoryError or crash 6707535: Crossing domain hole affecting multiple sites/domains using plug-in 6728071: Non-verification of Update files may allow unintended updates 6704154: Code loaded from local filesystem should not get access to localhost 6727081: Web Start security restrictions bypass using special extension jnlp 6727079: Java Web Start Socket() restriction bypass 6727071: Cache location/user name information disclosure in SingleInstanceImpl 6716217: AppletClassLoader adds permissions based on codebase regardless of CS 6694892: Java Webstart inclusion via system properties override [CVE-2008-2086] 6704074: localhost socket access due to cache location exposed 6703909: Java webstart arbitrary file creation using nativelib 6665315: browser crashes when deployment.properties has more slashes ( / ) 6660121: Encoding values in JNLP files can cause buffer overflow 6606110: URLConnection.setProxiedHost for resources that are loaded via proxy 6581221: SSV(VISTA): Redirection FAILS to work if user does a downgrade install 6609756: Buffer Overflow in Java ActiveX component 6608712: Bypassing the same origin policy in Java with crafted names 6534630: 'gnumake clobber' doesn't 6849953: JDK7 - replacement of bufferoverflowU.lib on amd64 breaks build 6849029: Need some JDK7 merge clean-up after comments on the webrev 6847582: Build problem on JDK7 with isSecureProperty in merge 6827935: JDK 7 deployment merging - problem in Compiler-msvm.gmk 6823215: latest merge fixes from 6u12 -> JDK7 6816153: further mergers for JDK7 deployment integration 6807074: Fix Java Kernel and JQS in initial JDK7 builds",
  "24f3527be": "6849716: BitMap - performance regression introduced with G1",
  "ac945bbf6": "6797688: Umbrella: Merge all JDK 6u4 - 6u12 deployment code into JDK7 6845973: Update JDK7 with deployment changes in 6u13, 6u14 4802695: Support 64-bit Java Plug-in and Java webstart on Windows/Linux on AMD64 6825019: DownloadManager should not be loaded and referenced for full JRE 6738770: REGRESSION:JSException throws when use LiveConnect javascript facility 6772884: plugin2 : java.lang.OutOfMemoryError or crash 6707535: Crossing domain hole affecting multiple sites/domains using plug-in 6728071: Non-verification of Update files may allow unintended updates 6704154: Code loaded from local filesystem should not get access to localhost 6727081: Web Start security restrictions bypass using special extension jnlp 6727079: Java Web Start Socket() restriction bypass 6727071: Cache location/user name information disclosure in SingleInstanceImpl 6716217: AppletClassLoader adds permissions based on codebase regardless of CS 6694892: Java Webstart inclusion via system properties override [CVE-2008-2086] 6704074: localhost socket access due to cache location exposed 6703909: Java webstart arbitrary file creation using nativelib 6665315: browser crashes when deployment.properties has more slashes ( / ) 6660121: Encoding values in JNLP files can cause buffer overflow 6606110: URLConnection.setProxiedHost for resources that are loaded via proxy 6581221: SSV(VISTA): Redirection FAILS to work if user does a downgrade install 6609756: Buffer Overflow in Java ActiveX component 6608712: Bypassing the same origin policy in Java with crafted names 6534630: 'gnumake clobber' doesn't 6849953: JDK7 - replacement of bufferoverflowU.lib on amd64 breaks build 6849029: Need some JDK7 merge clean-up after comments on the webrev 6847582: Build problem on JDK7 with isSecureProperty in merge 6827935: JDK 7 deployment merging - problem in Compiler-msvm.gmk 6823215: latest merge fixes from 6u12 -> JDK7 6816153: further mergers for JDK7 deployment integration 6807074: Fix Java Kernel and JQS in initial JDK7 builds",
  "2189d1b41": "6797688: Umbrella: Merge all JDK 6u4 - 6u12 deployment code into JDK7 6845973: Update JDK7 with deployment changes in 6u13, 6u14 4802695: Support 64-bit Java Plug-in and Java webstart on Windows/Linux on AMD64 6825019: DownloadManager should not be loaded and referenced for full JRE 6738770: REGRESSION:JSException throws when use LiveConnect javascript facility 6772884: plugin2 : java.lang.OutOfMemoryError or crash 6707535: Crossing domain hole affecting multiple sites/domains using plug-in 6728071: Non-verification of Update files may allow unintended updates 6704154: Code loaded from local filesystem should not get access to localhost 6727081: Web Start security restrictions bypass using special extension jnlp 6727079: Java Web Start Socket() restriction bypass 6727071: Cache location/user name information disclosure in SingleInstanceImpl 6716217: AppletClassLoader adds permissions based on codebase regardless of CS 6694892: Java Webstart inclusion via system properties override [CVE-2008-2086] 6704074: localhost socket access due to cache location exposed 6703909: Java webstart arbitrary file creation using nativelib 6665315: browser crashes when deployment.properties has more slashes ( / ) 6660121: Encoding values in JNLP files can cause buffer overflow 6606110: URLConnection.setProxiedHost for resources that are loaded via proxy 6581221: SSV(VISTA): Redirection FAILS to work if user does a downgrade install 6609756: Buffer Overflow in Java ActiveX component 6608712: Bypassing the same origin policy in Java with crafted names 6534630: 'gnumake clobber' doesn't 6849953: JDK7 - replacement of bufferoverflowU.lib on amd64 breaks build 6849029: Need some JDK7 merge clean-up after comments on the webrev 6847582: Build problem on JDK7 with isSecureProperty in merge 6827935: JDK 7 deployment merging - problem in Compiler-msvm.gmk 6823215: latest merge fixes from 6u12 -> JDK7 6816153: further mergers for JDK7 deployment integration 6807074: Fix Java Kernel and JQS in initial JDK7 builds",
  "0429abd38": "6848466: frame::frame_size() assertion failure with -XX:+DebugDeoptimization",
  "0263c2809": "6832353: Krb5LoginModule: use the KRB5CCNAME when searching for Kerberos ticket cache",
  "8a262ce04": "6814842: Load shortening optimizations",
  "702a13b78": "6840196: NUMA allocator: crash in fastdebug during startup on Linux",
  "34ee92139": "6788527: Server vm intermittently fails with assertion 'live value must not be garbage' with fastdebug bits",
  "c71395c82": "6806822: Font.getFontName() is slow in Java5 and 6",
  "3c70cff23": "6835796: Fedora 9 linux_i586-fastdebug-c2-runThese_Xcomp times out",
  "99c5ea536": "6660539: Introspector shares cache of mutable BeanInfo between AppContexts",
  "04fdef79f": "6589834: deoptimization problem with -XX:+DeoptimizeALot",
  "3119cce77": "6830658: Changeset ec64fd74aa69 breaks the fastdebug build in NativeCreds.c",
  "090346b4e": "6823453: DeoptimizeALot causes fastdebug server jvm to fail with assert(false,'unscheduable graph')",
  "a4fccad41": "6745361: Add -XX options to prevent stdout/stderr pollution using fastdebug/debug bootjdk",
  "183aabe3b": "6604458: linux_x64-fastdebug-c2 fails on hyperbolic trig tests",
  "705188bb7": "6821700: tune VM flags for peak performance",
  "5231fcdc4": "6810653: Change String cache class used by Hotspot from String to StringValue",
  "a2b46bd32": "6807702: Integer.valueOf cache should be configurable",
  "8a7cd86a2": "6809227: poor performance on Panel.Add() method in jdk6",
  "15891a2f7": "4918870: Examine session cache implementation (sun.misc.Cache)",
  "f031c4543": "6786503: Overflow list performance can be improved",
  "0f5687c1e": "6786340: hs14b09a pit: a lot of tests failed in '-server -Xcomp' on solaris-amd64 using fastdebug bits",
  "26f6b1692": "6782457: CMS: Livelock in CompactibleFreeListSpace::block_size() 6736295: SIGSEGV in product jvm, assertion 'these are the only valid states during a mark sweep' in fastdebug",
  "5d3228cbb": "6708580: Java applications slow when EXA enabled",
  "c0500f7d7": "6720866: Slow performance using HttpURLConnection for upload",
  "e7b4bb5f0": "6758179: D3D: AlphaComposite is applied incorrectly for uncached opaque BufferedImage",
  "d1aacc7cd": "6700107: java/lang/Class/forName/TooManyDimensions.java crashes with SIGSEGV in c2 compiler with fastdebug",
  "32addb490": "6719149: Wrong 'java/lang/String should not be loaded yet' assertion in fastdebug bits with UseStringCache",
  "eee15b163": "6711100: 64bit fastdebug server vm crashes with assert(_base == Int,'Not an Int')",
  "756eea5ee": "6743107: clean up use of static caches in file manager",
  "26c780da7": "5108146: Merge i486 and amd64 cpu directories 6459804: Want client (c1) compiler for x86_64 (amd64) for faster start-up",
  "1c42f2e0d": "6737900: TEST: Some JDI regression tests timeout on slow machines",
  "d35e1bbd8": "6730192: expression stack wrong at deoptimization point",
  "2d1fcda0d": "6729552: jvm98 crashes with SS12 built jdk on Solaris X64 fastdebug version",
  "696e17c0b": "6684714: Optimize EA Connection Graph build performance",
  "86ac930e5": "6581899: JTextField & JTextArea - Poor performance with JRE 1.5.0_08",
  "f8f23e46a": "6688203: Memory leak and performance problems in the method getFileSystemView of FileSystemView",
  "659a8dc7d": "6681646: Relocking of a scalar replaced object during deoptimization is broken",
  "833746644": "6682236: C2 hits ideal nodes limit during IGVN optimization with EA",
  "5ac01e984": "6642862: Code cache allocation fails with large pages after 6588638",
  "b64d5e420": "6667615: (Escape Analysis) extend MDO to cache arguments escape state",
  "96e8bcb6a": "6667620: (Escape Analysis) fix deoptimization for scalar replaced objects",
  "f7ce4bc4a": "6633613: (str) StringCoding optimizations to avoid unnecessary array copies with Charset arg",
  "37b9a97e0": "6670459: Fix Node::dump() performance",
  "0c6743a97": "6590930: reed/write does not match for ccache",
  "dc6ad19d7": "6667618: disable LoadL->ConvL2I ==> LoadI optimization",
  "4abbae1fc": "6621621: HashMap front cache should be enabled only with AggressiveOpts"
}, "jedis": {
  "e193365": "Obtain multiple pipelines concurrently. high performance improvement (#3331)",
  "18f1673": "Test: Address memory optimizations in Redis List (#3208)",
  "fb3049d": "improve slots cache initialize‘s retry logic (#1402)",
  "b79d068": "Cleanup cache state from failed attempts of cluster discovering",
  "1a722df": "Merge pull request #1041 from Raul-/slowLogToString",
  "ead392f": "Improves performance when joining params. Closes #380",
  "9e79efd": "Add maven deps to travis cache for faster builds",
  "523cc82": "Break loop fast when one of connection seems to broken",
  "7845dc3": "Merge branch 'fast-fail-while-initializing-jedis-sentinel-pool'",
  "3697e01": "Merge pull request #755 from HeartSaVioR/remove-redundant-synchronize-from-jedis-cluster-info-cache",
  "c533631": "Fail fast while initializing JedisSentinelPool",
  "96c762b": "Optimize CRC16 calculation (with optimization of slot decision)",
  "0909811": "Let JedisSentinelPoolTest recognizes 'aborted failover' and fail fast",
  "b2fa6b6": "Improve Jedis Cluster tests and cleanup son they run much faster and reliable",
  "37f6297": "Improve performance in MOVED and ASK response parsing",
  "8624d16": "make JedisSentinelPool fast",
  "3b7127c": "make JedisTest fast",
  "20d686e": "make list command tests even faster",
  "ce3497e": "make object command tests fast",
  "e17d24c": "make list command tests fast",
  "ceac812": "make control command tests fast",
  "5812303": "make pubsub test fast",
  "efbb710": "Change string size to make test fail faster",
  "3da2f2d": "Merge branch 'slowlog' of git://github.com/ivowiblo/jedis into slowlog",
  "a688c61": "wjw465150 add socket performance",
  "3f21dcd": "Fixed a performance issue with utf8 characters.",
  "f9e7887": "more optimizations on write side",
  "aed824c": "more optimizations on write side",
  "a521841": "a bit faster implementation of output stream for Redis",
  "3af260f": "Added DataStreams and BufferedStream to increase performance",
  "f53c7a1": "Added a small benchmark test with a small performance improvement"
}, "jeecg-boot": {
  "bd48145": "升级fastjson版本至1.2.83，解决fastjson低版本高危漏洞",
  "dadf6a7": "fastjson 新安全漏洞修复解决; 第三方登录bug处理; IE兼容js本地化提高前端加载速度"
}, "jeepay": {
  "46b3b54": "升级fastjson至1.2.83,待测试观察",
  "7ae96bb": "升级fastjson和hutool为最新版",
  "eb1c12b": "修改充值类型，避免fastjson反序列化异常的问题。",
  "8b7b21e": "升级fastjson版本,避免漏洞"
}, "jenkins": {
  "1ce978a0": "Refinements to `AssociatedConverterImpl.cache` (#7976)",
  "458c6865": "[JENKINS-71139] Fail fast when serializing invalid XML 1.1 data (#7875)",
  "5f7a4ee0": "Bump http-cache-semantics from 4.1.0 to 4.1.1 in /war (#7621)",
  "668e6509": "Decline to cache a likely incorrect computation (#7485)",
  "aac965a6": "[JENKINS-70178] Improve tooltip performance (#7464)",
  "9f59035d": "Use `setup-java` action to cache Maven dependencies (#7434)",
  "c37613ef": "[JENKINS-69714] Use new jenkins-table for slow trigger admin monitor (#7205)",
  "5263f20e": "[JENKINS-67681] `ProcessTree$Windows#killAll` is slow on Windows (#6236)",
  "fd33b5fa": "[JENKINS-68805] Reset cached attributes with ampersand as well (#6989)",
  "117fbc3f": "[JENKINS-68835] Fail fast on unsupported Java versions",
  "ceffaf5c": "[JENKINS-65442] - Improve performance when encoding unicode characters in JSON API + Remove Stapler's Guava dependency (#5422)",
  "1fd149ad": "Improve slow trigger UI, logging, and tests (#5424)",
  "8130b13e": "Improve performance when saving Fingerprints to disk (#5198)",
  "203ec707": "[JENKINS-64670] Improve performance in file fingerprint creation (#5190)",
  "bfcc0b18": "minor optimization as suggested by todo",
  "1188566b": "Replace() optimization (#5095)",
  "2cd33a18": "[JENKINS-64039] improve CaseInsensitive.equals(String, String) performance",
  "642940f5": "Hacktoberfest - TcpSlaveAgentListener optimization (#5012)",
  "c76d55a4": "Improve performance of MyView (#4954)",
  "688647a8": "tests: minor refactorings either for performance or readability (#4846)",
  "463cd113": "Minor refactorings either for performance or readability (#4845)",
  "f017c04d": "minor refactorings either for performance or readability",
  "15fac336": "chore(pom.xml): add compilerArg `-Xpkginfo:always` for useIncrementalCompilation which make build fast",
  "58771040": "Merge pull request #4664 from StefanSpieker/spotbugs_performance",
  "cef21719": "minor spotbugs performance improvement",
  "12c246a8": "Do not use Azure maven cache - unavailable",
  "604e6943": "Merge pull request #4494 from MarkEWaite/do-not-use-azure-cache",
  "7026b4d0": "Do not use Azure maven cache - unavailable",
  "29fbc9c4": "Quiet down log message about parsing JSON. (Though it is kind of interesting just how slow it is.)",
  "83a465e8": "Rewriting cache system in PeepholePermalink to use plain text files rather than symlinks.",
  "95c8e715": "String.equals(null) is fast enough...",
  "2f8b557a": "[JENKINS-55050] Reduce performance impact of SEC-904 (esp. zip) (#3861)",
  "a0bc50fb": "[JENKINS-54135] Improve performance of languages telemetry",
  "e0ed9a86": "Micro-optimizations to Plugin data to reduce minimum memory for Jenkins (#3654)",
  "1f31f421": "[JENKINS-53353] - Do not cache results of View.getActions() (#3608)",
  "7bd6d1e8": "[JENKINS-51205] Improve performance of /pluginManager/available service.",
  "3b61b961": "[JENKINS-51205] Improve performance of /pluginManager/available service.",
  "c586ba05": "Merge pull request #3297 from svanoort/use-performance-optimized-pipeline-build",
  "05948995": "Use performance-optimized build mode to reduce IO needs a bit",
  "d0110590": "- add a short-living cache for the hash with just sha256(salt + plainToken) to speed up things after the first 'complete' check",
  "260a2576": "[JENKINS-48946] - Move whitelist ordering test to core to fail fast",
  "b431eb42": "Merge pull request #3155 from Jimilian/cache_permission_id",
  "db46521c": "Merge pull request #3143 from Jimilian/cache_estimated_duration",
  "9a8fdb9a": "[FIX JENKINS-43848] - Lack of cache-invalidation headers results in stale item list (#2973)",
  "34bf3932": "[FIX JENKINS-43848] - Lack of cache-invalidation headers results in stale item list (#2973)",
  "d05fcdec": "[JENKINS-43929] Specific cache control header on ajax.jelly",
  "4852e1e4": "Jenkinsfile keeps a local Maven repository cache inside the checkout, so ignore that.",
  "0285c856": "[JENKINS-42141] Fix performance issue in code merging Tool installer list",
  "249dfb13": "[JENKINS-42141] Fix performance issue in code merging Tool installer list",
  "6360b964": "[JENKINS-38867] Optimize performance of Actionable.getAllActions (#2582)",
  "8888296e": "Update XStream drive to improve performance in xml serilization/deserialization (#2561)",
  "90b977ea": "[JENKINS-35098] Disable AutoBrowserHolder by default to improve the changelog rendering performance (#2371)",
  "389b0575": "[JENKINS-37031] Advertise the enabled Agent Protocols to enable faster connection negotiation",
  "5005026b": "Invalidate user details cache when user is removed",
  "88c2d8ed": "[JENKINS-18435] Tell browsers not to cache or try to autocomplete forms",
  "fefd61c8": "[JENKINS-35493] Introduce a UserDetails cache",
  "d33df0f2": "[JENKINS-35098] Disable AutoBrowserHolder by default to improve the changelog rendering performance (#2371)",
  "d08eec18": "[JENKINS-34888] - Scalability: Fix performance issues in the XML unmarshalling code (#2340)",
  "f4c7571b": "Make it possible to disable SecurityRealm.loadUserByUsername call with a system property if it proves too slow in certain circumstances.",
  "7d260f31": "[JENKINS-30705] Reset cache for exact results in unittest",
  "52f9172c": "[JENKINS-30705] Reset cache for exact results in unittest",
  "ba69511c": "[JENKINS-27739] Ensure cache clearing listener runs first",
  "aaf0afc5": "[FIX JENKINS-27739] Clear cached env vars when node goes online",
  "84d80f57": "[JENKINS-28446] - Introduce new API method in Queue to optimize the performance of UnlabeledLoadStatistics",
  "c6d4204a": "[JENKINS-27739] Ensure cache clearing listener runs first",
  "c569036f": "[FIX JENKINS-27739] Clear cached env vars when node goes online",
  "7697bdb4": "[JENKINS-28446] - Introduce new API method in Queue to optimize the performance of UnlabeledLoadStatistics",
  "e0a394ab": "[JENKINS-26755] cache node environment to prevent inefficient channel overuse",
  "c419d7d7": "Trying to diagnose hung connection in UC download. Observed in 1.580.1 on credentials-plugin (which you would think would be tiny and fast to get): 'Update center installer thread [#1]' #70 daemon prio=5 os_prio=0 tid=0x00007f5634815800 nid=0x64a8 runnable [0x00007f567cfe4000] java.lang.Thread.State: RUNNABLE at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:150) at java.net.SocketInputStream.read(SocketInputStream.java:121) at java.io.BufferedInputStream.read1(BufferedInputStream.java:284) at java.io.BufferedInputStream.read(BufferedInputStream.java:345) - locked <0x00000007aa3ec760> (a java.io.BufferedInputStream) at sun.net.www.MeteredStream.read(MeteredStream.java:134) - locked <0x00000007aa3eedd8> (a sun.net.www.MeteredStream) at java.io.FilterInputStream.read(FilterInputStream.java:133) at sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:3322) at sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:3315) at org.apache.commons.io.input.ProxyInputStream.read(ProxyInputStream.java:77) at hudson.model.UpdateCenter$UpdateCenterConfiguration.download(UpdateCenter.java:766) at hudson.model.UpdateCenter$DownloadJob._run(UpdateCenter.java:1138) at hudson.model.UpdateCenter$InstallationJob._run(UpdateCenter.java:1298) at hudson.model.UpdateCenter$DownloadJob.run(UpdateCenter.java:1116) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at hudson.remoting.AtmostOneThreadExecutor$Worker.run(AtmostOneThreadExecutor.java:104) at java.lang.Thread.run(Thread.java:745)",
  "5794c5d3": "provide faster version that doesn't touch I/O",
  "47c254aa": "[JENKINS-19192] Using JNR 3.0.1 which includes JNR-FFI 1.0.7; 1.0.6 has the backported fix for Guava #1505, the root cause. So this upgrade ought to prevent a recurrence of the issue in case some other code refers to JNR from the CLI. (As yet untested, and we do not especially want to send JNR over the CLI channel anyway for performance reasons.)",
  "8175eecc": "Merge pull request #1221 from synopsys-arc-oss/configurable_queue_cache_refresh",
  "0d825984": "[FIXED JENKINS-19691] - Added the hudson.model.Queue.cacheRefreshPeriod option",
  "5df3f74b": "[JENKINS-21631] - Don't fail with NPE if the PeepholePermalink cache contains the non-numeric value.",
  "2ff7a905": "[FIXED JENKINS-22822] PeepholePermalink should maintain an in-memory cache of symlinks to avoid disk I/O.",
  "28710f78": "Reverting #1154 (superseding #1159). There seems to be no way to export this over the REST API without incurring serious performance penalties.",
  "6fe5d6c6": "[JENKINS-21780] Much more effective fix. Introduce VirtualFile.run method to batch together commands. This should restore pre-ArtifactManager performance for workspace browsing.",
  "e51fdbbc": "[FIXED JENKINS-21780] Revised fix to make cache work properly without introducing a new remote call to find hash codes.",
  "237dda40": "[FIXED JENKINS-21772] Only cache CLI credentials in ~/.hudson if it exists.",
  "d577c085": "[FIXED JENKINS-21780] DirectoryBrowserSupport.FileComparator should cache isDirectory calls.",
  "568ccba8": "[FIXED JENKINS-18678] - Update builds location in RunMap after the job's renaming This change resolve the issue with missing builds after the jobs renaming and further cleanup of cache. Finally, the cache's directory location will be updated after the each job renaming. https://issues.jenkins-ci.org/browse/JENKINS-18678",
  "a5fd745a": "Handy way to slow down ProgressiveRendering when starting Jenkins in test mode.",
  "bcb39b41": "In /asynchPeople, check progressive rendering cancelation status between each user; UserAvatarResolver could be slow.",
  "a8f6d6bc": "ath.sh bom cli CONTRIBUTING.md core coverage docs dummy.keystore Jenkinsfile licenseCompleter.groovy LICENSE.txt packaging-ref.txt pom.xml README.md src test translation-tool.pl update-since-todo.py war websocket Adding a warning message when HudsonTestCase and JenkinsRule reach the configured timeout. This message will be very useful to diagnose test failures caused by timeouts. ath.sh bom cli CONTRIBUTING.md core coverage docs dummy.keystore Jenkinsfile licenseCompleter.groovy LICENSE.txt packaging-ref.txt pom.xml README.md src test translation-tool.pl update-since-todo.py war websocket Adding a mechanism to allow users running tests in slow systems can change the default timeout. Now they can change this value using the environment variable 'jenkins.test.timeout' expresed in seconds. Example: mvn test -Djenkins.test.timeout=300",
  "53ce4f0f": "[JENKINS-19192] Using JNR 3.0.1 which includes JNR-FFI 1.0.7; 1.0.6 has the backported fix for Guava #1505, the root cause. So this upgrade ought to prevent a recurrence of the issue in case some other code refers to JNR from the CLI. (As yet untested, and we do not especially want to send JNR over the CLI channel anyway for performance reasons.)",
  "ef74ed31": "[JENKINS-18721] Imrovement of performance - now when ListView builds up it asks for all the jobs only once. This is important because RBAC plugin each time checks permissions for all these jobs which impacts performance",
  "3d8c78e2": "use guice no_aop which is faster for our usage",
  "cc259504": "[JENKINS-18723] Fixing performance bottleneck, first step. There were 2 times relative path for the job was asked which was replaced by a single time and saving the result in a var.",
  "8d46aa6d": "[JENKINS-18895] Refined fix to not cache status during the build.",
  "11953750": "[[JENKINS-16301] Use a buffered input stream to get somewhat better performance also from Maven archiving. Introducing Util.getDigestOf(File) as a convenience.",
  "0be0940d": "grunt profile to run grunt for web resource optimization",
  "05eae0af": "for improving the test performance, running this with the default local repository",
  "9d72311b": "[JENKINS-16301] Use a buffered input stream to get somewhat better performance.",
  "c8fafe1c": "Increase the cache time from 1 day to 365 days",
  "2f287380": "Changing the sync to only sync before lazy loading the actions. The Actionable#getActions() method only needs to be synchronized when lazy loading. After that, the synchronization is superfluous and impacts performance. Since the field is volatile, the double-check block works in JDK5+. See http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html for more in Analyzing various thread dumps, many threads and requests stall on this method waiting for the lock. Since the lock isn't necessary in most cases anyway,",
  "c757e654": "[JENKINS-16342] Improving responsiveness of asynchPeople when Gravatar plugin is in use. This change does not necessarily improve total performance, since the avatar is still computed. But (1) the computation is correctly done in the work thread, not in the HTTP response thread; (2) the computation is done just once for a given User, which could reduce load when many AJAX checks are done.",
  "5c0d9cd6": "Enabling reusable forked multithreading (4 threads seems good). Seems to be roughly a few percent faster than maven-junit-plugin baseline.",
  "73aac107": "[FIXED JENKINS-16244] View.hasPeople too slow to use in sidepanel.jelly.",
  "734e7e01": "[FIXED JENKINS-15818] Display exceedingly slow for large test results.",
  "d84eca45": "[FIXED JENKINS-15816] Run.ID_FORMATTER caches stale timezone values.",
  "38a78b34": "hoping this would buy us a little bit of performance",
  "3e03a812": "This might be causing a slow down during artifact copy:",
  "288827f6": "Jelly TagScripts no longer keeps Tags in a per-thread cache.",
  "d11284b1": "the registerService call can be slow. run these asynchronously",
  "0500ec9c": "overridden a number of Job methods in AbstractProject to avoid the slow path (of loading everything)",
  "a885cc21": "[FIXED JENKINS-7214] FilePath.validateAntFileMask too slow for /configure.",
  "30de1dd4": "Merge branch 'master' into slow-people-15206",
  "8b822ce2": "added fast submap implementation",
  "54223b5f": "initial cut of the fast search path that uses build number symlinks",
  "fe67909c": "If the JDK file size is too small, don't use it as a cache.",
  "207134d4": "compiler plugin 2.4 is faster for multi modules builds",
  "bb55c075": "use prefix to static resources not to pick up stale cache.",
  "5a2d5eb6": "Explode war to /var/cache/jenkins like Debian does.",
  "e708c4e2": "Merge pull request #405 from hayato1980/spike-cachecontrol",
  "a78e6e38": "add http header for under firewall enviroment and proxy to cache",
  "e1cb982f": "excluding SSH module from the test for performance improvement",
  "58e0ea44": "LRU cache on MailMessageIdAction.messageId",
  "ac905ff0": "faster lookup by node name for NodeList",
  "a0849a73": "Improve performance of expand for radioBlock button. - Loop only on tags between block-start and block-end - Clearer and shorter code",
  "41278a7a": "some minor optimization",
  "982946be": "[CLOUDBEES-2018] improving the performance under a large side buffer. This might be a bug of its own that the unclaimed side buffer gets that long, but java.io.ByteArrayOutputStream really sucks as its bytes grow, and this does no harm",
  "4b33cd1e": "minor optimizations; added serialVersionUIDs",
  "0955a198": "Mac installer: Much faster postinstall script",
  "eacf4f1a": "Improved the plugin 'mvn hpi:run' performance by deferring the license plugin execution.",
  "ee4e9c61": "fully implemented faster classloader lookup",
  "0751429b": "added faster resolution",
  "2e0ed465": "minor optimization",
  "c6b9c7cd": "faster resource handling",
  "cddcd8f0": "move maven agents and interceptors to an external repo. as they don't change a lot build will be faster !",
  "902cc4e1": "Added an extension point to allow prodding the NodeProvisioner into taking action faster than it might usually.",
  "231c1c17": "[FIXED JENKINS-9182] Performance: Specify image sizes for faster page loading",
  "f202054c": "move maven agents and interceptors to an external repo. as they don't change a lot build will be faster !",
  "7d46b225": "[JENKINS-7535] Rebuilding dependency graph slow on large installations Submitted by evernat.",
  "ed209625": "Improved the startup performance.",
  "0bbd8666": "upgrade surefire to 2.7.1 : faster and won't use anymore this shared /var/tmp on my solaris server",
  "8e1a4db5": "local checkout is much faster",
  "e0a975b7": "read all maven project in one time instead of repeating project read : definitely improve performance for project with a lot of modules",
  "236a4136": "disable DNS multicast support during tests for performance and correctness.",
  "6253fb1b": "Test performance improvement by allowing multiple Hudsons to reuse classloaders.",
  "987ff580": "one more optimization.",
  "09dbd274": "Resurrecting the original fix for HUDSON-5756, as I'm still worried that bugparade 6933067 is related to some sort of the HotSpot optimization.",
  "acb3272c": "Fixed a bug that can cause 404 in the form validation check. Contextual ancestor portion shouldn't be cached.",
  "54467ada": "Fixed a performance problem of the job/build top page when there are too many artifacts.",
  "2aeda6cc": "integrated a newer Jelly and Stapler that runs faster with less memory",
  "b7ac1229": "made the test faster and more robustby not relying on wall clock",
  "99243dd9": "Still seeing failures caused by stale cache, so renaming it instead of cleaning it across my Hudson cluster.",
  "819039e7": "this version of Winstone has a fix in the concurrent session access, plus a performance improvement in the file submission handling.",
  "dec6b35b": "- Moves LabelFinder to hudson.model, as its a core facility, not necessarily a task or even slave related. - Removes all caching of labels. Slow extensions can cache (see nodetags). - Pulls up common implementations of getAssignedLabels and an immutable getDynamicLabels facility into Node. getDynamicLabels was previously public, but never exported. - factored out some trivially duplicated code into Node.getHudsonlabel - changes LabelFinder to return Collection<Label> as that is the data that higher layers want to work with, and there is no good reason to force lookups when implementations can and should cache themselves. - Deletes OSLabeler, a disabled version of the LabelFinder extension point - there is no need for dead code to be keep in the tree.",
  "e221c5d5": "making the symlink creation faster. Profiler says this about 5% of the wall-clock execution time, although I doubt if it takes that much.",
  "d1a4bb7b": "[FIXED HUDSON-3981] Increased the timeout to 3secs as suggested. Added caching so that successive look-ups go faster. This fix will be in 1.315.",
  "d0d54a69": "The PipedInputStream/OutputStream combo has a serious performance problem in it. Namely, the writer doesn't wake up the reader when it writes new data, and instead it relies on the wait(1000) call on the reader side to notice new data.",
  "716f5099": "[FIXED HUDSON-3799] Fix for performance problem in FilePath.copyRecursiveTo() over the network.",
  "f3b1920f": "multiple test exuections slow down a release. Let's do it just once during release:perform and be done with it",
  "dcab5471": "performance improvement",
  "ca8a5bde": "[FIXED HUDSON-3254] Use a bigger buffer size to improve remote I/O performance. Will be in 1.302.",
  "a6cf7e12": "Java5 optimization",
  "a3bac8aa": "[HUDSON-1670] use Localizables as parameters to another Localizable when creating a HealthReport (for both Build Stability and Test Results). When already-translated strings are used, these go into the cached health report, so all users see language of the person who cached it rather than their own language. Localizer package needs a fix so that Localizable.toString() defaults to LocaleProvider.getLocale() rather than Locale.getDefault().. then these strings will translate correctly to the language of the current request.",
  "fc07ad7d": "Removed unused <tt>spring-support-1.2.9.jar</tt> from Hudson as it was interfering with the Crowd plugin. (<a href='http://www.nabble.com/Getting-NoSuchClassDefFoundError-for-ehcache-tt21444908.html'>report</a>)",
  "c8de7dda": "added the fast path.",
  "a1735c14": "attempting to fix the performance problem in artifact archiving. Discovered on Sun's deployment, in the 'glassfish-v3-main-publisher' job by Harsha.",
  "573e5335": "added a switch to log start-up performance.",
  "24e470a2": "a little bit of performance improvement",
  "473bdd3c": "was experimenting with YJP to observe the start up performance",
  "3fc787d4": "was experimenting with YJP to observe the start up performance",
  "2763f18b": "// are we in the hudson main workspace? If so, pick up hudson/main/war/resources // this saves the effort of packaging a war file and makes the debug cycle faster",
  "2f31b0f2": "added HttpUnit for testing that doesn't involve scripting, as this is much faster than Selenium.",
  "4d38db7b": "Attempting to fix http://www.nabble.com/Surefire-reports-tt17554215.html I'm suspecting that the file in question has been deleted by someone else, since this relies on a temporary directory. Adding a check to make sure that the cached file exists.",
  "fa69255f": "adding a hook to disable the cache, until the day I manage to get rid of the caching all together.",
  "623e8d5d": "new format is going live for better performance.",
  "f85cf3e8": "Bit of performance optimization.",
  "7c4abd90": "Bit of performance optimization.",
  "94311a13": "did an experimental integration with YUI editor but I felt it was just too slow.",
  "e0b99062": "Since my repdeployment of Hudson to my production system last evening, I noticed a significant performance problem in loading some pages, which eventually turn out to be due to excessive Fingerprint loading activity. Upon doing some research (namely addition of the performance counters), it appears that WeakReferences are losing their values too quickly. This is bit mysterious as the Hudson JVM still had plenty of memory left, according to VisualGC. But in any case, I'm changing WeakReference to SoftReference. The package javadoc of java.lang.ref <http://java.sun.com/j2se/1.4.2/docs/api/java/lang/ref/package-summary.html> is rather vague about what the expected behaviors are, but it does say that SoftReference is for memory-sensitive cache, which is what Fingerprint is all about. I deployed this version and confirmed that it fixed the performance problem. Incidentally Eric Ramfelt sent an e-mail this morning <http://www.nabble.com/Maven-job-5-times-slower-than-a-free-style-job--tt14651245.html>, which could be of the same cause.",
  "2159e655": "adding a new serialization format that makes the fingerprint record more compact (and hopefully faster to read/write.) The feature is not online yet, as this will prevent people from going back to older version of Hudson (which sometimes people do when they face issues in a newer version.) So the plan is to let it sit there for a while, and after 10 releases or so, we'll make a switch to make this live.",
  "0992e7de": "adding logging to measure the performance of fingerprint activity.",
  "0f155e44": "performance improvment.",
  "43683fcf": "use asynchronous execution for improving performance",
  "48029ff8": "performance improvement based on the input from http://www.nabble.com/Maven-job-5-times-slower-than-a-free-style-job--td14651245.html Avoid small roundtrips, and instead group them into a bigger batch.",
  "5bbbd99a": "performance improvement based on the input from http://www.nabble.com/Maven-job-5-times-slower-than-a-free-style-job--td14651245.html Avoid small roundtrips, and instead group them into a bigger batch.",
  "91a08957": "adding performance counters",
  "b0d140e3": "adding performance counters",
  "fdc824ac": "don't let the image be cached (#1167)",
  "ef096e3e": "Applied a patch from Tom Huybrechts to improve the performance of subversion on slaves.",
  "dc1c7e3d": "performance improvement.",
  "ba312518": "Adding servlet filter that allows you to bypass the no-cache headers that Tomcat sends for files behind security constraints. By default, this filter is disabled in web.xml.",
  "bf67e9a8": "avoid slow down in svn.",
  "80f20258": "more performance improvement.",
  "41609978": "adding element name to the selector as it makes processing significantly faster.",
  "7bb8f608": "performing all remote operations at once improves the performance substantially when this runs on a remote file system.",
  "040b94bd": "fixed the svn performance issue with symlink.",
  "ab211956": "use '/static/xxx' URL for better expiration date and cache coherency support.",
  "fbb95cd5": "Proactive fix in case some plugins take too long to calculate their health report. Will now cache the health reports until the next build. Should speed display of main page.",
  "7392db40": "load static resources from the path dedicated to a specific version. This '/static/VERSION/abc/def.ghi' path is interpreted by stapler to be the same thing as '/abc/def.ghi', but this avoids the stale cache problem when the user upgrades to new Hudson. Stapler also sets a long future expiration dates for such static resources.",
  "c0984a4a": "cached path.",
  "c45b3d70": "use the wrapper for better performance.",
  "3f3cddc3": "- added maven 2.0.6 support - added a debug probe - process reuse cache is now live",
  "26ee3433": "performance improvement in the recursive copy method.",
  "aa056734": "implemented maven process caching to improve performance, especially in the distributed environment. This feature is not enabled for general use right now, so that I can give it a longer soak time.",
  "2043b710": "don't sign the debug builds so that we can run faster",
  "87667f01": "buffering to improve performance.",
  "3d9c26ac": "Using GET seems to cause IE to cache the text locally, instead of hitting the server. Using POST doesn't seem to have this problem.",
  "3cc173b5": "needs to add loaded Fingerprint to cache.",
  "1e87dd07": "reimplemented pipe for better performance. test now runs in 2.3sec down from 17sec before."
}, "jetcache": {
  "8de0ea4": "feat: Support custom AutoConfigureBeans, such as default local cache config (#783)",
  "9702b83": "upgrade fastjson2 to 2.0.21",
  "72dcd43": "upgrade fastjson2 to 2.0.20",
  "8aaf5c1": "add logback-core dependency in jetcache-test",
  "f34837d": "update com.fasterxml.jackson.core:jackson-databind 2.13.3 to 2.14.0-rc1 (#732)",
  "a2891fd": "update fastjson2 version to 2.0.12",
  "17eb6b3": "update fastjson2 to 2.0.11",
  "f2d5e8f": "Add --release to javac, so we need java 11+ to build jetcache",
  "ad124f9": "rename CacheMonitorManager to CacheMonitorInstaller and move related code to jetcache-core.",
  "d12914d": "Move create cache logic from CacheContext to CacheManager",
  "1be9bc3": "use fastjson2 key convertor in test code",
  "135d8a8": "Add fastjson2 encoder/decoder, but not register by default.",
  "82cafb1": "change key convertor from fastjson to fastjson2 in sample code.",
  "3dd4b97": "support both fastjson and fastjson2 as key convertor, make fastjson dependency optional, change default key convertor to fastjson2.",
  "27159e8": "upgrade fastjson to fastjson2",
  "5e8ad4f": "spring data redis support local cache invalidation broadcast",
  "3dda267": "Remove default value of ExternalCacheConfig.broadcastChannel, this property must set to enable local cache invalidate notification.",
  "fde9b5f": "unit test for lettuce cache broadcast support",
  "2bc22ec": "unit test for lettuce cache broadcast support",
  "5defc40": "lettuce cache broadcast support",
  "661092d": "Add mvel to jetcache-test",
  "1fdefc5": "upgrade fastjson to 1.2.83",
  "62001ce": "Add unit test for cache synchronization",
  "922e7c7": "ignore cache message producer by self.",
  "120749a": "New feature: support invalidate local cache when MultiLevelCache put/remove",
  "93da455": "New feature: support invalidate local cache when MultiLevelCache put/remove",
  "f4a20be": "remove cache create action in SimpleCacheManager.getCache()",
  "78d3dcb": "Move CacheManager and SimpleCacheManager to jetcache-core",
  "ef1f34c": "Fix cache.getAll() not cache null value (#652)",
  "4b00ce7": "update fastjson/mvel/kryo/caffeine version.",
  "86239da": "update fastjson to 1.2.76",
  "f2811b7": "Fix flaky test of Anno cache messages (#614)",
  "a5409f4": "cache key prefix can dynamic change in runtime (#593)",
  "c549655": "Bump junit from 4.12 to 4.13.1 in /jetcache-test (#522)",
  "94ce135": "update fastjson to 1.2.68",
  "9a3ceba": "add support for repeatable cacheInvalidate (#404)",
  "8fb54c5": "add javax.annotation-api dependency for jetcache-anno",
  "278b749": "fix hard code of fastjson KeyConvertor",
  "7fb03a3": "Add cache refresh mechanism to computeIfAbsent method.",
  "ea0bf2d": "improve cache initialization in CacheManager.",
  "30465f6": "move MockRemoteCache to jetcache-core",
  "e655411": "unit test for jetcache spring-data-redis auto configuration",
  "a11d3f5": "update dependency libs: fastjson 1.2.51 -> 1.2.56 mvel2 2.4.0.Final -> 2.4.4.Final change to optional caffeine 2.6.2 -> 2.7.0",
  "9005bf4": "Add CacheManager, use CacheManager.defaultManager().getCache(cacheName) to obtain Cache instance created by @Cached annotation.",
  "1d89558": "Add CacheManager, use CacheManager.defaultManager().getCache(cacheName) to obtain Cache instance created by @Cached annotation.",
  "52e4cde": "bug fix: cacheNullValue doesn't work for CacheType.BOTH in @Cached annotation.",
  "5e952ca": "fast fail when lettuce connection failed.",
  "4b9f77b": "Fix problem: jetcache-core's dependency to spring is not optional.",
  "beecbc8": "update minor version of fastjson and lettuce",
  "6e69cbf": "jetcache spring sample",
  "10018c9": "Support read from slave for lettuce. e.g. in spring boot set property jetcache.remote.${area}.readFrom to slavePreferred.",
  "eb07921": "Add jetcache.enableMethodCache property, so we can disable jetcache in dev profile.",
  "1ccddb2": "Eliminate the warning log : 'jetcache REMOVE return unexpected code: NOT_EXISTS'.",
  "00462d5": "unless -> postCondition, only false will veto cache updating.",
  "afba6fd": "Re-add unless to Cached annotation; Fix bug in LoadingCache that method getAll does not respect to cacheNullValue config; Fix bug that null value put into cache when value script evaluate fails in CacheUpdate annotation; CacheLoader implements Function interface.",
  "1a5ebf9": "Optimize memory performance of JavaValueEncoder",
  "d6d5795": "Add cache penetration protect feature to readme.",
  "ee21e9e": "Add penetration protect (without unit test): 1, Only one thread execute loader when cache miss. Affected methods include AbstractCache#computeIfAbsent, LoadingCache#get, LoadingCache#getAll. 2, Introduce @CachePenetrationProtect.",
  "6d482af": "Automatically detect encode type before decode, so no error occurs after changing encoder/decoder for a remote cache.",
  "98e3556": "optimise cache refresh with MultiLevelCache, fix bug and update unit test.",
  "f9ae09c": "optimise cache refresh with MultiLevelCache (without unit test)",
  "d70566c": "fix duplicated statistic of load count in method cache.",
  "73a9323": "fix #27, @CacheRefresh doesn't work if cacheType=CacheType.BOTH",
  "827587a": "add @CacheRefresh for automatically refresh method cache using annotation; remove unless attribute from @Cached",
  "d98b357": "bugfix: cacheNullValue config in RefreshCache does not work",
  "e85d1bd": "remove maven.deploy.skip property from jetcache-test",
  "786e4bb": "bugfix: ClassCastException occurs when different application server connect to same remote cache server using different cacheType(CacheType.REMOTE or CacheType.BOTH).",
  "02d6241": "introduce @CacheUpdate for updating cache entry after a method invoke.",
  "f73af8f": "introduce @CacheInvalidate for removing cache entry after a method invoke.",
  "294adce": "remove all package private scope field in com.alicp.jetcache.anno.method package.",
  "c9d8534": "optimise cache function implementation in CacheContext",
  "37c0fb8": "bypass local cache when refresh in a MultiLevelCache instance",
  "ee6c542": "add tests for jetcache-redis-lettuce",
  "59521bd": "move jetcache-redis-luttece, jetcache-starter-redis-luttece to jetcache-redis-lettuce4,jetcache-starter-redis-lettuce4",
  "19367cb": "jetcache-redis-lettuce for lettuce 5 support",
  "92df5ac": "update dependencies: spring 4.3.12 boot 1.5.8 fastjson 1.2.41 mvel 2.4.0 kryo 4.0.1 caffeine 2.6.0",
  "78b707e": "move jetcache-redis-luttece, jetcache-starter-redis-luttece to jetcache-redis-lettuce4,jetcache-starter-redis-lettuce4",
  "0f3208a": "fix misspell lettuce in configuration. 1. Both cache type value ('redis.luttece' and 'redis.lettuce') are supported in yml 2. Both bean name ('redisLutteceAutoInit' and 'redisLettuceAutoInit') are supported. 3. Constructor of JetCacheConditon and AbstractCacheAutoInit need an array parameter.",
  "c2ac2d8": "Fix unit test problems under spring 5.0.1 (use a KeyConvertor for all method cache test).",
  "05c3f36": "if sub cache has a loader, MultiLevelCache will throw a CacheConfigException during construction.",
  "0abe3bb": "fix compatible problem with Spring(<=4.2) in jetcache 2.1.5, 2.2.0.Beta1, 2.2.0.Beta2.",
  "3ba630c": "optimise multi level cache.",
  "2a7f63d": "rename cacheNullValueByDefault -> cacheNullValue",
  "f712477": "use loading cache",
  "3561a56": "loading cache impl; add ConfigAwareCache",
  "123b342": "move jetcache-redis module to jetcache-support",
  "6f24e61": "skip deploy for jetcache-test",
  "a5bf562": "记录日志的时候使用fastjson转换key",
  "c8e3bc4": "修复CacheAdvisor构造的时候按类型注入JetCacheInterceptor，在特定的复杂场景下导致无关bean被提前初始化，无法被AOP拦截的问题。 修改前的相关代码： public CacheAdvisor jetcacheAdvisor(JetCacheInterceptor jetCacheInterceptor) { ... }",
  "1490187": "增加CaffeineCacheTest的cache超时时间",
  "ec3580e": "简化getMethodSig；升级fastjson",
  "497dc90": "jetcache2 xsd",
  "b09cbeb": "fastjson key convertor不处理byte[]",
  "9c09a5e": "rename jetcache-ali",
  "21a6aac": "添加cacheName属性",
  "a950d59": "add monitor for jetcache-anno",
  "68a1040": "remove lirs cache impl",
  "477f981": "获取cache方式的更新",
  "7ee73f6": "remove fastjson encoder test",
  "96f9078": "remove concurrentlinkedhashmapcache",
  "a644d07": "some redis cache tests",
  "a2a183b": "some redis cache tests",
  "eee1851": "some redis cache tests",
  "2c753f5": "jetcache-test",
  "87b4b54": "redis cache",
  "af57574": "compound cache",
  "f067f7d": "compound cache",
  "ba598b6": "本地cache的单元测试",
  "37de1f8": "fastjson1.1.41->1.2.8, mvel 2.1.6->2.2.7, kyro(id有变更) 2.22->3.03",
  "4732522": "降级fastjson通过序列化单元测试",
  "e9162f9": "fastjson 1.1.46",
  "4ee9a1f": "jetcache-tair -> jetcache-ali",
  "2c50141": "不完整的单元测试，遇到了不添加spring的cache，JetCache的Advisor就不执行的情况。",
  "b89d283": "localcache设置默认值",
  "a9573a3": "localcache移动",
  "025e533": "localcache实现",
  "c40a5ac": "一些基本结构，引入fastjson做key生成"
}, "jetlinks-community": {
  "b688e55": "fastjson 1.2.83",
  "e41ce54": "fastjson 1.2.83",
  "44416e5": "增加cachedConfiguration",
  "a781765": "升级fastjson",
  "5c1a096": "add maven cache"
}, "Jetpack-MVVM-Best-Practice": {
  "a718254": "optimization merged",
  "d6faa0b": "optimization merged",
  "f01f287": "optimization merged"
}, "jetty.project": {
  "49163776": "PathMappings optimizations (#9055)",
  "3df45b92": "Merge pull request #8569 from eclipse/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-databind-2.13.4",
  "6445affc": "Merge pull request #8572 from eclipse/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-core-2.13.4",
  "c1ab3949": "Merge pull request #8570 from eclipse/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-annotations-2.13.4",
  "4eff1a91": "improve performance of alias checking",
  "3ced67f8": "fix exclusion of groups stress and slow (#8399)",
  "280b249b": "Merge pull request #7781 from eclipse/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "78d9b127": "Merge pull request #7701 from eclipse/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-databind-2.13.2",
  "984376b7": "Merge pull request #7704 from eclipse/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-core-2.13.2",
  "52ed1091": "Merge pull request #7702 from eclipse/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-annotations-2.13.2",
  "a5de5970": "Merge remote-tracking branch 'origin/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-annotations-2.13.1' into jetty-10.0.x-update-infinispan-deps",
  "1f1078cf": "Merge remote-tracking branch 'origin/dependabot/maven/jetty-10.0.x/com.fasterxml.jackson.core-jackson-core-2.13.1' into jetty-10.0.x-update-infinispan-deps",
  "4868ed0a": "Issue #7034 infinispan flaky tests on CI, force TCP over UDP for jgroups multicasting as it is too slow with kubernetes (#7122)",
  "13400b3e": "interpolate mod file for mongo and xmemcache as well",
  "51f6a58f": "Merge pull request #6758 from eclipse/jetty-10.0.x-extensible-default-session-cache",
  "5d59f407": "Bump xmemcached from 2.4.6 to 2.4.7 (#6710)",
  "90a72b07": "Issue #6556 Ensure context classloader set when operating on memcache. (#6557)",
  "8945a58f": "Reduce header cache memory usage on non persistent requests (#6494)",
  "960dac2a": "add a fast profile to quickly build everything",
  "f4c32e78": "Fix #5562 Improve HTTP Field cache allocation (#5565)",
  "a1e8c09e": "Merge pull request #5604 from eclipse/dependency/jetty-9.4.x/com.googlecode.xmemcached-xmemcached-2.4.6",
  "9152fc31": "Bump xmemcached from 2.4.5 to 2.4.6",
  "a2cd9b3a": "fix maven plugin starting distribution as jetty home has different name, configure invoker plugin to be faster when running locally",
  "004bbe4e": "Add deletion test for memcached session data cache.",
  "a78d2f47": "use testcontainers to start memcached via docker for testing real remote memcached server",
  "44d601aa": "Merge pull request #4924 from eclipse/jetty-9.4.x-4923-sslattributes-cache",
  "3845790c": "Hpack optimizations",
  "01438e6f": "Code cleanup. Changed the way the test directory was created: it was based on a millisecond timestamp, but the tests run fast and it was possible that two tests were creating the directory within the same millisecond.",
  "d371c149": "Improve performance of small websocket messages",
  "1a0f08b8": "Improve test performance.",
  "cbe34d9b": "Revert 'Jetty 9.4.x release faster (no need of triggering plugins already triggered) (#3944)'",
  "50aa1cf7": "Jetty 9.4.x release faster (no need of triggering plugins already triggered) (#3944)",
  "e5bce5f7": "Issue #3840 - Static resource byte-range support performance",
  "33fe55c3": "Issue #3708 - use StringUtil alternatives for known slow JVM impls.",
  "4e00f889": "Issue #3715 - Improve Log condensePackageString() performance",
  "2ba0c7bb": "Issue #3681 cacheContent type and avoid unnecessary character encoding calculations",
  "e8f11d3c": "Added small performance improvements",
  "f0e41028": "Merge pull request #3657 from TheRealHaui/small-minor-performance-improvements",
  "53c9a8c3": "Small minor performance improvements",
  "665b1929": "Small minor performance improvements",
  "9af47075": "Issue #3234 - AuthenticationProtocolHandler should not cache the failed results.",
  "33bceb3c": "Fixes #3234 - AuthenticationProtocolHandler should not cache the failed results.",
  "baca9cae": "Use cache to download to mongo and upgrade mongodb plugin (#2949)",
  "33a13673": "Fixes #2821 - AuthenticationProtocolHandler should not always cache Authentication.Result.",
  "0f6ae93f": "Issue #2828 - AbstractHTTP2ServerConnectionFactory concurrent connect low performance.",
  "97a2f3bd": "Fixes #2828 - AbstractHTTP2ServerConnectionFactory concurrent connect low performance.",
  "d3e75c59": "Fixes #2828 - AbstractHTTP2ServerConnectionFactory concurrent connect low performance.",
  "0ba1d9b5": "Issue #307 datecache contention (#2725)",
  "127b3029": "increase default timeout to prevent failure on slow machines",
  "1fc1ac89": "Fixes #2545 - Slow HTTP2 per-stream download performance.",
  "9c814437": "Issue #2482 Protect against NPE in MemcachedSessionDataMapFactory",
  "06b04e9c": "enable cache for pmd plugin",
  "9c68b141": "Issue #2361 - CachingWebAppClassLoader using cache properly",
  "adeaf77c": "Small optimization to save the allocation of an iterator, in case the selector has been woken up without selected keys.",
  "7bc5e6e3": "Small code cleanup and optimization in dump().",
  "a0b8321e": "Jetty 9.4.x 2038 slow filesessiondatastore (#2102)",
  "31e55319": "Small optimization when starting reserved threads.",
  "b5a38d82": "HttpParser is not using cached HTTP Field values (#1979)",
  "35b94fff": "Improving touchy timeouts on slow machines",
  "c665106f": "Issue #1057 - Improve WebSocketUpgradeFilter performance",
  "2387d973": "Made test more robust on slower machines.",
  "811549a0": "Made test more robust on slower machines.",
  "3f106523": "Allow a list of memcached servers to be configured for session caching.",
  "ea633359": "Remove debug stacktrace from MemcachedSessionDataMap.",
  "739dbc8e": "Use new logging module dependency for session-store-cache module.",
  "1b508e37": "Add test for memcached session data.",
  "bb73aea6": "Fix memcache session data cache module",
  "fd0c2c96": "Reinstate xmemcached module",
  "35077c98": "Increased timeouts to avoid failures on slower machines.",
  "dc7bd636": "Increased timeouts to avoid failures on slower machines.",
  "c0f54ab8": "Increased timeouts to avoid failures on slower machines.",
  "da4a9e4c": "Enlarged client-side idle timeout to avoid failures in slower machines.",
  "45eac1de": "Enlarged idle timeout to avoid failures in slower machines.",
  "9a541f0e": "Fix version in jetty-memcached poms",
  "d52a1701": "Add module for session data cache",
  "d6689ce8": "Add memcached option for session data caching",
  "4ea5ec8c": "Add factory for a SessionStore with a fronting cache.",
  "c99db579": "Refactor name of SesstionStore than supports cache of data.",
  "7e7b1268": "Issue #362 (Very slow page load and missing resources when using HTTP/2 with Jetty 9.3.7)",
  "30557429": "484801 Avoid non-cached memory mapped files",
  "81b2a6a4": "483059 Remove cache of authenticated users",
  "2d88fdf3": "477278 Refactored DefaultServlet for cached Gzip & Etags",
  "3909f458": "Ensure auth protected page in test-jaas webapp is not cached by browser",
  "96f7856b": "471071 jetty-infinispan.xml incorrect syntax for remote named cache",
  "72222ba8": "Small optimization: call readyOps() outside spin lock.",
  "34452096": "Performance optimization: remember the key current interestOps.",
  "282e53cd": "Performance optimization: call selector.wakeup() outside spinlock.",
  "f6c1cc46": "467055 Mongodb session scavenging can result in very slow query",
  "7da5db8d": "458478 - JarFileResource improve performance of exist method",
  "d08fced0": "handle slow arriving input",
  "dc33bb84": "447472 test harness for slow large writes",
  "c7d0bfce": "basic push cache filter",
  "4d7ead76": "basic push cache filter",
  "c19a14a4": "[FindBugs] Ensure proper lazy-initialization even if this costs some performance",
  "937ef107": "[FindBugs] outer if statement alreayd catches max_cached_files",
  "9acf971c": "cache path URI in table",
  "b55dba82": "use scheme cache",
  "e8fcb90b": "DefaultServlet uses cached headers",
  "cd003dce": "Adjusting test timeouts for slow systems",
  "d76c7868": "430273 Cancel async timeout breaks volatile link to avoid race with slow expire",
  "ce4e07f6": "Added comments about optimizations that may be included as part of fixing 423974 - Optimize flow control.",
  "45724b63": "Improved masking performance by using ints instead of bytes.",
  "1c73ce67": "Using direct buffers for reads, to avoid copy of the bytes by the JDK, and because they yield better performance for masking.",
  "d86ceaf7": "HttpClient optimizations.",
  "e87eee1b": "412629 PropertyFileLoginModule doesn't cache user configuration file even for refreshInterval=0",
  "1dbab408": "412629 PropertyFileLoginModule doesn't cache user configuration file even for refreshInterval=0",
  "b63a6047": "WebSocket - better protection on metadata cache",
  "d0f3db0f": "401150 close input stream used from cached resource",
  "c7d985fa": "400859 limit max size of writes from cached content",
  "df56bd3c": "400014 - Http async client DNS performance.",
  "2d7b96ba": "jetty-9 added Ternary Trie impl for connection field cache",
  "25324b66": "jetty-9 made Trie abstract and added TreeTrie for the HttpParser cache to save space",
  "3fb5af01": "Code cleanup plus optimizations plus javadocs improvements.",
  "3216a284": "jetty-9 per parser fields cache",
  "f7c2e850": "jetty-9 per parser fields cache",
  "f01da31a": "jetty-9 some optimizations",
  "a20d984d": "jetty-9 Added Trie for cached string lookup. HttpFields does not use StringMap",
  "57849a90": "Adding -Dtest.slow.destroy support to CookieDump to aid in testing of start.jar -DSTOP.WAIT=360 --stop",
  "57abd6fd": "Per hybi list, adding no-cache to outgoing client request to prevent bad intermediaries from attempting to cache the upgrade response.",
  "6cc0734a": "jetty-9 miscillaneous optimizations: donot dispatch to HTTP and SPDY; improved executorCallback",
  "6601b651": "Jetty9 - Made the test more reliable and marked it as slow.",
  "b37da5a5": "Making payload fast-fail and demasking work together in peace and harmony",
  "0f4fe634": "Adding UTF8 fast fail test case that doesn't fail as expected on the websocket side",
  "28bc4794": "Verifying that fast-fail on utf8 works",
  "01c40b52": "Fixing Parsing of masking bytes on slow testcase (would read in reverse order under certain conditions)",
  "78802c35": "Jetty9 - SPDY: computing return value for write() and small optimization in fill().",
  "9a5f8618": "jetty-9 slow progress on SSL robustness",
  "6e62ab9b": "jetty-9 slow progress on SSL robustness",
  "556ff1a2": "372457 - Big response + slow clients + pipelined requests cause Jetty spinning and eventually closing connections. Added a TODO for a method renaming that will happen in the next major release (to avoid break implementers).",
  "c9c5bd3b": "372457 - Big response + slow clients + pipelined requests cause Jetty spinning and eventually closing connections.",
  "60bb4a41": "jetty-9 used enums instead of cached strings. Refactor of parser in progress to IO independent style. passes 1 test",
  "4a03daa3": "Added micro benchmark for header parse performance.",
  "3e3f9f18": "Added TODO for an optimization.",
  "ae5ddb29": "369216 turned off the shared resource cache",
  "300157fb": "more time needed for ssl test on slow machine",
  "f01c8f7e": "352684 Rewrote thread monitor code, removed deadlock detection, removed spin analyzer that was slow",
  "449db20d": "Fixes #353862 (Improve performance of QuotedStringTokenizer.quote()). Corrected various implementation mistakes (thanks test suite).",
  "01cbaf52": "Fixes #353862 (Improve performance of QuotedStringTokenizer.quote()).",
  "0a6c7ad8": "353563: HttpDestinationQueueTest too slow",
  "cd0dd3e8": "[Bug 352999] test performance patch applied to jetty-client, thanks Thomas",
  "2be17748": "Miscellaneous changes resulting from the optimization for 7.5.x Mostly refining debug and toString() Use shutdown for idle expiry",
  "93f3ec17": "test harness cleanups after performance branch merge",
  "f4255bde": "Merge branch 'master' into performance",
  "a26ddd59": "created performance version",
  "f52995b4": "Merge branch 'master' into performance",
  "565f92ac": "Merge branch 'master' into performance",
  "c61e490d": "Merge branch 'master' into performance",
  "1093a955": "Merge branch 'master' into performance",
  "1f790a5f": "[Bug 349870] proxy servlet protect continuation against fast failing exchanges",
  "2f7eb54e": "[Bug 349870] proxy servlet protect continuation against fast failing exchanges",
  "57a8287d": "330210 Improve performance of writing large bytes arrays",
  "ce026a4f": "JETTY-1289 LRU cache for filter chains",
  "9f0a75da": "319334 improved resource cache",
  "727e58b0": "Updating eclipse-drop properties. Updating antrun to version 1.4 so that we can use ant 1.8 and the new <get skipexisting='true'> which makes having a local download cache easier. Also using a more efficient (and easier to read) <get> and <copy> syntax.",
  "c3d31d68": "Fix for #304803 (Remove TypeUtil Integer and Long caches).",
  "423c17b1": "do not use NIO cache for SSL",
  "4d20d654": "JETTY-903 Stop both caches",
  "2747d128": "306330 Flush filter chain cache after Invoker servlet",
  "66533d0a": "304781 Reset HttpExchange timeout on slow request content. 304801 SSL connections FULL fix",
  "0340565c": "JETTY-1177 Allow error handler to set cacheControl",
  "3999080e": "JETTY-983 Default servlet sets accept-ranges for cached and gzip content",
  "e0b2eb23": "no cache on form login pages",
  "b63e94e6": "no cache on form login pages"
}, "jfinal": {
  "93c49cc": "fastjson upgrad to 1.2.70",
  "1ad015d": "fastjson upgrade to 1.2.67",
  "90779ef": "构造方法添加 boolean cache 参数"
}, "JFoenix": {
  "da11fad": "fixed wrong optimization in JFXColorPicker (creating the pop when instantiating the skin is a bad idea)",
  "dd34845": "change name from cache strategy to cache policy",
  "c8e1126": "fixed #537 by adding a caching strategy to JFXDrawer to improve animation performance",
  "c49390a": "added cache container property to JFXDialog to improve dialog animation if its parent container had alot of nodes",
  "8bfc381": "fixed creation of cached mementos in CachedTransition",
  "53fab89": "cached target end value in JFXAnimationTimer",
  "70d7fea": "minor optimizations",
  "52ad96e": "minor optimizations",
  "9092962": "improve performance of JFXTreeTableView when adding/removing items , fixed #433",
  "ccd40e3": "removing the node from cache history when the animation is over",
  "e3323b1": "Major rework of JFXRippler implementation, better performance and animation",
  "ecbb7d3": "optimization on color picker animations",
  "88b371e": "improve controls performance by removing invisible nodes from the scene and adding them when needed",
  "977f3ba": "cached JFXTabPane selection animation, and removed the shadow effect from JFXDrawer",
  "daac51b": "improve JFoenix performance when maximizing the stage",
  "ab34d0c": "improve performance of some controls",
  "a6ac5a0": "added overlay option to date picker ( need to optimize its performance on mobile )",
  "a6f45cd": "fixed the issue that causing combobox to throw binding exception , also improved JFXListCell performance",
  "a9b35b6": "improve JFXlistview performance",
  "31f27e3": "rework of C3DButton, better implementation that support border change. also a significant improve in C3DTreetableview performance",
  "3c710df": "improved tabs pane animation performance by preventing adding the tabs every time",
  "74a637d": "fixed performance issue while resizing the column header cause by creating the new header objects everytime it gets resized"
}, "JGrowing": {
  "": ""
}, "JiaoZiVideoPlayer": {
  "7a08533": "Merge branch 'feature/video_cache' into develop",
  "2f17d82": "video cache api done",
  "6990592": "change stuct for video cache",
  "e4aa8d0": "fix ui slow",
  "e91973d": "video cache in demo",
  "9e18091": "video cache",
  "6b52b02": "faster build",
  "b09bde6": "do not need cache image any more",
  "3c77ec6": "fix cache image gravity",
  "8f4bdbb": "avoid ijkplayer get cache position bug",
  "6304fc0": "It will be faster , idea is right, need more test"
}, "jib": {
  "dd5d60f": "chore(deps): bump com.fasterxml.jackson:jackson-bom (#3998)",
  "695d5c8": "chore(deps): bump com.fasterxml.jackson:jackson-bom (#3929)",
  "7aa1110": "fix: Check for existence of layers in cache before returning cached base image (#3767)",
  "6df635e": ":zap: Gradle build optimizations (#3670)",
  "adc61eb": "Bump actions/cache from 2 to 3 (#3602)",
  "c5ec3a0": "Bump actions/cache from 2.1.5 to 2.1.6 (#3270)",
  "b49a733": "Explain Google's Docker Hub cache (mirror.gcr.io) (#3251)",
  "cb74d52": "Bump actions/cache from 2.1.4 to 2.1.5 (#3231)",
  "724a8ae": "Bump actions/cache from v2 to v2.1.4 (#3039)",
  "cc990be": "Use cacheDirectories in cli commands (#2938)",
  "4e16c89": "Update jib-core default application cache dir (#2945)",
  "02568ba": "Add new Utility to determine cache location (#2929)",
  "63837b3": "CHANGELOGs about manifest cache invalidated (#2740)",
  "a4028d5": "Implement new manifest cache fully capable of multi-platform image building (#2730)",
  "e722ab7": "Implement new manifest cache design: cache manifest lists and manifest+config pairs (#2711)",
  "0a144f7": "Prepare JSON template classes for new manifest cache design (#2707)",
  "5d20249": "Check if cached manifest matches configured platform (#2658)",
  "ded5c22": "Update README for new cache location (#2231)",
  "c733350": "Update changelog for cache location change (#2225)",
  "cfbec81": "Change base image cache location on mac/windows, add methods for getting XDG config location (#2218)",
  "4c0a324": "Skip docker save if docker daemon base image is cached (#2049)",
  "428498f": "Add cache methods for writing/reading local base image container config (#2038)",
  "03b15bc": "Check base image cache if referenced by digest (#2039)",
  "7e3695b": "Retry cache installation attempts on Windows (#1887)",
  "9d5ee51": "Add cache methods for retrieving manifest and container config (#1676)",
  "91ee29b": "Remove unnecessary cache interfaces (#1670)",
  "0392db2": "Add cache methods for saving manifest and container config (#1666)",
  "f6ee164": "Update com.fasterxml.jackson.core:jackson-databind to 2.9.8 (#1392)",
  "a7377b9": "Add system properties for setting cache directories (#1306)",
  "fb6f963": "Add file permissions to cache selector (#1182)",
  "1ce9c0b": "Include last modified time in cache selector digests instead of metadata (#1107)",
  "a2c80a8": "Renames ncache to cache. (#1056)",
  "71a695c": "Archives Proposal: Improved cache mechanism (#1057)",
  "c37ed3f": "Changes the builder steps to use the new ncache.Cache. (#1047)",
  "b2bd6b4": "Stores temporary cache files under cache directory. (#1037)",
  "24afb5b": "Adds Cache with initial method for fetching a cache entry by layer entries. (#975)",
  "2419a62": "List cached layer digests as Set (#986)",
  "70f5cf5": "Proposal RFC: New cache mechanism (#878)",
  "4932ade": "Create new cache interfaces under a new package ncache. (#869)",
  "02107ee": "Lock cache metadata files for access (#849)",
  "b23dcdc": "Makes sure there are no duplicate cache entries. (#739)",
  "02104b3": "Enhance build.sh to allow faster iterations for test (#726)",
  "c2c481f": "CHANGELOG for slow regex parsing fix (#690)",
  "860cba0": "Changes cache metadata to take many layer entries instead of just one. (#508)",
  "7f721c6": "Suggests the user to clean their build cache upon CacheDirectoryNotOwnedException. (#472)",
  "ec151fc": "Exposes configuration for configuring cache locations. (#445)",
  "3d9be5f": "Fixes BuildImageMojoIT to use only project-level cache. (#178)",
  "4e02406": "Adds default base image layers cache directory for Caches. (#133)",
  "39653c2": "Adds UserCacheHome for OS-specific user cache resolution. (#154)",
  "4761b81": "Changes cache metadata sourceDirectories to sourceFiles. (#84)",
  "9bf7ed0": "Adds cache management classes for holding cache information. (#56)"
}, "JimuReport": {
  "17bbca3": "新版发布1.5.0，解决fastjson漏洞问题和其他功能问题"
}, "jitsi": {
  "b41d9062": "Offline cache must match exactly",
  "ed1bcc78": "fix: Deletes transaction ids from the cached credentials.",
  "fe7c3674": "fix: Clears authorization headers cached per call.",
  "83d0f951": "Installing bundles is fast, starting is slow, resolving irrelevant",
  "1de8c386": "Add Maven build cache to build action",
  "d09a39f8": "Converts 'cache non caps' constant into field in ScServiceDiscoveryManager. Fixes 'copy' method in IceTransportPacketExtension.",
  "5cee50b1": "Delete the Felix cache folder on a major or minor version change",
  "128a1874": "jitsi/libjitsi commit 2a8891d47d877c867df1dad4674331beca095b00: Mitigates the general slowness and the occasional blockiness of the TCP socket writes.",
  "04dadc68": "Removed TRACE logging for findContactByID: it slows things down a lot and is almost never of any use.",
  "74809121": "Timer now activates to clean up outdated chat room list cache.",
  "27c06540": "Betters the performance of a boolean check. Manually formats source code.",
  "bac44b67": "Added an expiration time (60 seconds) for chat room list cache.",
  "997c7787": "Adds thread dispatching on provider added or became online to avoid blocking other listeners as this dispatch can be slow.",
  "5d49287e": "Fixes duplicate items in cached recent messages that leads to wrong messages shown.",
  "97434471": "Uses a Thread pool for StunClientTransaction in order to improve performance.",
  "39ff767a": "Fixes double attempt to add a protocol provider to LoginRenderer and to schedule a second login to the provider, happens every time if the creation of the ProtocolProviderService slows down for some reason.",
  "77afb677": "Use cache directory for avatars",
  "8ad5e173": "Set defaults for log and cache directory when profile directory is set",
  "f2694065": "Use separate dirs for application logs, cache and configuration data",
  "3b832847": "Cleans up code, fixes javadocs, applies tiny optimizations.",
  "4edebccf": "Clears the default DNS cache when supplied records for primary server changed.",
  "bc029988": "Corrects DNS cache issue when testing DNS connectivity.",
  "b97e30b3": "Implement a new cache handling for ZRTP",
  "6490246d": "Cleans up source code, provides tiny optimization.",
  "ec96712d": "Gains performance by disabling the writing of the FMJ Registry file since it is not being loaded anyway.",
  "4cb5d710": "Adds ice states to call info. Fixes a problem with creating two transport managers for jabber calls and slow creating of upnpharvester.",
  "9b808b2b": "Fixes processing jabber presences and displaying online contacts even if slowly initializing the contactlist.",
  "3bb4311f": "Refactors (neomeida's) volume control for the purposes of optimization, simplification.",
  "3fca394c": "Attempts to fix slowly loaded contact list.",
  "99de8340": "Fixes slow sending of jabber messages. Fixes some messages in history not shown, filtered by history service or exception obtaining display name of offline contacts.",
  "328d8f06": "Add a cache to the certificate service's AIA lookup",
  "c8638d40": "Improves the performance of the iLBC codec (encoder and decoder) by lowering its memory requirements and reducing the number of array allocations and copies.",
  "05c83e5d": "Revert some optimizations.",
  "c87fd586": "Creates less garbage in the QuickTime video CaptureDevice in order to resolve short freezes in the video. Comes at the expense of execution speed due to an additional copying of each frame. The performance penalty is to be addressed in a subsequent commit.",
  "ceb8e40d": "Adds a few function to the JNI wrapper of FFmpeg which is to allow enabling faster transfer of frames from the H.264 decoder to the colorspace converter and scaler.",
  "9b6c362a": "Minor optimization.",
  "bae141da": "Improve native unix screencapture performance by removing memory allocation (malloc) in x11_grab_screen function. It reduces strongly CPU usage (from ~140% to ~90%). Linux binaries (32/64) needs to be build.",
  "32a1fc08": "Optimizes the playback of audio when using PortAudio (i.e. the Renderer and when playing back notification sounds). The main optimization is the reduced copies of the audio samples which used to be at least 3 in the best case and now there is 1 in the best case and 3 in the worst case. On my Ubuntu Karmic desktop, I see audio interruptions being brought down from often to rare. The binaries for 32- and 64-bit Linux and 32-bit Windows are kindly prepared by Damian Minkov. There is no binary for 64-bit Windows.",
  "22089e5b": "Update libffmpeg with latest changes for Windows (32-bit) and MacOS X (universal library i386, x86_64 and PPC). It adds possibility to set interresting parameters (max B-frame, number of references, ...) in ffmpeg in order to provide better video streaming optimization.",
  "eedf28ab": "Return old notify service but as deprecated (start does nothing) in order to avoid loading the old jar from the felix cache.",
  "3ba33644": "Commits minor code cleaning here and there and applies a tiny optimization while looking for something else.",
  "3a871d22": "Adds to AudioMediaDeviceSession, its descendents, and AudioMediaStreamImpl, the methods necessary to access cached audio levels",
  "edf1f147": "Introduces an audio level cache in audio mixers",
  "fb18dba6": "Adding a map that we can use to cache last measured audio levels",
  "d58c5db9": "Adding a map that we can use to cache last measured audio levels",
  "7277bf34": "Prevents NumberFormatException in the cases in which it is clear that it will be thrown and caught for the sake of performance.",
  "e67a3d89": "Speeds up the processing of smileys and thus the display of messages for both chat and history. Local testing of normal chat use for a couple of days with the profiler attached, show it's very-roughly 5 times faster than before. Profiler aside, the speed-up is more likely to be seen/felt when receiving multiple messages in a row such as when connecting to an IRC server and when viewing history.",
  "7d22a7dc": "- Fixes ClassCastException in ChatRoom-related code which handles failure of delivery of a message and in its respective AdHocChatRoom duplicate. - Simplifies a bit and speeds up ChatWindowManager. Part of the approach to remove its #syncChat and prevent a deadlock with IRC. - Removes a field or two to reduce the shallow runtime size of the instances of the affected class. - Fixes a few redundant-cast warnings caused by ProtocolProviderService#getOperationSet(). While doing, fixes an occurrence of a double calling to the method in question while only one call suffices and is faster.",
  "ebc0b8cc": "Part of issue #726 Conference call user interface. - Save the last used account for conference calls. - New method added in the SIPCommFrame that allows to pack the window after setting the stored size and location and before showing it. This allows us to show a packed conference call window and use all available space to show maximum call participants. - Remove GuiCallPeerRecord and GuiCallRecord, as they're not used any more. - Some code formatting and optimizations in the gui ConfigurationManager.",
  "2ab3f3bf": "Fixes a relatively serious memory leak and a somewhat unnecessary performance penalty in the OTR menu which causes it to create OtrContactMenu instances whenever the current MetaContact selection changes and all these instances are retained globally though they are never to be shown.",
  "144a0bae": "- Removes unnecessary fields by making inner classes static. - Hides classes from internal into private visibility for the sake of increasing the chances of better optimizations. - Simplifies code in a few places.",
  "3599df57": "Applies the idea of Carlos Alexandre for fixing the slow call hang-up on Linux reported by him.",
  "c2dbb6bd": "Reduces the impact of ImageUtils.getScaledRoundedIcon() on the garbage collections in the contact list and chat UI. The optimization of the garbage collections and thus the execution speed come at the expense of increased memory use because of the introduced caching (but I tried to keep that to the minimum).",
  "ed718695": "Some account configuration panel improvements including: - ProtocolProviderService wrapped before being added to the account list in order to avoid all icon conversions in the cell renderer, should improve performance of the list. - if an icon of size 32x32 doesn't exist in the protocol, try to get bigger supproted icons and scale them to the desired size, otherwise don't set an icon (fixes NullPointerException).",
  "88a8ac27": "- Fixes a possible buffer overrun which is unlikely to happen in practice but fixes it anyway. - Tries to provide a teeny-weeny optimization. - Uses one and the same line delimiters in a single file instead of multiple ones because vim gets freaked out.",
  "2d35a92e": "Provides a tiny Map-iteration optimization, removes duplication, minor code simplifications.",
  "27ce6ab4": "Code optimizations.",
  "5256f0c8": "Fixes a couple of occurrences of incorrect code, performance-related warnings.",
  "990eee6b": "Fixes various warnings, mostly ones about performance.",
  "cc373b37": "On Windows, implements JNI-based replacements for the JNA-based H.264 encoder and decoder. The new implementations execute much faster, produce less garbage and use a newer ffmpeg version (which contains optimizations to at least the H.264 decoder).",
  "0a6567b8": "Speeds up the painting of the table of plug-ins in .pluginmanager i.e. the Plug-ins ConfigurationForm by reusing the displayed ImageIcon instances instead of loading a new one on each cell paint. Though now there's a cache of a few elements retained, it shouldn't too much of a concern because it has a few elements and I plan to look into the option of not retaining ConfigurationForm UI in general anyway.",
  "8613c583": "In relation to issue #451 (Windows Vista theme switches from Aero to Vista Basic upon playing video), disables the JMF DirectDraw DDRenderer on Windows Vista (because it causes the theme switch) so that GDIRenderer (or whatever gets picked up) can be tested and compared with the performance and quality of DDRenderer.",
  "9282a9fc": "Negligible optimizations through removing repetitive function calls, unnecessary fields and warning fixes.",
  "20c08bc6": "Sets the size of the video capture according to the size of the area in which it is to be previewed in the Media ConfigurationForm in hope of getting better performance.",
  "201fc434": "Minor optimizations to .impl.gui.main.call wrt Map iterations, memory consumption because of fields.",
  "fbc6eae7": "Cleans up DeviceConfiguration in order to take care of duplicate video capture devices, (partially) remove code duplication and provide optimizations.",
  "a7dfe361": "Provides optimizations to the keybindings with respect to execution time and garbage creation no matter how minor because the keybindings are used in MainFrame and ChatWindow which are in turn always in use.",
  "e6d4e016": "UI button rendering optimization",
  "2c9543c1": "Performance optimizations for the resource search.",
  "f43abd05": "Starts the MediaService asynchronously/in the background thus giving a faster startup of the UI (when no Jabber accounts are loaded on startup because they need the MediaService to be fully started).",
  "23ec0f5d": "Delays the creation of AddContactWizard for the purposed of UIServiceImpl's ExportedWindows because the mentioned creation is slow.",
  "13d468b8": "Delays the calculation of the audio and video encodings supported by MediaControl until they're necessary as a way to make startup faster.",
  "04d5a4c7": "Make sure that the contact list really gets the images from the network and not only from the local cache.",
  "6d1b39b0": "Fixes MediaServiceImpl.getSupportedVideoEncodings() which used to return MediaControl.getSupportedAudioEncodings(). (And makes tiny performance improvements such as preventing double hashtable look-ups, unoptimized conversions from List<String> to String[].)",
  "4db2d5cd": "improved performance on initalization 1. use toolkit for one screen systems 2. get the bounds from graphics device all at the same time and not one after another on multi monitor systems.",
  "afd8c62a": "Committing code optimization patch from Lubomir Marinov",
  "6190243d": "1. Use cached auth where possible 2. Fix when cancel authentication window",
  "77ef5989": "group systray messages when they are coming too fast",
  "6732adc0": "added the possibility to cache authorization headers",
  "8095eecd": "Added the possibility to cache authorization headers",
  "279823e0": "added a clear() method to allow emptying the credentials cache, so that we don't repeat the same request after receiving a forbidden response.",
  "5e7e98ad": "include the version service and implementation jars in the test cache repository.",
  "929cff73": "include the version service and implementation jars in the run cache repository.",
  "504b7890": "Linux performance pack.",
  "978f2b85": "Solaris performance pack",
  "ea2b3b6f": "JMF windows performance pack",
  "a8bea135": "small optimization of getMetacontactAt",
  "959e81c3": "little optimization of code",
  "16f73a0a": "Changed saving of data - if it is or is not cached.",
  "deb14ed9": "Scroll is too slow - bug fixed."
}, "jjwt": {
  "878d836": "fix: upgrade com.fasterxml.jackson.core:jackson-databind from 2.9.10.7 to 2.12.5 (#683)",
  "9481f31": "Resolves #552 : changed mock implementation to speed up a very slow test (#553)"
}, "JKeyboardPanelSwitch": {
  "": ""
}, "jmeter": {
  "6e637e9f": "perf: cache datetime formatter in __time function",
  "010a5f02": "perf: cache bean properties in TestBeanHelper and avoid synchronization, so test plans with TestBean-based elements is faster",
  "d13f120e": "perf: Improve HTTP HeaderManager performance when it contains many headers: skip reinitialization on each iteration",
  "968f0f5b": "fix(deps): update com.fasterxml.jackson.core to v2.15.1",
  "039712cb": "Revert 'fix(deps): update com.fasterxml.jackson.core to v2.15.0'",
  "8f29799d": "fix(deps): update com.fasterxml.jackson.core to v2.15.0",
  "7cde38fd": "chore: add trusted keys for ch.randelshofer:fastdoubleparser, com.github.javaparser, spotbugs",
  "92c34310": "add /.cache-proxy to .gitignore",
  "40de048e": "Hack to make rendering of large text results faster",
  "e88353a4": "Use Pattern cache in more places",
  "18211407": "Use Pattern cache from JMeterUtils",
  "045a8053": "Use Pattern cache from JMeterUtils",
  "e6a791d2": "Use Pattern cache from JMeterUtils",
  "be942ea5": "Use Pattern cache from JMeterUtils",
  "ed12cad6": "Use Pattern cache from JMeterUtils",
  "65e6afa9": "Use Pattern cache from JMeterUtils and extract constant Pattern",
  "d73d65fb": "Use Pattern-cache from JMeterUtils",
  "fe66021b": "Rename property for regex cache size",
  "5de17638": "Add a cache to store compiled Patterns into JMeterUtils",
  "25ab888e": "Sleep a bit longer to make sure cache is invalidated",
  "aacf090a": "Bug 64936 - Increase generate_report_ui.generation_timeout to 5 minutes to handle large performance test",
  "5d34a521": "Remove files that change often from Travis cache, remove broken files automatically",
  "ceddfe7a": "Configure Gradle local build cache, add build scans, and use gradle-cache-action for GitHub CI",
  "04964ecb": "Remove hack and document the web interface to clean the cache",
  "df534341": "Try to cleanup gradle cache for bouncycastle on travis",
  "5dc63d8c": "Sonar security Warning: False positives in the context of performance and pen testing which is what JMeter is made for",
  "dad60d72": "Fix performance issue related to ObjectMapper instanciation (thanks Vladimir)",
  "07acf9c0": "Fail fast on bug52310",
  "5883d81a": "Bug 63574 - HTTP Cache Manager does not cache resource if Cache-Control header is missing",
  "b7cb4904": "Seems like the CI server is too slow to cope with three nanoseconds only",
  "e0eded56": "Slight performance improvement in PoissonRandomTimer by using ThreadLocalRandom.",
  "ffdcb94f": "Bug 63178 - CSS Selector Extractor : Improve performance of JODD (JoddExtractor) based implementation Bugzilla Id: 63178",
  "18edfaf0": "Bug 62775 - If many jars are in a folder referenced by user.classpath, startup can be extremely slow due to JUnit Bugzilla Id: 62775",
  "82d845f7": "Bug 58807 - Reset SSL State on Thread Group iteration only (was https.use.cached.ssl.context=false is broken) Document Bugzilla Id: 58807",
  "dcf311c9": "Bug 58807 - Reset SSL State on Thread Group iteration only (was https.use.cached.ssl.context=false is broken) Document Bugzilla Id: 58807",
  "e2c2599e": "Optimize performance of report generation.",
  "d645e253": "Bug 58757 - HTTP Request : Updated deprecated methods of HttpComponents to last APIs of httpclient-4.5.X Fix Eager instanciation of SSL Context which happens even if only HTTP is used and degrading performances Bugzilla Id: 58757",
  "ae0b52db": "Bug 58807 - https.use.cached.ssl.context=false is broken Based partly on Rainer Jung analysis and patch. Bugzilla Id: 58807",
  "1562fd4f": "Add connect/response timeouts to avoid too much failures due to target slow site",
  "3d2d058e": "Bug 61556 - Clarify in documentation performance impacts of ${} var usage in IfController and groovy Contributed by Justin McCartney This closes #314 Bugzilla Id: 61556",
  "dc1063c1": "Bug 61321 - HTTP Cache Manager : with cache enabled & Retrieving embedded resources, JMeter fetches resource from server rather than cache at each alternate iteration Add test case Bugzilla Id: 61321",
  "bc7e60e1": "Don't store entries in the cache, when they are already present.",
  "aa445ac6": "Increase allowable delay to allow for slower Jenkins node",
  "7181f55c": "Document Java slow restriction",
  "bc685c9e": "Advise on performance drawbacks of javaScript",
  "2aa61cec": "Add tooltips on performance drawback of javascript",
  "495a1e39": "Add test on cache",
  "8457a550": "Add test on cache",
  "bca0cc89": "Bug 59934 - CSSParser: several threads can compute the same CSS simultaneously when not cached yet (nightly build after 3.0) ignore caffeine Bugzilla Id: 59934",
  "59e45652": "Bug 59934 - CSSParser: several threads can compute the same CSS simultaneously when not cached yet (nightly build after 3.0) Fix compilation error Bugzilla Id: 59934",
  "f1eee3ca": "Update docs by mentioning Groovy function and advising not to use javascript or Beanshell anymore for performances.",
  "9cd17355": "Bug 59945 For all JSR223 elements, if script language has not been chosen on the UI, the script will be interpreted as a groovy script A getXXX method should not change state, so read every time and default (slight performance loss) Add javadocs Drop unused log field Increment serialVersionId",
  "83d0ea31": "Followup to r1759668. Close PreparedStatements as they are no longer cached and reused.",
  "b7b6d703": "Remove cache for prepared statements, as it didn't work with the current jdbc pool implementation and current jdbc drivers should support caching of prepared statements themselves.",
  "06dabfe0": "Bug 59885 - Optimize css parsing for embedded resources download by introducing a cache Based on PR 219 contributed by Benoit Wiart (b.wiart at ubik-ingenierie.com) This closes #219 on github. Bugzilla Id: 59885",
  "d83496af": "Bug 56554 JSR223 Test Element : Generate compilation cache key automatically. Contributed by Benoit Wiart (benoit dot wiart at gmail.com) fix documentation issue Bugzilla Id: 56554",
  "7eea0b20": "Use explicit timeout for TestDNSCacheManager, so test is executed faster",
  "e4293082": "Bug 56554 JSR223 Test Element : Generate compilation cache key automatically Change labels and description Bugzilla Id: 56554",
  "7c0c292c": "Bug 56554 JSR223 Test Element : Generate compilation cache key automatically Bugzilla Id: 56554",
  "a9b03d0c": "[Bug 52073] Embedded Resources Parallel download : Improve performances by avoiding shutdown of ThreadPoolExecutor at each sample Document breaking change Bugzilla Id: 52073",
  "d6b438c6": "[Bug 52073] Embedded Resources Parallel download : Improve performances by avoiding shutdown of ThreadPoolExecutor at each sample #resolve #155 https://github.com/apache/jmeter/pull/155 Bugzilla Id: 52073",
  "eaaf1be4": "[Bug 52073] Embedded Resources Parallel download : Improve performances by avoiding shutdown of ThreadPoolExecutor at each sample Based on PR by Benoit Wiart + the addition (blame me) of JMeterPoolingClientConnectionManager (see mailing list mail I will send) Bugzilla Id: 52073",
  "551e7368": "Bug 56554 - JSR223 Test Element : Generate compilation cache key automatically Update documentation Remove also mention of old versions Bugzilla Id: 56554",
  "3dadc330": "Bug 56554 : the script cache key is now automatically generated #resolve #83 Bugzilla Id: 56554",
  "18e79356": "Bug 58903 - Provide __jexl3 function that uses commons-jexl3 and deprecated __jexl (1.1) function 1/ Switch debug to false to avoid loosing a factory of 6 to 7 degradation 2/ Workaround for performance issue https://issues.apache.org/jira/browse/JEXL-186",
  "b95f5ae7": "Bug 57804 - HTTP Request doesn't reuse cached SSL context when using Client Certificates in HTTPS Bugzilla Id: 57804",
  "02600d46": "Bug 58281 - RandomOrderController : Improve randomization algorithm performance Bugzilla Id: 58281",
  "8a99e148": "Do not cache http samples that have a Vary header.",
  "aafdd876": "Document JSR223 Assertion, Timer, Pre and Post Processor Document Compilation cache key",
  "d06e9dd5": "Add note on performance",
  "a3d01367": "Bug 55932 - Create a Async BackendListener to allow easy plug of new listener (Graphite, JDBC, Console,...) By default NO CLONE to have better performances. Bugzilla Id: 55932",
  "41480a66": "Bug 57145 - RandomController : Use ThreadLocalRandom instead of Random for better performances Move license to src to avoid test failure Bugzilla Id: 57145",
  "1d7a41a4": "Bug 57145 - RandomController : Use ThreadLocalRandom instead of Random for better performances Adjust svn:eol Bugzilla Id: 57145",
  "318f8571": "Bug 57145 - RandomController : Use ThreadLocalRandom instead of Random for better performances Bugzilla Id: 57145",
  "c8082bbb": "Bug 54778 - HTTP Sampler should not return 204 when resource is found in Cache, make it configurable with new property cache_manager.cached_resource_mode",
  "f31db717": "Mention Groovy as possible language and in first positiion for performances",
  "f0466980": "HTTP Cache Manager should not cache PUT/POST etc. Bugzilla Id: 56162",
  "646613a6": "Bug 55908 - Response assertion : Change Pattern Matching Rules default to Substring on creation for better performances Bugzilla Id: 55908",
  "4ba34e26": "https://issues.apache.org/bugzilla/show_bug.cgi?id=55610 Fix slow display issue due to XML formatting when content is not XML. Formatting is anyway not a good idea. Bugzilla Id: 55610",
  "aa7e6661": "Bug 55632 - Have a new implementation of htmlParser for embedded resources parsing with better performances Switch default to Lagarto Parser implementation Bugzilla Id: 55632",
  "9d23fd7e": "Bug 55632 - Have a new implementation of htmlParser for embedded resources parsing with better performances Add eol Bugzilla Id: 55632",
  "670e9756": "Bug 55632 - Have a new implementation of htmlParser for embedded resources parsing with better performances Bugzilla Id: 55632",
  "725b6f4b": "Bug 55632 - Have a new implementation of htmlParser for embedded resources parsing with better performances Rollback default for now Comment on performances Bugzilla Id: 55632",
  "7798037c": "Bug 55632 - Have a new implementation of htmlParser for embedded resources parsing with better performances Fixed test failure Bugzilla Id: 55632",
  "f8736927": "Bug 55632 - Have a new implementation of htmlParser for embedded resources parsing with better performances Update documentation Bugzilla Id: 55632",
  "cad52995": "Bug 55632 - Have a new implementation of htmlParser for embedded resources parsing with better performances Bugzilla Id: 55632",
  "f4407e3a": "Add note about HTMLParser and performances",
  "879e8f21": "Bug 55518 - Add ability to limit number of cached PreparedStatements per connection when 'Prepared Select Statement', 'Prepared Update Statement' or 'Callable Statement' query type is selected Documentation Bugzilla Id: 55518",
  "c1a37fa9": "Bug 55518 - Add ability to limit number of cached PreparedStatements per connection when 'Prepared Select Statement', 'Prepared Update Statement' or 'Callable Statement' query type is selected Bugzilla Id: 55518",
  "3277e470": "Bug 55023 - SSL Context reuse feature (51380) adversely affects non-ssl request performance/throughput Bugzilla Id: 55023",
  "c1c64f63": "Bug 55023 - SSL Context reuse feature (51380) adversely affects non-ssl request performance/throughput Fixed regression on 52310 introduced by fix - http://svn.apache.org/r1489603 Fixed regression on 51380 introduced by fix http://svn.apache.org/r1490281 Bugzilla Id: 55023",
  "e94d9b43": "Bug 55023 - SSL Context reuse feature (51380) adversely affects non-ssl request performance/throughput Fixed regression on 51380 introduced by fix Bugzilla Id: 55023",
  "beebaf78": "SSL Context reuse feature (51380) adversely affects non-ssl request performance/throughput Move testIterationStart code to samplers that actually need it; allows it to be done on first actual sample Bugzilla Id: 55023",
  "a6e206b4": "Bug 54412 - Changing JMeter defaults to ensure better performances by default Added a new Test for remote after modification of mode to StrippingBatch Bugzilla Id: 54412",
  "ac8c66a0": "Bug 54412 - Changing JMeter defaults to ensure better performances by default Document as per mailing list discussion Bugzilla Id: 54412",
  "b285e036": "Bug 54412 - Changing JMeter defaults to ensure better performances by default Bugzilla Id: 54412",
  "e9bee7a7": "Clarification about performance impacts of some options",
  "23d49d0c": "Bug 54259 - Introduce a CSS or jquery-like based Extractor Introduce parse caching to improve performances Bugzilla Id: 54259",
  "97fab839": "Bug 54259 - Introduce a CSS or jquery-like based Extractor Introduce parse caching to improve performances Bugzilla Id: 54259",
  "491a3327": "Bug 54259 - Introduce a CSS or jquery-like based Extractor Introduce parse caching to improve performances Bugzilla Id: 54259",
  "8d9efbf9": "Bug 54268 - Improve memory and CPU usage Improve CPU by caching response as String instead of computing it for each post processor Improve memory by eagerly cleaning the cached field Bugzilla Id: 54268",
  "f9d9d649": "Note about performances",
  "053b3689": "Don't cache the provided credentials",
  "e0aca790": "Property entries must be defined before they are used, otherwise they generate the following warning: WARN - jmeter.testbeans.gui.GenericTestBeanCustomizer: org.apache.jmeter.util.JSR223TestElement#cacheKey does not appear to have been configured and the fields may not behave correctly Bugzilla Id: 54107",
  "0e867748": "Rework & simplify r1402642 and r1402574 Avoid incorrect warning logs when using concurrent pool with cookie manager or cache manager",
  "7993624d": "Organize per Category. Add highlights one performance improvement",
  "f5e79801": "Use indexOf(char) is faster",
  "ccfd619b": "Use indexOf(char) is faster",
  "14aedc5e": "Use indexOf(char) is faster",
  "1ab6fbe5": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value IF Last-Modified or Date are missing or invalid, set expiration date to one year in future Bugzilla Id: 53522",
  "8f005f98": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value Fix typo Bugzilla Id: 53522",
  "e4a1c969": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value Fixed test case",
  "9bc5653f": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value Added test case Added sleep to ensure entries become invalid after their expiration date has passed Bugzilla Id: 53522",
  "b657328f": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value Added test case Added sleep to ensure entries become invalid after their expiration date has passed Bugzilla Id: 53522",
  "53d0801b": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value Changed to store entry forever if no max-age and no expires header which is what specification says in my understanding: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html Bugzilla Id: 53522",
  "286918ce": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value (edit)",
  "5b6ec5c0": "no-cache responses should be stored, but must be revalidated, so don't store an expiry date for them Bugzilla Id: 53522",
  "6b7cc6fa": "Bug 53520 - JSR223 Elements : Use Compilable interface to improve performances on File scripts Bugzilla Id: 53520",
  "de6bd23f": "Bug 53520 - JSR223 Elements : Use Compilable interface to improve performances on File scripts Bugzilla Id: 53520",
  "769d2d98": "Bug 53520 - JSR223 Elements : Use Compilable interface to improve performances on File scripts Bugzilla Id: 53520",
  "b7f68b25": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value Clarify incompatible changes Bugzilla Id: 53522",
  "bfd238f0": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value Bugzilla Id: 53522",
  "47349105": "Bug 53522 - Cache Manager should not store at all response with header 'no-cache' and store other types of Cache-Control having max-age value Bugzilla Id: 53522",
  "b7081903": "Bug 53365 - JSR223TestElement should cache ScriptEngineManager Bugzilla Id: 53365",
  "d6277a24": "Bug 53521 - Cache Manager should cache content with Cache-control=private Bugzilla Id: 53521",
  "fd7cc70c": "Bug 53521 - Cache Manager should cache content with Cache-control=private Bugzilla Id: 53521",
  "6e9bac2b": "Little optimization : Avoid NullPointerException by testing for nullity. Caller catches NPE and selects NullProperty so no regression will happen",
  "80769962": "Bug 52266 - Code:Inconsistent synchronization Add synchronized on openFile method will not impact performance as method is private, lock will be reentrant",
  "61e6eef7": "Add a warning is https.use.cached.ssl.context is not set or set to true when using KeystoreConfig",
  "f1c4e2fe": "Bug 52938 - Webservice Sampler : Add a jmeter property soap.document_cache to control size of Document Cache",
  "571ecd69": "Bug 52783 - oro.patterncache.size property never used due to early init",
  "ef7a0304": "Bug 52471 - Improve Mirror Server performance by Using Pool of threads instead of launching a Thread for each request Impact of modification Also commented X-Sleep header",
  "326de1d5": "Bug 52471 - Improve Mirror Server performance by Using Pool of threads instead of launching a Thread for each request Made queue size configurable",
  "f01020ec": "Bug 52471 - Improve Mirror Server performance by Using Pool of threads instead of launching a Thread for each request Implemented what was described on dev list",
  "59289ff3": "Bug 52471 - Improve Mirror Server performance by Using Pool of threads instead of launching a Thread for each request Documented new property Bug 52048 - BSFSampler, BSFPreProcessor and BSFPostProcessor should share the same GUI Changed screenshots",
  "5961e151": "Bug 52471 - Improve Mirror Server performance by Using Pool of threads instead of launching a Thread for each request",
  "674fe542": "Trivial performance tweak",
  "28d8a68c": "Add test that uses UrlConnection stub cacheControl (findbugs)",
  "5b9a8441": "Bug 52183 - SyncTimer could be improved (performance+reliability) Made BarrierWrapper class private and commented setup.",
  "c5b1c135": "Bug 52183 - SyncTimer could be improved (performance+reliability)",
  "d8869603": "Bug 52183 - SyncTimer could be improved (performance+reliability)",
  "11bf4bc2": "Bug 51932 - CacheManager does not handle cache-control header with any attributes after max-age",
  "cc10dd7b": "Bug 51380 - Control reuse of cached SSL Context from iteration to iteration",
  "7ba3302a": "All generated sockets should be slow",
  "4da718ae": "All generated sockets should be slow",
  "b937f619": "Probably don't need httpclient-cache",
  "3dbb0ced": "BeanInfoSupport now caches getBeanDescriptor() - should avoid an NPE on non-Sun JVMs when using CSVDataSet (and some other TestBeans)",
  "5ef192ef": "Remove cache of samples from SamplingStatCalculator and move into new subclass CachingStatCalculator. Only a few visualisers actually need the cache, which can take lots of memory. Aggregate Report now uses far less memory.",
  "7727ea2f": "Bug 48259 - Improve StatCalculator performance by using HashMap",
  "fa368574": "Set response code for cached content to 204 - No Content Set URL and method in response eariler",
  "427f388e": "JDBC Sampler should not close Prepared or Callable statements as these are cached",
  "3f2018f7": "Note that parser may be slow",
  "6c37a116": "Fix typo; warn that XPath parser can be slow",
  "16106169": "Add utility method to start httpMirror service and share between test cases using the mirror; Use different mirror ports for the two test cases (otherwise second test can fail if server is slow to shut)",
  "2aa06945": "Document webservice memory cache",
  "cd00fd9e": "SSLSocket wrapper to emulate slow devices",
  "7b60d5fb": "Use generic slow streams",
  "4a3dc00b": "Generic versions of slow streams",
  "2d69d72e": "Allow default cache size to be defined",
  "94edb21f": "Added oro.patterncache.size",
  "5842f316": "Add image dimensions for faster rendering",
  "aa4fc866": "Bug 15025 - URL Rewriter can cache Session ID",
  "cc76cc9d": "Allow for slightly slow running",
  "6ef25542": "Classes to support slow sockets (modem emulation)",
  "c6a70ac5": "slight change for better performance suggested by sebb.",
  "10fcf42e": "more updates to the report, may not be functional yet, but it's slowly getting there peter",
  "9392d64b": "updated the visualizer so it can save the statistics. also fixed a bug with the performance panel so that it checks the node to make sure it is not null.",
  "c4189265": "when there are several monitor threadgroups, the probability of another thread calling parseBytes() while the parser is busy is low, but it does happen. When it does, it cases SAX to throw an exception. Adding sync fixes the problem and doesn't appear to have any performance impact. peter lin",
  "35faaeda": "screen capture of the monitor performance graph peter lin",
  "adc65cc2": "now that I removed the jaxb classes, I commented out the jaxb portion of the benchmark. I ran several tests comparing the custom parse to jaxb. it is basically 2x faster, since I don't validate. It's not a fair comparison obviously, but for the monitor validation isn't that crucial. peter lin",
  "5dec9f95": "Added some properties for the monitor related gui's. making slow/ steady progress",
  "1ec16c6f": "Removed funny performance-degrading feature. Saves time, at least, during unit testing.",
  "9c1268f6": "bin build.gradle.kts build-logic build-logic-commons checksum.xml CODE_OF_CONDUCT.md config CONTRIBUTING.md doap_JMeter.rdf eclipse.md extras fb-csv.xsl fb-excludes.xml gradle gradle.md gradle.properties gradlew gradlew.bat lib LICENSE NOTICE README.md renovate.json settings.gradle.kts src xdocs Making thread-safe by using READ_ONLY_MASK when compiling regexps. bin build.gradle.kts build-logic build-logic-commons checksum.xml CODE_OF_CONDUCT.md config CONTRIBUTING.md doap_JMeter.rdf eclipse.md extras fb-csv.xsl fb-excludes.xml gradle gradle.md gradle.properties gradlew gradlew.bat lib LICENSE NOTICE README.md renovate.json settings.gradle.kts src xdocs Using a pattern cache for better performance.",
  "5fca3ab6": "Added a comment on a potential performance problem... ... and trimmed 10 seconds off test execution time.",
  "bedb5a35": "Removed pattern cache used to cache a single pattern. Renamed a private method. Support URL with spaces in Location: headers -- it's against the standards but most browsers support it.",
  "e79d7646": "Work around Introspector bug (BeanInfos were not being cached). Resolve bug uncovered by this workaround (BeanInfos were not being flushed from caches on language change).",
  "b335fcc1": "Add READ_ONLY_MASK to a couple of regexp compilations where it was missing. It's absence is known to cause performance problems when the compiled pattern is used concurrently by multiple threads.",
  "2aa7e05c": "bin build.gradle.kts build-logic build-logic-commons checksum.xml CODE_OF_CONDUCT.md config CONTRIBUTING.md doap_JMeter.rdf eclipse.md extras fb-csv.xsl fb-excludes.xml gradle gradle.md gradle.properties gradlew gradlew.bat lib LICENSE NOTICE README.md renovate.json settings.gradle.kts src xdocs Improved regular expression quality (handle some more valid cases and prevent some potential invalid matches). bin build.gradle.kts build-logic build-logic-commons checksum.xml CODE_OF_CONDUCT.md config CONTRIBUTING.md doap_JMeter.rdf eclipse.md extras fb-csv.xsl fb-excludes.xml gradle gradle.md gradle.properties gradlew gradlew.bat lib LICENSE NOTICE README.md renovate.json settings.gradle.kts src xdocs Improved performance by grouping regexps so that one single scan is necessary. Plus the scan won't run through the whole file, since it will stop at the first match.",
  "419b29fd": "Avoid unnecessary scans to improve performance.",
  "ea908e03": "Setting memory profile as in unix start script. Also removed the '-server' option, since it causes important variations in performance along the life of the process, which would make tester's life more difficult.",
  "2e9c1f04": "Use reflection to get Parserinstance, and cache the result; update tests",
  "87fbedac": "Slight change in regular expression DOUBLES performance.",
  "e86d6d3f": "Refactor common code into an AbstractTimer base class. Make state checks mandatory -- the impact on performance should be negligible.",
  "15cdec3e": "Changing listener notifier to not use a separate thread. Is simpler this way, and somewhat faster. Fixed some synchronization issues in visualizers",
  "34b026b3": "New TestElementTraverser interface - traversing test elements shouldn't have to be rewritten every time updated the SaveService to use the traverser, updated cloning of test elements too HTTPArgument is simplified, using now a cache, similar to PatternCacheLRU for encoded values.",
  "48f819c4": "FTP performance enhancement, doc update PR: Obtained from: Submitted by: Reviewed by:"
}, "jmonkeyengine": {
  "7fa8f7d": "BlendAction: resolve slow-motion side effect caused by stretching actions (#1848)",
  "312fb5b": "GLDebug: Use a method handle instead of a string comparison to increase the performance",
  "9e53200": "fix for issue #1037 (TestHoveringTank hull-shape performance issue)",
  "512b096": "fix for issue #1026: TestPhysicsCharacter spins Sinbad too fast",
  "7da493d": "AppVeyor: invalidate cached ZIP file if gradle.properties has changed",
  "c769611": "Better performance",
  "38b6eab": "cleanup build cache according to travis docs",
  "f2384c8": "Added a cursor cache to avoid cursor disappearing and app crashing when too many cursors are created",
  "6b1656f": "Compile with Ofast and disable _FORTIFY_SOURCE",
  "8e8186d": "Changed overrides from ArrayList to SafeArrayList for GC and iteration performance reasons. Fixed bug in SafeArrayList.equals().",
  "e35bb7d": "added a constructor that disables the program cache: used during development",
  "a2df82b": "implemented a cache for program objects",
  "54113f3": "added alternative versions for kernel launches and resource acquiring that do not return an event. This improves the performance.",
  "dd816a0": "travis: use cache rules from docs",
  "deb3f21": "travis: dont cache netbeans folder anymore",
  "e6d829f": "GLRenderer: added fast uniforms - still need to fix Uniform.clear()",
  "8cfe537": "Fix clone to account for the update list added for update optimization. The updateList was cloned also and needs to be cleared out and the update flag reset as if freshly initialized. Thanks for lightbringer for pointing out the problem and solution.",
  "d57147e": "A small optimization. The BitmapTextPage does not require custom updates so it now signifies that.",
  "31cab67": "Removing the dodgy 'optimization' that broke some people and caused other 'makeup' changes to better support the dodginess.",
  "d269839": "FastMath: faster nearestPowerOfTwo and unit test",
  "886bbc0": "MipMapGenerator: perform scaling in sRGB - Incorrect, but faster. In most cases where it is used, gamma correct pipeline isn't used and performance is of higher priority than quality.",
  "b7af06e": "SDK Build: ensure netbeans folder is not empty For some reason Travis-CI will create folders that were requested to be cached, thus causing the build to fail.",
  "f7d544f": "Travis-CI: cache netbeans platform and gradle deps",
  "ba8349a": "FBX: ContentTextureKey to disable cache FBXDump remove useless import",
  "851af2f": "MaterialPreviewRenderer now loads the material in a separate thread to avoid to stall the awt thread. This and the previous change makes the material editor a lot faster to open when the loaded material has big textures.",
  "c6317cc": "com.jme3.asset.cache: javadoc fixes",
  "90925e3": "AssetManager: javadoc, cleanup, new method build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Move *cache* methods up into the AssetManager interface from DesktopAssetManager build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Fix various incorrect javadoc build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Add new method to load an asset from an InputStream build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Restructure DesktopAssetManager.loadAsset() to make it less monolithic",
  "75a801f": "CollideWith optimization with CollisionResult allocation avoided",
  "ed36913": "fix renderShadow optimization to work on multiple scenes attached to viewPort properly",
  "b300915": "NativeLibraryLoader: use the OS's cache folder instead of home folder for storing natives",
  "bac0f81": "Fix scene graph update corruption due to earlier optimizations. The update optimization will not visit child nodes unless the parent has any refresh flags set. However if a 'partial update' occurs which only clears some of the flags (e.g. getWorldBound()), then a situation could occur where a child node has refresh flags set but not its parent, thus causing the aformentioned issue. To allieviate this, we must always propagate the specific flag required, regardless of whether or not the parent has some other flags already set.",
  "6350ac3": "GLRenderer: remove obsolete code, minor optimization",
  "1cb9edd": "More drastic approach to clear the cache when updating the material definition in the shaderNode editor so that changes in shader files are properly taken into account",
  "4668621": "the MaterialPreviewRenderer now properly clears the cache before rendering a preview",
  "c7b6445": "Fix exception when stopping non-cached audio stream",
  "9ce69ee": "Fix two issues with streaming OGG/Vorbis - In certain cases, padding was present at the end of streams causing noticeable clicking when looped. This is handled by truncating the stream to its actual size. - When playing an ogg stream without stream cache, an exception would be raised since the stream was closed prematurely",
  "a517130": "Added hooks for detailed performance profiling. Implementors can provide their own AppProfiler implementation to collect and/or visualize timing stats however they want, even at the viewport level if they choose. A basic profiler implementation will be following shortly that does simple update vs render frame timings.",
  "3d32b01": "Checking in the profiler classes separately as I work around some commit issue with RenderManager. Actually calling of these hooks will follow immediately. Added hooks for detailed performance profiling. Implementors can provide their own AppProfiler implementation to collect and/or visualize timing stats however they want, even at the viewport level if they choose. A basic profiler implementation will be following shortly that does simple update vs render frame timings.",
  "6625e57": "Keep the scene and processor lists as SafeArrayList for faster/cleaner iteration.",
  "eee43b4": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added InstancedNode: easy to use instancing with similar API to BatchNode. The underlying scene graph will be automatically optimized so instancing is used as much as possible, thus reducing number of draw calls and improving performance. Unlike BatchNode, it does not copy the geometry's mesh around, but only its transform. In order for it to work, it requires the Renderer to support the GeometryInstancing capability. build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Replaced existing instancing test with TestInstanceNode, which demostrates how to use the new InstancedNode by changing the transform, mesh, and material of every instance periodically. build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle The lower-level InstancedGeometry API rewritten: Users don't need to manage the number of instances they have and their indices. Instead, they can use addInstance() and removeInstance() to add and remove instances as desired. Unlike InstancedNode, InstancedGeometry requires all Geometries to have the same mesh and material, but they can have different transforms. build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Instancing.glsllib now requires the InstanceData to have world transforms instead of world view transforms. As a consequence, users of instancing must specify in the material the world parameters ViewProjectionMatrix and ViewMatrix instead of ProjectionMatrix.",
  "d200e40": "performance improvements to PhysicsSpace",
  "7df0b41": "TerrainLodControl no longer caches camera positions. Issue #121",
  "5eb5f0d": "remove 8 octree optimization files from trunk per discussion at http://hub.jmonkeyengine.org/forum/topic/proposed-removal-of-octree-and-related-files",
  "5134c60": "remove 7 octree optimization files from gradle-restructure branch per discussion at http://hub.jmonkeyengine.org/forum/topic/proposed-removal-of-octree-and-related-files",
  "8aeb523": "uses temporary variables instead of object creation; much faster & efficient",
  "77a2af2": "avoids creating iterators, accesses param's backing array directly for greater performance",
  "7bb0467": "using getParamsMap() for jME3 performance improvements in DefineList",
  "988fdd2": "added getParamsMap() for jME3 performance improvements in Technique/DefineList",
  "79def7a": "Re added nifty optimization to not render fully transparent quads",
  "2acbdf9": "Hardware Skinning now uses its own bone index and bone weight buffers. The vertex buffers are initialized empty when the model is loaded and placed in the cache. They are populated only if hardware skinning is used with the model.",
  "517f621": "Fix for issue 592 : SkeletonControl does not track changes to materials or spatials https://code.google.com/p/jmonkeyengine/issues/detail?id=592#makechanges - Went the update targets and materials on each update, in practive it doesn't have a noticeable impact on performance. - Changed the way target meshes and materials were stored (arrays), for respectively a SafearrayList and a HashSet. This avoid instancing and copying arrays on each frames. - Also removed targets and materials from serialization as we don't care to save or load them now that they are gathered on each frame.",
  "4f3319f": "ShaderNodes : generated shaders are now cached by the assetManager to avoid generating a new shader for already loaded materials. This saves memory and avoids a lot of shader switches at render time.",
  "b0f2e17": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle List of native objects in NativeObjectManager is now a HashSet instead of an ArrayList, for faster add/remove calls",
  "27bf244": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added glGetError() checks after every GL call (its ugly, I know, but it helps with debugging). Added option to disable it with constant on RendererUtil.ENABLE_ERROR_CHECKING. build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Set lastFb in OGLESShaderRenderer when context is reset, this is needed otherwise the state tracker would not work correctly. build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Fix issue with Mesh.Mode.Hybrid that wasn't rendering triangle fans correctly (was rendering them as triangle strips instead). build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Remove call to glPointSize in OGLESShaderRenderer (it would most likely crash anyway, since GLES10 calls can't be used in a GLES20 context) build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle TestCustomMesh now uses shorts instead of ints for the index buffer. 32-bit indices are not supported on Android and are slower on Desktop, don't use them if you can avoid it.",
  "995763d": "Fixed an issue in android config chooser. Some device seems to not have a rgb8 opaque config (BEST). In this case the config chooser will attempt to find a rgba8 config (BEST_TRANSLUSCENT) before falling back to fastest.",
  "13758bd": "terrain will clear any caches it has now when detached from the scene graph",
  "4360d22": "SDK: - Make TextureBrowser clear textures from assetManager cache after displaying them",
  "a53071c": "- small optimization in ragdoll deserialization",
  "90e91f3": "SDK: - fix double cache deletion for AssetDataObjects",
  "7e43015": "Removed cos2,sin2 and reduceAngle from FastMath as they were unused and confusing, and somehow buggy. See forum post http://jmonkeyengine.org/forum/topic/patch-remove-fastmath-sin2cos2/#post-198276",
  "e45a75f": "- minor optimization in iOS image loader native code",
  "4ae24ff": "SDK : ParticleEmitter editor, enhanced particleInfluencer editor to avoid slow downs due to classpath scanning.",
  "cbafa18": "Shadows : There is now an alternative to the PssmRenderer : the PssmFilter that has to be used as any other filter. It does the same ass the PssmRenderer except the post shadow pass is done in screen space making it run very faster on scene that have a lot of shadow recieving Geometries.",
  "33968b4": "Added code to reset the actions of opposite joystick axes during analog processing. Actions were always invoked for the active axis direction but if the stick flipped to fast across the middle then the reverse axis' actions were still 'pressed' and would get stuck.",
  "c4574bf": "fixed an issue with TerrainGrid not having a large enough cache of tiles. Properly hooked in the tileDetached event",
  "8efd28d": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Some optimizations for defines and shader key. Computing 'compiled' define list isn't necessary to execute a lookup against asset manager. Allows faster changes in defines.",
  "86a3b05": "Save and restore the color in the nifty-optimization method: render(RenderManager rm, ColorRGBA color) So that it doesn't clobber other BitmapText that just happens to be using the font.",
  "384f4ac": "Lighting and Shadows (PSSM only) : - re introduced the alphaDiscardThreshold as explained in prvious commit. It's not binded to the AlphaTestFallOff fixedfunc binding - Added a small poly offset to post shadow technique, this greatly help in fixing shadow acne. - Added Poisson disc sampling PCF Filtering for shadows - Properly passed the shadow map size as a define in the shaders and remove the hardcoded value - Pssm15 don't use the textureSize function anymore and use the same shadow map size define ( this increased performance quite a bit) - Optimized the shaders code a bit - Better PSSM test",
  "47563c2": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle .. and here's the change that makes the previous change actually faster",
  "dbc5993": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added new image codec that should be faster for byte component image formats like RGBA8",
  "9ad7575": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Fixed issue where using images with pregenerated mips would cause performance loss due to them being generated again and again",
  "2ab5e4a": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Nifty GUI now uses Unshaded.j3md for rendering which is cleaner build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Nifty GUI performance much faster, but global font text isn't taken into account in OGL1 mode (fix TBD)",
  "d46ee26": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle The bounding box will compute faster, maybe even more faster on Android .. If its bad, please go ahead and complain",
  "7b9b990": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Removed workarounds for setting material parameter with m_ prefix. From now on it will only be supported when loading really old J3O files. build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Small optimization: if technique is already loaded, define list will not be reconstructed on define change",
  "e2473c7": "SDK: - update help with now working multi-media and optimization pages - ad blender import help to manual",
  "5af42b3": "SDK: - update help with now working multi-media and optimization pages - ad blender import help to manual",
  "8bfe663": "Fixed the video recorder app state to attach itself to the last _enabled_ view instead of just the last view. Fixed the internal IsoTimer to report the proper resolution. It was reporting picoseconds when it is actually returning milliseconds. This manifested itself as a stuck g_Time in my shaders because time was creeping along so slowly (if at all... I'm not sure float has enough resolution to measure 1 / 1000000000 resolution.",
  "7144840": "SDK: - remove some queueing to make tool selection update faster",
  "bd4214f": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle AssetCache is now an interface and can be extended by user. Moved to com.jme3.asset.cache package. build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added 3 implementations of AssetCache: SimpleAssetCache, WeakRefAssetCache and WeakRefCloneAssetCache build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added AssetProcessor interface that handles cloning and post processing of assets after they are loaded build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle AssetKey can now configure which cache/processor to use for a particular asset type build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added AssetManager unregisterLoader method build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle AssetManager now supports more than one AssetLoadListener build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Javadoc improvements in AssetManager build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Asset interface now renamed to CloneableSmartAsset (which more accurately describes its behavior and use case) build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle DesktopAssetManager now makes proper use of the new AssetProcessor/AssetCache classes when handling asset loading build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added proper equals/hashCode methods to many AssetKey subclasses, which is required for the new system to work properly build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle All AssetKeys were rewritten to work with the new asset system build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle loadAsset(AudioKey) now returns an AudioNode and not AudioData, similar to the behavior of loadAsset(TextureKey) returning a Texture and not an Image. Because of that, the key storage in AudioData has been removed. build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Texture, Spatial, and Material are all cloneable smart assets now and will be cleared from the cache when all instances become unreachable build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Improved the existing TestAssetCache test to make sure the new system works",
  "f844ca4": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle JmeFormatter now uses non threadsafe StringBuilder for performance",
  "654c44a": "Jme nifty render device optimization : - Banished color buffer updating at render time (except for gradient quads that uses vertex color) - fully transparent quads are not rendered anymore (that avoid rendering transparent layers allowing complex layout for free).",
  "9836918": "Cinematic changes : - more consistency in the way to handle time - Complete refactoring of MotionPath interpolation (simpler and way faster) - Time seeking should now work correctly.",
  "1f0a77d": "Modified the define list to only recompile if values have changed. Also, it returns a boolean for set and remove on whether a change actually occurred. This will be used by my next commit to give a performance boost.",
  "c6c4cf5": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Some minor optimizations build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Disable dead zone check for mouse axes",
  "0342cce": "fixed bug with terrain grid and cached neighbours in terrainQuad not being reset",
  "83f3b2b": "- BatchNode now use a temp float array and bulk put data into the floatbuffer instad of iterative puts. (it's faster) - Spatials have now a BatchHint (Inherit, Never,Always) to know if they should be batched or not (use is the same as cullHint)",
  "7193c0b": "Batching : - BatchNode can now batch a scene graph with several materials. It creates a batch by material - Added a SimpleBatchNode that batch only geometries (no sub node graph) for better performances - removed RF_REFRESHBATCH from Spatial as it's no longer needed - changed test cases a bit",
  "a824f45": "optimize GC performance while creating keys for the BitmapText cache",
  "52d1aaa": "Nifty RenderDeviceJme Bugfix: When we cache BitmapText instances to speed up text rendering we need to make sure that we take the font and the color into account as well! When we cache BitmapText instances only using the actual 'text' it is possible that the exact same text - when it is rendered in different fonts - will be used from the cache (and then using the wrong font!) This has now been fixed.",
  "fa92c00": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle AwtKeyInput now synchronized properly between OGL and EDT threads build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle AwtMouseInput will no longer generate events with no mouse movement build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Fixed issue where settings specified on AwtPanelsContext were not copied properly to the offscreen context build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Significant performance improvements in AwtPanel system - Use of proper locking to prevent deadlocks - Optimized BufferStrategy by using a single, accelerated front buffer - Removed pbuffer.makeCurrent() which was not necessary and used many CPU cycles",
  "ab5541f": "SDK: - clear cache when opening nifty files to reload images",
  "90a0344": "- fix in MaterialPropertyEditor cache clear",
  "0b5cc9f": "SDK : re-added the cache delete when loading an asset since it has been fixed in the engine",
  "f15107d": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle All asset cache operations can now work on smart cache build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added better test for asset cache",
  "7cd213b": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Fix for ParticleEmitter.clone() build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Enable smart cache for models",
  "349c9d9": "Modified to use the new SafeArrayList for children and controls. This means it is possible for a control to modify its own node hierarchy in a way that might have caused random skipping at best and index out of bounds exceptions at worse. Also, users can iterate over children and detach them at the same time using standard for each constructs. Performance is the same for me though I'd expected it to be at least slightly faster given that most inner loops now use direct array access. My scenes must not exploit this much.",
  "348b1d6": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Fixed Blender loader crash when 'Image' texture mode is specified but actual image is not selected build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Replaced oracle proprietary exception with UnsupportedOperationException build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Shared Geometry Patch - Still need detection mechanism for old versions! build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Binary/J3O format will now write signature and version build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Binary/J3O format now has version numbers for exported class hierarchies build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Fix crash in TestHoveringTank build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle ListMap now uses backing array and a map - increased lookup performance for uniforms/matparams and faster iteration too. Only insertion became slower",
  "ba88539": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Improved performance of Matrix3/4f.fillFloatBuffer() by writing to an array first build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Initial javadoc for com.jme3.collision",
  "993b220": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle performance improvements to terrain height modification build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle api change to let you pass in many points to be adjusted in the terrain",
  "85d711c": "Converted the raw input listener loop to use a cached array copy of the raw input listener list. This prevents the whole thing from blowing up if a RawInputListener is removed as the result of a raw input event. It's also ever so slightly faster.",
  "c91d1d2": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added new constructor for AudioNode that accepts stream-cache parameter",
  "f1361cc": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle OGG loader now supports stream-cache feature",
  "3a938b7": "build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Mesh.getTriangle() now supports 32bit index buffers and no index buffers build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Fix small logging issue in InputManager build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Added stream-cache feature to streaming audio build.gradle common-android-app.gradle common.gradle CONTRIBUTING.md gradle gradle.properties gradlew gradlew.bat javadoc-overview.html jme3-android jme3-android-examples jme3-android-native jme3-awt-dialogs jme3-core jme3-desktop jme3-effects jme3-examples jme3-ios jme3-jbullet jme3-jogg jme3-lwjgl jme3-lwjgl3 jme3-networking jme3-niftygui jme3-plugins jme3-terrain jme3-testdata jme3-vr lib LICENSE.md natives-snapshot.properties README.md settings.gradle source-file-header-template.txt version.gradle Additional javadoc",
  "cacfc6b": "Properly use bitmasks on camera for checking culling ( to avoid checking against a plane if the parent node is already on the positive side of it) making culling faster",
  "792f44c": "Post process filters : - re-implemented multiview filters another way (filters are now correctly rendered to the size of the viewport, and that's much faster) - fixed an issue the was messing the filter render when using setEnabled on a filter prior FilterProcessor init - fixed a deprecated m_ mat in WaterFilter",
  "4d1d9ed": "KinematicRagdollControl : - Made a lot of clean up and optimization - Better automagic creation of the ragdoll",
  "9073820": "Reuse one big buffer per thread and copy the outbound smaller buffers. Way faster and way cheaper overall.",
  "654763d": "Fixed setText() to invalidate... otherwise, getTotalWidth(), etc. continue to use the cached sizes."
}, "jna": {
  "65085c1": "Try all frameworks paths regardless of file exist check. > New in macOS Big Sur 11 beta, the system ships with a built-in dynamic linker cache of all system-provided libraries. As part of this change, copies of dynamic libraries are no longer present on the filesystem. Code that attempts to check for dynamic library presence by looking for a file at a path or enumerating a directory will fail. Instead, check for library presence by attempting to dlopen() the path, which will correctly check for the library in the cache. (62986286)",
  "6a9c1c9": "#466: Improve performance of Pointer.dump for large dumps. Pull and merge.",
  "f73de15": "Initial support for Wininet.dll and enumeration of its' / IE's cache",
  "d6673df": "ensure enclosing class query shows up properly for cached options",
  "7ff0c81": "#466: Improve performance of Pointer.dump for large dumps. Added simle unit test for Pointer.dump.",
  "274e312": "#466: Improve performance of Pointer.dump for large dumps. Added simle unit test for Pointer.dump.",
  "462eaba": "add performance test for getpid",
  "3024478": "Merge pull request #376 from Boereck/fasterVarArgs",
  "89bf40b": "Merge pull request #353 from Boereck/faster-method-calls",
  "bf1579a": "use distinct maps for direct vs non-direct callbacks (performance)",
  "d8e8889": "improve performance saving last error (per thread)",
  "5180a7e": "fix JNI containing classname in performance test",
  "fd07c9e": "Add cache flushing routine for sun compiler on sparc solaris 2.8",
  "9473f51": "'Leaking WeakHashMap' canned analysis from NB Profiler turns up: NativeMappedConverter.converters: java.util.WeakHashMap#116 is wrong: key java.lang.Class#5600 is reachable from value com.sun.jna.NativeMappedConverter#3 Indeed the value type strongly refers to the key type so a WeakHashMap is a potentially major memory leak. Since Java lacks ephemerons, need to either eliminate the cache, or make the values be soft references.",
  "2beeabb": "fix struct layout cacheing in Union",
  "3ca3848": "cache structure layout results",
  "37e02df": "increase ServerSocket timeout in attempt to make test tolerant of very slow machine.",
  "57261a1": "more performance notes",
  "b5f41ef": "fix cacheing of union type information",
  "85750fd": "Small optimization of NativeString constructor - do the String writing here instead of via Pointer#setString(), to avoid converting the String to bytes twice.",
  "130e409": "Fix issue# 68 - File monitor thread terminates on any removeWatch call. kludge: fix intermittent failures on slow W2K box.",
  "6d969eb": "improve X11 window masking performance",
  "1f98d4f": "improve performance of window masking",
  "fa77d03": "Provide explicit dispose on NativeLibrary Cache NativeMappedConverter instances for improved performance Preliminary support for wince (improve backwards compatibility for older VMs) Provide 'synch after call' interface for arguments that need to perform some sort of synchronization after a native call",
  "0cc6bc9": "Improve transparent window drawing performance on w32",
  "f2ce65f": "Add optimization for window shape masks (ochafik/cdecker)",
  "5be48aa": "Disallow explicit free of memory and structures Add memory GC test Make library proxy generator use NativeLibrary cache"
}, "joda-time": {
  "695c02c": "Merge faster time-zone parsing",
  "17b9af5": "Increased performance of symbols lookup",
  "6340664": "Remove ISOChronology fast cache",
  "acfec45": "Merge branch 'avoid_lock_contention_formatter_cache' of https://github.com/CodingFabian/joda-time into CodingFabian-avoid_lock_contention_formatter_cache",
  "7385f32": "Increased performance of chrnology lookup",
  "37ce370": "Merge branch 'avoid_lock_contention_chonology_cache' of https://github.com/CodingFabian/joda-time into CodingFabian-avoid_lock_contention_chonology_cache",
  "45877a6": "using custom key for looking up from the StyleFormatter cache.",
  "fba9e5e": "caches should not be serialized",
  "1516bad": "Maximum size for pattern cache",
  "0f274a6": "Fix chronology cache synchronization",
  "5d8a77e": "Tweaks to cached time-zone to try and avoid a NPE [3470276]",
  "56ce9ba": "use the Integer cache where possible",
  "9d991bc": "use the Integer cache where possible",
  "0a5a497": "Cache result of hash code to enhance performance, issue reported by Jeffrey Green",
  "bffc316": "Fixed defect in localized Gregorian/Julian symbol cache which severely impacted formatting performance when using null (default) locale.",
  "44e2b45": "More performance enhancements for Local* classes",
  "721585d": "Restored YearInfo cache to 1024. Was 1.",
  "528c7f7": "Add toString to performance checks",
  "e371d1e": "Add notes for coptic bug fix and scalar performance improvement",
  "f574d59": "Performance optimization for overflow checking multiplications",
  "4f36b17": "Allow slow tests to run directly from main method",
  "d1284b5": "Slight performance enhancement. No measurable difference using server VM, however.",
  "3ffd1a7": "Added performance and threading.",
  "38a5d1c": "Fewer substrings created during integer parsing, resulting in performance improvements.",
  "4d08164": "More performance improvements due to less object allocation."
}, "jodd": {
  "e4094fb": "File cache checks lastModified (closes #757)",
  "c4a3bc4": "Improve Methref performances by reversing the information flow.",
  "53003d7": "Removed IntArrayList. Improved performances on DbQuery.",
  "1842ccb": "Updated FastBuffers to be really faster.",
  "e451969": "Remove method removes cached value.",
  "c10ea54": "expose static caches",
  "adfa157": "Switch cache to TypeCache and remove unused method.",
  "cc5be6e": "Using the faster list.toArray(new T[0])!",
  "f2649f3": "Added cleanup for external cache, too.",
  "f3910cb": "Enable cache for external types.",
  "9a71355": "Added type cache for bean definitions of external types.",
  "3fd0b67": "Updated Type cache and removed put() in favor of new get() method.",
  "9482d2a": "Added TypeCache for all type caches.",
  "c5faa6e": "Going for version 4.1.0 because of performance issue.",
  "5b442e9": "Rolled back performance regression.",
  "6d134df": "Repeat test for testing the cache",
  "f437f04": "Removed Unsafe usage. This is not an easy decision; since it offers better performances on java8. However, not so in the future (e.g. with java9). Since we expect that java is going to be updated more frequently, that would lead to faster adoption of new features, hence the decision is to be future ready, rather to introduce some additional code around it - and we simply don't have resources to maintain different versions of the library.",
  "3e999cc": "Samo javadoc added and disablecache method.",
  "5555034": "Iterating live cache is not smart (closes #411)",
  "84dc053": "Interface changes, to be aligned to the other cache classes.",
  "18dbb23": "No need to cache instance.",
  "bc93916": "Optimize the class selector (Match.INCLUDES). This method is perf sensitive (CPU and memory allocations) Replace the split of the class attribute with a custom implementation that do not allocate unneeded memory. With this patch a simple test calling NodeSelector#select in a loop went from 1.5Gb allocated to 6Mb (document used size was 800Kb) GC times were reduced. No real jmh benchmarks were done BUT it's faster in all my test.",
  "a99e09a": "getResourceAsStream() methods with boolean for controlling cache.",
  "d3aee84": "Making silent more silent, for better performances",
  "19cbfde": "For performance reason, we are now using just isInstanceOf and isClassOf methods",
  "e7c76a9": "Boost serializer performances",
  "6f2a812": "rollback changes that were not improving performances",
  "beaceeb": "Fixed ugly performance issue",
  "bf3ada7": "Added some performance improvements",
  "6856c26": "Sort cache to make unique results for jdk8",
  "0818a64": "Removing chunks cache as it was useless",
  "a24b6e9": "Removed cache from ScopeDataResolver to ActionConfigs",
  "598d510": "Added Result. ResultMapper totally changed. ServletDispatcher is much better and has a cache, too. Important change!",
  "5fe4248": "StringBand optimization",
  "8f09d59": "Minor optimization of lagarto parser.",
  "a4bec1e": "Removed API dependency on LinkedList in favor of List. This should improve memory usage (and some performance).",
  "e09e3ac": "Use JoddArrayList in FindFile for better performances. Also removes some LinkedList usages",
  "3f58000": "rollback direct access - let jvm do the optimization",
  "7c097f6": "Rewritten URL decode method for better performances",
  "9b1e6f7": "hashcode not needed (premature optimization)",
  "07c2b54": "switching to %table to increase performances, as for Lagarto lexer",
  "017d057": "significant boost of Lagarto lexer performances",
  "9e3ba2e": "tests added for result set entity cache",
  "5a0b6a9": "removed synchronized from method as not needed and may impact performances (google code issue #33)",
  "4d67fcc": "Petite resolvers now don't cache values - waste of memory and fixes potential issue with beans of the same type and different wirings.",
  "56caf04": "minor optimization",
  "38d6f44": "use fastsort in findfile",
  "5595da5": "added fastsort",
  "4b97805": "Optimizes performances of closing the unclosed tags. Fixes issue 23.",
  "821ed1a": "added lock instead of synchronize for better performances",
  "e2b09d4": "some performance improvements",
  "2d9d412": "(un)captilize StringUtil optimization.",
  "cd68d30": "string performance optimization",
  "deddc9e": "added DefaultWebApplication for even faster startup.",
  "aef4024": "cache accessCount is long now.",
  "c70ec01": "faster primitive array detection",
  "0ea0447": "remove old fast buffers",
  "0b972df": "fast buffer tests",
  "3010c04": "Updated fast buffers and moved in separate package",
  "52841d2": "Using fastbuffers in FastByteArrayOutputStream and FastCharArrayWritter",
  "fb53949": "fast buffers stores offset.",
  "6221149": "fast buffers added",
  "46063a3": "performance",
  "6ae8425": "accessible check added for better performances",
  "f502ea6": "base64 - new, faster implementation",
  "88b2ce0": "memory optimization"
}, "jOOQ": {
  "ff86351a": "[jOOQ/jOOQ#15050] Don't cache system property value",
  "625e2171": "[jOOQ/jOOQ#14331] Add Settings.renderRedundantConditionForSeekClause to improve SEEK predicate performance in some RDBMS",
  "7c6ab548": "[jOOQ/jOOQ#14191] DefaultDiagnosticsContext should cache resultSetFetchedRows",
  "abbcbd40": "[jOOQ/jOOQ#13647] DefaultRecordUnmapper should cache AbstractRow and record type",
  "1d659422": "[jOOQ/jOOQ#13349] Select.asTable() should delay slow call to Tools::autoAlias",
  "1d5c8c2c": "[jOOQ/jOOQ#13008] Compilation error in KotlinGenerator output when implicit join path cache conflicts with keyword",
  "4e64c74b": "[jOOQ/jOOQ#12596] ParamType.INLINED produces wrong behaviour for cacheParsingConnection",
  "38e16b36": "[jOOQ/jOOQ#12151] Add a cache for Tools.fieldName() and fieldNameString()",
  "25b2bda4": "[jOOQ/jOOQ#11927] Add a Javadoc remark about performance to all the fetch() methods that map results",
  "6206129d": "[jOOQ/jOOQ#8334] ParsingConnection should cache frequent input / output SQL string pairs",
  "7c6c41ec": "[jOOQ/jOOQ#11345] Memory leak regression in DefaultDataType cache",
  "091322bd": "[jOOQ/jOOQ#11099] Some performance improvements in Convert",
  "c83a9864": "[jOOQ/jOOQ#11058] Further reuse of cached Table.fieldsRow()",
  "9e3a1dc5": "[jOOQ/jOOQ#10432] Add Settings.cachePreparedStatementsInLoader to keeping open PreparedStatements in Loader API",
  "dad2fe30": "Updated refaster files",
  "692e7470": "[jOOQ/jOOQ#9882] Add Refaster templatesfor SQLDialect#supports()",
  "0a55bad1": "[jOOQ/jOOQ#9825] Only build Refaster in Java 8+",
  "4df9b85b": "[jOOQ/jOOQ#9825] Only run Refaster tests in Java 11",
  "97343621": "[jOOQ/jOOQ#9825] Resynchronize .refaster files as binary files",
  "fff60947": "[jOOQ/jOOQ#9825] Enable building of jooq-test-refaster again",
  "1ae817a1": "[jOOQ/jOOQ#9825] Temporarily disable building of jooq-test-refaster",
  "eb1ffec4": "[jOOQ/jOOQ#9825] Temporarily disabling step to combine Refaster files",
  "cb6bc67f": "[jOOQ/jOOQ#9825] Don't build jOOQ-refaster in Java 8 builds",
  "883cec7f": "[jOOQ/jOOQ#9825] Include jooq-refaster in builds",
  "8ceaf4eb": "[jOOQ/jOOQ#8803] Improve performance of StringUtils#replace()",
  "351b45b1": "[jOOQ/jOOQ#8751] Slightly improve performance of Integer rendering",
  "ddff21fc": "[jOOQ/jOOQ#8751] Improve SQL rendering performance",
  "f39e15be": "[#8464] Log slow result set fetching in code generator",
  "212b4908": "[#7731] DAO methods do not profit from reflection cache when Settings.returnRecordToPojo = true",
  "06a047c1": "[#7764] Race condition in cached ImmutablePOJOMapperWithParameterNames",
  "c0190dc4": "[#7474] Make number of seconds that are considered 'slow' in jOOQ-meta configurable",
  "b3ff200f": "[#7474] Make number of seconds that are considered 'slow' in jOOQ-meta configurable",
  "380cb706": "[#7062] NotSerializableException when Record references reflection cache",
  "0818b0a2": "[#6800] Optimise internal reflection cache by avoiding cache key arrays where possible",
  "682d4a03": "[#6676] Add markdown to error message about slow SQL",
  "89539ecb": "[#6077] Reverted fast-path regular expressions on split() usage",
  "b748b31c": "[#6052] Create an internal Keyword cache",
  "f331291b": "[#6053] KeywordImpl should cache the AS_IS, UPPER, LOWER renderings",
  "e3c99117": "[#5973] Copy constructor performance optimisation",
  "c5442555": "[#5967] Improve performance of Result.formatJSON() by avoiding List and Map allocation",
  "10616a9c": "[#5567] Add Javadoc warnings on Field.in(Collection) and Field.in(T...) about cursor cache contention problems",
  "88214ce4": "[#5322] Create constant empty arrays Field[0] and String[0] for faster toArray() calls",
  "33b019ee": "[#4762] org.jooq.Meta must not cache DatabaseMetaData in order not to violate the ConnectionProvider contract",
  "1607c6c4": "[#4416] Add a remark to the VisitListener Javadoc that implementors should be wary of performance implications",
  "d1ac9e79": "[#4290] DefaultTransactionProvider should not cache Connection instance",
  "c3d5f4d8": "[#2965] Implement a reflection cache in Configuration for use by DefaultRecordMappers",
  "01d95eab": "[#2863] Remove unnecessarily cached Connection in DataSourceConnectionProvider",
  "372ef3a4": "[#2657] Add support for ORDER BY .. SEEK .. LIMIT to implement the 'seek method' for faster offsets",
  "1959ee64": "[#2238] Code generation runs extremely slow for large schemas (Inefficient DefaultRelations.getUniqueKeys() and getForeignKeys() methods)",
  "ac9bf127": "[#2239] Code generation runs extremely slow for large schemas (Inefficient AbstractDatabase.filterSchema() methods)",
  "b30e478d": "[#2238] Code generation runs extremely slow for large schemas (Inefficient DefaultRelations.getUniqueKeys() and getForeignKeys() methods)",
  "7ce2b9d8": "[#2178] Improve FieldList. Avoid creating excessive array lists, where simple (immutable) Field<?>[] are sufficient - More improvements leading to another 50% performance increase",
  "adc8a474": "[#1170] Improve performance on jOOQ's reflection usage - Access record values by index, rather than by field, to further improve performance",
  "59732b66": "[#2154] Generated Records should access values by index, not by field, for performance reasons - Regenerated H2 schema",
  "d62d6c59": "[#2154] Generated Records should access values by index, not by field, for performance reasons",
  "54883e3b": "[#1170] Improve performance on jOOQ's reflection usage",
  "c4850ad5": "[#1170] Improve performance on jOOQ's reflection usage - Added benchmark",
  "90089361": "Improved performance of RowImpl.indexOf() and similar operations, resulting in a 60% performance gain in a relevant Record.setValue(), Record.getValue() benchmark",
  "cfae02d9": "Improved performance of AbstractRecord.fieldsRow(), resulting in a 14% performance gain in a relevant Record.setValue(), Record.getValue() benchmark - Regenerated H2 Schema",
  "f4adc38d": "Improved performance of AbstractRecord.fieldsRow(), resulting in a 14% performance gain in a relevant Record.setValue(), Record.getValue() benchmark",
  "f955bb29": "Improved MetaImpl performance",
  "a70ba0f6": "[#1942] Inefficient call to String.split() in StringUtils.toCamelCase() leads to non-negligible performance overhead in POJO transformation calls",
  "0bcf2869": "[#1860] Bad Results returned from plain SQL 'select *' queries, if several selected columns share the same name [#1720] Improve performance by using Record.getValue(int) instead of Record.getValue(Field) internally, where more than one value is retrieved from a record",
  "3f048d26": "[#1472] Move org.jooq.tools.debug API from jOOQ Console to core - added column count to ResultLog along with row count. Both are performance relevant.",
  "a9c2e61c": "[#1633] Improve the performance of CursorImpl.CursorIterator by setting Record values by index rather than by field - fixed regression",
  "21b3defc": "[#1634] Improve the performance of Factory.newRecord() by avoiding accessing record values by Field rather than by index - fixed regression",
  "58f57c9f": "[#1635] Improve the performance of Factory.fetch(ResultSet) by caching data type normalisation regex in FieldTypeHelper",
  "79c29feb": "[#1634] Improve the performance of Factory.newRecord() by avoiding accessing record values by Field rather than by index",
  "e2b6b8dc": "[#1633] Improve the performance of CursorImpl.CursorIterator by setting Record values by index rather than by field",
  "9caed216": "[#1632] Improve the performance of various DefaultRenderContext methods, by locally caching Settings values locally",
  "02d0ded7": "[#1478] Caching SQLDialect in AbstractDatabase heavily improves code generation performance",
  "7e01cbaf": "Slight performance improvement",
  "aa08d176": "[#1249] Add breakpoint capability to jOOQ Console - breakpoints are independant + bugfix in breakpoint mutation vs serialization cache.",
  "e3e0bf63": "[#1223] Cache ExecuteListener classes for performance"
}, "jpexs-decompiler": {
  "8aa3c18": "Fixed #1991 ConcurrentModificationException on clearing cache thread",
  "4a5cef7": "Fixed #1951 Clearing Namespace/Multiname cache after renaming identifiers",
  "75a8dca": "Fixed Exception handling in cache clearing thread",
  "40ea1e4": "A little optimization, dottedchain uses ArrayLists",
  "60e6e90": "Fixed AS3 - not using visitCode when not needed => faster decompilation",
  "8b6a3e0": "getLoopsWalk optimization to not use recursion when not needed",
  "6159f3f": "Scrollbars. Image position starting at point [0,0]. Clearing shape outline cache.",
  "b82d68a": "Fixed #1920 Slower decompilation (returnType method optimization)",
  "f0b1020": "Fixed #1904 NullpointerException when fast switching items",
  "149dba5": "Added Option to fix conflation artifacts in antialising (Default off - it is slow)",
  "719cea5": "Cleaning cache thread has low priority",
  "220f851": "Fixed #1875 Garbage collect SWF and its caches after closing it",
  "817b466": "Now up to 10 times faster compilation add to changelog",
  "c9f52b4": "Fixed AS3 Direct editation - slow property resolving",
  "202e66e": "Added #1875 Remove no longer accessed items from cache after certain amount of time",
  "9f9e7e3": "FFDec Debug menu - show really used memory, clear all caches option",
  "03f1866": "Fixed Clearing shape export cache on changes",
  "bde3353": "Disabled miter join - it is too slow :-(",
  "02f9806": "PDF Export - separate smoothed and not smoothed bitmaps - cache separately",
  "91f7a5d": "Merge pull request #118 from Chuckame/fix/convert-performance-issues",
  "a5d0a06": "Merge branch 'dev' into fix/convert-performance-issues",
  "f000a7d": "Fixed Multiname - performance issues",
  "1690fce": "Fixed: #1678 Removing AS3 class does not correctly clear cache",
  "6c709bc": "Fixed: Flash viewer - slow on larger zooms (now only diplayed rect is rendered)",
  "de2f0a1": "Travis - cache tools directory for faster builds",
  "630eb1b": "Do not generate javadoc on build, it is not used and slows down building.",
  "28380d1": "Fixed: #1627 Previously decompiled scripts not cached Fixed: SWF is not garbage collected on close in some situations Fixed: AS1/2 script search does not show all results",
  "a579bf1": "AS3 deobfuscator - fixed handling &&, ||. But it might be slower now :-(.",
  "77842de": "#1312 faster colliding usages finder",
  "9573a00": "clear sound cache after replacing sound",
  "4750b50": "AMF optimization: Pair type eliminated, ListSet and ListMap introduces (Set/Map which maintains order of keys)",
  "839ed34": "fix displayobject cache (for example clear then zoom changed)",
  "33d0840": "drawobject cache fix",
  "729b78c": "cache display object as it is written in SWF documentation (placeobject cache flag or has filters)",
  "78058e6": "faster text rendering",
  "ecd038e": "#1205: shape cache needs less memory",
  "c48356f": "set decompiled AS2 script without a worker when it is found in the cache",
  "9cd8a79": "Flash viewer - skip frames when not on time => faster playback, display frameLoss in debugMode Stub for HW accelerated Graphics2D (VolatileImage, opengl, etc.)",
  "f48f81e": "cache parameter removed, only the folder preview images were cached, cache them in that class",
  "c35547c": "do not cache the rendered frame, because it eats all the memory when moving the cursor on the image (caches the image for each mouse position, it is necessary, because of the button states). todo: better algorithm to identify what to cache, detect button states, etc.",
  "7e4998c": "cache key fixed (time is added to the key)",
  "8162aa6": "linked lavm2instuction list for faster deobfuscation (not ready yet)",
  "cdbfe54": "ImageIO disk cache disabled, it writes a lot of ImageIO* files to temp folder.",
  "c096cd4": "fast action list modifications",
  "632e515": "Load from browser cache removed Old 'debugger' tool removed in favor of new real debugger Hotkeys unified",
  "be7b3d1": "execute multiple avm2code list in 1 call (much faster than loading flashplayer every time).. not ready yet",
  "f2b8b14": "faster AVM2 constant pool when adding a lot of items to it.",
  "2b9c1eb": "AS3 direct editation - indexing ABCs for faster access - classes and properties, better(?) and faster resolving Hiding extends Object",
  "e7bf1b0": "preserve variable order in AS2 deobfuscation + make it faster",
  "d6d5435": "faster getUnreachableActionCount",
  "a4f4dd3": "small improvements, little bit faster decompilation by caching the number values of the strings",
  "2396710": "faster AS2 deobfuscation (ActionDeobfuscatorSimple and ActionDeobfuscator combined to a single linked list based algorithm), caching deobfuscated action list fix",
  "f699fd7": "faster AS2 deobfuscation (ActionDeobfuscatorSimple and ActionDeobfuscator combined to a single linked list based algorithm), caching deobfuscated action list",
  "85788e2": "AS2 deobfuscation improved / faster",
  "3475b63": "command line argument to print statistics of the decompilation performance",
  "e8425fc": "faster 'removeGetTimes'",
  "bfe3a7b": "collect decompilation performance statistic data",
  "e8fb8e2": "faster syntax highlighting",
  "2da2384": "button cache fix",
  "d37e1a3": "faster deobfuscation",
  "b47f535": "faster AS3 decompiling",
  "f59edae": "cache only 'alpha multiplied' images",
  "904d1f6": "non static caches (separated cache for all SWFs)",
  "738b26c": "AS3 deobfuscation fix (jumps after the end), faster instruction length calculation",
  "ad9497c": "faster shape export",
  "2fa2a2e": "faster populating sound stream blocks (do it only once instead of for every head tag)",
  "a79d7d6": "faster bitmap export",
  "c12f2b1": "faster canvas export",
  "569c50c": "faster shape export",
  "f464918": "faster filters",
  "6d49dc5": "faster DefineBitsLosslessX reading",
  "effea25": "uncache decompilation after saving pcode",
  "3b11085": "faster swf xml export again",
  "fce4534": "always use buffered output streams when writing to a file, faster swf xml export by caching the fields",
  "5a95cc2": "clear cache after exporting a file",
  "7fd1521": "ttf: get rid of slow xmls",
  "fe83a17": "faster font export (removed undo support, do not save dozens of temp files during export), to be continued...",
  "d5fb45f": "performance fixes",
  "2ada866": "performance fixes",
  "9095d75": "performance fix",
  "ad228cb": "memory usage optimizations",
  "7d05b54": "rendering fix, gc and cache clear buttons added to debug menu",
  "cdc22d8": "faster searchTreeItem",
  "f00af7e": "faster uniqueAS3Packs",
  "c24f753": "faster imageToShape",
  "553999d": "cache image to area convert results",
  "2664d69": "faster imageToShape",
  "f32797c": "more faster raw editing",
  "0f54e89": "do not cache RECTs and (String,String) maps to file",
  "907a97d": "cache clear fix, font list selected value fixed",
  "faafbb2": "redraw preview on zoom, font name cache key fixed when the font name is different from the name in the assigned DefineFontNameTag",
  "33f641d": "faster switching tag tree nodes (drawables and sounds)",
  "9eeb25b": "image performance improvements",
  "e2ba5aa": "performance improvements",
  "689ec29": "faster editor.setText (but still so slow with huge texts) faster AS2 deobfuscation (when multiple jumps should be replaced with a single jump)",
  "eb8104c": "faster populateSoundStreamBlocks",
  "131fb23": "faster folder preview frame rendering",
  "abb3ec9": "File cache improvement, deleting old temp files",
  "af13faa": "separated deobfuscation cache for AS1/2 and AS3 identifiers",
  "61dc5c9": "obfuscated identifiers cache fixed Recompile test fixed",
  "8267b11": "null check in uncache method, use the original ABC object in recompile test",
  "6a03ca7": "Issue #713 Installer downloading of parts like SWC file can be skipped moving auto update check to separate thread for faster loading",
  "5a8c3bc": "faster expanding all treenodes",
  "ffbfecd": "run memory fix typeitem deobfuscation cache synchronization fix",
  "eaefcb2": "faster tree cell renderer construction",
  "ce711ae": "faster timeline construction",
  "7a8d952": "tag tree nodes refactored, faster building of tag tree, some redundant logic (export and view in gui) simplified",
  "af29b2b": "identcache ignored",
  "8ba93af": "load AVM2 instuctions dynamically (much less memory usage after loading an swf, but still fast decompiling)",
  "3b6cee4": "do not use getBytesLength because it 'generates' the action bytes to get the length (slow) use instead getTotalActionLength",
  "d6c14b8": "AS2 reading performance improvements",
  "edb8da9": "LZMA encoding fast bytes parameter valid value range is shown in the UI",
  "8ad45b3": "LZMA encoding fast bytes parameter",
  "a3c4fae": "periodic gc call removed (very slow with some million objects), 33% faster dump info collecting",
  "71a108c": "Canvas export - character type names, better image handling, indentation, faster library generation",
  "a81e71a": "faster canvas export",
  "987c05d": "faster getUsedRatios",
  "2ca0c18": "faster generic tag editor",
  "db36ddd": "faster loading of compressed files",
  "746a385": "#387 Frames preview bugged fixed, faster preview",
  "d48e6b1": "faster imagepanel",
  "7a5474b": "faster image rendering when layer has filters (only the required area is rendered)",
  "c5770da": "faster swf extract",
  "5c5106b": "cache fixed",
  "0486cb3": "some sprite/frame rendering issue fixed, generic cache, serializableimages",
  "2a2a995": "do not serialize images when memory cache is used",
  "4d563a2": "faster font preview with internal flash viewer",
  "f065ba9": "Some folders marked to build output => much faster 'Go To File' in netbeans, not showing binary .class files and html reports anymore",
  "f5effd2": "faster renaming identifiers (invokeandwait => invokelater)",
  "167534f": "GFx fonts caching (faster viewing)",
  "5e2bac3": "Issue #383 Improved Firefox browser cache handling Loading progressbar for cache",
  "55efab1": "Issue #383 fixed Cache viewer when cache directory of Firefox does not exist",
  "1357bc9": "fixed Cache viewer when cache directory does not exist (browser not installed)",
  "ca8f9b9": "Searching in browsers cache (Chrome, Firefox)",
  "d571b89": "array definitions was inconsistent, now everywhere 'Type[] variableName', using StringBuilder => little bit faster, test fixed (missing parameters)",
  "591e47b": "faster disassembling",
  "9f22cec": "Issue #333 Exporting is very slow, and generates a huge output file.",
  "e753ca9": "Issue #288 better memory/cache handling",
  "482bca9": "image cache fix",
  "3b07540": "Refreshing shape/frame cache after image replace formatting",
  "2ba887a": "AS Decompilation can be disabled in menu (Disassemble only) Go to document class fixed Clearing cache after autodeobfuscation change",
  "de6df1a": "cache fix",
  "d890203": "FLA export - cacheAsBitmap",
  "f6250b9": "AD3: A bit faster exporting due turning off Highlighting",
  "2e370c9": "Position cache (Faster decompiling) Not clearing killed registers",
  "8c33a9f": "ABC class: - removed sequential search from findBody() and findBodyIndex() - using local variables in ABC(InputStream is) constructor to improve performances and readability ABCInputStream class: - added method int read(byte[] b) MethodInfo class: - introduced reference to method body"
}, "JsBridge": {
  "": ""
}, "JSON-java": {
  "3b8b0a6": "Update test cases to verify performance change and verify opt/getBigDecimal match",
  "fcb8048": "deepened the testing a little bit, slow going"
}, "JsonPath": {
  "c521615": "speed up the abort of an evaluation. It's quite expensive to create an exception and fill its stack. As we don't care about the stack anyway, we don't fill it, also we cache a single exception instance",
  "2002a7f": "build and test with Java 7, cache Gradle home between executions",
  "179a818": "Minor cache fixes.",
  "f25ec6c": "fixed the cache key and the unit test (use the same key when fetching and looking up cache) #94",
  "9bc0f8b": "Added filters to the cache key #94",
  "eebfd8b": "Updating the cache on cache miss",
  "bf33697": "Externalized the cache using CacheProvider spi.",
  "ba08ae3": "Stab at fixing #94 cache problem.",
  "c209173": "Added result cache for root ($) queries performed by predicates.",
  "4e0ac4c": "Merge pull request #56 from jochenberger/optimizations",
  "a86732c": "more tiny performance improvements",
  "a7fd288": "Merge pull request #51 from jochenberger/optimizations",
  "2b116b2": "Merge branch 'master' of github.com:jayway/JsonPath into optimizations",
  "fe1480a": "Merge branch 'master' of github.com:jayway/JsonPath into optimizations",
  "c42337d": "Merge pull request #49 from jochenberger/optimizations",
  "2664f83": "merge JsonProvider's getMapValue methods, various small performance improvements",
  "2d597f0": "small performance improvements for Utils.createRange",
  "080d687": "Improved type safety and performance in JsonProvider.",
  "1f79c6d": "Improved type safety and performance in JsonProvider.",
  "c2193d8": "Updated com.fasterxml.jackson.core to 2.4.0",
  "dedbf79": "Merge pull request #21 from jochenberger/performance-improvements",
  "552d828": "Merge remote-tracking branch 'upstream/master' into performance-improvements",
  "3ba86e2": "Merge remote-tracking branch 'upstream/master' into performance-improvements"
}, "jsonschema2pojo": {
  "15e4229": "Clear schema cache between JSON files",
  "4a8fa63": "Bump actions/cache from 2 to 3",
  "7d1febe": "Merge branches 'dependabot/maven/org.apache.maven.plugins-maven-surefire-plugin-2.22.2', 'dependabot/maven/org.apache.maven.plugins-maven-plugin-plugin-3.6.1', 'dependabot/maven/org.glassfish-jakarta.el-4.0.1' and 'dependabot/gradle/jsonschema2pojo-gradle-plugin/example/android/com.fasterxml.jackson.core-jackson-databind-2.12.4' of https://github.com/joelittlejohn/jsonschema2pojo into combine-prs-branch",
  "bcc5e2f": "Merge pull request #1286 from joelittlejohn/dependabot/maven/com.fasterxml.jackson.dataformat-jackson-dataformat-yaml-2.12.4",
  "4f43302": "Merge branch 'master' into dependabot/maven/com.fasterxml.jackson.dataformat-jackson-dataformat-yaml-2.12.4",
  "37b2248": "Merge pull request #1262 from joelittlejohn/dependabot/github_actions/actions/cache-2.1.6",
  "a4810b1": "Bump actions/cache from 2.1.5 to 2.1.6",
  "739d2bd": "Merge pull request #1225 from joelittlejohn/dependabot/gradle/jsonschema2pojo-gradle-plugin/example/android/com.fasterxml.jackson.core-jackson-databind-2.12.2",
  "75dc28a": "Merge pull request #1224 from joelittlejohn/dependabot/github_actions/actions/cache-v2.1.4",
  "09be1fe": "Bump actions/cache from v2 to v2.1.4",
  "2a75cec": "Merge pull request #1206 from joelittlejohn/dependabot/gradle/jsonschema2pojo-gradle-plugin/example/android/com.fasterxml.jackson.core-jackson-databind-2.12.1"
}, "jsoup": {
  "b873e21": "Use Charset.forname, to better cache charset lookups",
  "6607830": "Speed optimization when reparenting children into an empty element",
  "a067d5a": "Switch to faster String#indexOf(char) method. (#1348)",
  "73e23c1": "Minor performance improvement to Selector.select() (#1479)",
  "6e24d79": "Improve StringBuilder cache performance under high concurrency (#1402)",
  "9d9e53c": "Fixed a performance regression in 1.12",
  "7a40591": "Minor (~2%) increase in cache hit rate",
  "5a570cf": "Much faster perf when bulk inserting a complete node list into anothe r node",
  "ae99d7e": "Table parse performance tweak",
  "f71712b": "Project :: Slimfast",
  "38049ce": "Memoize the child element list, so that sibling index queries are much faster",
  "6a8fcb2": "Update the string cache on conflicts",
  "585eb72": "Improve performance when selecting against multiple roots",
  "59453e2": "Less GC in cache check",
  "850e1c2": "Test for Issue#478 (class names must not be cached)",
  "8c673dd": "Element.classNames() must not be cached",
  "66b65e0": "Changelog for performance improvement.",
  "e313f95": "In jsoup.connect, fail faster if the return content type is not supported.",
  "f11c3b4": "small optimizations",
  "8a7efe7": "Initial add of new generation selectors(faster than original)",
  "f0f3eab": "TextNode performance tweaks",
  "40a3cda": "Parsing performance optimisation.",
  "6cff72a": "Parsing performance optimisation."
}, "JSqlParser": {
  "426102e": "Fix Nested CASE WHEN performance, fixes issue #1162 (#1208)",
  "36d0b74": "fixes #1013 - refactored fromitem grammar to drastically improve performance",
  "b76e639": "Merge pull request #594 from sh-tomer/add_support_for_sql_no_cache",
  "8dd564e": "Merge branch 'master' into add_support_for_sql_no_cache",
  "c78aa03": "improved parsing performance"
}, "JS-Sorting-Algorithm": {
  "": ""
}, "jstorm": {
  "4028cf4": "Change logging message typo in rocksdb cache",
  "3959ba1": "Add performance test source code"
}, "junit4": {
  "b164fa2": "Use setup-java's Maven cache and use Temurin JDK distribution",
  "9ee3814": "Remove fast-tests maven target.",
  "298cc44": "small optimization if-else",
  "a1b61ff": "Addressing some style and performance issues with null error messages.",
  "56743a4": "Merging from AlistairIsrael-classrules on github to ppreserve history because of non-fast forward merge (whatever that means)",
  "5042f69": "By passing TestClass to AllMembersSupplier, we can reuse the annotation parsing already supplied, and improve performance",
  "4f405a4": "By passing TestClass to AllMembersSupplier, we can reuse the annotation parsing already supplied, and improve performance",
  "cde32fb": "Theories are a lot faster, by caching the @Before and @After methods and sharing them between all Theory method invocations.",
  "4e1018a": "Now using Statements to run test classes, removing before/after duplication. Also factored out a JUnitSystem object so tests that verify return codes can run with a mock system and so run much faster (almost doubled the speed of the whole suite).",
  "187f007": "Refactored AntUnit tests into fast and slow tests"
}, "junit5": {
  "e3abf42": "Fix cache relocatability of :platform-tooling-support-tests:test",
  "33a3206": "Mark verifyOSGi tasks not cacheable",
  "8f137f3": "Normalize Maven repo to make integration test task cacheable",
  "4f96843": "Extract config cache compatible CaptureJavaExecOutput task",
  "c3de451": "Enable stricter configuration cache checks",
  "45d40bd": "Make :platform-tooling-support-tests:test config cache compatible",
  "9c28789": "Make tasks compatible with configuration cache",
  "7644bbd": "Mark known third-party tasks as not compatible with config cache",
  "b3827e2": "Document shadowJar cache miss (#3097)",
  "2332b18": "Make verifyOSGi configuration cache compatible",
  "27e4bfd": "Make `assemble` configuration cache compatible",
  "8747727": "Move local variables into Action for configuration cache compatibility",
  "e018f60": "Configure BND to be compatible with configuration cache",
  "685dd96": "Make build cache URL configurable",
  "695adc5": "Don't cache task when debugging",
  "05196cb": "Remove slow Gradle plugin and call git directly",
  "89b7571": "Do not cache outputs of compile tasks on EA versions of Java",
  "a3412ba": "Use setup-java's Gradle cache",
  "177d808": "Disable reading from the remote build cache for the CodeQL build",
  "3bda349": "Disable build cache for CodeQL build again",
  "f35ec81": "Enable build scans and build cache for CodeQL builds",
  "ac76652": "Update cache triggers for snapshot API uploads",
  "d7c429b": "Incorporate review feedback: fail fast not soft",
  "7e5f0ee": "Incorporate review feedback: fail fast not soft",
  "7cdf362": "Make downloadJavadocElementLists task cacheable",
  "4359d97": "Don't cache URL connection when loading `junit-platform.properties` contents",
  "fada1f4": "Inject build cache username/password into CI builds",
  "64c54ad": "Configure remote build cache",
  "30ad44b": "Remove dependency cache action",
  "6adad37": "Configure dependency cache",
  "17263f1": "Enable Gradle build cache",
  "4c13b70": "Cache methods to improve performance of TestSource creation",
  "34c128d": "Improve performance of Vintage engine",
  "b7897db": "Improve performance of assertLinesMatch(...)",
  "8c0ee4d": "Make consoleLauncerTest cacheable",
  "e56fab4": "Use tocbot.min.js for faster downloads",
  "c8df955": "Remove `caches/jars-3` from cached directories",
  "1b6e83a": "Execution of tooling support tests should be faster",
  "a724883": "Exclude '.gradle/caches/journal-1' from cache",
  "0a19b6f": "Upgrade fast-classpath-scanner to 3.1.13",
  "4fbe575": "Upgrade fast-classpath-scanner to version 3.1.9",
  "948841c": "Remove annotation cache from AnnotationUtils",
  "55bc9aa": "Replace Apache download site with a fast mirror",
  "8cc09b1": "Upgrade fast-classpath-scanner to 2.21",
  "3bd3371": "Upgrade to fast-classpath-scanner 2.20",
  "1d2e0ea": "Upgrade fast-classpath-scanner to 2.18.2",
  "e732d1f": "Use IdentityHashMap for internal type cache in ReflectionUtils",
  "307a86c": "Update fast-classpath-scanner to version 2.11.0",
  "d05d2ec": "Upgrade to fast-classpath-scanner 2.9.4",
  "dec6a54": "Upgrade to fast-classpath-scanner 2.4.7",
  "380a1ef": "Improve performance of test discovery in Jupiter & Vintage",
  "cc2f217": "Improve type caches in ReflectionUtils",
  "5758abe": "Improve performance of AnnotationUtils",
  "b086699": "Improve performance of TestTemplateTestDescriptor",
  "6159955": "Use single fast-forward marker and cleanup",
  "9f1d6be": "Cleanup fast-forward algorithm",
  "ab4d6d2": "Parse fast-forward limit",
  "9704d7c": "Support fast-forward in actual line iteration",
  "e4d24e8": "Make DeGraph check faster and more user friendly (#532)",
  "ec800f1": "Remove potential performance bottleneck caused by logging using Supplier",
  "5c8cf32": "Merge pull request #184 from stefanbirkner/fail-fast",
  "5531679": "Add TODO regarding ConditionEvaluator performance",
  "4ae93c7": "Introduce annotation cache in AnnotationUtils",
  "811416d": "Increase performance in TestPlanSpecification"
}, "JustAuth": {
  "e803046": "update pom.xml. 升级fastjson版本到1.2.83，1.2.83版本之前存在代码执行漏洞风险 ，CVE-2022-25845",
  "571466f": "Merge pull request #149 from justauth/dependabot/maven/com.alibaba-fastjson-1.2.83",
  "e1b912b": ":arrow_up: Bump fastjson from 1.2.78 to 1.2.83",
  "0e1b000": ":arrow_up: 升级 `fastjson` 到 `v1.2.76`",
  "2497519": "!17 fastjson 漏洞修复 Merge pull request !17 from harrylee/dev",
  "e75df92": ":lock: fastjson 漏洞修复",
  "9ef19b1": "Upgrade fastjson version",
  "fc4606d": "fastjson 升级到 1.2.62",
  "fabfff6": "Merge pull request #32 from xkcoding/extract-cache",
  "d4296d1": "Merge branch 'dev' into extract-cache",
  "c1f9e96": ":white_check_mark: 修改 cache 测试类",
  "57cb7fb": ":sparkles: 抽取 cache 接口，方便用户自行集成 cache",
  "a599ced": "fastjson version"
}, "JustTrustMe": {
  "": ""
}, "jvm-sandbox": {
  "5e61357": "Merge pull request #210 from cryptosession/hotfix/performance",
  "46757ef": "Merge branch 'develop-for-20190410' into hotfix/performance",
  "43c6bd1": "Fixed issue #209 : Enhance the performance of handling with each event."
}, "jvm-serializers": {
  "734c0c1": "Merge pull request #85 from FelixGV/fast_avro_support",
  "806aa59": "Added support for avro-util's fastserde.",
  "09c81c6": "changed name from 'json/fastjson_array/databind' to 'json-array/fastjson/databind'",
  "b8e9b79": "remove tpc/lib/fastjson-1.2.10.jar",
  "82ff091": "use fastjson 1.2.11",
  "9bf8264": "use fastjson new api",
  "b0e6d94": "fastjson-1.2.10",
  "6092e45": "use fastjson last version 1.2.9",
  "28ba9d7": "result charts: show bars in performance order.",
  "762809a": "Updated to new version of Stephenerialization for the sake of performance.",
  "495a5cb": "added fast-serialization",
  "a61c10a": "Commented out 2 especially slow JSON backends, to limit runtimes (unfortunately we don't use fixed-time test, but fixed iterations)",
  "09c8515": "update fastjson lib (a new version 1.1.19)",
  "269b79f": "revert to old ByteArrayOutputStream behavior (the last change made java-manual look slower (from 1700ms to 2400ms)",
  "c2cf11f": "use fastjson 1.1.19",
  "3d94183": "Add xml codecs for streaming -- interesting, fast-infoset size as small as Avro's! -- and Aalto speed comparable to Hessian",
  "e544272": "Improve usage of fastjson, since it can use byte[] directly, no need for intermediate String",
  "9bdbbe4": "Update fastjson jar to latest",
  "30cea08": "10% faster overall Argo JSON serializer",
  "936e0de": "slightly faster Flexjson deserialization",
  "23eb527": "faster and corrected implementations of JsonJacksonManualTree serializers",
  "3a0f81a": "faster version of GsonManual",
  "dde2c47": "faster implementations of JSON databind Gson, JSON-Lib, and svenson serializers",
  "7f5c9c1": "changed FastJSON serialization to be slightly fast, and to correctly serialize enum names (instead of enum ordinals)",
  "e94fcbe": "Update jackson to 1.7.0 (seems to get 10 - 15% performance improvement)",
  "4698757": "Upgrade Gson to 1.6 (from 1.5), seemingly minor performance improvements",
  "747a0f1": "Add another kryo serializer 'kryo-custom' that comes with custom serializers for MediaContent, Media and Image. Most of the time it's faster than both other kryo serializers.",
  "a9ff1ea": "Update Jackson to 1.6.0 that was released, has better serialization performance",
  "f4e0b07": "Upgrade gson to newer possibly faster version",
  "da3cd38": "strongly improved performance of Externalizable serializer by implementing Object*put on our own. Object*putStream do expensive stuff on instantiation which we don't need in this serializer.",
  "00402a8": "Issue-16: applied proposed patch, which improves manual implementation of Externalizable - it's one of the fastest serializers now, at least with running on WinXP and 1.6.0_17.",
  "5b13f92": "Added Hessian serializer (surprisingly slow, it seems)",
  "082df4a": "Minor general optimization, will now reuse ByteArrayOutputStream (to reduce unnecessary overhead). Also added Aalto XML/Stax parser."
}, "jvm-tools": {
  "": ""
}, "jwt-spring-security-demo": {
  "eb05beb": "#54 did some optimizations after merge"
}, "kafdrop": {
  "": ""
}, "kafka": {
  "440bed23": "MINOR:code optimization in QuorumController (#13697)",
  "6bcc497c": "KAFKA-14766: Improve performance of VarInt encoding and decoding (#13312)",
  "e27926f9": "KAFKA-14735: Improve KRaft metadata image change performance at high … (#13280)",
  "b2ee6df1": "KAFKA-14172: Should clear cache when active recycled from standby (#13369)",
  "ba6989a7": "[MINOR] assert the cache size for each operation in RemoteIndexCacheTest (#13244)",
  "ef9c9486": "KAFKA-14676: Include all SASL configs in login cache key to ensure clients in a JVM can use different OAuth configs (#13211)",
  "6663acff": "KAFKA-13152: Add cache size metrics (#12778)",
  "d3ee9341": "KAFKA-12476: Prevent herder tick thread from sleeping excessively after slow operations (#12876)",
  "9a793897": "KAFKA-13152: KIP-770, cache size config deprecation (#12758)",
  "cda5da9b": "KAFKA-14209: Change Topology optimization to accept list of rules 1/3 (#12641)",
  "3d9a5f6a": "KAFKA-14163; Retry compilation after zinc compile cache error (#12507)",
  "b5d4fa76": "KAFKA-13785: [10/N][emit final] more unit test for session store and disable cache for emit final sliding window (#12370)",
  "d83fccd6": "KAFKA-13785: [5/N][emit final] cache for time ordered window store (#12030)",
  "44906bdc": "KAFKA-8785: fix request timeout by waiting for metadata cache up-to-date (#11681)",
  "1317f3f7": "MINOR: log warning when topology override for cache size is non-zero (#11959)",
  "322a065b": "KAFKA-13714: Fix cache flush position (#11926)",
  "c05403f4": "KAFKA-13629: Use faster algorithm for ByteUtils sizeOfXxx algorithm (#11721)",
  "894e520c": "KAFKA-13449: Comment optimization for parameter log.cleaner.delete.retention.ms (#11505)",
  "38a3ddb5": "MINOR: Add a replication system test which simulates a slow replica (#11395)",
  "34d56dc8": "KAFKA-12802 Added a file based cache for consumed remote log metadata for each partition to avoid consuming again incase of broker restarts. (#11058)",
  "b76bcaf3": "KAFKA-13102: Topic IDs not propagated to metadata cache quickly enough for Fetch path (#11170)",
  "8d5185d9": "MINOR; Small optimizations in `ReplicaManager#becomeLeaderOrFollower` (#11225)",
  "f6d6bcc1": "MINOR: Print the cached broker epoch (#11005)",
  "4724083a": "KAFKA-8940: decrease session timeout to make test faster and reliable (#10871)",
  "d4961038": "MINOR: Small optimizations and removal of unused code in Streams (#10856)",
  "6db51e46": "KAFKA-12675: improve the sticky general assignor scalability and performance (#10552)",
  "4de5f126": "KAFKA-12704: Improve cache access during connector class instantiation in config validations (#10580)",
  "13b4ca87": "KAFKA-12500: fix memory leak in thread cache (#10355)",
  "367eca08": "KAFKA-12503: inform threads to resize their cache instead of doing so for them (#10356)",
  "a0e0028b": "MINOR: add test for repartition/source-topic/changelog optimization (#9668)",
  "10b07575": "KAFKA-10794 Replica leader election is too slow in the case of too many partitions (#9675)",
  "bc96a8fe": "KAFKA-10706; Ensure leader epoch cache is cleaned after truncation to end offset (#9633)",
  "d12fbb7c": "KAFKA-10500: Allow resizing of StreamThread state store caches (#9572)",
  "d87cd00f": "KAFKA-10454 / Update copartitionSourceGroups when optimization algorithm is triggered (#9237)",
  "90517d15": "KAFKA-10068: add task assignment performance tests (#8892)",
  "43d43e6c": "KAFKA-10002; Improve performances of StopReplicaRequest with large number of partitions to be deleted (#8672)",
  "e2e2c628": "KAFKA-10074: Improve performance of `matchingAcls` (#8769)",
  "aa1b3c11": "KAFKA-9855 - return cached Structs for Schemas with no fields (#8472)",
  "6216c886": "KAFKA-9853: Improve performance of Log.fetchOffsetByTimestamp (#8474)",
  "6ad54073": "KAFKA-9719: Streams with EOS-beta should fail fast for older brokers (#8367)",
  "8cf781ef": "MINOR: Improve performance of checkpointHighWatermarks, patch 1/2 (#6741)",
  "8dff0b16": "Kafka 9626: Improve ACLAuthorizer.acls() performance",
  "faf46de5": "KAFKA-9338; Fetch session should cache request leader epoch (#7970)",
  "655843c5": "KAFKA-9386; Apply delete ACL filters to resources from filter even if not in cache (#7911)",
  "1675115e": "MINOR: refactor replica last sent HW updates due to performance regression (#7671)",
  "e98e239a": "KAFKA-8859: Refactor cache-level metrics (#7367)",
  "e2d16b50": "KAFKA-8802: ConcurrentSkipListMap shows performance regression in cache and in-memory store (#7212)",
  "7ebcd50f": "KAFKA-8736: Streams performance improvement, use isEmpty() rather than size() == 0 (#7164)",
  "a48b5d90": "KAFKA-8717; Reuse cached offset metadata when reading from log (#7081)",
  "d0548758": "MINOR: Update documentation for enabling optimizations (#7099)",
  "d7a5e31c": "KAFKA-8519 Add trogdor action to slow down a network (#6912)",
  "3ba4686d": "KAFKA-7601; Clear leader epoch cache on downgraded format in append (#6568)",
  "0f7a87e9": "KAFKA-7652: Restrict range of fetch/findSessions in cache (#6448)",
  "369d89f2": "MINOR: Move KTable source topic for changelog to optimization framework (#6500)",
  "538bd7ed": "KAFKA-8094: Iterating over cache with get(key) is inefficient (#6433)",
  "9a384daf": "MINOR: Change Trogdor agent's cleanup executor to a cached thread pool (#6309)",
  "b10d311f": "KAFKA-8039 - Use MockTime in fast reauth test to avoid transient failures (#6383)",
  "d152989f": "KAFKA-7897; Disable leader epoch cache when older message formats are used (#6232)",
  "08dbec74": "MINOR: Add sentence to command line documentation of producer performance tool on how to disable throttling. (#6205)",
  "7debda4d": "KAFKA-7890: Invalidate ClusterConnectionState cache for a broker if the hostname of the broker changes. (#6215)",
  "64b2d4fc": "KAFKA-7766: Fail fast PR builds (#6059)",
  "dfd54548": "MINOR: Add system test for optimization upgrades (#5912)",
  "6ced8550": "KAFKA-7216: Ignore unknown ResourceTypes while loading acl cache (#5673)",
  "9dac615d": "KAFKA-7386: streams-scala should not cache serdes (#5622)",
  "0d778987": "KAFKA-6998: Disable Caching when max.cache.bytes are zero. (#5488)",
  "3e64e5b9": "KAFKA-6761: Reduce streams footprint part IV add optimization (#5451)",
  "b01f8fb6": "KAFKA-7142: fix joinGroup performance issues (#5354)",
  "a61594de": "KAFKA-6432: Make index lookup more cache friendly (#5346)",
  "f54acdbb": "KAFKA-6935: Add config for allowing optional optimization (#5071)",
  "d99f4a0f": "KAFKA-6617; Improve controller performance by batching reassignment znode write operation",
  "c9ec2921": "Improve kafka client sensor registration performance by lazily calculating JMX attributes",
  "9679c44d": "KAFKA-6361: Fix log divergence between leader and follower after fast leader fail over (#4882)",
  "5760da7d": "KAFKA-6622; Fix performance issue loading consumer offsets (#4661)",
  "004ef6b0": "MINOR: Cache Node's hashCode to improve the producer's performance (#4350)",
  "015e224b": "MINOR: Support dynamic JAAS config for broker's LoginManager cache (#4568)",
  "88307657": "KAFKA-6481; Improving performance of the function ControllerChannelManager.addUpd…",
  "fd8eb268": "KAFKA-6168: Connect Schema comparison is slow for large schemas",
  "12af521c": "KAFKA-6175; AbstractIndex should cache index file to avoid unnecessary disk access during resize()",
  "8b14e117": "KAFKA-1595; Remove deprecated and slower Scala JSON parser",
  "e2fe19d2": "KAFKA-5600; Fix group loading regression causing stale metadata/offset cache",
  "12612e82": "KAFKA-5329; Fix order of replica list in metadata cache",
  "39eb31fe": "MINOR: Optimise performance of `Topic.validate()`",
  "65861a71": "KAFKA-5277; Sticky Assignor should not cache previous assignment (KIP-54 follow-up)",
  "da0b5b85": "KAFKA-5216: Fix peekNextKey in cached window/session store iterators",
  "794e6dbd": "KAFKA-5130: Refactor transaction coordinator's in-memory cache; plus fixes on transaction metadata synchronization",
  "14ab3dcc": "MINOR: reduce commit interval and cache size for integration test",
  "0fba5296": "KAFKA-4677 Follow Up: add optimization to StickyTaskAssignor for rolling rebounce",
  "d0932b02": "KAFKA-4558; throttling_test fails if the producer starts too fast",
  "57f0cb29": "KAFKA-4704; Coordinator cache loading fails if groupId is reused for offset storage after group is removed",
  "50e035dc": "MINOR: reduce verbosity of cache flushes",
  "529ca329": "KAFKA-4166; Fix transient MM failure caused by slow old consumer shutdown",
  "e9a67a8d": "KAFKA-4492: Make the streams cache eviction policy tolerable to reentrant puts",
  "f9d7808b": "KAFKA-4469; Fix consumer performance regression from inefficient list removal and copy",
  "724cddbc": "KAFKA-4331: Kafka Streams resetter is slow because it joins the same group for each topic",
  "7c36fc37": "KAFKA-4311: Multi layer cache eviction causes forwarding to incorrect ProcessorNode",
  "b2fa0d75": "KAFKA-4331: Kafka Streams resetter is slow because it joins the same group for each topic",
  "65f6a796": "KAFKA-4300: NamedCache throws an NPE when evict is called and the cache is empty",
  "071b76cc": "KAFKA-3852: Clarify how to handle message format upgrade without killing performance",
  "3cf2de06": "KAFKA-3723: Cannot change size of schema cache for JSON converter",
  "c1694833": "KAFKA-3490; Multiple version support for ducktape performance tests",
  "bd5325dd": "MINOR: small code optimizations in streams",
  "8ef804dc": "KAFKA-3414; Return of MetadataCache.getAliveBrokers should not be mutated by cache updates",
  "ba6f141d": "MINOR: Tiny optimization to avoid mapping twice on the results.",
  "841d2d1a": "MINOR: StreamThread performance optimization",
  "23f36c59": "KAFKA-2950: Fix performance regression in the producer",
  "eafc349a": "KAFKA-2913: missing partition check when removing groups from cache",
  "4a0e011b": "KAFKA-2882: Add constructor cache for Snappy and LZ4 Output/Input streams in Compressor.java",
  "dbdec927": "KAFKA-2841; safe group metadata cache loading/unloading",
  "2b04004d": "HOTFIX: bug updating cache when loading group metadata",
  "e9fc7b8c": "KAFKA-2776: Fix lookup of schema conversion cache size in JsonConverter.",
  "2254f2bf": "Kafka-2587: Only notification handler will update the cache and all verifications will use waitUntilTrue.",
  "13c432f7": "KAFKA-2486; fix performance regression in new consumer",
  "83549599": "KAFKA-2485; Allow producer performance to take properties from a file…",
  "ca758252": "kafka-1646; Improve consumer read performance for Windows; patched by Honghai Chen; reviewed by Jay Kreps and Jun Rao",
  "185eb9b5": "kafka-1994; Evaluate performance effect of chroot check on Topic creation; patched by Ashish Singh; reviewed by Gwen Shapira and Jun Rao",
  "07598ad8": "KAFKA-1005 Shutdown consumer at the end of consumer performance test.",
  "f1c6e97d": "KAFKA-1498 Misc. producer performance enhancements. Patch from Guozhang.",
  "0bd4c87f": "kafka-1409; oversized messages can slow down the brokers; patched by Guozhang Wang; reviewed by Neha Narkhede, Jun Rao",
  "c66e4d58": "kafka-1091; full topic list can be read from metadata cache in the broker instead of ZK; patched by Jun Rao; reviewed by Joel Koshy, Guozhang Wang, Swapnil Ghike, and Neha Narkhede",
  "756be536": "KAFKA-849 Bug in controller's startup/failover logic fails to update in memory leader and isr cache causing other state changes to work incorrectly; reviewed by Jun Rao and Swapnil Ghike",
  "6e05d7da": "kafka-832; 0.8 Consumer prevents rebalance if consumer thread is blocked or slow; patched by Jun Rao; reviewed by Neha Narkhede",
  "d925b157": "KAFKA-734 Migration tool needs a revamp, it was poorly written and has many performance bugs; reviewed by Jun Rao",
  "60d0587e": "KAFKA-545 Add some log performance tests.",
  "a1698e2b": "Reverting KAFKA-42 since it accidentally contained changes to metrics package. Didn't catch it due to a stale sbt cache. It is better to redo the patch and then commit",
  "2a59ad76": "Minor fix: Turning on TCP NODELAY in the Simple Consumer. This fix has a significant impact on single fetch request performance from a latency standpoint",
  "4cdc982e": "Producer performance tool should use the new blocking async producer instead of the sleep timeout hack; KAFKA-118; patched by nehanarkhede; reviewed by junrao"
}, "kafka-ui": {
  "578468d": "Consumer groups loading performance impr (#3188)",
  "61ac1d9": "[UI] Do not cache serdes endpoint results on frontend (#2814)",
  "34db4cc": "Bump actions/cache from 2 to 3.0.1 (#1795)",
  "3f0693b": "fixed problem with performance of cluster name in left side (#1635)",
  "43a0e38": "Metrics & cache refactoring (#1036)",
  "4339841": "Changed consumer groups request logic for better performance (#965)",
  "4dce582": "[API] Remove fastify"
}, "karate": {
  "37e8aad": "improve HTML report loading performance",
  "c28b593": "Merge pull request #2179 from karatelabs/dependabot/github_actions/actions/cache-3",
  "d4fa111": "Bump actions/cache from 2 to 3",
  "329aa69": "add way to de-dupe callSingle cache when re-using same feature #2152",
  "06b3f46": "[no ci] for now dont cache static resources for mock server by default",
  "61d64ff": "[no ci] comment out slow test for local env",
  "d8434d0": "remove slow tests for now and fix prev commit #2059",
  "6101d79": "skip slow tests for local demos",
  "9445a2d": "html templating - rename cache buster attribute",
  "1687d59": "html templating - auto cache buster for static resources",
  "7313abf": "somewhat painful upgrade of de.siegmar:fastcsv",
  "7fb8904": "complete implementation of #1622 configure key is shortened to pauseIfNotPerf callonce cache for perf now is across jvm not just feature",
  "56e4749": "cache-control for http server static resources",
  "3afcec8": "part 7 - more thinking and optimization #1515 dont un-necessarily attach for callonce now we dont need the extra synchronize for callsingle",
  "7a4ad70": "part 5 - after more investigation a deep clone is needed #1515 when we re-attach a callSingle result into the context explanation: when we detach, we just patch any js functions and replace them with JsFunction but we leave parent maps and lists as it which means when we attach and update existing object references - the cache gets corrupted the next time we try an attach we will encounter a stale graal value etc where we expected a JsFunction solution is to deep-clone when we attach and this should be required only for a callSingle",
  "4bac49c": "part 4 - make sure callSingle() runs thread-safe for entire routine #1515 and also make sure that cached result if an exception is detached from the js engine",
  "1f277e7": "Changed log level from `warn` to `debug` for `over-writing existing variable '{}' with new value: {}` since it's not really a warning and it increases the log size especially when executing performance test where we only want to check for actionable warnings",
  "fbfbcf3": "ref #1480 call within mock was failing the reason was because for the temp-use-runtime the suite hooks was null but now changed to an empty collection to avoid the npe also discovered an optimization in file-resource code and also improved cli to load a logback.xml from working folder if exists ref #1471",
  "2a58d4d": "some cleanup and js function optimization finally: comments allowed in js files on the first line",
  "2989fe7": "replaced old html report for feature results with new engine using a single graal instamce per report else there is a significant performance impact will have to investigate if the http server templating can use the same optimization but right now 2 code paths, todo cleanup",
  "ad6b803": "simplified code instead of premature optimization unbounded queue for job-manager and no semaphore for parallel processor",
  "22cfb43": "fortunately realized that for gatling / perf we needed the suite-level cache to be a singleton for the entire run, else call-single would not work as expected the refactored code was creating a new suite for each feature spawned by gatling now we ensure that each new suite re-uses the same global-cache map instance",
  "136a329": "decided that using an extra file for call-results for the sake of memory optimization - is overkill, a call will tend to aggregate result data anyway so undo prev commit for #1394",
  "03ed562": "memory usage optimization refer #1394 and #1245 we now serialize results off-heap to files and we no longer accumulate data in memory",
  "4f86248": "#1409 - fix Karate mock server slow to start up under certain circumstances",
  "77a1567": "attempt to not use maven cache ref #1403",
  "6e2361e": "if call-single fails, the exception is cached #1375 instead of re-trying, also managed to make error reporting cleaner and config js failures are going to be very clear in the html report + log",
  "1745cb1": "slowly building the ultimate ui regression test suite",
  "80a210f": "[rewrite] resource and loading from classpath redone: #751 #1281 now using the io.github.classgraph lib, for performance we try to use the default classloader but now we should be able to load from jars and other non-file locations",
  "b8c1427": "[rewrite] #1281 important optimization of js engine",
  "927e5b2": "[gatling] finally found way to increase thread limits ref #564 see doc / readme edits for details so now we know how to tweak the akka / actor system defaults which is a breakthrough also added an optimization, the [pause] actor can be a singleton that just swallows messages since the actual pause work is done by the await exception handling hack",
  "bf4c34a": "[ui] perf optimization for getting method names via reflection fixed broken highlightAll() highlight will no use default time of 3 sec but when within a test run with highlight enabled will use the configured highlight duration",
  "52c8c3b": "[ui] add one more convenience method to slow key-input per char #1137",
  "6f79483": "[ui] implemented slow-motion mode with highlight #1121",
  "f527158": "[breaking] karate.stop() now takes mandatory port number arg #1121 this solves an ask to be able to slow down api test execution just slip this into a configure header function",
  "d75b9cd": "wip - introducing [karate-robot] karate-robot is an attempt to build the following cross-platform capabilities into karate a) native mouse events b) native keyboard events c) desktop image capture d) image matching we have the basics in place for mac, linux and windows decided to use the javacpp presets for opencv https://github.com/bytedeco/javacpp-presets/tree/master/opencv also the [karate-chrome] docker image has been revamped - now includes an x-windows manager (fluxbox) and is compatible with [karate-robot] note that opencv on windows seems to be slow to startup / load the dll-s and may need investigation otherwise we have the foundation in place to be able to use images to locate areas on the screen and navigate todo: improve the robot api and add a configure option similar to karate driver (now branded as karate ui) which will inject a [robot] object and helpers similar to how [driver] works today for karate ui",
  "2151c4a": "ci mvn cache, and goodbye karate-ui",
  "5c5add5": "debug server proper optimization of netty decoder",
  "bbc633d": "web ui automation improvements big performance boost because of stupid wait logic chrome native made more robust on first page load improved driver.screenshot() api to auto-embed the image into html report",
  "f09470f": "implemented karate.sizeOf() keysOf() and valuesOf() and also implemented karate.appendTo(name, ...val) where name is a context variable name that should exist and be list-like one important change in this commit is the removal of the internal JS function that karate.read() used to use and was discovered to be un-necessary since we can use a java Function<> instead does seem to add a little performance boost",
  "5d5b0f0": "karate.toJson() implemented, karate can do java unit testing there are many reasons why this makes sense, all you need to do is convert json to java (and back) and suddenly all the match assertion goodness of karate becomes very very relevant and keep in mind that scenarios will run in parallel and karate makes data-driven testing easy and readable performance testing is also going to make things very interesting",
  "0549e9d": "cleanup for #787 looking good simplified script-value greatly and reduced dependency on nashorn a little more slight performance optimization for checking if list or map for json",
  "8c8c295": "always create new stream for jar resources re-use of stream failed miserably, now we cache the bytes and I think this should be it also found a engine port bug where java api would not throw error on feature failure",
  "e34c7b6": "*phew* who knew getting parallel execution would be so hard realized we needed a second executor / thread pool for scenarios else the features queue would slow it down and made sure that running a single feature would still have scenarios in parallel",
  "03b7dfc": "one of the most satisfying commits because of how the gatling scala part got super-cleaned up and this sets us up for being able to performance test anything that can be scripted in karate got this idea after seeing the gRPC sample surface today this commit can be considered refactoring ref #526",
  "14727be": "introduced responseBytes and requestBytes built-in variables this should boost performance of the client side a little as previously we were always doing a byte-array comparison to check if it was non-string content - now it is up to the user to handle, and we don't auto-magic with this, the server-side can handle binary and file-uploads which was missing until now one more thing, there was a bug where any non-json or non-xml request-body would crash the netty / server-side, fixed",
  "2d845d5": "big refactoring part 2 - fixing the badly named script-env now called feature-context which makes much more sense, hope the call-context can also be merged into this and will investigate. also tightened up call-cache into feature-context we probably need a suite-context to represent the environment when the test was kicked off, todo",
  "fdecd3b": "add akka actor optimization ref #438",
  "1b28704": "completed mock / cdc example with async lots of pain with queues - convinced of the need to make async simpler if you run into flaky builds, the purgeMessages util may need a higher wait time build became 15 seconds slower which is bad, but will keep this way until asyn stabilizes to summarize - we have the test-double able to work with activemq messages",
  "671b812": "one more optimization, reuse vars map even when creating the simplified / primitive version for out-of-karate data returning etc",
  "68170c6": "more perf tuning - we are more than 56% faster than before ! bindings more optimized, function calls do not re-init bridge much more elegant init of file read function eval that does not need self/root/parent more optimized, no map clear() needed",
  "cd32100": "further optimization, singleton nashorn for everything going by the build time, this improved performance further. certainly will have memory savings",
  "7cfe4d7": "performance optimization for js script engine eval js engine is now inited only once per scenario not for every expression ! an additional optimization using a global singleton for js eval without variable bindings custom implementation of nashorn bindings to delegate to vars not needing to spawn hashmaps for every eval pretty significant perf boost seen with timed loop run of syntax-test not measured but certain improvement in memory utilization to be sure",
  "2815596": "added missing optimization in new tag resolution routine",
  "5741724": "eval optimization for var references, doc if an rhs / expression is clearly a var reference, don't evaluate it this actually avoids un-intended conversion of xml to a map added example for reading files, as this is a freq asked question doc proof-reading / fixes also in this commit",
  "7ac2b7c": "wip called features should contribute to report somewhat of a hack and for now only inserts steps in-line, no formatting for background or outlines also the stopwatch timing is not right, seemed to be a little slower also overall if anyone is reading this, please do try validate and suggest improvements :P",
  "eb68468": "callonce fixed to span scenarios the call cache has to take the http-config also into account, meaning that headers and cookies can be adjusted by called scripts. since the context is re-set for every scenario, this was tricky to implement",
  "b8ce113": "mock-http prod-ready and working fully for spring-boot demo some work went into solving url-encoded form-field parameters and multi-part the great thing is that this approach is generic for ANY servlet I like the fact that the spring-context bootstrap for the mvc controllers is via first-principles and not resorting to any spring-boot autoconfigure black-magic simplified api for users, only extend mock-http-client and implement getServlet() and getServletContext() in the spring-boot mock-http example, the context is cached, users have full control",
  "3d267cf": "moved dummy-http-client into test, better to fail-fast"
}, "keepass2android": {
  "58b0b66": "github workflow: restore download of xamarin.android only if it isn't in cache",
  "3c9a834": "github workflow: use gradle/gradle-build-action@v2 to manage gradle cache",
  "14c2e64": "disable gradle cache",
  "3483654": "github workflow: make use of caches for nuget, gradle & xamarin",
  "349f6c7": "fix potential crash when opening from internal cache, closes #1179",
  "c36d252": "Merge pull request #872 from yan12125/argon2-performance",
  "e7e0b91": "fix potential crash when changing offline cache preference",
  "cd189e0": "use internal directory for offline caching. this reduces the likelihood of data loss. Users need to disable and then re-enable file caching to make sure all files are cached in the new directory. closes #83 https://github.com/PhilippC/keepass2android/issues/83",
  "0741bcb": "keep caching setting enabled if user denies deletion of cache, as noted in https://github.com/PhilippC/keepass2android/issues/86#issuecomment-344752673 (see #86)",
  "7c36e29": "PluginHost: Introduced internal access token which can be used by internal modules if they want to send broadcasts 'as a plugin' (this token always exists and does not have to be granted by the user) + TOTP support (TrayTotp and KeeOTP) (not released as a plugin because there is no additional permission; overload for users which don't use this is small (only some prefs); implemented with tighter coupling (instead of a broadcast receiver 'plugin like') to avoid performance penalties for every opened entry) App: reset LastOpenedEntry so that TOTP module knows when entry is no longer open Using CryptRNG for token generation",
  "d1cc470": "removed compat library for faster building",
  "736bbd5": "android-licenses crowdin.yml docs graphics license.md Makefile src show toast for cache messages in the center of the screen to avoid hiding the keyboard when entering passwords android-licenses crowdin.yml docs graphics license.md Makefile src Bug fix with FTP access android-licenses crowdin.yml docs graphics license.md Makefile src Bug fix with Group editing/adding android-licenses crowdin.yml docs graphics license.md Makefile src Integrated Input Language Selection for keyboard -> 0.9.3-r3",
  "5619432": "bug fix: prepareFileUsage didn't work when file was cached but device offline",
  "a44e8a9": "android-licenses crowdin.yml docs graphics license.md Makefile src added options to exclude libraries for faster build times (DEBUG only) android-licenses crowdin.yml docs graphics license.md Makefile src implemented getFileEntry to get information about a single file android-licenses crowdin.yml docs graphics license.md Makefile src password activity is launched automatically if there are recent files",
  "289e10e": "Added tests and functionality to ensure that caching and syncing works when the remote file is removed. Added UI strings for sync and cache functionality",
  "f0dfdef": "Load Database task async wait moved to LoadDb runnable rather than blocking UI thread (in case the file is very slow, or the user is very quick to enter their password)",
  "c0520c0": "+ SynchronizeCachedDatabase.cs: Synchronizes the local cache with the remote file. Applies merging if necessary. + Tests (not yet complete)",
  "3cfb2c1": "First implementation of CachingFileStorage + some tests to test loading and saving to cached storage",
  "7e8e261": "Remove spaces from filename before saving to cache",
  "5ca110f": "Support for native key transformation based on the method of Keepassdroid (performance improvement)"
}, "kestra": {
  "cf55b07": "chore(core): small perf optimization and code improvements",
  "3e08b16": "feat(ui): editor plugin doc must be always visible and cached (#1087)",
  "0d02517": "feat(jdbc): improve postgres performance (#1012)",
  "a01540a": "fix(core): use a cached thread pool for worker to reduce memory usage",
  "00ce27d": "feat(runner-kafka): performance optimization of KafkaFlowListeners",
  "9bd50b9": "feat(core): add a default lru cache on pebble template",
  "2a080bb": "fix(core): fix performance issue on scheduler with hundreds of flows with triggers (#255)",
  "58c81cc": "feat(ui): optimize gantt performance on realtime (#243)",
  "4fcb4d1": "chore(build): have a better gradle cache on ui",
  "59e3590": "fix(core): remove scheduler cache on any flow changes",
  "f655bad": "test(core): replace fail fast ThreadUncaughtExceptionHandlers in unit test in order to keep retry feature",
  "3db80ad": "feat(core): add a fail fast for all thread pool"
}, "keycloak": {
  "abd75a78": "Enable simple-cache for local-cache",
  "2672c47b": "Docs note about manually delete themes cache closes #19675",
  "5e7793b6": "Unexpected invalid_grant error on offline session refresh when client session is not in the cache",
  "9c2511e2": "Store index data in memory instead of persistent store to make it consistent with cached data",
  "e9e6b73b": "Avoid using Hibernate APIs to cache query results as the API changes in Hibernate 6",
  "c587a894": "Small optimization for better performance (#4036)",
  "fb554c09": "Incrementally cache consents on a per client basis",
  "f32e012c": "Make it possible to set a custom user and cache providers when using legacy store",
  "bd4acfe4": "Removing testsuite/performance from main Keycloak repository (#15950)",
  "556146f9": "Fix performance issues with many offline sessions",
  "43a3677c": "Fix slow deletion on `deleteClientSessionsByRealm` and `deleteClientSessionsByUser` when using mysql and mariadb by converting sub-query to join",
  "621da7b8": "Credential validation shouldn't invalidate the user in the cache",
  "27ecf7f0": "Use session level cache and avoid resolving by ID too often",
  "2cc4b544": "Do not cache policies if they no longer exist (#12797)",
  "e6686bf4": "faster maven execution (#3142)",
  "15bbb466": "Avoid removing static path config from cache",
  "8c151ce4": "made role mapping a lot faster and removed duplicates dialogs (#3094)",
  "a5dd9e98": "Improving clustering guide and more information about cache-stack and custom stacks",
  "8aecba17": "Fixing how realm frontendurl is cached when resolving the hostname",
  "0c3aa597": "JPA map storage: test failures after cache was disabled",
  "016c28e7": "Added a hint to the --cache-config-file config option that you not need to specify the configuration folder",
  "52488150": "Disable infinispan realm and user cache for map storage tests",
  "fe9347c9": "Use the setup-java action cache option",
  "0dd9cacd": "Adds tests for LDAP provider advanced and cache settings (#2338)",
  "03927cda": "Run Cypress tests in parallel to optimize performance (#2433)",
  "235f0f39": "Add index to admin events table to improve performance of admin event view",
  "2394855f": "Add merge tasks optimization to ConcurrentHashMapKeycloakTransaction.delete",
  "f569db2e": "Update kubernetes cache-stack documentation",
  "722ce950": "Improve user search performance",
  "82300ba7": "Failing to use cache remote-stores due to missing dependencies",
  "bf0f3d60": "[fixes #9052] - Renaming cluster options to cache",
  "48835576": "[KEYCLOAK-19885] - Parallelize cache manager init",
  "8d1c3bbe": "KEYCLOAK-19076 Entrypoint of Keycloak Docker Image that's used in performance tests is not executable for jboss user",
  "740c267a": "Downgrade Cypress to resolve performance issues (#1380)",
  "47484c1a": "KEYCLOAK-18842: deleteExpiredClientSessions very slow on MariaDB",
  "333f77a0": "KEYCLOAK-18518 Add expiration lifespan configuration to every distributed and replicated cache",
  "d1ea86ac": "Optimize performance of Cypress tests on CI (#809)",
  "cbd42882": "[KEYCLOAK-17254] Adaptively add the default modular JVM options to the 'javaVmArguments' to start the cache server container with, if the JVM used to run the cache server is modular (JDK 9+)",
  "ee315eca": "KEYCLOAK-17934 adapters ADOPTERS.md authz boms common CONTRIBUTING.md core crypto dependencies distribution docs examples federation get-version.sh GOVERNANCE.md integration js LICENSE.txt MAINTAINERS.md maven-settings.xml misc model mvnw mvnw.cmd operator pom.xml PR-CHECKLIST.md prod-arguments.json quarkus README.md rest saml-core saml-core-api server-spi server-spi-private services set-version.sh testsuite themes util fixed cache inconsistency when cache limit is exceeded",
  "32fb45eb": "KEYCLOAK-17774 Implement equals method for work cache events",
  "df4f88a0": "KEYCLOAK-17869 Fix non-existent work cache configuration",
  "60fac7c3": "forcing cache encoding to avoid unnecessary byte[] conversions",
  "f4b5942c": "KEYCLOAK-16755 ClearExpiredUserSessions optimization. Rely on infinispan expiration rather than Keycloak own background task.",
  "6da39682": "KEYCLOAK-17014 Searching all users from admin console is very slow",
  "99a70267": "KEYCLOAK-16801 Improve performance of ClearExpiredEvents background task",
  "03e7ec76": "Show/hide Kerberos cache policy related controls (#267)",
  "ff43970e": "User Federation: populate Kerberos required and cache settings data (#243)",
  "74b5143c": "KEYCLOAK-15498 Disable gzip encoding when themes are not cached",
  "66dfa32c": "KEYCLOAK-14302 Fix the setting of the lifespan for cache entries. This bug caused that jobs were no longer executed after temporary network partition in multinode setup, because the cluster based locks used for the coordination were never released.",
  "76f7fbb9": "KEYCLOAK-14548 Add support for cached gzip encoding of resources",
  "a4277843": "KEYCLOAK-14996 Fix performance bottleneck in GroupLDAPStorageMapper.getAllKcGroups",
  "8f537f70": "Fix path-cache lifespan of policy-enforcer",
  "c7867c4c": "KEYCLOAK-14875 Enable path cache when maxAge is -1, or greater than 0",
  "3631618b": "[KEYCLOAK-14646] - Changing cacheQuery",
  "ec61c45d": "KEYCLOAK-4593: Moved NamedQuery to entity attribute to improve performance",
  "10cdc581": "KEYCLOAK-11683 Reduce unnecessary load on work cache",
  "086bdd17": "add optional field at_hash to idToken when using Authorization Code flow since it improves performance and allows to follow the recommandation in RFC for clients to use hash for access_token validation",
  "aa27bb59": "KEYCLOAK-14225 Performance testsuite DataLoader broken - removing hardcoded `jackson.version` from performance testsuite pom - moving `jackson.annotations.version` from performance testsuite pom to the root pom",
  "32911619": "KEYCLOAK-13818: Addressing performance issues with adding client scopes during realm creation. Removing redundant lookups by passing all scopes that need to be created at once.",
  "601bf8d6": "[KEYCLOAK-12735] - Improving queries and cache for authz",
  "fd9c4e92": "[KEYCLOAK-12097] Fix NPE when trying to obtain the cache container name from jboss-web.xml - check if the cache name as configured in jboss-web.xml is composite - i.e. has a 'parent.child' structure",
  "75acc277": "KEYCLOAK-13339 NPE when removing credentials and user cache is disabled",
  "9e470221": "KEYCLOAK-8044 Clear theme caches on hot-deploy",
  "06576a44": "KEYCLOAK-13032 Add no cache headers to account form service",
  "a506115a": "KEYCLOAK-12838 DatasetLoader in performance swallows exceptions (#6708)",
  "199e5dfa": "[KEYCLOAK-12909] - Keycloak uses embedded cache manager instead of container-managed one",
  "aa44579a": "KEYCLOAK-9553 Performance optimization on role mappings retrieval.",
  "b6ee3427": "KEYCLOAK-4593 Flush and clear when fetching multiple realms for performance improvement with large number of realms",
  "434ea096": "KEYCLOAK-11632 Don't cache server info endpoint",
  "3b58692d": "KEYCLOAK-11596 Enable template cache when cacheTemplates attribute is true",
  "c2b7b8f0": "Update cache.adoc",
  "fe18e93b": "KEYCLOAK-10904 ExportImportTest unstable - adding an exception for realm-management clients into the client confidentiality check - fixing some performance test datasets to only enable authz for confidential clients",
  "ceaae7a2": "[KEYCLOAK-10384] Add equals and hashCode to KeycloakUndertowAccount, SamlPrincipal and SamlSession to avoid cache misses in the PicketBox JAAS auth manager",
  "72d6ac51": "User password cache is not refreshed after updating the user with hashed credential",
  "c80531df": "KEYCLOAK-9847 Checking user cache for being not null before using it",
  "49a86865": "KEYCLOAK-8869 JStat monitoring for performance tests",
  "8dc375d7": "Update cache.adoc",
  "f5425f91": "KEYCLOAK-8632 Configuration of keycloak server in performance testsuite fails",
  "460cdf45": "[KEYCLOAK-8617] - Permission cache not handling decisions from negative policies correctly",
  "f3796d2e": "[KEYCLOAK-8452] Return the definition of the 'keycloak' cache-container into the infinispan subsystem",
  "fdc98827": "[KEYCLOAK-8101] Return just cached deployment to prevent NPE",
  "f36e45cb": "[KEYCLOAK-4902] - Using streams to process scopes and cache improvements",
  "f1c59d62": "Update cache.adoc",
  "c64ecb1a": "Remove expired objects from cache cluster instead of local only",
  "2b14469a": "KEYCLOAK-7056 Support SSL in performance testsuite",
  "2be6dec2": "KEYCLOAK-7064 Ability to run performance testsuite with different server versions",
  "c967361c": "[KEYCLOAK-7029] - Configuration of cache policies for cached resources/path",
  "a939c45d": "[KEYCLOAK-7029] - Configuration of cache policies for cached resources/path",
  "05dcc6e3": "KEYCLOAK-6783 JDG-auth optimizations",
  "dabf4e8b": "KEYCLOAK-6165 Ability to load performance provisioning and test parameters from a properties file",
  "cb531056": "[KEYCLOAK-6621] - Fixing cache and queries of policies with type scope",
  "eea6eb62": "KEYCLOAK-6664 Fix performance testsuite shell scripts to run on macOS",
  "548ab4f7": "KEYCLOAK-6514 Common approach to writing performance tests",
  "72199cc0": "KEYCLOAK-6582 Specify exact version of MariaDB server in the performance tests",
  "62a9d4ea": "KEYCLOAK-5807 Under daily eviction policy user entries not returned from cache when they should",
  "3873ab81": "KEYCLOAK-6288 Add support for 'sar' metrics for docker-based performance testing",
  "5758c7e1": "KEYCLOAK-6138 Allow to customize version of the KC server artifact used in performance tests",
  "0f047ac9": "KEYCLOAK-6067 Allow http for performance testsuite realms",
  "ae573f48": "KEYCLOAK-5617 KEYCLOAK-5993 Race condition putting new user in user cache",
  "03e43f89": "KEYCLOAK-5966 Adjust defaults for performance testsuite provisioning",
  "b4532ec6": "KEYCLOAK-5964 Fix keycloak-install-base.cli client session caches",
  "b466f4d0": "KEYCLOAK-5910 Retry sending notification when remote cache is unavailable",
  "83136c1b": "KEYCLOAK-5897 Support for multiple provisioning options in performance testsuite",
  "c4a17648": "KEYCLOAK-5836 More logging around LDAP performance. Added LdapManyObjectsInitializerCommand to easily add many users and groups to the LDAP",
  "c530a061": "KEYCLOAK-5828 Ensure sessions preloading works for remote distributed caches as well",
  "5f889dd3": "KEYCLOAK-5746 Bad label for evictionDay in admin console in EVICT_WEEKLY cache policy",
  "9a19e95b": "KEYCLOAK-5710 Change cache-server to use backups based caches",
  "f5ff24cc": "KEYCLOAK-5371 Fix SessionExpirationCrossDCTest, Added ExecutorsProvider. Debug support for cache-servers in tests",
  "c4adf680": "KEYCLOAK-5576 Add export dump flag to performance testsuite pom.xml",
  "89fade7a": "KEYCLOAK-5624 Rename import-data to generate-data in performance TS",
  "3b6e1f4e": "KEYCLOAK-5007 Used single-use cache for tracke OAuth code. OAuth code changed to be encrypted and signed JWT",
  "d6f202e2": "Merge pull request #4485 from tkyjovsk/performance-testing",
  "ca92bcbf": "KEYCLOAK-5480 Cross-DC setup: Remote cache stores are connecting to Infinispan servers in both datacenters",
  "e907da77": "KEYCLOAK 2538 - UI group pagination - Remove junit mocked TUs, add arquillian Tests, delete mockito from poms, fix groups sorting when get result from cache",
  "c1664478": "KEYCLOAK-4858: Slow query performance for client with large data volume - Changing RESOURCE_SERVER PK to the client ID. - Changing FK on children of RESOURCE_SERVER. - Use direct fetch of ResourceServer through ID/PK to avoid a lot of implicit Hibernate flush.",
  "9ed5fc55": "[KEYCLOAK-5389] - Invalidating ResourceStore.findByUri cache when creating new resources",
  "68195764": "KEYCLOAK-4288, KEYCLOAK-5344 Documentation for SAML application cache",
  "18da4328": "Fix note in cache clear section",
  "3ff38e22": "[KEYCLOAK-4639] - Invalidating resource query by owner cache",
  "6865b4bb": "[KEYCLOAK-4808] - Import large authz settings a bit faster",
  "9a9f4137": "KEYCLOAK-4556 KEYCLOAK-5022 Only cache keycloak.js and iframe if specific version is requested (#4289)",
  "4367f033": "Merge pull request #4254 from hmlnarik/KEYCLOAK-5030-Action-Tokens-do-not-initialize-invalidation-cache-on-start",
  "955cbc76": "KEYCLOAK-5030 Change action tokens cache type to distributed",
  "93d57c7d": "Merge pull request #4236 from CoreFiling/js-policy-performance",
  "2e2d15be": "KEYCLOAK-4189 Infinispan cache and channel statistics for Cross-DC-testing",
  "5d72def1": "KEYCLOAK-4189 add possibility to use jdg as cache server",
  "473065fd": "[KEYCLOAK-5051] - Invalidate authz cache when realm cache is cleared",
  "2b55cd79": "Merge pull request #4213 from pedroigor/cache-fixes",
  "84d2d7b4": "Missing invalidation for some queries cache",
  "e59aeb56": "KEYCLOAK-3990: Very slow use of NamedQueries. - Generates too many auto-flush checks by Hibernate. - Moved to collections mapping to allow batching and the use of Hibernate L2 cache.",
  "0b6c9aa9": "KEYCLOAK-4723 Refactor service dependencies for caches in KeycloakServerDeploymentProcessor",
  "d824b4d9": "Changing cache key for findByResource",
  "7569493b": "Invalidating cache for findByowner",
  "cc6a5419": "KEYCLOAK-4827 Add tests for concurrent use of user session in cache",
  "b8262a9f": "KEYCLOAK-4628 Single-use cache + its functionality incorporated into reset password token. Utilize single-use cache for relevant actions in execute-actions token",
  "978619ea": "[KEYCLOAK-4867] - Missing cache config in server overlay",
  "e622ea1e": "KEYCLOAK-4702 Use service dependency on jndi entry for caches",
  "f6786e29": "[KEYCLOAK-4602] - A runtime cache for path configurations",
  "9a6f202c": "KEYCLOAK-4137 Significant performance lag in 'get client role by role name'",
  "666165d3": "KEYCLOAK-4151 Migration guide is missing changes required to caches",
  "7eeebff8": "Merge pull request #3720 from hmlnarik/KEYCLOAK-4091-Possible-NullPointerExceptions-with-disabled-cache",
  "377fbced": "KEYCLOAK-4091 Prevent NPE with disabled cache",
  "862502f3": "KEYCLOAK-4148 StringUtils property replacer optimization",
  "663b99d8": "KEYCLOAK-4127 Temporarily disable cache for authorization services as it breaks clustering",
  "c9c8acd0": "[KEYCLOAK-4034] - Invalidating policy cache when creating resources and scopes",
  "5cf51687": "[KEYCLOAK-4034] - Improvements to UI, performance and some code cleanup",
  "c9c9f05e": "[KEYCLOAK-4034] - Improvements to UI, performance and some code cleanup",
  "bbe7a2cd": "KEYCLOAK-4032: Realms cache is not unbounded anymore by default. - Updated configuration examples. - Adjusted alignment between non-clustered and clustered examples. - Added mention of the revisions cache. - Removed the hint about removing an eviction policy as it could affect the implicit revisions cache in a non-expected way.",
  "32c23c24": "KEYCLOAK-4002: realmRevisions cache too small with high number of realms. - Increased the hardcoded default value to help running master with high number of realms. - Added a value computation based on the realms cache max size (to match the userRevisions cache configuration pattern). - Computed revisions cache size is now 2 times the configured maximum cache size. - Added a maximum realms cache size configuration to the different standalone.xml templates. - Added a missing users cache size configuration to standalone.xsl.",
  "5d4864b8": "Merge pull request #3590 from tkyjovsk/performance-tests",
  "2eba8201": "KEYCLOAK-3824 Note about public-key-cache-ttl adapter option",
  "a3854479": "KEYCLOAK-3823 KEYCLOAK-3824 Added public-key-cache-ttl for OIDC adapters. Invalidate cache when notBefore sent",
  "5ecc8d1c": "KEYCLOAK-4006 Fix performance drop caused by changes to client session codes",
  "6fa50448": "KEYCLOAK-4003: Slow Infinispan RoleAdapter.hasRole() call. - Added a session/query cache for the result getComposites() to avoid always hitting the Infinispan cache. - KeycloakModelUtils doesn't rely anymore on a 'visited' set as performance seems good without it. - Added test for multiple levels of composite roles. Only one level was covered.",
  "9bb59c0f": "Merge pull request #3496 from tkyjovsk/performance-tests",
  "4910b35d": "KEYCLOAK-3989: Replacing COMPOSITE_ROLE Collection with Set. - Hibernate optimization that avoids deleting/re-inserting all composite roles when adding/removing a composite.",
  "78efd18c": "KEYCLOAK-3825 Update about cache docs",
  "58f6e752": "KEYCLOAK-3825 Update about cache docs",
  "7c6032cc": "KEYCLOAK-3825 Ability to expire publicKeys cache. Migrated OIDCBrokerWithSignatureTest to new testsuite",
  "5ac4a852": "Updated performance tests. Added app-profile-jee test application (from qs) to the testsuite.",
  "c535b97a": "KEYCLOAK-3857 Document cache changes",
  "476239fb": "KEYCLOAK-3857 Migration for infinispan caches",
  "a27be0ce": "KEYCLOAK-3857 Clustered invalidation cache fixes and refactoring. Support for cross-DC for invalidation caches.",
  "4bf5da8f": "Merge pull request #3371 from brewers/bug/cache-dynamic-resource",
  "3fec344f": "finish cache policy",
  "f8a78d55": "finish cache policy",
  "3e28ac1e": "user spi cache policy",
  "36c2422f": "realm cache event",
  "2bba6af6": "Include programmatically created resources in the resource cache",
  "bfe10e34": "[KEYCLOAK-3390] - Updating authorization objects doesn't invalidate cache in cluster",
  "1b9fe8ed": "Remove old performance testsuite",
  "c37f1c24": "Merge pull request #2900 from tkyjovsk/performance-tests",
  "ef95510d": "Updates to the performance tests.",
  "a271d74b": "keys, ssl, caches",
  "f45ef1ef": "cache",
  "6ace795d": "cache",
  "a44add29": "Merge pull request #2646 from tkyjovsk/performance-tests",
  "92d9808c": "Added module 'adapters/jboss/remote' with performance tests.",
  "7cea4f66": "KEYCLOAK-2652 Added fasterxml modules to as7 adapter dist",
  "f83b67cd": "KEYCLOAK-2413 Very slow export/import of realms with large users count",
  "50f8846c": "KEYCLOAK-2610 Improve performance of creating users with MySQL",
  "018b104c": "KEYCLOAK-2612 Set default eviction strategy for users cache",
  "82ad2618": "refactor user cache",
  "cd299c99": "refactor cache",
  "a27fd7ae": "Added workaround for KEYCLOAK-2560 to jpa-performance tests. Optional delete/reimport realm phases.",
  "6a48e000": "Check performance of multiple get calls over cluster",
  "1d882cdb": "Merge pull request #2339 from tkyjovsk/jpa-performance",
  "52f36937": "Added workaround for KEYCLOAK-2560 to jpa-performance tests. Optional delete/reimport realm phases.",
  "3c60881d": "Check performance of multiple get calls over cluster",
  "4be6dc2f": "cleanup cache",
  "d7641f88": "Merge pull request #2282 from tkyjovsk/jpa-performance",
  "aea35454": "Added simple test for JPA performance (with many users).",
  "4dcdaf49": "role cached queries",
  "838764ba": "Fix SyncFederationTest to work with MSSQL and envs with slower databases",
  "cbdf30b5": "KEYCLOAK-1678 parametrized ispn cache owners",
  "d79a7146": "fix cache",
  "aac274bb": "KEYCLOAK-2463 Fix performance issue with just 2 default connections per route in Apache HTTP client",
  "ec20c004": "KEYCLOAK-2455 Typo in cached ClientTemplateAdapter",
  "3dc090b8": "KEYCLOAK-2185 Add support to disable realm and user cache, and added support to clear caches from admin console",
  "2a8e868b": "Fix missing offlineSession local-cache config for demo-dist",
  "392ce0b3": "KEYCLOAK-2250 Infinispan offline sessions cache is missing from configuration files",
  "9a921f66": "KEYCLOAK-2043 .well-known/openid-configuration doesn't set cache-control header",
  "f45bb62f": "KEYCLOAK-2192 Class serialization issues when Realm and User caches are in ASYNC mode",
  "ee6753d3": "KEYCLOAK-1813 KEYCLOAK-2182 Fixes enable/disable cache",
  "09c18306": "KEYCLOAK-2179 Realm and user cache is invalidated when added to other nodes",
  "1eacdc69": "KEYCLOAK-2043 Set cache-control header in well-known endpoints",
  "f1af3e9f": "Exclude .lastUpdated files from Travis cache",
  "f92fe6be": "KEYCLOAK-904 Offline tokens storage changes. Added UserSessionPersisterProvider . offline sessions preloaded to cache at startup",
  "a8ad0015": "KEYCLOAK-1702 Removed mem and none realm and user cache",
  "f32b38cd": "KEYCLOAK-1702 KEYCLOAK-1703 Make Infinispan default user session and cache provider",
  "52565375": "KEYCLOAK-1476 NotSerializableException: org.keycloak.models.cache.entities.CachedClientRole - Remove noop code (Enum serialization 101 - http://docs.oracle.com/javase/6/docs/platform/serialization/spec/serial-arch.html#6469)",
  "0b0b1011": "KEYCLOAK-1476 NotSerializableException: org.keycloak.models.cache.entities.CachedClientRole",
  "fbc2b845": "KEYCLOAK-1476 NotSerializableException: org.keycloak.models.cache.entities.CachedClientRole",
  "1b0c4e5d": "KEYCLOAK-1468 Infinispan cache not available in JNDI",
  "28a50df7": "KEYCLOAK-1411 DefaultCacheUserProvider addUser returns UserModel instance which is not cached/managed by the cache",
  "b27f18c3": "KEYCLOAK-838 per-request cache in UserFederationManager",
  "553f8a6f": "KEYCLOAK-1240 Fix stale cache issue",
  "5a10bbc8": "KEYCLOAK-1017 Add server version to cached resources to prevent problems with browser cache",
  "6088fddf": "Fixed KeyCloak relative URI optimization with auth-server-url in docbook",
  "0f4953dc": "fix cached principal adapter",
  "0f252806": "KEYCLOAK-800 Ensure that loginFailures infinispan cache is defined",
  "811cfd52": "KEYCLOAK-657 Set cache-control for keycloak.js and login-iframe",
  "47f361a4": "nocache for fed provider list",
  "c17a5823": "cookie cache off",
  "705da88d": "fix cache setup",
  "b84bdcf4": "cache config",
  "f275ecf6": "cache settings",
  "69b00d85": "Merge pull request #497 from mposolda/performance",
  "e37b5613": "turn on cache",
  "6f023fca": "Merge pull request #490 from mposolda/performance",
  "de774a30": "Add classes classifier to performance-tools war, so classes can be reused in performance-web module",
  "69f7dfbb": "Added performance-web module",
  "99ce0a36": "Refactoring current performance test",
  "6291936c": "Disable cache as it's not working",
  "f0d02f24": "user cache",
  "094cf675": "user cache",
  "d1532411": "Disable cache provider for beta-3 release",
  "ab87c037": "cache 1st iteration finished",
  "8eaf77b3": "cache impl again",
  "cbea141a": "cache impl",
  "bb2ad656": "cache implement",
  "2f3c8bf0": "cache refactor",
  "5dafad71": "Set cache-control on static resources from themes",
  "441c00c0": "Basic fix of performance tests and added README. Still requires work...",
  "54dcfdee": "KEYCLOAK-146: Add delay of 500ms before showing loading screen to avoid flashing in fast requests.",
  "71cd9cff": "Rebased MongoDB on top of latest master. Divide testsuite into integration and performance submodules",
  "58d86281": "Added performance tests to testsuite to compare Picketlink+JPA+MySQL with Mongo."
}, "killbill": {
  "4270ec6": "Merge pull request #1740 from xsalefter/1615-replace_guava_cache_with_utils_cache",
  "ed2238e": "refactor to use killbill cache instead of guava's cache",
  "a178519": "Merge pull request #1722 from killbill/subscription-event-query-optimization",
  "3e9db7d": "1375 - optimizations for cancelPlan and changePlan to avoid code duplication",
  "3c00cb0": "add missing 'fast' test group",
  "9a91624": "Merge pull request #1662 from killbill/invoice-payment-prior-call-optimization",
  "3f0e1ff": "ci: disable Java cache",
  "9fd6d55": "subscription: Fix issue with code optimization during bundle transfer",
  "794b48e": "use StreamSupport instead of Guava's Iterables to count cache",
  "40ee9e4": "Merge remote-tracking branch 'origin/invoice-optimization-with-repairs' into work-for-release-0.23.x",
  "0fb791d": "Merge pull request #1613 from killbill/invoice-optimization-with-repairs",
  "5955701": "invoice: Fix issue with invoice optimization (bil run scenario) in case of repair in new invoice.",
  "9700691": "Merge pull request #1583 from killbill/ctd-optimizations",
  "585d688": "Merge pull request #1565 from killbill/billing-events-optimization",
  "bdbdcf8": "Merge pull request #1577 from killbill/billing-events-optimization-wip",
  "c2a199f": "Merge pull request #1572 from killbill/billing-events-optimization-wip",
  "99cdfad": "Merge pull request #1571 from killbill/billing-events-optimization-wip",
  "9df51cc": "Merge pull request #1566 from killbill/billing-events-optimization-wip",
  "d20365f": "junction: Code optimization",
  "c5155af": "junction, subscription: Propogate invoice optimization cutoffDt to junction",
  "1d2d6a7": "Merge pull request #1560 from killbill/invoice-optimization-tests",
  "4d32cc3": "beatrix: Add invoice optimization tests (bill run scenario)",
  "deba7f7": "payment: Fix instability in `fast` tests where we don't reset the clock",
  "092b919": "Merge pull request #1541 from killbill/invoice-optimization-fix",
  "0f9ad90": "invoice: Enhance invoice optimization to support leading pro-ration",
  "608da63": "beatrix: Add beatrix invoice optimization tests",
  "931ab4d": "beatrix: Add beatrix invoice optimization tests",
  "f53583b": "invoice: Add unit tests for invoice optimization filtering logic (in-advance)",
  "cbf9b4e": "Merge remote-tracking branch 'origin/master' into invoice-optimization-fix",
  "237185e": "Merge branch 'master' into invoice-optimization-fix",
  "6333baf": "invoice: Add unit tests for invoice optimization filtering logic",
  "f59011b": "invoice: Fix invoice optimization filtering logic",
  "9fa48f0": "util: introduce new option to disable select cache(s)",
  "5a5b630": "util: ensure DefaultSecurityApi goes through Shiro's caches",
  "653b789": "Merge pull request #1454 from killbill/optimizations",
  "309a9eb": "Merge pull request #1452 from killbill/entitlement-optimization",
  "58a89e7": "Merge pull request #1451 from killbill/junction-optimization",
  "0f07d53": "Merge pull request #1450 from killbill/large-account-optimization",
  "dd51e96": "catalog: Modify key for internal plan override cache",
  "e717304": "Merge pull request #1437 from killbill/subscription-get-optimization",
  "7d7de04": "beatrix: Add test for invoice optimization",
  "f1711c8": "Merge pull request #1420 from killbill/large-account-optimizations",
  "c51a5a2": "Merge remote-tracking branch 'origin/master' into large-account-optimizations",
  "35817dc": "jaxrs: subscription creation optimization flag",
  "873ec9d": "entitlement: performance optimization to avoid fetching blocking state in a loop",
  "c66e892": "subscription: Performance optimization (avoid extra loop)",
  "7f5792b": "invoice: Fix an issue with invoice optimization (IN_ARREAR with pro-ration)",
  "bad8e9c": "Merge pull request #3 from sbrossie/events-optimization",
  "206be8d": "Merge pull request #2 from sbrossie/events-create-subscriptions-optimization",
  "8261b7f": "Merge pull request #1 from sbrossie/events-optimization",
  "b358159": "Merge branch 'events-optimization' into events-create-subscriptions-optimization",
  "6fcd6e7": "Plug the bus dispatch optimization on all handlers",
  "ba9d4d1": "Split logic around around bus optimization between post and dispatch",
  "0277f9b": "Merge remote-tracking branch 'origin/fix-for-1408' into events-optimization",
  "8dabf16": "Add new feature killbill.features.bus.optimization to get more control on bus events",
  "94cf898": "Merge pull request #1402 from killbill/invoice-optimization",
  "fc72b4f": "Merge branch 'master' into invoice-optimization",
  "f56595a": "invoice: Rework invoice optimization logic to extract a more correct billing event.",
  "5f9a1ca": "beatrix: Add more test case for invoice optimization tests",
  "69a53c3": "beatrix: Add test cases for invoice optimization",
  "82ebf63": "invoice: Plug invoice optimization for FIXED/RECURRING use cases",
  "f6e834f": "invoice: Minor optimization in RawUsageOptimizer to aoid fetching config multiple times",
  "df32720": "invoice: small optimization in DefaultNextBillingDatePoster",
  "2db5053": "catalog: revisit previous optimizations",
  "d2ebb9d": "util: synchronize cache access",
  "47a3911": "catalog: optimize cache",
  "37ebe76": "Merge pull request #1338 from killbill/performance-fixes",
  "d25d2fe": "jaxrs: fix catalog cache corruption",
  "72de4c1": "invoice: Remove optimization to close iterator early to support data created without history in 0.20.x. See #1252",
  "63db087": "catalog: Remove change introduced in 81d8748c35 where we don't return a empty versionned catalog from the cached.",
  "801e4ce": "Merge pull request #1096 from killbill/invoice-performance-v5",
  "733c62f": "Merge pull request #1093 from killbill/invoice-performance-v4",
  "dbc5a6e": "Merge pull request #1092 from killbill/invoice-performance-v3",
  "5d4e6fe": "Merge pull request #1091 from killbill/invoice-performance-bulk-inserts",
  "77a8681": "util: remove audit caches",
  "65543af": "Merge remote-tracking branch 'origin/fix-for-deleted-change-type' into invoice-performance-bulk-inserts",
  "7af0502": "Merge branch 'work-for-release-0.21.x' into invoice-performance-bulk-inserts",
  "d62b449": "Merge pull request #1090 from killbill/invoice-performance",
  "fed310b": "catalog: don't cache catalogs in optimized mode",
  "82d7951": "Merge pull request #1057 from killbill/shiro-optimizations",
  "e48a13c": "cache: Redis integration",
  "7f18084": "cache: preparation work for distributed caching",
  "16a5486": "bypass mapping registry cache",
  "59f3437": "entitlement: revisit blocking state queries for performance",
  "adafa41": "subscription: add new immutable caches",
  "e608fd4": "subscription: DB calls optimizations",
  "f43b173": "Issue#85 - handling exemption when cache admin key not found",
  "9d9241a": "Improve CatalogShow performance on admin_tenants page #141 - change req",
  "5cb4d89": "DefaultInternalBillingApi optimizations #850 - subscriptions",
  "881c0e0": "DefaultInternalBillingApi optimizations #850 - tags",
  "d768321": "util: add logging around Ehcache state transitions",
  "6f1e6e2": "catalog: CR to swap cache invalidation to avoid race condition",
  "2128ea5": "junction: Small refactoring abd optimization for adding BlocingStates. See #744",
  "7669c16": "shiro: various optimizations",
  "8c8b2b2": "account: eagerly populate the account-immutable cache on creation",
  "6f2721c": "account: small optimization in DefaultAccountDao",
  "4f0a4c8": "util: eagerly populate caches upon entity creation",
  "d310668": "util: set TTL for audit caches",
  "8406080": "util: small optimization in EntityDaoBase",
  "5eb43e7": "Merge remote-tracking branch 'origin/master' into ehcache3-new-jars",
  "d501e9f": "catalog: Fix cache use in catalog after api update. See c9519d9fb3c9a1",
  "0d09166": "Merge remote-tracking branch 'origin/master' into ehcache3-new-jars",
  "26f2ec4": "util: add ehcache-clustered jar as runtime dependency",
  "4dc99af": "cache: make all cached objects Serializable",
  "2976c0a": "Merge remote-tracking branch 'origin/master' into ehcache3-new-jars",
  "0555ce9": "util: switch to Ehcache 3 jars",
  "520a008": "Merge branch 'ehcache3'",
  "04a9fd1": "payment: remove dependency on Ehcache",
  "102cd97": "server: remove dependency on Ehcache in TestCache",
  "6dc329f": "jaxrs: remove dependency on Ehcache",
  "2e66876": "cache: switch away from CacheLoader pattern",
  "67c3a51": "Merge branch 'invoice-optimizations'",
  "23d74cb": "Merge remote-tracking branch 'origin/master' into invoice-optimizations",
  "1f49c7f": "Merge branch 'queue-performance'",
  "9f9779f": "queue: improve performance of search APIs",
  "3c7c112": "Merge pull request #705 from killbill/pagination-optimization",
  "d82ee00": "pagination: optimizations for large datasets",
  "f8bc820": "account: add fast search option",
  "f889e74": "junction. Fixes #659 by introducing a map to cache BCD that were already computed",
  "a7b8104": "#219 - Changes and fixes suggested during code review to reuse code and improve performance",
  "bd3a5ca": "catalog: Improve StandaloneCatalogMapper performance. See #621",
  "3695ec7": "catalog: Initial refactoring for catalog data structure to address performance issues on large catalog (plans, products)",
  "4946b48": "util: cache annotations in AnnotationHierarchicalResolver",
  "9181914": "jaxrs: cache UriBuilder",
  "eb63865": "Merge pull request #605 from javier-gomez-hs/jgomez-fix-test-cache-issue",
  "2b63922": "#304 - Changing POST endpoints with DELETE - Updated how the caches are being cleared with the tenantRecordId - Removing unnecessary imports - Added Ehcache as a direct dependency in jaxrs's pom.xml - Rewrite Integration Tests to match with changes in the Resource and Client.",
  "8a9af97": "#304 - Updated method in Resource to get information about current Tenant and invalidate its respective cache - Updated Integration Test to verify the expected behavior",
  "6f006e5": "#304 - Updated invalidate cache per tenant method - Integration Tests in progress",
  "4430eda": "util: make sure default cache is bounded",
  "229be7e": "server: fix test setup with cache invalidation",
  "dff69c4": "junction: cache the catalog when computing BillingEvents",
  "1692e97": "context: cache account timezone in context",
  "7b72e7d": "util: fail fast in assertListenerStatus",
  "ecb6c2d": "Merge remote-tracking branch 'origin/shiro-performance'",
  "0123d5c": "tenant: add a new cache for when retrieving tenant by apiKey. Fixes #436",
  "01dbd19": "account: Fix regression introduced in 86379933aa486c9e81cef2ab3113a68d2dced360 (where BCD cache needs to be reset fro when we update the value)",
  "8637993": "Introduce 2 new ehcaches to take care of immutable account data and BCD (updated only once).",
  "a4e354a": "Fix MockPaymentDao, MockNonEntityDao to correclty keep track of accountRecordId and tenantrecordId for fast tests Fix broken payment tests to due the change in the validateUniqueTransactionExternalKey (where we correctly test the equality on accountRecordId)",
  "5ec9fba": "cache: use transaction handle to execute NonEntityDao queries",
  "8d8ad30": "cache: use transaction handle to execute NonEntityDao queries",
  "359c76c": "Fix MockPaymentDao, MockNonEntityDao to correclty keep track of accountRecordId and tenantrecordId for fast tests Fix broken payment tests to due the change in the validateUniqueTransactionExternalKey (where we correctly test the equality on accountRecordId)",
  "fa7f667": "Revert 'util: revisit optimization of session update query'",
  "d54fb62": "util: revisit optimization of session update query",
  "c38f51a": "Merge branch 'kares-performance' of github.com:killbill/killbill into kares-performance",
  "8012f67": "Merge branch 'kares-performance-usage' into kares-performance",
  "74b68fc": "Introduce path optimization to not fetch all usage records from the begning of time",
  "d43b36d": "Merge branch 'kares-performance' of github.com:killbill/killbill into kares-performance",
  "9619f44": "Merge branch 'kares-performance' of github.com:killbill/killbill into kares-performance",
  "a167711": "Merge remote-tracking branch 'origin/kares-performance' into kares-performance-steph",
  "d489a8b": "Merge remote-tracking branch 'origin/master' into kares-performance",
  "aed2391": "Merge remote-tracking branch 'origin/master' into kares-performance",
  "63f348d": "Merge remote-tracking branch 'origin/master' into kares-performance",
  "91d7d5d": "Add new cache to cache the (price) overridden plans on the read path",
  "cc290c6": "Merge remote-tracking branch 'origin/catalog' into kares-performance",
  "decc4b5": "Merge remote-tracking branch 'origin/master' into kares-performance",
  "04725a3": "util: update net.sf.ehcache artifact",
  "0017543": "Code review for 67a0bf666ba22acc29cff560d727196f2cb7b279 : Pertinent observation about possible race where we end up with a cache holding the old value",
  "2404e10": "Plug multi-node cache invalidation for low level tenant-kv cache Minor renaming logger -> log",
  "694f5e0": "catalog: never invalidate the cache in mono-tenant",
  "a8ef568": "overdue: use the tenantRecordId as the overdue cache key",
  "d1a1474": "catalog: use the tenantRecordId as the catalog cache key",
  "e75130b": "Rework logic to upload catalog/overdue config so that cache invalidation can occur",
  "b8dfafe": "Implement per overdue config catalog and introduce ehcache for the caching layer",
  "83b7781": "Introduce new cache record_id -> object_id (requiring a key prefixed by tablename since record_id are only unique per table) Extend ModelDao to also export (and map from database) recordId, tenantRecordId, accountRecordId Populate ALL caches straight after retrieving objects (getById), which is very optimized considering Kill Bill usage pattern Fix glitches (remove extra mappers, ..) Add test for caching layer",
  "9240f34": "Add profiling info to detect cache miss (and associated time it took to fill the cache) Remove old profiling from EntitySqlDaoWrapperInvocationHandler which was not useful",
  "b960333": "server: remove duplicate ehcache.xml",
  "48a5b45": "Set inflightQ algorithm for bus by default Fix EhCacheCacheManagerProvider to use UriAccessor to access its ehcache.xml config",
  "18a76da": "Upgrade jdbi version and modify EntitySqlDaoStringTemplate so that StringTemplateGroup are cached and as a result performance get improved.",
  "9a88fdc": "audit: initial check-in for Audit API optimizations",
  "4aad3bf": "entitlement: further BlockingStateDao optimizations",
  "737da2a": "Perf optimization when retrieving events for accounts",
  "5487aa9": "entitlement: iteration on EventsStreamBuilder speedup optimizations",
  "af4378b": ".idea: define fast and slow groups for TestNG",
  "92b131c": "cache: implement audit caches",
  "cc8f305": "osgi: fix cache pruning bug",
  "726d48d": "Add JMX statistics for ehcache",
  "dcc497c": "pom.xml: disable slow tests on Travis",
  "8a4bf73": "meter: disable cache priming in CachingTimelineDao for now",
  "ee81561": "Only run fast tests for sonatype release",
  "b7feca7": "Disable non slow test in server module for travis",
  "4610dfa": "Reversing in memory test to be run as partof fast suite",
  "d1c55ca": "pom.xml: only run fast and slow tests for now",
  "5315f47": "Add addon tests and fix some minor issues Restructure entitlement tests to use standard slow and fast groups; add by defaukt both fast and slow tests"
}, "kkFileView": {
  "f8c7ce6": "新增功能:添加更新缓存方法&force_updated_cache=true"
}, "KnowStreaming": {
  "44ea896": "fix NPE when flush logical cluster and physical cluster not in cache or not exist",
  "02d6463": "Using JsonUtils instead of fastjson"
}, "ksql": {
  "61c0050c": "docs: re-add details for statestore.cache.max.bytes config (DOCS-17063) (#9527)",
  "4486c5d8": "docs: revert statestore.cache.max.bytes config (DOCS-17063) (#9526)",
  "979d4a53": "fix: shared runtimes calculate cache size for validation properly (#8923)",
  "336c690f": "fix: re-order cache usage error (#8909)",
  "9b9b1964": "fix: Fixes slow streams shut down bug which made tests flaky (#7717)",
  "53d82637": "docs: draft performance best practices topic (DOCS-7488) (#7221)",
  "f3838002": "fix: fix the cache max bytes buffering check (#7181)",
  "4b3bc968": "feat: Adds ability to bypass cache for pull queries (#6891)",
  "6fedb685": "feat: bound the size of the shared buffer cache used by queries (#6797)",
  "8f84e417": "fix: Bypass window store cache when doing windowed pull queries (#6548)",
  "3e26b6d8": "fix: fixes performance regression in pull queries introduced by sessionConfig (#6451)",
  "b96d9ed6": "Topic info cache (#6366)",
  "38a6b3bf": "test: Fixes test SystemAuthenticationFunctionalTest by slowing heartbeating (#5665)",
  "50b4c1cc": "perf: Avoids logging INFO for rest-util requests, since it hurts pull query performance (#4302)",
  "f9917529": "perf: Improves pull query performance by making the default schema service a singleton (#4216)",
  "58ed39c8": "feat: add a KSQL cache for Kafka authorization validator (#4186)",
  "537d23dc": "refactor: cache transformations in PersistentQueryMetadata (#3708)",
  "0751f433": "Enable streams optimizations for KSQL queries (#2077)",
  "9ef383d0": "Disable optimizations in 5.1 (#2075)",
  "f9def083": "Wait up to three minutes (180 seconds) before giving up on brokers. Current value of 40 seconds is not enough on a slower laptop running the full stack all starting at once, causing KSQL Server to fail to start (#1843)",
  "52094a44": "Some performance enhancements to avro and json serdes (#1752)",
  "7dcb7f65": "Use correct default value of cache.max.bytes.buffering"
}, "kubernetes-client": {
  "be4aa07": "The implementation of the InputStream to ReadStream adapter can sometimes do a stack overflow when the InputStream buffer extraction on a worker thread is faster than the event-loop. We should guard against this recursion and trampoline when the reads starts to pile (8).",
  "f68cdcb": "fix #4924: small performance refinements to crud mock",
  "d6967f9": "[java-generator] performance improvementes (#4867)",
  "d3922b5": "adds a null check - the initial list can be served from cache",
  "81ef753": "fix #3969 #4222: deferring add events until cache is complete",
  "32b1302": "chore(deps): bump actions/cache from 2 to 3",
  "36206f8": "ci: E2E cache only persisted/retrieved for current run",
  "5abb335": "performance improvements",
  "d604f76": "Apply minor optimization for to decrease allocations",
  "9e057d2": "Apply minor optimization for to decrease allocations",
  "4411a52": "chore(deps): bump actions/cache from 2.1.6 to 2.1.7",
  "1a61f0c": "chore(deps): bump actions/cache from 2.1.5 to 2.1.6",
  "a28bb8c": "Update kubernetes-client/src/main/java/io/fabric8/kubernetes/client/informers/cache/SharedProcessor.java",
  "13387c7": "refactor: Persist generated model to improve IDE indexing performance",
  "adeecc2": "chore(deps): bump actions/cache from v2.1.4 to v2.1.5",
  "388c8f0": "chore(deps): bump actions/cache from v1 to v2.1.4",
  "349487c": "fix: instantiators cache needs to be class-level… :facepalm:",
  "3ae9b0f": "Merge pull request #2589 from rohanKanojia/pr/maven-cache-unique",
  "c4af089": "Merge pull request #2553 from rohanKanojia/githubaction-cache",
  "35d78de": "Merge pull request #2432 from manusa/fix/test-optimization-1",
  "c5dc134": "Merge pull request #2386 from fabric8io/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.11.2",
  "0515cb2": "Merge pull request #2038 from fabric8io/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.10.3",
  "eec48b2": "Merge pull request #1864 from fabric8io/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.10.1",
  "2bd0b7e": "Merge pull request #1824 from fabric8io/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.10.0",
  "c6cb718": "Update PodIT and DeploymentIT to run light weight images in container to run test smoothly and fast"
}, "kylin": {
  "e603ecf": "improve performance of getInstanceFromEnv",
  "9706a9d": "KYLIN-5187 Support soft affinity and local cache feature",
  "d9f112c": "KYLIN-5194, fix deleted user can login when auth cache is valid",
  "7370489": "KYLIN-4903 cache parent datasource to accelerate next layer's cuboid building",
  "95888c8": "KYLIN-4903 cache parent datasource to accelerate next layer's cuboid building (#1722)",
  "3e73e42": "KYLIN-4667 Automatically set kylin.query.cache-signature-enabled to be true when memcached is enabled (#1540)",
  "329affe": "KYLIN-4603 listjobs check cache null",
  "367fa70": "KYLIN-4608 add deletecubefast api for delete 300 cubes fast",
  "66840a9": "KYLIN-4507 Override getSocketAddress() in TCPMemcachedNodeImpl to auto detect memcached instance ip change",
  "4758564": "KYLIN-4507 Add hack file TCPMemcachedNodeImpl.java",
  "8c56af1": "KYLIN-4506 Remove unresolved memcached servers before initialize MemcachedClient",
  "b3b963b": "KYLIN-4505 Change guava cache to spring cache for user authentication",
  "5c71764": "KYLIN-4406 QueryRequestLimits limit should consider the queries hit/wait cache",
  "d554c76": "KYLIN-4903 cache parent datasource to accelerate next layer's cuboid building",
  "b428f1e": "KYLIN-4893 Optimize query performance when using shard by column",
  "a4a8480": "KYLIN-4888, Performance optimization of union query with spark engine",
  "af8c8fe": "KYLIN-4818 Refine CuboidStatisticsJob to improve performance",
  "0da41e2": "KYLIN-4746 Improve build performance by reducing the count of calling 'count()' function",
  "ff338de": "KYLIN-2971 Fix the wrong 'Realization Names' and missing 'Cuboid Ids' in logQuery when hit cache",
  "64f9169": "KYILN-4328 add cache hold the succeed jobid in job schedule",
  "5b111ed": "statement cache eviction invalidation base on time",
  "795be05": "KYLIN-4260 When using server side PreparedStatement cache, the query result are not match on TopN scenario",
  "170dd57": "KYLIN-4208 RT OLAP kylin.stream.node configure optimization support all receiver can have the same config",
  "03a2be0": "KYLIN-4108 Show slow query hit cube",
  "6f92f2a": "KYLIN-4091 support fast mode and simple mode for running CI",
  "0b38be9": "KYLIN-4081 Use absolute path instead of relative for local segment cache",
  "e5e253f": "KYLIN-4012 optimize cache in TrieDictionary/TrieDictionaryForest",
  "afe4e88": "KYLIN-4074 Exception in thread 'Memcached IO over {MemcachedConnection to ...' java.lang.NullPointerException",
  "37a1a80": "KYLIN-3933 Invalid replica set cache after status updated",
  "807a571": "KYLIN-4028 Speed up startup progress using cached dependency",
  "581299b": "Additional small performance improvements (#651)",
  "cfce8bb": "KYLIN-3994: StorageCleanupJob may delete cube id data of new built segment because of cube cache in CubeManager (#633)",
  "ee95242": "Small performance improvements",
  "f0cfdf5": "KYLIN-3959 shutdown query cache for realtime olap",
  "cc00df6": "KYLIN-2898 update LICENSE for couchbase/spymemcached",
  "5982bb7": "KYLIN-3737 refactor cache part for RDBMS",
  "af77cfa": "KYLIN-3544 refine guava cache for the recommended cuboids of cube planner",
  "684f21c": "KYLIN-3671 Improve ResourceTool and JDBCResourceStore's performance",
  "b169d2d": "KYLIN-3617 Use job's cache in job scheduler",
  "889dc50": "KYLIN-3656 Improve HLLCounter performance",
  "8e1fd97": "KYLIN-3678 CacheStateChecker may remove a cache file that under building",
  "de86ed6": "KYLIN-2898 If a distributed cache is adopted, small query results are also better to be put into the cache.",
  "7b58b16": "KYLIN-2899 Introduce segment level query cache",
  "73d0fd4": "KYLIN-2898 config memcached",
  "cd952ff": "KYLIN-2898 Introduce memcached as a distributed cache for queries",
  "6b5f961": "KYLIN-2896 remove query exception cache",
  "1fcf967": "KYLIN-2894 add trigger kylin.query.cache-signature-enabled for enabling query signature",
  "f120886": "KYLIN-2894 Query cache expiration strategy switches from manual invalidation to signature checking",
  "3bcbaa8": "KYLIN-3562, optimization the logic that updating the user when user logged in.",
  "2ab720d": "Revert 'KYLIN-3617 Use job's cache in job scheduler'",
  "fb0ea36": "KYLIN-3632 Add configuration that can switch on/off preparedStatement cache in Kylin server",
  "52307ba": "KYLIN-3617 Use job's cache in job scheduler",
  "ec10114": "KYLIN-3629 NullPointException throws when use preparedStatement cache in some case",
  "fff673f": "KYLIN-3536 PrepareStatement cache issue when there are new segments built",
  "6d2738e": "KYLIN-3522 PrepareStatement cache issue",
  "2372b96": "KYLIN-3505 Fix wrong usage of cache in DataType",
  "b4f2155": "Enable Travis CI cache to speed up CI checks",
  "0b5d255": "KYLIN-3470 Add cache for execute and execute_output to speed up list job api",
  "036e26c": "KYLIN-3414 Optimize the cleanup of project L2 cache",
  "18316ec": "KYLIN-3375 Some improvements for lookup table - build change - Fix rocksdb cache UT issue",
  "d63160d": "KYLIN-3233, fix CacheController if cacheKey has '/'.",
  "65c2315": "KYLIN-2672 Only clean necessary cache for CubeMigrationCLI",
  "4a29d92": "KYLIN-2929, speed up dump performance, write dump file to disk in lazy way",
  "03e6b8c": "KYLIN-3085 Makes sure no update on cached and shared CubeInstance",
  "b8d7987": "KYLIN-3090 Refactor to consolidate all caches and managers under KylinConfig",
  "d0ff774": "KYLIN-2944 Verify performance impact",
  "bd7cb9c": "Sleep 3 seconds before do query pushdown test in case cache not wiped",
  "2e845c2": "minor, wipe query cache when update table ACL.",
  "940aef6": "KYLIN-2783 amend clearing Cuboid cache for CubeDesc",
  "ecc0145": "Add retry in cache sync",
  "084a6fb": "Revert 'add retry strategy in cache sync'",
  "e9efa71": "Revert 'KYLIN-2858 Add retry in cache sync, code format'",
  "a0ca77d": "KYLIN-2858 Add retry in cache sync, code format",
  "7da2cf8": "add retry strategy in cache sync",
  "aa9e73e": "KYLIN-2856 Refactor slow query detector and history",
  "ecf4819": "KYLIN-2834 fix bug in Broadcaster, lost listener after cache wipe",
  "4782289": "KYLIN-2823 Trim TupleFilter after dictionary-based filter optimization",
  "b36a5e5": "KYLIN-2748 fix: modify default permsize to 256m ,improve query performance",
  "eab590a": "KYLIN-2671 fix cache bug",
  "3280172": "minor, remove refine user cache in spring security",
  "51f22e2": "minor, improve odbc performance",
  "1b58373": "minor, odbc only cache success request",
  "27dfdbc": "minor, add cache in ODBC",
  "450246a": "faster Kylin UT",
  "6bfc6d2": "#732 catch and cache ResourceLimitExceededException",
  "ed0430b": "minor, use soft reference in dict cache",
  "b3ba338": "KYLIN-2610 Optimize BuiltInFunctionTransformer performance",
  "5e6ed11": "KYLIN-2583 introduce DBCP as DataSource with cache logic",
  "b641032": "KYLIN-2536 replace codehaus jackson with fasterxml",
  "5d012b9": "KYLIN-2499 HybridInstance cache wasn't cleaned when underlying Cube be updated",
  "3fc6843": "KYLIN-2483 SortedIteratorMergerWithLimit could be slower when number of total merge rows is small",
  "4c512f0": "minor improvement on ITFailfastQueryTest",
  "65acd70": "KYLIN-2417 Compare the performance between HDFSMetaStore and HBaseMetaStore",
  "ecf6a69": "KYLIN-2436 add a configuration knob to disable spilling of aggregation cache",
  "5d83c80": "KYLIN-2424 Optimize the integration test's performance",
  "1e4ae54": "KYLIN-2375 change default ehcache size to 256M",
  "d19533c": "KYLIN-2387 A new BitmapCounter with better performance",
  "89e4b53": "KYLIN-2335,http request always use cache data in IE10 or IE11",
  "487f2d9": "KYLIN-2322 disable subtree cache",
  "1d6a36b": "KYLIN-2322 fix TictionaryDictionaryForest cache bug and add CacheDictionary interface",
  "6ea03b8": "KYLIN-2328 Reduce the size of metadata uploaded to distributed cache",
  "182c565": "KYLIN-2318 query cache is not working",
  "f05404d": "KYLIN-1832 HyperLogLog performance optimization",
  "59a30f6": "KYLIN-2248 TopN merge further optimization after KYLIN-1917",
  "8f3239b": "KYLIN-2236 let query cache honor backdoortoggles in query request",
  "3142c74": "KYLIN-1919 performance enhancement",
  "30a4162": "KYLIN-1917 TopN counter merge performance improvement",
  "0deabb6": "KYLIN-1917 TopN counter merge performance improvement",
  "c49eb94": "clear cache in CubeMetaIngester",
  "5aeedd5": "minor, dont cache rest nodes in Broadcaster",
  "c48baba": "KYLIN-2007 CUBOID_CACHE is not cleared when rebuilding ALL cache",
  "ad5844b": "minor, CacheService pring error (instead of exception) on unknown cache type",
  "cce90a0": "KYLIN-1941 show user for slow query",
  "59e5eee": "KYLIN-1941 Save user for slow queries",
  "928baaf": "KYLIN-1860 'Models' view is slow to show up",
  "6b45c94": "KYLIN-1843: support LRU cache on SnapshotManager",
  "873c8a8": "KYLIN-1739 Do not cache and reuse hadoop configuration in HadoopUtil",
  "7397bc5": "KYLIN-1723 Less memory copy in aggregate cache spill",
  "c6aad4e": "KYLIN-1656 Improve performance of MRv2 engine by making each mapper handles a configured number of records",
  "42bf1b5": "minor, fix smoke test scripts affected by cache",
  "44c6fc9": "KYLIN-1635 Refine serialize performance as well",
  "8045e7d": "KYLIN-1614 Add linux transparent hugepage and vm swappiness into diagnosis tool for performance tunning",
  "abe590a": "KYLIN-1601 Need not to shrink scan cache when hbase rows can be large",
  "737ba33": "revise hdfs filter cache",
  "4d16e4d": "add cache to hdfs filter",
  "8992b56": "minor external filter name remove uppercase code when save to hbase and cache",
  "d6cfffa": "minor bug fix in project L2 cache rebuilding",
  "0e662a3": "put ext filter into project L2 cache",
  "1a13952": "KYLIN-1526 Move query cache back to query controller level",
  "c87cec3": "KYLIN-1506 Refactor resource interface for timeseries-based data like jobs for better performance (with Hao Chen <hao@apache.org>)",
  "d28be81": "KYLIN-1323 Improve performance of converting data to hfile",
  "f990ed6": "KYLIN-1352 Fix storage cache issue in high-concurrency query situation",
  "b4a5c35": "KYLIN-1328 add break after remove model cache",
  "e707dba": "minor,UI enable/disable cache status refresh after done",
  "a6ad62d": "KYLIN-1306 Null strings are not applied during fast cubing",
  "82717ae": "KYLIN-1244 In query window, enable fast copy&paste by double clicking tables/columns' names.",
  "c8e6ee4": "KYLIN-1226 A new way to estimate aggr cache size, MemoryWaterLevel",
  "c88f01f": "only cache ScanOutOfLimitException exceptions",
  "49590c9": "minor: set mapreduce.job.reduce.slowstart.completedmaps to 1 for runing test cases, unset for binary release",
  "b286d06": "KYLIN-1147 use pooled size for each cache(representing each realization)",
  "1548f90": "KYLIN-1135 pscan use cached thread pool",
  "ebfab6b": "KYLIN-1136 Distinguish fast build mode and complete build mode",
  "5e3d695": "KYLIN-1144 allow disable/enable storage cache on both server level and query level",
  "5f9d944": "KYLIN-1127 Adopt listener pattern to wipe query cache on cube update",
  "e14fbe1": "KYLIN-1127 Move cache related stuff from BasicService into CacheService",
  "c0d1194": "bug fix, SingleValueCache.put() should put local cache first",
  "888843d": "KYLIN-1105 Drop cache in AbstractRowKeyEncoder.createInstance()",
  "0275bc4": "Drop cache in AbstractRowKeyEncoder.createInstance()",
  "0bdb316": "KYLIN-1105 Drop cache in AbstractRowKeyEncoder.createInstance()",
  "d560060": "minor, fix base cuboid aggr cache calculation, estimate of topn can be very wild",
  "e160c63": "KYLIN-1025 Save cube change is very slow",
  "25a04f9": "KYLIN-1025 Save cube change is very slow",
  "aea2c35": "KYLIN-943 initial commit for function and performance test",
  "8c346a9": "KYLIN-792, update config key in kylin.properties for performance monitor moudle",
  "b487a55": "minor, enhance BadQueryDetector to report slow query at realtime",
  "3cee6fb": "minor, enhance BadQueryDetector to report slow query at realtime",
  "0caa8c3": "remove performance module",
  "7beb3bf": "blog for 'fast cubing on spark'",
  "967ad83": "KYLIN-740 fix many IN clause performance issue",
  "cd22db6": "Small update on fast cubing blog",
  "cee9856": "KYLIN-977 adjust echcache settings",
  "37b5e06": "KYLIN-740 fix many IN clause performance issue",
  "140f626": "KYLIN-740 fix many IN clause performance issue",
  "7c34656": "Small update on fast cubing blog",
  "9daf43b": "Add blog “fast cubing”",
  "5beffb2": "KYLIN-797 make Cuboid cache flush be triggered when CubeDesc cache flushed",
  "d95065f": "clear cuboid cache when cubo is deleted",
  "6395fc5": "KYLIN-792,performance module init update,write file name has read to config htable",
  "2bd5fbb": "KYLIN-792,supprot username/passwod config add opencsv module to performance module",
  "5f0c6a6": "hotfix: query duration for deciding query cache is not properly set",
  "ca6d668": "kylin-792 ,add sh to run kylin performance monitor",
  "a8115cc": "KYLIN-792 ,add performance module",
  "4186424": "KYLIN-803 Parameter tuning for fast in-mem cubing",
  "ed6a286": "KYLIN-865 flush cache on cube update",
  "1686914": "hot fix: delete query cache at wiping all cache",
  "c647d8b": "hot fix: filter evaluation performance issue caused by TableDesc",
  "741a8ef": "KYLIN-803 function done but merge output is very slow, need refactoring",
  "5ea3324": "KYLIN-836 storage cache simply use StreamSQLDigest's hashcode",
  "9e4ae51": "KYLIN-752 Improved IN clause performance",
  "ecfdaf7": "KYLIN-752 Improved IN clause performance",
  "880231f": "KYLIN-752 improve query performance for values that are not in dictionary",
  "fd286c3": "KYLIN-811 use cubeinstance name when rebuild ,and remove front cache after remove project",
  "2590511": "enable clear all cache again",
  "e8ac84c": "bug fix: rebuild proj L2 cache at cube/II update",
  "c0d5b63": "KYLIN-801 use new ehcache conf",
  "6de3f4d": "KYLIN-801 fix remaining issues on query cache and storage cache",
  "f01c29b": "KYLIN-759 make storage cache realization independent",
  "15cb969": "KYLIN-759 refactor storage layer cache",
  "9fa98c6": "KYLIN-760 Bug fix in Improve the hasing performance in Sampling cuboid size",
  "84ff6a6": "KYLIN-760 Improve the hasing performance in Sampling cuboid size",
  "d32fcf5": "KYLIN-671 print milli second for cache boundaries",
  "282eaea": "KYLIN-671 fix cache exclusive range",
  "36ac339": "KYLIN-671 get reuse cache ts range take effect",
  "94d288a": "KYLIN-671 cachefledgedtupleiteator",
  "9438470": "improve performance for case where hbase key is very long",
  "a8457e1": "KYLIN-639 cache not flushed when admin click “Reload metadata” on web UI.",
  "9311c92": "cleanup cache",
  "f65b173": "simply cache clearing, bug fix",
  "20054fd": "simplify cache clearing",
  "df8a91e": "Fix CI; cleanup manager cached when a KylinConfig get cleaned.",
  "f78dfd1": "fix update cache policy",
  "9031114": "fix cache issue",
  "3963ed8": "refactor wipe cache policy",
  "de626a7": "fix cache update policy",
  "1861899": "remove cache when load hive table",
  "b9e49fe": "refactor various optimizations in storage engine",
  "32dca00": "config update and query cache bug fix"
}, "lamp-cloud": {
  "3bb7c32": "1. 新增批量替换项目名&包名&前缀的Shells脚本（支持Linux&Mac） 2. 完整的项目讲解视频 3. 优化代码若干 & 删除无用代码和注释掉的代码若干 & 完善代码注释若干 4. 调整了nacos中的所有配置文件 5. 优化整个项目所有的枚举类型（删除枚举类型上标记的@JsonFormat(shape = JsonFormat.Shape.OBJECT) ） 6. 废弃zuihou-sacn-stater模块 7. 修复通用短信验证码发送的bug 8. 修复zuihou-admin-ui上传租户头像报错的bug 9. 修复zipkin + seata整合时冲突报错 10.废弃SystemApi模块 11.依赖升级 spring.boot.version -> 2.2.7.RELEASE spring.cloud.version -> Hoxton.SR3 dynamic.datasource.version -> 3.1.0 mybatis.version -> 3.5.4 mybatis-spring.version -> 2.0.4 mybatisplus.version -> 3.3.2 p6spy.version -> 3.9.0 fastjson.version -> 1.2.72  (修复安全漏洞） druid.version -> 1.1.22   (修复编译时，IDEA的警告） knife4j.version -> 2.0.4 swagger.version -> 1.5.22 hutool.version -> 5.3.9 jjwt.version -> 0.11.1",
  "04dfd12": "1. 新增批量替换项目名&包名&前缀的Shells脚本（支持Linux&Mac） 2. 完整的项目讲解视频 3. 优化代码若干 & 删除无用代码和注释掉的代码若干 & 完善代码注释若干 4. 调整了nacos中的所有配置文件 5. 优化整个项目所有的枚举类型（删除枚举类型上标记的@JsonFormat(shape = JsonFormat.Shape.OBJECT) ） 6. 废弃zuihou-sacn-stater模块 7. 修复通用短信验证码发送的bug 8. 修复zuihou-admin-ui上传租户头像报错的bug 9. 修复zipkin + seata整合时冲突报错 10.废弃SystemApi模块 11.依赖升级 spring.boot.version -> 2.2.7.RELEASE spring.cloud.version -> Hoxton.SR3 dynamic.datasource.version -> 3.1.0 mybatis.version -> 3.5.4 mybatis-spring.version -> 2.0.4 mybatisplus.version -> 3.3.2 p6spy.version -> 3.9.0 fastjson.version -> 1.2.72  (修复安全漏洞） druid.version -> 1.1.22   (修复编译时，IDEA的警告） knife4j.version -> 2.0.4 swagger.version -> 1.5.22 hutool.version -> 5.3.9 jjwt.version -> 0.11.1",
  "080b6c1": "0. spring.cloud.version -> Hoxton.SR3 1. spring.boot.version -> 2.2.6.RELEASE 2. spring-cloud-alibaba -> 2.2.1.RELEASE 3. seata.version -> 1.1.0 4. fastjson.version -> 1.2.68 5. j2cache.version -> 2.8.1-release 6. jjwt.version -> 0.9.1 7. hutool.version -> 5.3.1 8. 支持 nacos 1.2.1 9. 支持 seata 1.2.0 10. 优化数据权限逻辑 11. 修复删除资源时执行删除SQL的bug 12. 修复查询缓存数据时，查询到为null的数据的会报NPE的bug 13. 同步 nacos 和 seata 的脚本 14. 修复RoleAuthorityServiceImpl类的方法 无事务注解 15. 优化项目配置，使得任意模式完美支持 seata 16. 优化若干代码",
  "6a98ec9": "1. 优化操作日志，使得能够记录 SuperController 类的日志，并支持子类 重写操作日志描述 2. 父类 BaseController2 重命名为 SupperController， 完善方法：CRUD、导入、导出、Excel预览、分页（支持排序、日期区间查询），完善操作日志(@SysLog)的支持 3. 新增 SuperService、SuperServiceCacheImpl 类，增加缓存的支持 4. 新增 SuperMapper 类，增加 updateAllById 和 insertBatchSomeColumn 方法 5. 新增 QueryWrap 类，对MP提供的 QueryWrapper 类增强， 并优化 LbqWrapper 类 6. 重写 SpringCache 的 cacheResolver，使得 注解模式 支持子类 重写缓存key 7. 调整用户（c_auth_user)相关类 继承新增的 Super* 接口，并联合前端调整接口后，测试通过",
  "e6e000b": "将j2cache 配置文件抽取到 zuihou-commons",
  "b9d8e0e": "将j2cache 配置文件抽取到 zuihou-commons",
  "f091efc": "1，完善系统API&应用模块表结构、前后端对接等 2，操作日志详情 增加对模块描述 3，优化&修复前端项目bug、代码、命名等若干 4, 消息中心接口完善&前后端对接 5，删除附件统计相关无用接口 6，seata-all 相关版本升级到 1.0.0，完善demo&test服务对seata-server的支持(还存在问题） 7，升级 SpringCloud 版本为 Hoxton.SR1 8，升级 SpringBoot 版本为 2.2.2.RELEASE 9，升级 mybatis-plus 版本为 3.3.0 （升级后发现官方分页查询的bug，又回滚到3.2.0） 10，升级 Alibaba Cloud 版本为 2.1.1.RELEASE 11，升级 knife4j 版本为 2.0.1 （官方还存在一些bug） 12, 升级 hutool 版本为 5.1.0 13，升级Alibaba Cloud 版本为 2.1.1.RELEASE后， zuihou-j2cache-starter 存在无法读取nacos中配置的bug，已修复",
  "327ef27": "1，删除zuihou-redis-starter 2, 新增zuihou-j2cache-starter（封装2级缓存：j2cache， 并修复了官方的starter中，无法从nacos中读取配置文件的 bug） 3，如何配置2级redis缓存的开关？ 请参考： `zuihou-j2cache-starter/README.md` 4, 修改了nacos中 redis.yml 的配置，详情请看 `zuihou-config/src/main/resources/redis.yml` 或者 `third-party/nacos/nacos_config_export_2019-10-18 11_02_43.zip` 5, 权限服务(zuihou-authority-server)中 资源，菜单 已经加入j2cache",
  "2356730": "1，删除zuihou-redis-starter 2, 新增zuihou-j2cache-starter（封装2级缓存：j2cache， 并修复了官方的starter中，无法从nacos中读取配置文件的 bug） 3，如何配置2级redis缓存的开关？ 请参考： `zuihou-j2cache-starter/README.md` 4, 修改了nacos中 redis.yml 的配置，详情请看 `zuihou-config/src/main/resources/redis.yml` 或者 `third-party/nacos/nacos_config_export_2019-10-18 11_02_43.zip` 5, 权限服务(zuihou-authority-server)中 资源，菜单 已经加入j2cache",
  "1a6fcef": "删除redis-starter ，增加 j2cache-starter",
  "f9d2ab5": "接入j2cache ，并解决无法读取nacos中配置的 bug",
  "24418bb": "1， 封装zuihou-cache-starter 起步依赖，将redis和caffeine的一些基本set get 方法抽象成接口，使得开发/演示或者生产环境可以自由切换 2，将 验证码发送和验证 切换到cache-starter，并测试通过 3，编写测试代码，测试cache-starter各功能 4，完善注释",
  "6ffdc51": "1， 封装zuihou-cache-starter 起步依赖，将redis和caffeine的一些基本set get 方法抽象成接口，使得开发/演示或者生产环境可以自由切换 2，将 验证码发送和验证 切换到cache-starter，并测试通过 3，编写测试代码，测试cache-starter各功能",
  "ca4f9a9": "1， 封装zuihou-cache-starter 起步依赖，将redis和caffeine的一些基本set get 方法抽象成接口，使得开发/演示或者生产环境可以自由切换 2，将 验证码发送和验证 切换到cache-starter，并测试通过 3，编写测试代码，测试cache-starter各功能",
  "7cf3dfd": "改进 文件服务器 对fastdfs的支持",
  "b213098": "增加文件服务器对fastdfs的支持（需要手动安装fastdfs-client-java到本地仓库）",
  "e4bcff1": "增加文件服务器对fastdfs的支持（需要手动安装fastdfs-client-java到本地仓库）"
}, "lanproxy": {
  "": ""
}, "LayoutManagerGroup": {
  "": ""
}, "Leaf": {
  "eb3479d": "优化这部分的db新加的tags灌进cache和cache中失效的tags从cache删除，利用HashSet将原来时间复杂的O(nm)变为O(n)"
}, "LeafPic": {
  "9b13eeb": "cache albums paths",
  "ad9339f": "hide/unhide albums feature back 'cache' for hidden albums",
  "ef34d63": "media grid display well and load faster",
  "6f9fdbb": "improved performance on SelectAlbumBottomSheet",
  "35e3ce2": "app build.gradle CHANGELOG.md FAQ.md gradle gradle.properties gradlew LICENSE README.md screenshots scripts settings.gradle fixed spacing from the status bar and from navbar in spitscreen mode (Nougat) app build.gradle CHANGELOG.md FAQ.md gradle gradle.properties gradlew LICENSE README.md screenshots scripts settings.gradle fixed blurry images (improved cache media signature) app build.gradle CHANGELOG.md FAQ.md gradle gradle.properties gradlew LICENSE README.md screenshots scripts settings.gradle fixed cut icons (Nougat) app build.gradle CHANGELOG.md FAQ.md gradle gradle.properties gradlew LICENSE README.md screenshots scripts settings.gradle found better way to find resolution app build.gradle CHANGELOG.md FAQ.md gradle gradle.properties gradlew LICENSE README.md screenshots scripts settings.gradle workaround for copy/move from/to sd card (to improve) app build.gradle CHANGELOG.md FAQ.md gradle gradle.properties gradlew LICENSE README.md screenshots scripts settings.gradle draft for rotation app build.gradle CHANGELOG.md FAQ.md gradle gradle.properties gradlew LICENSE README.md screenshots scripts settings.gradle draft for more image details",
  "cfe26d5": "fixed cache on PagerView after uCrop",
  "81d80f6": "fixed cache on albums Activity",
  "6d69ad7": "clean and start optimizing cache/loading photos",
  "07d2d30": "clean and start optimizing cache/loading photos",
  "0708d16": "new data management [2/3] improved stability improved performance"
}, "learning-spark": {
  "9c15d6f": "basicmapnocache"
}, "leet-code": {
  "6d1094f": "cache",
  "413c55e": "played with group anagram and optimizations"
}, "leetcode": {
  "afac3f6": "Remove cached idea files"
}, "Leetcode": {
  "0a0b7d3": "LFU cache"
}, "leetcode-editor": {
  "67d6308": "optimization of sorting"
}, "lettuce-core": {
  "b65443f": "Improve RedisAdvancedClusterAsyncCommandsImpl::mget performance #2042",
  "b034541": "Fix cache lookup for negative long values #2019",
  "c724e0e": "Introduce fast-path publishing in RedisPublisher #637",
  "7aa22e5": "Change MethodTranslator's loadfactor to 1.0 for sync APIs performance #305",
  "4cba0c3": "Add integer cache for CommandArgs #251",
  "c7fa50e": "Use much faster JDK utility for converting an int to a byte sequence.",
  "7a7cb47": "Do not cache InetSocketAddress/SocketAddress in RedisURI #144",
  "4fc6bbc": "Do not cache InetSocketAddress/SocketAddress in RedisURI #144",
  "564c98f": "Add com.google.common.cache to shaded jar #143",
  "c6439c9": "Add com.google.common.cache to shaded jar #143",
  "c7f36f8": "Improve test performance",
  "006cfde": "Improve test performance",
  "d4e6dae": "Polishing #91 - Improve partition cache handling when updating - Use ArrayDeq as queue instead of LinkedBlockingQueue - Prevent NPE because of disconnect when writing a command",
  "f7dbbb0": "Polishing #90 - Update docs - Use ArrayDeq as queue instead of LinkedBlockingQueue - Improve partition cache handling when updating",
  "0e653e7": "Merge branch improved-cluster-performance into 4.0 #91 - Remove unnecessary lists and simplify access to the first command key - Use Guava's cache for method caching in InvocationHandlers since it's faster than Class#getMethod - Use array-based caching of connections when distributing commands to cluster nodes - Improve locking in CommandHandler",
  "59a5860": "Polishing and use PooledByteBufAllocator #89 - Check that the event loop group is active when reconnecting to prevent exceptions due to a shutdown executor - Use PooledByteBufAllocator to improve performance by reusing buffers - Use CommandEncoder",
  "7f23ba3": "Improve write performance",
  "c5f48c2": "Use Guava's cache for method caching in InvocationHandlers since it's faster than Class#getMethod #90",
  "b177364": "Improve cluster command distribution performance #89",
  "4592c2f": "Improve partition lookup performance #89",
  "696d200": "Add performance test for reactive commands",
  "3800c3b": "Improve partition lookup performance",
  "7bfa72d": "Add performance test to test async and multi-threaded performance",
  "2d99b73": "Add performance test to test async and multi-threaded performance",
  "e99bbb4": "Hint more details on lettuce's performance #54"
}, "libgdx": {
  "5eae5f3a": "optimize instanced rendering with renderables (using cache) (#7128)",
  "465d14bf": "Fix: Reflection cache generator stopped logging types. (#6605)",
  "f22e9dbe": "Split GWT reflection cache into two generated classes (#6386)",
  "aa154d1d": "Implemented inversion of controls in CameraInputController, without performance penalty during run-time (#6545)",
  "29091062": "Revert 'Cache Box2D Fixture filter data to avoid JNI overhead performance penalty (#6118)' (#6261)",
  "5d4c5e41": "Sprite minor performance improvements (#6171)",
  "e2a2362c": "Cache Box2D Fixture filter data to avoid JNI overhead performance penalty (#6118)",
  "f30ba6ef": "Removed bogus optimizations added in 0b313004bd12d3aed7a0b744684fbccd57344115.",
  "0b313004": "Minor optimizations for glyph layout.",
  "d7395cdf": "performance improvements for Matrix4 operations (#5883)",
  "76dd2ec4": "Fix Android fast pause/resume bug (#6074)",
  "43934092": "Minor optimization by avoiding duplicate declaration",
  "ccb6ab23": "Reflection cache",
  "17258882": "Reflection cache",
  "b80c2644": "Added javadoc for using OrderedMap/Set with an unordered array for faster iteration than ObjectMap/Set.",
  "59e00cb0": "Use StringBuilder instead of StringBuffer as it offers high performance in single thread context as it is generally the case. (#5074)",
  "3b936881": "Fixed Interpolation#fastSlow copy pasta.",
  "e8cbe06c": "Added slowFast and fastSlow.",
  "e7679e26": "Minor optimization",
  "bc13568b": "Add Sprite to reflection cache by default",
  "7f4b2692": "cache cubemap sides to reduce memory consumption (#4849)",
  "05c635bc": "Fixed performance regression in Lwjgl3GL20, copying buffers using Buffer#put is a lot faster than using BufferUtils on desktop JVMs. Fixed issue in BaseShader, returned attribute locations array was to big",
  "a7134f34": "Improve performance of DefaultShader#canRender(..) (#4531)",
  "f284ea71": "clarify performancecounter docs (#4163)",
  "bc0dbda9": "Sort GWT tests, remove 'optimization' in ScreenUtils",
  "584d34c1": "Improve performance of glReadPixels() and ScreenUtils on GWT",
  "c4fd69eb": "Clean up performance in VBOWithVAO and supply performance test",
  "f60d3b57": "Micro optimizations for hotspots.",
  "16b60c34": "Make AndroidZipFile initialization faster",
  "881d6948": "Make APK expansion initialization faster. Make exists() faster for files Fall back to APK expansion only in case of internal files Simplify getAssetFileDescriptor()",
  "3719f98a": "Use BufferedInputStream to improve tmx loading performance",
  "2219867e": "Factory method for creating a font cache.",
  "7e5d6812": "Slight optimization for put.",
  "729929ec": "gdx-freetype: minor performance fixes",
  "d616c4e3": "Label, set cache color to white before changing text.",
  "525f8395": "fixed MusicTest, used String#format, fixed up reflectioncachesourcecreator to allow reflection java.util.* classes.",
  "92ac1f45": "Improved limit()/clamp() behaviour - now it doesn't call nor(), reusing the (needed anyway) len var, resulting in *one* scl() call instead of *two*. Also, we use cached len, so that we don't have to calculate it twice. Mostly beneficial for Vector3 class. Also adds limit2(),setLength(), setLength2() and removes docs inherited from Vector interface",
  "0440eefa": "Merge pull request #2454 from vmilea/optimization",
  "5a9a4c73": "Merge pull request #2435 from vmilea/optimization",
  "76be4409": "Bug fixes, added performance test",
  "028e6caa": "Fixed reflection cache creation for interfaces - they were added as 'primitive' types before. Fixed a few compile warnings.",
  "022392c3": "Fix bullet method cache so it is cached per pool type and allow pooling for btIDebugDraw (fixes #2174)",
  "ca6c0ef1": "Small optimization to avoid unnecessary square roots.",
  "99ca7243": "Reduce lwjgl backend performance",
  "f811cac2": "Improve performance of the lwjgl backend",
  "2337a333": "Small optimization to avoid unnecessary square roots",
  "f08eb35c": "Sprite draw alpha modulation optimization",
  "4fcca31a": "Removed fast math test",
  "4ea3dd2e": "Removed fastInvSqrt methods Changed Input/Setter of DefaultShader worldViewTrans to viewWorldTrans and fixed the function",
  "5cf9512b": "Refix quaternion setFromAxes added fast normalization to vectors classes added fast inv sqrt to MathUtils added FastMathTest class",
  "d7af7439": "Merge pull request #1216 from hneuer/gwtspritecache",
  "2117de17": "Minor optimization",
  "9d747a5a": "optimization arrays",
  "81b95c5c": "Bits optimization: No need to loop through 64 bits if word is known to be 0",
  "1f5d9e98": "added new method to ScreenUtils to get a pixmap, not the fastest",
  "33ced668": "Merge pull request #761 from hneuer/gwtcache",
  "cfa939d6": "Merge pull request #736 from jrenner/fast-vector-dist",
  "ffb42dcf": "Minor optimizations.",
  "ddd9e256": "More optimizations.",
  "cd11565a": "Fix slow read/write on iOS Net streams",
  "e3286411": "Mesh cache attribute locations",
  "d7d6da12": "added g3dj to DefaultAssetFilter for faster loading, fixed GWT AssetManager emu for ModelLoader, hacked GwtGL20 to return max texture units (always 16, hackady hack)",
  "4457e987": "Added infos in the CHANGES file. Renamed AssetLoader to AssetDownloader to avoid having 2 classes with the same name in Gdx. Set download size of audio file to 0 when not using browser cache (they are not preloaded but directly loaded by the audio system).",
  "d0083535": "More shader optimizations, still not happy about the performance....",
  "7d9423bc": "+ Mesh constructor with optimizations for dynamic meshes",
  "9b915fa5": "fixed cached tiled renderer",
  "f8cc32b3": "Merge pull request #178 from xoppa/performancecounter",
  "d4b38f5c": "Merge branch 'performancecounter' of https://github.com/xoppa/libgdx into bullet",
  "e6956a25": "added math classes to reflection cache, makes UI stuff work again",
  "e2fb5239": "Merge pull request #176 from xoppa/performancecounter",
  "b05dbe69": "Super useless binary search optimization!",
  "f8d0b21e": "Label, added rotation support and javadocs. It already had scale. Beware this flushes the cache.",
  "eb98c3de": "Stack, cached sizes.",
  "0cab94a0": "removed cached files",
  "eedef614": "TextureRegion caches region width/height. No longer returns negative width/height for flipped region!",
  "7f5d7cc8": "Fixed TexturePacker2, odd numbered edge padding and crash when fast=true. Added gutter to Stage. Added isDisabled to Button. Changed Button background so padding can be set. Better Skin constructors, public methods.",
  "03a9c510": "Fixed terrible, terrible bug in some of the maps. Adjusted default map settings: fewer push iteration, larger stash. This should result in faster puts, as push iterations are expensive.",
  "cb1bda5a": "cached method id for getting buffer position. will still be a tad slow, but meh",
  "1aeb7b15": "fixed issue869 by changing BitmapFont.computeVisibleGlyphs() method to use a float width instead an int width, now the three render cases (label, bitmapfont and bitmapfontcache) seem to behave correctly",
  "bb18d8c3": "super awesome performance increase, using chars instead of strings. WHAT THE FUCK AM I DOING HERE.",
  "96b45536": "Vertex based exponential fog added as material. Some alpha channel optimizations on shaders.",
  "03e78ece": "Uuniform/atribute not found is cached now. This will optimize all the query calls per frame basis off even if the uniform/atribute is not used in the shader.",
  "b43a100f": "Dynamic VBO's = slow. Change from VBO to VertexArrays gained 12ms with 50 animated models.",
  "7f4b7f5f": "vec3 a_position trick.(instead of vec4) Some fancy shader compilers can then do neat optimizations.",
  "6f399f7e": "Small optimizations against gc",
  "2cca7c9f": "[ignored] gwtcache and war/ dir in vectorpinball html5 starter.",
  "22887551": "Wrap light bug fix and huge performance imporovement.",
  "52f9dcfd": "[added] binary file support to GWT backend. It won't be the fastest, but at least it's compatible.",
  "d8d2ffa3": "40% faster and 100% uglier sphereInFrustum checks.",
  "a001c0d8": "[fixed] base url construction in GWT preloader. We can't do cross-site embedding it seems, but you can include your game in any page on the same domain with a relative path to the nocache.js file.",
  "127f020e": "[fixed] optimization in spritebatch. stupid me.",
  "3bf68088": "small optimizations.",
  "be358d39": "shader refactoring. better naming, cleaner ordering, huge optimizations(10%)",
  "c4c7ab2a": "+10-15% performance improvements to light shaders. Testing with specular maps. Quality fixes. Clamp errors fixed.",
  "7675beb2": "[fixed] issue 704, GlSurfaceViewCupcake used a static semaphore to safeguard against concurrent EGL access by multiple activities. That seemed to have a negative performance impact. Replaced with a monitor/synchronized block. According to bug reporter that's faster for his test case, semantics are the same.",
  "78b6bd7b": "Internal files on Android no longer try to support exists() on directories, always false. It was too slow! Label javadocs. Android test starter remembers scroll offset.",
  "36a4ac8f": "[updated] scene2d, changed how focus is handled. Now stored on stage, and all actors have a stage reference. Removed constructors that take a stage. [added] Group toLocalCoordinates, converts from group's coordinates to a descendants coordinates. [updated] FlickScrollPane, 'cancels' touchDown events on children if scrolling occurs. [updated] TexturePacker, faster. Still crappy! [updated] Skin asset loading, param is optional, looks for PNG with same name as JSON file. [added] flip param to TextureAtlas asset loading. [updated] BitmapFont, fixed some obscure wrap bugs. [updated] ParticleEmitter, changed BitSet to boolean[]. Should use less CPU, which wasn't the limiting factor anyway... [updated] Button, pack() by default, better pref size. [fixed] Label wrapped text. [added] TableLayout cell property, scaling. Keeps widget aspect ratio.",
  "b00c1e79": "[updated] AssetManager, added 2nd isLoaded. [fixed] BitmapFont and cache text wrap. [updated] Label, setWrapWidth. [updated] Skin, hasStyle. [updated] TableLayout knows about skin and asset manager, does fancy stuff.",
  "f29eeb49": "[updated] AssetManager, removed exception printStackTrace. [fixed] TextureRegion returning the wrong size due to float rounding. Should really cache the damn sizes... [added] MathUtils.clamp. [updated] Button sizing, constructor, setting style. [fixed] FlickScrollPane layout. [added] Scaling class separate from scene2d, updated Image. [fixed] TableLayout debug lines, finally. [updated] TableLayout, cache pref and min sizes better.",
  "cd53e6a0": "[updated] TableLayout to cache pref size.",
  "246a8322": "[changed] AssetLoaders now use FileHandleResolvers to get their FileHandles. Such a resolver could check a networked resource and download stuff to a cache.",
  "3921b476": "[fixed] tiny bozo in Image, used slow path all the time.",
  "059c409f": "[fixed] use 16-bit rgb for textures in qbob! Super mega hyper performance boost on Tegra platform. Doesn't like 24-bit textures one bit it seems...",
  "13046f82": "[added] FastTextReadingTest, loading 178k words, line separated from a ~1MB file. ~3.2 seconds on Nexus One and HTC Desire with Gingerbread. Could be faster, but for most practical purposes that suffices...",
  "29d361cf": "[added] g3d versions of model. damn they load fast :p",
  "4e79efa5": "[added] parent alpha to fastimage.",
  "57818538": "[added] G3DTLoader for keyframed models. Not finished yet, but almost. Got all the data in memory :D [changed] KeyframedModel now assumes that all the animated vertex components are stored first per vertex, e.g. pos, normal are animated then come the non-animated components like uv1 and uv2. [changed] Keyframe stores only the animated components and doesn't store the non-animated components anymore -> massive reduction of used memory, better cache behaviour (hopefully).",
  "22eb7768": "[fixed] TileMapRenderer much more accurately calculates maximum sprite cache size",
  "7e95896a": "[updated] minor performance enhancement for EarClippingTriangulator",
  "2f6d292e": "[fixed] Rare floating point imprecision error in EarClippingTriangulator. [added] A few optimizations to EarClippingTriangulator - see source comments for details.",
  "d56ba356": "[fuckyou] Qualcomm sucks... Added Texture.getFramebufferToTexture() using glCopyTexture which is fucked on Qualcomm it seems. The other option is stupid and way to slow...",
  "562d0eaa": "[removed] mipmapping from stage performance test :p",
  "4ef44039": "[Fixed] Memory leak in KeyframedModel.dispose() [Changed] WrapMode for animators with additional 'SingleFrame' mode to only play 1 frame of animation then stop. This is to get models out of bind pose into a 'frozen idle' with very little performance cost. [Changed] Added binary serialization of MD5Animation and MD5Model; intended for asset compiling usage. [Fixed] Memory leak with TextureDict not disposing textures correctly when unloadAll() called.",
  "88220a20": "[renamed] gdx/natives to gdx/libs because of course the NDK puts libs in libs. I'm a bit slow sometimes!",
  "0d26bbef": "[changed] gdx2d nearly fully implemented. Todo: fix rgba4444 blending bug, improve blending by swizzling (see commented core in set_pixel_RGBA8888), add blitters. We are faster than Skia at the moment even with blending enabled :D",
  "6cc53e22": "[added] TWL Layout method to eat events. [added] Ability to set max size on Bag and Array pools. [removed] Pool. Replaced all Pool usage with BagPool (which doesn't do a memory copy when items are returned to the pool as Pool's use of ArrayList did). [changed] TextureAtlas, renamed methods to findRegion and createSprite to better reflect the operation cost. [removed] IntHashMap and LongHashMap. [added] ObjectMap, IdentityMap, IntMap, and LongMap. These use open addressing with linear probing to avoid allocation of entry nodes on put. See JGO thread for performance. Changes HashMap usage to ObjectMap. [removed] LocklessThreadQueue. Replaced by AtomicQueue.",
  "606144d5": "[fixed] Utils collections crashed after a resize due to cheese dick optimizations.",
  "d555a6ab": "[fixed] texture loading in angle backend. we really need to unify all the texture shit. It drives me batshit crazy. [added] Pixmap.drawPixel(), cause we like things to be slow...",
  "6922b9be": "[added] tiles.png from tiled example and TileTest. We are pretty fast.",
  "dbdf89f4": "[changed] SpriteBatch, slightly relaxed size restrictions on redefining a cache.",
  "e8751a1b": "[fixed] Using BitmapFont with Sprite. [added] Ability to redefine a cache with SpriteCache.",
  "910b99fb": "[changed] Very slightly more efficient SpriteBatch. [added] Sprite#getVertices. [changed] Mesh to use VBOs for static and VAs for dynamic. [fixed] VertexBufferObject to return correct vertex count before vertices are set. [added] SpriteCache which uses a VBO mesh to cache static geometry.",
  "8e12b76d": "[added] VertexBufferObjectSubData class that uses glBufferSubData instead of glBufferData. Works faster on the Droid.",
  "dd1a057e": "[fixed] LwjglCanvas being resized too small. [fixed] Hiero native glyph cache having many blanks.",
  "ac37d68b": "[changed] Animator doesn't run as fast as possible anymore",
  "46d3bb08": "[added] lwjgl debug starter, for faster starting of a specific test.",
  "048d7919": "[changed] BitmapFont and BitmapFontCache. The cache methods are now setText* methods on the cache. The origin of the text is now the baseline. [added] Sprite constructor for easily creating a sprite with a texture region relative to another sprite's texture region.",
  "c8ade12c": "[changed] FileType.Absolut to Absolute. [added] LwjglApplication#setSize. [changed] Named LWJGL audio and music threads. [changed] SpriteBatch#renderMesh made private. [added] SpriteBatch#flush (public). [added] Sprite#setTexture. [added] Particle classes and particle editor tool (in extensions). 99,999 particles on the desktop at 44fps (default 32x32 image). Haven't tried performance on a device yet, that will get me motivated to work on it again.",
  "08fe91a0": "[fixed] Width of cached text. [fixed] Loading TWL theme using a URL. [fixed] GdxFont not drawing a substring. [added] TWL test resources.",
  "1252fc89": "[changed] documented BitmapFont and BitmapFontCache (lousily...) [changed] BitmapFontCache is now created via BitmapFont.newCache(). I think it's cleaner that way. [changed] all cacheText methods don't return a BitmapFontCache anymore. I'm sorry, i don't want null arguments anywhere.",
  "0d0f5018": "Slight optimization for setting position or bounds after rotation or scale.",
  "65ebf9c5": "Removed 4 multiplies with Mario's clever optimization.",
  "e24986bc": "[added] Sprite2.computeVerticesJNI. A lot slower as expected :) commiting it once for future reference.",
  "9263b929": "[changed] removed 2 additions from transformation stage of SpriteBatch. [added] Color.toFloatBits() static method. yippie, Sprite2 is equally fast and sometimes even faster than SpriteBatch on the Hero and Nexus1. Big plus as it's a lot easier to use. awesome.",
  "d26febd2": "[changed] SpriteBatch tests [removed] SpriteBatch.draw() that took an array. No performance difference on desktop or android to non array method [added] Sprite2, a counter suggestion to Nate's Sprite class [changed] added new SpriteBatch.draw( Sprite2 sprite ) method.",
  "3b1d58f8": "[fixed] Group fully functional now. toChildrenCoordinateSystem works like a charme and is blazingly fast :p",
  "1cf22df9": "[fixed] SpriteBatch is now equally fast using either OpenGL ES 1.1 and 2.0. Was slower previously due to the 2.0 path using glSubBufferData instead of glBufferData. This is a bug in the Qualcomm drivers it seems. glSubBufferData is supposed to be a lot faster than glBufferData. [fixed] blending state handling in SpriteBatch wasn't all that optimal",
  "8ae35e86": "[changed] windows shared lib compiled with newer mingw version. for performance! :p",
  "de64d26a": "[added] a new intersectRayTriangles method which takes vertices as used by a Mesh class indexed by a short array. Not the fastest bunny under the sun but will do the job. [added] TerrainTest, simple heightmap rendering and picking. Works like a charme...",
  "b778dc7a": "[added] BufferUtils to copy float arrays to direct buffers. Around 100 times faster on Dalvik than the FLoatBUffer.put() method. Awesome... [changed] Mesh now exclusively uses direct buffers. With the BufferUtils class we fix the problem on 1.5 where FloatBuffer.put() would leak PlatformAddresses like mad. yay... [added] small MicroBenchmark to test the performance of direct buffer puts...",
  "e0615b4f": "['fixed'] QUALCOMM sucks. glBufferSubData is incredibly slow so i had to change it to glBufferData in the Mesh class. This only affects VBOs in GL ES 1.1, for GLES2 glBufferSubData is used. Fuck you Qualcomm",
  "bc885bc7": "[fixed] fuck you Dalvik, fuck you direct buffers on Android, fuck you. fixed a couple of performance bottle necks. spritebatch is now useable.",
  "58e5ea2c": "[added] performance test",
  "04a9a809": "[added] ogg vorbis native decoder. It's fast baby...",
  "f322ed6f": "[added] ogg vorbis native decoder. It's fast baby...",
  "343d9ef2": "[added] ImmediateModeRenderer, allows desktop OpenGL style immediate mode drawing via vertex arrays in the background. Should be fast enough for small stuff like gui etc."
}, "library": {
  "": ""
}, "librec": {
  "7e43c72": "cache technique used",
  "661581c": "important update: using sortList to substitute sortMap for further performance improvement!",
  "d1c44db": "critical important: List.sortMap performance greatly improved"
}, "libstreaming": {
  "": ""
}, "libsvm": {
  "62874a2": "modify libsvm to use liblinear's fast I/O",
  "03956f8": "modify libsvm to use liblinear's fast I/O",
  "6c60e15": "use BufferedOutputStream for faster output of model (and prediction output)",
  "6133280": "use BufferedOutputStream for faster output of model (and prediction output)",
  "5be70a5": "cache size to 100",
  "ed1ff1e": "cache size to 100",
  "f4fad9c": "increase default cache size to 100",
  "f108230": "size = max(size, 2*l); // cache must be large enough for two columns"
}, "light-4j": {
  "14787ba": "fixes #1697 check cache configuration first before creating CacheManager instance (#1698)",
  "c6d68df": "fixes #1690 add cache-manager module for centralized cache (#1691)",
  "c25d27a": "fixes #1598 make the loading with cache",
  "3146cfb": "fixes #1598 change the config load to nocache",
  "2da18fd": "fixes #1598 make sure that the status.yml is cached and reloadable (#1599)",
  "fc0413b": "fixes #1572 update MrasHandler to cache the token based on the expires_in (#1573)",
  "890bb57": "fixes #1566 update the JwtVerifyHandler to cache the jwk with prefix as part of the key (#1567)",
  "ae7b4dc": "fixes #1524 use the jwt cache full size as the max cache size in JwtVerifier (#1525)",
  "657d703": "fixes #1490 add debug log for handler start and end time for performance analysis (#1493)",
  "867cb57": "fixes #1337 ignore one test case from rate-limit for slow computers",
  "6b3ce41": "fixes #1337 disable several test cases in client module that only work on faster computers (#1338)",
  "e8ad2a5": "fixes #1298 cache the jwk with all kids in the jwk result (#1299)",
  "c4bd1fc": "fixes #963 update the logic to support both http and https port cached and accessed (#964)",
  "8147cea": "fixes #829 remove the serviceMap cache from the LightCluster and use the cache in Registry implementation (#832)",
  "f8b87ac": "fixes #827 update discovered cache with WebSocket message from controller (#828)",
  "b01e009": "fixes #819 output the body in the ServerInfoGetHandlerTest as it fails on a slow computer (#820)",
  "b8c54e1": "fixes #784 get server config without cache in the client module (#785)",
  "e56e0cf": "fix for issue #715 - ensure cached consul connections are specific to a thread to avoid concurrent use of the connections across threads (#716)",
  "052a7b8": "Bug fix: ConsulRegistry keeps the first service url discovered in cache (#633)",
  "5776023": "- Integrate CentralizedManagement class into configInjection class - Modified duplicated check in ConfigInjection class - Fix logic confusion at getValue method - TODO: optimization",
  "149fddd": "- to realize the discussion of the meeting on Jan.2 - test cases added - delete unused import - TODO: optimization",
  "e292121": "- to realize the discussion of the meeting on Jan.2 - test cases added - TODO: optimization",
  "a84431e": "fixes #140 make it configurable to get jwt public certificates from cache or from oauth server",
  "27915c6": "fixes #113 Make Jwt token verification cache configurable",
  "e1329b5": "fixes #84 cache the public key certificate after retrieved from oauth2 key service",
  "ba4c279": "fixes #79 addd finger print util and update JwtHelper to cache finger prints",
  "c4ef187": "fixes #74 update ConsulRegistry to use one layer of cache structure",
  "13fd5c1": "fixes #47 jwt token verification with cached",
  "a26c7bd": "fixes #47 jwt token verification with cached",
  "9848502": "update cluster to cache the service urls",
  "46d7ccc": "refactor validator to fail fast"
}, "light-task-scheduler": {
  "b03294c": "performance",
  "1d84ba3": "performance",
  "3a38990": "加入在JobClient 对一些参数的验证，譬如长度, performance Monitor Data report",
  "404d42a": "performance: ltsdb",
  "db5ab0b": "performance: ltsdb",
  "42ed1f5": "performance: jobclient JobCancel的时候, 也会remove掉 暂停队列",
  "acbadda": "performance:将取任务顺序按照 priority优先 , 再按触发时间",
  "3c4980f": "performance:将取任务顺序按照 priority优先 , 再按触发时间",
  "1db266e": "performance",
  "fde793c": "performance - 节点加个 SEQ",
  "b09f496": "1.6.3-SNAPSHOT 增加JSON扩展, LTS目前支持fastjson, jackson , 也可以使用SPI扩展实现",
  "d96b37d": "1.6.2 remoting层重构，增加mina实现，增加多种序列化方式fastjson, hessian2,java 等，增加打包成独立jar的工具 等",
  "c53ab83": "1.6.2 remoting层重构，增加mina实现，增加多种序列化方式fastjson, hessian2,java 等，增加打包成独立jar的工具 等",
  "e76fd3e": "完成 remoting改在，加入 mina 扩展，也留了SPI扩展，增加多种序列化方式 fastjson hessian2 java 等",
  "948c181": "performance PreLoader",
  "5762e5b": "performance PreLoader",
  "11575b1": "leveldb performance",
  "08b0512": "Demo performance",
  "6bc40b8": "sth performance",
  "640ed27": "performance FailStore",
  "9e60958": "performance FailStore",
  "218ac0c": "performance sth",
  "ece7ccc": "performance logger and job queue",
  "ae05b1a": "performance something",
  "9566333": "performance something",
  "91ba52e": "performance something",
  "0326eb0": "performance",
  "41c33ed": "performance heart beat processor",
  "9ada6eb": "performance mongo index"
}, "LikeButton": {
  "": ""
}, "Linkage-RecyclerView": {
  "": ""
}, "linkis": {
  "0599dda": "code optimization (#4239)",
  "10d7716": "Engine exception prompt optimization (#4256)",
  "e64198f": "[ISSUES-4120]UserIp and Tenant Label Code optimization (#4119)",
  "d7c9561": "fix: Login incorrect prompt optimization (#4165)",
  "bbaa478": "Add ipListManage, tenantManage and codeRetrival page; optimization i18n and partial interaction",
  "f4f6ef6": "[ISSUE-3978]Index optimization and dll script optimization (#3979)",
  "e89c3a5": "[LinkisManager]Interface performance optimization (#3568)",
  "7a1689b": "RM resource operation optimization lock bit segment lock (#3733)",
  "4dc4247": "Performance optimization, remove the synchronization wait operation of mark cache close #3717 (#3720)",
  "01ba4d2": "[ISSUE-3387][linkis-engineplugin-pipeline]errorcode code optimization (#3530)",
  "7f0a251": "[ISSUE-3399][linkis-engineplugin-python]errorcode code optimization (#3529)",
  "e5e643b": "[ISSUE-3374][linkis-engineconn-manager-core]errorcode code optimization (#3527)",
  "aaee556": "[ISSUE-3380][linkis-engineplugin-elasticsearch]errorcode code optimization (#3531)",
  "4455d58": "[linkis-scheduler]module errorcode optimization and documentation (#3546)",
  "6a74bb8": "[WIP][linkis-engineconn-manager-server ]module errorcode optimization and … (#3542)",
  "46259eb": "[linkis-module]module errorcode optimization and documentation (#3550)",
  "9f6d28f": "[flink ]module errorcode optimization and documentation (#3588)",
  "8f01b37": "[linkis-manager-common ]module errorcode optimization and documentation (#3591)",
  "ab1aff0": "[linkis-label-common]module errorcode optimization and documentation (#3593)",
  "6bf25c0": "[linkis-engineconn-plugin-core]module errorcode optimization and docu… (#3602)",
  "2078b80": "[WIP][linkis-udf-common]module errorcode optimization and documentation (#3605)",
  "93f7d0f": "[shell]errorcode code optimization (#3526)",
  "16e5ab8": "[linkis-manager-persistence]errorcode code optimization (#3532)",
  "cc3eeb1": "[linkis-engineconn-core]module errorcode optimization and documentation (#3543)",
  "b5e17f4": "[linkis-gateway-core]module errorcode optimization and documentation (#3551)",
  "620ceb4": "[ISSUE-3414][linkis-metadata-query]module errorcode optimization and documentation (#3557)",
  "9a63015": "[linkis-datasource-client ]module errorcode optimization and documentation (#3564)",
  "9567e59": "[linkis-cs-client]module errorcode optimization and documentation (#3567)",
  "843ff81": "[linkis-bml-server]module errorcode optimization and documentation (#3576)",
  "29ba7f3": "[ISSUE-3402][spark]module errorcode optimization and documentation (#3585)",
  "8cc7422": "[linkis-entrance]module errorcode optimization and documentation (#3600)",
  "f56e94b": "[ISSUE-3412][linkis-datasource-manager-server]errorcode code optimization (#3517)",
  "ddceffb": "[ISSUE-3426][linkis-storage ]errorcode code optimization (#3506)",
  "79f4e09": "[ISSUE-3361][linkis-rpc]module errorcode optimization and documentation (#3493)",
  "e495c17": "[sqoop]errorcode code optimization (#3524)",
  "593fcf2": "[linkis-cs-server]errorcode code optimization (#3520)",
  "a5fc2a5": "[linkis-configuration]errorcode code optimization (#3522)",
  "52c67a9": "errorcode code optimization (#3514)",
  "9548c57": "errorcode code optimization (#3511)",
  "764136a": "errorcode code optimization (#3509)",
  "a06a8e5": "errorcode code optimization (#3507)",
  "7499d9f": "linkis-bml-client module errorcode optimization and documentation (#3488)",
  "66b7676": "hive module errorcode optimization and documentation (#3482)",
  "6fc8744": "openlookeng module errorcode optimization and documentation (#3481)",
  "6cb28d6": "jdbc module errorcode optimization and documentation (#3473)",
  "eac35cc": "[linkis-httpclient] errorcode optimization (#3461)",
  "ce336f1": "persto module errorcode optimization and documentation (#3472)",
  "962c103": "linkis-spring-cloud-gateway module errorcode optimization and documentation (#3470)",
  "cc2a386": "linkis-common module errorcode optimization and documentation (#3356)",
  "19efbe4": "Optimize the performance of the Manager's distributed locks close #2929 (#2930)",
  "11914fb": "[Feature] The connection cache pool key value in the ConnectionManager is adjusted to the data source name + version number. (#2742)",
  "926b56a": "ES engine code optimization and NoSuchMethodError bug fix (#2600)",
  "2f9e9bd": "undonetask interface performance optimization close #2504",
  "8265e11": "Distributed lock sql optimization close 2503",
  "dbcb0d3": "Optimize CS module, merge cs-cache/search/ha/persistencce and other modules into cs-server module",
  "f0f8a78": "Optimized to automatically refresh all LinkisManager caches and add trino ec type (#2323)",
  "caccf89": "[Feature-2082]DataSource Manager module optimization (#2181)",
  "d2202a4": "[CG]Module optimization reduces the number of modules (#2265)",
  "ee252ab": "Linkis-console UI optimization (#2224)",
  "9ba9153": "Variable logic optimization (#2150)",
  "e00582c": "Configuration rpc interface optimization #2031",
  "5da0615": "Code optimization, optimized synchronization lock #2015",
  "caa4f20": "Detail optimization of some pages (#1978)",
  "9f91eee": "add undone job query cache and add api /listundone (#1949)",
  "e3b8d34": "The group cache in EntranceFactory is replaced with guava cache #1901",
  "0654e3a": "Optimize the performance of API /api/rest_j/v1/udf/all #1726 (#1728)",
  "274982f": "Module optimization, remove cs-ec-support module #1580",
  "8443879": "Clean up the connection cache in metadata; Enable not to fetch all partition info form table; (#1506)",
  "390c49f": "fix fastxml can't convert",
  "f83aace": "Module optimization",
  "48a6995": "Module optimization",
  "04df6ce": "Module optimization",
  "35379c6": "Module optimization",
  "541bbbc": "Cooperate with UDF to support version management optimization close #1422",
  "2e9851a": "Module optimization",
  "8a018e2": "provide a method of forced cleanup when HDFS fs cache is enabled close #1380",
  "002b867": "add cache manager",
  "c576f44": "optimization Message.scala",
  "7dd8abc": "Parameter optimization & remove useless comments",
  "5610e8c": "replace codehaus json with fastxml",
  "dcdd393": "Close #882 Fixed some bugs below: 1. accessible-executor ① Engine status of 'Starting' should be treated as 'Idle' ② Engine with status of 'Starting' cannot be shut down ③ Engine lock will release automatically when the task costs too much time 2. callback-service ① Error message cannot be delieverd to EngineConnMannger if the engine failed to start 3. linkis-engineconn-core ① Engine will throw npe when special EngineConn such as spark costed too long to start up ② Engine with multi executor such as spark will report wrong status 4. linkis-computation-engineconn ① Hive engine need to load init sql ② ComputationExecutorhook need to be loaded in certain order ③ Result set for each task need uniform prefix ④ Task id in cache need to be cleared when task is end",
  "ad5add3": "Add flink-engineconn plugin; Optimize the architecture of engine plugin; Avoid the useless log in refreshing plugin cache. fixes #745 close #745",
  "357a08a": "Enhance Linkis JobHistory Module to support task cache, label persistence and manager of job history. Change logs in this commit: 1. Add copyright statement 2. Remove added author",
  "49ef3f8": "Enhance Linkis JobHistory Module to support task cache, label persistence and manager of job history. Change logs in this commit: 1. Add copyright statement 2. Remove default admins in configuration",
  "b8e2e34": "Enhance Linkis JobHistory Module to support task cache, label persistence and manager of job history. Change logs in this commit: 1. Add copyright statement 2. Remove default admins in configuration",
  "02e3d86": "###What is the purpose of the change Related issues: #655 Enhance Linkis JobHistory Module to support task cache, label persistence and manager of job history.",
  "7f671e7": "modify jdbc result set path change 'wds.linkis.resultSet.cache.max' default value",
  "5f4e4f5": "modify datasource cache key; set jdbc driver configuration"
}, "linuxdeploy": {
  "c7daf7b": "Updated icons to current drawables, some optimizations, layout fixes"
}, "liquibase": {
  "e40e4a46": "Merge pull request #3948 from liquibase/dependabot/github_actions/actions/cache-3.3.1",
  "6cc725a7": "Bump actions/cache from 3.3.0 to 3.3.1",
  "33e9cda1": "Remove potentially sensitive information from --monitor-performance (#3640)",
  "91cc260c": "Merge pull request #3936 from liquibase/dependabot/github_actions/actions/cache-3.3.0",
  "f0ec2be9": "Bump actions/cache from 3.2.6 to 3.3.0",
  "06840a95": "Merge pull request #3851 from liquibase/dependabot/github_actions/actions/cache-3.2.6",
  "a7f2b80c": "Bump actions/cache from 3.2.5 to 3.2.6",
  "9af27271": "Bump actions/cache from 3.2.4 to 3.2.5 (#3809)",
  "d8ebc726": "Merge pull request #3750 from liquibase/dependabot/github_actions/actions/cache-3.2.4",
  "6050496d": "Bump actions/cache from 3.2.3 to 3.2.4",
  "55059f6c": "Merge pull request #3654 from liquibase/dependabot/github_actions/actions/cache-3.2.3",
  "6626cfc2": "Bump actions/cache from 3.0.11 to 3.2.3",
  "454c4e74": "Improve dropAllForeignKeyConstraints performance (#2155)",
  "5a957522": "Resets changelog cache upon acquiring lock (#3396)",
  "6eb2c142": "Upgrade actions/cache from 3.0.8 to 3.0.11 (#3370)",
  "ea27954c": "Merge pull request #3190 from liquibase/dependabot/github_actions/actions/cache-3.0.8",
  "35fb9584": "Bump actions/cache from 3.0.5 to 3.0.8",
  "a19df458": "Improved 'include' fix performance: optimized normalizePath method (#3063)",
  "28631d9d": "Merge pull request #3062 from liquibase/dependabot/github_actions/actions/cache-3.0.5",
  "ad4cb5ca": "Bump actions/cache from 3.0.4 to 3.0.5",
  "0c22d6b8": "Improved postgresql prepared statement performance (#2914)",
  "1f4d04e8": "Merge pull request #2929 from liquibase/dependabot/github_actions/actions/cache-3.0.4",
  "83c9e400": "Bump actions/cache from 3.0.3 to 3.0.4",
  "f27f698b": "Merge pull request #2901 from liquibase/dependabot/github_actions/actions/cache-3.0.3",
  "5b657e54": "Bump actions/cache from 3.0.2 to 3.0.3",
  "2eca619b": "Merge pull request #2770 from liquibase/dependabot/github_actions/actions/cache-3.0.2",
  "502e1b31": "Merge pull request #2599 from liquibase/add-monitor-performance",
  "4703e1fb": "Disable max age or filesize on performance monitoring files",
  "7aa5a7f7": "Merge branch 'master' into add-monitor-performance",
  "5d4b2888": "Bump actions/cache from 3.0.1 to 3.0.2",
  "3ca8b4b2": "Merge pull request #2704 from liquibase/dependabot/github_actions/actions/cache-3.0.1",
  "c8e61530": "Bump actions/cache from 2 to 3.0.1",
  "dc3c2a2e": "Merge pull request #2589 from liquibase/fix-historyservice-cache-on-md5-upgrade",
  "717dcd1b": "Reset the ranChangesets cache if we know there were changes to the databasechangelog table.",
  "cf04d4b6": "Merge pull request #2270 from liquibase/fix-mariadb-cache-size",
  "4c93822b": "Handle cacheSize=0 for createSequence on mariadb",
  "448ac3a3": "Merge branch 'master' into fix-mariadb-cache-size",
  "5a849ef2": "Correctly handle cacheSize for mariadb",
  "1d04d4b3": "Correctly handle cacheSize for mariadb",
  "8adf0466": "Merge pull request #2215 from liquibase/improve-loaddata-mysql-performance",
  "8f849c4e": "Use correct cache for built-code",
  "3794ed45": "Use correct cache for built-code",
  "a50e90b4": "The jdbc batch performance is much worse than a large insert statement on mysql",
  "9bab5bd0": "Fix UniqueConstraintSnapshotGenerator cache handling for non-mysql databases.",
  "0f7c0ba4": "Merge pull request #1952 from liquibase/improve-value-provider-performance",
  "1bb41243": "Merge branch '4.4.x' into improve-value-provider-performance",
  "579f23d2": "Added table name to unique constraints cache key for MySQL",
  "c1c6ecf3": "Improve ConfigurationValueProvider performance - Less regexps in StringUtil.toCamelCase and toKabobCase - Cache known key values",
  "0aaeb919": "LoadData is slow when csv file doesn't specify type",
  "28c89201": "Added caching to CommandFactory for performance",
  "ce240430": "LoadData is slow when csv file doesn't specify type",
  "bcb8dae7": "set fail-fast to false",
  "23571fba": "Revert 'Liquibase 3.6.0+ run slowly with unique column constraints'",
  "ed13933f": "Rename method and cache HubChangeLog DAT-5371",
  "bebbb6ee": "Liquibase 3.6.0+ run slowly with unique column constraints",
  "d788379f": "DAT-2513: Sequence cache size for Postgres",
  "8fff1f5b": "DAT-2338: Init cached fullVersion prop for PostgresDb",
  "c98bbaa3": "DVONE-5493 Converted sequence cacheSize attribute from nonNegativeInteger to String",
  "3215f0b6": "(fixed FindBugs performance warning)",
  "8c89a8b5": "Snapshot performance: bugfixes for non-oracle regression",
  "8993f877": "Snapshot performance: better detection of bulk queries",
  "33dbe98a": "Snapshot performance: don't pull down columns for oracle-system tables, and support fetching all objects across schemas in one query",
  "34b29586": "Snapshot performance: better detection of bulk queries",
  "3cde3d54": "replaces 'error in yaml' with 'error in file <FILENAME>' for faster locating of invalid yaml file when using 'includeAll' (CORE-3013)",
  "1fdf692b": "Oracle snapshot unique constraint performance improvements and better multi-schema support",
  "4d12daf6": "Oracle snapshot index performance improvements and better multi-schema support",
  "4bdeb1c9": "CORE-2985 MSSQL Snapshot performance improvements",
  "c8a225be": "CORE-2985 MSSQL Snapshot performance improvements",
  "15f75984": "CORE-2985 MSSQL Snapshot performance improvements",
  "b7256e38": "CORE-2985 MSSQL Snapshot performance improvements",
  "cee6f9ac": "CORE-2985 MSSQL Snapshot performance improvements",
  "2e498edc": "CORE-2805 Multiple calls to generateChecksum() impacting deploy performance",
  "0c2c0fea": "CORE-2805 Multiple calls to generateChecksum() impacting deploy performance",
  "33057b9b": "Give test a little more time to run on a slow build server",
  "223e194e": "CORE-2686 StandardChangeLogHistoryService.hasDatabaseChangeLogTable value is cached too aggressively",
  "c54a6722": "CORE-2552 Oracle performance: fetch view definition along with original view to reduce the number of needed queries",
  "79e463c1": "CORE-2528 Oracle: improve unique constraint snapshot query performance",
  "8bcf8161": "CORE-2528 Oracle: improve unique constraint snapshot query performance",
  "3fcbe359": "CORE-2528 Oracle: improve unique constraint snapshot query performance",
  "ad22a996": "CORE-2528 Oracle: improve unique constraint snapshot query performance",
  "025f7bd1": "CORE-2528 Oracle: improve unique constraint snapshot query performance",
  "73a422b0": "CORE-1904 Slow indexExists performance in Oracle",
  "264671e7": "CORE-864 loaddata performance enhancement",
  "25414bee": "CORE-2355 Improve updateSQL performance",
  "0473cdc5": "CORE-2357 alterSequence does not work as expected when you need to change the cache size",
  "55529c2b": "CORE-2357 alterSequence does not work as expected when you need to change the cache size",
  "dba9bdb5": "CORE-2371 Improve performance",
  "f0142c8b": "CORE-2371 Improve performance",
  "bab5eb61": "CORE-2371 Improve performance",
  "21c6c591": "CORE-2371 Improve performance",
  "3872919e": "CORE-2371 Improve Oracle snapshot performance",
  "61520d8c": "CORE-2371 Improve Oracle snapshot performance",
  "14721fb4": "CORE-2371 Improve Oracle snapshot performance",
  "46dd7ece": "Depending on when 'snapshot all columns' is called, the cache may think it has all columns but only has one per table.",
  "acfa6bd8": "Depending on when 'snapshot all columns' is called, the cache may think it has all columns but only has one per table.",
  "83587a49": "CORE-2357 alterSequence does not work as expected when you need to change the cache size",
  "37cbb3e7": "CORE-2355 Improve updateSQL performance",
  "007701be": "Should not always snapshot all columns for performance reasons.",
  "1438fa22": "DVONE-2578 Added system property to turn off bulk select. This helps DaticalDB performance when calling ChangeLogHistoryService.init(), as in the status logic",
  "30fd36b5": "CORE-2321 Modify logic so that MarkChangeSetRanGenerator can be solely responsible for tagging when executing a change log, while still allowing the database to be tagged outside of that scenario using the necessary update statement with subqueries and aggregate expressions. This can improve performance of executing change logs by eliminating the need to execute unnecessary update statements with subqueries and aggregate expressions. Improve the update statement to use the more-unique ORDEREXECUTED column rather than potentially less unique DATEEXECUTED to ensure that only the minimum number of records get updated. (cherry picked from commit 4014314)",
  "40143140": "CORE-2321 Modify logic so that MarkChangeSetRanGenerator can be solely responsible for tagging when executing a change log, while still allowing the database to be tagged outside of that scenario using the necessary update statement with subqueries and aggregate expressions. This can improve performance of executing change logs by eliminating the need to execute unnecessary update statements with subqueries and aggregate expressions. Improve the update statement to use the more-unique ORDEREXECUTED column rather than potentially less unique DATEEXECUTED to ensure that only the minimum number of records get updated.",
  "3770fc62": "Increase fetch size for potentially faster access",
  "9a0d22d2": "CORE-1844 bulkFetch of foreign keys on Oracle is very slow",
  "dfc85f57": "CORE-2115 Really slow when using fat jars",
  "85df33f4": "CORE-1858 : Tables snapshot fastFetchQuery",
  "95258287": "CORE-1977 CreateSequence with cacheSize=0 failing on Oracle",
  "b86886c4": "CORE-1844 bulkFetch of foreign keys on Oracle is very slow",
  "2ea715a6": "UUID not worth the performance overhead for object identifiers",
  "29551655": "Using URLs in a collection is bad for performance because hashCode makes an internet call.",
  "c83bda53": "Removed cached ran changesets in favor of calling back to the database",
  "3508ff0f": "CORE-1484 very poor performance of dropAll on Oracle",
  "fae2e96d": "Merge pull request #191 from AdamantiumNET/fk-optimization",
  "6fb774ee": "Performance: cache generators per statement/database combination",
  "b81a67b0": "Minor performance: find and save factories in the constructor",
  "71d6ef7b": "Performance work: Column and Table comparators short circut the rest of the chain to be faster since they already implement the default functionality themselves",
  "ed434156": "CORE-1366 Oracle database dbDoc generation performance issues (cherry picked from commit d603dda)",
  "d603ddae": "CORE-1366 Oracle database dbDoc generation performance issues",
  "d0a76b3d": "Cache result of isCaseSensitive() method to improve performance",
  "1a569362": "CORE-1319 dropAllForeignKeyConstraints runs very slowly in mysql",
  "b9c03a50": "Use bufferedInputStream for performance",
  "19516718": "Merge pull request #109 from ojacobson/stripComments-regex-performance",
  "ad0ee909": "Small performance enhancement for checksum generation.",
  "cad901a4": "Add test for performancefix",
  "28579269": "Short circuit addTo method for performance",
  "03b28220": "Improve performance for formatted SQL files.",
  "5eca0444": "CORE-966 OracleDatabaseSnapshotGenerator.readPrimaryKeys() performance improvement",
  "ef1098d5": "attempting to improve performance",
  "704e04c4": "attempting to improve performance",
  "a6479af3": "temporariliy exclude all test for faster release testing",
  "b403139a": "allow ability to specify tableName in indexExists precondition in case implementations can make performance improvements",
  "81f3bc29": "improving diff performance",
  "ffb8a257": "improving diff performance",
  "fee10a14": "improving performance, especially around FK metadata reading",
  "4a24551f": "improving performance, especially around metadata reading",
  "5ed73339": "Changed database compatiblity for cache.",
  "fac4d602": "Added exceptions for unsupported cache` changes",
  "12fbd72d": "Changed cache port so tests run"
}, "ListViewAnimations": {
  "f7166eb": "Fixed fast contextual undo crash",
  "6a57b21": "Removed scalein from google cards due to performance issues on scaling imageview."
}, "litemall": {
  "6883686": "chore[litemall-wx, litemall-wx-api]: 意见反馈组件优化 1. 删除fastjson依赖库 2. 支持图片选择 3. 小程序端校验用户手机号码"
}, "LitePal": {
  "bef3d9c": "Improve performance while saving generic data."
}, "litho": {
  "2bfbb679": "Fix the incorrect logic of using layout cache",
  "43ae0980": "Building and applying cache",
  "74a0aab3": "Add layout cache for `LayoutState`",
  "8137d687": "Expose the setting of item cache size",
  "0f8a92fd": "Create module to hold performance logger code",
  "e7d1ed9d": "Consumes cached layout during layout",
  "babbd91a": "Merge Render & Layout caches into one class",
  "ac158d67": "cache for nested tree will probably live somewhere else and we don't have plans to use it in near future.",
  "262e6195": "Do the fast ref check before the heavy comparison logic in SimpleMountable.shouldUpdate",
  "f844ca7e": "Remove willRender cache check for root component",
  "2eebd41e": "Reuse global key from cached node if available",
  "6826dfe2": "Introduce MeasuredResultCache, allowing to cache measure results by component ID and LithoNode",
  "94b93afc": "Add assertions to count how many times cached value is calculated",
  "271c738b": "Add cache for LithoNode for LayoutWithSizeSpec in LayoutState",
  "6a151a3b": "Delete TransitionsExtension onUnmountItem, as it's never used in LMS and just adds performance overhead to RCMS",
  "da9f3c0f": "Moves measurement of nested trees and cached layouts into subclass",
  "af2d7249": "Remeasure cached layouts during double measurements",
  "90b03f26": "Handle cached and nested separately",
  "0d1646c7": "Separates cached and nested tree assertion APIs",
  "cfe7e043": "cache PerfEvent in LayoutStateContext",
  "dc8ed166": "Use a cached layout only when they are from the same layout pass.",
  "ebe8063a": "Set up the experiment for investigating performance of unified thread pools of different sizes",
  "0c090e58": "Update useCached to use `=` instead of `by`, don't share cached values between same component type",
  "5652e97b": "Do not cache NullLayoutResult",
  "7a56708e": "Do not cache NoOpInternalNode",
  "2ab5be31": "WillRender cached layout now used from LSC without experiment flag",
  "0cf0cdbf": "WillRender cached InternalNode moved to LSC",
  "1c4c93de": "Use cached layout only if component global key matches with parent",
  "729673fa": "Removes resolved layout result caches",
  "80ac86fb": "Changes cached layout from InternalNode to LayoutResult",
  "6a874ef7": "Clean up file cache after Test",
  "ffd3398a": "Compare willRender base contexts when using cached layout",
  "f0b7566a": "Refactor LayoutCache to use SpareseArray for cacheById",
  "cb9a3237": "fix issue with yoga cache",
  "d228ced0": "Handle null global keys for cached values",
  "aee9bf70": "Bump buck cache version",
  "de8d6c59": "Fix cached value generation to respect global key",
  "eb83efc7": "Use cached model in EventHandlerAnnotator",
  "7e97accb": "Fix layout caches for collections",
  "cea105e9": "Remove gating for (successful) Litho device cache scroll perf experiment.",
  "97e709c5": "Removes transition enabled cache",
  "6c61e183": "Add Litho ComponentsConfiguration and gating for measuring efficacy of device cache change in DoubleMeasureFixUtil.",
  "4de1436e": "Use ArrayDeque to improve performance and copy the queue before consuming it to prevent ConcurrentModificationException",
  "64820d34": "Remove gating and keep cached InternalNode on LayoutState instead of Component",
  "9f31659b": "TransitionUtils#areTransitionsEnabled cached in ComponentTree",
  "b7ca8924": "Default ComponentsConfiguration.cacheInternalNodeOnLayoutState to false",
  "d4005cd5": "Keep cached layout on LayoutState",
  "59df0479": "Expose stale cache flag",
  "501f1a17": "Don't box cached value until it needs to be boxed",
  "c017d23b": "pass cachedLayout and cachedMeasure measures to plugin",
  "fb5fa235": "Fix cachedvalue doc example",
  "97787dbe": "Move EditTextSpec's if to be inline with new optimization",
  "b120dd00": "Reduce measure cache size to 8",
  "0a1449f7": "Remove API to constrain measure cache size",
  "2619f086": "Switch style getters to JNI fast calls",
  "7b7394e9": "Check if StateHandler is null before getting cachedvalue",
  "3b438a72": "for experimentation: configurable measure cache size",
  "a0d0bf47": "Don't call `jni_YGNodeFree` as fast native method",
  "da1fa49c": "Track how much measure cache entries are used",
  "52090c64": "count cache hits",
  "a83fc034": "Update cached-values.md (#468)",
  "661ad088": "Don't allow Components to be cached values",
  "a8affb2c": "Add cachedValue support for Sections",
  "8b62a44e": "Roll back `-ffast-math`",
  "7b3a792c": "Don't use ThreadLocal to cache layouts in Component",
  "177415a0": "Release cached layout in UFIFeedbackSummaryComponentSpec",
  "abff9616": "Roll back `-ffast-math`",
  "0e0c0440": "Bump apt cache key (#436)",
  "96b1cb59": "Adapt methods for fast calls",
  "6b8844e4": "Support `!`-style fast calls for Android",
  "fbc3c72c": "Implement fastpath for DataDiffSection",
  "b133497a": "Reduce SDK cache bundle size (#407)",
  "c7a38b31": "Fix broken apt cache (#403)",
  "1f793f8b": "Comments around typeface cache hack",
  "60d094b9": "Don't keep cached layout in shallow copy",
  "833a6b84": "Optimize Workflow for performance (#382)",
  "d93f15dd": "Disable item view cache for RecyclerView used in RecyclerSpec",
  "a6030c23": "Set up new Circle cache key",
  "6124b343": "clean up experimental setup and keep using ffast-math flag",
  "adab0609": "Refactor makeSizeSpecFromCssSpec to cater to Fastmath optimization",
  "53fed0bc": "Remove sync layout optimization in RecyclerBinder",
  "3cd9accd": "Use CI Docker image with pre-warmed cache",
  "77bfaf83": "Optimize the performance of Origami",
  "a856f088": "Fix cached prop application",
  "efab8299": "Introduce InterStageStore cache",
  "e404be54": "Reverting the dirty child optimization",
  "b1f0be33": "Used hasDirtyChildren tag for the optimization",
  "2de554c2": "Disable View measurement caches in LinearLayoutManager for RecyclerSpec",
  "854d062e": "A few small optimizations in ComponentHostUtils",
  "f4c34349": "Revert D4957570: [yoga] Consolidate measure cache for layout nodes and leaf nodes",
  "d5180348": "Consolidate measure cache for layout nodes and leaf nodes",
  "e37f0527": "Gradle optimizations"
}, "LiveEventBus": {
  "": ""
}, "LoadingDrawable": {
  "": ""
}, "LoadSir": {
  "": ""
}, "LoganSquare": {
  "2c7ef41": "Add cached Gson and Jackson parsers to benchmark demo",
  "48b8d27": "Added note on ART vs. Dalvik performance in comparison to Jackson and GSON"
}, "logger": {
  "585c304": "Add code style and build cache to git"
}, "logging-log4j2": {
  "a84072e3": "Set `fail-fast` to false",
  "f37d7952": "Remove unused cache",
  "4ef34552": "Adding new unit and integration (for slow path in java8 StackLocator) tests for stack elements order",
  "7284b54b": "Addressing PR feedback. Adding changelog item, fixing slow path in StackLocator and unit test for correct and wrong order of elements in the stack trace",
  "17a10c39": "This change fixes incorrect behavior of stack elements cache due to a change of data structure from LIFO to FIFO. This bug causes a major performance regression",
  "35cb298a": "Serialize cached location",
  "2ce13466": "LOG4J2-3393 Improve JsonTemplateLayout performance. (#797)",
  "86bde5dd": "Bump maven-shade-plugin.log4j2-cachefile-transformer 2.14.1 to 2.15.0.",
  "88949430": "Use cached empty string array in Log4jWebInitializerImpl.",
  "cc298958": "LOG4J2-3189: Improve worst-case NameAbbreviator performance",
  "2dd7063f": "LOG4J2-3183 Avoid using MutableInstant of the event as a cache key in JsonTemplateLayout.",
  "44deb6f7": "JTL InstantFormatter invalidates cached FixedDateFormat as expected (#576)",
  "78689113": "LOG4J2-3153: PreciseClock doesn't impact DatePatternConverter performance",
  "37ee247f": "See if a delay helps performance results in GitHub actions",
  "b3485ed8": "Fix test on slow machines.",
  "673d316f": "LOG4J2-2880 - Add StackWalker benchmark. Revert back to using StackWalker.walk based on performance results",
  "d3fb653f": "LOG4J2-2880 - Add StackWalker benchmark. Revert back to using StackWalker.walk based on performance results",
  "0efb766b": "Allow this test to be configured from the command line for slower or busy machines.",
  "9026cf7e": "LOG4J2-2644 - Improve performance of capturing the caller's location",
  "e9168137": "LOG4J2-2644 - Call StackLocator earlier by detecting if any components require location info. Use a faster StackWalker algorithm",
  "f8d7a5d8": "LOG4J2-2644 - Code review comments and faster algorithm. Fix pre-Java 9 bug",
  "c8801370": "LOG4J2-2644 - Improve performance of getting location info",
  "e3937fec": "LOG4J2-2606: Substantially improve async logging performance under heavy load",
  "9eed8d68": "LOG4J2-2391 release note grammar s/more faster/faster",
  "01b69e39": "Add timing information to DEBUG logging on reconfiguration; handy to capture how changes to a JDBC Appender for example affects reconfiguration as acquiring database connection can be slow sometimes.",
  "33d5d78a": "[LOG4J2-2391] Improve ThrowablePatternConverter performance",
  "d310dd49": "LOG4J2-2389 - ThrowableProxy was saving and retrieving cache entries using different keys.",
  "52929d57": "[LOG4J2-2368] Recursive logging doesn't clobber cached StringBuidlers",
  "2c631439": "AsyncLoggerConfig optimization",
  "6a89ec88": "Add build note about configuring /etc/hosts to prevent slow unit tests",
  "f39e39b8": "LOG4J2-1718 let ThreadDumpMessage implement AsynchronouslyFormattable (it caches immutable objects in the constructor)",
  "b679156b": "LOG4J2-1010 LOG4J2-1447 ContextInjector tests cannot be parameterized: values are cached in static final fields. Must fork new JVM for each different ThreadContextMap implementation.",
  "580fbb4e": "LOG4J2-1611 performance optimization when merging logger properties with context data: using JdkMapAdapterStringMap is much faster than building a SortedArrayStringMap from an unsorted Map<String, String>; removed method copyThreadContextMap() - became unused",
  "c05f75b4": "LOG4J2-1010 LOG4J2-1447 optimization for merging two non-empty SortedArrayStringMap instances (e.g. injecting context data when logger has properties configured)",
  "2ddd7e15": "LOG4J2-1611 LOG4J2-1010 Improved performance of context data injector for web applications to be on par with standalone applications.",
  "4e4d133c": "LOG4J2-1010 fix performance issue where new context map object created for each call when empty",
  "1c39983f": "LOG4J2-1412 Unbox test increasing the cache size should run later",
  "16eca7fc": "LOG4J2-1010 use the new ContextDataInjector::rawContextData() method to get fast access to the underlying context data in filters and lookups.",
  "33aaf3d5": "[LOG4J2-1548][CronTriggeringPolicy] ConfigurationScheduler schedules the task infinitely after first fire. Heads-up: The new test has a TODO noting that the test uses Thread.sleep() all over the place; it takes about a minute to run. Expect a 1-minute slower build until a better test is in place. Note that the part of the patch related to ResolverUtil was not applied.",
  "83dda19e": "Ignore felix-cache folder.",
  "ac4f156c": "Update Conversant disruptor performance tests to match spin policies used by other disruptor benchmarks",
  "cff46e46": "LOG4J2-1417 added Unbox benchmark to compare performance of web-safe ThreadLocals to default configuration",
  "448dba88": "LOG4J2-1394 fixed broken link in Appenders manual page to RandomAccessFile performance: section was moved from Async Loggers to Performance page",
  "a711b617": "site improvements: refer to performance test results from AsyncAppender",
  "e0fd8e13": "update Layout page to link to performance page in the section on including caller location and its performance impact",
  "b83bb632": "LOG4J2-1179 performance page minor edit",
  "c73f49b3": "LOG4J2-1179 update top page with results of performance investigation",
  "94b5a806": "LOG4J2-1179 various small improvements to the Advanced Filtering section of the performance page",
  "da4b2dec": "LOG4J2-1179 performance page updates",
  "7e548f0f": "LOG4J2-1179 added performance page sub-items to left side-nav bar",
  "3ee784e6": "LOG4J2-1179 added link to performance page to web left side-nav bar",
  "0db58f1b": "LOG4J2-1179 performance page tweak",
  "0900d612": "LOG4J2-1179 performance page: for each test result, explain where the code is to reproduce it",
  "6ecd821d": "LOG4J2-1179 updated async loggers and performance page",
  "d7b0cbce": "LOG4J2-1179 updated performance page",
  "afcce2c2": "LOG4J2-1179 updated graphs for performance page",
  "75b4a2da": "LOG4J2-1179 added async logging response time section to performance page",
  "1e32cafd": "LOG4J2-1179 benchmarks for performance page: compare various Log4j2 appenders to each other",
  "6e983a25": "LOG4J2-1179 added benchmarks for performance page (Log4j2 appenders-only comparison)",
  "d4866b0c": "LOG4J2-1179 update Async Loggers page: removed table with Location performance results, link to performance page",
  "cf434d7d": "LOG4J2-1179 added section on capturing caller location information to performance page",
  "bd4558b8": "LOG4J2-1179 benchmarks for performance page async logging + caller location information",
  "759fa375": "LOG4J2-1179 update javadoc of JMH benchmarks used for performance page",
  "990d071d": "LOG4J2-1179 modified and added benchmarks to compare parameterized message performance",
  "c5669e45": "LOG4J2-1179 performance page added graph & paragraph on service time vs response time",
  "f342618a": "LOG4J2-1179 performance page initial cut (work in progress)",
  "286290c4": "LOG4J2-1297 removed paragraph on logging library comparison: will be moved to performance page",
  "59443e19": "LOG4J2-1179 added graph to compare synchronous logging performance of logging libraries",
  "79777a73": "LOG4J2-1297 improved latency performance text and graphs",
  "21a9a137": "LOG4J2-1297 added latency graphs, text on latency performance comparison",
  "7730ae5e": "LOG4J2-1297 added initial performance test results: synchronous logging throughput",
  "62891aff": "LOG4J2-1297 added initial performance test results: synchronous logging throughput",
  "89808ecb": "LOG4J2-1334 bugfix: ThrowableProxy is not cached, getter method is called in LogEventProxy constructor",
  "c99f4aad": "LOG4J2-1343 bugfix in performance optimization: must flush destination when done",
  "3c6584e4": "LOG4J2-1343 performance optimization: if immediateFlush and buffer is empty then write straight to the file without copying into the buffer",
  "102090f2": "LOG4J2-1339 AsyncLogger performance optimization: avoid calling instanceof TimestampMessage in hot path",
  "7ed09909": "LOG4J2-1271 bugfix: fast path logic should correctly handle edge cases where number of placeholders is more or less than specified parameter values",
  "a2182856": "LOG4J2-1271 use the System.arrayCopy-based fast copy where possible for formatting the message",
  "654212c0": "Make TextEncoder cache an instance field since it depends on Charset",
  "a8bbdcd1": "LOG4J2-1080 AsyncLogger fixes and optimizations",
  "43cefdd8": "LOG4J2-1080 RingBufferLogEventTranslator optimization",
  "3761dba6": "Re-implement CompositeFilter to be backed by a Filter[] instead of an ArrayList<Filter> for performance. Internally, we now traverse the array as a primitive with [] instead of using a new Iterator each time the filters need to be traversed. Note: I have a use case where the internal list was always empty, which meant an iterator was always created, when for example, Logger.isTraceEnabled() was called. After a couple of million times calling isTraceEnabled(), it adds up. Now, the array is not traversed since it is since of length 0. This is means one less object generated per call to isTraceEnabled() and thrown away (the iterator) when a config has an empty Filters section (because child in it is commented out).",
  "6d09a482": "LOG4J2-1296 bugfix in ReusableObjectMessage: should not cache formatted message but return latest set value as is",
  "0f27a6e5": "Annotate performance sensitive method.",
  "963f9654": "LOG4J2-1274 fixed performance bug in TextEncoderHelper.copy(), added TextEncoderHelperBenchmark",
  "8142c3e0": "[LOG4J2-1299] Add pattern converter for thread id and priority in PatternLayout. Remove thread ID and thread priority caches, they are not needed since these items are accessed as plain ivars through getters.",
  "686b9071": "Document performance sensitivity.",
  "96dff0cb": "Document performance sensitive paths in Log4jMarker.",
  "90079e30": "LOG4J2-1297 classes and config for performance tests",
  "15d95ecb": "LOG4J2-1271 Add MessageFactory that avoid allocation by reusing a cached ParameterizedMessage instance.",
  "dca586cf": "LOG4J2-1271 ParameterizedMessage optimizations to avoid or at least postpone allocating temporary objects.",
  "9ec73d28": "Allow multiple reasons for performance.",
  "dd88029a": "LOG4J2-1270 performance test to compare GC-free logging to 'classic' logging",
  "9898972e": "small performance improvement: shortcut to skip FormattingInfo if it is the no-op default instance",
  "b9adcad8": "LOG4J2-1172 performance optimization: split up initialization method into two parts to allow caller methods size reduction",
  "908ae829": "LOG4J2-1172 performance optimization: split up initialization method into two parts to allow caller methods size reduction",
  "1a63d379": "[LOG4J2-1180] Logger cache does not account for message factory.",
  "98538c43": "[LOG4J2-1180] Logger cache does not account for message factory.",
  "5c76f99e": "[LOG4J2-1180] Logger cache does not account for message factory.",
  "7fd641a0": "[LOG4J2-1180] Logger cache does not account for message factory.",
  "131feffa": "Async Loggers performance test refactoring",
  "6d2baec2": "Async Loggers performance test refactoring",
  "d44bf68d": "LOG4J2-1151 Performance improvement: backport fast Java 8 String to byte[] encoder to AbstractStringLayout.",
  "aabd2188": "LOG4J2-1151 Performance improvement: backport fast Java 8 String to byte[] encoder to AbstractStringLayout.",
  "b3162d7e": "LOG4J2-1142 benchmark to compare ThreadLocal, ObjectPool and new StringBuilder instance performance",
  "96864df4": "LOG4J2-1142 benchmark to compare ThreadLocal, ObjectPool and new StringBuilder instance performance",
  "d6391e98": "Changes.xml: [LOG4J2-1128] Reuse StringBuilder to improve performance for String-based layouts: CSV, GELF, HTML, RFC524, Syslog.",
  "e0d0aee8": "[LOG4J2-1125] Reuse StringBuilder to improve performance for PatternLayout and other String-based layouts: CSV, GELF, HTML, RFC524, Syslog.",
  "875f78b8": "[LOG4J2-1125] Reuse StringBuilder to improve performance for PatternLayout and other String-based layouts: CSV, GELF, HTML, RFC524, Syslog.",
  "8025bb18": "LOG4J2-1125 PatternLayout performance improvement by caching and reusing a ThreadLocal StringBuilder.",
  "f92b4c88": "LOG4J2-930 benchmark to compare log4j2 and logback PatternLayout performance",
  "087df2f2": "Revert: I mistakenly committed code intended to be a one-off simulation of cache misses",
  "2ee96915": "Clarified which methods are performance-sensitive.",
  "8124d9b0": "LOG4J2-1096 improved ParameterizedMessage::getFormattedMessage performance by ~2X by replacing StringBuilder by a char[] array and factoring out code to small methods that are easy for the JVM to inline",
  "bb8b302d": "avoid unnecessary work (compacter and presumably slightly better performance)",
  "037f30e9": "performance optimization: avoid unnecessary array copies by allocating a larger initial StringBuilder capacity. The default capacity is only 16 characters, resulting in multiple copies for most log messages.",
  "444a7489": "Add performance tests for FileAppender",
  "e57a4717": "[LOG4J2-812] Performance optimization: avoid use of synchronized SimpleDateFormat in Dat​ePatternCo​nverter. Remove unused import.",
  "03a4e96e": "[LOG4J2-812] Performance optimization: avoid use of synchronized SimpleDateFormat in Dat​ePatternCo​nverter. Remove unused fields.",
  "a4843536": "[LOG4J2-812] Performance optimization: avoid use of synchronized SimpleDateFormat in Dat​ePatternCo​nverter. Fix status logger message to reference the correct class name.",
  "051f7019": "LOG4J2-812 - Improve performance of date formatting in multi-threaded systems",
  "6401ee45": "Reuse the Integer object cache in tests.",
  "0a7b9aeb": "LOG4J2-928 MemoryMappedFileAppender performance test configuration",
  "09934649": "reverted for-each loop to normal for loop in performance-sensitive code",
  "b647427b": "LOG4J2-842, LOG4J2-843: Migrate JpaHyperSqlAppender and JpaH2Appender performance test from JUnit to log4j-perf",
  "b1255cfd": "LOG4J2-840, LOG4J2-841: Migrate JdbcHyperSqlAppender and JdbcH2Appender performance test from JUnit to log4j-perf",
  "a39c2096": "LOG4J2-753 Improved CachedClock performance.",
  "6a6ba886": "Git ignore felix-cache.",
  "4d10639c": "Removed CachedClockTest: it fails spuriously, breaking the build. To be replaced with a JMH performance test.",
  "4231e519": "added performance test for FormatterLogger. Interestingly, FormatterLogger turned out to be faster than {}-style parameters for simple string and double parameters (on Java 8 Windows JVM).",
  "99c537cf": "Wait a little longer on busy or slow machines.",
  "26554534": "removed underscore prefix from instance variables in async performance test class",
  "afdc2f08": "Move plugin cache file to META-INF for OSGi compatibility.",
  "e6da5eb4": "removed test that occasionally fails spuriously on slow/busy machines",
  "812b6e70": "LOG4J2-654: added log4j-perf module with support for JMH microbenchmark performance tests",
  "2bf38758": "Move to performance tests category.",
  "c1981933": "Add several performance tests to PerformanceTests category.",
  "5c6a6444": "performance improvement: added surefire plugin with reuseForks=true to override parent setting of reuseForks=false (speedup: from 22 to 10.5 seconds)",
  "1cf30e69": "performance improvement: changed from reuseForks=false (old setting: forkMode=always) to reuseForks=true (about 8 seconds faster)",
  "1d3ca696": "performance improvement: reduce to a single sleep() long enough to trigger a rollover (speedup from 11 to 2.3 seconds)",
  "960f961e": "performance improvement: sleep not required as rollover is size-driven (speedup of 10 seconds)",
  "cb7e8926": "performance improvement: reduce time taken by performance test from 7.5 seconds to 2.5 seconds (2 tests, gain=10 seconds)",
  "68502f5b": "performance improvement of SyslogAppenderTest and TLSSyslogAppenderTest: decreased running time by 3 seconds",
  "54b007b5": "performance improvement: reduced test running time from 13 seconds to 3 seconds",
  "9e7254d0": "LOG4J2-392 Resolved a problem with the previous solution that resulted in dropped events with slow appenders when application is stopped",
  "4ef9752e": "Add string constant for plugin cache directory.",
  "e43ce0b9": "Refactor plugin cache to its own class.",
  "a4cb99ab": "Fix plugin cache bug when plugin classes are unavailable.",
  "629a6bc3": "Logging clean-up as well as some string performance issues.",
  "8b509429": "Make ThreadNameStrategy configurable in performance test",
  "f71cd51b": "reverted back AppenderRef to appender-ref in log4j-1.2 and logback config files (and some log4j2 performance test config files), also fixed closing </Configuration> tag to lower-case </configuration> in logback config files",
  "4fadef3d": "Explicit boxing and use Long cache.",
  "5ed87017": "Creating performance test for JPA Appender",
  "6930531c": "Creating performance test for JDBC Appender for H2 and HyperSQL",
  "58c02c0d": "update changes.xml for LOG4J2-308 clarify libs used in async loggers performance tests",
  "36eeeb83": "Specified versions of software used for async loggers performance test.",
  "051ab0a9": "@Ignore: Tests a 'complete' XML 'fast' file a.k.a. a well-formed XML file.",
  "6fe169ff": "LOG4J2-154 improve ThreadContext performance with copy-on-write map and stack",
  "864af589": "Add initialization performance test",
  "d65c8167": "Implementing LOG4J2-175: Plugin cache should be reset when addPackages is called - updated PluginManager#addPackage to reset the pluginTypeMap if a package was added, causing calls to PluginManager#collectPlugins to retrieve plugins instead of use the pluginTypeMap cache - updated BaseConfiguration - removed pluginManager member, changed getPluginManager to construct a new 'Core' instance and call collectPlugins on that instance prior to returning",
  "0c09f1f9": "LOG4J2-149 - SMTPAppender will only cache filtered events.",
  "3177acf1": "LOG4J2-149 - SMTPAppender will only cache filtered events.",
  "f3e7cb28": "Add FormattedMessage to performance test",
  "f6dbb42c": "Use this class to analyze Log4J-only performance.",
  "f3748005": "Move variable substitution from PatternLayout to appropriate converters to improve performance.",
  "8916625d": "Move variable substitution from PatternLayout to appropriate converters to improve performance.",
  "bd78bab0": "Update performance page to correct inaccurate information",
  "adddf12a": "Update performance tests",
  "a1886e05": "More work in progress. Moved converters out of layouts since they might be reused. Created FileManagers so multiple appenders can share the same file. Added locking and buffering to FileAppender. Added performance test to compare Log4j 1.2, Logback and Log4j 2.0 file appenders.",
  "a5331598": "Slightly slower but doesn't have the multi-threading issues the prior version would have",
  "9193ad0c": "Fix parent pom so build works. Increase time on test so it passes on a slower Linux desktop"
}, "logisim-evolution": {
  "b3bb7bd": "Addressed reviewers comments Added solution to 'slow' analyzer when more than 6 inputs (step 1)",
  "9957943": "Replaced synchronized StringBuffer with faster StringBuilder",
  "37fe25c": "Reverted back to the 'old' faster sorting algorithm",
  "9359ed9": "Code optimizations",
  "9f7206b": "Merge pull request #684 from MarcinOrlowski/stringbuffer-optimizations",
  "992c64f": "Replaced StringBuffer with unsynchronized StringBuilder for performance",
  "9083e04": "Replaced StringBuffer with unsynchronized StringBuilder for performance",
  "c4a3759": "Added to the FPGA commander the ability to chooce higher and custom tick-frequencies depending the selected FPGA-board. Note that the highest clock allowed is a factor 8 slower than the FPGA-clock due to multi-cycle implementations of some components.",
  "49e0e28": "Major rewrite of the default layout of the circuits. Each circuit has now an attribute indicating the 'old' layout style or the 'new' style where each pin on the box is displayed with it's label. The general switch for the display style is now found under: window->preferences->Layout tab->Item 'Use pin labels on circuit boxes'. For backward compatibility the code is extended with the 'feature' that all old .circ files will be in 'old' display style independent of the setting of the above described checkbox. TODO's: 1) I still need to open a new Frame to get the font-metrics each time a pin is added to a circuit in case of the 'new' style. Although the current implementation should be much faster and cause less flickering (only one Frame is created and destroyed) it still is a kindof 'dirty hack'. Help on a more elegant way of getting the same functionality is appreciated. 2) I added two Strings being: a) circuit.properties => circuitNamedBox b) prefs.properties => layoutNamedCircuitBoxes The need to be added to the other languages, help is appreciated."
}, "lombok": {
  "79c5d2d": "Merge pull request #3358 from dreis2211/config-parent-cache",
  "5523aca": "Merge pull request #2815 from Rawi01/var-val-cache",
  "17ac9e7": "[fixes #2460][fixes #2462] Cleanup internal argument cache",
  "561870c": "Merge pull request #2809 from Rawi01/eclipse-javadoc-performance",
  "cbf930a": "[jdk16] forget optimization...",
  "e6d8665": "[trivial] [build] .gitignore the jvm locations cachefile",
  "2900a8d": "Add new cache hashCode feature to changelog",
  "80133da": "Add documentation for cacheStrategy",
  "32db0ef": "Generate Pure annotation for cached hashCode",
  "3019e73": "Attempt to implement cacheHashCode",
  "e4b61e1": "[performance] fixing bug in earlier performance commit on optimizing lookups of typeMatches.",
  "f8857fd": "[performance] improve typeMatches lookup. Especially in light of the built-in copyable annotations lists growing, this should help performance.",
  "cd97099": "[buildscript] addition of a test task that runs faster; don’t use it unless you know what you’re doing as it skips a few important steps.",
  "01bbd21": "[trivial] some memoryload improvements by not making a new instance but using a cached one instead. Fixes issue #1579",
  "369df91": "[fixes #1554] javac9 now caches type lookups based on ‘position’ which is slapped together by a tuple based on the position (as gleaned from the JCTree object) and the source file (as gleaned from.. Log. *facepalm*). We didn’t update log when resolving for i.e. ‘val’, so the caches get all jumbled up. Fixed by setting the Log’s ‘useSource’ method.",
  "23dcc9f": "[trivial] updated changelog to reflect now confirmed performance fix for eclipse lombok.config resolution.",
  "4294195": "added more caching, this time of java source URI -> Dir on filesystem, to avoid slowdowns involved in that conversion.",
  "3131e93": "added memoization to config lookup in eclipse. This should help make it (much) faster.",
  "5e6cdb0": "Some workaround fix-esque work to prevent serious slowdown issues when refactoring.",
  "e5dc620": "[configuration] ConfigurationKeysLoader now caches.",
  "bb56c53": "[configuration] Use the file system to look for 'lombok.config' files and parse those and cache the results",
  "69d82fa": "Merge pull request #41 from serverperformance/master",
  "b93318d": "AUTHORS buildScripts build.xml doc docker experimental LICENSE README.md SECURITY.md sendSupporters src test website winsrc Fixed 553: @XArgsConstructor (and @Builder on a class) did not look at @Accessors to handle field accessors. AUTHORS buildScripts build.xml doc docker experimental LICENSE README.md SECURITY.md sendSupporters src test website winsrc various operations on names in javac were really slow; they are faster now.",
  "9538adc": "updated changelog to reflect performance improvements of previous commit.",
  "9630fc9": "Massive performance improvements, and a few potentially breaking changes for other lombok plugin developers.",
  "0dbc68a": "Added an optimization to javac: Don't force new resolution rounds if none of the handlers in the next priority level need it.",
  "306a9ef": "Generated nodes are now cached using a fully-weak Map.",
  "39d447d": "This fixes 'val' not working in javac7. The LogDisabler used to simply suppress writes to standard out, but javac7 has a redesigned error system where errors are cached. Now the LogDisabler also wipes out any cached errors added in between a 'disable' and 'enable' session. Ironically we actually whined to Joe Darcy about javac6 emitting errors 'too early' and this caching system is the result. Heh.",
  "ac8aae9": "Updated to ivyplusplus 1.7 and used ivy:cachedunjar to shave a second off build times.",
  "3a89cbe": "Ivy cache is now local to prevent cache conflict with other ivy using projects.",
  "b6cd2fb": "Added 'clean' to all the publish targets. Occassionally dirty build dirs cause mistakes, which isn't worth massively slowing down builds normally, but it is, when publishing.",
  "2547ee7": "This is a fix for the auto-format. The fix is NOT ready for proper release - it does rather a lot of stack introspection which may slow things down far too much.",
  "4c18c77": "We were tracking ideas for annotations on the window, but writing on those gets old fast, so moved it to a text file."
}, "lombok-intellij-plugin": {
  "53b6879": "[lombok] using nameHint for processing lombok annotations like Builder/Value/FieldNameConstants, prevent recursive invocations of PsiAugmentProvider, drop all useless lombok custom caches",
  "e3da6a1": "maybe some performance increment by cache drop on psiClass changes instead of all psi out of block changes related #660, #568",
  "d25ff91": "removed invalid cache",
  "49c35ac": "added basic in-memory cache for lombok config discovery",
  "58b04ee": "used RecursionGuard to prevent recursions during Lombok augment calculations, should improve performance for #516 and #535",
  "b0a1acb": "Builder optimizations",
  "769c9ba": "optimize provider: return fast",
  "a061ab1": "Recalculate cached FQN if annotation name changed Fixed #210, #270, #423",
  "e5d603c": "test performance",
  "a0e7c71": "use java StringBuilder instead of deprecated Jetbrains cached wrapper",
  "dc820d5": "added travis cache added basic editorconfig reformatted",
  "8bdffff": "Using reflection to change hasModifierProperty accessibility and removing doHard. Reflection is used to call the method anyways, so performance penalty is there no matter what",
  "cbc9232": "Using latest gradle wrapper version for best compile performance",
  "e5d3b7e": "Optimizations for performance issues like #180 - improved batch handling of multiple annotations - reduced codebase for Experimental-Annotation-Processors",
  "8a6b420": "Optimizations for performance issues like #180 - cache annotation fqn in PsiElement UserData -> saves a lot of calls to class resolve",
  "b1c1b86": "Prepare some optimizations for performance issues like #180 work in progress 2",
  "5dffe61": "Prepare some optimizations for performance issues like #180 work in progress",
  "a243f5e": "Modified caching settings and skipped processing of annotation and interfaces Low performance of @Builder analysis #180",
  "c8cc4d2": "added cache",
  "16ffac6": "updated cache settings",
  "503e80e": "update cache immediately after refactoring"
}, "lottie-android": {
  "2b80dab": "Fixed the stream was not closed when the lottie animation hit the cache (#2253)",
  "2ca5196": "Use the correct cache key when parsing NetworkFetcher animations (#2198)",
  "3c7f33d": "[Snapshot tests] Disable the path interpolator cache (#2195)",
  "84893f8": "Add the LottieConfig.Builder.setEnableNetworkCache() method to completely disable internal network cache if needed (#2158)",
  "122b950": "Fix LottieAnimation recomposes on every frame degrading performance (#2078)",
  "a51606c": "Don't cache dpScale in Utils (#1915)",
  "37893c8": "[Sample App] Reset performance tracker on each iteration (#1951)",
  "06571da": "Move snapshot tests into their own app and improve performance (#1914)",
  "ac17e0f": "[Compose] Warm the task cache before LaunchedEffect runs (#1891)",
  "194d96d": "[Compose] Allow custom cache keys, dynamic properties for images, and remove font remapping (#1847)",
  "1d7f556": "[Compose] Updated images API and add an option to not cache compositions (#1836)",
  "ae9317b": "Add cacheKey to LottieCompositionFactory call (#1617)",
  "58b6b75": "Two cache fixes (#1502)",
  "ee94224": "Add the ability to set custom cache keys or set non cache key (#1450)",
  "1e3f413": "Add KeyframesWrapper to improve setProgress() performance (#1426)",
  "1d8eb6a": "Always use original context (Activity) when obtaining cache key and resource stream to correctly load and handle raw-night resources when the dark mode is on (#1361)",
  "d9c982e": "Include day/night mode in cache keys (#1352)",
  "b52dce3": "Properly limit LRU cache size and make it configurable (#1100)",
  "204336f": "Prevent returning cache values when null cache key is set (#1097)",
  "bdbb2cd": "resove bug local cache not working (#1040)",
  "b707b8a": "Added memory cache layer for async network requests (#986)",
  "3f9ee24": "Replaced Strong/WeakRef cache with a LruCache (#861)",
  "5af69e7": "Synchronize path interpolator cache",
  "1c1e26a": "Only dereference interpolator cache WeakReference once",
  "1a0e0d7": "Make Weak the default cache strategy",
  "5cf6702": "Adds a performance tracker to track render times per layer",
  "db3a251": "Load cache attribute before animation so the cache strategy gets set",
  "f027871": "Improve the performance of mattes and masks 200-1000+% (#201)",
  "cf517f4": "Significant improvement in matte and mask performance (#130)",
  "43278ee": "Initialize caches inline",
  "9d32fff": "Updated FontFragment so that it's actually performance (#19)",
  "eb73584": "Move getValue() out of loop for performance.",
  "c972ebe": "Reverted cache strategy. Compositions aren't reusable yet.",
  "9b7dcab": "Fixed a scale perf optimization",
  "6c24dd8": "Cache duration range progress. It was surprisingly slow on systrace",
  "e4a8125": "Cache keyframe indexes for a slight performance boost",
  "bc75984": "Replace all foreach loops with fori loops for performance"
}, "LQRWeChat": {
  "": ""
}, "LSPosed": {
  "6763a17": "Fix resource optimization",
  "a31162e": "Use gradle-build-action to cache more files (#2400)",
  "d671dc5": "enable configuration cache",
  "39bd97a": "Make parseMethod fastnative",
  "793c5c9": "LSPManagerService: Change SELinux label of entire cache directory (#1933) (#1944)",
  "57c1b8b": "Use ccache for all native modules (#1787)",
  "4b9a4f8": "Ensure um is ready when updating cache (#1737)",
  "3fdc4e5": "Fix cache deadlock in `XposedHelpers.java` (#1723)",
  "583be18": "Fix performance traps of reflection members in `XposedHelpers.java` (#1719)",
  "36d1f8d": "Parallize module cache and preload (#1681)",
  "771bd77": "optimization",
  "d6dfc3a": "Unshare `/data/resource-cache` (#1627)",
  "e3fee78": "Add lto cache to github action cache (#1518)",
  "9480844": "Use thinlto & enable lto cache (#1517)",
  "8c64a8d": "[app] Fix repo empty when cache hint (#1484)",
  "4ce312d": "[CI] Fix ccache (#1301)",
  "9833d16": "[core] Update the apk path when installing the module, broadcast before update cache (#1221)",
  "fd2162b": "[core] Skip updating cache again when force update (#1127)",
  "4eeadd0": "[core] Explicit `sv` for optimization (#1021)",
  "f2d4092": "[core] Invalidate cache when pm is dead while caching (#1007)",
  "9d56cab": "[ci] update ccache config (#998)",
  "c842f7f": "[app] Remove fastscroll (#916)",
  "29afb44": "[core] Clear activityThread cache (#867)",
  "9bc4b79": "[CI] separate gradle cache (#712)",
  "4da161f": "[CI] make gradle cache old (#711)",
  "989e9e1": "[core] Test ccache (#436)",
  "16982c5": "[core] Fix ccache on master build (#435)",
  "a1201ae": "[CI] Update cache",
  "40c43fe": "[CI] Update cache",
  "7eda1f6": "[CI] Use ccache to cache github action building",
  "a7ada14": "[CI] Fix build cache (#336)",
  "f881c36": "[CI] Add build cache (#334)",
  "f641547": "[shell] No more cache",
  "d5ee8d3": "[core] Async cache (#221)",
  "76cf325": "[app] Improve scope list performance",
  "cc0afb0": "[core] Refine dexmaker cache stategy for YAHFA (#187)",
  "68bb2d3": "Fix duplicate declare when cache fails (#59)",
  "9553af5": "Move sandhook cache to /data/misc",
  "8c838c6": "Enable yahfa's cache",
  "6dd10b1": "Flush CPU cache in YAHFA",
  "7114fd6": "Add fast scroll for lists",
  "cf021f3": "Show error info when app optimization failed Enhancement module updates",
  "1b67e7c": "SandHook: remove useless code & fix dex cache",
  "a857670": "Temporary fix for hooker method index exceeding method cache size",
  "9a0044b": "Add a switch to enable boot image deoptimization selectively"
}, "Luban": {
  "": ""
}, "lucida": {
  "5db5633": "Add Kubernetes scripts for Memcached",
  "ce1b98c": "Add memcached to python requirements",
  "e232271": "Add memcached",
  "a9cc354": "IMM: successfully cache descriptors matrices in db",
  "4de39f3": "IMM: successfully cache descriptors matrices in db",
  "ad16063": "IMM: cache Mat descriptors in db",
  "91bf9c2": "IMM: cache Mat descriptors in db",
  "e2a07a7": "[sirius-suite] add more handling for pthread and move to inline calls for performance",
  "e9cbc01": "[sirius-suite] add more handling for pthread and move to inline calls for performance",
  "d7959ba": "store desc, faster matching",
  "9940d0c": "better sized+faster"
}, "Luyten": {
  "06d6eee": "JAR-scoped ITypeLoader and MetadataSystem instances for better performance. Added debug languages menu. Added standard type loader to make sure JRE types can be resolved."
}, "lwjgl3": {
  "571d5df": "build: customizable revision in cache-kotlinc",
  "4e1b8a6": "build: simplify cache-kotlinc dependencies",
  "5245353": "build: move kotlinc cache to the ci folder",
  "bd6a96a": "build: simplify cache-kotlinc",
  "b47307c": "build: kotlinc output caching for faster CI builds",
  "1b7e21e": "perf(GL/GLES/AL): cache reflection of caps fields",
  "71adb3f": "perf(core): improve memCopy performance",
  "0fb5243": "perf(core): improve memSet performance",
  "3c74c7c": "perf(core): improve memLength performance",
  "3de8de7": "perf(core): add thread-local array cache for text decoding",
  "8305809": "perf(core): struct inlining optimizations",
  "83155de": "feat(tootle): add performance testing to the demo",
  "1aba8cf": "perf(lmdb): improve incremental growth performance on Windows",
  "b7cff93": "Optimize build performance",
  "7d92179": "Enable link time optimization on Linux and OS X",
  "9f5616f": "Enable whole program optimization on Windows",
  "4707634": "Add API for stack allocations and improve thread-local lookup performance",
  "dcc5b38": "Rebuilds with kotlinc are still horribly slow...",
  "cd39fd9": "Refactor text encoding for improved performance",
  "cc13455": "Refactor structs for improved usability, type-safety and performance",
  "4c22d1a": "Use sun.reflect.FieldAccessor directly for better performance",
  "2f854c4": "Replace duplicate() with slice() for better performance",
  "4ad8138": "Reduce default APIBuffer capacity and align to cache-line instead of page",
  "b4e73c6": "Add the thread-specific cache macros",
  "4c05e86": "Add possibility to change number of bounces in ray tracing demo. Also increased performance by precomputing random values once and reusing it all around a shader invocation. Also improved quality of random sampling functions.",
  "0ac01fd": "Added automatic download of jar dependencies from Maven Central. Improved ant build performance by skipping unnecessary work.",
  "2e13c1b": "Massive callback performance improvement: we now use AttachCurrentThreadAsDaemon and never call DetachCurrentThread. Added native kernel performance measurement in CLDemo.",
  "1fce7bf": "Code clean-up after type inference bug fixes in kotlinc. Also updated kotlinc to a custom build with 15% better compilation performance."
}, "MagicaSakura": {
  "": ""
}, "MagicCamera": {
  "": ""
}, "MagicIndicator": {
  "": ""
}, "mall4j": {
  "": ""
}, "mall-learning": {
  "": ""
}, "malmo": {
  "a87c2e3": "0.2 was too slow... agent never actually moved.",
  "6394ccf": "Now zips/tars recording on the fly - much safer/faster.",
  "9a66cb0": "Added option to fast-forward falling motion in discrete mode.",
  "ffa0b95": "Merge pull request #139 from Microsoft/cacheJAXBContexts",
  "c902e36": "Caches JAXBContexts because they are unbelievably slow to create.",
  "361a7d8": "Fix: manual_input_test.py was sending commands too fast when run as an integration test.",
  "71e735e": "Merge pull request #38 from Microsoft/fix-slowdown",
  "9ff7cbd": "Merge branch 'master' into fix-slowdown"
}, "mapdb": {
  "f73e1bd": "DB: use instance cache to prevent multiple instances of the same collection with different locks",
  "c3ff112": "Improve Multi Lock performance",
  "2ef6c55": "BTreeMap: faster size() on descending submap",
  "0d1f240": "Spurious NullPointerException when closing soft/weak cache , fix #648",
  "03a4020": "StoreCached: fix NPE if compaction is called with dirty write cache",
  "a795f91": "StoreWAL: handle case when write cache becomes inconsistent if commit dies. Fix StoreWALTest.crash_with_interrupt",
  "6028fbe": "Issue #614: improve RAF.hash performance",
  "1b07e3a": "Make tests faster",
  "05898e5": "DBMaker: disable cache with TxMaker. Fix #567",
  "b68609c": "Volume: add fileLoad() method to precache file content. Update documentation",
  "11036b4": "Store: small performance improvement on deserialization",
  "bb98a50": "StoreDirect: cache freeSize value and increment it at runtime",
  "7fb6a75": "StoreDirect: compaction was not thread safe. Fix #542, in future have to rework this section, to improve performance.",
  "21b9053": "Optimize imports, make tests faster",
  "33367aa": "Some unit tests are optional, now it runs much faster.",
  "e9f9ad8": "BTreeSet: make test faster",
  "c14bd7c": "SerializePojo: change Class Catalog format. Eliminate ClassInfo caches. Fix #551",
  "f821417": "HTreeMap: add cache overflow",
  "27a398b": "Make DataIO.packInt() faster for smaller integers. This will benefit mainly string serialization. Fix #489, credit Max Bolingbroke",
  "a64b818": "BTreeKeySerializer.STRING: add performance TODO",
  "894532d": "Sprinkle caches around to make Pojo deserialization performance acceptable",
  "2d128e1": "Share calls to getContextClassLoader as much as possible for performance",
  "e53abea": "QueuesTest: test failed on slow machine, increase timeout",
  "663c39f": "Tests: do not use Assert.assertArrayEquals, it uses reflection and slows down test execution",
  "ef1cc21": "Store: WeakSoft cache now has background expirator",
  "2b8dcf8": "CC: decrease default cache size to prevent OOEMs",
  "1bee436": "Store: fix hashing method in segment locking and cache",
  "484c19a": "DataIO: rework pack/unpack method so deserialization is faster",
  "23fa987": "BTreeMap: Fix #161, reverse iteration was slow. Cache BNodes so it should be 30x faster now",
  "9569b63": "Add write cache",
  "1e3b272": "HTreeMapTest: make test faster",
  "fbf3d7d": "DataOutput2: small performance improvement",
  "0ce07f5": "Long Packer: increase packed-long performance a bit - remove forgotten assertion",
  "c31b8d7": "Long Packer: increase packed-long performance a bit.",
  "089ce5c": "Caches: improve HardRef cache performance, make it JIT friendly",
  "1add8e0": "Add `DBMaker.cacheCondition(condition)` to decide if record should be included in Instance Cache.",
  "4036a16": "Merge branch 'fasterdude7-master'",
  "1d530bd": "Revert optimization which broke compression, see #332",
  "8fb341f": "Caches: improve performance in soft/weak ref cache with 'clearCache()'. See #317",
  "a085578": "Caches: improve performance in soft/weak ref cache. Thanks to 'jendam' for suggesting it. See #317",
  "4947f37": "Site: add chapter about caches - fix typo",
  "56dba4f": "Site: add chapter about caches.",
  "5ab6458": "StoreWAL: do not delete log file after every commit, keep it around so commits are faster",
  "39220a0": "Volume: mmap file chunks were synced multiple times, causing slow sync. See #298",
  "3a27024": "HTreeMap: add maximal cache size, add CacheOffHeap examples",
  "8074ad8": "Example: improve cache example, fix typo",
  "05d1da4": "Pump: replace TreeSet with Arrays.sort(), faster sorting.",
  "e376503": "SerializerPojo: fix Integer serialization, negative values would always consume 5 bytes, no optimization was applied, negative integers now consume between 2 to 5 bytes.",
  "5baf7fc": "Volume: small performance improvement by replacing divide operation with bite shift.",
  "915fe30": "Utils: replace IllegalArgumentException with assertion for better performance.",
  "86a13d5": "Checksum: replace CRC32 with faster Adler32",
  "d227acd": "Fix race condition in HTreeMap cache",
  "7a643e6": "Updates in HTreeMap, fixed race condition, added extra cache methods.",
  "6adb1d1": "Add cache expiry params for HTreeMap, also fix failing unit tests",
  "f61cbbf": "Fix #149, BTreeMap.subMap(...).keySet().iterator() slow",
  "8158378": "Reduce overhead of AsyncWriteEngine. Removing Write Queue improves latency and performance",
  "10ffed5": "Improve performance by recycling DataOutput2 instances",
  "c09ba93": "First step towards fast creation of BTreeMap from unsorted data.",
  "bc783e7": "Make tuples final for better performance",
  "d6f3897": "Issue #123 - Improve RAF performance by replacing RandomAccessFIle with FIleChannel. Also introduce 'keepIndexMapped' and implement spaceReclaim quota.",
  "4943faa": "Rework AsyncWriteEngine to be more reliable and faster.",
  "c4e706a": "Various fixes - circular queue - compact - async performance",
  "7b388a2": "Fix bug in cache",
  "8a4af96": "Fixed null value in cache",
  "80a5856": "Add Javascript Charting library for showing performance charts on site",
  "ce600c6": "Update cache locking, add benchmarks",
  "f258ce2": "Update caches to be thread safe.",
  "494d734": "Introduce LRU cache",
  "faea439": "Yet another fix for concurrent instance cache",
  "f8055c5": "Small performance improvement in Cache",
  "e341934": "Introduce Weak/Soft reference cache. Fix various bugs in transaction mode and handling null records.",
  "2e113db": "Add and change default cache to fixed size hash table.",
  "667adc5": "Update README, fix some performance issues, add some examples"
}, "Mapper": {
  "253aeee": "去掉cached，这个属性不能使用。"
}, "mapstruct": {
  "12ac348": "#2136 performance improvement 2 step mappings (#2138)",
  "7b5a233": "Reduce cache lifetime of latest-version badge from 30d to 1h",
  "d0c685f": "#365 cache implementation",
  "716b34b": "#169 Copying sources from core-common to core/core-jdk8 using maven-resources-plugin to allow faster builds and nicer roundtrips in IDEs"
}, "MarqueeView": {
  "": ""
}, "MarsDaemon": {
  "": ""
}, "material": {
  "": ""
}, "Material-Animations": {
  "": ""
}, "material-calendarview": {
  "4202901": "After reading this comment (https://github.com/prolificinteractive/material-calendarview/issues/8#issuecomment-241205704) that multiple MaterialCalendarViews can cause slowdown, created another sample activity with multiples to better test this.",
  "96067df": "Misc initialization performance improvements based on method tracing",
  "5390ae2": "Mark cache fields as transient",
  "357b380": "Introduce DecoratorResult to cache results of decoration"
}, "material-components-android": {
  "203d5ec": "[M3][Search] Improve performance by preventing item change notifications during inflation.",
  "86600c2": "[MaterialToolbar] Override inflateMenu() to stop dispatching item changes during inflation for a performance improvement",
  "072578d": "[Switch] Refine tinting logic to have better performance",
  "0ad429d": "[TextAppearance] Updated TextAppearance to load font synchronously if its cached. Also updates lib to depend on 1.5.0-rc01 for the ResourcesCompat#getCachedFont method.",
  "b12c5c5": "[DatePicker] Speed up calendar performance by only updating certain views when a day is clicked, instead of recreating and redrawing all of them.",
  "416eab5": "[ProgressIndicator] Improved inflation performance. - Deferred animator initialization to the moment animations start. - Improved inflation time (1k times) from 1478 ms to 325 ms. For the framework ProgressBar, it's about 190 ms.",
  "db7fde2": "[CardView] Fix potential Proguard/Dexguard/R8(?) optimization problem",
  "a0b647a": "Setup some internal logging to collect performance metrics.",
  "32fadf4": "Fix fast subsequent TextInputLayout.setError() calls am: 7d1f61a17d am: b695a48287",
  "a746839": "am 2d53b446: am 9c1a007d: Merge 'TabLayout measure performance improvements' into mnc-ub-dev"
}, "MaterialDateTimePicker": {
  "1196361": "Improved performance by changing selectableTimes to a TreeSet",
  "1512481": "Made DateRangeLimiters implement Parcelable rather than Serializable Fixes #349 It is far too easy to leak a Context or cause an IOException with Serializable. It's slightly harder now to implement the interface, but clients will be forced to make a concious choice on which fields they want to retain (and they'll receive a small performance boost in the process)",
  "0e3e3ae": "Improve performance when enabling or disabling days Fixes #304",
  "9a460b8": "Merge pull request #265 from dimsuz/year_adapter_optimization"
}, "MaterialDesignLibrary": {
  "1c574cf": "Fix some bug and performance improvement"
}, "MaterialEditText": {
  "": ""
}, "MaterialSearchView": {
  "751e415": "Fixes performance issue"
}, "material-theme-jetbrains": {
  "596aca7": "cache button",
  "28dde49": "better tree performance",
  "335412c": "cache button",
  "d7e7eb0": "better tree performance",
  "8fe026e": "Merge pull request #457 from ChrisRM/dir_icon_optimization",
  "41235d9": "cache directory icon flags"
}, "MaterialViewPager": {
  "": ""
}, "Matisse": {
  "": ""
}, "matrix": {
  "7a57482": "Merge branch 'feature/dev-opengl-optimization' into 'feature/dev' (merge request !173)",
  "e151841": "feat(opengl-leak):add java stack opt & tls cache opt & async queue opt",
  "0197f2d": "Improve memory hook performance",
  "a0a58b8": "Fix: revert my naive 'optimizations' since rel(a).dyn segment can have relocation records with the same name.",
  "cc1993e": "fix(BinaryImage): get binary images with cache",
  "56155c4": "Refactor fast-arm-exidx unwinder",
  "08f514f": "disable fp unwind for performance",
  "325365c": "set fast flag true for fallback",
  "029cc4f": "Merge branch 'unstable/dev/fast-unwinder' of http://git.code.oa.com/wechat-components/libwxperf-jni into dev",
  "96ea606": "Merge branch 'unstable/dev/fast-unwinder' of http://git.code.oa.com/wechat-components/libwxperf-jni into dev",
  "b5cc5f9": "add fast dwarf unwind",
  "c260563": "add fp fast unwind",
  "e191d13": "Merge branch 'unstable/dev/fast-unwinder' into dev",
  "799311e": "Merge branch 'unstable/dev/libunwindstack-temp-2' into unstable/dev/fast-unwinder",
  "ccf1790": "Merge branch 'unstable/dev/fast-unwinder' into dev",
  "8f78017": "Merge branch 'feature/dev_add_webview_performance_ghost' into 'feature/dev_experience_merge' (merge request !3)"
}, "maven": {
  "23ffe334": "[MNG-7236] The DefaultPluginVersionResolver should cache results for the session",
  "84a1ff2d": "[MNG-7063] Add unittest to ensure rereading a pom won't return the cached Model",
  "94612f96": "[MNG-7060] Let build fail fast in case any maven-gpg-plugin goal is called",
  "2ef0e5ba": "Upgrade github actions cache and use m2 cache for integration testing as well",
  "0515cb1f": "[MNG-6720] MultiThreadedBuilder: wait for parallel running projects when using --fail-fast",
  "690841e9": "[MNG-6697] New fast model interpolator not using reflection (#261)",
  "9b8ae7d5": "[MNG-6702] Improve DefaultModelValidator performance:",
  "d34e8fbd": "[MNG-6631] documented the performance intent",
  "44ad1aaf": "[MNG-6631] - Make DefaultArtifactVersion faster",
  "ebac1659": "[MNG-6630] - Make ComparableVersion faster",
  "baed5a29": "[MNG-6629] - Make ID validation faster",
  "961746f2": "[MNG-6571] separate caches for create from spec and version",
  "657fbb76": "Revert '[MNG-6571] forgot to put new instance in cache'",
  "6bd8bb9b": "[MNG-6571] forgot to put new instance in cache",
  "8f9075d3": "[MNG-6571] cache VersionRange instances, they are immutable",
  "d9facde3": "[MNG-6530] Introduce system property to disable global model cache",
  "ba74b966": "[MNG-6492] - Minor improvement on Array construction, conversion performance",
  "8bc3c207": "[MNG-6311] Implement class-level ModelCache in DefaultProjectBuilder to solve slow pom resolutions",
  "69c512a8": "Add the serverId to scm-publish so that we do not need to rely on cached svn credentials",
  "8f8c45c9": "[MNG-6123] detect self references in POM and fail fast o Added unit test and self referencing pom",
  "94c3b600": "switch to embedded core ITs run for faster result",
  "9f50eabe": "MNG-5793 do not register same realm both with plugin and extensions realm caches",
  "693f8f66": "MNG-5677 hooks to allow fine-grained cache management",
  "d728b021": "Prevent potential NPE and provide a faster path via identity check",
  "ad00a36a": "Update to RAT 0.10 which does not kill with performance like 0.9 did",
  "b7e3ce22": "I'm reverting this as per Benjamin: the change to the artifact filter is an optimization to avoid downloading needless artifacts, but for cases of uber JARs or other stuff pulling in those packages, the class realm manager's imports are crucial",
  "cc2da2fa": "o using slf4j 1.7.4 which adds the method to clear the logger cache o update the code to use slf4j 1.7.4 o the logging failures in the embedded ITs are now fixed",
  "100bbd03": "o Optimized the cache around the hotspot in interpolation somewhat",
  "e778ea67": "MNG-5312: MavenProject.getParent intolerably slow when import scope used heavily Submitted by: Jesse Glick",
  "a31a8989": "compiler plugin 2.4 is faster",
  "c53d95ce": "MNG-5212 preserve PluginDescriptor dependencies in descriptor cache",
  "712c4fff": "MNG-5212 preserve PluginDescriptor dependencies in descriptor cache",
  "881d5884": "upgrade to surefire 2.7.2 which is more faster",
  "a7d9b689": "MNG-5003 populate mojo descriptor with cached plugin realm",
  "e2600769": "MNG-4916 cache extension plugin resolution errors",
  "f5ad9a45": "o Fixed lazy repo creation to cache result repo",
  "e7bc1a99": "o Improved effeciency of cache",
  "459c2e4e": "o Strengthened cache key",
  "1957ff0d": "o Optimized performance",
  "c352138d": "o Fixed tracking of extension realms in cache",
  "341f030f": "o Generalized plugin realm cache",
  "102f4ab6": "[MNG-4334] maven core caches settings.xml",
  "3c34aa8c": "[MNG-4334] maven core caches settings.xml",
  "90333e8c": "o Removed obsolete code (plugin descriptors are cached by dedicated component)",
  "91d45930": "o Fixed project building helper to use repo cache",
  "24bd8d77": "o Introduced RepositoryRequest to hold the bare minimum of items required for repo accesses o Added cache for metadata.xml",
  "09d93a0b": "o Fixed critical performance regression introduced in r801648. The relocation is now grabbed alongside the direct dependencies when we get the resolution group, these bits are stored in the same file and so we can as well process them in one go. Issue id: o",
  "c2078c65": "o Enabled model cache",
  "57f82d76": "o Introduced model cache to avoid repeated building of models that can occur multiple times during a reactor build (e.g. parents and imported POMs)",
  "f48d77ce": "o Made plugin version resolution more robust and ensured we fail fast upon resolution failure instead of some NPE in later execution steps",
  "043c8d69": "o Optimized performance by utilizing that project identity is based on g:a:v which is just the map key",
  "9a6561c6": "o Optimized performance (the string concatenation in getId() severely affected ReactorArtifactRepository which in turn is heavily used for key calculation/comparision in the plugin & metadata cache)",
  "09f970f1": "MNG-4041: maven core returns stale project state during extended use. this is a patch which provides intelligent caching and yields a very substantial performance improvement. Submitted by: Igor Fedorenko",
  "0968ba79": "o Flipped interpolation over to use the in-memory based interpolator from 2.2.x which makes the overall building twice as fast as before",
  "31894363": "o adding a metadata cache Submitted by: Igor Fedorenko",
  "d616f1d8": "o Made project cache sensitive to file modifications",
  "b81a59ba": "o Added clear() method to project cache o Added license headers",
  "dd16571f": "o maven project cache, integrators can do what they like with project caching",
  "4cab7496": "o simple plugin classloader cache, i cannot anticipate what client code will need. Igor already proved that it's impossible to generalize for the IDE environment and it's just easier to let IDE folks do what they like.",
  "1c2bb80d": "Perf optimizations through direct use of model.",
  "f5c0ef6e": "o Marked potential performance problem",
  "ecb1bfe2": "o found another untested path way which i'll make another test for tomorrow. executing one mojos work, but when stringing them together the optimization I'm trying to make for incremental support fails.",
  "a15c47e2": "[MERCURY-103] added session tracking to the metadata cache, shortened bs from 12 to 4 minutes",
  "dee79ea2": "o Fixed dependency resolution (the dependency artifacts are cached so we can't employ the scope filter here)",
  "0235b8e9": "[MNG-3969] intermediate commit - all dependencies are processed correctly, including modello. Problem was stale cached metadata. Also upreved to the released mercury",
  "75976990": "[MNG-4035] - Removing plugin manager changes. This is breaking tycho build and also causes a hefty performance hit. Using mixins is over-generalizing this solution. Only need to cleanup config merging.",
  "92129e51": "o as we collect rules embedded we'll capture the here fast before we forget, we can put them in the spec prop later",
  "5fb22806": "Much better performance by making the cache static, probably due to multiple instances of ProjectBuilder.",
  "a14e0aa3": "Removed build history to speed up performance. Should add this back in for debug mode.",
  "53cfcc89": "Removed use of workspace from project builder. In the build of trunk, there were about 50K of calls from MavenMetadataSource to the project builder. I put a simple hashmap cache in the metadata source to reduce calls to dozens.",
  "e227f55c": "[MARTIFACT-25] cache failed POM downloads in the local repository, obeying the <releases> policy for checking for updates on them",
  "3acaa63c": "adjust the embedder tests: - remove a number of downloads from central that were slowing the build significantly - ensure the tests will run with a repo manager and no central access - ensure the tests will run offline if the local repository is populated",
  "02367233": "getKey() is used many-many-many times when loading projects. it's ineffective to construct the key each time. Ideally the cached key would get reste when groupId or artifactId gets set, I didn't figure how to do it in modello though..",
  "a5f49900": "Adding the beginnings of a workspace to Maven, which is just a shared cache component for project, model, and POM file instances (for now). This allows fine-grained control over when such caches are cleared in environments where embedder instances may be reused multiple times, and will eventually enable new profile activators that require access to project information in the current build along with other advanced caching and cache-querying features.",
  "7946e31f": "reinstate the project cache, until we can find a better method of caching.",
  "884f7008": "o integrate changes made in maven-artifact for non fail-fast and request/result usage in the embedder for use in IDE integration to provide as much feedback as possible.",
  "1891c6ab": "[MNG-3013] The plugin manager incorrectly caches plugin versions between embedder calls, added test case that doesn't show the wrong behaviour yet",
  "a48bbdc0": "Restoring fail-fast as a default reactor behavior.",
  "d4cf333f": "This impl needs a hint, as our cache-aware cousin has one",
  "2d5711c8": "Adding SettingsBuilderAdvice, to enable skipping default locations for settings files. Also, removing the settings cache, to enable call-by-call synchronization of settings between Maven embedder instances that share the same settings files. Next step is to refresh settings per-call to the embedder.",
  "b8289153": "Adding read/writeSettings() api to the maven-tools and the embedder along with unit tests in each place, and adding a cache object for the settings that is based on the build-context.",
  "d846d0d8": "[MNG-1908] fix the performance problem with this particular fix",
  "013435e2": "[MNG-1908] recommitting fix for SNAPSHOT handling. As far as I can tell, this doesn't incur the performance penalty it used to.",
  "bc048ca9": "[MNG-1908] rollback the change on trunk since it degrades performance significantly at present",
  "1c23ee16": "[MNG-2054] make it0096 test the problem properly by going to enough depth. Rollback the 'fix' for MNG-2130 as it didn't appear to be correct - it caused it0096, and it0099 passes anyway. I suspect there were other circumstances in the codebase causing 99 to fail at the time. You should not use a cached project for inheritence - it will accumulate inherited elements as was the case with MNG-2054.",
  "32d86792": "[MNG-2186] correct the regression of MNG-1927 from the solution of MNG-2124 The interpolator was only working based on an incorrect assumption for a limited set of expressions. This assumption is guaranteed by the solution in the interim, until it can be properly reconsidered. The proper solution would be to not cache an interpolated model, and to apply path translation and then interpolation after retrieving the cached model. However, this will require some other related changes and should be planned for 2.1.",
  "d69fe06e": "(Merged from 384104.) [MNG-2130] Re-adding the cache check for parent POMs in assembleLineage(..) when building in a multimodule scenario (if they're part of the same build, but not yet in the local repo) before checking the parent's relativePath value or hitting the repository system to look for them.",
  "b07d835b": "[MNG-2083] Correcting problem where cached projects result in missing downloadUrl for unresolvable artifacts.",
  "2547a2f4": "Use faster approach to get poms from subversion",
  "1af474d0": "o make the reactor fail fast or exceptions seem to be lost",
  "1d42338b": "PR: MNG-1109 better handling for timeout and other transfer failed exceptions that are recoverable (ie metadata), and then blacklist the repository for performance.",
  "dac96a12": "Resolving: MNG-800...needed a call to flush the cached plugins-by-key map in the registry when a new plugin is added.",
  "1936ab20": "o slowly (and safely) trying to make bits extractable from here so that i can integration it into the embedder and then use the embedder for the",
  "c27e88fd": "correct what is cached",
  "1398c7c6": "PR: MNG-680 find the file for a parent that was cached",
  "2ab04f7c": "don't use cachedModel - it's null first time round, and we want to modify the current model. Note that this modifies the cached version anyway.",
  "3add0d7e": "check style report should save cache file to the correct output directory",
  "e2c9a495": "be more forceful on the no-cache",
  "8f0d5c7a": "never use cache",
  "34f9e447": "Commented out use of cached model in MavenMetadataSource, as this is causing problems with projects that depend on other projects which use managed dependencies.",
  "4862d0cf": "Added waitFor() call so avoid a race condition between chmod'ing the m2 script and trying to use it. Should impose little or no performance penalty on the bootstrap process.",
  "0b062787": "o Refined DirectoryScanner excludes o Fixed some problems with version parsing from legacy repo searches. o Added extension() method to artifact handlers used for conversions only o Changed reports-directory layout to be less flat (faster to load on web browser, etc.)",
  "5b5a124c": "o Updated the repo layout classes to use direct string concatenation rather than StringUtils.replace() which is not useful because the layout is non-varying. o Repoclean still not working with the new artifact/artifactmetadata stuff...the above modifications to the repo layout classes was primarily meant to improve performance when using repoclean.",
  "d3781103": "change resolve() methods to not return Artifact - but instead modify the original. Artifact is immutable except for version so it is safe - but will it cost flexibility later. Currently, this makes it much simpler as less copying vigilance is required. This has ironed out most wrinkles. Still need to implement the snapshot checking cache, and special case the use of installed snapshots over deployed ones.",
  "fea9f2ac": "project cache repairs - must not cache models that are already interpolated, translated, etc.",
  "de262b42": "o refactor usage of build methods o do not do path resolution for repository POMs o source poms override repository poms in the cache",
  "dda9fa50": "cache POMs within the reactor"
}, "maxwell": {
  "3b7fb5c": "Merge pull request #1925 from zendesk/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "c0cb2f9": "Merge remote-tracking branch 'origin/master' into dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "3d6a285": "update com.fasterxml.jackson.core:jackson-databind 2.11.2 to 2.12.6.1",
  "a1b9ccf": "SchemaCapturer - query optimization and better connection cleanup",
  "5724e27": "Log OutputStream cache reset information as DEBUG rather than INFO",
  "ac817bd": "Additional logging for RowMapBuffer OS cache resetting",
  "dafc6f7": "Log some useful data when OutputStream caches are reset",
  "0d29d83": "make bootstrap tests run much faster",
  "38fdd65": "Merge pull request #1488 from zendesk/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.4",
  "f4cc6d5": "Merge pull request #1437 from zendesk/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.3",
  "1f7fecb": "Merge pull request #1377 from zendesk/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "046ce2f": "bump polltime for running tests on slow boxen",
  "ebc21eb": "improve performance of appendFractionalSeconds",
  "9d35189": "RowMap minor fixes, optimizations and test cases - Addressed review comments.",
  "61fe608": "RowMap minor fixes, optimizations and test cases",
  "15d5b72": "v1.8.1, 'famous is faster, don't have to be talented'",
  "c4c4b5e": "Added faster Full Schema recover",
  "9a3ab53": "clear table-id cache on binlog rotate",
  "ed38b09": "Fix potential NullPointerException in very fast bootstraps.",
  "e6c89bd": "Merge pull request #132 from zendesk/performance_work",
  "4390284": "'replay' mode for maxwell -- intended to help performance testing",
  "74b9a61": "checkpoint 2 of performance work",
  "b6ef1b0": "checkpoint performance work",
  "a94e2fa": "keep a cache of column offsets",
  "5a2da11": "move table cache out to separate class",
  "5825662": "gem cache",
  "040ab52": "Merge pull request #22 from zendesk/ben/schema_in_memory_cache",
  "45e2ce9": "keep a small in-memory cache for schemas",
  "8cff2b1": "put linecache into the test env",
  "45e001b": "add vendor/cache"
}, "megabasterd": {
  "": ""
}, "metersphere": {
  "4f096f95": "refactor(测试跟踪): 修复无法正确解析V1版本使用fastJson生成的测试计划报告问题",
  "2fccf71c": "build: index.html cache config",
  "40aa5dee": "build: 升级fastjson版本",
  "cc7508dd": "fix(fastjson): 转JsonObject过滤key",
  "71d11f0f": "build: 更新 cache key & 修复变量引用",
  "20572b52": "fix: ignore .jython_cache",
  "6560a87b": "去掉dns cache",
  "3612b9b2": "testplan -> performance"
}, "metrics": {
  "e6a7e50": "Update actions/cache action to v3.3.1",
  "1f4a851": "Update actions/cache action to v3.3.0 (#3223)",
  "fcfc88d": "Update actions/cache action to v3.2.6",
  "067303b": "Update actions/cache action to v3.2.5",
  "89444bb": "Update actions/cache action to v3.2.4",
  "717425a": "Update actions/cache action to v3.2.3",
  "d78fc31": "Update actions/cache action to v3.2.2",
  "0e302f5": "Update actions/cache action to v3.2.1",
  "c5793d0": "Update actions/cache action to v3.2.0 (#3056)",
  "42f5cc1": "Update dependency org.ehcache:ehcache to v3.10.8 (#2978)",
  "722666e": "Update dependency org.ehcache:ehcache to v3.10.6 (#2971)",
  "a6d3b29": "Update dependency org.ehcache:ehcache to v3.10.4 (#2966)",
  "064e3e7": "Update dependency org.ehcache:ehcache to v3.10.3 (#2954)",
  "442128d": "Update actions/cache action to v3.0.11 (#2929)",
  "bb74d27": "Bump actions/cache from 3.0.10 to 3.0.11 (#2927)",
  "6869e4e": "Update dependency org.ehcache:ehcache to v3.10.2 (#2907)",
  "32dc24b": "Update actions/cache action to v3.0.10 (#2891)",
  "bedca8a": "Update actions/cache action to v3.0.9 (#2882)",
  "9e7f319": "Update dependency org.ehcache:ehcache to v3.10.1 (#2802)",
  "c2ee5a5": "Update actions/cache action to v3.0.8 (#2801)",
  "65ca673": "Update actions/cache action to v3.0.7 (#2780)",
  "961abcd": "Update actions/cache action to v3.0.6 (#2775)",
  "2f48405": "Update actions/cache action to v3.0.5 (#2722)",
  "55e604c": "Update actions/cache action to v3.0.4 (#2661)",
  "3c89a98": "Update actions/cache action to v3.0.3 (#2635)",
  "d8d29f1": "Bump actions/cache from 3.0.1 to 3.0.2 (#2564)",
  "65959d8": "Update actions/cache action to v3.0.2 (#2566)",
  "474afb7": "Update dependency org.ehcache:ehcache to v3.10.0 (#2514)",
  "11def12": "Bump actions/cache from 3.0.0 to 3.0.1 (#2536)",
  "b05ac55": "Update actions/cache action to v3 (#2524)",
  "7b43ef7": "Update dependency org.ehcache:ehcache to v3.9.9 (#2299)",
  "6b42b5a": "Update dependency org.ehcache:ehcache to v3.9.8 (#2289)",
  "1671e56": "Update actions/cache action to v2.1.7 (#2244)",
  "74170a1": "Update dependency org.ehcache:ehcache to v3.9.7 (release/4.2.x) (#2203)",
  "cbbc03c": "Update dependency org.ehcache:ehcache to v3.9.6 (release/4.2.x) (#2132)",
  "7470745": "Update dependency org.ehcache:ehcache to v3.9.5 (release/4.2.x) (#2106)",
  "3d94ba9": "Update actions/cache action to v2.1.6 (#1962)",
  "698a931": "Update actions/cache action to v2.1.6 (#1961)",
  "d33fc5d": "Bump ehcache from 3.9.3 to 3.9.4 (#1949)",
  "7fd7269": "Bump ehcache from 2.10.6 to 2.10.9.2 (#1889)",
  "4007a7f": "Bump ehcache from 3.9.2 to 3.9.3 (#1878)",
  "b9769fb": "Update dependency com.fasterxml.jackson.core:jackson-databind to v2.12.3 (release/4.2.x) (#1867)",
  "cbde48f": "Merge pull request #1865 from dropwizard/renovate/release/4.2.x-actions-cache-2.x",
  "5a86cfe": "Bump actions/cache from v2.1.4 to v2.1.5 (#1862)",
  "b0fa254": "Update actions/cache action to v2.1.5",
  "ff19a43": "Update dependency com.fasterxml.jackson.core:jackson-databind to v2.12.2 (#1782)",
  "194f442": "Bump ehcache from 3.9.1 to 3.9.2 (#1766)",
  "229c823": "Bump ehcache from 3.9.0 to 3.9.1 (#1757)",
  "ac192b2": "Bump actions/cache from v2.1.3 to v2.1.4 (#1749)",
  "f330dc0": "Bump actions/cache from v2.1.2 to v2.1.3 (#1703)",
  "09d106b": "Bump actions/cache from v2.1.1 to v2.1.2 (#1675)",
  "0e05840": "Bump actions/cache from v1 to v2.1.1 (#1663)",
  "6b0b675": "Bump ehcache from 3.8.1 to 3.9.0 (#1641)",
  "e4d8a84": "Metrics from Caffeine caches (#1608)",
  "5cacc5e": "Bump ehcache from 3.8.0 to 3.8.1 (#1478)",
  "18720a8": "Bump ehcache from 3.4.0 to 3.8.0 (#1459)",
  "61febad": "Merge pull request #1437 from dropwizard/dependabot/maven/javax.cache-cache-api-1.1.1",
  "6196f51": "Bump cache-api from 1.1.0 to 1.1.1",
  "82b1c3b": "Bump cache-api from 1.0.0 to 1.1.0 (#1396)",
  "1a4b196": "Bump ehcache from 2.10.4 to 2.10.6 (#1381)",
  "7bb56e3": "Improve performance of ChunkedAssociativeLongArray",
  "47d2617": "Upgrade ehcache3 to 3.4.0",
  "f2d9aed": "Upgrade ehcache to 3.3.1",
  "18866d2": "Merge pull request #1010 from henri-tremblay/add_metrics_jcache",
  "06fa8c2": "Add metrics-jcache module",
  "2a31615": "Try to improve ganglia performance",
  "6ccee68": "adapted ehcache integration to latest ehcache version 2.8.3",
  "67bac7e": "Merge pull request #509 from fernandezpablo85/thread-gauge-performance",
  "8845b9f": "Make metrics-ehcache configurable by XML.",
  "e95a8fe": "Upgrade to Ehcache 2.6.6.",
  "d3a8f5d": "Mature optimization.",
  "8acabfe": "Update Ehcache docs.",
  "45945b8": "Simplify InstrumentedEhcache a bit.",
  "4918dc3": "Dropped InstrumentedEhcacheFactory.",
  "7cd4c74": "Revamp metrics-ehcache.",
  "d289dff": "Upgrade to Ehcache 2.6.0.",
  "5bc3a89": "Upgrade Ehcache to 2.5.2.",
  "1361588": "Updated docs for Ehcache XML config.",
  "d02a121": "Config-instrumented ehcache support",
  "fa3e002": "Upgrade to Ehcache 2.5.1.",
  "4d1978c": "Added link to Ehcache.",
  "3f7bea2": "Made InstrumentedEhcache not a howling weirdness.",
  "f18b9be": "Simplify InstrumentedEhcache#clone().",
  "a239ec4": "cache arrays to avoid memory allocation in HistogramMetric.updateVariance()",
  "10d5967": "Fix InstrumentedEhcache for Ehcache 2.5.0.",
  "b778636": "Upgrade to ehcache 2.4.5.",
  "7ec21cc": "Upgrade to ehcache 2.4.3.",
  "ba3810c": "Make sure we're instrumenting cloned InstrumentedEhcaches as well.",
  "69f8a6e": "Added cache-busting headers to the servlet responses.",
  "f701d3e": "Improve the performance of the Guice method interception.",
  "d897596": "Ditch the priority queue for a skip list. Massive performance win for ExponentiallyDecayingSample.",
  "19451e4": "More Ehcache work.",
  "1c4483c": "Rejiggering the Ehcache interface.",
  "6c933fa": "Added metrics-ehcache.",
  "1e8af33": "Merge pull request #21 from datafueled/ehcache",
  "a46fdbe": "Note the version of Ehcache used in the README."
}, "micrometer": {
  "e17238b": "Remove cache key for branch related: gh-3611",
  "d6855d6": "Add circleci config file to the circleci cache key fixes gh-3611",
  "20c423c": "Enable Gradle's stable configuration cache feature flag (#3390)",
  "8d1d837": "Make descriptions static for cache metrics fixes gh-3321",
  "83eee62": "Improve cacheability ignoring Java vendor and minor version (#2994)",
  "dadb6bb": "Move cache and http core classes back to core (#3050)",
  "96ba184": "Move cache and http core classes back to core (#3050)",
  "0852d25": "Use branch name in cache key for more accurate dependency caching",
  "bfe3649": "Prevent race conditions in cache metrics (#2839)",
  "8b95a6b": "Avoid keeping a strong reference to caches being monitored (#2643)",
  "79254a7": "Re-enable local cache fix gh-2707",
  "de31292": "Adding fields to normalize properties for remote cache fix gh-2707",
  "b73b189": "Enable gradle remote cache fixes gh-2707",
  "3d721e3": "Disable gradle local cache (to run an experiment on CI)",
  "e3ea9a9": "Locking jackson to 2.12.+ due to an in-progress release breaking the build Could not find com.fasterxml.jackson.module:jackson-module-scala_2.13:2.13.0-rc1",
  "0cb93c6": "Improve normalization So that it will be easier to fix remote cache issues",
  "dd42986": "Fixing normalization for build cache, fixes gh-2675 Improve normalization for .property files Add normalization for MANIFEST.MF attributes",
  "e7ebe25": "Add normalization for generated manifest property file so that it won't cause build cache miss",
  "97a12fd": "Enable local cache (remote cache is disabled)",
  "8f08236": "Disable Gradle build cache temporarily",
  "ed55ffb": "Apply Gradle build cache (#1663)",
  "c77f4ce": "Remove version pinning for ehcache",
  "a62ffc1": "Emit second level cache statistics per-region for valid regions (#2335)",
  "85dcfe0": "Add level2 cache region name as a tag in HibernateMetrics (#2108)",
  "e37becb": "Fail fast when API token is required but missing",
  "dd5b082": "Use a FunctionCounter for Caffeine cache.eviction.weight (fixes #1880)",
  "2c9ff7b": "Auto-configure cache metrics (#1355)",
  "c05d036": "Consistently fail fast with MissingRequiredConfigurationException",
  "bb65f8a": "Revise cache metrics implementations + tests (#1107)",
  "8b8f0d3": "Improve Tags#and(String...) performance",
  "b7bbea3": "Meter registration memory and CPU performance improvements (fixes #971)",
  "64d2839": "Fail fast if any Dynatrace API mandatory property is missing",
  "0d11d80": "Guard against JCache compatible caches without a cache manager (fixes #714)",
  "0823a83": "Guard against JCache compatible caches without a cache manager (fixes #714)",
  "0838604": "Cache statsd lines where possible to improve memory performance (fixes #600)",
  "35ccf7d": "Fix negative cache miss metric for Hazelcast (fixes #586)",
  "8bbef3e": "Improve performance of meter registration (fixes #585)",
  "1ae3ad0": "better performance of creating web mvc tags",
  "66b9a37": "Standardize basic cache metrics (fixes #393)",
  "99dee8c": "More sophisticated cache sample",
  "b2c9e65": "Add support for Ehcache 2 and JCache metrics (issue #129)",
  "8286cd3": "Improve synchronization performance of DefaultHistogram",
  "3eb4f0e": "Initial Caffeine cache metric support",
  "f9c8ca8": "Fixed stale cache stats problem in CacheMetrics",
  "30c44df": "Upgrade to io.spring.release 0.2.0 for better CircleCI performance",
  "b09b26e": "Use metric names for ids and ids for metric child cache",
  "fb3ee6c": "Update docs for cache and data sources"
}, "micronaut-core": {
  "92cf8e48": "Update dependency com.fasterxml.jackson.core:jackson-databind to v2.15.1 (#9280)",
  "22d2e48e": "More performance optimizations (#9076)",
  "8b11219e": "Microoptimizations (#9069)",
  "1cc2d753": "Performance optimizations: cache executor, optimize HttpMethod enum (#9063)",
  "d7819be4": "More performance optimizations (#9070)",
  "aa98255c": "More performance improvements (#8993)",
  "61d9ba73": "fix(deps): update dependency com.fasterxml.jackson.core:jackson-databind to v2.14.1 (#8396)",
  "96433841": "fix(deps): update dependency com.fasterxml.jackson.core:jackson-databind to v2.13.4.2 (#8168)",
  "9b9648a6": "fix(deps): update dependency com.fasterxml.jackson.core:jackson-databind to v2.13.4.2 (#8168)",
  "003ac730": "fix(deps): update dependency com.fasterxml.jackson.core:jackson-databind to v2.13.4 (#7946)",
  "a58c5e5a": "Bump micronaut-cache to 3.4.2 (#7814)",
  "eea745ee": "fix(deps): update dependency com.fasterxml.jackson.core:jackson-databind to v2.13.3 (#7778)",
  "881b7396": "chore(deps): update actions/cache action to v3 (#7440)",
  "b8cba52a": "build: bump micronaut-cache to 3.4.1 (#7311)",
  "99503be6": "build: bump micronaut-cache to 3.4.0 (#7310)",
  "cd606519": "ci: cache@v3 (#7128)",
  "38ef5878": "removeAnnotationIf should update caches (#7127)",
  "24b0a53b": "Bump micronaut-cache to 3.2.0 (#6906)",
  "c2238036": "Bump micronaut-cache to 3.1.1 (#6898)",
  "e93f6117": "Introduce `UnsafeBeanProperty` and fix performance of setter (#6877)",
  "45427cd6": "Bump micronaut-cache to 3.1.0 (#6802)",
  "08450228": "Fix slow test initialization ImmutableSortedStringsArrayMapTest (#6791) (#6799)",
  "b0e48f9e": "Clear annotation defaults cache to prevent pollution from one language to another (#6734)",
  "d23df298": "Introdce a static optimizations loader (#6694)",
  "355e64c1": "improve performance of isWebSocketUpgrade (#6628)",
  "5cc55005": "Bump actions/cache from 2.1.6 to 2.1.7 (#6565)",
  "d88e3e66": "Introduce static optimizations registry (#6313)",
  "9fa3166d": "Bump micronaut-cache to 3.0.0 (#6002)",
  "96d4a651": "Bump micronaut-cache to 3.0.0-RC2 (#5840)",
  "287ce64b": "Bump micronaut-cache to 3.0.0.RC1 (#5727)",
  "1f19a776": "Bump actions/cache from 2.1.5 to 2.1.6 (#5512)",
  "d0bb3c40": "Revert 'Revert 'More performance/memory optimizations (#5405)' (#5454)' (#5463)",
  "b9c66b29": "Revert 'More performance/memory optimizations (#5405)' (#5454)",
  "ae037fbe": "More performance/memory optimizations (#5405)",
  "70b6122f": "Improve bean provider lookup performance (#5430)",
  "0581b02d": "Small performance optimizations (#5384)",
  "d7d725d0": "Improve bean context startup performance (#5352)",
  "22704408": "Bump micronaut-cache to 2.4.0 (#5355)",
  "9fdf6d86": "Init/Bean context performance improvements (#5306)",
  "5f7a0970": "Performance/memory optimizations (#5297)",
  "cc00f948": "Bump actions/cache from v2.1.4 to v2.1.5 (#5267)",
  "b0b32696": "Improve performance of writing generated classes (#5085)",
  "804f5aae": "Add micronaut-cache-bom to bom (#5028)",
  "7c64da4a": "Bump actions/cache from v2 to v2.1.4 (#4901)",
  "cd8ae17f": "Bump micronaut-cache to 2.3.0 (#4840)",
  "90d0078c": "Bump micronaut-cache to 2.2.0 (#4505)",
  "50eee0a3": "Link caches endpoint to micronaut-cache docs (#4190)",
  "c0c749b3": "Bump micronaut-cache to 2.1.0 (#4147)",
  "c281cd51": "RecoveryInterceptor performance improvement (#3711)",
  "0b7c7779": "Bump actions/cache from v1 to v2",
  "913e4c27": "Improve Async and Provider performance (#3612)",
  "db32aab2": "Merge pull request #3325 from micronaut-projects/fix-caffeine-cache-graalvm",
  "a67789bd": "Merge pull request #3323 from micronaut-projects/micronaut-cache-2.0.0.M2",
  "07e460f9": "Bump micronaut-cache to 2.0.0.M2",
  "e66fd324": "cache-core in BOM. Fixes #3123",
  "ee6e3951": "Use unreleased cache version. Update bom to include new modules",
  "19def392": "Add more breaking changes docs for cache",
  "48cfccda": "Split out cache from core",
  "0d811113": "Startup performance optimization",
  "c502d291": "Startup performance optimizations",
  "1d72735a": "Merge pull request #2931 from micronaut-projects/caffeine-cache-graalvm",
  "f6dfd5ba": "Improve support for GraalVM and cache",
  "15a1fd6a": "Request binding performance improvements",
  "a144f549": "Request binding performance improvements",
  "6cecdf25": "Allows using caches without having to configure them explicitly. (#2656)",
  "ff83552c": "Add support for sync cache putIfAbsent that takes a supplier",
  "dc7c9af7": "Improve performance by only creating the pattern once",
  "15aa16de": "Change cache operation to look for cache names in Cacheable. Fixes #2555",
  "24e41804": "Rename annotation to FilterMatcher / performance refactoring",
  "e48df2d0": "Merge pull request #2545 from micronaut-projects/cache_interceptor_logging",
  "3b5b292e": "Some trace logging for the cache interceptor",
  "dcc08e8a": "Performance optimization",
  "bc5baeee": "Revert 'Performance optimization'",
  "159ae812": "Performance optimization",
  "aafd0b5a": "Performance optimization",
  "1596c153": "Performance optimization",
  "ada7c619": "Performance optimization",
  "7b8c9798": "Performance optimization",
  "9993f0ed": "Merge pull request #2531 from micronaut-projects/abstract_sync_cache_impl",
  "3714c4b9": "Performance optimizations. Issue #2404",
  "4c6ffe3a": "Optimize performance of AbstractRouteMatch.fullfill. Issue #2404",
  "f26daef2": "Performance optimizations",
  "0f983c1c": "Remove build cache to avoid too many open files",
  "1d1a759c": "Remove optional/instrumenter recreation for performance",
  "5c417be5": "Try build cache",
  "a2f4e1ba": "Merge pull request #2505 from micronaut-projects/dependabot/gradle/org.jsr107.ri-cache-ri-impl-1.1.1",
  "290ad5af": "Bump cache-ri-impl from 1.1.0 to 1.1.1",
  "72f8227f": "Optimize compiler performance and runtime memory efficiency (#2463)",
  "b7e0e013": "Use kebap-case for micronaut.caches.*.maximum-size",
  "1dfcdc5d": "Merge pull request #2445 from micronaut-projects/cache_put_null",
  "d1bcf036": "Avoid putting null values in the cache",
  "fce0a17e": "Added micronaut-cache-noop to the Micronaut managed versions",
  "07424ba0": "MediaType: compute and cache toString() value in constructor (#2354)",
  "96c221a8": "Fix NPE with dynamic caches",
  "16941348": "to improve performance moved out filterProperties creation out of the loop",
  "593a51bc": "Add warning for presence of @Cacheable with no cache names. Closes #2200",
  "95a389a1": "Add support for a dynamic cache manager",
  "be9d567b": "Support moving blocking cache operations to an executor",
  "269a5bc9": "Add cache implementations to the bom",
  "5e82819b": "Revert 'Micronaut cache extraction (#2069)'",
  "de10a2ea": "Micronaut cache extraction (#2069)",
  "494e383b": "Fix bug with reactive cache methods calling the method on hits. Fixes #2064",
  "bf8c5019": "Optimize AOP performance",
  "cc947542": "Spring cloud config client should return empty on 404 if not fail fast. Fixes #1981",
  "d7a17969": "Optimize performance by using new Annotation API",
  "63531308": "Improve performance of algorithm",
  "b8e745ff": "Performance optimizations",
  "a9e5c3d0": "Optimize annotation metadata resolution performance (#1717)",
  "76cb45ca": "Ensure environment order in consul. Cleanup spring cloud impl. Improve performance to use one thread per call",
  "78a33a8f": "Include the owning type in the cache when when annotating methods at compile time",
  "7c6b8d82": "Support cache control public. Closes #1528",
  "5a6451cf": "Fix NPE with cache endpoint. Fixes #1535",
  "dea3dc72": "Index more types for performance",
  "fc5885be": "Improve bean lookup performance by removing need to iterate over singletons",
  "c124e4ef": "Merge pull request #1411 from marceloverdijk/updated_docs_caches_endpoint",
  "0529ac20": "Moved /caches endpoint to disabled section",
  "e54f6e6e": "Fix cache advice on GraalVM",
  "4cb7ec8f": "Simplify and make cache endpoint more extensible",
  "11e4bd12": "Added /caches endpoint",
  "2d0deb2e": "Further startup optimization",
  "0fca2891": "Added cache configuration option to record stats. (#1290)",
  "a703e739": "More startup optimizations. Make Jackson module scanning optional",
  "928f0c28": "Improve startup performance by indexing certain interfaces",
  "2ffd83bc": "Resolve issue with the return type of cache put and validate with async false",
  "3674923a": "Add type to cache name. Fixes #1162",
  "c10e6687": "Fix cache configuration include in docs",
  "c38b8bbf": "Merge branch 'marceloverdijk-hibernate-jcache'",
  "c62a3fe4": "Merge branch 'hibernate-jcache' of https://github.com/marceloverdijk/micronaut-core into marceloverdijk-hibernate-jcache",
  "51742161": "Fix performance issue with disk uploads",
  "f0837fdd": "Document cache naming. Fixes #1016",
  "f776388a": "Fix issues with cache changes",
  "183f3fe2": "Don't DefaultSyncCache beans for redis caches. Fixes #1015",
  "b7e5a5d9": "Fix performance bug - runtime was attempting to deserialize body into NettyCustomizableResponseTypeHandlerInvoker",
  "df6435b6": "Moved jcache configuration to hibernate-jpa module",
  "5b40686c": "Startup time optimizations",
  "ffa0b665": "Allow overriding cache control headers. Fixes #643",
  "0a8458a4": "Add cache metrics for Caffeine. Fixes #311",
  "46f90a09": "Add path to client cache to allow multiple clients with the same id and different paths. Fixes #483",
  "774b2d29": "improve performance by precaching bean event listeners",
  "0cf50b78": "Minor optimizations",
  "3e945fcd": "cache annotation by type resolves",
  "0ae31ed1": "Memory optimization: Pool annotations with no values",
  "5b025f8d": "Fix test failures by running cache cleanup on same thread",
  "3c146814": "Support for lookup of a weigher for caffeine caches",
  "bb37437d": "Cleanup and optimizations",
  "8865f0e1": "Flush cache when app is configured and Trace route builder",
  "b0c97b44": "Invalidate caches after processing",
  "74971444": "Flush the annotation caches on shutdown. Fixes #62",
  "84c8a928": "Move supplier cache method to a new util class, SupplierUtil.",
  "3142d389": "Use a different supplier cache",
  "8626a8c5": "Fix so the property sources are processed in the correct order. Added thread safe cache method",
  "1357307e": "Further fixes for @Requires(bean=..) and optimizations",
  "b8286998": "Use cached thread pool for I/O",
  "1b768960": "Improve toString() handling for string cache keys",
  "bb4411a9": "Rename cache evict",
  "fe55b214": "Base cache configuration APIs",
  "8d4ac109": "Temporarily cache annotation scan results"
}, "microservices-platform": {
  "5fe7257": "新增oss的starter同时支持云oss、minio与fastdfs",
  "3619790": "新增oss的starter同时支持云oss、minio与fastdfs",
  "094f11a": "删除fastjson依赖",
  "09a5a47": "删除fastjson依赖",
  "72ec878": "替换fastjson为jackson",
  "513a976": "替换fastjson为jackson",
  "78979fb": "update fastjson to v1.2.60",
  "5d4c30d": "修改fastdfs文件url"
}, "MifareClassicTool": {
  "": ""
}, "migration": {
  "": ""
}, "Mindustry": {
  "39227774": "Ripple tint change / Minor optimization",
  "a8aedbed": "Temporarily slowed down landing music to sync",
  "d6fc4bfd": "Add Drill.drillEffectChance (for very fast drills) (#7704)",
  "abb92350": "Fixed strange smooth movement of fast ground units",
  "5b48faf1": "...and faster music loading",
  "c9f3334f": "Various request rendering optimizations",
  "3030308f": "Make naval units only slow down on 'shallow' water",
  "b20cdb97": "Reset chat font cache color",
  "6fb7f4fe": "At least add a fastAA property (#6058)",
  "dc2ff1e9": "Switch to 'slightly faster' Jabel version",
  "f0c09007": "Lambda memory allocation optimizations",
  "8d12dbbe": "Minor duct preview optimizations",
  "afd6570c": "More floor render optimization",
  "49c099a0": "Minor floor renderer optimization",
  "7cdf7a21": "Minor power graph optimizations",
  "5654e312": "Logic constant optimizations / Display admins on top",
  "58c3af42": "Merge pull request #3286 from DeltaNedas/fast",
  "bc705aa7": "Minor allocation optimization",
  "bdf814c9": "Removed sector data cache system",
  "462e6733": "Cliff-spam cache fix",
  "b3d7515d": "Line optimization & cleanup",
  "f3921e3d": "Minor optimization",
  "7251fa4a": "Updated sector cache",
  "41754fc1": "Minor optimization",
  "135b87fd": "Cleanup, optimization",
  "3101fc80": "a performance disaster, part 2",
  "64bacea3": "a performance disaster, part 1",
  "54a2bf1b": "Smoother/faster water shader",
  "084c90ba": "Improved atmosphere shader performance",
  "a5e07bfd": "Created fastlane/metadata/android/ru-RU/changelogs (#1669)",
  "bac1648d": "Added support for changing cached floor/terrain",
  "9a289c83": "Fuse with conveyor optimization",
  "621233a5": "More optimization",
  "6fe26971": "2x faster conveyor optimization",
  "06abc43a": "Fixed slow imports",
  "a5fbc075": "Texture overrides / Potential mod texture binding optimizations",
  "d73b9994": "Minor light optimization",
  "52764be2": "Fixed map cache in workshop",
  "6bceb731": "Better display of broken stuff / 5x slower wall building",
  "948170e4": "Rename fastlane/metadata/steam/description.txt to fastlane/metadata/steam/Simplified Chinese/description.txt",
  "fb84b4b7": "Added fastlane integration",
  "0d39400f": "Fixed performance regression / Removed useless fallback sprites",
  "5799e6f5": "Laser optimization",
  "d9692004": "Shield optimization",
  "66dc1e94": "Slight entity optimizations / Turret sprite fixes",
  "0c3b39ff": "Merge branches 'avoidance-optimization' and 'master' of https://github.com/Anuken/Mindustry",
  "e9eb9817": "More optimization / Flying avoidance",
  "c8a15bb7": "Shadow optimization: 30 -> 60 FPS on phone tested",
  "b5508c11": "New power node type / Bugfixes / Random item caches",
  "55e1759b": "Block optimizations",
  "5019f200": "Large world size optimizations",
  "414af6a5": "Minor button optimizations",
  "034fab48": "Most direct consumers now operate slower when not supplied with full power",
  "b721d7a1": "Merge branch 'master' of https://github.com/Anuken/Mindustry into rendering-optimizations",
  "745592f5": "Merge branch 'master' of https://github.com/Anuken/Mindustry into rendering-optimizations",
  "afec65eb": "New mobile text dialog / Cleanup / Minimap fix / Collision optimization",
  "eb623563": "Merge remote-tracking branch 'origin/rendering-optimizations' into rendering-optimizations",
  "e584139b": "Merge branch 'master' of https://github.com/Anuken/Mindustry into rendering-optimizations",
  "bdf3a2df": "Merge remote-tracking branch 'origin/rendering-optimizations' into rendering-optimizations",
  "693b82e4": "Merge branch 'master' of https://github.com/Anuken/Mindustry into rendering-optimizations",
  "2a3cc3d8": "Fixed units moving faster at high FPS",
  "b2dca0a3": "Merge branch 'optimizations' of https://github.com/Anuken/Mindustry",
  "9c29b982": "absolutely incredible performance improvements",
  "ae6d2fb3": "Minor optimization / Fixed bullets piercing shield randomly",
  "802e7b12": "Surge uses / Fixes, optimizations / Turret implementation base",
  "ee5e6556": "Made splitter faster when unchained",
  "dbb23718": "Re-added block shadows / Block optimization",
  "59ade6cf": "Vault optimizations / Removed unloader",
  "d89feb2c": "Bugfixes, minor optimizations",
  "63a0fde1": "Offload optimizations / Compile errors fixed / Massive refactor",
  "23188df2": "Fixed slowdown when FPS got lower than TPS",
  "5e66dfcc": "Minor optimization",
  "8c6cda0d": "Fixed pathfinding using water / Fixed mech factories moving too fast",
  "4b11511b": "Minor world load time optimization",
  "7a049d64": "Many various bugfixes, more aggressive memory optimization",
  "917e2e40": "Memory optimizations, multithreading fixes, uCore updated",
  "9555b10b": "Bugfixes, cleanup, optimization",
  "5c120e53": "Added support for Mac file association; minor optimizations",
  "b496f51a": "Added turk bundle, updated wrapping, added fastshoot kick message",
  "3dd07d2f": "Implemented fast dijkstra-map pathfinding",
  "739e636a": "Added 'sleeping entity' optimization",
  "c54df7cb": "Fixed host bug, server failing to kick people firing too fast",
  "68f8ef54": "Removing CacheBatch due to performance issues",
  "7e20b493": "Fixed high-FPS slow water/no block sounds",
  "f4227b99": "Added visual interpolation for slow tickrates",
  "1ee21d07": "Minor optimizations",
  "e4c75562": "Merge remote-tracking branch 'remotes/origin/master' into pathfind-optimization",
  "2939c30d": "Rebalancing of drills to slow down progression",
  "db79d597": "More rendering optimizations",
  "5cb72ef3": "Minor optimizations",
  "347cae23": "Various optimizations; made healer enemies explode after a while",
  "25952985": "Groupified entities, improved performance",
  "ab9a0806": "Conveyor memory optimizations",
  "a05f6334": "Fixed bug with tile cache not updating after map change",
  "154247a4": "Android performance improvements",
  "5811eaef": "Additional cache size improvements",
  "6709d985": "Implemented sprite caching, water, grass, and improved performance"
}, "MinecraftForge": {
  "8bf96d8": "Fix OBJ Loader caches not being thread-safe. (#9204)",
  "069a94f": "[1.19.3] Add event before baked models are cached by the BlockModelShaper (#9190)",
  "aae628c": "Fix performance issue and logging when resource caching is enabled (#9029)",
  "ecd8f1e": "Fix minecarts on rails not properly slowing down in water (#9033)",
  "05297fd": "Add FML config to disable DFU optimizations client-side. (#8842)",
  "597ebc3": "Only rewrite datagen cache when needed (#8709)",
  "fbaf921": "Fix issues with custom forge ingredients causing sub ingredients to be prematurely and invalidly cached (#8550)",
  "a4e574f": "Fix potential issue with BackgroundScanHandler for users with slow disc IO (#8176)",
  "11bdf59": "Disable jenkins cache system until a functional system is in place.",
  "cfd7913": "Attempt to fix non-mods.toml jar files. Closes #8136 #8146 #8152 Make jenkins copy gradle cache to address concurrent build issues.",
  "30a33f5": "Support Lazy capabilities on itemstacks, for better ItemStack copy performance. (#7945)",
  "804f390": "Remove old Log4j thread cache invalidation (#8068)",
  "0680467": "Add forceSystemNanoTime config option to the client. Normally glfwGetTime is used, but in some cases it may have performance issues.",
  "dc09906": "Fix Furnace Minecarts going faster then vanilla (#7725)",
  "fe26b77": "fix global cache not being a block render type (#7648)",
  "6982c5d": "Add in proper handling of equals and hashcode for modjar urls. Fixes very slow loading on windows.",
  "935cb67": "Modify how ModLoadingStage handles dispatch to Registry Events. Stops the objectholder spam and generally improves performance on larger packs.",
  "b1f73a0": "Use new enumeration mechanism in ModLauncher, to allow getResources to work. This enables serviceloader-in-mods, and other stuff that might need to visit multiple mod jars. Also, tweaked the visitor code slightly, may result in a trivial performance change. Closing #7302 as it's not really relevant any more.",
  "50197b1": "Improve performance and cleanup code for DelegatingResourcePack (#7228)",
  "2ffdfb9": "Fix cache file sorting issue on linux (#6793)",
  "f24991f": "Add --flat argument to data generators to not create data in mod specific directores. Useful For Forge's test mods mainly. Standardized data gen cache file's folder separators. Added ItemModelProvider to BlockStateProvider for cleaner datagen code. Added .gitattributes to fix datagen json's line endings correct on windows.",
  "c359a38": "Improve performance of VertexBufferConsumer by inlining element locs",
  "31da9a4": "Fix the hang on startup problem when windows' broken device enumeration causes a huge glfwInit slowdown. Log a message too when this is detected.",
  "124c78b": "Fix #6305 lighting optimization using the wrong method",
  "ac8b196": "Fix dimension save data invalid cache being to aggressive.",
  "c30b27f": "Add reverse tag cache, to make looking up tags for items/blocks/etc.. less costly.",
  "fb30820": "Remove cache eviction for model data, optimize",
  "73bb013": "Fail fast when null is used with setTag instead of crashing in writeEntry (#5257)",
  "c219416": "Patch DimensionSavedDataManager to not spam FS mkdirs requests for empty files that don't exist yet, and don't contain data. Should result in a significant performance improvement for those with slower disks.",
  "bbdf52e": "Update to 0.10 modlauncher API with performance improvements..",
  "a15c4dc": "Add recipe types for faster runtime iteration. (#5312)",
  "72b63e7": "Move cache again, documentation is vague.",
  "fe3fcef": "Potentially fix cache in Jenkinsfile.",
  "4630741": "Add SHAs for post processors to allow the installer to skip if matching. SpecialSource needs a update to stabilize output before it can be cached.",
  "dd0c251": "Fix ModList cache never being updated (#5081)",
  "5a48ca9": "Improve performance of FluidRegistry.getBucketFluids",
  "a935859": "Resource type sensitive ResourceManager reloading, Disabled by default, but may increase performance. (#4658)",
  "5396267": "Switch from trove to fastutil collections (#4933)",
  "9cda586": "Fix scala mods crashing with the json annotation cache.",
  "dae7bce": "Remove invalid optimization in ItemStackHandler#setStackInSlot #3465",
  "fff6609": "Improve performance of some ExtendedBlockState methods (#4698)",
  "557b410": "Small performance improvement to ItemStack, by using Items.AIR directly instead of getting it from the Block map. (#4786)",
  "ed31486": "Cleaner TileEntityItemStackRenderers, now stored on the Item. Modders should be careful and cache their renderers. (#4700)",
  "e299489": "Fix vanilla crash classes not being preloaded. Closes #4769 Fix classes not being aggregated for mods using the new annotation cache.",
  "0c0cb2b": "Fix dormant chunk cache allowing entity data to be overwritten (#4528)",
  "22ea5a2": "Improve performance of World.collidesWithAnyBlock (#4286)",
  "7b4040b": "Improve performance of inserting into inventory wrappers (#4468)",
  "e1dd7cc": "Fix performance regression in FastTESR rendering",
  "0d34b02": "Improve performance of vertex format mapping by caching hashcodes (#4370)",
  "2f7f2e7": "Use ClassValue to store tileentity names for profiler in lazy cache. (#4021)",
  "0b969ef": "Optimize ExtendedBlockState.getClean, cache the return value instead of calculating it. Closes #3936",
  "50bf03b": "Cache entity constructors for a small performance optimization",
  "926472b": "Bypass forge chunk cache if it's configuratively disabled",
  "bc381b9": "Improve performance of inserting into inventory wrappers (#3622)",
  "b203468": "Small memory optimization in Registries.",
  "bc30307": "Introduce IContextSetter for events. This will set the active mod container for events using the normal EventBus. Fixes improper warnings from initializing mods using the new Registry events. Modders, you should not use this as it has many performance implementations and if abused will slow down the event bus A LOT. ActiveModContainer is not thread safe.",
  "1107088": "Add support for generic filtering of events. Please DO NOT use this in performance sensitive environments where you will have tons of things added to the listener list. If that's the case define sub-classes as they have completely separate lists and will thus be more efficient when firing the event.",
  "f088e3d": "Second pass at fixing 'Dissapearing Doors' This now more robustly fixes ALL uses of get and has slight performance improvements for itterable states. Closes #3139",
  "f421379": "Implemented face culling for item models, improves performance slightly. Closes #2326",
  "c3141b6": "Fixed block color multiplier not being cached properly in the forge renderer, performance improvement.",
  "dd365d7": "Model pipeline system. Should replace all ad-hoc quad generation methods in forge, and make IBakedModel -> WorldRenderer data transfer faster. Added IVertexConsumer + helper classes; lighting that works correctly for non-axis-aligned faces using the new infrastructure. Changed smooth lighting algorithm, now it should work correctly for everything. New block lighter can be disabled in the forge config options.",
  "c308a47": "Cherry pick some changes from 1.8 for inner class discovery, also fix the negativecache. Closes #1872",
  "1582e40": "Added ItemLayerModel - less awkward, simpler and faster version of ItemModelGenerator.",
  "5fe653c": "Attempt to fix the slow loading problem. Instead of forcing the main thread to wait around on every call to processWindowMessages, we will simply skip it, if the mutex is already claimed by the display thread. This should fix slow loading issues seen by some with the new loading screen.",
  "ea9d805": "Extracted the creation of RegionRenderCache into a method. Classes extending RegionRenderCache can change the behavior of the cache, allowing to visually change blocks (schematics etc).",
  "6049d37": "MinecraftForge/FML@ce791cb1f2cf983ef77b1e5c4028ddefab394062 Rework EventSubscriptionTransformer to bake @Cancelable and @HasResult values, should increase EventBus performance even more by removing logic from Event constructors. MinecraftForge/FML@852710962a9b6d7c8e2ca188c715eebb2da44c2a Clean up some dead code",
  "4be9604": "Rework EventSubscriptionTransformer to bake @Cancelable and @HasResult values, should increase EventBus performance even more by removing logic from Event constructors.",
  "07e14a9": "MinecraftForge/FML@4a753227adb805d29f3bf245c3f8427193c35544 Rework EventSubscriptionTransformer to bake @Cancelable and @HasResult values, should increase EventBus performance even more by removing logic from Event constructors.",
  "aeb4b03": "Rework EventSubscriptionTransformer to bake @Cancelable and @HasResult values, should increase EventBus performance even more by removing logic from Event constructors.",
  "e837b2e": "MinecraftForge/FML@12ccf9cf49b76140841cdc5a459422ae4781de1a Rather than try to fall back to the backup level.dat in case of weirdness in the ID map, just fail hard. There is probably a serious modder derp in this case and there's nothing FML can do to recover the situation except avoid making it worse. MinecraftForge/FML@e8cd368da30661ed2898fff232e2db787edcbdcc It's an IllegalState not an IllegalArgument *sigh* MinecraftForge/FML@2be9c743424c92f8799a6af1d59d60edd65e6bf0 And fix itemblocks being removed, leaving behind a residual block. This is a legitimate action - use the missing mapping event to let the mod tell us about it MinecraftForge/FML@7d8804cf656081d1570068f52e9bfc7140b21a65 You can't setAction to BLOCKONLY MinecraftForge/FML@c73861efe67594ee9995bc93744cab06bd6647d1 Cherry-pick 01aaa7dc97480b381ca0d192ec65016d7baeb747 Fix mods defined via --mods or --modListFile launch args not being searched for coremods. #560 MinecraftForge/FML@94c45b48c1265e7c4f60f591d413fa545787d354 Fix json cache crash, handle the file much more cleanly. Probably an MC JIRA since it's a vanilla bug. Closes #619",
  "38cdbc1": "Fix json cache crash, handle the file much more cleanly. Probably an MC JIRA since it's a vanilla bug. Closes #619",
  "c9fd2b6": "MinecraftForge/FML@6b0ae369eb9b8cf89eb9d53fe997a6e5ef222093 Try and improve performance of the registry by avoiding superType.cast. MinecraftForge/FML@dfebcafd49550b8c3f90c6c028ef0d7f3a13e607 Something I meant to add a long time ago, but it got overlooked. My apologies. Presend the (int) dimension ID in the serverhello packet. This should be 100% backward compatible with existing servers but bumping a server to this version will allow clients with this version as well to now login in dimensions outside the byte range. Probably fixes a bunch of mods that add dimensions. MinecraftForge/FML@6011419fa055c1375d05189f9bf0d86705c9c0ec Clean up my patch. Terrible person I am.. MinecraftForge/FML@c6bbd0e82de3d8f7993d70aa7be3f883b3afbc47 Forgot that I need a noarg ctor. I'm so rusty. MinecraftForge/FML@6edc1635de163c41b6b5dfe02bee13d6a9c5aa4d Need to load the dimension from disk - do it without filling out the player so that the normal player loading (including events) works properly",
  "278612a": "Try and improve performance of the registry by avoiding superType.cast.",
  "0f43b95": "Minor tweak to UsernameCache to also cache usernames of offline players.",
  "9c2f0dd": "Add username cache for determining a player's last known username",
  "f8b5ae4": "Make LogContext optional. This can be useful for debugging mod issues, but Apache's implementation in log4j2 is responsible for a very significant % of the overall runtime. Quite frankly this is shockingly bad performance from what is supposed to be a high performance logging framework. Anyway, until we can figure out if we can fix it, we're turning it off by default.",
  "dd5b51a": "Fixed missed metadata offset, and now cache return values of getOres for speed.",
  "51b55ea": "MinecraftForge/FML@a8cbef2321a8e1bdfac56476bdfb5b306f71d38b Finally hopefully fully kills the race condition causing a classcast on slow machines. MinecraftForge/FML@8dbd1ae0a177a556d03630a059242a2ee7f45e55 Fix ObjectIntIdentityMap sporadically matching non-identical objects. MinecraftForge/FML@42713c66e565a26e963099baa838800f250089c3 Merge pull request #426 from sfPlayer1/master",
  "39340e4": "Finally hopefully fully kills the race condition causing a classcast on slow machines.",
  "f8f1b42": "Fix imporerly efficient tools breaking blocks to fast.",
  "41617a0": "Updated FML: MinecraftForge/FML@8e26c99de3b44d272d2fdc398e0687db17bce3b7 Add debugging for deobfuscation MinecraftForge/FML@1d902df5814b815959165e4aa69272003f002d25 Use the negative cache in latest legacylauncher. MinecraftForge/FML@9815d8c3793182a08fcdbd29376a3f70bff464d0 Update for launchwrapper 1.8",
  "61ae96f": "Use the negative cache in latest legacylauncher.",
  "c170b98": "Attempt to properly fix deadlock if the internal server derps. It should never hang now. Damn you fast computer..",
  "2bbb3ee": "Disable ImageIO's File based cache, should speed up texturepack loading/stitching.",
  "0e571ee": "Add cache for ASM Event Handler bridge classes, should not need to redefine a class to invoke the same method on different instances.",
  "1490479": "Deprecate preloadTexture, make it a no-op. Should stop derpiness with new texturing system performance tweaks.",
  "cefcd8a": "Fix performance of texture uploads",
  "2de6f29": "Small optimization for usages of Minecraft.getGLMaximumTextureSize(), only need to calculate it once.",
  "10f0846": "Very significant improvement in performance by using glSubImage to upload data. Inspired by frequent complaints about performance of hires texture packs. They probably still need a beefy system but should work. Hopefully I can figure out why the subImage GL side copy isn't working properly for an even more significant speed boost. But this gets things started.",
  "9bb5580": "Fixed issue with Event.hasAnnotation ignoring it's parameter. And cached its values for potential performance gain. Closes #482",
  "b0e42eb": "Updated FML: MinecraftForge/FML@abe4f73a9a3158f6f9d1ea2334798f54a25817bf FIX massive performance issue with FML. Thanks to @sfPlayer1 for finding this epic derp on my part!",
  "e7e2ffd": "FIX massive performance issue with FML. Thanks to @sfPlayer1 for finding this epic derp on my part!",
  "f703dbb": "clarify what the size is measured in for the dormant chunk cache. -.-",
  "695b080": "Fix NPE causing issue with the cache. Derpy derp.",
  "ae7e328": "Fix a potential problem with 'Entity already added' when using the dormant chunk cache capability. The entities in the dormant chunk cache will get new IDs prior to the cached chunk returning.",
  "a042453": "Use nanoTime instead of currentTimeMillis for potential performance increase.",
  "f6b3865": "Update FML: b19e882 b19e882 Remove some debug, closes #123 9d7d32a Fix up tick management outside of mod loading phases for ModLoader mods. d512539 Negatively cache failed class lookups, should help with @SideOnly performance issues.",
  "5197e98": "Negatively cache failed class lookups, should help with @SideOnly performance issues.",
  "b32aeda": "Update FML (entire change log since last by me): 62a6b52 62a6b52 Fix RenderRegistry render ID - now at 36 Fix SpriteMaps - they're running out fast! Switch to forge if you can! RenderBiped now has an armo b845cde Fix up FML python script for forge 2c36dfb Update to MCP pre 3. Fixes some weirdnesses with explosions. acd880d Merge branch '1.4' e6f57e5 Update for MCP release b1de0fc Remove fuzz from patches for INetworkManager change ad44619 Fix for new names INetworkManager and ITexturePack. I also provide refactoring scripts for both, for your use... 3a94211 Add a script to ignore git complaining about the eclipse workspace changing - run when you first open the eclipse workspace 9386e23 Update gitignore - ignore the files that will change or be deleted 10b318c Add in 'starter' image for eclipse workspace 995d5b7 Eclipse workspace fixup 2? bbb12c8 Clean up eclipse workspace- part 1 b50058e Clean up a bit of patch fuzz 4a0bfa9 Fix CommonHandler for rename of the server thread class 4d1ec66 Update with RC2 MCP. Use the joined.exc file directly since MCP now provides it. b52e3d0 Fix exception for CodecMus a1011c9 Fix some compilation issues. Requires resolving the worldclient abstract method 0ebd4f3 Inital patch update to 1.4 89c68c4 Moved into EntityVillager e4702cb Fix line ending detection during checkout. 6e64fd7 We don't need logging here... 014b3f4 remove useless -Server projects 7628c67 Updated the AT config and Marker config for 1.4 obf 54a322c Updae build to copy files that may decompile differently but are actually the same, and updated for 1.4 values. aadf396 Update MCP Merge config. 81e1855 Pull in MCP's 1.4 conf files. 5686fd4 Fix error in merging of exec's",
  "b88f2e6": "Fix RenderRegistry render ID - now at 36 Fix SpriteMaps - they're running out fast! Switch to forge if you can! RenderBiped now has an armorlist- so armortypes add to it as well",
  "2c8517f": "Fix bounds checking on chunkcache. Should fix a bunch of rp2 and maybe other extended tile entity code",
  "b227d7c": "Dormant chunk cache might actually work now, and not mix chunks across worlds",
  "595d3e9": "Some changes to the ForgeChunkManager. Null modData is allowed now. The entity id is actually properly persisted in the ticket now. There is a new 'orderedLoadingCallback' that allows you to provide a preferred ticket loading order in case of 'excess tickets'. Also, tickets that are not in the returned list are now unregistered. There is a way to resort the chunks in the forced chunklist on a ticket now. Log the dormant cache configuration",
  "56a8760": "Simple chunk caching capability for the chunkloader. This will store 'dormant' chunks in a configurable cache, potentially saving the cost of reloading them from disk.",
  "f20ef77": "Fix up the network mod issue properly. Maintain a real cache of mod objects"
}, "mini-spring": {
  "": ""
}, "mit-deep-learning-book-pdf": {
  "": ""
}, "mockito": {
  "0863afb": "Merge pull request #2402 from mockito/avoid-cache-breakage",
  "4f81d4f": "Fix cache key computation for generated mock/spy classes (#2400)",
  "34790ec": "Revert 'Performance optimization by using Method.getParameterCount() where possible' (#1862)",
  "07c8366": "Fix CheckStyle warnings and only run memory test if fastpath is supported",
  "c16f43a": "Implement fast-path computation for stackTrace filtering",
  "51a77d3": "Merge pull request #1546 from epeee/build-cache",
  "6ad1135": "Fixed JaCoCo build cache issue",
  "19d04f8": "Rely on build cache defaults",
  "1f8024f": "Let's not enable the cache just yet",
  "bbffd5a": "Disable local build cache if we are in CI",
  "abedaf6": "Enable gradle build cache",
  "4907979": "Merge pull request #1459 from marchpig/fail-fast-stub-only",
  "6965164": "Merge remote-tracking branch 'origin' into fail-fast-stub-only",
  "d6d4dd1": "Update Byte Buddy and cache some expensive values (#1377)",
  "6aa36ae": "Performance improvements: Use less expensive method graph compiler for inline mock maker. Update Byte Buddy for general performance improvements and bug fixes. Fixes #1364. Also fixes javadoc warning. (#1369)",
  "1c61f1a": "Merge pull request #1181 from mockito/performance-fix",
  "4cfd6ee": "#1179: Fix performance regression caused by use of method graph compiler.",
  "422dab1": "Strict rules - fail fast when arg mismatches",
  "3e0f316": "Merge pull request #470 from mockito/non-blocking-cache",
  "fabed34": "Refactored mock cache to be non-blocking",
  "adec41d": "Enables gradle caches on travis, to speedup the build",
  "6037ce6": "Refactors the classcache to be more readable + some renaming job",
  "9f450df": "Introduces a proper classcache",
  "6de1ebd": "This test didn't pass when run with all the other test. This is due to objenesis cache not resetted, it uses an instantiation strategy that creates a mock that belongs to another classloader, hence a classcast was thrown in the ClassImposterizer. And all of this because IMethods was already used. This commit makes use of some class only loaded in the classloader being used here (so objenesis only sees that class in this test)",
  "436dc93": "issue 233, MockitoConfiguration setting to disable objenesis cache",
  "f3f7b84": "In order to keep performance high - using DelegatingMockitoMethod",
  "ffb6026": "In order to keep IDEA faster & more responsive excluded target so that it is not parsed",
  "902d19b": "Fixed the build so that it fails fast when jars are wrong",
  "3838394": "Made misplaced argument matchers point out in the exception message a stack trace location where was it misplaced. This dramatically speeds up debugging problems but may slightly decrease performance.",
  "98da672": "added test for performance tweaking made the invocation store only single stack trace element",
  "c97c75f": "made it a bit faster"
}, "mockserver": {
  "fa9cb1d": "fix: upgrade com.fasterxml.jackson.core:jackson-core from 2.14.1 to 2.14.2",
  "fe13816": "Merge pull request #1620 from mock-server/dependabot/maven/com.fasterxml.uuid-java-uuid-generator-4.1.0",
  "e185b56": "switch k8s tests from microk8s to kind to make it easier to re-build clusters faster and easier to run k8s on build server",
  "ea4f232": "Merge pull request #1548 from mock-server/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.14.0",
  "cce3fc4": "Merge pull request #1549 from mock-server/dependabot/maven/com.fasterxml.jackson.datatype-jackson-datatype-jsr310-2.14.0",
  "c9eb4e5": "Merge pull request #1531 from mock-server/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.13.4.2",
  "e42ae28": "Merge pull request #1529 from mock-server/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.13.4.1",
  "093f9b3": "Merge pull request #1472 from mock-server/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.13.4",
  "1e360e1": "Merge pull request #1470 from mock-server/dependabot/maven/com.fasterxml.jackson.datatype-jackson-datatype-jsr310-2.13.4",
  "91faf81": "upgrade com.fasterxml.jackson.core:jackson-databind due to vulnerability",
  "e85e22e": "removed pointless log statement from cache",
  "ac2f337": "#953 simplified support for multiline regex by allow . to match newlines and improved regex matching by support Unicode (instead of US-ASCII) and native case-insensitive matching and improved performance of negative matches by reducing the number of regex matches when not matching",
  "3912bfc": "Fixes #935 switched from com.github.java-json-tools:json-schema-validator JSON schema validator to com.networknt:json-schema-validator to improve performance and support draft 4,6,7 & 2019-09 of JSON schema",
  "5534401": "#837 further improved performance around stopping especially when stop is called multiple times for the same instance",
  "15e1f10": "#837 improved reliability and performance around stopping especially when stop is called multiple times for the same instance",
  "f9a8264": "extended cache length for parsed OpenAPI files",
  "e6bb1cb": "improved performance of handling large OpenAPI specifications",
  "0095aac": "cache regex patterns to avoid re-creating multiple times for same NottableString",
  "f49fe4c": "completed simplification and improved performance of matching for headers, query string parameters, path parameters, cookies and body parameters",
  "d5182d5": "simplified and improve performance of matching for headers, query string parameters, path parameters, cookies and body parameters",
  "f21a93e": "more tweaks of performance testing documentation",
  "a532e44": "improved documentation of performance tests",
  "14ce7c2": "reduced object creation and other minor performance tweaks",
  "ffd37fb": "reduce core pool size for action handling because performance test show no impact and pool size can grow is required",
  "f909a12": "reduced the number of event loop threads after performance testing",
  "19ced43": "#809 ensure previous docker build output is not cached during release",
  "44afdca": "performance improvements of expectation sorting and comparisons",
  "2425985": "removed java switches impacting performance from docker build",
  "3104059": "multiple changes to improve UI performance and grouping",
  "6ce6c3a": "fixing performance build docker image to allow for locust changing its base image OS",
  "0076049": "added cache for control plane matchers, fixed UI for open api filtering, pulled out query string matcher, supported open api API-Key security scheme in query string or cookie",
  "9ae662d": "improved logic around proxies to make HTTP CONNECT, SOCKS4 and SOCKS5 more reliable and faster",
  "d8d4017": "minor performance tweaks",
  "075dd5f": "minor performance related tweaks",
  "6cfaa80": "multiple tweaks to improve performance",
  "2aabc5a": "- added ability to control (via configuration) whether matches fail fast or show all mismatching fields - added more detail of cause of match failure",
  "a4c990a": "adding curl to performance build base image",
  "964b441": "updating performance testing container",
  "fc76d28": "cache ca X509 and private key to avoid constant re-loading from disk",
  "a6ae7c9": "#202 minor tweak to reduce impact of OSes that are slow to release ports",
  "96a0580": "refined and improved performance for creation of X509 certificates, also tweaked error message for TLS errors",
  "4191d71": "improved performance testing documentation",
  "042eac7": "performance improvements for header and cookie handling",
  "b93ae0d": "added configuration to performance test page",
  "819a791": "deprecated isRunning and replaced with hasStopped and hasStarted to make behaviour more explicit and faster",
  "c5f703b": "fixed issue where isRunning is called on client too fast for port to be open yet",
  "2f0c44f": "making test faster and more resilient to small timing differences - and again",
  "b232e15": "making test faster and more resilient to small timing differences",
  "c7976c2": "improved performance and scalability of ring buffer",
  "69f0354": "improved performance of json serialisation",
  "1dd155c": "trying to fix docker build base maven cache to avoid re-downloading dependencies on every build",
  "6570c25": "#690 further improved performance and throttled load of dashboard UI",
  "0f7992f": "#690 improved resilience / performance of dashboard under heavy load",
  "85aca74": "testing two new container JVM switches to see impact on performance tests",
  "52c69c4": "minor performance tweaks",
  "61bbd47": "minor performance tweaks including fast failure for expectation matching",
  "1381d84": "revert change to base docker image to fix performance docker build",
  "2ae34db": "added disruptor ring buffer in front of event to increase performance",
  "cccf0e1": "switched to bionic for performance test",
  "f24cc5f": "#559 ensure that response is always written after the log entry is created so that slower systems like Windows VMs can verify reliably",
  "58aedbd": "minor changes to improve build performance",
  "275b484": "ensuring adding exceptions isn't delayed by slow DNS resolution",
  "5e48dfb": "multiple minor performance enhancements",
  "406a01c": "improved log output and minor performance improvements",
  "d730661": "#419 extending CORS methods and small performance improvement for NottableString",
  "c0517b3": "ensuring test doesn't fail if build runs slowly",
  "e1d33bb": "making scripts fail faster",
  "02180e8": "#209 avoiding the need to recreate ObjectMapper as performance testing showed this was fairly expensive",
  "437e7bd": "#209 setting recommended options to improve performance of client",
  "8a6027a": "segrating ports for all tests to allow for TravisCI OS being very slow at releasing ports and causing builds to fail on Travis that do not fail on any other OS or CI tool",
  "589076d": "improving tomcat startup performance",
  "3a4bc57": "trying to improve performance of maven plugin integration tests in build",
  "3319a04": "trying to improve performance of maven plugin integration tests in build",
  "2e072e8": "improving logging performance by introducing asynchronous logging",
  "6f77fe4": "trying to improve build logging performance",
  "2f40125": "improving logging performance by introducing asynchronous logging",
  "24a93e8": "changes to the website to improve load performance",
  "958e915": "putting maven-plugin integration tests on separate ports to allow for Travis build being slow to release ports occasionally",
  "d5e6cdf": "putting maven-plugin integration tests on separate ports to allow for Travis build being slow to release ports occasionally",
  "736039f": "add small delays to allow for sockets behaving slowly on linux (compared to MacOS or Windows) and causing build to break on CI box"
}, "moco": {
  "5813cdf": "removed cache",
  "1fcab28": "removed file existence detection so we can start without any existing file for cache",
  "6d2c58a": "added cache description to README",
  "bc0e77a": "added cache json support",
  "d73533d": "persist cache with resource",
  "a200c17": "added cache api"
}, "mosby": {
  "2f5ff87": "Put restored ViewState back in memory cache for viewgroups",
  "d6f971d": "Reverting cache cleanup since it doesn't work out that well, because super.onDestroy() which then invokes PresenterManager.clear() might be called before the MviDelegates did their job to remove the Presenter from cache and dettach the view permanently",
  "48fdd32": "Search optimizations"
}, "motan": {
  "6d66535": "Merge pull request #979 from weibocom/dependabot/maven/com.alibaba-fastjson-1.2.83",
  "903718e": "Bump fastjson from 1.2.60 to 1.2.83",
  "4d98edc": "feat: support custom slow threshold",
  "68c75e7": "Merge pull request #713 from pifuant/LocalSwitcherService_optimization",
  "f36bdf2": "LocalSwitcherService registerListener and unRegisterListener optimization",
  "17edc23": "Merge pull request #709 from pifuant/NettyClient_scheduledExecutor_optimization",
  "e494965": "replace cache map with thread-safe implemention. Fixes #6"
}, "MPAndroidChart": {
  "02bf21d": "Reverse string formatter caches",
  "e841b69": "Reversed 'array access optimization'",
  "94a67cc": "Fixes & improvements related to circle cache",
  "90dc54a": "Fix performance issue in linechart",
  "d1689b6": "Minor performance improvement for prior fix.",
  "d20928a": "Minor performance improvement in pie chart",
  "a277152": "Moved references and performance to wiki.",
  "f9d8e36": "Minor performance improvement to candle chart",
  "1befb9a": "Worked on improving animation easing, better performance.",
  "f2945ec": "Improved performance of cubic-lines.",
  "e58b9f7": "Worked on ScatterChart performance.",
  "5e2fb7b": "Bugfixes and performance boost concerning BarChart.",
  "80ebcb7": "Improved CandleStickChart performance.",
  "db1762c": "Improved find Entry performance by using binary search. Fixed issue concerning MarkerView.",
  "5f46710": "improved performance by increasing the index of for-loops properly",
  "954ed0e": "Minor bugfixes and optimizations.",
  "1f3f31c": "Improved self drawing performance with a new method. Made sure chart range is kept while drawing.",
  "846f5cc": "Introduced Series object to represent one entry in the chart. Added functionality to draw multiple lines in one chart. Improved performance when drawing huge amounts of data. Started implementation on data reduction (Douglas-Peucker-Algorithm).",
  "e16e0da": "Barchart performance improvements. Code commenting."
}, "MultiImageSelector": {
  "": ""
}, "MusicBot": {
  "cb9644d": "playlist load faster and queue command shows np",
  "b6bdbd5": "added status command for bot status and info updated JDA version fixing queueing when the player is stopped added youtube API for faster searching when a key is provided first beta release",
  "8943cbd": "starting to move queueing to async for faster initial responses",
  "21c1792": "working, but slow..."
}, "Music-Player": {
  "": ""
}, "MVPArms": {
  "ad5e4db": "improve cache",
  "dc41131": "improve cache",
  "9c5318b": "add rxjava and cacheManager"
}, "MVVMHabit": {
  "": ""
}, "mybatis": {
  "8638f0e": "Fix for #116. Default implementation for a blocking cache and support for EhCache's impl provided by Iwao",
  "326fb1a": "Fixes #272. Defaults for @CacheNamespace do not match those of <cache>",
  "d202223": "Related to #116. Make sure that the cache is updated (even with null) so that BlockingCache works when an exception is thrown when running the statement.",
  "49dcb01": "Fixes #176. Multiple mybatis instances in the same jvm can produce ehcache collisions.",
  "2887349": "Fixes #169. Set logging decorator to all caches.",
  "d576f19": "Correct grammar in cache docs",
  "7b26ea3": "Fixes #158. Use namespace for cache logging.",
  "ddc48a7": "Fixes #159. Remove external cache locking.",
  "3a09d6a": "Fix for issue #47. Use 2nd level cache for nested queries.",
  "43500e9": "Fixes #146. Avoid using caches that are dirty but use the rest.",
  "cb48860": "Fixes #138. Yet another concurrency issue when reading from caches",
  "9a9ee5e": "Fixes issue #100. Docs for custom cache and decorators [ci skip]",
  "5f9a168": "Closes #98. Detect and pre-process static statements during startup so the execution becames much faster (x2). No need to use 'raw' anymore because now 'raw' is automatically applied.",
  "38fa270": "Minor optimization on TrimSqlNode and it's subclasses.",
  "243cc67": "Fixes #19 and #9. Fail fast when there is no typehandler for a mapping.",
  "9cd2a7d": "Memory usage optimization.",
  "0443b44": "(fixes http://code.google.com/p/mybatis/issues/detail?id=760 ) GenericTokenParaser#parse() could cause memory/performance issue on Java 7u6+ when the parsed string contains many variables to replace.",
  "4cf537c": "minor optimization",
  "30a249a": "performance optimizacion (avoid calling containsKey)",
  "d88370e": "minor optimization",
  "6ec36cf": "http://code.google.com/p/mybatis/issues/detail?id=676 : MapperScannerConfigurer, cache-ref, namespace of non-instanciated bean, cache null in MappedStatement",
  "18d97f3": "http://code.google.com/p/mybatis/issues/detail?id=734 : MapperProxy cache ProxyMethod instances",
  "d147b23": "http://code.google.com/p/mybatis/issues/detail?id=668 : Mybatis EHcache key collision",
  "d7c577b": "http://code.google.com/p/mybatis/issues/detail?id=686 : Nested queries should use namespace cache",
  "97d2392": "minor optimization",
  "b8f7c15": "minor optimization",
  "752bf75": "Pass the parameterTypeClass to LanguageDriver to enable some optimizations.",
  "dc085e1": "fix for http://code.google.com/p/mybatis/issues/detail?id=530 . Fix cache classloading issue with PlayFramework",
  "9ae271a": "minor optimization by Keith Wong",
  "2ef403e": "minor optimization by Keith Wong",
  "8e8dcd7": "[doc] caches better explained",
  "44b91e0": "related to http://code.google.com/p/mybatis/issues/detail?id=524 . By default selects should use cache and inserts/updates/deletes should flush cache, as xml mappers do",
  "9d99753": "synchronize clear() call because it modifies cache",
  "788c7b8": "http://code.google.com/p/mybatis/issues/detail?id=524 . Bug clearing 2nd level cache",
  "749312c": "minor optimization, avoid parsing the sql again",
  "521f783": "temporary fix for http://code.google.com/p/mybatis/issues/detail?id=464 . Fail if an attempt is made to cache a procedure call with OUT params.",
  "e999952": "fix for http://code.google.com/p/mybatis/issues/detail?id=168 , children cache key should depend on parent cache keys",
  "e07ad65": "minor log refactor for performance",
  "ae6f840": "fix for http://code.google.com/p/mybatis/issues/detail?id=499 . rollback cache by default on dirty sessions",
  "af751c6": "fix for http://code.google.com/p/mybatis/issues/detail?id=20 . Performance enhancement: create cache key and dynamic SQL just once",
  "f828d0f": "(http://code.google.com/p/mybatis/issues/detail?id=59 ) Performance optimization for FastResultSetHandler and NestedResultSetHandler.",
  "f980387": "fix for http://code.google.com/p/mybatis/issues/detail?id=352 . Do not decorate custom caches",
  "9fd5eb0": "manual minor fixes (caches must provide a constructor with a parameter String id)",
  "3f9883d": "http://code.google.com/p/mybatis/issues/detail?id=114 faster method for non existent columns",
  "46980cc": "feature see http://code.google.com/p/mybatis/issues/detail?id=482 flush local cache on each statement",
  "25f1687": "Added al OGNL expression cache to fix http://code.google.com/p/mybatis/issues/detail?id=352",
  "9235ddc": "[mybatis] removed the synchronized block to improve performance see http://code.google.com/p/mybatis/issues/detail?id=461",
  "d698fb0": "Fixed the flush ability of select mappers. They will now clear the local internal session cache when flushCache='true'.",
  "7f4ccce": "Solved http://code.google.com/p/mybatis/issues/detail?id=301 . The deferLoad method loads the property right away if it's available in the cache.",
  "f08d380": "Long cache, fragment and statement names are never replaced by a short name by StrictMap.",
  "0f6cc1f": "related to http://code.google.com/p/mybatis/issues/detail?id=235 . for performance, avoid parsing a resource if it was previously loaded a resource for the same namespace (mapper name)",
  "432f198": "Corrected http://code.google.com/p/mybatis/issues/detail?id=179 . Statements and cache-ref are resolved as soon as possible during configuration. This prevents having to resolve them while multiple threads are accessing the configuration.",
  "469e021": "Change the stored procedure example code to show when to clear the session cache"
}, "mybatis-3": {
  "913154d": "Merge pull request #2874 from harawata/undo-invalid-code-optimization",
  "1df8f0e": "Undo invalid code optimization",
  "acb63bf": "Merge pull request #2813 from gallyamb/cursor-cache-oom",
  "13a6600": "Merge pull request #2613 from mybatis/dependabot/github_actions/actions/cache-3",
  "87abb61": "Bump actions/cache from 2 to 3",
  "096c699": "[tests] Rename TRAVIS to GITHUB for slow tests usage",
  "60ee625": "Add an attribute 'allMethods' to cache all methods,reduce repetitive operations",
  "efcc0d9": "Correct the spellings in cache module and io module datasource module.",
  "56cc0e4": "Call to 'toArray()' with pre-sized array argument 'new String[map.keySet().size()]' Inspection info: There are two styles to convert a collection to an array: either using a pre-sized array (like c.toArray(new String[c.size()])) or using an empty array (like c.toArray(new String[0]). In older Java versions using pre-sized array was recommended, as the reflection call which is necessary to create an array of proper size was quite slow. However since late updates of OpenJDK 6 this call was intrinsified, making the performance of the empty array version the same and sometimes even better, compared to the pre-sized version. Also passing pre-sized array is dangerous for a concurrent or synchronized collection as a data race is possible between the size and toArray call which may result in extra nulls at the end of the array, if the collection was concurrently shrunk during the operation. This inspection allows to follow the uniform style: either using an empty array (which is recommended in modern Java) or using a pre-sized array (which might be faster in older Java versions or non-HotSpot based JVMs).",
  "1f64956": "Prevent errors when accessing the cache concurrently",
  "6e79446": "Merge pull request #2028 from nothingzhl/pr_optimization",
  "0bc1ffb": "Merge pull request #2078 from nothingzhl/code_optimization",
  "739e1dd": "Merge pull request #2121 from lonecloud/code_optimization",
  "c977995": "Merge pull request #2138 from juzi214032/chore/blocking-cache/unsued-import",
  "d761d12": "code optimization",
  "705d4f0": "Merge pull request #2054 from tacoo/cache",
  "b94c110": "Merge pull request #2044 from harawata/blockingcache-countdownlatch",
  "5fd510e": "added tests for cache package",
  "e30f97b": "optimization some method",
  "2d44833": "Minor optimization",
  "fd4b79f": "unit test for cachenamespaceref",
  "30d3496": "[git] Ignore sts4 cache",
  "10db83c": "Merge pull request #1758 from harawata/cache-methodhandle",
  "6b484e6": "Code optimization",
  "5000415": "minor optimization...",
  "60566df": "[tests] For slow tests, establish setup internally in pom",
  "0cfb21b": "Merge pull request #1411 from kezhenxu94/optimization/typo",
  "71017b5": "Merge pull request #1406 from kezhenxu94/optimization/remove-unnecessary-object-creation",
  "f4e89c3": "optimization: remove unnecessary object creation",
  "a9c24fa": "<cache-ref /> could cause IncompleteElementException.",
  "6fe5d62": "fixes #1194 It should be possible to use @CacheNamespace and <cache-ref />.",
  "28ffd4f": "Clarify how the <cache /> tag interacts with the Java API.",
  "199ad1c": "Change cached directory for postgresql-embedded (Workaround for yandex-qatools/postgresql-embedded#110) See gh-1133",
  "e2a9e06": "Minor optimization. Scanning attributes only when it's necessary.",
  "6d378bb": "[test] Cleanup cacheKeyTest per review",
  "faf7b25": "[bugfix] Remove invalid marked transient on cacheKey as reported by sonarlint",
  "5945ee9": "Trivial optimization.",
  "bb893a5": "Memory usage optimization when parsing mapper files",
  "ecc148e": "Minor optimization for enum type handler resolution.",
  "ae99cf4": "Merge pull request #846 from kazuki43zoo/cache-initialization",
  "ff39b4a": "Merge pull request #847 from kazuki43zoo/add-test-for-cache",
  "26e4b43": "Add tests for injecting property value to cache object",
  "e0ddb5d": "Support the mechanism for initializing a cache after set all properties fix gh-816",
  "486fa44": "Add properties attribute at '@CacheNamespace' Allow to inject property values to a custom cache implementation using annotation driven programing",
  "f520535": "Merge pull request #840 from kazuki43zoo/add-test-variables-in-cache",
  "a3e413a": "Add assertions for injecting externalized properties to cache properties (related with #816)",
  "2960c06": "fixes #747 Existense of additional parameter should be checked with the name without index part. Also replaced the test case with a simpler/faster one.",
  "b47de55": "Fix automapping cache update position",
  "6795085": "Related to #116. As per Iwao's suggestion, now removeObject is used to notify the rollback to a blocking cache. EhCache adapter has been fixed also.",
  "8638f0e": "Fix for #116. Default implementation for a blocking cache and support for EhCache's impl provided by Iwao",
  "326fb1a": "Fixes #272. Defaults for @CacheNamespace do not match those of <cache>",
  "d202223": "Related to #116. Make sure that the cache is updated (even with null) so that BlockingCache works when an exception is thrown when running the statement.",
  "49dcb01": "Fixes #176. Multiple mybatis instances in the same jvm can produce ehcache collisions.",
  "2887349": "Fixes #169. Set logging decorator to all caches.",
  "d576f19": "Correct grammar in cache docs",
  "7b26ea3": "Fixes #158. Use namespace for cache logging.",
  "ddc48a7": "Fixes #159. Remove external cache locking.",
  "3a09d6a": "Fix for issue #47. Use 2nd level cache for nested queries.",
  "43500e9": "Fixes #146. Avoid using caches that are dirty but use the rest.",
  "cb48860": "Fixes #138. Yet another concurrency issue when reading from caches",
  "9a9ee5e": "Fixes issue #100. Docs for custom cache and decorators [ci skip]",
  "5f9a168": "Closes #98. Detect and pre-process static statements during startup so the execution becames much faster (x2). No need to use 'raw' anymore because now 'raw' is automatically applied.",
  "38fa270": "Minor optimization on TrimSqlNode and it's subclasses.",
  "243cc67": "Fixes #19 and #9. Fail fast when there is no typehandler for a mapping.",
  "9cd2a7d": "Memory usage optimization.",
  "0443b44": "(fixes http://code.google.com/p/mybatis/issues/detail?id=760 ) GenericTokenParaser#parse() could cause memory/performance issue on Java 7u6+ when the parsed string contains many variables to replace.",
  "4cf537c": "minor optimization",
  "30a249a": "performance optimizacion (avoid calling containsKey)",
  "d88370e": "minor optimization",
  "6ec36cf": "http://code.google.com/p/mybatis/issues/detail?id=676 : MapperScannerConfigurer, cache-ref, namespace of non-instanciated bean, cache null in MappedStatement",
  "18d97f3": "http://code.google.com/p/mybatis/issues/detail?id=734 : MapperProxy cache ProxyMethod instances",
  "d147b23": "http://code.google.com/p/mybatis/issues/detail?id=668 : Mybatis EHcache key collision",
  "d7c577b": "http://code.google.com/p/mybatis/issues/detail?id=686 : Nested queries should use namespace cache",
  "97d2392": "minor optimization",
  "b8f7c15": "minor optimization",
  "752bf75": "Pass the parameterTypeClass to LanguageDriver to enable some optimizations.",
  "dc085e1": "fix for http://code.google.com/p/mybatis/issues/detail?id=530 . Fix cache classloading issue with PlayFramework",
  "9ae271a": "minor optimization by Keith Wong",
  "2ef403e": "minor optimization by Keith Wong",
  "8e8dcd7": "[doc] caches better explained",
  "44b91e0": "related to http://code.google.com/p/mybatis/issues/detail?id=524 . By default selects should use cache and inserts/updates/deletes should flush cache, as xml mappers do",
  "9d99753": "synchronize clear() call because it modifies cache",
  "788c7b8": "http://code.google.com/p/mybatis/issues/detail?id=524 . Bug clearing 2nd level cache",
  "749312c": "minor optimization, avoid parsing the sql again",
  "521f783": "temporary fix for http://code.google.com/p/mybatis/issues/detail?id=464 . Fail if an attempt is made to cache a procedure call with OUT params.",
  "e999952": "fix for http://code.google.com/p/mybatis/issues/detail?id=168 , children cache key should depend on parent cache keys",
  "e07ad65": "minor log refactor for performance",
  "ae6f840": "fix for http://code.google.com/p/mybatis/issues/detail?id=499 . rollback cache by default on dirty sessions",
  "af751c6": "fix for http://code.google.com/p/mybatis/issues/detail?id=20 . Performance enhancement: create cache key and dynamic SQL just once",
  "f828d0f": "(http://code.google.com/p/mybatis/issues/detail?id=59 ) Performance optimization for FastResultSetHandler and NestedResultSetHandler.",
  "f980387": "fix for http://code.google.com/p/mybatis/issues/detail?id=352 . Do not decorate custom caches",
  "9fd5eb0": "manual minor fixes (caches must provide a constructor with a parameter String id)",
  "3f9883d": "http://code.google.com/p/mybatis/issues/detail?id=114 faster method for non existent columns",
  "46980cc": "feature see http://code.google.com/p/mybatis/issues/detail?id=482 flush local cache on each statement",
  "25f1687": "Added al OGNL expression cache to fix http://code.google.com/p/mybatis/issues/detail?id=352",
  "9235ddc": "[mybatis] removed the synchronized block to improve performance see http://code.google.com/p/mybatis/issues/detail?id=461",
  "d698fb0": "Fixed the flush ability of select mappers. They will now clear the local internal session cache when flushCache='true'.",
  "7f4ccce": "Solved http://code.google.com/p/mybatis/issues/detail?id=301 . The deferLoad method loads the property right away if it's available in the cache.",
  "f08d380": "Long cache, fragment and statement names are never replaced by a short name by StrictMap.",
  "0f6cc1f": "related to http://code.google.com/p/mybatis/issues/detail?id=235 . for performance, avoid parsing a resource if it was previously loaded a resource for the same namespace (mapper name)",
  "432f198": "Corrected http://code.google.com/p/mybatis/issues/detail?id=179 . Statements and cache-ref are resolved as soon as possible during configuration. This prevents having to resolve them while multiple threads are accessing the configuration.",
  "469e021": "Change the stored procedure example code to show when to clear the session cache"
}, "mybatis-generator-gui": {
  "98e39a1": "升级fastjson版本"
}, "Mybatis-PageHelper": {
  "bd57fad": "Merge pull request #741 from java-codehunger/optimization"
}, "mybatis-plus": {
  "ac01d91": "Bump fastjson from 2.0.10 to 2.0.11",
  "016a4f5": "Bump fastjson from 2.0.9 to 2.0.10",
  "52a5b65": "Bump fastjson from 2.0.9 to 2.0.10",
  "7aedfe9": "Bump fastjson from 2.0.8 to 2.0.9",
  "b7c62b2": "Merge pull request #4613 from baomidou/dependabot/gradle/com.alibaba-fastjson-2.0.8",
  "74234c0": "Bump fastjson from 2.0.7 to 2.0.8",
  "4cf9613": "Merge pull request #4578 from baomidou/dependabot/gradle/com.alibaba-fastjson-2.0.7",
  "cf8012c": "Bump fastjson from 2.0.6 to 2.0.7",
  "c4cde33": "Merge pull request #4560 from baomidou/dependabot/gradle/com.alibaba-fastjson-2.0.6",
  "98f429a": "Bump fastjson from 2.0.5 to 2.0.6",
  "8adc361": "Merge pull request #4527 from baomidou/dependabot/gradle/com.alibaba-fastjson-2.0.5",
  "6bb91ae": "Bump fastjson from 1.2.76 to 2.0.5",
  "74d917f": "xml-cache-test",
  "be2a23c": "Merge pull request #3886 from baomidou/dependabot/gradle/com.fasterxml.jackson.core-jackson-databind-2.12.5",
  "6dce9af": "Merge pull request #3708 from baomidou/dependabot/gradle/org.mybatis.caches-mybatis-caffeine-1.0.0",
  "58365e4": "Merge pull request #3491 from baomidou/dependabot/gradle/com.alibaba-fastjson-1.2.76",
  "78a2e71": "Bump fastjson from 1.2.75 to 1.2.76",
  "a0b186d": "Merge pull request #2771 from baomidou/dependabot/gradle/com.alibaba-fastjson-1.2.73",
  "3e85f8a": "Bump fastjson from 1.2.72 to 1.2.73",
  "7d841b6": "Merge pull request #2661 from baomidou/dependabot/gradle/com.alibaba-fastjson-1.2.72",
  "2ed0f8a": "Bump fastjson from 1.2.71 to 1.2.72",
  "3c9f94c": "Merge pull request #2644 from baomidou/dependabot/gradle/com.fasterxml.jackson.core-jackson-databind-2.11.1",
  "1815a63": "Merge pull request #2609 from baomidou/dependabot/gradle/com.alibaba-fastjson-1.2.71",
  "1d3e3d5": "Bump fastjson from 1.2.70 to 1.2.71",
  "623f513": "Bump fastjson from 1.2.68 to 1.2.70",
  "463ef06": "Bump mybatis-ehcache from 1.2.0 to 1.2.1",
  "45b7187": "Bump fastjson from 1.2.67 to 1.2.68",
  "2956cdb": "Bump fastjson from 1.2.66 to 1.2.67",
  "8610ad7": "Bump fastjson from 1.2.62 to 1.2.66",
  "c6e9b73": "Bump mybatis-ehcache from 1.2.0 to 1.2.1",
  "f8a5b9a": "Bump fastjson from 1.2.67 to 1.2.68",
  "183c868": "Bump fastjson from 1.2.66 to 1.2.67",
  "3d5f2d1": "Bump fastjson from 1.2.62 to 1.2.66",
  "af353d2": "Bump mybatis-ehcache from 1.1.0 to 1.2.0",
  "6f9848d": "Merge pull request #1806 from baomidou/dependabot/gradle/com.fasterxml.jackson.core-jackson-databind-2.10.1",
  "f0d9ac8": "test(h2-performance): 准备进行 h2 的性能插入测试",
  "c763b24": "扩展新增 json 类型处理器 jackson fastjson 两种实现",
  "495deb1": "启动就缓存 lambdacache",
  "53af518": "add test case for tomcat jdbc datasource, test performance inteceptor print sql",
  "96650fb": "optimization codes",
  "8913b5f": "optimization GlobalConfiguration, add GlobalConfigUtils.",
  "c30a059": "optimization codes"
}, "MyBatis-Spring-Boot": {
  "": ""
}, "My-Blog": {
  "": ""
}, "Mycat-Server": {
  "0da3d38": "#2683 支持show @@slow where schema = 'master_slave_db';",
  "1cb2c6f": "update fastjson",
  "fdd8966": "fix fastjson",
  "6c14aa2": "进行zk的bug修改验证 1，重复代码重构 2，重构watch机制利用pathcache(完成) 3，zk连接重构",
  "641941e": "进行zk与本地配制文件的相互转化完成了cache文件到本地的转化",
  "85b219a": "任务22 统一json解析为fastjson",
  "afb62d5": "新增 SQL / HIGH / SLOW / TABLE 指令 clear 参数 true表示清除cache， 如: show @@sql true; show @@sql.high false;",
  "c835572": "adjust cache size",
  "09a56b0": "调节 high sql cache size",
  "9b1e6a6": "reload @@sqlslow=10; 调整慢SQL的时间阀值",
  "c9cdd96": "show @@sql @@sql.sum @@sql.slow 统计数据重置 增加一个 reload@@user_stat 指令",
  "cb43a4d": "慢SQL统计 show @@sql.slow;"
}, "nacos": {
  "6b0df82": "[Optimization] Code optimization for MapUtil (#10461)",
  "7952543": "Code optimization for NacosMeterRegistryCenter (#10231)",
  "5aa272c": "[ISSUE #10052] ServerLoaderController Code optimization (#10058)",
  "5a8c567": "[ISSUE #9906] cache token to improve performance (#9914)",
  "882c6ed": "code optimization for `ConfigChangeHandler` (#9923)",
  "732e701": "Provide more configuration items to allow users to customize their grpc services to better optimize network performance. (#9806)",
  "0e346f0": "Code optimization, remove useless code. (#9620)",
  "e23ec89": "perf: Code optimization points (#9552)",
  "ba9b30d": "[ISSUE #9391] Chooser optimization (#9392)",
  "c4d7c33": "fix cache removed when listeneradd delay (#9311)",
  "0ac96e1": "[ISSUE #9014] performance optimization--refacte TpsMonitorPoint (#9021)",
  "e1ef983": "Remove Duplicated Check in Method com.alibaba.nacos.client.naming.cache.ServiceInfoHolder#isChangedServiceInfo (#8746)",
  "5e7d204": "[ISSUE#8561]Authentication performance optimization (#8564)",
  "8c330ea": "optimization method definition (#7986)",
  "3dddb75": "optimization append (#7798)",
  "080f1ff": "Merge pull request #7743 from Chaos-coder/code_optimization_config_controller",
  "a74eb55": "[ISSUE #5095] Add some testcases for common cache (#6950)",
  "449480f": "Refactor the cache to replace guava (#6520)",
  "4d7ccd5": "improvement performance (#6407)",
  "cdc276e": "To slightly improve performance, this commit switches to StringBuilder.append(char) instead of StringBuilder.append(String) whenever we append a single character to a StringBuilder. (#6300)",
  "5bb048c": "[ISSUE #6142] redo register and subscribe repeatedly if failed. get data from database if user and role info not in cache. (#6156)",
  "f4cf28a": "[ISSUE #6204] Get data from database if user or role info not found in cache. (#6206)",
  "13fe9a8": "Add/Remove cache before call server. (#6015)",
  "6831de3": "Publisher code optimization (#5778)",
  "2798aa9": "add ut for c.a.nacos.client.naming.cache in nacos 2.0 (#5165)",
  "63513b4": "[ISSUE #4661]configServletInner#doGetConfig code optimization (#4666)",
  "c66aba5": "Remove service cache data when service removed (#4656)",
  "350be06": "cacheDataMap (#4445)",
  "8264505": "Move namespace cache to ServiceManager (#4345)",
  "3d97e36": "when auth open, use resource parser cache, not use reflect newInstance every time. (#4287)",
  "daf5938": "[ISSUE #4136] Fix the bug that cann't correctlly instantiate ServiceInfo from cache file #4249 (#4272)",
  "714b967": "[ISSUE#3533] change cache dir with namespace -- part 2: unify the log dir (#3882)",
  "17be398": "[ISSUE#3533] change cache dir with namespace -- part 1: unify the cache dir (#3859)",
  "565557c": "Fix NullPointerException when no subscriber for slow event (#3835)",
  "f423d39": "Revert '[#3368]Cancel empty Long polling thread to improve performance. (#ISSUE3432)' (#3778)",
  "1f8a64b": "replace the deprecated api com.fasterxml.jackson.databind.node.ObjectNode#put(java.lang.String, com.fasterxml.jackson.databind.JsonNode)",
  "c9b64e0": "fix-#3550. write cache file and delete the old version cache file (#3551)",
  "95c8bf2": "[#3368]Cancel empty Long polling thread to improve performance. (#ISSUE3432)",
  "aac1c6f": "[ISSUE #3160]fix compatibility issue when reading cache files with suffix '.datum' (#3163)",
  "961f0d1": "Schedule naming optimization of cp architecture (#3109)",
  "38d0b6b": "Method name optimization (#3104)",
  "d24f36b": "Instance eliminate module naming optimization (#3093)",
  "ee8da9b": "Method name optimization (#3068)",
  "34fda6a": "Merge pull request #3057 from showkawa/#3056_performance_issue",
  "0f1d0ab": "hi.here 'addAll()' call can be replaced with parametrized constructor call,performance will be better",
  "74a2995": "Remove fastjson LICENSE",
  "56da413": "Remove fastjson dependency from pom",
  "e9adf97": "Replace fastjson with jackson for nacos-test/naming",
  "4dbe814": "Replace fastjson with jackson for nacos-test/auth",
  "c0b4385": "Replace fastjson with jackson for nacos-test/config",
  "9e21a2c": "Replace fastjson with jackson for nacos-test/common",
  "01bb02b": "refactor: long volume, annotation optimization",
  "90db4f1": "Replace fastjson with jackson for nacos-naming transport",
  "3b0e9df": "Replace fastjson with jackson for nacos-naming controller and consistency",
  "eec067f": "Replace fastjson with jackson for nacos-naming misc",
  "a980e4e": "Replace fastjson with jackson for nacos-naming pojo",
  "61135f6": "Replace fastjson with jackson for naming.core",
  "4eb4e11": "Replace fastjson with jackson for nacos-console",
  "2aaa54a": "Replace fastjson with jackson for nacos-cmdb",
  "bbeb7d6": "Replace fastjson with jackson for nacos-core",
  "5b9780e": "Replace fastjson with jackson for nacos-client",
  "b443279": "Replace all fastjson with jackson in nacos-api",
  "d34bef3": "Replace fastjson with jackson for Service",
  "4607bb7": "Replace fastjson with jackson for Selector",
  "5c8ccfd": "Replace fastjson with jackson for naming.Cluster",
  "8c5bcd8": "Replace fastjson with jackson for health checker.",
  "70a0bb7": "replace fastJson with jackson for naming instance",
  "41703f9": "refactor: code optimization",
  "bcec069": "Merge pull request #2675 from alibaba/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.4",
  "feebd16": "refactor: performance optimization",
  "a317c7a": "refactor: jraft node removal logic optimization",
  "f222dcc": "refactor: code optimization",
  "0b3b5e8": "refactor(all): code optimization",
  "7e3b46e": "Merge pull request #2409 from alibaba/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.3",
  "41dfcf5": "#1105 Read cache instead of accessing DB directly.",
  "264f686": "Merge pull request #2142 from easyhaloo/code_optimization",
  "1082539": "refactor #2134 optimization code",
  "1f7e4f6": "Merge pull request #2058 from alibaba/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "9b2367e": "Merge pull request #1552 from nkorange/hotfix_log_optimization",
  "e45546b": "upgrade the fastjson version",
  "e9a7cfe": "issues template update optimization",
  "5881214": "#562 Limiter DEFAULT_LIMIT optimization",
  "94fcdec": "Merge pull request #283 from jameslcj/feature_fe_struct_optimization",
  "a7dc3c6": "Merge pull request #264 from wfnuser/fix/console_editor_optimization",
  "1a9a282": "#176 Bypass local cache at client start by default.",
  "3e01285": "Merge branch 'hotfix-clientbeat-lose-info' into raft-performance",
  "ceb2787": "Merge branch 'hotfix-register-hangs' into raft-performance",
  "6466218": "Raft performance improved."
}, "nanohttpd": {
  "4344efd": "Fixed a potential CPU cache issue. Closes #229.",
  "2c298d9": "Merge pull request #180 from NanoHttpd/faster-boundary-find",
  "256ad3a": "Rebase faster-boundary-find",
  "af7a20b": "Windowed/buffered getBoundaryPositions() for faster uploads of big files",
  "1ca7710": "Named the threads created by the server to reflect their use - to aid in profiling performance/memory usage."
}, "native-navigation": {
  "b1406a3": "Make default android animations faster"
}, "NavigationTabBar": {
  "": ""
}, "NekoX": {
  "c71f3240": "try fix third-party cache path",
  "2584e307": "Fix CI: skip libvpx when cache hit",
  "0637f835": "Move Android 11+ cache path",
  "f0761cb9": "fix DNS cache",
  "865248a9": "Fix ci cache",
  "64b9d411": "Fix: invoke virtual method on null object when toggling WS proxy too fast",
  "870fab1a": "Improve ignore blocked: load Username from local cache",
  "d5143cd2": "Improve ignore blocked: use cache",
  "52fc46a0": "Use fast_forward for noquote forward",
  "0954be4d": "Use internal directory for cache in android R by default ( #284 )",
  "538e1b4d": "Add non-standard cache folder option",
  "cafb4309": "[TF][MAPS] OSMDroid useragent and cache directory configuration",
  "ae340bec": "Move save cache to private directory to experimental",
  "d29eabd1": "Popup notifications (not finished), removed in-app notifications, DB performance optimisations (fixes for Android L), separate app logic from network logic (not finished)"
}, "netty": {
  "9fe796e1": "Add another fast-past for ChannelOutboundBuffer slow type checks (#13376)",
  "97a7ed0a": "Make Recycler faster on OpenJ9 (#13357)",
  "f67a5560": "Http types slow path checks (Fixes #13268) (#13269)",
  "5d1f9965": "Increase errno cache and guard against IOOBE (#13254)",
  "9ec938c7": "Avoid slow type checks against promises on outbound buffer's progress (#13225)",
  "8a8337ec": "Make releasing objects back to Recycler faster (#13174)",
  "9c35aa1e": "Create a deep-copy of the Throwable before returning it from the cache to prevent possible leaks (#13160)",
  "85b63a00": "Improve the performance of expireTimeouts() in HashedWheelTimer (#12888)",
  "17514403": "make 'cache = null' to help PoolThreadCache finalizer. (#12881)",
  "cf9dc409": "Fix InternalThreadLocalMap cpu cache sharing size to 128bytes (#12309)",
  "ec68df49": "Optimize selection of cache on first invocation (#12207)",
  "24018418": "Enable thread-local buffer cache for Thread that is used by EventExecutor by default (#12158)",
  "7b91edd8": "A potential optimization to NetUtil#getIPv6ByName (#12112)",
  "ef69732a": "Correctly calculate the elementSize when cache alignment is configured (#11987)",
  "6feaf9c8": "Add a `fast` maven profile (#11969)",
  "c6aaaffe": "Migrate codec-memcache tests to JUnit 5 (#11310)",
  "cfaed121": "Add fast path in ByteBufUtil.compare and ByteBufUtil.equals methods (#11296)",
  "c8360116": "Correctly setup cache to be able to make use of different restore keys (#11248)",
  "d984d442": "Use the same maven cache for all (#11241)",
  "7d4aaa26": "Support session cache for client and server when using native SSLEngine implementation (#10994)",
  "9145f285": "Use maven cachen when running analyze job (#10888)",
  "ab8c4f22": "Improve performance of HPACK static table lookup (#10840)",
  "567b46fa": "Don't use the cname cache when using DnsRecordResolveContext (#10808)",
  "1c230405": "Fix for performance regression on HttpPost RequestDecoder (#10623)",
  "303baf5c": "Minor performance improvement in websocket upgrade (#10710)",
  "162e5984": "Improve predictability of writeUtf8/writeAscii performance (#10368)",
  "5157d3b8": "Revert 'Support session cache for client and server when using native SSLEngine implementation (#10331)' (#10528)",
  "825916c7": "Support session cache for client and server when using native SSLEngine implementation (#10331)",
  "63395576": "We should fail fast when a CNAME loop is detected (#10305)",
  "f66412c8": "Dequeue all cached messages and destroy the queue instance after removing the FlowControlHandler from channel pipeline. (#10304)",
  "d1b99b70": "Use allocation free algorithm to detect CNAME cache loops (#10291)",
  "387e451c": "Detect CNAME loops in the CNAME cache while trying to resolve (#10221)",
  "5a08dc0d": "Add fastpath implementation for Unpooled.copiedBuffer(CharSequence, Charset) when UTF-8 or US-ASCII is used (#10206)",
  "05b7af7a": "Propagate ref to pool thread cache down in the allocation stack to avoid extra thread local lookup (#10166)",
  "dcd62c25": "Remove the synchronized flag of fillInStackTrace method to improve performance while creating exception instance. (#10033)",
  "862efc61": "Remove the synchronized flag of fillInStackTrace method to improve performance while throwing exception. (#10031)",
  "07149729": "Use correct system property name in PooledByteBufAllocator (io.netty.allocator.cacheTrimIntervalMillis) (#9994)",
  "63d33b39": "Minor simplifications/optimizations to AbstractByteBuf methods (#9845)",
  "6d0c0e99": "Small simplification to WriteTask optimization (#9807)",
  "c35a80d6": "Don't cache key material if sun.security.ssl.X509KeyManagerImpl is used (#9762)",
  "b381cb25": "At the moment the cache provided by OpenSslCachingKeyMaterialProvider… (#9759)",
  "e8e7a206": "Use fast HPACK comparisons when not checking sensitive headers (#9259)",
  "ff9df03d": "Make only default IdleStateEvents cached string representation (#9705)",
  "07fe1a29": "Optimize the QueryStringEncoder performance (#9568)",
  "3ad03747": "Correctly reset cached local and remote address when disconnect() is called (#9545)",
  "bcf6d56b": "Do not cache local/remote address when creating EpollDatagramChannel with InternetProtocolFamily (#9436)",
  "94f39308": "Recycler availableSharedCapacity will be slowly exhausted due missing reclaimSpace(...) call (#9394)",
  "2c99fc0f": "Recycle RecyclableArrayDeque as fast as possible in FlowControlHandler (#9263)",
  "93414db1": "Fix LZ4 encoder/decoder performance with (default) xxHash32 (#9249)",
  "52c53891": "codec-memcache: copy metadata in binary full request response (#9160)",
  "51112e2b": "Avoid IdleStateHandler triggering unexpected idle events when flushing large entries to slow clients (#9020)",
  "9f2221eb": "CompositeByteBuf optimizations and new addFlattenedComponents method (#8939)",
  "4b83be1c": "We should fail fast if the given PrivateKey or X509Certificate chain is not supported by the used SslProvider. (#9009)",
  "b72fea34": "Improve DateFormatter parsing performance (#8821)",
  "26803574": "Provide a way to cache the internal nioBuffer of the PooledByteBuffer… (#8603)",
  "15e4fe05": "Revert 'Provide a way to cache the internal nioBuffer of the PooledByteBuffer to reduce GC. (#8593)'",
  "8cd005ba": "Provide a way to cache the internal nioBuffer of the PooledByteBuffer to reduce GC. (#8593)",
  "5650db58": "Add cache for CNAME mappings resolved during lookup of DNS entries. (#8314)",
  "56eb1e92": "Add tests to verify caches are cleared when the resolver is closed. (#8186)",
  "4b9125f9": "Correctly release message in MemcacheClientHandler that is used in the memcache example. (#8119)",
  "0337ecdc": "Allow to cache keymaterial when using OpenSSL",
  "1740f366": "Fail fast when DefaultChannelPromise is constructed with null as Channel.",
  "c1b1d626": "Allow to detect failed query caused by an Timeout / IO error and also not cache these.",
  "433dbeb1": "Revert 'Allow to detect failed query caused by an Timeout / IO error and also not cache these.'",
  "12a413bf": "Allow to detect failed query caused by an Timeout / IO error and also not cache these.",
  "3c8c7fc7": "Reduce performance overhead of ResourceLeakDetector",
  "d2cb51bc": "Enable PooledByteBufAllocator to work, event without a cache",
  "0234878c": "Fix the commands cache and hashCode() in SmtpCommand",
  "d56f403c": "First call channelReadComplete(...) before flush(...) for better performance",
  "81f9434e": "Added test for multi header, HttpObjectDecoder performance improvement for multi header, removed empty else block.",
  "d1b02257": "Improvement : WebSocketServerProtocolHandshakeHandler.getWebSocketLocation now applies concat optimization and WebSocket path check moved to separated method.",
  "7feb9295": "Improve performance of Base64.decode and encode methods.",
  "68a941c0": "Detecting actual Channel write idleness vs. slowness",
  "24b39bc2": "Only schedule a ThreadDeathWatcher task if caches are used.",
  "fd0ae840": "Small performance improvements in ResourceLeakDetector",
  "4bce554c": "Revert counter optimization in RoundRobin until better implementation found",
  "e47da7be": "CompatibleObjectEncoder cached ObjectOutputStream backed by release buffer bug",
  "3cf7ccbd": "Process OP_WRITE before OP_READ to free memory faster",
  "aa6e6ae3": "[#4241] Ensure NioEventLoopGroup.shutdownGracefully(...) with no quiet period shutdown as fast as expected.",
  "a4d8f930": "small performance fixes : unnecessary unboxing operations removed",
  "9c0d1a99": "Ensure attributes and contained object can be collected as fast as possible.",
  "94d7557d": "Ensure WeakOrderQueue can be collected fast enough",
  "70651cc5": "HpackUtil.equals performance improvement",
  "a974fff0": "Add regression tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse",
  "4ddb81f3": "Not cache SwappedByteBuf in AbstractByteBuf to reduce memory footprint.",
  "e053b96b": "Set the length fields of memcache messages automatically",
  "3ad55eb8": "Speed up the slow path of FastThreadLocal",
  "b88a9804": "Change arena to thread cache mapping algorithm to be closer to ideal.",
  "6a2425b8": "HTTP/2 SimpleChannelPromiseAggregator don't fail fast",
  "36aa1193": "ByteBuf for Key instead of String for codec-memcache",
  "17df8171": "Use AbstractReferenceCounted to clean up the codes for codec-memcache",
  "46068905": "Retain AbstractBinaryMemcacheDecoder.currentMessage when sending it out and release it when it's not used.",
  "ca305d86": "PlatformDependent String char[] optimization",
  "6e108cb9": "Improve the performance of copying header sets when hashing and name validation are equivalent.",
  "c9364616": "Fix performance regression in FastThreadLocal microbenchmark. Fixes #4402",
  "7d4c0774": "Add *UnsafeHeapByteBuf for improve performance on systems with sun.misc.Unsafe",
  "4c287d4e": "Added SlicedAbstractByteBuf that can provide fast-path for _get* and _set* methods",
  "8c93f4b1": "Added DuplicatedAbstractByteBuf that can provide fast-path for _get* and _set* methods",
  "30dc1c1f": "[#4313] ByteBufUtil.writeUtf8 should use fast-path for WrappedByteBuf",
  "e556958a": "Fix a buffer leak in BinaryMemcacheEncoderTest",
  "e1bf9d62": "Fix unintended timeout in negative DNS lookup cache test",
  "ad0b7ca5": "Add a test case for DNS resolver cache for negative loopups",
  "deda3f5b": "Add GCC optimization flag when compile native transport",
  "a7713069": "HttpObjectDecoder performance improvements",
  "a7d1dc36": "[#3652] Improve performance of StringUtil.simpleClassName()",
  "c2de195f": "Improve performance of AsciiString.equals(Object).",
  "3e42292d": "Change PoolThreadCache to use LIFO for better cache performance",
  "f20439b6": "Various performance optimizations in OpenSslEngine",
  "8e6739dd": "Explicit allow to enable / disable session cache",
  "fb3b16d9": "Allow to enable session cache when using OpenSsl",
  "54a39a94": "example: memcache: fix set command",
  "35db3c67": "Small performance improvements",
  "f3ef94d3": "Slight performance improvement to IntObjectHashMap.hashIndex()",
  "4eb1529d": "Improve WebSocket performance",
  "cb1bf1a7": "[#2867] Workaround performance issue with IPv4-mapped-on-IPv6 addresses",
  "a7d1f983": "[#2761] Proper work-around for data-corruption caused by cached ByteBuffers",
  "695fbc91": "[#2684] EpollSocketChannel gathering writes should take fast-path if possible",
  "ad1389be": "Small performance improvements",
  "93c30660": "[#2653] Remove uncessary range checks for performance reasons",
  "030bcaae": "Improve performance of Recycler",
  "33b9bc02": "Fix potential buffer leak in AbstractBinaryMemcacheDecoder",
  "3c21b1cc": "Fix buffer leak in DefaultFullBinaryMemcacheRequest/Response",
  "f67ac5e4": "Fix the inconsistencies between performance tests in ByteBufAllocatorBenchmark",
  "066f95d0": "[#2573] UnpooledUnsafeDirectByteBuf.setBytes(int,ByteBuf,int,int) fails to use fast-path when src has array",
  "3d81afb8": "Make sure cancelled Timeouts are able to be GC'ed fast.",
  "65ee10fb": "[codec-memcache] Avoid NPE on channelInactive.",
  "837ddc01": "[example-memcache] fix formatting introduced by the memcache examples.",
  "7a6fa739": "Add a Example for Memcache Binary Codec",
  "fdb1db90": "[#2362] AbstractChannel.AbstractUnsafe.write(...) is slow",
  "8429ecfc": "Implement Thread caches for pooled buffers to minimize conditions. This fixes [#2264] and [#808].",
  "37ee6ef7": "[codec-memcache] Simplify object hierachy and remove Headers.",
  "cd6b5def": "Always upstream full memcache messages.",
  "b17a7656": "codec-memcache: prefix abstract classes with Abstract.",
  "fcb32a77": "codec-memcache: No need to allocate a buffer if no extra is used.",
  "9840de82": "Fix another buffer leak in BinaryMemcacheDecoderTest",
  "b592a18c": "Fix buffer leaks in BinaryMemcacheDecoderTest",
  "ccd231b8": "Fix a buffer leak in BinaryMemcacheDecoder",
  "acf7dbf8": "Fix buffer leaks in BinaryMemcacheEncoderTest",
  "fab56bae": "Fix a buffer leak in BinaryMemcacheObjectAggregatorTest",
  "d417e3db": "Fix a buffer leak in BinaryMemcacheObjectAggregatorTest",
  "215e75c7": "codec-memcache: increase default buffer size and only encode extras if set.",
  "f03c32e1": "[codec-memcache] encode key directly, no need to use unpooled.",
  "a1526bed": "codec-memcache: removed println in test case.",
  "183bfe8f": "codec-memcache: fix decoding issue for value parts.",
  "5551fc73": "adding memcache codec to netty-all project.",
  "20f6f7e0": "Implementing the Binary Memcache protocol",
  "60acd54c": "[#1876] Make use of proper state machine in WebSocket08FrameDecoder for performance reasons",
  "dd49b1cf": "Use LinkedHashSet for HttpHeaders.names() and add Javadoc about the performance of names() and entries()",
  "0052d83d": "Limit the access of the HttpHeaders for performance reasons",
  "e6eb7fa4": "minor gc optimization: better DefaultSpdyHeaders.iterator()",
  "05c10fae": "Replace usage of StringBuilder by AppendableCharSequence for performance reasons",
  "818bc602": "Remove the use of ThreadLocal for performance reasons",
  "3dace666": "Merge buffers for performance reasons if possible when encode http requests/responses.",
  "7f57c5ed": "Backport HTTP encoding / decoding optimizations which were introduced by #2007.",
  "a159d3eb": "[#1994] DefaultPromise.cancel() should reuse CancellationException for performance reasons",
  "5de4b23c": "[#1982] Limit the usage of ThreadLocal.get() for performance reasons",
  "b5f51753": "minor gc optimization: better DefaultSpdyHeaders.iterator()",
  "1542b36e": "minor gc optimization: better DefaultHttpHeaders.iterator()",
  "1547876e": "Tiny optimizations",
  "48a7a215": "Correctly update Channel.isWritable() when the write happens from outside the EventLoop in a fast fashion. Fixes [#1697]",
  "20a010a2": "Small optimization in DefaultHttpHeaders.clear()",
  "acb28e3a": "Multiple optimizations in the HttpObjectDecoder",
  "cd516740": "Small performance improvements for RTSP",
  "7254a5c2": "Just some tiny javadocs optimizations",
  "98c6a581": "Just tiny optimization to avoid object creation",
  "64686dea": "Tiny optimization",
  "9c49322b": "Improve performance of HttpRequestEncoder.encodeInitialLine(...)",
  "2adf3932": "[#1553] Improve performance of encodeInitialLine",
  "cad7c1f1": "[#1521] Fix performance issue in AbstractHttpData",
  "96337699": "Improve performance of encodeHeader",
  "5131c024": "Tiny optimization",
  "3ce9ab2e": "Replace the sun.nio.ch.SelectorImpl.selectedKeys with faster one",
  "e9c64068": "Remove the AIO transport as NIO is just faster",
  "0e8fb215": "Some optimizations to the http codec",
  "98282671": "Fix performance regression which was caused by calling the fireInboundBufferUpdated() a way to often",
  "42e31a44": "Revert '[#1131] Codecs must not cache next buffer during processing'",
  "b1775a32": "[#1131] Codecs must not cache next buffer during processing",
  "a9a29bdf": "Use I/O buffer whenever possible now that our direct buffers are as fast as heap buffers",
  "12f1d969": "Relaxed memory access constraint of ReferenceCounted.refCnt() for potentially better performance / More precise reference counting for MessageBuf",
  "1c1570ff": "Make field access via ByteBuf.read/write*() faster by avoiding unnecessary boundary checks",
  "7b0bf2da": "Use double-checked locking idiom + volatile optimization",
  "a7b5d45b": "A little bit of optimization that reduces interestOps() calls",
  "1eafffbe": "Use thread-local map instead of ConcurrentHashMap for faster instantiation of handler adapters",
  "a13246a2": "[#1024] Limit the number of SelectionKey.interestedOps(..) calls for performance reasons",
  "cc278d45": "Disable test as this let fail the build 80% times on osx and slow linux servers. Need to investigate",
  "2c7be323": "Tiny optimization",
  "d7f0351a": "Add JVM options for faster test runs",
  "d7d8503f": "Add a line-based frame decoder with good performance.",
  "967b5424": "Use Unsafe when possible to access AbstractAioChannel to prevent slow Reflection usage. This is kind of related to #528",
  "c77f107f": "Made the AIO transport faster / Fixed a bug in SingleThreadEventLoopTest",
  "632542e0": "Make a CPU-intensive test pass on a slow machine",
  "44403864": "Little bit of optimization",
  "7fb64e20": "A small optimization for the fix of #360",
  "759d0633": "Add the SeekAheadOptimize class to enable faster seek of bytes values in HttpPostRequestDecoder",
  "f29b6ae2": "Fix performance issue in OioSocketChannel since previous refactoring",
  "778fbc36": "Remove selector spinning optimization",
  "25599018": "Tiny bit of optimization in event loop",
  "326b88c4": "A small optimization for the fix of #360",
  "0996bac7": "Add support for ObjectSizeEstimator: in order to allow special optimization if possible from user code",
  "c83323f7": "Add the SeekAheadOptimize class to enable faster seek of bytes values in HttpPostRequestDecoder",
  "76652543": "Rename the old LinkedTransferQueue to LegacyLinkedTransferQueue and fork the 'current' implementation of LinkedTransferQueue (from Doug Lea). Introduce a QueueFactory which will load the right implementation depending on the JVM version. This will make sure that the one with the best performance is choosen and the code also works with java 5. See #102",
  "47af6bc9": "Encode FileRegion to ChannelBuffer's everytime the handler is called. The user should add/remove it on the fly for better performance. See #89",
  "cdbaeb86": "adding class resolver with disabled cache, fixing unit tests",
  "7e6d07af": "use weak cache as default cache - it doesn't break class unloading providing multiple implementations for caching, each good for its own specific use-case",
  "99e9da1e": "sharing classResolver cache across all CompactObjectInputStream's in the same way, as we did in ObjectDecoder",
  "b858fab8": "loadClass() already queries the cache, so no point in redoing it in resolveClass()",
  "0850449b": "Consistent fail-fast property",
  "a85249ce": "Added handing of HTTP headers with respect to browser caching and cache validation.",
  "1f1b8d83": "Add a new faster, memory efficient URL decoder.",
  "4680cd0b": "Improved performance of ProtobufDecoder using array directly when possible (Thanks Ian - iswett@yahoo.com)",
  "2ac79dcb": "A little optimization",
  "6aa66948": "Related issue: NETTY-297 Non-ssl clients connecting to ssl server should be able to fail fast all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt More strict SSL packet validation in SslHandler",
  "3bbad770": "Resolved issue: NETTY-297 Non-ssl clients connecting to ssl server should be able to fail fast all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt More strict SSL packet validation in SslHandler",
  "1a04586b": "Tiny optimization",
  "558c02b0": "Tiny optimization",
  "a9c90d0e": "Reverted back the changes about direct buffer pool - it doesn't seem to improve the performance as much as additional memory consumption and the latest one often led to OOME during testing",
  "263e1ed6": "It seems like using buffer pool during read doesn't seem to help performance at all.",
  "4ef4a922": "all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Added ChunkedInput.isEndOfInput() and changed the contract of ChunkedInput.nextChunk() and hasNextChunk() to support slow streams",
  "dd7f5889": "all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Removed a solved question from the comment all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Applied the same optimization applied to the TCP transport to the UDP transport",
  "0857f398": "Improved write performance by reducing the lame write attempts on the channel whose send buffer is full already",
  "8e82a162": "Reverted back the opportunistic write optimization due to unstability",
  "77f1b2b4": "Potential fix for performance degradation introduced during NIO write optimization",
  "4bf4d5f8": "Overhaul on NIO datagram writes all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Write operation is made in the caller thread opportunistically all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt QOTM example uses NIO datagram transport now all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt This modification still requires more performance analysis and testing",
  "b74cd608": "Overhaul on NIO socket writes all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Write operation is made in the caller thread opportunistically all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt DirectBufferPool became thread safe due to this change all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt This modification still requires more performance analysis and testing",
  "c59da2df": "Tiny optimization",
  "96600433": "Small optimizations on DirectBufferPool",
  "8eeb72cb": "Reverted the previous optimization because it might perform very bad as the number of components in the composite buffer increases",
  "c600c8f9": "all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Reverted back the optimization applied between 3.1.4 and 3.1.3 all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Removed unnecessary break statement in NioWorker.writeNow()",
  "cae3010d": "Fixed performance regression which occurs when a user tries to write something in channelConnected()",
  "14e8f0a7": "Some system calls can be called later to improve accept() performance",
  "590ebcc3": "Fixed issue: NETTY-180 Channel.getRemoteAddress() can return null for a received MessageEvent when ExecutionHandler is in the pipeline. all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt DatagramChannel implementations cache localAddresses now all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt DatagramChannel implementations don't cache remoteAddress because a user can disconnect and then connect again. However, MessageEvent.getRemoteAddress() will always have correct remoteAddress value, so it shouldn't be a problem at all.",
  "56989043": "Fixed issue: NETTY-180 Channel.getRemoteAddress() can return null for a received MessageEvent when ExecutionHandler is in the pipeline. all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt All Channel implementations but DatagramChannel now cache localAddress and remoteAddress so that they do not return null even after the connection has been closed.",
  "aeb7903b": "Fixed a mistake during optimization",
  "f059f91f": "Code simplification / optimization",
  "5fb8e806": "Tiny optimization that makes header addition faster in most cases",
  "8debedf6": "Removed the slow Class.isArray() call by returning Object[] instead of HttpChunk[]",
  "a979433f": "Tiny optimization in HttpMessageDecoder.readHeaders()",
  "f0a96e74": "Tiny optimization - no need to create a string when there's nothing to log",
  "77742f5c": "Resolved issue: NETTY-156 Improve NIO worker performance by removing unnecessary SelectionKey access all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Applied patch by Wade Poziombka all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Reduced the call to SelectionKey.readyOps() even more",
  "cd35c1d1": "all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Fixed a potential issue where ClosedChannelException is thrown unnecessarilly all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Fixed a potential performance issue where an unused exception is created when a channel is closed",
  "8db746d3": "small optimization on channelPC creation",
  "63cb4a02": "Implemented AbstractXnioChannels.handleWritable() properly (needs cleanup and optimization though)",
  "d50322f2": "Fixed a problem where AbstractChannel.toString() returns dirty cache value",
  "8f92cfb8": "Optimized event implementation to reduce memory footprint and improve performance somewhat",
  "c848b8cc": "Fixed incorrect timing test due to slow MD5 algorithm initialization",
  "4d17db6e": "Using LinkedList seems to yield same or better performance",
  "b64124ef": "all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Renamed WriteMessageQueue to FastQueue, made it generic and optimized it all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Added ConcurrentFastQueue (proof of concept yet - slow)",
  "362ecf64": "Fixed a bug where DiscardClient didn't work since the last optimization",
  "824e0034": "A little bit of optimization",
  "ab4d7f76": "Fixed an instruction about graceful shutdown - should use shutdownNow instead of shutdown for faster shutdown (and it's safe yet)",
  "243264ef": "NioWorker optimization all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Use of read write lock all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Split write into two versions (fair and unfair)",
  "93c1dd58": "Improved NIO constraint level detection - should start up faster with Sun JVM",
  "79743b05": "Tiny micro optimization on test data generation",
  "10bc616b": "Fixed issue: NETTY-30 (JDK Logging is slow.) all bom buffer codec codec-dns codec-haproxy codec-http codec-http2 codec-memcache codec-mqtt codec-redis codec-smtp codec-socks codec-stomp codec-xml common CONTRIBUTING.md dev-tools docker example handler handler-proxy handler-ssl-ocsp license LICENSE.txt microbench mvnw mvnw.cmd nohttp-checkstyle-suppressions.xml nohttp-checkstyle.xml NOTICE.txt pom.xml README.md resolver resolver-dns resolver-dns-classes-macos resolver-dns-native-macos run-example.sh scripts testsuite testsuite-autobahn testsuite-http2 testsuite-native testsuite-native-image testsuite-native-image-client testsuite-native-image-client-runtime-init testsuite-osgi testsuite-shading transport transport-blockhound-tests transport-classes-epoll transport-classes-kqueue transport-native-epoll transport-native-kqueue transport-native-unix-common transport-native-unix-common-tests transport-rxtx transport-sctp transport-udt Used logp instead of log",
  "edd969b3": "Fixed slow write performance on some circumstance",
  "e9e1b0eb": "Even more optimization in NioWorker.write()"
}, "netty-learning": {
  "": ""
}, "netty-socketio": {
  "401ad5d": "update com.fasterxml.jackson.core:jackson-databind 2.13.4 to 2.14.0-rc1",
  "4917ea4": "Merge pull request #719 from mrniko/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "344876f": "minor optimization",
  "55724af": "minor optimization",
  "e8e0492": "\n and encoding optimization. #205",
  "e69f93b": "fix unescaped \n, ' etc in json inside packet + minor optimization. #205",
  "800128d": "minor optimization. #200",
  "1f6a4de": "Instance allocation optimization. #166",
  "67004fb": "Ack parsing optimization",
  "a8f497d": "Minor encoding optimization",
  "62fadae": "b64 encoding optimization",
  "ba26f01": "JsonP support. IE(9 and lower) support. Packet building optimization. #123",
  "1c88e68": "Refactoring. Decoding optimization. Websocket encoding optimization. #123",
  "119faa3": "Room handling optimization. Race condition during map entry removing fixed.",
  "f8b6f38": "Packet encoding optimization",
  "40ebf42": "some optimization",
  "1eecaa8": "Redis store optimization",
  "89ed610": "XHRPolling 'write once' optimization.",
  "1049310": "XHR polling optimization & refactoring.",
  "0f9a30c": "XHR transport refactoring and buffer alloc optimization",
  "2547c72": "Decoder optimizations",
  "8b515f5": "Decoder performance improvements once again!",
  "39e215a": "Decoding speed optimizations",
  "b20868f": "Payload decode optimization"
}, "network-connection-class": {
  "": ""
}, "newbee-mall": {
  "": ""
}, "NewbieGuide": {
  "": ""
}, "NewPipe": {
  "22671ca": "fix: audio stream cache key, code fmt",
  "8b6e110": "Fixed the functionality, improved performance & general code cleanup",
  "28109fe": "Improve showing of toast We provide visual feedback via a toast to the user that, well, they're supposed to wait; but with the benefit of the cache openAddToPlaylistDialog() may return (almost) immediately, which would render the toast otiose (if not a bit confusing). This commit improves that by cancelling the toast once the wait's over",
  "869d46f": "rename help to fast mode",
  "88eed6c": "Add JSDoc comment and a performance note for `isDesktopMode`",
  "2019af8": "Refactor PlaybackResolver and fix cacheKeyOf",
  "ef20d9b": "Move stream's cache key generation in PlaybackResolver and improve PlaybackResolver's code",
  "4e459b3": "updated: ExoPlayer to 2.17.1. added: MediaItemTag for ManagedMediaSources. added: silent track for FailedMediaSource. added: keyframe fast forward at initial playback buffer. added: error notification on silently skipped streams.",
  "da12b92": "Fix fast seek arc not going under system ui",
  "00767f4": "Fix fast seek overlay arc not correctly centered",
  "22db417": "Moved reset-reCAPTCHA-cookie to cache tab and made it read-only",
  "993c349": "Add app icon to fastlane metadata",
  "c0d4166": "Fixed performance problems with mediaSessionManager",
  "15691ba": "Merge pull request #7002 from litetex/gh-actions-use-integrated-cache-setup-java",
  "a825253": "Using integrated cache in ``actions/setup-java``",
  "4889ab3": "Use BCP47 language codes for fastlane",
  "81c2451": "Add Release 0.20.3 fastlane changelog to allow translation",
  "f529d15": "Update fastlane/metadata/android/en-US/changelogs/956.txt",
  "06fb89f": "Fix crash on fast forward",
  "5a35842": "fix fastlane locale",
  "d6a1ae3": "Norwegian Bokmål fastlane support (#4374)",
  "5e7bbcd": "Add italian translation for fastlane",
  "5b6fc71": "translate fastlane metadata in french",
  "160a04c": "Merge pull request #4288 from avently/performance-increase",
  "5b8eda4": "Increased performance of the UI. main thread is not as busy as before",
  "e6fe6fd": "Merge pull request #3437 from TheLastGimbus/fast-rewind-forward-in-background-activity",
  "f47ef2b": "Add 0.19.4 (940) fastlane changelog",
  "1975973": "Update progress bar on fast forward/rewind",
  "3175199": "Add fast-rewind/forward buttons in layout",
  "0dc71ce": "Merge pull request #2517 from Stypox/list-slowdown-fix",
  "e6617ff": "Fix slowdowns in stream list views",
  "9fbb61a": "make fastlane description better suted for fdroid",
  "7b948f8": "Space reserving tweaks for huge video resolutions app assets build.gradle checkstyle doc fastlane gradle gradle.properties gradlew gradlew.bat LICENSE README.md settings.gradle improve space reserving, allows write better 4K/8K video data app assets build.gradle checkstyle doc fastlane gradle gradle.properties gradlew gradlew.bat LICENSE README.md settings.gradle do not use cache dirs in the muxers, Android can force close NewPipe if the device is running out of storage. Is a aggressive cache cleaning >:/ app assets build.gradle checkstyle doc fastlane gradle gradle.properties gradlew gradlew.bat LICENSE README.md settings.gradle (for devs) webm & mkv are the same thing app assets build.gradle checkstyle doc fastlane gradle gradle.properties gradlew gradlew.bat LICENSE README.md settings.gradle calculate the final file size inside of the mission, instead getting from the UI app assets build.gradle checkstyle doc fastlane gradle gradle.properties gradlew gradlew.bat LICENSE README.md settings.gradle simplify ps algorithms constructors app assets build.gradle checkstyle doc fastlane gradle gradle.properties gradlew gradlew.bat LICENSE README.md settings.gradle [missing old commit message] simplify the loading of pending downloads",
  "a026143": "linkify optimizations",
  "d8b80f9": "Improved performance of getTimeString",
  "6aebbc3": "Cache duration String to improve performance",
  "e2aa36d": "fast download pausing",
  "5db0cc5": "performance + usability",
  "a469086": "Add background to fast rewind icon, change android:src to tools:src",
  "2d6317b": "-Fixed audio-only streams thumbnail not displaying on video players. -Fixed potential play queue desynchronization due to fast forwarding on silence. -Added current thumbnail storing in base player to allow immediate retrieval for notification building. -Removed video player buffer spinner during interim buffering but not initial buffering. -Reverted foreground notification stopping on pause and on complete.",
  "0ece485": "-Updated ExoPlayer to 2.8.1, fixing livestream with long duration not loading. -Updated OkHttp to 3.10.0 and RxJava to 2.1.14. -Changed player recovery seek to use ExoPlayer built-in window seeking instead of seeking after stream window starts playing. -Changed playback speed changer default step size to 25%. -Changed player notification to reset on all state changes. -Fixed gradle dependency version incorrect variable names. -Fixed video player double tap not working during pause. -[#1412] Fixed NPE when sharing video to main video activity when it was playing but is out of focus: Reset main player state when new intent is received. -[#1410] Fixed fast forwarding and rewinding not working within 10 seconds from beginning or end of a stream window.",
  "0832171": "Add German translation of the description for fastlane",
  "61b4225": "-[#1060] Added toggle to disable thumbnail loading. -Added button to wipe metadata cache. -Added more paddings on player buttons. -Added new animations to main player secondary controls and play queue expand/collapse. -Refactored play queue item touch callback for use in all players. -Improved MediaSourceManager to better handle expired stream reloading. -[#1186] Changed live sync button text to 'LIVE'. -Removed MediaSourceManager loader coupling on main players. -Moved service dependent expiry resolution to ServiceHelper. -[#1186] Fixed livestream timeline updates causing negative time position. -[#1186] Fixed livestream not starting from live-edge. -Fixed main player system UI not retracting on playback start.",
  "a88e19a": "-Added toggle to enable fast inexact seek in players. -Improved player sync calls to recognize different metadata updates. -Changed MediaSourceManager to synchronize only after timeline changes and reenabled multiple sync calls to player. -Renamed listener and synchronization methods related to MediaSourceManager.",
  "0c17f08": "-Added loader eviction to avoid spawning too many threads in MediaSourceManager. -Added nonnull and final constraints to variables in MediaSourceManager. -Added nonnull and final constraints on context related objects in BasePlayer. -Fixed Hls livestreams crashing player when behind live window for too long. -Fixed cache miss when InfoCache key mismatch between StreamInfo and StreamInfoItem.",
  "9ea08c8": "-Re-added loading for items prior to current index in MediaSourceManager to allow faster access time. -Added some null checks annotation.",
  "a1220c7": "-Added serialized cache for transferring serializable objects too large for intent transactions. -Fixed potential transaction too large exceptions for player intents.",
  "b466836": "-Added better assertions and documentations to new mechanism in MediaSourceManager. -Modified LoadController to allow fast playback start and increased buffer zigzag window. -Removed unnecessary loading on timeline changes. -Changed select message in MediaSourceManager to cause immediate load. -Reduced default expiration time in MediaSourceManager. -Fixed main video player not showing end time on audio-only streams. -Fixed live stream has player view disabled after transitioning from audio stream. -Fixed inconsistent progress bar height between live and non-live video on main player.",
  "b3b2748": "-Improved player queue stability by using more aggressive synchronization policy. -Added sync buttons on live streams to allow seeking to live edge. -Added custom cache key for extractor sources to allow more persistent reuse. -Refactored player data source factories into own class and separating live and non-live data sources.",
  "563a413": "-Fixed inconsistent audio focus state when audio becomes noisy (e.g. headset unplugged). -Fixed live media sources failing when using cached data source by introducing cacheless data sources. -Added custom track selector to circumvent ExoPlayer's language normalization NPE. -Updated Extractor to correctly load live streams. -Removed deprecated deferred media source and media source manager. -Removed Livestream exceptions.",
  "efd4db4": "-Fixed NPE issues when button views are clicked on local playlist and statistics playlist fragments are out of focus. -Added disk cache size limit for image loader. -Fixed button names for playlist rename dialog.",
  "225b43c": "-Modified BaseLocalItemFragment to no longer cache items when going into background. -Refactored and restructured all LocalItem related fragments and dialogs. -Added error logging to unmonitored single-use observables. -Modified playlist metadata query to return by alphabetical order. -Removed sending toast when playlist is renamed or deleted as it is obvious. -Removed unused code in main fragment.",
  "62814f0": "-Fixed memory leak in playlist append dialog due to rogue flowables. -Changed image loader memory cache to use limited LRU.",
  "6f9deea": "-Fixed memory leak due to image loader overusing memory cache. -Added disk cache for local item loading.",
  "a74c416": "-Improved bulk stream upsert into playlist performance by 5x. -Added custom info item type for plain stream entity.",
  "0fe5a44": "-Removed todo for timeout feature on info cache.",
  "77678b8": "-Modified InfoItem LRU cache expire to allow expiration (current default 4 hours). -Modified info type display on InfoItemDialog to show uploader name if exists.",
  "4113283": "Merge pull request #833 from TeamNewPipe/fastlane",
  "d53cb01": "add fastlane support",
  "1d136c6": "-Added fast seeking on background notification when play queue size is 1. -Fixed player intent with quality selection not used in detail fragment. -Fixed window index not reset on sync when not playing. -Fix dropdown play string for stream info item.",
  "1fb3774": "-Changed play queue item building to shrink thumbnail before caching. -Renamed refactor directory in player to helper. -Fixed background player notification update causing lag on older spec models. -Fixed service activity theme not changing after user setting is changed. -Fixed NPE on popup player fling to close. -Fixed audio reactor volume and max volume mixup. -Added correct toast for each player error case. -Fixed button coloring for play queue service activity on landscape. -Changed title and uploader text to marquee for vertical service activity. -Removed cache clearing on every thumbnail load.",
  "4553850": "-Baked recovery records into play queue items. -Added previous and next button on main video player. -Reverted double tap to seek for popup and main video players. -Improved shuffling to use recovery record. -Changed shuffling to place current playing stream to top of queue. -Fixed exception when removing last item on queue. -Changed fast forward and rewind button to previous and next on background notification. -Changed background notification to not update when screen is off and update immediately when screen is turned back on. -Removed unused intent strings. -Changed 'Append' to 'Enqueue' for append text.",
  "89b11ff": "Fail-fast for service id == -1",
  "33e332f": "impofed performance and made similar video button hidable"
}, "nifi": {
  "d5c79fdc": "NIFI-10887: Addressed performance concerned. Use String.indexOf() instead of Pattern.matcher() when using Literal Replace. Use a NonFlushableOutputStream when ProcessSession.write() is called. Implemented hashCode() on AbstractConnection. Updated default Run Schedule on ReplaceText from 0 ms to 25 ms. Added a Surround Replacement strategy that allows both prepending and appending text. Updated unit tests to account for this.",
  "2a889800": "NIFI-4572: Include database and table names in CaptureChangeMySQL events even when cache is not configured",
  "7019e182": "NIFI-10835 Improved performance of TestControlRate",
  "4b691b13": "NIFI-10192 Caffeine cache schema request for reuse",
  "98ec2563": "NIFI-10059 Remove incorrect removal of controller service from cache (#6082)",
  "df00cc6c": "NIFI-6047 Cleaned up code to allow tests to run against 1.13.0-snapshot Removed DMC. NIFI-6047 Started integrating changes from NIFI-6014. NIFI-6047 Added DMC tests. NIFI-6047 Added cache identifier recordpath test. NIFI-6047 Added additional details. NIFI-6047 Removed old additional details. NIFI-6047 made some changes requested in a follow up review. NIFI-6047 latest. NIFI-6047 Finished updates First round of code review cleanup Latest Removed EL from the dynamic properties. Finished code review requested refactoring. Checkstyle fix. Removed a Java 11 API NIFI-6047 Renamed processor to DeduplicateRecord",
  "b40b5a7c": "NIFI-9625 This closes #5711. Refactored Distributed Cache Server and Client Tests - Replaced TestServerAndClient with separate classes for Set Server and Map Server - Implemented before and after annotations for starting and stopping server instances NIFI-9625 Added check for cache directory existence before clean NIFI-9625 Updated Map and Set Cache Server Tests to use random port",
  "1191e511": "NIFI-9335: Updated AvroTypeUtil#createAvroRecord to ensure that if the given Avro Schema contains a field whose value is defaulted, the produced Avro Record has that value populated. Also added a unit test to verify behavior. Ran performance test (which is igonred and must be manually enabled) - about 2.1 seconds before the change and about 2.5 seconds after the change for each iteration.",
  "73f88b32": "NIFI-9061: Eliminated the nifi.cluster.node.protocol.threads property in favor of nifi.cluster.node.protocol.max.threads property so that we can properly scale out the number of threads used for HTTP request replication. Implementing a caching mechanism for creating the DateTimeFormatter used by TimeAdapter in order to improve performance when parsing timestamps in web requests. Implementing caching logic for caching the number of characters that can rendered without needing an ellipsis for some components in the UI (#5316)",
  "d96398fe": "NIFI-9200: Free cache on heap after disabling AbstractCSVLookupService",
  "21c2fb95": "NIFI-8973 Implement KerberosUserService API and keytab, password, and ticket cache implementations",
  "02ea103c": "NIFI-8379 This closes #4949. Improved reliability and performance of DBCPServiceTest",
  "528fce24": "NIFI-7646, NIFI-8222: Instead of having StandardProcessSession call ContentRepository.read(ContentClaim), introduced a new ContentRepository.read(ResourceClaim) and hold open the InputStream to the ResourceClaim. This can't be supported by EncryptedContentRepository, so introduced a method to allow using this or not. The benefit here is that when we have many FlowFiles read within a session, such as when using MergeContent/MergeRecord or a processor configured with a Run Duration, we can hold open a single InputStream instead of constantly opening FileInputStreams and seeking to the appropriate location. This is much faster. - Instead of entering a 'synchronized' block for every provenance event, serialize up to 1 MB worth of data, and then enter synchronized block to write that data out. This avoids large amounts of lock contention and context switches",
  "dcc4fb00": "NIFI-7888 Added support for authenticating via SAML - Add dependency on spring-security-saml2-core - Updated AccessResource with new SAML end-points - Updated Login/Logout filters to handle SAML scenario - Updated logout process to track a logout request using a cookie - Added database storage for cached SAML credential and user groups - Updated proxied requests when clustered to send IDP groups in a header - Updated X509 filter to process the IDP groups from the header if present - Updated admin guide - Fixed logout action on error page",
  "c79ad150": "NIFI-7999: Do not call NioAsyncLoadBalanceClient.nodeDisconnected() if node was already in a disconnected state. Doing so was resulting in that method being called constantly on startup, and with the synchronization in place that can result in a huge performance hit on startup. Also updated RemoteQueuePartition to move a small predicate into its own method. This was done because the predicate was previously defined within a synchronized method, which meant that invoking that predicate required synchronization.",
  "badcfe1a": "NIFI-7992: Periodically check disk usage for content repo to see if backpressure should be applied. Log progress in background task. Improve performance of background cleanup task by not using an ArrayList Iterator and constantly calling remove but instead wait until the end of our cleanup loop and then removed from the list all elements that should be removed in a single update",
  "6c3c2c17": "NIFI-7736 Fix: Empty All Queues performance - When authorizing request, checking read/write credentials on encapsulated process groups and connections was doubly recursive (for each element it added all child elements multiple times again, making this exponential instead of linear).",
  "716ba992": "NIFI-7669 Changed custom PBE AEAD algorithm to derive key once rather than on every encrypt/decrypt operation, leading to substantial performance gains. Updated documentation. Added unit tests.",
  "90c9db82": "NIFI-7679 Changed flow fingerprint masking logic to derive a static key once (slowly) from nifi.sensitive.props.key and use a (fast) HMAC/SHA-256 operation during fingerprinting to resolve unacceptable delays. Added unit tests.",
  "0b9f2fbe": "NIFI-7678: Fixed memory leak, improved some logic that constantly created collections unnecessarily. Changed types of Collections being used to much more efficient implementations. Removed using Streams for performance-critical parts of application NIFI-7678: Check if debug is enabled before logging message about processor.onTrigger because obtaining class name is expensive",
  "6cece9ca": "NIFI-7572: Added ScriptedTransformRecord processor. Addressed a couple of minor bugs in mock classes that were encountered during testing. NIFI-7572: Addressed review feedback NIFI-7572: Fixed bug that resulted in constantly recompiling Jython script. Updated documentation showing performance difference. Fixed problematic unit tests for TestResizeImage",
  "c9d08a76": "NIFI-7536: Fix to improve performance when determining the run status of processors when needing to wait for all processors to stop for updating parameter context, etc.",
  "13418ccb": "NIFI-7437 - created separate thread for preloading predictions, refactors for performance",
  "561be89a": "NIFI-7250 activate user.timezone appropriate to each region NIFI-7250 fix a test which appears brittle at least on windows builds on slow environments NIFI-7250 activated a timezone run for AU Australia/Melbourne which exposed a poor magic number and needless assertion but interesting results worth keeping",
  "ed324058": "NIFI-7021 cacheFile not reliable on builds with latest puppycrawl checkstyle",
  "e05d11c0": "NIFI-6787: Added a comment to the UI tooltip, user guide, and javadocs to indicate that round robin may skip a node if that node is not receiving the data as fast as other nodes in the cluster, in order to maximum throughput.",
  "d148fb18": "NIFI-3834 This closes #3821. Added encrypted content repository implementation. Added skeleton implementation of EncryptedFileSystemRepository. Added new impl to META-INF registry. Added investigation comments to FileSystemRepository. Implemented RepositoryObject block and stream encryptors. Added passing unit test for encryption and decryption of multiple content writes (large buffered file) for AES-CTR encryptor. Refactored shared logic from AES CTR and G/CM encryptors to abstract parent. Added working unit test for writing/reading via encrypted file system repository. Added stream wrappers. Added encryptor. Added working unit test for writing/reading multiple pieces of content via encrypted file system repository. Added unit test skeleton for writing/reading multiple pieces of content with different keys via encrypted file system repository. Implemented key management skeleton for encrypted content repository. Multiple content claims can now be encrypted with different keys on the same resource claim and retrieved. Implemented validation on setting active key id. Added content repository encryption properties to NiFiProperties. Implemented configuration of encryption services from NiFiProperties. Refactored NiFiPropertiesLoader functionality to CryptoUtils for availability in other modules. Added RepositoryEncryptionConfiguration and repo-specific subclasses for data containers. Continued refactoring of CryptoUtils and RepositoryEncryptorUtils library methods. Exposed some internal state of FileSystemRepository via protected getters so encrypted implementation could access. Refactored EncryptedFileSystemRepository to extend rather than duplicate FSR. Refactored EFSR to use ECROS which now extends extracted ContentRepositoryOutputStream protected inner class in FSR. Added unit test to encrypt & decrypt image resource. Added smaller image resource for easier unit test debugging. Added importFrom method to resolve issue where GetFile would not encrypt content persisted to repository. Added text test resource for tests around exporting claim subsets. Added exportTo methods to handle decrypting encrypted content. Performed large unit test refactoring, moving shared logic to helper methods. Added unit test for merged content claim with header/footer/demarcator. Added unit test for merging content claims each encrypted with a different key. Ignored non-deterministically failing firewall DNS test. Added documentation to User and Admin Guide for Encrypted Content Repository. Added image. Added refactored utility method for shared ROEM extraction and validation logic in AbstractAESEncryptor. Replaced ad-hoc generation of ciphertext stream and byte[] for testing with static initialization from pre-generated serialized form for performance. Cleaned up unused test code. Cleaned up Javadoc and code comments. Refactored shared logic. Fixed checkstyle issue. Fixed test failure due to error message change. Added experimental warning to repository implementation classes and User Guide documentation.",
  "fbd6200a": "NIFI-6589: This closes #3670. Cache results from zookeeper when determining the leader NIFI-6589: Updated CuratorLeaderElectionManager to cache results for no more than 5 seconds per review feedback",
  "254a84d7": "NIFI-6371: Fixed bug that caused root-level Controller Services to stay cached and therefore continually be validated, even after being deleted. Also cleaned up code that looked for specific text in Exceptions instead of of catching specific Exceptions",
  "f671a37a": "NIFI-5505 Added Java 11 build to Travis CI Introduced stages to cache dependencies before build and test Added --fail-never to dependency cache stage to allow dependency:go-offline to finish and update the cache with any dependencies that were able to be downloaded Added download of AdoptOpenJDK 11.0.4 for the Java 11 build Removed setting environment variables to enable easier sharing of cache between build, region/language settings are passed in via the command line when invoking maven Formatted scripts to allow multiline commands for more readability Replaced 'exit ${PIPESTATUS[0]}' with 'test ${PIPESTATUS[0]} -eq 0' to avoid using 'exit' in script, which prevents Travis from completing the cache upload after the build completes Install Maven 3.6.1 for the -ntp (no-transfer-progress) feature Updated all build stages to exclude non-api nar and assembly modules to decrease build time Dependency cache stages check if the cached maven repository doesn't exist or is empty before attempting to download dependencies",
  "36bbc777": "NIFI-6097 - Upgraded the fasterxml jackson version to 2.9.8. Ensure that the version is consistent across modules using a maven property defined in the root pom.",
  "36c0a99e": "NIFI-5938: Added ability to infer record schema on read from JsonTreeReader, JsonPathReader, XML Reader, and CSV Reader. - Updates to make UpdateRecord and RecordPath automatically update Record schema when performing update and perform the updates on the first record in UpdateRecord before obtaining Writer Schema. This allows the Writer to to inherit the Schema of the updated Record instead of the Schema of the Record as it was when it was read. - Updated JoltTransformRecord so that schema is inferred on the first transformed object before passing the schema to the Record Writer, so that if writer inherits schema from record, the schema that is inherited is the trans transformed schema - Updated LookupRecord to allow for Record fields to be arbitrarily added - Implemented ContentClaimInputStream - Added controller service for caching schemas - UpdatedQueryRecord to cache schemas automatically up to some number of schemas, which will significantly inprove throughput in many cases, especially with inferred schemas.",
  "d3b16748": "NIFI-5805: Pool the BinaryEncoders used by the WriteAvroResultWithExternalSchema writer. Unfortunately, the writer that embeds schemas does not allow for this optimization due to the Avro API",
  "830f7aa8": "NIFI-5718: Added performance-based unit test (Ignored) for LineDemarcator",
  "564ad0cd": "NIFI-5718: Implemented LineDemarcator and removed NLKBufferedReader in order to improve performance",
  "765df678": "NIFI-5757 Using Caffeine instead of slow synchronization on LinkedHashMap for caches - mainly avro schema caches",
  "2e1005e8": "NIFI-5640: Improved efficiency of Avro Reader and some methods of AvroTypeUtil. Also switched ServiceStateTransition to using read/write locks instead of synchronized blocks because profiling showed that significant time was spent in determining state of a Controller Service when attempting to use it. Switching to a ReadLock should provide better performance there.",
  "4a25402c": "NIFI-3425: Provide ability to cache CQL statements",
  "87cf474e": "NIFI-5581: Disable connection pooling for OkHttpReplicationClient. We should revisit this in the future, but for now, it appears that Jetty is having problems with the connections if they are reused. By disabling the Connection Pooling, we address the concern, but for secure connections this means that every request results in a TLS handshake - and for a mutable request, both the verification and the 'performance' stages require the TLS handshake. But it's better than timing out, which is the currently observed behavior",
  "e3b0949b": "NIFI-4508: This closes #2784. Update ConsumeAMQP to use basicConsume API instead of basicGet in order to provide better performance NIFI-4508: Added some additional unit tests to verify behavior",
  "16701444": "NIFI-5191: Revert 'NIFI-4631: Use java.nio.file.Files in ListFile to improve performance'",
  "604656fe": "NIFI-950: Make component validation asynchronous NIFI-950: Still seeing some slow response times when instantiating a large template in cluster mode so making some minor tweaks based on the results of CPU profiling NIFI-5112: Refactored FlowSerializer so that it creates the desired intermediate data model that can be serialized, separate from serializing. This allows us to hold the FlowController's Read Lock only while creating the data model, not while actually serializing the data. Configured Jersey Client in ThreadPoolRequestReplicator not to look for features using the Service Loader for every request. Updated Template object to hold a DOM Node that represents the template contents instead of having to serialize the DTO, then parse the serialized form as a DOM object each time that it needs to be serialized. NIFI-5112: Change ThreadPoolRequestReplicator to use OkHttp client instead of Jersey Client NIFI-5111: Ensure that if a node is no longer cluster coordinator, that it clears any stale heartbeats. NIFI-5110: Notify StandardProcessScheduler when a component is removed so that it will clean up any resource related to component lifecycle. NIFI-950: Avoid gathering the Status objects for entire flow when we don't need them; removed unnecessary code NIFI-950: Bug fixes NIFI-950: Bug fix; added validation status to ProcessorDTO, ControllerServiceDTO, ReportingTaskDTO; updated DebugFlow to allow for pause time to be set in the customValidate method for testing functionality NIFI-950: Addressing test failures NIFI-950: Bug fixes NIFI-950: Addressing review feedback NIFI-950: Fixed validation logic in mock framework This closes #2693",
  "0688363d": "NIFI-5200: Fixed bug that caused the wrong InputStream to be closed by StandardProcessSession if calling Session.read() from the callback of another Session.read(); also changed default of the 'allowSessionStreamManagement' flag from 'false' to 'true' as it will provide performance benefits in some cases and NIFI-516 outlined that it should be 'true' initially but ended up being false when the PR was merged.",
  "758e4468": "NIFI-4631: Use java.nio.file.Files in ListFile to improve performance This closes #2565.",
  "b4a9f52a": "NIFI-4866: Fixed HBase performance issue",
  "c91d9988": "NIFI-4717: Several minor bug fixes and performance improvements around record-oriented processors",
  "ecb9c5e9": "NIFI-4445 on fast machines the engine ran for 0 millis so the test needs to allow this case",
  "af3a5787": "NIFI-4598: When we retrieve the 'controller' from a remote NiFi instance in order to determine which ports are available, cache those results for up to some configurable amount of time (default 30 secs) so that we don't constantly issue HTTP Requests to the remote nifi",
  "c1b99d58": "NIFI-4028 - fix cache update when Wait releases flow files",
  "a307ea3a": "NIFI-4098 This closes #2013. Adjust ParseCEF to re-use bean validator in order to improve performance",
  "ba56774f": "NIFI-4151: Updated UpdateAttribute to only create JAXB Context once; Minor performance tweaks to standard validators and StatusMerge.prettyPrint; updated AbstractConfiguredComponent to not create a new ValidationContext each time that validate is called but only when needed; updated FlowController, StandardControllerServiceProvider, and StandardProcessGroup so that component lookups can be performed using a ConcurrentMap at FlowController level instead of having to perform a depth-first search through all ProcessGroups when calling findProcessor(), findProcessGroup(), findXYZ() This closes #1979",
  "d8dc2bb0": "NIFI-4047: Addressed issue with inconsistent Lexical policy between used cached schemas and non-cached schemas",
  "067e9dfe": "NIFI-4003: Expose configuration option for cache size and duration NIFI-4003: Addressed remaining spots where client does not cache information",
  "5aa3baca": "NIFI-3568: This closes #1577. Use a cached thread pool in order to allow ThreadPoolRequestReplicator to scale up the number of threads to some configurable max",
  "762293c0": "NIFI-3935 made the old persistent prov test more forgiving of timing issues and extended lucene test timeouts for slower environments. These should be integration tests really.",
  "12249e5a": "NIFI-2268: Instead of allowing HandleHttpRequest to run constantly calling BlockingQueue.poll() as fast as possible, call BlockingQueue.poll(2, TimeUnit.MILLISECONDS) to avoid overutilization of CPU when there is no work to be done",
  "3bfe323a": "NIFI-3769 - Document detail value of 'nifi.provenance.repository.warm.cache.frequency'",
  "2589df80": "NIFI-3304 removed unneeded Java 8 codecache info from Admin Guide",
  "556f309d": "NIFI-3520 Refactoring instance class loading - Fixing FlowController to use appropriate class loader when instantiating processor - Updating ExtensionManager to leverage new flag in MANIFEST from NAR plugin - Adding ReloadComponent interface and refactoring instance class loading to use it - Fixing FetchHDFS issue with TDE by using ugi.doAs - Refactoring nifi-nar-utils so that ExtensionManager only lives in nifi-framework - Caching temp components found during service loader in ExtensionManager - Updating authorizables, docs, and fingerprinting to use the cached components - Introducing a flag on @RequiresInstanceClassLoading to indicate if ancestor resources should be cloned - Updating developer guide regarding cloneAncestorResources flag - This closes #1635",
  "31ec01b5": "NIFI-3004 Added failing unit test to SSLContextServiceTest to demonstrate that customValidate caches result from previous validation.",
  "1b4729e4": "NIFI-3240 - AttributesToJson performance improvements",
  "35e8bedc": "NIFI-3249 - UpdateAttribute performance improvements",
  "44c9ea0a": "NIFI-3236 - SplitJson performance improvements",
  "42851576": "NIFI-3235 - EvaluateJsonPath performance improvements",
  "4d1bcc80": "NIFI-3032 Resolved issue where multiple invocations of NiFiPropertiesLoader.withKey() used cached key. Added unit tests and resources.",
  "bb243127": "NIFI-2142 Added Guava cache for XSLT stylesheets in TransformXml",
  "321a2398": "NIFI-2467: - Resetting cached search term when closing the dialog to ensure the same search time works upon re-opening. NIFI-2467: - Fixing issue preventing the selection of an autocomplete result.",
  "da238b16": "NIFI-2122: - Merging responses for the current user and the flow configuration. - Returning whether NiFi is configured with a policy based authorizer in the flow configuration. - Only showing the users and policy icons when configured with a policy based authorizer. - Failing faster when invoking the users or policies endpoint when not configured with a configurable authorizer.",
  "0e085bdd": "NIFI-2065: When a provenance query matches the max number of results requested, stop querying lucene for improved performance",
  "2d03489e": "NIFI-1296, NIFI-1680, NIFI-1764, NIFI-1837, NIFI-1827, NIFI-1699 implemented new Kafka processors that leverage Kafka 0.9 API - Improved StreamScanner for better performance - Renamed StreamScanner to StreamDemarcator as suggested by Joe - Added failure handling logic to ensure both processors can be reset to their initial state (as if they were just started) - Provided comprehensive test suite to validate various aspects of both Publish and Consume from Kafka - Added relevant javadocs - Added initial additionalDetails docs - Addressed NPE reported by NIFI-1764 - Life-cycle refactoring for the existing PutKafka to ensure producer restart after errors - Incorporated code changes contributed by Ralph Perko (see NIFI-1837) - Addressed partition issue in RoundRobinPartitioner discussed in NIFI-1827 - Updated PropertyDescriptor descriptions to reflect their purpose",
  "16f18524": "NIFI-259 Updating logger message for AbstractListProcessor to reference State Manager in onTrigger instead of the distributed cache.",
  "6b54753d": "NIFI-1316 adding option to DetectDuplicate to not cache the entry identifier",
  "684f48ff": "NIFI-1374 updated admin guide to provide advice for permgen and codecache",
  "02dc7e82": "NIFI-1239: Fixed bug that caused the cache to hold 0 elements instead of 100",
  "67aed5eb": "NIFI-1224: made TestExecuteSQL about 25 seconds faster. Same logic just less to process",
  "37d6b735": "NIFI-1155: Refactored StandardFlowFileQueue to update member variables more intelligently, using CAS operations instead of locks. This reduces code complexities because other optimizations that previously existed are no longer needed",
  "e748fd58": "NIFI-817 Processors for interacting with HBase - Refactoring PutHBaseCell to batch Puts by table - Adding optional Columns property to GetHBase to return only selected column families or columns - Making GetHBase cluster friendly by storing state in the distributed cache and a local file - Adding Initial Time Range property to GetHBase - Adding Filter Expression property and custom validate to prevent using columns and a filter at the same time - Creating an HBaseClientService controller service to isolate the HBase client and support multiple versions - Creating appropriate LICENSE/NOTICE files - Adding @InputRequirement to processors - Addressing comments from review, moving hbase client services under standard services - Making sure result of session.penalize() is assinged to FlowFile variable before transferring",
  "facc4242": "NIFI-571: Removed checking List<List<ControllerServiceNode>> to see if it contains a ControllerServiceNode, as it would always return false; intent was to check all inner Lists, but it's really not necessary (a bit of an optimization) that just confuses things",
  "dea9e224": "NIFI-432 the short duration of 75ms appears too tight for present design. Moving to 2000 which is still very fast for testing.",
  "973b4933": "Adjusting handling of map to cache data items on an instance basis.",
  "d6c02a56": "NIFI-162 added a couple new sections to the overview to address architecture of nifi and performance"
}, "NineOldAndroids": {
  "ed8ec7f": "Merge branch 'heavyplayer-animatorproxy_cache_fix' into dev",
  "3d46b36": "Fix for AnimatorProxy's cache mechanism; before reusing a proxy checks whether it still is the animation of the given view."
}, "NoHttp": {
  "": ""
}, "novel": {
  "051fd63": "build(cache): 集成配置 caffeine 本地缓存和 redis 远程缓存"
}, "novel-plus": {
  "29d074e": "refactor: 移除 Ehcache，默认缓存设置为 Redis",
  "6e171d2": "集成fastDfs",
  "f0c099f": "解决ehcache缓存序列化存储的bug"
}, "NullAway": {
  "149700b": "Enable build cache (#562)",
  "cd6e24f": "Make class-level caches for InferredJARModelsHandler instance fields. (#315)",
  "d0bddbc": "Fix error on checking the initTree2PrevFieldInit cache. (#252)"
}, "NumberProgressBar": {
  "": ""
}, "objectbox-java": {
  "342b96a": "AbstractObjectBoxTest: make flex map null by default (for test performance).",
  "4261370": "MapConverter: cache small builder.",
  "44c9e73": "prepare statically cached FlexBuffersBuilder",
  "fe380a5": "BoxStore: explicitly mention that boxFor caches.",
  "160b780": "Add cache debug log flags",
  "287c297": "Remove performance-only tests (not included in test suite).",
  "f3d9008": "reworked deleteAllFiles: fail fast, throw NPE for null param, safer concurrency added JavaDocs",
  "1e607be": "getAndroidFilesDir: fail fast if dir does not exist, etc.",
  "7de33b8": "relation constructor should fail fast for null values to track down non-standard initialization (e.g. JSON libs)",
  "f79e61b": "ToOne fixes: isResolved(), cached target/id after put",
  "8e3da66": "closeThreadResources() to free any cached resources tied to the calling thread (e.g. readers)",
  "1a7af3a": "test tweek: allocating 16 MB chunks is faster than 64 & 128 (~0,3s instead of ~1s) and a bit faster than 8 and 32",
  "c2f57e3": "getting all entities in native, crashes at the moment (local reference table overflow (max=512)) and is slower on Desktop when deleting local refs"
}, "okdownload": {
  "b146003": "feat: support get info refrence from task refrence because after task completed we delete info from cache for health lifecycle but people may need info refrence for the task",
  "21b460a": "prefs: handle bunch of canceled-callbacks on download-tasks for cancel bunch of tasks to improve performance",
  "4bc4e65": "demo: cache content-uri for resumable for content-uri refs #2",
  "0b19d2e": "evert 'perfs: callback start or end directlly to improve performance of callback speed of some completed tasks' because it not make sense",
  "e5177f7": "prefs: move check-network-valid logic before connect because it too slow so we will not invoke it on invoke-start-thread",
  "1c1219c": "prefs: cache connectivity-manager on download-strategy if need instead of get from context each time",
  "3252913": "perfs: callback start or end directlly to improve performance of callback speed of some completed tasks",
  "05eab4e": "prefs: cache the status of network-state-access permission to improve performance to check network state",
  "c9b25a5": "prefs: add key-to-id cache on breakpoint-on-cache to speed up find id for same key task when create a task",
  "893b03e": "refactor: make remit sync info cache to database asynchronous to fix pause bunch task may block wait for sync",
  "6ef2aa7": "refactor: cache file reference on task and info to reduce create new instance",
  "8d7e182": "refactor: public breakpoint-store using real sqlite database and using remit-database wrapper for internal download to enhance performance",
  "49bd606": "tests: add unit-test for download-cache-test",
  "90e201e": "chore: fix style check issue on store-on-cache",
  "229554e": "fix: fix may occur out-of-range error from sparse-array on store-on-cache",
  "da53750": "fix: fix npe on store-on-cache because of breakpoint-info can be removed anytime from map",
  "cc9c8bc": "feat: cached not stored info for avoid duplicate id for same task",
  "7237f1d": "feat: ensure cancel operation is effective even if connection is waiting for response, input stream is reading or disconnect is very slow",
  "5ae8592": "docs: add notes of stability and reliable, flexible and performance on readme doc"
}, "okhttp-OkGo": {
  "28d102b": "fix cachePolicy NPE",
  "499b937": "Some optimization",
  "c6ce2ca": "Some optimization",
  "678e55c": "合并cache分支，完成缓存处理"
}, "okhttputils": {
  "": ""
}, "onedev": {
  "9d54cf7": "Fix cache allocation race condition",
  "5eaa109": "Fix issue #1161 - LFS upload is very slow",
  "805cb84": "HA support for user and email cache",
  "1c542e4": "Merge branch 'performance'",
  "326f378": "Fix issue #833 - Page loads slowly when there are many projects (10k+)",
  "066fbc9": "Fix issue #799 - Unable to create cache directory on Kubernetes executor",
  "a1ead3f": "Remove commits cache as it does not benefit too much",
  "f2334ba": "Fix cache security issue",
  "b3697b6": "Fix issue #740 - Improve performance of large diff page by only syntax highlighting differences",
  "e740c37": "Improve commits page performance",
  "f8c4038": "Fix issue #710 - Typing too fast in command palette can cause wrong option to be selected",
  "a282433": "Fix issue #666 - Git checkout still slow even if checkout folder is cached",
  "d0d5ea7": "Improve performance of finding project by path",
  "f0004e5": "Normalize cache key",
  "9d3b8c7": "Fix issue #518 - Build docker image step runs slowly on Windows",
  "017e7e7": "Fix issue #429 - Improve page loading performance",
  "c9934c0": "Improve performance of build spec view/edit when there are many jobs",
  "523548a": "Load problem popover on mousedown to improve page loading performance",
  "5feda50": "Using SSHD class CachingPublicKeyAuthenticator for better performances",
  "07f7aba": "fix issue #17: Revision compare page performance is not good",
  "5bb3043": "Improve performance by reducing queries",
  "a5feb8b": "Add npm caches for node job suggestions",
  "c4fd345": "fail fast in build.sh",
  "02f5dcb": "Improve performance of project.getJobNames()",
  "095d7db": "User can select whether or not to create cache labels on k8s",
  "3d13e64": "Update node cache labels when job is started for accuracy when job is running",
  "9652fd1": "Use $home/onedev-cache to store job caches",
  "9924818": "Leverage Kubernetes node affinity to increase job cache hit rate",
  "7f6a4ce": "Batch load build status for multiple commits for performance reason",
  "1d05bb4": "Improve performance of PatternSet.listFiles",
  "6e6535c": "Exclude temp and cache when backup target installation directory during upgrade",
  "2dbe96e": "Add CI job cache support",
  "4781c97": "Improve session destroy performance",
  "602806e": "Optimize performance of commit info collection",
  "35bdc6d": "Use cached symbols only when version matches",
  "2ffa902": "Some performance improvements and bug fixes",
  "7128335": "Cache meta information for performance",
  "3d4934d": "Configure Exodus to use shared log cache to reduce background clean threads",
  "c3fd6b6": "Disable session cache to reduce Wicket memory usage",
  "addc3fa": "Fix a performance issue by reusing PrettyTime instance",
  "6e19e65": "Replace PegDown with FlexMark for performance reasons",
  "28215f7": "Store parsed symbols in Lucene index for better performance",
  "b44ae9b": "Minor optimization of file-list",
  "e1392d1": "Skip suggest intermediate inputs if typing too fast",
  "89b434b": "Fix the typing fast issue in InputAssistPanel (still exist)",
  "83ffa04": "Fix various issue of typing too fast in commits search field",
  "3e29722": "Use jgit whenever possible for performance and compatibility",
  "d3116a7": "Testing db performance",
  "e6adaba": "Improve revision compare page performance when compare a single path",
  "4e1ec99": "Improve branches page performance.",
  "94e97e9": "Use timer to minimize performance impact of cursor and scroll position remember.",
  "8107808": "Use timeout to improve performance of cursor activity",
  "87f3299": "slow pace",
  "4d5cae8": "fix the slowly eat issue when switching between edit file and other tabs",
  "ee0fba6": "Implement last commits of children feature with cache speed up ability.",
  "068226d": "Last commits of children cache draft.",
  "edfd2f7": "Use trigram instead of bigram for text search for better performance.",
  "ed50119": "Use cached JGit repo and Lucene FieldCache to improve performance.",
  "8729120": "Do not consider performance for now!",
  "89277ef": "Prepare performance test of DefaultIndexManager",
  "a8e2cec": "JGit performance test.",
  "fc41ea3": "Cache update log to improve performance when there are many updates in a request.",
  "b2d163b": "Improve performance of TextDiffPanel by rendering diff lines without using wicket components.",
  "e5d7db9": "Improve DiffUtils performance.",
  "0882e56": "Return customized permission object to control authorization procedure for authorization optimization purpose.",
  "eb24685": "Remove Launcher as it turns out that slow starting is caused by anti-virus software."
}, "openai-java": {
  "": ""
}, "openapi-generator": {
  "cbbe243b": "update python fastapi dep to newer versions (#14188)",
  "31ea76b5": "Support Gradle build cache when using absolute path references (#13671)",
  "b722fd90": "cache the model name for faster lookup in r client gen (#12918)",
  "d2be7116": "powershell: cache model name for faster lookup (#12917)",
  "8c0cb8b0": "ad fastly to user list (#12547)",
  "fd5ad7f8": "Fix issue with fastapi generator converting all fields to snake_case (#12261)",
  "20c37b5a": "Add source folder variable to fastapi fix 12118 (#12119)",
  "9aaf30e0": "Conditionally install phpenv based on cache (#12030)",
  "8eb818c0": "skip php 8.1.4 installation by using cache",
  "8580e9fc": "Bump actions/cache from 2.1.7 to 3 (#11934)",
  "6cf4e79f": "[python-experimental] adds missing bases, performance improvements (#11517)",
  "e2ca42a6": "Bump actions/cache from 2.1.6 to 2.1.7 (#10945)",
  "c51f2eb8": "[Java][CI] fail fast, add path (#10570)",
  "10b310d3": "Optimize: entrySet is faster than keySet + get to prevent N lookups (#10496)",
  "510e64fa": "Fix minor typo in @cached_property docstring (#9886)",
  "d3b2089e": "[python-fastapi] Fixed integration tests (#9771)",
  "ef3186f4": "comment out python fastapi test due to failure in ci",
  "f3e3a724": "Fix `python-fastapi` free-form objects mapping and forward ref type hints (#9723)",
  "99994945": "Bump actions/cache from 2.1.5 to 2.1.6 (#9614)",
  "088bca15": "[python][fastapi] various minor improvements (#9672)",
  "93880a48": "python-fastapi improvements (#9649)",
  "ae0cce04": "add sponsor message to python fastapi (#9637)",
  "32a04506": "[ python-fastapi] minor improvements (#9622)",
  "0da40998": "New python-fastapi generator (#9611)",
  "b3816630": "Bump actions/cache from v2.1.4 to v2.1.5 (#9249)",
  "8e7440e2": "Update actions/cache requirement to v2.1.4 (#8780)",
  "0c5cec8f": "7141: filter out problem+json mime type from JSON mime types fast tra… (#7976)",
  "0b6d70d3": "add default cache (#8120)",
  "c08f1450": "Revert 'Do not use cached properties for additionalProperties (#7955)' (#7971)",
  "057647cf": "Do not use cached properties for additionalProperties (#7955)",
  "4f279398": "[core] Add model cache to speed up code generation (#7250)",
  "98c606c3": "Revert '[codegen][Python] Add model cache to speed up code generation (#7220)' (#7245)",
  "bee03685": "[codegen][Python] Add model cache to speed up code generation (#7220)",
  "6053f7b1": "add ~/.sbt to circleci cache (#7000)",
  "0707b4bb": "[Scala] setup Ivy cache directory (#6978)",
  "3d99c583": "make name cache configurabl (#5775)",
  "51cc7c2f": "[core] Sanitize/underscore/camelize cache expiry (#5484)",
  "dcc91442": "[codegen] Performance optimizations: use of cache for camel case and sanitized strings (#5152)",
  "45f26fe0": "[typescript-rxjs] performance improvements, bugfix for falsy parameters (#4250)",
  "aa4ead2a": "autoupdating generator script: userdef cache dir (#3631)",
  "3896821d": "[Slim] Add phplint cache to gitignore (#1686)",
  "a14e7570": "fix cache-expires-ineffassign (#466)",
  "806330ac": "Fix ivy2 cache directory in CI config file (#161)",
  "70b4b55f": "Fix performance linting problem with maps in java ApiClient template (#7685)",
  "bb919346": "cache elixir deps",
  "b5200ba1": "cache stack in shippable ci",
  "5c547d5f": "add jfastnacht to php tech comm",
  "247be2f1": "fix cache skip",
  "456b54b2": "fix cache skip",
  "0382f397": "disable cache",
  "a51dc80c": "Merge branch 'add_gradle_cache'",
  "e4528480": "add gradle cache",
  "9d64e792": "add ivy2 to cache sbt install",
  "8fb71b46": "cache module directory to improve CI performance (#5025)",
  "42a04916": "add https://www.fastly.com/",
  "60083abd": "disable appveyor cache",
  "8cd881f6": "disable appveyor cache (which seems broken) (#4260)",
  "0d987837": "Merge pull request #3377 from ButterflyNetwork/maven-cache",
  "ec65eb59": "some small optimizations",
  "fa7d3c9b": "[Objc] - Moved Logging to separate Logger file - Moved selectHeaderAccept and selectHeaderContentType to sanitizer - little optimizations",
  "341f8625": "change the order of the elif inside to_dict for better performance (dictionary/additionalProperties is less probable)",
  "50a35f6a": "Fixed client performance issue and also handling of auth token logic"
}, "opengrok": {
  "d93fdca": "use history cache dates in directory listing for regular files (#4275)",
  "ec531f9": "do not attempt to get history cache for directories",
  "6aeb8ed": "create history cache for file based repositories (#4283)",
  "23a8484": "remove locking when writing cache files",
  "55d7874": "convert File History cache serialization to Smile (#4268)",
  "56c2642": "handle cache directory failures (#4165)",
  "6055433": "add jackson-core for the missing com.fasterxml.jackson.core.exc.StreamWriteException",
  "738d15a": "extract revision from a cache file using parser",
  "33ff895": "try to avoid cache implementation specifics in tests",
  "c98fd4b": "hasHitory() should check history cache first",
  "e2f7528": "Annotation cache (#4059)",
  "c3b0c92": "make index database 'optimization' explicit operation (#3983)",
  "fadf908": "acquire the list of files during history cache generation",
  "d630fdc": "negative cache",
  "a964b78": "use history cache when getting latest revision",
  "f0d57a0": "FileHistoryCache#get() should not modify history cache (#3828)",
  "1a64b7d": "Annotate with history cache (#3757)",
  "b97330c": "add progress reporting for history cache creation/update",
  "b93c489": "name history cache related threads",
  "5a635a8": "add option to turn off per partes history cache",
  "a2f0979": "bump history cache chunk counts and make it tunable (#3647)",
  "8be7ffc": "strip the files (and tags) before creating the cache",
  "c62b3ec": "parallelize history cache creation for individual files",
  "865a992": "remove remnants of history cache for top level directory",
  "ec10766": "refactor cache creation to avoid instanceOf",
  "96bd042": "finish removal of per directory cache",
  "89625a2": "cleanup: refreshing latest version in the cache should not be necessary",
  "1791bb4": "proof of concept: split history cache generation into chunks",
  "17d9a0d": "report duration for file history cache updates",
  "5a7914e": "cache the tokens",
  "251197f": "enable Maven cache for Windows too",
  "d2f4358": "enable Maven cache",
  "7f6c5bb": "be content with just history cache directory in ensureHistoryCacheExists()",
  "5752d8b": "report duration for file history cache updates",
  "a687cd8": "cache the tokens",
  "9167dbc": "enable Maven cache for Windows too",
  "74a6b54": "enable Maven cache",
  "701fae2": "be content with just history cache directory in ensureHistoryCacheExists()",
  "c8f98ae": "Merge pull request #3112 from idodeclare/bugfix/slow_sol",
  "5cac8be": "Fix #1665 : searchable-option-list bulk operations are slow",
  "09dc233": "add API endpoint for deleting history cache fixes #2655",
  "8ea3083": "--noindex should suppress history cache generation",
  "9963eea": "Actually skip history cache creation when history is disabled for project",
  "878a432": "report a simple message when the historycache does not exist",
  "b3d4315": "Do not cache the front page and search results (#2433)",
  "47da214": "report statistics for index optimization",
  "e9382a8": "report counts of history cache files (#2103)",
  "b92758c": "Add indexParallel(), using Ctags object pool, for faster indexing",
  "2517239": "HTTP cache control (#1842)",
  "687126b": "Drop static writeXref()s; use existing thread-cached analyzers instead",
  "400829b": "cache history for top-level directory in repository fixes #1716",
  "d3dbeac": "remove historycache entries automatically (#1675)",
  "061639f": "Merge pull request #1237 from tulinkry/project-picker-performance",
  "b9fe3a5": "improving performance of project picker filter fixes #1227",
  "2fdda7f": "resolving class & class cache implementation",
  "e94351d": "ctags performance fix",
  "3b86bfe": "make sure history cache error is reported, fixes #926",
  "077b9e1": "rename the fetch-history-when-not-in-cache private variable to match the method name",
  "452965f": "change the tunable for fetching history when not found in file history cache fixes #917",
  "be30c38": "do not check ctags when clearing history cache",
  "b8f55cb": "create file which stores the latest cached revision also when renamed file handling is disabled fixes #818",
  "c7b4642": "implement tunable for suppressing history fetch other than from the cache fixes #446",
  "f9d25a8": "add zaphist sub-command to clear history cache for given repository fixes #758",
  "0846a92": "make file based history cache creation synchronous",
  "0fe47e2": "Log why cache creation is skipped when repository doesn't support history for directories",
  "0dc5b2d": "Allow the user to override the number of threads to use to generate history cache",
  "8464edb": "avoid unecessary I/O - cache contents of timestamp/{header,footer}_include until reconfiguration occures",
  "188a05e": "avoid unecessary I/O - cache contents of timestamp/{header,footer}_include until reconfiguration occures",
  "cabfe44": "Bug 13677 - xref cache is not updated if code changes in SRC_ROOT",
  "49c1125": "Added support for incremental history cache for GIt",
  "353b0c9": "commit the rest of the files (workspaces on nfs are not a good/fast idea)",
  "0e7291d": "Bug #16913: OpenGrok fails to use JDBC cache if -R option is specified",
  "9088add": "Bug #9407 - set limit for directory traversal during search for repositories small improvement to performance of some repositories where we stated for non existent files (dir/file/repofile)",
  "4996926": "small performance improvement for branched cvs repo history, make version parameter for css scripts static",
  "3898fc9": "Manually generate ID for AUTHORS table to work around performance problems with auto-generated identity columns.",
  "942c8db": "Bug #12081: History not returned for uncached repositories when using JDBCHistoryCache",
  "d5cd623": "Check if Derby-specific stored procedures exist before calling them. Makes the code more portable across different database backends. The calls are just optimizations, so it's fine to skip them if the procedures don't exist.",
  "f4216ce": "Show basic information about history cache in status.jsp.",
  "492909a": "add docs for Java DB as history cache backend usage",
  "7da4676": "readableLine junit test changed to have the &nbsp; and href (both for faster displaying the code, BUT bigger size on disk/download)",
  "a785154": "small usability and performance improvements for line # , fix compatibility for IE",
  "2e87d0d": "JDBCHistoryCache: Only perform optimization of the database once",
  "b80613c": "Warn if slow default implementation is used for incremental history update",
  "0e14cc6": "Use the number of cpu's apiary.apib build_spec.yaml CONTRIBUTING.md dev distribution docker Dockerfile LICENSE-adaic.org.txt LICENSE-eclipse.txt LICENSE-ecma.txt LICENSE-mandoc.txt LICENSE-ruby.txt LICENSE-scala.txt LICENSE.txt logging.properties mvnw mvnw.cmd NOTICE.txt opengrok-indexer opengrok-web plugins pom.xml README.md SECURITY.md sonar-project.properties suggester testdata tools 2 as the concurrency level for creating history cache",
  "3e93602": "Bug #3624: History cache should be stored in Java DB",
  "1dff42b": "Bug #3624: History cache should be stored in Java DB",
  "b831171": "Bug #3624: History cache should be stored in Java DB",
  "8501189": "Bug #3624: History cache should be stored in Java DB",
  "1303793": "Bug #3624: History cache should be stored in Java DB",
  "3847b80": "Bug #3624: History cache should be stored in Java DB",
  "4e4bc96": "Bug #3624: History cache should be stored in Java DB",
  "cbddbcd": "Bug #3624: History cache should be stored in Java DB",
  "652992b": "Bug #3624: History cache should be stored in Java DB",
  "567950d": "Bug #3624: History cache should be stored in Java DB",
  "c1dbb90": "Bug #3624: History cache should be stored in Java DB",
  "2607514": "Create history cache in parallell",
  "8ee9671": "Don't regenerate cache every time ensureHistoryCacheExists is called",
  "62281fb": "Bug #4154: History cache should be created automatically for new repositories",
  "abc72e2": "Make all repositories cacheable",
  "8e28c54": "Fix a few more PMD optimization warnings",
  "c6100b3": "Fix PMD optimization warnings",
  "2ef63dc": "Make PMD rulefile - remove controversial rules and add some optimization rules",
  "0fe3c35": "Store the history-cache to the correct file ;-)",
  "96a5e00": "Fix FindBugs performance warnings",
  "754c32d": "Store history cache and xref in compressed files",
  "665835e": "Fixed store(), by mapping source file name to cache file name for that file",
  "ce6cf2b": "Bug #779: Add option to disable index optimization upon indexing",
  "8f0af5a": "Do not create history-cache for directories",
  "ab5bd00": "Added -h <path> to genererate history cache for a single repository",
  "5035086": "Improve HistoryGuru external repo scan performance for Teamware workspaces Improve HistoryGuru external repo scan: play by the '-i ignore' rules Improve Indexing error messaging to be more precise about paths",
  "f75cb11": "Moved annotation and cache functionality from the HistoryParser to ExternalRepository",
  "64713fb": "Fixed generation of Mercurial cache, and minor code cleanup",
  "949694f": "Remove .hgcache from .hgignore since we use a common .ogcache directory now",
  "4870d0b": "Fixed NullPointerException when searching history in Swing GUI. Since the history cache uses RuntimeEnvironment, the GUI needs to set RuntimeEnvironment's data root and source root.",
  "568a448": "Moved .ogcache to the DATA_ROOT directory",
  "ebb9f73": "Refactored the HistoryReaders so that the history could be cached for other systems than Mercurial. Now, the results from all svn and hg history commands that take more than 300 ms are cached."
}, "openhab1-addons": {
  "4ae4da53": "[dynamodb] Performance optimizations (#5826)",
  "71167196": "[openenergymonitor] Added value cache to minimize item updates (#5560)",
  "03d36c2d": "[Swegonventilation] Added value cache to minimize item updates (#5561)",
  "817ca775": "[fritzboxtr064] Reset HTTP auth cache in case of connection errors (#5220)",
  "83bdf8cc": "[Plugwise] Fix exceptions at binding startup, improve device cache (#4842)",
  "df441b02": "Updated Tellstick performance Closes #4089 (#4090)",
  "ceade042": "Merge pull request #4088 from stephenliang/globalcache",
  "fa57489f": "Added configurable connection timeout for slower CCUs",
  "3077ae99": "Fix OneWireBinding: Remove item from cache after read errors",
  "edd96b06": "Change event handling to ThreadPool instead of simple Threads to improve performance.",
  "3780e18d": "Fixed cache validation bug",
  "5947535f": "New option for networkhealth binding: cachePeriod. The online state of all devices is cached for a certain period of time so that non-changing status updates are not sent every <refresh> seconds. If a device state changes, this changes is immediately sent to the event bus. Default is 0 (off), so that existing behavior is unchanged if this option is not set.",
  "27cf177f": "Fixes a thread leak in the polling delay code. Fixes a memory issues for long polling requests to a sitemap by enforcing a single sitemap based cache.",
  "863170e5": "Code style, optimizations",
  "df6e35b5": "Merge pull request #2126 from innoq/flag-to-disable-snippet-cache",
  "739104b2": "Split adding new nodes into separate thread as this can take a long time For large networks, or slow devices, this can take a long time which can cause timeouts when communicating with the stick.",
  "c5a18576": "Added the current minute to the cache string. This prevent ignoring of real updates.",
  "d29d1927": "There should be only one version of a sitemap in the Atmosphere cache for any give UUID. If more then one exists they are transfered to the client using chunked encoding which is wasteful and currently breaks the IOS client.",
  "2a7188bd": "remove cached messages",
  "e6a1d74e": "Clear cache of invalid uuids",
  "2cbf9bad": "changes to the alarmdecoder binding: - added feature: can now send commands to alarm panel with openhab configuration 'send_commands_and_compromise_security' - fixed bug with parsing keypad messages that contain comma in the message string - cache state to cut down on update messages going across the openhab bus",
  "2bb2c111": "Bugfix: config was not read properly (connector threads were created too early). Add config option that the cache is purged regularly (can be disabled).",
  "2c14346f": "Add option to disable cache.",
  "2783e206": "Move static node information into separate folder to improve performance",
  "5e782e00": "add optional headers functionality to http binding cache items in the main configuration file.",
  "a4df13a8": "add optional headers functionality to http binding cache items in the main configuration file.",
  "7a060f49": "Response to Time_info request is now a fast message.",
  "da3d57bf": "Force acks/nacks to be sent as fast as device will be waiting for them.",
  "e777af40": "Implement fast send",
  "2ba4e07d": "optimizations: - only one thread does all the polling - only one thread for all request queues features: - query devices if the modem link db is not sufficient to determine device",
  "93b0ac77": "#1241: Fixing performance issue in ItemRegistryImpl",
  "b691e37a": "- removed unneccessary PollingDelayFilter - improved implementation of the BroadcasterCache - Bugfix: during a reconnect, the Broadcaster is emtpy and no messages where broadcasted and therefore these messages could not be cached and were lost. Now all status updates are broadcasted. The Atmosphere framework decides wether the update is directly broadcasted (when there are clients available) or it is cached (when there are no clients available) or nothing happens (when the broadcaster got destroyed because it has been idle for at least 5 minutes)",
  "815c4d99": "Homematic: Refactored converter lookup. Removed dependency to ItemRegistry (is disallowed). Added item state cache into binding.",
  "b3c97d1f": "Issue 377: Improved performance of hue binding",
  "75649c29": "fix for #113 - newly created appender was never added to appender-cache before",
  "76f3b552": "added performance logger for PersistenceManager",
  "d7fb8fae": "added performance logging",
  "6b45e25d": "added performance log",
  "8c4a8b5a": "DatapointInitializer now retries reading from KNX bus up to a configured amount of retries. This is especially useful for slow and busy installations (e.g. KNX PowerNet)",
  "179e74e6": "stabillity and performance improved; only suspend requests with the X-Atmosphere-Transport header"
}, "OpenHub": {
  "e2b00e4": "set trending cache age to one day",
  "eecf00c": "modify retrofit cache",
  "62f2aa2": "modify retrofit cache",
  "c046a55": "add retrofit cache"
}, "openj9": {
  "826d49a3": "Merge pull request #17409 from babsingh/cache_039_fix",
  "8aa86769": "Merge pull request #17344 from fengxue-IS/cacheContinuation",
  "590e9b81": "Add new optimization catchBlockProfiler",
  "7873bf82": "Forces cache flush before walking Continuation list",
  "e1d83498": "AArch64: Enable arrayset optimizations",
  "9e9fe327": "Merge pull request #16888 from jasonkatonica/katonica/feature/cachegetalgorithms",
  "217bf790": "Disable CRC32C optimization when arraylets are enabled on Power",
  "3acf5e55": "Add documentation about EDO optimization mechanics",
  "8df01b5b": "Rename AOT cache thunk fields, add methods",
  "16d3598c": "Merge pull request #16644 from 0xdaryl/artifactcache",
  "3ef09391": "Disable JIT artifact cache for temporary J9VMThreads",
  "8f512b53": "Use getRecordName more in JITServer AOT cache",
  "0600a13c": "Add JITServer AOT cache thunk persistence",
  "21ef71a8": "Define JITServer AOT cache thunk types",
  "0e348cb7": "JITServer AOT cache testing The JITServer AOT cache is currently not covered by the tests. Additional tests are added in the JITServer test suite testJITServer.",
  "a8b217f2": "AArch64: Enable fast_jitCheckAssignable",
  "63fb8059": "AArch64: Enable fast_jitInstanceOf",
  "81a169a7": "Merge pull request #16442 from cjjdespres/aot-cache-exclusion",
  "9f7a862c": "Improve JITServer AOT cache error logging",
  "dcca03bd": "Merge pull request #16075 from mpirvu/AOTcachebackground",
  "be39468d": "Unify JITServer AOT cache read functions",
  "5837628d": "Add a JITServer AOT cache read context",
  "cabd3ec6": "Do not check for the existence of the AOT cache on critical path",
  "0b56e8f0": "Save the JITServer AOT cache to file periodically",
  "ec01a885": "Load JITServer AOT cache file in the background",
  "60d5c3bf": "Fix the CRC32 fast path for Java 11 which is broken due to changes to Java method",
  "9843f61f": "Merge pull request #16166 from cjjdespres/default-cache-name",
  "c79492aa": "Give a name to the default JITServer AOT cache",
  "0f79c747": "Revert 'Avoid to cache scavenger too early in StandardAccessBarrier'",
  "43604b44": "Add full JITServer AOT cache file reading",
  "ab3b954c": "Avoid to cache scavenger too early in StandardAccessBarrier",
  "d58264e2": "Add full JITServer AOT cache file writing",
  "9c998acf": "Keep the JITServer AOT cache traversals updated",
  "2965a737": "Define JITServer AOT cache file header structure",
  "0e895d0d": "Define JITServer AOT cache serialization interface",
  "2b8eca66": "Merge pull request #16042 from JasonFengJ9/fastnotifydelayV2",
  "e7454ede": "CRIU delayedLockingOperation for fast JNI notify/notifyAll",
  "fc6e50ed": "Limit JITServer AOT cache memory usage",
  "30984d79": "Allow for incompatible caches in JVMTI shared cache management test",
  "84b4bc5a": "Apply performance and functional fixes to VectorAPIExpansion",
  "2d9318c1": "Merge pull request #15428 from JasonFengJ9/loomfastjni",
  "87a4219d": "Add j.l.Thread.setCurrentThread() inline & fast jni natives",
  "6cc63c8e": "Merge pull request #14614 from 0xdaryl/nocheckcastcache",
  "8f29ee4d": "Ensure calls to feGetEnv are cached",
  "701c865d": "Improve checkcast/instanceof performance for interfaces on x86/x64",
  "62a2ce6e": "Add optimization summary documents",
  "13d99bd0": "Merge pull request #14815 from a7ehuo/pr-vp-fast-acmp",
  "10bf2cde": "Merge pull request #14384 from AlexeyKhrabrov/jitserver_aotcache_vlog",
  "6aa7d134": "Record AOT cache hits as 'compilation end' in JITServer vlog",
  "c5889b1b": "Trace AOT cache method [de]serialization in vlog in debug mode",
  "02f383b4": "Merge pull request #14795 from IBMJimmyk/fastpathPutChar",
  "504e44fd": "Add z/OS dispatch for fast_jitInstanceOf",
  "fcaaa20a": "Add tracepoints to the shared cache impl, and tweak CacheFullTests",
  "098ee7b1": "CMake: Add riscv cache files",
  "d201a88e": "Enable inlineEncodeASCII optimization for Java 17",
  "49c68d7f": "Merge pull request #14510 from cjjdespres/cache-is-string",
  "a2cf35f4": "Fix AArch64 cache line size in ContendedFieldsTests",
  "05376fb3": "Print time spent in compilation queue in JIT performance vlogs",
  "969ac26a": "Change GCRQueuedThresholdForCounting value for JITServer AOT cache",
  "2a80e4c1": "Merge pull request #14325 from cjjdespres/element-size-cache",
  "f77aa0b4": "Merge pull request #14110 from singh264/cache_the_result_of_objectAlignmentInBytes",
  "baf669d3": "Merge pull request #14207 from mpirvu/tuneaotcache",
  "cd9d86d3": "Disable delayRelocationsForAOTCompilations when JITServer AOT cache is used",
  "9032e628": "Switch to AOT compilations to take advantage of JITServer AOT cache",
  "225a8b6b": "Shared cache - fix comparison > 0 after nattach declaration change",
  "3bcbbb13": "Implement SharedClassStatistics.numberAttached(), cachePath(), etc.",
  "ea06f747": "Merge pull request #14017 from AlexeyKhrabrov/jitserver_aotcache_load",
  "9bf465f8": "Revert 'Revert 'Disable stackMap cache during ASGCT''",
  "003497a4": "Account for AOT cache hits in JITServer message statistics",
  "6f832481": "Print AOT cache statistics at JIT dump and shutdown at server and client",
  "9f072ace": "Collect AOT cache statistics at the JIT client",
  "bc1ae54d": "Collect AOT cache statistics at the JITServer",
  "7aea4019": "JITServer AOT cache load implementation",
  "64d5a232": "Revert 'Disable stackMap cache during ASGCT'",
  "4b8f2690": "Enable JITServer ROMClass sharing by default if using AOT cache",
  "c3f3f1e9": "Disable JITServer AOT cache at the client if not using AOT compilation",
  "9739e8a9": "Disable stackMap cache during ASGCT",
  "ee09711b": "Fix vlog messages about AOT cache instances used by clients",
  "6f887804": "Store serialized AOT methods in JITServer AOT cache after compilation",
  "be52f90a": "Create defining class chain record for JITServer AOT cache stores",
  "44e9072e": "Add compilation queue entry flag to distinguish JITServer AOT cache stores",
  "27d659f7": "Remember JITServer AOT cache records when writing AOT relocation data",
  "27f063e3": "Disable JIT cache earlier in ASGCT",
  "c4da8708": "Merge pull request #13923 from r30shah/cacheClassPackageName",
  "efb76185": "Merge pull request #13956 from AlexeyKhrabrov/jitserver_aotcache_records_fix",
  "c9a9b431": "Revert 'Revert 'Infrastructure for creating JITServer AOT cache records during compilation''",
  "1fff3ede": "Merge pull request #13953 from eclipse-openj9/revert-13907-jitserver_aotcache_records",
  "f752f698": "Revert 'Infrastructure for creating JITServer AOT cache records during compilation'",
  "9a781438": "Merge pull request #13907 from AlexeyKhrabrov/jitserver_aotcache_records",
  "c0f32f2d": "Store pointer to AOT cache well-known classes record in client session",
  "d1deb945": "Store pointers to AOT cache class chain records in client session",
  "26549cdb": "Store pointers to AOT cache method records in client session",
  "a1d3d556": "Store pointers to AOT cache class records in client session",
  "5afd2f24": "Request and cache info needed for AOT cache class loader records",
  "c8f8d1cc": "Add compilation object flag to distinguish JITServer AOT cache stores",
  "09b38ce1": "Push/pop the array object into/from special frame in slow path.",
  "21063989": "Store pointer to JITServer AOT cache in client session data",
  "239de6af": "Merge pull request #13899 from JasonFengJ9/reflectcache",
  "edcbf3cf": "AArch64: Implement the inline monitor cache",
  "7e302156": "Merge pull request #13416 from a7ehuo/doc-different-inline-fast-path",
  "92b034f8": "Do not store generated LambdaForm classes to the shared cache.",
  "04f1a7d6": "Add fast JNI implementation for java.lang.ref.Reference.refersTo()",
  "3e5c27d3": "Add UTF to String cache for reflection calls",
  "5c7606f5": "Revert 'Add UTF to String cache for reflection calls '",
  "9335ec8c": "Add UTF to String cache for reflection calls",
  "190c7361": "Add document on various locations on inline fast path",
  "97a99634": "Add VectorAPIExpansion to optimization strategies",
  "67a86a46": "Enable getCallerClass optimization for JITServer",
  "e6fd7805": "Disable getCallerClass optimization for JITServer",
  "72274b7c": "Refactor large code cache configuration in preProcessCodeCache",
  "0dee6a47": "Refactor print code cache configuration in preProcessCodeCache",
  "fc12cb98": "Refactor code cache size increase logic in preProcessCodeCache",
  "194b36a4": "Refactor code cache configuration in fePreProcess",
  "16facadf": "Docker: add jdk17 to git repository cache",
  "ed48b5e0": "Fix memory leaks when using fast client session destruction",
  "b3c8621d": "Invalidate unloaded classes and class loaders in AOT deserializer cache",
  "cd914ecc": "Create AOT deserializer at JIT client if AOT cache is enabled",
  "0b35cea4": "JITServer AOT cache deserializer implementation",
  "97d43834": "Merge pull request #12743 from dmitry-ten/cache-double-init",
  "557716c4": "Add timestamps, queue size and cleared caches information in diagnostic thread",
  "8bcd558f": "Fix race condition in JITServer cache initialization",
  "601ffec8": "Add isNonNull check on the fast acmp path in tree lowering",
  "ac47413d": "Merge pull request #11994 from dnakamura/zos_cache",
  "b65d789d": "CMake: Add initial zos caches",
  "fa11c1d0": "Merge pull request #12489 from a7ehuo/fix-getExit-fastpathAcmpHelper",
  "cebe02b1": "Fix getEntry in fastpathAcmpHelper",
  "071e8d18": "Merge pull request #12462 from AlexeyKhrabrov/client_session_clear_caches_fix",
  "78304876": "Optimize JITServer client session destruction when using AOT cache",
  "673d5189": "Merge pull request #12327 from Leonardo2718/acmp-fastpath",
  "4ee13d0d": "Merge pull request #12320 from AlexeyKhrabrov/jitserver_aotcache_storage",
  "28546677": "Add acmp fastpaths for either operand being a VT",
  "85061126": "Add acmp fastpaths for either operand being NULL",
  "68c23fab": "Fix AOT header hash function in JITServer AOT cache",
  "d6eb5130": "More flexible way to allocate JITServer AOT cache record IDs",
  "e072aef6": "Refactor allocation functions for JITServer AOT cache records",
  "3130575e": "Remove ResolvedMethod_fieldOrStaticName message and associated cache",
  "9046603e": "Create AOT cache map at JITServer if AOT cache is enabled",
  "b466454a": "Load SSL library at JITServer and client if AOT cache is enabled",
  "18938307": "JITServer AOT cache storage infrastructure",
  "570bdea2": "Do not use JIT metadata cache in AsyncGetCallTrace",
  "f2c34396": "Eliminate obsolete String optimizations",
  "15bf93a6": "Merge pull request #12154 from AlexeyKhrabrov/jitserver_aotcache_class_loader_table",
  "02a51bf0": "Add runtime option to enable JITServer AOT cache",
  "139b656d": "Align Allocated Codecache by 64-Bytes on Power",
  "888fadef": "Keep track of the maximum number of entries in shared ROMClass cache",
  "5884e31c": "Use separate persistent allocator in JITServer shared ROMClass cache",
  "160d5c1b": "Partition JITServer shared ROMClass cache to reduce lock contention",
  "98b693e6": "Create and use JITServer ROMClass cache if sharing is enabled",
  "525a5fc0": "JITServer shared ROMClass cache implementation",
  "7134b357": "Merge pull request #12104 from AlexeyKhrabrov/classes_cached_at_server",
  "b6d4de6f": "Optimize updating set of classes cached at JITServer",
  "4556524d": "Update set of classes cached at JITServer",
  "793bb9dd": "Do not protect the last metadata page if the cache is locked",
  "7bade30b": "Deprecate PrefetchInsertion optimization",
  "7085bbb4": "Move VT lowering code to new TreeLowering optimization",
  "77de1276": "Fix StringPeephole optimization class redefinition check",
  "50e78611": "Add optimization to ClassIteratorClassSlots",
  "e688d1bb": "Merge pull request #11865 from dmitry-ten/code-cache-small",
  "02912dbe": "Create smaller code and data caches on JITServer",
  "828c277a": "Disable VAR_HANDLE_GUARDS optimization in OpenJ9",
  "e7df15a0": "Returning cached default value instead of Allocation",
  "b1d73cc1": "Merge pull request #11460 from pshipton/excodecache",
  "ee73696b": "Merge pull request #11254 from hzongaro/fastpath-acmp-temporaries",
  "6982c38e": "Fix testSCCacheManagement failure on ibm 11 zos - fix cache location change because ibm 11+ use -DOPENJ9_BUILD setting",
  "ed836232": "Keep splitPostGRA stores in right block for acmp fast path",
  "280eaae3": "Merge pull request #11189 from EmanElsaban/purgejitservercache",
  "390f3440": "WIP: Added OLD_AGE_UNDER_LOW_MEMORY to purge caches sooner",
  "43260aca": "Add a call to j9cpu_flush_icache() in j9vmemTest.c",
  "669dba49": "Reduce the optimization level of bcverify.c in compilation",
  "61c1f499": "Define placeholder HandleRecompilationOps optimization",
  "183148a5": "Merge pull request #10930 from alexey-anufriev/cache-class-simple-and-canonical-names",
  "92609a3c": "Merge pull request #10996 from gacholio/nocache",
  "ca1d04e9": "Restore previous optimization in existing LTS streams",
  "0d3d1c3e": "Compile twice for DDR on z/OS so optimization is not hindered",
  "3caadd43": "Merge pull request #10866 from alexey-anufriev/remove-j9shr_cachelet_support",
  "e9dbcb02": "Improve performance of persistent memory allocator",
  "07bb9ea3": "Add hidden classes to shared classes cache.",
  "3420523d": "Merge pull request #10756 from dnakamura/fastcall",
  "4d4ebd8d": "Port cmdLineTester_fastClassHashTable into openj9",
  "4eb2fbd1": "Fix class unloading processing in classBySignature cache",
  "c016c825": "Remove jdk14 remote from git repository cache",
  "74c47d3a": "Fix incorrect signature in _classByNameMap cache",
  "756b5d2d": "Move CPU detection before code cache initialization",
  "ad1604a7": "Duplicate PassThrough nodes when creating acmp fastpaths",
  "18f5bbd7": "Reset cached CCV Result on class redefinition",
  "7bc50dda": "Merge pull request #10093 from dnakamura/aarch_cache",
  "c04c2e9a": "CMake: add cache files for aarch64",
  "9c474c3e": "Group cache field and static info in JITServer",
  "bf34676e": "Update mkdocker.sh: include jdk15 in git cache",
  "dd683f6c": "Merge pull request #9845 from keithc-ca/oscache",
  "773f6c86": "Don't compute the cache unique id for the top layer",
  "fabc8125": "Add fastpath around jitAcmpHelper call",
  "2ee9709e": "CMake: cleanup cache files",
  "18583121": "Merge pull request #9775 from ChengJin01/enable_L1_data_cache_riscv_hardware",
  "24242e7b": "Enable using L1 data cache on RISC-V specific hardware",
  "d2dd5591": "Sampling allocation bytes precisely without compromising the performance",
  "c12b0e9e": "Reduce the scratch segment cache in JITClient from 16MB to 2MB",
  "284a67dc": "Merge pull request #8615 from fjeremic/cache-iteratestacktrace-peek-ramclass",
  "09216059": "Iterate over J9Method* rather than J9ROMMethod* for performance",
  "1f7c7297": "Merge pull request #9332 from amicic/flush_cache_no_vmaccess",
  "27e5cb8d": "Flush caches for threads without VM access only",
  "739c0b55": "Use a different cacheDir for the nameOption test",
  "a286546d": "Merge pull request #9155 from knn-k/aarch64cacheline2",
  "da9324c7": "AArch64: Return 64 as L1 data cache line size when info unavailable",
  "8a875e02": "Merge pull request #9142 from dnakamura/aix_cache",
  "beda9dd4": "CMake: Add missing config optiopns to aix cache",
  "b3b35b8a": "Fix VT jitnewValue slow path",
  "3ffd13b0": "CMake: Fix typo in windows cache",
  "09d462e0": "Properly return slowpath addr in jitnewvalue helpers",
  "0942b265": "Merge pull request #8617 from knn-k/linux_cache_line_size",
  "a637d467": "CPU cache line size for Linux AArch64",
  "5a1d8a11": "Expand Codecache testing",
  "543beb68": "Merge pull request #8649 from mpirvu/cacheDefiningClass",
  "5b4d136b": "Resolve the race condition setting/reading _theca->cacheFullFlags",
  "4c14e141": "Improve performance on a full shared cache.",
  "128047c5": "Support abstract method accessModeTypeUncached in OpenJ9's VarHandle",
  "401eaa3d": "Merge pull request #7267 from dnakamura/zlinux_cache",
  "868d2f54": "CMake: Add cache file for zlinux",
  "6b1f6d9b": "Disabled VSTRS optimizations for `inlineVectorizedStringIndexOf` (#8226)",
  "22a98eff": "Disabled VSTRS optimizations for `inlineVectorizedStringIndexOf`",
  "4e465a01": "Merge pull request #8207 from andrewcraik/fastJNIUnsafe",
  "e3c4fc6f": "Add fast JNI support for JDK9 Unsafe",
  "1814eaeb": "Add Linux ARM spec to DDR supersets cache file",
  "e010b637": "Added the tests for the Multi-layer caches sub-options",
  "878f0fb8": "Populate cache corruption information for non-zero layer cache",
  "d0f4d636": "Merge pull request #8013 from sophia-guo/cacheOpenj92",
  "b599cde7": "Update cacheManagement project default task as build",
  "d33f68a3": "Add AdoptOpenJDK/openjdk-tests repository to git repository cache",
  "4c1c3f52": "Fix cacheName calculation in SH_OSCache::commonStartup()",
  "c04ed150": "Merge pull request #7769 from AlenBadel/codecacheindex",
  "37a89175": "Merge pull request #7743 from XxAdi101xX/adding-fast-substitutability-test-flag",
  "58c4bbbb": "Use a cache name for NewROMCreationAfterModifyingExistingClassTest",
  "17a5664e": "Merge pull request #7886 from sophia-guo/cacheOpenj9",
  "d648a8db": "Merge pull request #7614 from XxAdi101xX/ddr-flattened-class-cache-entry-bugfix",
  "95c98df5": "Merge pull request #7672 from sophia-guo/cacheManagementoldLinux",
  "00bdb12f": "Stop cache nestMembers[] on j.l.Class",
  "7e97c861": "Fix codecache Xlp parsing to use right-most option",
  "74ada595": "Fix JNI performance regression",
  "ef79756c": "Disable TestPersistentCacheMoving01 with OpenJ9 if cachedir is null",
  "498db552": "Add Linux PPC LE specs to DDR supersets cache file",
  "62db6ed5": "Fix findROMClassFromPC() when romClass is in the shared cache.",
  "55e7efca": "Merge pull request #7460 from eclipse/revert-7438-port_shared_cache",
  "0739a278": "Merge pull request #7414 from XxAdi101xX/ddr-flattened-class-cache-entry-bugfix",
  "9ebf654f": "Rename badly named util/filecache constants",
  "33570f49": "Always print out the layer number in the cache statistics.",
  "0a5cb1d4": "Change printStats on Multi-layer caches.",
  "b0908ef5": "Fix handleStartupError() to return the result of deleting the cache.",
  "b86d21ba": "Change printStats on Multi-layer caches.",
  "fe2ef947": "Guard code cache size adjustments by supportsJitMethodEntryAlignment",
  "b7e9d108": "Fix APIs that overwrite data in the shared cache.",
  "5368d48c": "New option to store unsafe classes on shared cache",
  "1f103aa9": "Add JCL support for multi-layer shared cache.",
  "94b84b4b": "Teach TR_J9SharedCache about multiple caches",
  "3b9adbd7": "Lock the cache inside markItemStaleCheckMutex().",
  "0c7eee46": "Use reflection to get cache layer from J9shrOffset",
  "d2e32374": "Add DDR support for multi-layer shared cache",
  "8350cb6d": "Add FE query for contiguous code & data cache allocs",
  "031af05c": "Add VM support for multi-layer shared class cache.",
  "c4080b02": "Handle multi-threaded metadata cache access",
  "de5a502b": "Change the format of shared cache file to include layer number.",
  "f908ca95": "Fix for GCC 8+ compiler optimization busy hang problem",
  "6cc2281d": "Merge pull request #6527 from vsebe/jenkins.git.cache",
  "cf512739": "Change how gcc-7 is accessed in centos6 x86 Dockerfile Removed symlinks to gcc-7 binaries and enable devtoolset-7 so gcc-7 should be sourced automatically. Dockerfile will source gcc-7 and copy environment variables in to /etc/environment so it will be automatically sourced when container is ssh'd into, including when a Jenkins job is run on the contiainer. Added a line to /etc/profile.d/gcc-7.sh that will source gcc-7 automatically when running a container manually with bash. Added a SHELL command to the Dockerfile that runs following commands through a login shell instead of the default shell, this causes each RUN command to source the bashrc which sources /etc/profile.d/gcc-7.sh, allowing the RUN commands to have access to gcc-7. This is required as some commands need to compile code, but the SHELL command is set back to its default before the end of the file because the remaining RUN commands don't require gcc-7. Similar changes were made for openssl-1.1.1b regarding automatic sourcing when run through ssh, or manually with bash. Additionally moved jdk13 remote to be the first remote fetched in each build capable docker file, as it is faster. [skip ci]",
  "11365711": "Add OpenJ9 repository to git cache",
  "315ed967": "Improve performance of final field writes",
  "3f6f1d7d": "Add cmake cache for aix_64",
  "15fa8d34": "Disable arrayset optimizations on AArch64",
  "ae9c133e": "Disable Quad optimization for AArch64",
  "6887baea": "Merge pull request #5253 from amicic/RB_monitor_cachelookup",
  "3ff2a65e": "Add JDK13 ref repo to slave repo caches",
  "e6fa2640": "Invoke Read Barrier during monitor cache lookup check",
  "dc8a82f1": "fix JMX report issue for JIT Code cache",
  "4b35f892": "Merge pull request #6016 from AdamBrousseau/gc_repo_cache",
  "e92fdc6b": "Git GC repo cache on slaves",
  "61a8b198": "Merge pull request #5970 from AdamBrousseau/gc_repo_cache_docker",
  "0e34adba": "Enable IProfiler during startup if only bootstrap classes are cached",
  "663a28ad": "Git gc openjdk repo cache in dockerfiles",
  "221391a2": "Switch JCL field ID cache setting order and issueWriteBarrier",
  "bf1ab699": "Merge pull request #5778 from JasonFengJ9/classcache",
  "5bfac113": "Fix low performance of resolving ip address when ipv6 is inactive.",
  "10e0b565": "CMake add cache file for Windows",
  "4d5505c1": "Add watched fields performance work to release",
  "2aa9280f": "Merge pull request #4754 from rwy0717/cache-scavenger-delegate",
  "9da13cbf": "Merge pull request #5422 from DanHeidinga/djh/cachegen",
  "f1064d77": "Keep iTable indices stable in fast HCR",
  "45246dd2": "Increment the SharedClasses cache generation number",
  "65ba4165": "Merge pull request #5097 from DanHeidinga/djh/cacheformat",
  "3c64011d": "Convert RuntimeAssumption to a mark with lazy sweep model for performance",
  "a703fe05": "Merge pull request #4835 from a7ehuo/aot-sharedcache",
  "9a88f0a6": "Fix fast ArrayStoreCHK test on Power under AOT",
  "5bb38eb8": "Merge pull request #4801 from dmitry-ten/sharedcache-query",
  "f9d53e38": "Use port_file_get_unicode_path() to covert cache file path to Unicode.",
  "001ad85b": "Disable callerClassLoader optimization under AOT",
  "71bed502": "Allow redefinition of Object in fast HCR",
  "c18b0ddf": "Revert 'Make sure the cache file path is shorter than the OS limit'",
  "38b04a06": "Make sure the cache file path is shorter than the OS limit",
  "6ed4ca97": "Revert 'Revert 'Expanded checks for Integer cache to include other types''",
  "785c1896": "Add Jenkins file to cache repositories",
  "83975662": "Update get source step in Jenkins build to work with reference cache",
  "4526122e": "Update testSCCMLTests6 to check for cache full message.",
  "e2478b44": "Disable DAA optimization in AOT mode",
  "6be806b2": "Add Class enumVars and cachedEnumConstants as recognized known object field",
  "f8222dfb": "Remove unnecessary gcc-specific optimization flags",
  "8c6ab35a": "Change cache directory default permission on OpenJ9",
  "303e9ecf": "Revert 'Expanded checks for Integer cache to include other types'",
  "21fa283c": "Reorder interpreter jump targets for performance",
  "31db158d": "VM change: Store GC hints into the shared cache",
  "be9d1a23": "Remove unused RedundantBCDSignElimination optimization",
  "ccd6c485": "Expanded checks for Integer cache to include other types",
  "85dd3ea1": "WIP add MacOS j9sysinfo cache line size function",
  "bda910f3": "Merge pull request #3972 from dnakamura/ccache_size",
  "ef03e969": "Travis: Increase ccache size to 1 GB",
  "7a8a3391": "Change the Java 8 default cache directory to user's home",
  "ab031e83": "Merge pull request #3838 from dnakamura/new_ccache",
  "8afc2fab": "CMake: allow use of ccache",
  "1aa852e8": "Merge pull request #3734 from dnakamura/cmake_osx_cache",
  "5868e390": "CMake: Add cache file for osx builds",
  "0ce91494": "Improve performance of ClassSummaryHelper",
  "5dacf645": "Improve String split performance for single escaped char",
  "c4ef3893": "Disclaim the stored meta data in the shared cache",
  "82e36284": "Allow Xcodecachetotal to decrease default total code cache size",
  "7a624784": "Removed ccache from Dockerfile",
  "7a31fd94": "Disable fastStringIndexOf feature",
  "1512adee": "Improve String.indexOf performance for first character matches",
  "2c2971a2": "Enable class lookahead optimization under AOT",
  "411f19e9": "Set cache dir to user's home directory",
  "65447934": "PPC ABI updates and optimizations",
  "4c1367b1": "Delete unused cache of CodeCacheManager from PersistentInfo",
  "4e4ac308": "Deprecate longRegAllocation optimization",
  "6441712d": "Merge pull request #2784 from hangshao0/cacheSize",
  "c64dd6ed": "Change default shared cache size to 300MB on OpenJ9 Java 8",
  "9e77e335": "Add softmx bytes to cache statistics in Javacore file",
  "b48b76f9": "Fix X86 32-bit opcode bug in wrtbar optimization",
  "bf43e051": "Gencon fixed heap wrtbar range check optimization for X86",
  "33c03a5e": "String startsWith fast path for single char comparison",
  "d6b7b853": "Accelerate java/lang/StringUTF16.toBytes for performance",
  "3181477e": "Remove booleans disabling max/min optimization on ARM",
  "d65a2069": "Support for resetting code cache allocation pointers",
  "0ebe76fa": "Use cache name for HelperCompatabilityTests and URLHelperTests",
  "8d6c7d90": "Check the free disk space size when setting default cache size.",
  "459aae77": "VarHandle performance",
  "62ced90d": "Travis: Cache the ccache directory.",
  "75f75d71": "Implement and enable fast JNI VM access enter and exit",
  "5a4fed76": "Merge pull request #1540 from cathyzhyi/cacheclass",
  "0d97342b": "Merge pull request #2003 from LinHu2016/slowExclusiveVMAccess",
  "71cf9b00": "Add warning message for slow exclusive vm request in verbose gc",
  "fee1ca42": "Enable ccache on travis builds",
  "f31976fb": "Increase default shared cache size.",
  "4e7280b7": "isCacheFileName() should be able to recognize old cache name. (#1719)",
  "139b0571": "Fix shared cache modlevel for Java 10 and 11.",
  "25ba3f56": "Improve startup performance related to J9_STR_XLAT",
  "677bf1a1": "Improve performance of -Xcheck:memory tests",
  "53e7725d": "Fix code cache allocation issues with hugePages",
  "1478f280": "Merge pull request #1258 from DanHeidinga/djh/fastIdentityHashcode",
  "96e34a39": "Change fastIdentityHashCode() to use unsigned int to long conversion",
  "807a5c93": "String.regionMatches optimizations",
  "5d503365": "Cache actual size of non-persistent shared cache to a local variable",
  "286b599a": "Add permission checking to shared cache utilities",
  "46c6aa7a": "Improve the code cache allocation process on Linux",
  "25ae1d09": "Enable optimizations with JProfiling",
  "3638a278": "Changes in MethodHandle for VarHandle performance",
  "a7ae9093": "Fix interpreter performance regression in char[]-to-char[] decompressed array copy",
  "738a4f63": "Use hanoi.jar for test 42 to store LVT into the cache.",
  "e858983e": "Inliner changes for VarHandle performance",
  "0151caa7": "Re-enable StringCoding optimization",
  "7b9146c6": "Perform optimization only if method may have monitors",
  "f0d6165d": "Prevent optimization under concurrent scavenge",
  "79340873": "Rename _defaultSegmentSize to _cachedSegmentSize",
  "08d98b70": "Enable onsite cache for instanceOf on IBM Z",
  "98f80170": "Permit optimization under concurrent scavenge of integral field loads",
  "7fd6ded2": "Improve performance of calls to StringCoding",
  "f17b8f18": "Optimize fastIdentityHashCode by improving locality",
  "9d92728d": "Merge pull request #15 from lmaisons/code_cache_manager",
  "b1d4b379": "Use optimization options for OSR modes"
}, "open-location-code": {
  "2da422d": "Bazel 0.24.1 and cache closure builds in travis.yml"
}, "OpenRefine": {
  "83f0407": "Flush precompute cache on revert of RowRemovalOperation (#5804)",
  "3df4734": "Fixes #5569 Use 'cache' feature in setup-java step. (#5570)",
  "dc01d58": "Migrate to temurin and use cache with java-setup (#5571)",
  "ec742b3": "Changed keystrokeDelay to 0ms to make Cypress tests with cy.type run faster (#5407)",
  "0d92f1d": "build(deps): bump actions/cache from 2.1.7 to 3 (#4626)",
  "383962b": "build(deps): bump actions/cache from 2.1.6 to 2.1.7 (#4319)",
  "969c41e": "build(deps): bump actions/cache from 2.1.5 to 2.1.6 (#3947)",
  "4a4dbc3": "build(deps): bump actions/cache from v2.1.4 to v2.1.5 (#3811)",
  "193d3c8": "build(deps): bump actions/cache from v2.1.3 to v2.1.4 (#3582)",
  "49e287b": "ci: restore cache for snapshot release workflow (#3472)",
  "827525c": "ci: clear cache in snapshot_release workflow (#3470)",
  "5fd0272": "fix: cache all UI paths for cypress (#3454)",
  "aca4879": "Bump actions/cache from v2.1.2 to v2.1.3 (#3324)",
  "fd5cc30": "Bump actions/cache from v1 to v2.1.2 (#3296)",
  "0ebd89c": "Clustering dialog choices limit & performance improvements - fixes #695 (#2996)",
  "df8d092": "Micro benchmark harness & ToNumber optimizations (#2859)",
  "c062641": "Merge pull request #2062 from OpenRefine/issue-2046-entity-cache",
  "09c89ef": "Fix datavalue rendering cache. Closes #2046.",
  "acea8e5": "Update cache test to ensure correct facet created",
  "d4cb64c": "Fix EntityCache so that it actually caches stuff",
  "d347e50": "Add cached constraint fetcher and tests",
  "66eac0f": "Ensure null values are not cached in URL fetching operation. Closes #1219.",
  "32c232c": "Move to Guava's cache for ColumnAdditionByFetchingURLsOperation",
  "c961bb6": "Flush all column caches on row removals/changes. Fixes issue 567.",
  "83dce30": "FIXED - task 432: cross() failing - flush join cache table when column changes http://code.google.com/p/google-refine/issues/detail?id=432",
  "53442c5": "Handle the case where an excel cell has a formula but the cached result of that formula is an error.",
  "476c84f": "Ignore jython cachedir.",
  "f069780": "Added support for bundling .js files to shave off some loading time. For GetRowsCommand, tried to use jsonp but that didn't seem to improve performance much. Gzip http responses of various text-based mime types.",
  "c041a19": "Changed tabs to spaces. Create luceneIndex directory in workspace's cache dir.",
  "513283d": "Support creation of cache directories, so the rdf importer can store its lucene indexes.",
  "8a87dda": "Ignored jython cachedir.",
  "f9a8297": "Pool recons and recon candidates. This yields smaller project files, change files, and AJAX responses for get-rows. It should make re-loading existing projects faster.",
  "20a4264": "An attempt at optimizing list facet rendering. It seems slightly faster.",
  "4a06c49": "Added streaming json parser for faster re-loading of existing projects.",
  "e154a7e": "increase the thread count... it seems high but I think browsers heavily cache HTTP connections and using multiple browsers can actually starve us",
  "8950e87": "When re-loading existing projects from disk, cache recon objects by their IDs to lower memory consumption.",
  "2efbf00": "- removed the 'thirdparty' directory (now the 'gridworks' script will download and install needed tools if they are not present in the system already) - added 'findbugs' command that uses the findbugs static analyzer to look for problems in the code - fixed a bunch of issues that findbugs found (a few methods would go a little faster, and a few NPE will be avoided... nothing major but good to have)",
  "521acda": "- pass the svn revision as format version (for more detailed verification) - add an 'autoreload' setting that makes Gridworks autoreload its self if a class gets changed (this is useful to make development cycles faster when working on the java code with autocompiling IDE like Eclipse or IDEA)",
  "5884d25": "default to 'relevance' instead of recon (which is faster). Change to recon if the user suggests schema hooks.",
  "7137b4b": "make use of multiple cores when doing clustering (has a consistent performance speedup for 5000 rows or more so I enable it by default)",
  "227b30c": "more optimizations for clustering",
  "d72c07b": "latest clustering fixes (the vptree is still too slow though, I'll probably abandon that approach for now)",
  "a7d4951": "several improvements for clustering - added a unicode ASCII-fiying addition to the fingerprinting functions - removed all distance functions for kNN that didn't seem to do anything useful - added the ability to indicate what value to use as cluster centroid by simply clicking on it (this is useful for those names that have non-ASCII chars that might not even be on your keyboard.. and cut/paste is error prone/cumbersome) - added a 10x multiplier to the PPM compression distance which makes it more aligned with the levenshtein ones - made sure that we construct a phonetic fingerprint for the whole string and not just the beginning subset (performance is still not ideal but it's now reasonable)",
  "8ce2146": "getting closer to the desired functionality... still way too slow though",
  "50e58fb": "ngram-blocking gives more expected results... but slow as hell, maybe bug in the vptree code?",
  "4d89327": "Fixed minor bug in cell UI that prevented single recon judgment operation from updating the UI. Minor optimization: inject main table into the DOM only after it's completely built.",
  "6d4425c": "- finally java6 has support for wildcards... seriously, how fricking long did it take for this to happen?! - so require java6 since it's also a lot faster and a lot more reliable for us for profiling"
}, "OpenSearch": {
  "c659d0495": "search_after query optimization with shard/segment level short cutting (#7453)",
  "3d864187e": "Update compatibility version for file cache API (#7596)",
  "a1e42b113": "Add filecache support in clear indices cache API (#7498)",
  "58edd186a": "Change block check type for index clear cache APIs (#7538)",
  "4c98b3d38": "Time series based workload desc order optimization through reverse segment read (#7244)",
  "621b27f93": "Make file cache stats consistent with other APIs (#7169)",
  "a9b4c4502": "Download block after adding cache entry (#7129)",
  "4991a0af9": "Fix file cache active usage on restore (#7102)",
  "ed6141fa2": "Removed duplicated 'nodeId' in cache path #7059 (#7065)",
  "e3339e8de": "Do not delete entire index cache on shard removal (#7072)",
  "06128a904": "Add circuit breaker support for file cache (#6591)",
  "f2662040b": "Include all file cache access in privileged section (#6920)",
  "a83ee9623": "Add privileged section to remote fetch/file cache write (#6914)",
  "bd9b00d48": "[Searchable Snapshot] Deleted the cache path on index deletion. (#6830)",
  "e8425fc97": "Enable numeric sort optimization support for all numeric types (#6424)",
  "16535b92e": "Add file cache restore logic (#6538)",
  "fa8937b98": "[Searchable Snapshots] Add integration test to validate cache files are closed after use (#6215)",
  "c3db97172": "Fix file cache data path computation (#6506)",
  "531a746fd": "Add event listener to prune file cache on index deletion (#6473)",
  "eb78246b9": "Add cache reservation logic (#6350)",
  "0f3b8705a": "Include file cache stats in node stats response (#6333)",
  "cc10b97b9": "Build performance improvements (#3926)",
  "b5f137b52": "Fix false positive query timeouts due to using cached time (#3454)",
  "c4b684d3a": "Add functionality to fast forward local processed checkpoints [segment replication] (#2576) (#2883)",
  "ec47a937f": "Deprecate setting 'cluster.service.slow_master_task_logging_threshold' and introduce the alternative setting 'cluster.service.slow_cluster_manager_task_logging_threshold' (#2451)",
  "854967ff9": "Fail fast when BytesRestResponse ctor throws exception (#923)",
  "73441879f": "[Rename] o.e.common.cache,collect,component,compress,document (#309)",
  "9f0547e47": "[Rename] server/src/main/java/org/opensearch/index/analysis, cache, codec and engine (#295)",
  "a37010453": "[ML] change to only calculate model size on initial load to prevent slow cache promotions (#66451) (#66462)",
  "7f7e938a2": "{S,E}QL: Fix optimization of `NotEquals` in conjunctions (#65331) (#65449)",
  "359b89a19": "Fix cacheability of custom LongValuesSource in TermsSetQueryBuilder (#65367) (#65389)",
  "a86c8dce7": "Clarify field data cache behavior in docs (#64375)",
  "3974c3b06": "Move the shared fetch cache to highlighting. (#65105)",
  "044dfb463": "[DOCS] Fix cache setting name in 7.9 migration docs (#64063) (#64073)",
  "428fd7218": "Use asterisk instead of empty string to clear all cached entries (#63907) (#63989)",
  "0860746bf": "[ML] changing ngram loop order for minor performance improvement (#63033) (#63059)",
  "178b25fc4": "Fix standard filter BWC check to allow for cacheing bug (#62649)",
  "00272ea87": "Remove cache key renderer argument from IndicesRequestCache (#62534)",
  "e573fa9ab": "Add data.path fast path for FilePermission (#61302)",
  "e14d9c951": "Introduce cache index for searchable snapshots (#61595)",
  "580ef8eb0": "[DOCS] Document static field cache settings (#61424) (#61606)",
  "5992bb050": "[DOCS] Fix ingest script compilation rate and cache size (#61468) (#61479)",
  "98119578a": "Disable sort optimization on search collapsing (#60838)",
  "08f94c914": "[Transform] disable optimizations when using scripts in group_by (#60724)",
  "cd6492fc1": "[Transform] fix regression of date histogram optimization (#60591)",
  "5eb04fb41": "[Transform] fix performance regression introduced in #60196 (#60276)",
  "24fec5244": "[DOCS] Add performance warning for scripts (#59890) (#59913)",
  "df7fc8f96": "Accounting for model size when models are not cached (#59607)",
  "604f22db7": "Use a dedicated thread pool for searchable snapshot cache prewarming (#59313) (#59590)",
  "a84469742": "Improve role cache efficiency for API key roles (#58156) (#59397)",
  "41345d4dd": "[DOCS] Add data streams to clear cache API docs (#59324) (#59339)",
  "6ffdb19a2": "Clean searchable snapshots cache on startup (#59009)",
  "a5a8b4ae1": "Add cache for application privileges (#55836) (#58798)",
  "d35e8f45d": "Allow read operations to be executed without waiting for full range to be written in cache (#58728) (#58829)",
  "8c93f4e15": "Sort document by internal doc id in FetchPhase to better use LRU cache (#57273)",
  "bf8641aa1": "[7.x] [ML] calculate cache misses for inference and return in stats (#58252) (#58363)",
  "20abba843": "Scripting: Deprecate general cache settings (#55753) (#58283)",
  "01795d192": "Revert 'Scripting: Deprecate general cache settings (#55753)' (#58201)",
  "88e8b34fc": "Scripting: Deprecate general cache settings (#55753)",
  "9666a895f": "[ML] inference performance optimizations and refactor (#57674) (#57753)",
  "5f8442d1f": "SQL: Improve performances of LTRIM/RTRIM (#57603)",
  "97c06816a": "Fix an optimization in terms agg (backport #57438) (#57547)",
  "aebb78bf5": "Run sort optimization when from+size>0 (#57250)",
  "4cf49bc05": "Don't run sort optimization on size=0 (#57044)",
  "f71783056": "Use workers to warm cache parts (#55793) (#56181)",
  "c20435324": "[ML] Wait for model loaded and cached in ModelLoadingServiceTests (#56014)",
  "41ddbd418": "Allow to prewarm the cache for searchable snapshot shards (#55322)",
  "93a2e9b0f": "Test: MockScoreScript can be cacheable. (#55499)",
  "f0b957868": "[DOCS] Removes transform performance note (#55177)",
  "d1123281b": "Use unlimited cache size by default (#55218)",
  "b99a50bcb": "value_count Aggregation optimization (backport of #54854) (#55076)",
  "7666276b0": "Enable the remote build cache in BWC distribution builds (#54691)",
  "2f619ad7d": "Improve checkstyle performance and readability (#54308)",
  "025857d94": "Fix ShardSearchRequest cache key (#54071)",
  "3a3e96495": "Reduce performance impact of ExitableDirectoryReader (#53978) (#54014)",
  "d25c01a37": "Scripting: Increase ingest script cache defaults (#53906)",
  "ac575b68a": "Scripting: Context script cache unlimited compile (#53769) (#53899)",
  "29583288b": "[DOCS] Adds performance considerations section to transforms overview (#53791)",
  "4b0ae15a9": "Disable distributed sort optimization on scroll requests (#53759)",
  "90ab94941": "Improve performance of shards limits decider (#53577)",
  "cdbee32f5": "Scripting: Per-context script cache, default off (#52855) (#53756)",
  "497250ba9": "Improve performance of docs snippet length checkstyle rule (#53636)",
  "7571ca437": "Disable Watcher script optimization for stored scripts (#53497)",
  "e180e2738": "SQL: [Tests] Add tests for optimization of aliased expressions (#53048)",
  "f46b370e7": "Fix cacheability of repository-hdfs integ tests (#52858)",
  "53b6583fe": "Decode max and min optimization more carefully (#52336) (#52358)",
  "28c56da75": "Don't track absolute path as test input to improve cacheability (#52235)",
  "fa4dcd50d": "Extract common optimization rules for QL (#52054) (#52132)",
  "8cf47aca7": "[7.x] Improve Painless compilation performance for nested conditionals (#52056) (#52074)",
  "87b126bbf": "[DOCS] Fix index_prefixes link in 'faster prefix queries' docs (#51833)",
  "915a931e9": "Bucket aggregation circuit breaker optimization. (#46751) (#51730)",
  "11e86b13b": "Disable build cache for packaging tests (#51717)",
  "91d7b446a": "Warn on slow metadata performance (#50956)",
  "90ba77951": "Fix memory leak in DLS bitset cache (#50946)",
  "91689e793": "[7.x] Refresh cached phase policy definition if possible on ne… (#50941)",
  "2dc23bd96": "Add protection in windows for slow file lock releasing (#50884)",
  "d1bde0a71": "Improve warning value extraction performance in Response (#50208)",
  "2e7686529": "[DOCS] Deterministic scripted queries are cached (#50408) (#50411)",
  "8f36bfa37": "[7.x][DOCS] Changes hyperparam optimization section ID (#50173)",
  "df558aa0c": "[DOCS] Document `index.queries.cache.enabled` as a static setting (#49886)",
  "aa443c636": "[CI] Interval queries cannot be cached if they use scripts (#49824)",
  "3bbaa0176": "Disable sort optimization when index is sorted (#49727)",
  "5cd6f64f1": "Introduce faster approximate sinh/atan math functions (#49009) (#49110)",
  "3a6fa0bbd": "Close query cache on index service creation failure (#48230)",
  "fc3cc3000": "[DOCS] Reformat clear cache API docs (#46512) (#47662)",
  "45c778301": "Warn on slow metadata persistence (#47130)",
  "ef0b75765": "Add explicit build flag for experimenting with test execution cacheability (#42649)",
  "0076083b3": "Implement rounding optimization for fixed offset timezones (#46809)",
  "011496ed5": "Expose cache setting in UserAgentPlugin (#46533)",
  "ccf656a9d": "Repository plugin test cacheability fixes (#46572)",
  "972d3569c": "Disable local build cache in CI (#46505)",
  "d5acb15a7": "[Backport] Initialize document subset bit set cache used for DLS (#46211) (#46359)",
  "40c3225d2": "First round of optimizations for vector functions. (#46294)",
  "b5d8b364b": "Ensure top docs optimization is fully disabled for queries with unbounded max scores. (#46105) (#46139)",
  "1403a389f": "Fix remote cache misses for test tasks (#45521)",
  "b17bf70e0": "Fix remote cache misses for checkstyle tasks (#45512)",
  "22ab38953": "Clarify that FLS/DLS disable shard request cache (#45462)",
  "491880edd": "Fix build cache misses caused by embedded reaper jar (#45404)",
  "fca458f1c": "Use system properties for build cache configuration (#45295)",
  "355713b9c": "Improve slow logging in MasterService (#45241)",
  "532ade781": "More logging for slow cluster state application (#45007)",
  "245c9b791": "Optimize Min and Max BKD optimizations (#44315)",
  "a154f49b9": "Fix stats in slow logs to be a escaped JSON backport(#44642) #44687",
  "597d2dfaf": "Add types field to slow logs in 7.x (#44592)",
  "4b50de2e2": "Document xpack.security.dls.bitset.cache settings (#44400)",
  "9089820d8": "Enable indexing optimization using sequence numbers on replicas (#43616)",
  "31b19bd02": "Use separate BitSet cache in Doc Level Security (#43899)",
  "28358fdbe": "show a full ingest example in the index page, to let user fast understand ingest node. (#43476)",
  "eeb181251": "Example of how to set slow logs dynamically per-index (#42384)",
  "424ef4f15": "SecurityIndexSearcherWrapper doesn't always carry over caches and similarity (#43436)",
  "74813360a": "Fix inverted condition so we never cache rest integ tests",
  "61b62125b": "Wire query cache into sorting nested-filter computation (#42906)",
  "2a0c30c10": "Make JarHell task cacheable (#42551)",
  "4dbf6c0df": "Make packer cache branches explicit (#41990)",
  "63eccb16d": "Make LoggerUsageTask cacheable (#42550)",
  "200b7e188": "Gradle init script for enabling remote build cache",
  "c9ed91312": "Mute slow and flaky build-tools integration tests",
  "a49760321": "Disable max score optimization for queries with unbounded max scores (#41361)",
  "7b3a9c703": "Do not refresh realm cache unless required (#42212)",
  "db8fe1de0": "Fix slow sync test clustres artifacts task (#42012)",
  "58dd88329": "Dix the packer cache script",
  "7a34ba35f": "SQL: Fix bug with optimization of null related conditionals (#41355)",
  "84e2f9d8e": "fix the packer cache script (#41183)",
  "26d8ecfe0": "Fix unsafe publication in opt-out query cache (#40957)",
  "64b31f44a": "No mapper service and index caches for replicated closed indices (#40423)",
  "f37f2b5d3": "SQL: Fix issue with optimization on queries with ORDER BY/LIMIT (#40256)",
  "235f57989": "Return cached segments stats if `include_unloaded_segments` is true (#39698)",
  "4f2bd238d": "[ML] Increase datafeed integration test timeout for slow machines (#39311)",
  "45b17e864": "Don't close caches while there might still be in-flight requests. (#38958)",
  "57f69082f": "Disable cache on QueryProfilerIT (#38748)",
  "e7868e92b": "Restore date aggregation performance in UTC case (#38221) (#38700)",
  "e73c9c90e": "Add an authentication cache for API keys (#38469)",
  "2c1eab2b8": "Clarify slow cluster-state log messages (#38302)",
  "275857857": "Trim the JSON source in indexing slow logs (#38081)",
  "f3379940c": "Fix the packer cache script (#38023)",
  "c0409fb9f": "[ML] Marginal gains in slow multi node QA tests (#37825)",
  "fc99eb3e6": "Add cache cleaning task for ML snapshot (#37505)",
  "adae233f7": "Add some deprecation optimizations (#37597)",
  "da3d8fb5b": "SQL: Fix issue with wrong NULL optimization (#37124)",
  "42ea64490": "Remove single shard optimization when suggesting shard_size (#37041)",
  "d3e98278c": "Spelling: replace cachable with cacheable (#37047)",
  "2afa7faef": "Override the JVM DNS cache policy (#36570)",
  "9d417984b": "[Zen2] Add warning if cluster fails to form fast enough (#35993)",
  "ba3ee9894": "Security: improve exact index matching performance (#36017)",
  "450db7fcf": "[Tests] Fix slowness of AutoDateHistogramAggregatorTests (#35072)",
  "d00b23c8b": "Fixes fast vector highlighter docs per issue 24318. (#34190)",
  "6f6b26516": "HLRC: add support for the clear realm cache API (#35163)",
  "f3e150b0e": "[Docs] Update query_cache.asciidoc (#33340)",
  "6d6ac74a0": "Zen2: Fail fast on disconnects (#34503)",
  "7cc3ac0fc": "[Docs] Add _cache/clear parameter examples (#34614)",
  "6dd716b0c": "Replace version with reader cache key in IndicesRequestCache (#34189)",
  "a15b1b97d": "Watcher: Reduce script cache churn by checking for mustache tags (#33978)",
  "b1cc58e42": "Allow to clear the fielddata cache per field",
  "92a48fa6b": "Add script to cache dependencies (#33726)",
  "6f9c9ab5e": "[ingest] geo-ip performance improvements (#33029)",
  "16fe22047": "Revert '[test] turn on host io cache for opensuse (#32053)'",
  "69c85331b": "[test] turn on host io cache for opensuse (#32053)",
  "237650e9c": "Add x-opaque-id to search slow logs (#31539)",
  "009ae48cb": "[PkiRealm] Invalidate cache on role mappings change (#31510)",
  "54740cc55": "Increase the maximum number of filters that may be in the cache. (#30655)",
  "35fa93497": "Adjust fast forward for token expiration test (#30668)",
  "28d4685d7": "Mitigate date histogram slowdowns with non-fixed timezones. (#30534)",
  "4defaa4f2": "Avoid deadlocks in cache (#30461)",
  "721ee4c22": "Fix line length violation in cache tests",
  "baf7b92b0": "Add failing test for core cache deadlock",
  "ec939dc01": "Fix line length violation in cache tests",
  "68760ec5d": "Add failing test for core cache deadlock",
  "e1a16a601": "REST: Remove GET support for clear cache indices (#29525)",
  "91ab88e86": "Security: cache users in PKI realm (elastic/x-pack-elasticsearch#4428)",
  "70f9bcc0d": "[DOCS] Adds link to clear role cache API (elastic/x-pack-elasticsearch#4405)",
  "dfcce2d87": "Speed up some of our slowest unit tests. (#29414)",
  "ff09c8231": "REST high-level client: add clear cache API (#28866)",
  "3e0e6444c": "Mark field_data as deprecated in /_cache/clear",
  "46fcd0715": "Add total hits to the search slow log (#29034)",
  "bddf9df8b": "Add search slowlog level to docs (#29040)",
  "3b474d886": "[Test] Fix slow rollup job task test",
  "3102b9494": "[TEST] Don't fail IndexAuditTrailTests if the test runs very fast",
  "ce77a3dd6": "[TEST] Make test more tolerant to slow VMs (elastic/x-pack-elasticsearch#3783)",
  "b0552e1c6": "[Security] Handle cache expiry in token service (elastic/x-pack-elasticsearch#3565)",
  "1d1dcd4ae": "Painless: Add a simple cache for whitelist methods and fields. (#28142)",
  "22e294ce6": "Fix performance of RoutingNodes#assertShardStats",
  "6655689b1": "Move DNS cache docs to system configuration docs",
  "ff3c19ed1": "Move DNS cache settings to important configuration",
  "d01fcee64": "Fix illegal cast of the 'low cardinality' optimization of the `terms` aggregation. (#27543)",
  "66b5a43d0": "Logging: Unify log rotation for index/search slow log (#27298)",
  "be399965e": "Revert 'Reduce synchronization on field data cache'",
  "2e863572f": "Reduce synchronization on field data cache",
  "29331f112": "Fail queries with scroll that explicitely set request_cache (#27342)",
  "f1e944a67": "docs: describe parent/child performances",
  "d0104c22a": "Reduce the default number of cached queries. (#26949)",
  "4a06dd919": "Painless: add tests for cached boxing (#24163)",
  "1d4f70210": "Calculate and cache result when advanceExact is called (#26920)",
  "62fbd5a79": "[DOCS] Format the clear cache API (elastic/x-pack-elasticsearch#2574)",
  "9c795bd83": "Fix cache compute if absent for expired entries",
  "6b4468ea5": "Clear security caches on security index health changes (elastic/x-pack-elasticsearch#1957)",
  "1900d9c44": "Docs: Fix typo for request cache (#25444)",
  "1b90c46a5": "Allow reader wrappers to have different live docs but the same cache key.",
  "68deda6d0": "FastVectorHighlighter should not cache the field query globally (#25197)",
  "678730107": "Fix bug in weight computation for query cache",
  "f3d5cf229": "Change user cache TTL to be based on write not access time (elastic/x-pack-elasticsearch#1373)",
  "a404f0aca": "Cleanup BWC for single shard optimization",
  "0ec30eb8e": "Fix cache expire after access",
  "62fa7081b": "Painless: Add tests to check for existence and correct detection of the special Java 9 optimizations: Indified String concat and MethodHandles#ArrayLengthHelper() (#24405)",
  "c17de49a6": "[percolator] Fix memory leak when percolator uses bitset or field data cache.",
  "09efdc315": "Improve performance of extracting warning value",
  "9c542173b": "[TEST] Make test more robust against slow connection establishing",
  "3986235d9": "[ML] Fix large state persistence performance (elastic/x-pack-elasticsearch#1004)",
  "798c19dd7": "Deprecate request_cache for clear-cache (#23638)",
  "286d62f00": "Don't clear realm-cache during security upgrade on basic license (elastic/elasticsearch#4806)",
  "9d9572e2b": "Reintroduce chunking to improve data extractor performance (elastic/elasticsearch#849)",
  "a475323aa": "Invalidate cached query results if query timed out (#22807)",
  "1243abfec": "build: do not use cached snapshots for backwards compatibility tests",
  "93b5e5566": "Restores the original default format of search slow log",
  "2c8229fca": "Cleanup unicast zen ping unknown hosts cached test",
  "00de8e07f": "Do not cache term queries. (#21566)",
  "df4482fdc": "Do not cache the QueryShardContext in PercolatorFieldMapper: it is cheap to create.",
  "4c53e55d3": "[TEST] Add master_timeout to shrink call to fail faster",
  "a5ccd02e7": "Makes snapshot throttling test go much faster (#21485)",
  "5d79eab98": "Fix the request cache keys to not hold references to the SearchContext. (#21284)",
  "542a48403": "security: cache negative lookups for native roles",
  "96aa5e33c": "Fix slowlog docs",
  "ce1a9a2b0": "[TEST] Add test that filtered alias with date math isn't cached by the request cache",
  "6284db3a4": "security: use correct time unit for role cache expire after write",
  "1914df7b5": "Do not cache script queries. (#20799)",
  "288f682fe": "elastic/elasticsearch#3667 Changes to DLS to support preventing requests that use scripts or now() from being cached",
  "3aed047bd": "#20750 Prevent requests that use scripts or now() from being cached",
  "40f8f281e": "Merge branch 'master' into dont_cache_scripts",
  "50ca10378": "Merge branch 'master' into dont_cache_scripts",
  "57afbadf3": "PercolateQuery is never cacheable",
  "7bffe9502": "Fix percolator queries to not be cacheable",
  "4000a4a10": "Merge branch 'master' into dont_cache_scripts",
  "764a5fbb3": "Fix date_range aggregation to not cache if now is used",
  "587bdcef3": "add extra safety when accessing scripts or now and reqeusts are cached",
  "e168b3b66": "Fix date_range aggregation to not cache if now is used",
  "80bf44f70": "Merge branch 'master' into dont_cache_scripts",
  "8afc83047": "Change the timeout of the rolling upgrades test from 40 mins to 5 mins to still allow accounting for slow VMs",
  "55d9e99f5": "Fix filter cache setting to allow percentages",
  "af215b528": "move completion performance tips from migration docs to completion docs",
  "7d7891108": "security: limit the size of the role store cache",
  "d7ec2db9b": "[TEST] enable cacheKey check in ShardSearchTransportRequestTests",
  "22242ec88": "Fix request cache key for search",
  "40d7ebc51": "Fix bug in single shard optimization when sorting documents in search request",
  "8d4bc0b2a": "Merge pull request #19929 from johtani/fix/stop_using_cached_components_in_analyze_api",
  "452691ae9": "Merge pull request #19949 from jimferenczi/slow_log_search",
  "bf312f420": "Add the shard ID and the node name in the output of the search slow log. This change outputs '[nodeName] [indexName][shardId]' instead of [indexName/indexUUID]",
  "2cde3b07c": "Stop using cached component in _analyze API",
  "2904562b0": "[DOCS] Fix shard request cache docs",
  "f63fcefbd": "Stop using cached component in _analyze API",
  "58d6b9dcd": "This commit first reads the repository data and only upgrades if it determines the read data is in the legacy format. It writes the upgraded version if it is not a read-only repository and caches the repository data if it is a read-only repository.",
  "e3d3f6b1f": "#19472 Enable option to use request cache for size > 0",
  "b717ad8eb": "Enable option to use request cache for size > 0",
  "0b52cedf6": "Merge pull request elastic/elasticsearch#2736 from rmuir/fls_cache",
  "3a0aa1312": "support lucene query cache when using FLS",
  "d08812d83": "[TEST] fix test to account for internal empyt reference optimization",
  "0d7c11ea1": "[DOCS] put profiling performance and limitations section on same page",
  "7c87d39f0": "Revert slow tests heartbeat",
  "f2d621942": "painless: remove useless dropArguments and throws statement in megamorphic cache; add tests",
  "54797b7d0": "don't let megamorphic cache 'capture' arbitrary arguments.",
  "f92314ba0": "Disable field stats cache if field level security",
  "8cc848f31": "Allow FieldStatsRequest to disable cache",
  "767bb49da": "Fix bug with first param (receiver) on the cache lookup",
  "a473298f4": "Add megamorphic cache",
  "e9017f619": "Improve performance of applyDeletedShards",
  "23d7cdd04": "ban slow methods in MethodHandle",
  "e21d8b31f": "Remove thread pool from page cache recycler",
  "80fee8666": "percolator: Removed percolator cache",
  "c13df3b6c": "Clear all caches after testing parent breaker",
  "ee6d29b34": "Merge pull request #18410 from rmuir/painless_parser_performance_bug",
  "43344eee8": "Add more def tests including checking bytecode for specific optimizations.",
  "cf2af8961": "Iterables.flatten should not pre-cache the first iterator",
  "6b4e47bf9": "this makes aggregations per-document _value fast (bypass hash put, hash get, etc) for painless.",
  "5644f4909": "Merge pull request #18258 from rmuir/painless_faster_score",
  "ba2fe156e": "Switch over dynamic method calls, loads and stores to invokedynamic. Remove performance hack for accessing a document's fields, its not needed. Add support for accessing is-getter methods like List.isEmpty() as .empty",
  "6e4273ae0": "Merge pull request #17818 from jimferenczi/search_slow_log",
  "3dc21e780": "Add missing index name to search slow log. This commits adds the index name as part of the logging message. Closes #17025",
  "0eb1a816c": "Allow the query cache to be disabled. #16268",
  "81801451a": "Factor out slow logs into Search and IndexingOperationListeners",
  "4bd27bc2a": "Type filters should not have a performance impact when there is a single type. #17350",
  "a22529cce": "Do not retrieve all indices stats when checking for cache resets",
  "49d868b49": "Improve test to not rely on thread slowness",
  "30cdc11d7": "Enable the indices request cache by default",
  "cbaa480c1": "[TEST] Let the windows machine be slow as hell",
  "f6ae9ec4f": "Remove ShardsAllocators and merge allocateUnassigned, moveShards and rebalance to improve performance",
  "98249507c": "Add missing index name to indexing slow log",
  "8d568ce3e": "Move optimization out of BoolQueryBuilder into tests",
  "b5aee2075": "Merge pull request #16610 from s1monw/test_indices_request_cache",
  "46cab6d2e": "Merge pull request #16603 from s1monw/move_cache_to_indicesservice",
  "778ec84a7": "Merge pull request #16469 from s1monw/simplify_indices_field_data_cache",
  "008aa2c31": "Merge pull request #16341 from s1monw/cache_settings",
  "3b225f7c9": "Revert default value for 'index.requests.cache.enable'",
  "41b09c5fe": "Add indices.requests.cache.clean_interval as a known settings",
  "a8c967306": "Merge pull request #16267 from jpountz/query_cache_settings_new_infra",
  "eb6aaefae": "Script cache expiration setting",
  "cc25c4c8b": "don't validate query cache types - they can be customized",
  "c702fbd29": "convert all slow logs",
  "cdae4945a": "add unittest for indexing slow log settings",
  "3599585aa": "cut over indexing slow log",
  "ce32b959f": "fix possible concurrency bug in IMC when indexing threads are faster in writing bytes than the status checker is in checking all shards",
  "581fd49da": "Merge pull request #15836 from jpountz/fix/bitset_cache_duplicates",
  "24ab66c69": "Merge pull request #15678 from ywelsch/enhance/faster-balancer",
  "d353dcb13": "Merge pull request #15592 from s1monw/remove_deprecated_query_cache_settings",
  "3a5d3a3bb": "Remove deprecated query cache settings",
  "99f2cde22": "Fail fast if HDFS cluster shuts itself down",
  "b0febc1b9": "make slow tests more obvious",
  "79ff2ddd2": "Merge pull request #15202 from jpountz/fix/clear_empty_query_cache",
  "7d25623b1": "Fix NPE when a segment with an empty cache gets closed.",
  "270a3977b": "Removed the lazy cache in DatabaseReaderService and eagerly build all available databases.",
  "59b4177b9": "Mark the slowest slowest tests @BadApple",
  "b01149032": "Add more retries for wait condition, in case jenkins is slow",
  "647f324c4": "Change waitfor max time back to 30 seconds, in case jenkins is slow",
  "d4fe344be": "Merge pull request elastic/elasticsearch#999 from martijnvg/watcher/unmute_slow_watches_tests",
  "f2900f71c": "test: unmuted slow watches test.",
  "cfba6af6c": "Merge pull request elastic/elasticsearch#988 from rjernst/disable_snapshot_cache",
  "fc1d043c0": "Build: Do not cache snapshots",
  "101e4ff7c": "test: added test that ensures that field data cache is not bypassed for segment and global ordinal caching when field subset reader hides the requested field.",
  "293b2f634": "field data: Don't cache top level field data for fields that don't exist.",
  "c1156283c": "Merge pull request #14315 from jasontedor/failed-cache-loads",
  "06853209a": "Fix issues with failed cache loads",
  "90528ce5a": "Merge pull request #14334 from jasontedor/cache-deadlock-test",
  "baf361f1f": "Add cache deadlock test",
  "60a4e24e2": "Merge pull request #14317 from jpountz/fix/cache_propagate_bulk_scorer",
  "c132e5502": "Use official public API to register query cache and index searcher wrapper",
  "2cb0cbf62": "Cut over to IndexModule to register query cache",
  "59a71b044": "Merge pull request #14293 from s1monw/fold_in_index_cache_module",
  "32af9610d": "do not use the cache methods for loading entries into the user cache",
  "a0668a3b2": "Merge pull request #14210 from jasontedor/remove-cache-concurrency-level-settings",
  "18b32f0ba": "Remove cache concurrency level settings that no longer apply",
  "cac073daf": "enforce that wrappers delegate core cache key and ban getCombinedCoreAndDeletesKey() entirely",
  "72c015f82": "DLS: Use the cache keys of the wrapped reader instead of the document subset reader itself.",
  "e8dc52857": "Merge pull request elastic/elasticsearch#735 from jasontedor/straight-cache-homey",
  "50368b370": "Merge pull request #13879 from jasontedor/straight-cache-homey",
  "59c90496a": "Mutating the cache while iterating is undefined",
  "5c0b4b04c": "Remove use of com.google.common.cache.*",
  "5d340f5e6": "Remove and forbid use of com.google.common.cache.*",
  "aa8bfeb88": "Create concurrent cache with flexible eviction policies",
  "169d06cf9": "Internal: Remove the disabled autogenerated id optimization from InternalEngine",
  "a0fea6d36": "set query cache to null",
  "ee6ac9856": "Cleaned up realm topics, split off cache management. Closes elastic/elasticsearch#523, elastic/elasticsearch#451.",
  "73d84e479": "Merge pull request #13376 from martijnvg/remove_pre2x_slow_parent_child",
  "e4e71d8a9": "add points_only option to GeoShapeFieldMapper for optimizing indexing performance on geo_shape indexes designed to store only points. Includes updated documentation and exception handling for ensuring index integrity on points only data.",
  "ed5f6e5a0": "Remove cyclic dependencies between IndexService and FieldData / BitSet caches",
  "3cd86a514": "Merge pull request #13311 from jpountz/enhancement/more_scroll_optimizations",
  "2b27bc11b": "[doc] remove comment about function_score faster than script sort. It is not so.",
  "bd44dbe5c": "Docs: Insist that setting size=0 will help performance.",
  "f46e66e7d": "Remove the experimental indices.fielddata.cache.expire",
  "f3265095a": "Never cache match_all queries.",
  "e74f559fd": "parent/child: Explicitly disabled the query cache",
  "e649d96eb": "Merge pull request #12881 from martijnvg/allow_for_customable_query_cache",
  "2e0b548b0": "Java api: remove support for lookup cache in TermsLooukpBuilder",
  "1f41a8c68": "Don't cache percolator query on loading percolators",
  "152178f6b": "Merge pull request #12806 from nik9000/slowlog",
  "79d9f5b77": "Logging: Log less source in slowlog",
  "1b72f1345": "fix the rest response for the clear cache action and add tests",
  "9091f4660": "Merge pull request #12624 from rmuir/faster_unit_tests",
  "d7544fb5a": "Tests: Remove references to tests.slow and tests.integration",
  "3c5b43a5b": "Merge pull request #12618 from rjernst/remove/forbid-slow-annotation",
  "a14913f7b": "Left over from the `query_cache` to `request_cache` rename.",
  "8e931d576": "Query DSL: don't cache type filter in DocumentMapper",
  "56391c14a": "Merge pull request #12447 from javanna/enhancement/dont_cache_type_query",
  "cf570ac5b": "Query DSL: don't cache type filter in DocumentMapper",
  "2d775c34c": "field data: If a field doesn't exist in field info then always return a non cached empty atomic reader.",
  "52fb3c3a0": "Docs fix- added performance note about plain highlighter",
  "532485522": "Merge pull request #12223 from awislowski/patch-1",
  "e598f16b5": "Default delayed allocation timeout to 1m from 0 Change the default delayed allocation timeout from 0 (no delayed allocation) to 1m. The value came from a test of having a node with 50 shards being indexed into (so beefy translog requiring flush on shutdown), then shutting it down and starting it back up and waiting for it to join the cluster. This took, on a slow machine, about 30s. The value is conservatively low and does not try to address a virtual machine / OS restart for now, in order to not have the affect of node going away and users being concerned that shards are not being allocated to the rest of the cluster as a result of that. The setting can always be changed in order to increase the delayed allocation if needed. closes #12166",
  "7fec35b67": "Merge pull request #12224 from awislowski/patch-2",
  "53874bf5a": "aliases: Parse aliases at search time and never cache parsed alias filters",
  "1df8e56a8": "Merge pull request #11929 from martijnvg/percolator/drop__own_qpc_cache",
  "18b73ce82": "Merge pull request #11886 from jpountz/fix/shard_filter_cache_stats",
  "ccaf846f1": "Store filter cache statistics at the shard level instead of index.",
  "d2f86933c": "Merge pull request #11893 from jpountz/fix/rename_cache",
  "38f5cc236": "Rename caches.",
  "ea175492b": "Merge pull request #11833 from jpountz/fix/smaller_filter_cache",
  "f29bf63fa": "Give the filter cache a smaller maximum number of cached filters.",
  "6d2ca116b": "[TEST] assertBusy on hasUnassigned on fast machines, node leave might not move shards to unassigned right away, wait for it",
  "0d757413d": "make other slow=false tests pass",
  "199c9002e": "Merge pull request #11428 from jpountz/fix/CompressedXConten_fast",
  "fbe617c37": "Internal: Make CompressedXContent.equals fast again.",
  "7c62e4c82": "disable core caches to ensure users are always authorized",
  "59d9f7e15": "Improve snapshot creation and deletion performance on repositories with large number of snapshots",
  "cf97e14ff": "mark slow tests",
  "5390c01b1": "speed up slow test",
  "61a31dd57": "Tests: Add information about shards that are not closed when the filter cache gets closed.",
  "1a967ce26": "Merge pull request #11180 from jpountz/enhancement/faster_scan",
  "22bba91a1": "Search: Make SCAN faster.",
  "719252a13": "Merge pull request #11183 from martijnvg/parent-child/remove_id_cache_from_stats_and_clear_cache_apis",
  "ece18f162": "Removed `id_cache` from stats and cat apis. Also removed the `id_cache` option from the clear cache api.",
  "ae323a474": "Merge pull request #208 from rmuir/disable_response_metadata_cache",
  "d577c0776": "Internal: close caches after IndicesService.",
  "d8283abf0": "Disable response metadata cache in this ClientConfiguration as well.",
  "a36de1b4e": "Disable response metadata cache.",
  "3409994b9": "Merge pull request #10897 from jpountz/fix/nocache",
  "b72f27a41": "Core: Cut over to the Lucene filter cache.",
  "c165afb4d": "Logging: Add logging of slow cluster state tasks",
  "7a6fe809d": "inner_hits: Don't use bitset cache for children filters.",
  "5236a3d22": "fix some tests, all fast tests now pass",
  "c23d55082": "Merge pull request #10856 from jpountz/fix/remove_qparser_cache",
  "9d890c472": "Internal: Remove the query parser cache.",
  "8435d9226": "Fix bug in GiantGapWithPrediction, due to 'slow start' of double exp",
  "b728772fe": "more fine-grained @slow tuning, remove from many tests that got unlucky with fsync",
  "d2854d726": "mark slow tests with @Slow annotation",
  "953ae63d2": "[TEST] beast slow index to fail with trace logging",
  "c821b8d3b": "Tests: remove static bwc delete index timeout, so that the slow delete failure can repro with additional logging",
  "6df978e76": "Test: increasing replicas timeout to avoid slowness on virtualized hardware (aka jenkins)",
  "85e4c21b0": "Tests: Disable the query cache for parent/child unit tests.",
  "a8e5c6eeb": "Merge pull request #10169 from clintongormley/deprecate_thrift_memcached",
  "aa94ced0a": "Remove references to the thrift and memcached transport plugins as they are no longer supported",
  "a8271595d": "Scripting: File scripts cache key to include language to prevent conflicts",
  "16446440e": "Don't use the fixed bitset filter cache for child nested level filters, but the regular filter cache instead.",
  "8c3cb6c61": "[TEST] don't cache store stats in tests that ensure stats are correct",
  "85c611a1b": "[STORE] Add simple cache for StoreStats",
  "00b5c6431": "Test: testSortMinValueScript - use unmappedType to handle slow propagation of mapping",
  "00d54fabb": "Search: Remove query-cache serialization optimization.",
  "0a07ce891": "core: disable auto gen id optimization",
  "15a766084": "[CACHE] Use correct number of bytes in query cache accounting",
  "9ac6d7830": "Internal: ClusterInfoService should wipe local cache upon unknown exceptions",
  "a6b992b1e": "[perf] changed the default realm cache hasher",
  "e8a17d9cc": "SSL/TLS: Add options to configure session cache size and timeout",
  "2f373f692": "Introduced an API to clear realms caches",
  "b8be8e432": "Query cache: Make the query cache usable on time-based data.",
  "bc8679659": "Core: Remove terms filter cache.",
  "67eba23b2": "Core: Terms filter lookup caching should cache values, not filters.",
  "ce11e0ee6": "Filter cache: add a `_cache: auto` option and make it the default.",
  "63ee24982": "[TEST] Call .cleanUp() on field data cache",
  "6bf18056b": "[CORE] Remove explicit .cleanUp() on cache clear",
  "624a4b87b": "Core: put []'s around the values in the slow-merge log message",
  "de7551735": "Core: also log byte size and doc count when we log slow merges",
  "380e47dbf": "fix cache key methods on leaf reader",
  "7ac713aed": "Core: surgically removed slow scroll, because master (2.0) requires full cluster restart coming from previous versions.",
  "d8f16178d": "Override write(byte[] b, int off, int len) in FilterOutputStream for better performance",
  "0c70b3ca7": "[TEST] remove duplicated tests.slow from randomized testing maven plugin conf",
  "284491d87": "Core: In the bitset cache only eagerly load bitsets for parent nested object fields.",
  "144813629": "Internal: Inverse DocIdSets' heuristic to find out fast DocIdSets.",
  "696beb6e1": "Core: Remove NestedDocsFilter, because it isn't used and also don't eagerly load it in bitset filter cache.",
  "42b6e01a3": "Use a 1024 byte minimum weight for filter cache entries",
  "1645434af": "Forgot to cut over the child filter in nested filter to use fixed bitset cache.",
  "c5cbd5890": "Clearing the realm caches on file updates",
  "4a14c635c": "[CACHE] Expose concurrency_level on all caches",
  "b7dac66c8": "Changed the cached hashing algorithm for cached realms",
  "60c16ba92": "Use groovy-x.y.z-indy jar for better scripting performance",
  "fdbb62b1a": "Docs: Fix curl statements in query-cache.asciidoc",
  "2c6d31df3": "Clear the GroovyClassLoader cache before compiling",
  "c02277283": "Add .esvmrc file to start SSL configured cluster fast",
  "a82d486bd": "Add a listener thread pool Today, when executing an action (mainly when using the Java API), a listener threaded flag can be set to true in order to execute the listener on a different thread pool. Today, this thread pool is the generic thread pool, which is cached. This can create problems for Java clients (mainly) around potential thread explosion. Introduce a new thread pool called listener, that is fixed sized and defaults to the half the cores maxed at 10, and use it where listeners are executed. relates to #5152 closes #7837",
  "6c8aa5fa6": "[RECOVERY] Mark last file chunk to fail fast if payload is truncated",
  "91144fc92": "Parent/child: If a p/c query is wrapped in a query filter then CustomQueryWrappingFilter must always be used and any filter wrapping the query filter must never be cached.",
  "94eed4ef5": "Introduced FixedBitSetFilterCache that guarantees to produce a FixedBitSet and does evict based on size or time. Only when segments are merged away due to merging then entries in this cache are cleaned up.",
  "b745b0151": "Fielddata: Remove soft/resident caches.",
  "b43c2ced9": "[TESTS] Temporary disable field data cache randomization.",
  "39a64cf4d": "[TEST] only reset clients on nightly tests resetting the clients on each test (in after test) makes the tests running, especially in network mode, much slower, since transport client needs to be created each time when randmized to be used. Also, on OSX, the excessive connections causes bind exceptions eventually which makes running the network tests much harder on it. closes #7329",
  "3a5229635": "Warmer (search) to support query cache allow for search based warmer to support query cache flag on the search request, and use the index level query caching flag if set. closes #7326",
  "59c1e94d9": "[DOCS] mention the type of caches that warmers load",
  "34830368d": "Update clearcache.asciidoc",
  "44a549fd1": "Test: Removed network.mode from test to prevent slowdown",
  "11f8edd74": "REST spec: Added missing query_cache param to clear_cache, nodes.stats and indices.stats",
  "e7f1aa4f4": "Documented the query cache module",
  "f216dc4ab": "[TEST] make sure all shards have docs we need that in order for refresh to be effective and actually refresh in the second round of indexing, otherwise, it caches a 0 docs shard and a refresh won't expire anything there",
  "e6e2781ee": "[Query Cache] Add a request level flag to control query cache A request level flag, defaults to be unset, to control the query cache. When not set, it defaults to the index level settings, when explicitly set, will override the index level setting closes #7167",
  "c8cc59df5": "Percolator should cache index field data instances.",
  "89e03910f": "Add a periodic cleanup thread for IndexFieldCache caches",
  "62da59f76": "[TEST] Verify if clear cache request went to all shards.",
  "81e86eba6": "[TEST] Wait for longer on slow nodes until replicating has kicked in",
  "c8e553054": "Improve performance for many new fields introduction in mapping When we have many new fields keep being introduced, the immutable open map we used becomes more and more expensive because of its clone characteristics, and we use it in several places.",
  "730b83c03": "The query string cache can't return the same instance, since Query is mutable changing the query else where in the execution path changes the instance in the cache too.",
  "d3f8c66e2": "Updated cache.asciidoc",
  "ec74a7e76": "Core: Prevent non segment readers from entering the filter cache and the field data caches. Percolator: Never cache filters and field data in percolator for the percolator query parsing part.",
  "c907ce325": "[Test] make recovery slow down in rerouteRecoveryTest aware of index size",
  "a72c167be": "[Test] improved recovery slow down in rerouteRecoveryTest",
  "9620aa315": "[TEST] Add FailureMarker to test listeners so -Dtests.failfast works",
  "f3eca05c3": "[DOCS] removed slowest on single query benchmark requests",
  "7552b69b1": "Core: reuse Lucene's TermsEnum for faster _uid/version lookup during",
  "65ce5acfb": "Explicitly clean up fielddata cache when clearing entire cache",
  "0ff0985e0": "Limit guava caches to 31.9GB",
  "a836496e5": "[TESTS] Randomly disable the filter cache.",
  "0457b0b76": "[TEST] Raise request timeout windows is sometimes extraordinary slow",
  "1feddac31": "Log cache recycler clear call as debug",
  "c306d8c5f": "Don't assume fixed earth diameter in the geo-distance bounding box optimization.",
  "fc78dd2f1": "[DOC] Fix default values for filter cache size and field data circuit breaker.",
  "342a32fb1": "Search might not return on thread pool rejection When a thread pool rejects the execution on the local node, the search might not return. This happens due to the fact that we move to the next shard only *within* the execution on the thread pool in the start method. If it fails to submit the task to the thread pool, it will go through the fail shard logic, but without 'counting' the current shard itself. When this happens, the relevant shard will then execute more times than intended, causing the total opes counter to skew, and for example, if on another shard the search is successful, the total ops will be incremented *beyond* the expectedTotalOps, causing the check on == as the exit condition to never happen. The fix here makes sure that the shard iterator properly progresses even in the case of rejections, and also includes improvement to when cleaning a context is sent in case of failures (which were exposed by the test). Though the change fixes the problem, we should work on simplifying the code path considerably, the first suggestion as a followup is to remove the support for operation threading (also in broadcast), and move the local optimization execution to SearchService, this will simplify the code in different search action considerably, and will allow to remove the problematic #firstOrNull method on the shard iterator. The second suggestion is to move the optimization of local execution to the TransportService, so all actions will not have to explicitly do the mentioned optimization. fixes #4887",
  "c9f1792c8": "Change default filter cache to 10% and circuit breaker to 60% The defaults we have today in our data intensive memory structures don't properly add up to properly protected from potential OOM. The circuit breaker, today at 80%, aims at protecting from extensive field data loading. The default threshold today is too permissive and can still cause OOMs. The filter cache today is at 20%, and its too high when adding it to other limits we have, reduce it to 10%, which is still a big enough portion of the heap, yet provides improved safety measure. closes #5990",
  "23f200bc0": "Use non analyzed token stream optimization everywhere In the string type, we have an optimization to reuse the StringTokenStream on a thread local when a non analyzed field is used (instead of creating it each time). We should use this across the board on all places where we create a field with a String. Also, move to a specific XStringField, that we can reuse StringTokenStream instead of copying it. closes #6001",
  "65bc01727": "Don't lookup version for auto generated id and create When a create document is executed, and its an auto generated id (based on UUID), we know that the document will not exists in the index, so there is no need to try and lookup the version from the index. For many cases, like logging, where ids are auto generated, this can improve the indexing performance, specifically for lightweight documents where analysis is not a big part of the execution. closes #5917",
  "0948260ad": "[TEST] make testTimeoutSendExceptionWithDelayedResponse more reliable on slow systems",
  "dc7349845": "Don't lookup version for auto generated id and create When a create document is executed, and its an auto generated id (based on UUID), we know that the document will not exists in the index, so there is no need to try and lookup the version from the index. For many cases, like logging, where ids are auto generated, this can improve the indexing performance, specifically for lightweight documents where analysis is not a big part of the execution.",
  "efb749936": "[TEST] Improve performance of MockBigArray MockPageRecycler",
  "206799662": "[TEST] Allow higher ClusterHealthTimeout on tests if configuration is slow",
  "fd8a6ac38": "[TEST] make BulkTest more robust if test infra is slow",
  "befa83338": "Make sure successful operations are correct if second phase is fast",
  "c3089701f": "[DOCS] remove extraneous ` from cache page",
  "b7451533c": "Added an indices level field data cache listener that always gets invoked and updates indices statistics and services about field data loading and unloading.",
  "a809bfbcb": "[TEST] Fixed TTL tests for create, index, update Were failing on faster boxes",
  "c84f975ff": "[TEST] Wait for shards to allocate before cleaning caches",
  "73547648e": "[TEST] Update TTL test can fail on faster boxes - improve range of valid vals",
  "0c1b9a667": "Restore streamInput() performance over PagedBytesReference.",
  "12d1bf848": "Significant_terms agg only creates term frequency cache when necessary and uses new TermsEnum wrapper to cache frequencies. Long and String-based aggs no longer need to pass an IndexReader as parameter when looking up frequencies of terms. Closes #5459",
  "4e5714b31": "Remove AggregationContext.cacheRecycler().",
  "39d2377be": "Use patched version of TermsFilter to prevent using wrong cached results",
  "0e780b7e9": "Migrated p/c queries from id cache to field data. Changed p/c queries to use paging data structures (BytesRefHash, BigFloatArray, BigIntArray) instead of hppc maps / sets. Also removed the id cache.",
  "03ad168b2": "[DOCS] Added note about dely in clearing filter cache.",
  "7e1eed981": "The forceful no cache behaviour for range filter with now date match expression should only be active if no rounding has been specified for `now` in the date range range expression (for example: `now/d`).",
  "b66885dab": "Don't throttle the translog stage of recovery After copying the index files (which are throttled), we currently throttle the translog as well. The translog phase3 part is performed under a lock, so its better not to throttle it at all, and move it as fast as possible.",
  "b34f25931": "Remove duplicate cache columns",
  "2d58603e8": "Added more unit like test that verifies that has_child is never cached even if wrapped by another filter.",
  "6cdbdaf38": "Added test that verifies that p/c filters never cache. Made the has_parent & has_child filterbuilder's cache options a noop as well, like it is in the related parsers.",
  "f002d3954": "Never cache a range filter that uses the `now` date expression.",
  "f2fb114a3": "Only refresh id_cache if the parent field is active.",
  "db394117c": "Made sure that any filter that wraps a p/c filter (has_child & has_parent) either directly or indirectly will never be cached by making CustomQueryWrappingFilter extend from NoCacheFilter.",
  "0e418d18a": "Added no-cache infrastucture the the filter cache.",
  "fe2a70831": "remove bloom from clear cache API, add id_cache",
  "c6fefacb2": "move ack tests for cluster update settings to its own test with scope test, and all other ack tests to scope suite for faster execution",
  "602de0469": "A GeoHashGrid aggregation that buckets GeoPoints into cells whose dimensions are determined by a choice of GeoHash resolution. Added a long-based representation of GeoHashes to GeoHashUtils for fast evaluation in aggregations. The new BucketUtils provides a common heuristic for determining the number of results to obtain from each shard in 'top N' type requests.",
  "01c5be1da": "generic thread pool should always be cached when using generic thread pool, some elements in the code base rely on the fact that it will always be able to fork it",
  "4271d573d": "Page-based cache recycling.",
  "fdfc7d746": "Add cache stats to cat/nodes.",
  "6af80d501": "Optimizes performance of AllocationDecider execution. Instead of using loops over all ShardRoutings, do accounting in RoutingNodes. Speeds up recalculating cluster state on large clusters.",
  "0469cca4b": "properly support global transport compression with new bytes transport request optimization",
  "a9e259d43": "Introduce BytesTransportRequest, allowing for downstream network optimization in buffers usage When sending a request, mainly to multiple nodes, if we already have the 'body' of the request in bytes, we can share it instead of copying it over to a new buffer. Also, it helps a lot when sending a relatively large body to multiple nodes, since it will use the same body buffer across all nodes",
  "292e53fe7": "The short circuit mechanism always needs to be wrapped with the live docs. In certain scenarios the live docs isn't passed down with acceptedDocs. For example when a has_child is wrapped in a filtered query as query and the wrapped filter is cached. The short circuit mechanism in that case counts down based on deleted docs, which then yields lower results than is expected.",
  "9fe2b8e07": "Randomly use a cached filter. Wrap the ChildrenQuery in a XFilteredQuery to also execute other code paths (scorer#advance)",
  "f465a6b58": "field level field data cache should take into account a null listener also, cleanup the onRemoval code",
  "dab841d4e": "Revert Ignore slow log configuration on shard creation",
  "10810f00d": "Ignore slow log configuration on shard creation",
  "06938e6fb": "Fixed fetch subphase to not recreate the HitContext for each hit, so that the object cache stays the same",
  "46edfc484": "[DOCS] Add some documentation about the performance of `_source` usage in scripts.",
  "c63741db0": "Introduce a new ImmutableOpenMap this map is a 'true' immutable map, encapsulating an open impl, and has a builder that allows it to be built easily. the builder has the optimization of using clone if its being built based on an existing immutable map.",
  "81089fb22": "Fixed concurrency issue in simple id cache. The lget() of a map can only be used if the map isn't shared.",
  "5cd56e5ce": "Improve new field mapping introduction performance Improve the introduction of new fields into the concrete parsed mappings by not relying on immutable maps and copying over entries, but instead using open maps (which will also use less memory), and using clone to perform the copy on write logic",
  "454dc5348": "Add back hashed BytesValues optimization that got lost in a previous commit.",
  "89de3ab62": "Added simple count down class that allows to be fast forwarded",
  "1f117c194": "Support the `has_child`, `has_parent`, `top_children` queries (and filters) in other apis than just search api. The queries are also now supported in count, explain (return dummy explination) and delete by query apis. Migrate SearchContext.Rewrite to Releasable. All the parent child queries are now implemented as Lucene queries and the state is kept in the Weight. Completely disable caching for `has_child` and `has_parent` filters, this has never worked and it also can also never work. The matching docIds are cached per segment while the collection of parent ids is top level.",
  "5396d8e14": "Copy slow in wrapped comparator even if root doc is the first doc in the segment.",
  "71ebb14b5": "Add ESAbortPolicy to cached pools",
  "e173f9a36": "Added test for verifying the id cache size if the clear cache api is invoked.",
  "f0914d13a": "refactor cache recycler, introduce thread local one, and default to it",
  "dbed36a13": "Added support for `tests.failfast` and `tests.maxiters`",
  "263c5808b": "Don't cache BytesRef in ThreadLocal",
  "35deed9bc": "indices.clear_cache",
  "6a5d2bf76": "remove cached stream output start to build the infra for simpler migration to netty 4, starting with removing the cache stream output handling as it will come built in",
  "f2614b22d": "Zen Discovery Cluster Events to have Priority.URGENT Master node cluster state events resulting in zen discovery (node gets added, removed, for example) should be processed with priority URGENT as its always better to process them as fast as possible, and not let other events get in the way. closes #3361",
  "9f6117612": "cache recycler now node/client level component",
  "f4d189539": "guice optimization only under debug logging use the source provider to find the line number through stack trace elements, otherwise, its very expensive",
  "4c8f3de34": "Fixes class cast exception when`top_children`, `has_child` and `has_parent` queries are cached via `fquery` filter. The error only occurs for `has_child` and `has_parent` if `score_mode` is used. Closes #3290",
  "530ae2169": "By default, we don't cache GCE API calls `refresh_interval` = 0.",
  "40cd549c3": "Ignore live docs when loading field data, the ID cache and filter caches.",
  "455bc3246": "Moving forbidden-api checks to compile phase instead of test phase (fail fast)",
  "991b5abdf": "Terms Filter Lookup: When on cache key defined, use terms values as key to filter cache closes #3240",
  "80ede081c": "Lookup Terms Filter _cache parameter not being taken into account fixes #3219",
  "79e54dbe7": "Added basic description of the 'recycler' parameter in the `_cache/clear` API",
  "c2f4bbe1a": "Added the API definition for `_cache/clear`",
  "e580507fb": "wait for yellow after the index is created also, remove starting one node, it not useful for the test, and slows down the execution",
  "52edc4c65": "Fixed issue where 'fast' should filter can make documents that didn't match the must or must_not clause a match again. Relates to #2979",
  "59a741cee": "Properly cache parent/child queries in the case they are wrapped in a compound filter. Closes #2971",
  "a1c62759c": "remove size bound from cache recycler for performance reasons",
  "2d13aa29f": "s/ES.RECYCLE/es.cache.recycle",
  "9a1c03408": "Added support for the `_cache` and` _cache_key` options to the `has_child` and `has_parent` filters. Closes #2900",
  "20e6df9f3": "Optimization in fielddata cache where ordinals are used instead of flat arrays when number of unique values is low",
  "5c90e5f94": "If no options are specified with the clear cache api then all caches should be cleared. Closes #2886",
  "4fd8c2c6d": "Ordinals were omitted from fielddata cache size calculation if field has more than one term. Closes #2882",
  "9f6c8c88f": "improve on shard level filter/id cache stats use just the removal listener and back to the IndexReader#coreCacheKey as the actual field as part of the cache key",
  "5af634369": "allow to disable the optimization of removal of ords on single value numerics/geo field data field data settings in the mappings can have ordinals=always option",
  "54f685674": "Thread Pool: Update default settings (move from default cached to fixed) closes #2858",
  "31d1e6cfe": "Field Data: Simplify field data cache settings closes #2843",
  "473473e86": "remove the field settings for query parser cache, not really relevant",
  "c18c609af": "Date math in query_string caches now() fixes #2808",
  "c298c1917": "don't use cache for ordinals for small max ord",
  "a7da27c71": "Field Data: Add `node` level cache type closes #2722",
  "50d121315": "add ability for cluster health to wait for current events to be processed help with tests that run on slow machines",
  "361d6bf89": "spin a bit to wait for condition in test, so slow machines will still run it correctly",
  "4714a6acc": "Clear cache: allow to invalidate specific filter cache keys closes #2653",
  "37f16127c": "Fix ScriptFilter cache key calculation",
  "6b49457d9": "Optimize conversion to a cacheable DocIdSet",
  "681239b41": "Warmers do not load field data cache for sorting on new segments fixes #2649",
  "f98bd654a": "Fix filter cache stats calculation",
  "360d7d942": "default for paged_bytes for string type less memory overhead, though a bit slower on the execution side for facets, and might require more memory per facet execution",
  "20f43bf54": "add hasSingleArrayBackingStorage allow for optimization only when there really is a single array, and not when there is a multi dimensional one",
  "6b92b592b": "allow to clear by reader the new field data cache",
  "af757fd82": "more usage of field data note, removed field data from cache stats, it will have its own stats later on (cache part is really misleading)",
  "e82f96f1e": "Make script cache configurable and bounded",
  "720feca3c": "optimize search hit to use Text for type and id this will reduce serialization string overheads, and faster xcontent(json) generation",
  "c2f8ee105": "add a marker CachedFilter this allows to easily and globally check if we cache a filter or not, all filter caching uses this marker interface",
  "c36638d15": "not delete filter improvements - don't check no null for liveDocs, since we know they are not null with the check for hasDeletion - improve iteration over liveDocs vs. innerSet, prefer to iterate over the faster one",
  "b4f85ee42": "no need to check for log levels we already do that when we log, and those are set to TRACE most times for slow log (since logging is based on thresholds)",
  "a274d9386": "Add types and stats to search slow log closes #2455",
  "05746adeb": "lucene 4: Set number of replicas to 0. Makes the test run faster.",
  "ffd262e96": "lucene 4: rollback optimization in SingleFieldVisitor for now to make it work",
  "53d9b13e2": "lucene 4: fix optimization check to set docs_only+omit_norms",
  "24ef98762": "lucene 4: Upgraded the simple id cache.",
  "15c9cd514": "lucene 4: Field name no longed interned when loading field data cache and return empty field data cache for fields that don't exist.",
  "386c2ebdb": "lucene 4: remove bloom cache we can add bloom cache, if we need it, as a codec on the uid field we still need to rewrite the UidFilter to not use bloom, but that will be the regular one",
  "f9b0fcb3a": "remove BufferedDeletesStream by default, we will put a bloom filter code on the _uid field, so no need for the optimization of using bloom filters when trying to delete a doc by _uid term per segment",
  "2fa017db1": "Terms filter: Add `or` and `or_nocache` execution modes closes #2306",
  "2532761c5": "increase the clean interval of filter cache",
  "05653cbda": "move cleaning filter cache on closed readers to separate thread improve cleaning the global weighted cache when a reader closes, move it to a separate thread, so iterating over the cache entries will nto happen on each segment closed, but instead be 'bulked'",
  "afc99ac42": "Added id cache size to nodes stats api",
  "7bf233a17": "fix cleanup of of has child/parent check if the collected uids were processed before trying to push them back to the cache",
  "3cd54fc4e": "Improve `has_child` filter / query performance (#2251) Added a new has_child filter implementation, that works _uid based instead of bitset based. This implementation is about ~2 till ~6 times (depending on the query) faster than the already existing bitset based implementation.",
  "c33ca2921": "small optimization for global facet with facet filter, by removing the double check on the facet filter",
  "3338736c8": "improve cached buffer allocation sizes based on jvm heap configured",
  "016e2e728": "Have rest request also allow to get the content as a streamable (note, this will break plugins that implement a rest handler..., like wares, thrift, and memcached, until they are upgraded)",
  "6eb419649": "better/faster parsing of update request (with upsert)",
  "feb81dd36": "improve filter cache cached value to store docset only",
  "4f59e5d28": "combine cacheable method of bit sets into one method",
  "de3c74ab9": "add a flag to restore old multi value behavior with fast vector highlighter",
  "ccea82596": "terms filter uses less memory when cached move from a TreeSet to an array, sorting on creation",
  "2d46b4102": "improve iteration on multi valued field data by breaking fast",
  "f87632fab": "Query DSL: term/terms filter performance improvement (bulk reading), closes #1972.",
  "771225ccc": "add logging with a reason why the cache is cleared (filter and field)",
  "f7c9dd11e": "add trace logging for how long it took to load field data cache",
  "de730993c": "better printing in slow log output",
  "b83378f4c": "Add `cache` thread pool to handle cache loading of async caches (bloom filter), closes #1777.",
  "c08b96824": "rename the cached thread pool to generic (from cached), since really, cached is meaningless, and its actually a generic thread pool we use for different operations",
  "4a8d6deae": "add getters for mapper service and field data cache in doc lookup",
  "278e5d3a4": "Transport buffer overrun can happen because of byte buffer reading optimization introduced in 0.19.0.RC1, closes #1686.",
  "21405f5aa": "Highlighting: Add boundary_chars and boundary_max_size to control text boundaries with fast vector highlighter (term vector), closes #1614.",
  "a18021c77": "Filter cache to have just weighted (node) and none, and index query parser cache to be size based, closes #1590.",
  "8cf8b478a": "Scan Search: Improve performance while scrolling through it, closes #1579.",
  "a4e4235d9": "move sort optimization when sorting by _score to sort parse element from the query phase execution",
  "0f1a908ba": "improve multi field highlighting with fast vector based highlighting by caching the custom query across field mappers (one when there is field match, and one when there isn't)",
  "4e6217c54": "simplify toString for cached filter",
  "ac2c2fb48": "enable unsafe optimization in lzf for 0.19",
  "ed281fbfd": "Index shard search slow log (query and fetch), closes #1462.",
  "93f1d50c1": "configure the scheduled TP to not wait for delayed execution, so we shutodown faster",
  "724611f24": "don't clear on both obtain and release for the search cache",
  "56a4c98e8": "Allow to specify a specific field in the clear cache API, closes #1374.",
  "e33dbcd93": "more small optimizations to term creation",
  "56a2833de": "Performance improvement when creating a multi-value field cache",
  "ee585ad96": "change executor to be management and not cached for stats/status/info APIs",
  "ef47308ea": "allow to change indices.cache.filter.size setting through cluster update settings api",
  "1c555679a": "small optimization when sorting based on count and same count entries requires sorting based on term",
  "7af84869f": "Invalidate cache stats when clearing the cache, closes #1220.",
  "0f251bf6e": "Cache Stats: Computing the filter stats using the default weighted filter cache is expensive, closes #1201.",
  "a5a46b234": "make sure not to use cached stream when writing the metadata to shared gateway",
  "7de072b14": "more small optimizations",
  "8c9dffc23": "optimize breaking strings based on commas, and small optimization to resolving routing values",
  "fbd6e85ea": "Query DSL: Allow to associate a custom cache key with a filter, closes #1142.",
  "5a8b27b9d": "small optimization to counting search shards",
  "bac6240d1": "improve clearing caches in guice",
  "8bb448473": "more optimizations for sharing same analyzers across different indices on the same node",
  "d44a79660": "increase default keep alive of cache, management and merge thread pools",
  "7ff07ebaf": "Use cache streams to copy over byes, not the byte array",
  "fe52c5665": "better cached stream output logic, and reduce byte array copying when sending a message over the transport",
  "45956a5a2": "optimize empty cached filters to return null",
  "b61735d8e": "Filter Cache: Introduce new `node` level filter cache and make it default, closes #959.",
  "e948c366f": "optimize cache recycler memory usage",
  "6f80e306d": "Field Cache: Allow to set `index.cache.field.expire` when using `resident` type, closes #957.",
  "3b5c133c7": "Filter Cache: `soft` filter cache can cause bad memory behavior, closes #946.",
  "f3e032315": "(Small) optimization to has_child filter, closes #880.",
  "49ac30801": "more cache cleaning",
  "013c4e9fa": "improved cleaning of cached parser context",
  "990f37158": "better cached streams logic",
  "d8d47abcb": "no need to cache filters again when handling named filters",
  "dedbedbb7": "Update Settings: Allow to dynamically set filter cache settings, closes #874.",
  "90b88fe4b": "add TODO optimizations comments",
  "3c233347b": "make sure we keep order in mappings when recovering so there won't be reparsing of the mappings on nodes (introduced with faster recovery work done on gateway)",
  "56c9783cb": "remove using field cache when indexing string fields for now",
  "166493f9d": "properly clean mapper data, and cache some mapping structures",
  "fb35b1c99": "clean guice caches after creating injectors so it will take less memory",
  "9927fd4cd": "fix none bloom cache to proper name",
  "8eab5ec52": "experiment with lab for filter cache, disabled by default for now, also, move to use soft reference on the whole reader key value, and not per filter (less load)",
  "991683efa": "remove clearUnreferenced from caches, no longer need it",
  "49e2f55ab": "actually register the eviction listener with soft / resident filter cache",
  "4603d1050": "faster handling of a case where each doc has multi valued values for different facets, also, don't take into account missing value values (and in the future, we can also count those per bucket if needed)",
  "b479bc58f": "faster handling of a case where each doc has multi valued values fields in histogram facet",
  "7fcf82af8": "faster handling of a case where each doc has multi valued values fields in terms stats",
  "4721f9aa6": "fix cache recycling logic to make sure we don't override our own data in facets",
  "9b8eceb22": "Histogram Facet: Add ability to define bounds (from/to) to both improve performance and provide additional bound filtering, closes #834.",
  "d845a306f": "fill sentinal proeprly when its not in cache",
  "90a339ad5": "Date Histogram Facet: Improve value field case performance, fix wrong total computation with multi valued fields by introducing total_count, add min/max stats, closes #831.",
  "46088b9f8": "Histogram Facet: Improve value field case performance, fix wrong total computation with multi valued fields by introducing total_count, closes #829.",
  "c9838d5c7": "use cache recycler for count histo and data histo facets",
  "0069d5a75": "add adler to checksum, faster and is good enough with length check for our use case",
  "8c9000c54": "Extend stats API to include filter's cache count and eviction count, closes #802.",
  "e759b4c97": "Add option to expire filter's cache based on access time, closes #803.",
  "4bdae621f": "Scripts: Allow to register native scripts (Java) for better script execution performance, closes #752.",
  "60b423b74": "Don't 'double' cache a facet filter / query facet, closes #734.",
  "5082ad6d1": "Clear Cache API: Add specific cache clear for `id`, `filter`, `field_data`, `bloom`, closes #716.",
  "d054c8c14": "use cached thread pool to do cluster state gateway snapshotting",
  "c7add5f37": "upgrade to mvel 2.1 snapshot to gain performance improvements",
  "cebdae570": "refactor script execution handling to improve performance, also introduce specific search script executor",
  "20c77a2ac": "clear the percolator reader from the cache explicitly",
  "38ea07cfb": "fix field data cache setting: used under index.cache.field.type, available values: resident, soft, weak",
  "89314f29a": "improve multi value field cache handling both in terms of memory usage and GC behavior",
  "233ed1f8c": "improve multi value field cache handling both in terms of memory usage and GC behavior",
  "5c08271e7": "improve numeric stream analysis performance",
  "3c3d01347": "improve all stream analysis performance",
  "66d63055d": "Add to node stats the number of times field cache was evicted due to memory constraints, closes #603.",
  "754b0d7a0": "Add `resident` field cache type, closes #602.",
  "019359a89": "add more scanning options on the field data cache",
  "d8aef57ba": "add filter_cache_size to node stats",
  "4245eb739": "add node level field cache size to node stats api",
  "e313379ed": "only force shutdown on cached threadpool if its not the same as the execture service",
  "9f72a8d68": "use cached thread pool for notifying on disconnections",
  "ac73334c8": "make id cache an index component, so a new instance will be created per index",
  "bb0d7190e": "make id cache an index component, so a new instance will be created per index",
  "eef3a95fa": "move the query parser cache to be index level and not node level",
  "4a3e5b634": "Query Cache: Invalidate the query cache when mappings change, closes #532.",
  "99a3e615a": "Improve performance when searching across multiple types, closes #478.",
  "d487d809e": "Query DSL: Revert back and have range, terms, and prefix filter _cache set to true, closes #456.",
  "3a9dc8f45": "change back to cached thread pool",
  "5804e9132": "Query DSL: `term` filter to have `_cache` set to `true` by default, closes #453,",
  "529303c53": "Query: match_all query (also in query_string: *:*) is very slow",
  "0a0ac3579": "bring back query parsing cache (weak)",
  "bc4121c06": "Query DSL: `term`, `term`, `prefix`, and `range` filter are now weakly cached, for more strong caching, set `_cache` to true, closes #450.",
  "517f3eb0f": "chance default query parser cache to none from weak",
  "deada942e": "Query DSL: `constant_score` and `filtered` queries cache filters by default, remove it, closes #449.",
  "c37a0afbf": "improve update of mappings, and delete index process with the new optimization of when index is created",
  "bad45de7a": "fix wrong handling of empty param in thrift/memcached transport",
  "d9f966d83": "Query DSL: Numeric Range Filter - A filter that uses the field data cache to perform numeric tests, closes #435.",
  "e63847f77": "add hints on when to first perform GC, make small GC happen faster resulting in less chances of stop the world GC",
  "1578da404": "improve geo internal cache of lat/lon, stored two double arrays instead of an array of GeoPoints.",
  "485f90414": "Default to not using compound file format for the index (increases number of open files, but faster indexing and recovery), closes #384.",
  "9bb86ea86": "imrpvoe boolean filter performance",
  "f301138e6": "Change default thread pool to scaling from cached, closes #381.",
  "20b6688b0": "make ping tests run faster using cluster state api",
  "a2011e015": "no need to cache match all filter",
  "2d5883ccb": "improve normalization performance from one content type to the other",
  "4822517d5": "add query parser cache to cache common query strings (+settings) with the parsed queries",
  "a47638dd3": "imrove filter caching handling by not holding an implicit ref to the parent cache",
  "de05a10ae": "use fastGet in docset",
  "807c485a3": "make the cached compile scripts a soft map",
  "46b58ce77": "Memcached transport does not support version, npe when no uri, closes #342.",
  "9d08e56d8": "cache nodes store metadata for on a shard basis when iteratring over the unassigned nodes",
  "4bfd0a8c2": "cache commit points during smart allocation based on local storage when recovering from gateway",
  "7ae8d4c66": "thread pool type setting is wrong, fix blocking max setting to have a minimum of 10, use cached TP where needed",
  "113ea1bb1": "don't throttle gateway recovery based on peer recoveries (gateway recoveries are important to do as fast as possible). still throttle peer recoveries based on both.",
  "0c72bb212": "better writing of local md5 caches",
  "04ae1581a": "fix NPE introduced on optimization of index status on docs status creation",
  "c10544479": "refactor cached streams into a separate class",
  "e1226626b": "improve thread cached bytes allocation",
  "09bbf1160": "fix dep on hamcrest for memcached plugin",
  "300f38ee3": "improve memcached test",
  "2eeb4ebd8": "improve memcached test",
  "d657d4447": "more shard relocation tests, create a cached executor that can be used to allocate threads that are not affected by the actual thread pool impl (can always fork, no blocking)",
  "910ad2a40": "fix optimization to not do sorting when searching with score 'desc' sorting",
  "8d669ff54": "move sorting to be done using the new fielddata cache, and not using lucene built in FieldCache",
  "97b5b4152": "enable eager cache eviction based on readers, requires a nasty hack to Lucene, basically overriding two classes to hook into when a reader actually gets closed (and only enabled when elasticsearch is before lucene in the classpath, which we take for in the startup scripts)",
  "267016758": "improve handling of memory caching with file system, only force compound file when really needed (when an extension that exists within the compound file is part of the memory cached extensions)",
  "2908418d3": "checn the default byte buffer cache to 200mb, now that its global per node",
  "1d39bb4d5": "cache md5 computation for unallocated shard and reused it",
  "3f6cd4673": "allow to configure tcp network modules (transport, memcached and http) to use blocking io (just enabling it to do some performance tests)",
  "33d357dbb": "Memory Store / FS Memory: Create a node level memory store cache and allocator, closes #235.",
  "c4aff14e1": "remove field options from field cache and freqs, simpler and they are not used in any case",
  "dbb7df742": "protected if the cached stream got evicted on us",
  "477024e3b": "cached termsSet used in dfs phase",
  "2cdb7bc05": "change jclouds to use cached thread pool",
  "a8a4bbc30": "internal optimization - share built in analyzers on the node level and not on index level",
  "bd6b89f7c": "Query DSL: Allow to control if filters should be cached, closes #181.",
  "cb5500919": "add filter cache tests",
  "dc5bb2033": "no need to cache the analyzer providers",
  "8d3347bb5": "Memory Monitor: Remove explicit GC call, clear cached instead, closes #179.",
  "7b1aac5bb": "eagerly clean cache when shard gets closed",
  "5e4343b48": "change how filter cache works, do weak/soft on IndexReader key, so we release the IndexReader on memory constraints",
  "b49864299": "fix wrong optimization on boolean query",
  "7fe524351": "share cached bytes",
  "9872b4977": "cache data stored in http",
  "e81d559f5": "update memcached name to be transport-memcached",
  "9a35ddcb6": "add memcached.enabled setting allowing to disable memcached even if its added as a plugin (by default, it is enabled)",
  "d99738944": "add annotation documentation for memcached handlers",
  "3e430c2ca": "memcached: add binary protocol support",
  "51aac0cdf": "memcached initial work",
  "1b8bb9890": "make http a bit faster by improving parsing of qstring",
  "daac94092": "improve camelcache and underscore conversion",
  "91d5beca9": "change cache to memory in fs in memory storage of certain files, better name since its not really caching, its actual storage",
  "fd574880f": "Clear Indices Cache API: Allow to clear indices cache, closes #101",
  "0e3ca48aa": "add type to filter cache",
  "2ea7423f3": "don't cache count queries",
  "fa55c40c8": "Index FS Store: Allow to cache (in memory) specific files, closes #82",
  "40b0dfdde": "count should be cached as a filter",
  "46ff97af5": "refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption (apply to search)",
  "defb6a336": "refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption (apply to count and delete by query)",
  "c111e1ab8": "refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption",
  "687d7955e": "slight performance improvement in dfs phase"
}, "opentsdb": {
  "8ffc084": "Collect stats from meta cache plugin if configured (#1649)",
  "e106175": "Make the clean cache script a bit more OS agnostic fixing #1268. Thanks @myg821561935",
  "65cf06b": "Make the clean cache script a bit more OS agnostic fixing #1268. Thanks @myg821561935",
  "ed56c5a": "Segment compact and repair commands to improve performance (#1433)",
  "627620b": "Tweak Xiayang's UID cache hit count by adding a miss counter and resetting when we hit Long.MAX_VALUE.",
  "c2a2d9e": "Change cache-hits data type from int to long and fix spilling.",
  "d38f445": "Tweak Xiayang's UID cache hit count by adding a miss counter and resetting when we hit Long.MAX_VALUE.",
  "7551372": "Change cache-hits data type from int to long and fix spilling.",
  "05631e8": "Swap out Screwdriver for Travis to build and test as it would take too much work to make the tests faster to fit under the 50m time limit impossed by travis and SD will let us run much longer.",
  "4379e24": "Swap out Screwdriver for Travis to build and test as it would take too much work to make the tests faster to fit under the 50m time limit impossed by travis and SD will let us run much longer.",
  "bbb687a": "Add the TSDB.OperationMode to track the mode of the tsd, adding a write- only mode. Add the option to have a Guava LRU cache for UIDs to limit the size of UID caches. Add an option to only write the one or the other of the UID caches if the TSD is in read-only or write-only mode.",
  "1a9f1fd": "Properly validate expression queries before passing them to the queryExecutor. Wrap debug log lines in the query executor so they don't affect performance when not in debug mode. Filters are now optional in the expression queries.",
  "931242b": "Merge pull request #699 from cannium/performance",
  "9ae709b": "Modify @cpdevoto's downsampling to allow for hourly downsample alignment as well as align to useful boundaries based on the start of calendar events such as the start of the year or start of the month instead of basing it off the first data point timestamp. Also modify the API calls so they use the downsample specification instead of adding params to the functions. And squash a bunch of the code to improve Calendar performance a bit and make the UTs a little simpler.",
  "9197b63": "Add filter support in the TsdbQuery and salt scanner. If the filters consist of the existing group by wildcard AUTHORS bootstrap build-aux build-bigtable.sh build-cassandra.sh build.sh configure.ac CONTRIBUTING.md COPYING COPYING.LESSER fat-jar Makefile.am NEWS opentsdb.spec.in pom.xml.in README screwdriver.yaml src test THANKS third_party tools tsdb.in then we don't bother processing in the scanners. Likewise if the filters are literal ors and won't create a massive row key regex, we keep from using them in the scanner. For regex and other wildcards or if we would create a giant row key regex we have to resolve the row keys to strings and filter them post-facto. It works but is a bit slower.",
  "a35d2dd": "Improve query performance in the AggregationIterator by calling .hasNext() on the downsampler instead of letting it build a giant exception string that we're just tossing in the bit bucket.",
  "45e575a": "Improve query performance in the AggregationIterator by calling .hasNext() on the downsampler instead of letting it build a giant exception string that we're just tossing in the bit bucket.",
  "c0c802d": "Address #396 to alleviate the recurring cachedir removal problem",
  "8f06f6e": "Address #396 to alleviate the recurring cachedir removal problem",
  "aec67bf": "Create a batched capable mechanism for putting complete hours in a single put. When performing historical data loads this will operated 3,600 times faster for second based times and 3,600,000 times faster for millisecond based times where there is a value for every single point in time.",
  "010a52e": "Cleanup #326 a bit. Build a map of the UniqueId caches in TSDB and pass that to the pre-loader instead of building a list then a map. Pass the TSDB object to the pre-loader and use the config to load the max results. Fix naming of UniqueId.preloadUidCache(). Remove the named scope from the pre-load loop and use the row count instead.",
  "69db67d": "Preload uid caches at startup.",
  "f3ff7d8": "Use config.getDirectoryName() for 'tsd.http.staticroot' and 'tsd.http.cachedir' to make sure the directories end with a slash.",
  "006fd88": "Use `Cache-Control: max-age=0' instead of `no-cache'.",
  "6f1d105": "Use `Cache-Control: max-age=0' instead of `no-cache'.",
  "0e86af4": "Start to convert the write path to be fully async. We need to resolve the metric and tags asynchronously, so start to adapt the code around the fast path for writes (not the one used for batch imports) to expect to know what row to write to asynchronously.",
  "19f0853": "Modify RowSeq to support millisecond timestamps Add a bunch of documentation to RowSeq methods Temporarily disable optimization in Span to add columns to the last RowSeq",
  "a3d8022": "Modify TSMeta to use the new meta data table instead of trying to put the TSUID rows in the UID table. This will keep the scanning speed across UIDs quick for suggestions and also allow for fast scanning across the TSUIDs for query optimizations.",
  "68a30a0": "Modify all tree related code to use the new tree table instead of forcing multiple rows of data in the UID table. This will improve scan performance across TSUIDs",
  "74e8017": "Add RPC Plugin interface to let users implement their own RPC protocols such as Protobuf, Thrift, Avro, Memcache, whatever.",
  "4e44a57": "Modify Tree.storeTree() to write only the tree definition and return a Boolean Modify TreeBuilder.processTimeseriesMeta() to call the collision and not-matched flush calls on a tree instead of storeTree() since processing will never modify a tree's metadata. Add copy constructor to Tree Rework TreeBuilder.processAllTrees() to cache the tree definitions in a thread- safe manner so we keep scanner calls down. It will refresh the list every 5 minutes when processing real-time TSMeta entries Remove spurious System.out.println from TestTree.java Add root branch cache to TreeBuilder to speed up the real-time tree generation calls so that they don't have to fetch the root for every call. Renamed TreeBuilder.loadRoot to loadOrInitializeRoot(), made it a static call, modified it to load or set the cache and return the root branch",
  "343dfc8": "Add TSDB.getUidName() and .getUID() to access the private UID caches",
  "0478f05": "Add TSDB.assignUid() to assign UIDs to metric, tagks and tagvs using the caches. It's also slightly different than UniqueId.getOrCreateId() in that we want to throw an exception if the UID is already assigned. Add unit test file for the TSDB class with tests for assignUID(), need more Set Tags.validateString() public as we'll need it elsewhere",
  "ffdeed8": "Implement api/aggregators endpoint Implement api/version endpoint Implement api/dropcaches endpoint Fix comments in HttpSerializer format methods Fix error handlers in HttpSerializer where, if the user does not supply a jsonp callback function, it was still wrapping the response in parentheses",
  "d50783d": "Add a small helper script to clean the --cachedir from cron.",
  "c029010": "Add a new 'dropcaches' command.",
  "5016eca": "Add unit tests for the faster `Long.parseLong'.",
  "f23c1a1": "Make GWT asset files cacheable.",
  "b3a26c3": "Fix the logic that serves file from cache and add unit tests.",
  "33dff14": "Added a `nocache' query param to force TSD to serve data from HBase.",
  "fa0ccde": "Minor improvement in the code checking cache staleness.",
  "b2b9fac": "Use the extension `.txt' instead of `.dat' for ASCII cache files.",
  "8da9a25": "Bug fix: make queries twice faster by properly using the cache."
}, "optaplanner": {
  "4ad6d82f": "Refactor cloners for improved performance (#2705)",
  "4618f39a": "PLANNER-1506 Further improve performance of solution cloning (#2698)",
  "041bb78a": "PLANNER-1506 Significantly improve performance of cloning (#2674)",
  "6e820595": "CS-B: Improve performance of groupBy (#2631)",
  "95bb7ec2": "PLANNER-2888 Add suggestions to fail-fast messages",
  "3ddedca8": "PLANNER-1541 Give a hint in property accessor fail-fast",
  "3b669f24": "PLANNER-2808 Improve performance of list operations in moves (#2478)",
  "cd2d66ae": "CS-B: Marginally improve fact manipulation performance (#2280)",
  "1ebb8dab": "PLANNER-2839 Don't fail fast on evicted Drools facts (#2279)",
  "76bf0d14": "Improve score director config fail fast",
  "2ccfce9e": "PLANNER-2787 CS-B: Improve join+ifExists performance (#2187)",
  "ca3d18fc": "Improve performance of some examples (#2137)",
  "913caad7": "CS-B: Major performance improvements to indexing (#2130)",
  "f8788ea3": "PLANNER-2760 Make MemberAccessorFactory cache thread-safe (#2125)",
  "809c5939": "CS-B: Improve performance of ComparisonIndexer (#2086)",
  "5f77e750": "PLANNER-2702 Improve CS-B join performance by not storing maps on the right (#1986)",
  "b9867f37": "Improve nqueens CS-B performance by further 10 % (#1930)",
  "2c130a8d": "PLANNER-2675 CS-B: Improve joiner performance",
  "f82b847e": "Improve a fail-fast message",
  "b10eeb13": "PLANNER-2647 Improve performance of SolutionDescriptor (#1809)",
  "a6373954": "PLANNER-2641 Fail fast on native DRL + cleanup (#1797)",
  "440a364c": "PLANNER-2625: Do not fail fast if termination is configured per benchmark (#1766)",
  "7986661c": "PLANNER-2569 Improve performance of disabled constraints (#1656)",
  "72d09e8b": "Marginally improve CS performance by caching constraint ID (#1628)",
  "d3387a14": "Combine the first/last/consecutiveFreeDays constraints to improve performance (#1527)",
  "89489657": "PLANNER-2485: Fail fast if KieBase properties are set in Quarkus (#1528)",
  "f757a4d1": "Improve performance of Constraint Streams on select use cases (#1523)",
  "f9ae3909": "Improve performance of the experimental collectors (#1513)",
  "dca4e49a": "PLANNER-2504: GIZMO - Make final fields non-final in Quarkus; fail fast in plain java (#1505)",
  "5513b889": "PLANNER-2476 Improve performance of SubChainSwapMove (#1462)",
  "ddca0b3c": "PLANNER-2478: Consecutive Intervals Constraint Collector: Add breaks and improve performance (#1417)",
  "26378e28": "PLANNER-2399 Improve performance of CS-D groupBy (#1276)",
  "b9293427": "Fail fast on null planning ID",
  "34829781": "PLANNER-2372 Improve performance of CS-D (#1220)",
  "b19b2d70": "Fix fail-fast that triggered unneeded failures for a @PlanningId use of school-timetabling's Room class (#1128)",
  "5e1555e5": "PLANNER-2297 Fail fast if XML schema does not exist",
  "ca6c4ae9": "PLANNER-2268 Improve CS performance of Machine Reassignment",
  "e4321683": "PLANNER-2003 Improve performance of a single groupBy() (#930)",
  "e5012ceb": "PLANNER-2174 Wildcard types in solution property collections wrongly trigger fail fast (#945)",
  "5eeb8b7a": "Improve CI performance by caching local Maven repo (#932)",
  "5277ce4d": "PLANNER-2011 Somewhat improve Examination Constraint Provider performance (#814)",
  "35ee1646": "fix build: checkstyle's cacheFile",
  "2146dc54": "Use DynamicTest for examples performance tests",
  "b395eb38": "PLANNER-1854 Fail fast on negative constraint match weight (#682)",
  "d0ef7111": "Address performance regression (follow-up to PLANNER-1565)",
  "fe416baf": "PLANNER-1365 extra fail fasts",
  "8a3fcf1c": "remove fail-fast that prevents default run + fix phaseEnded + simplify CB and VRP benchmarks to run them",
  "ebea9918": "PLANNER-1405 Fail fast when LookUp returns null",
  "71b15995": "PLANNER-1238 Docs about which moves are phase+ cacheable",
  "1895ad85": "PLANNER-1238 fail fast if move type doesn't support phase caching and used as such",
  "362c2f42": "Make performance tests parameterized by moveThreadCount",
  "b6591bc1": "PLANNER-1175 Fail fast if scriptLanguage is unknown",
  "f6d09eb2": "fail fast if EasyScoreCalculator or IncrementalScoreCalculator return a null score",
  "ac16d729": "PLANNER-935 Generated code instead of reflection to access planning variables faster",
  "d4602e6d": "PLANNER-706 fix performance drop caused by using computeIfAbsent method",
  "9c2c61a8": "PLANNER-882 movableEntityFilter configured on a shadow entity class should fail fast",
  "cb37f317": "switch statements need a default fail-fast",
  "f06d95ba": "Fix todo for fail fast of PartitionedSearchPhaseConfig",
  "4df5d6c8": "Review optimization algorithms chapter (#241)",
  "7777690d": "Use LocationStrategyType to decide on LocationStrategy. Fail fast accordingly.",
  "5dff861f": "Fail fast if PlanningId is null",
  "ca03463f": "Make SolutinDescriptor's cache thread safe",
  "79491281": "PLANNER-482 NonUniqueNotificationVariableListener to forgo unique notification requirement in favor of performance gain",
  "b81bfc92": "fail fast to avoid NPE",
  "91f31e7f": "PLANNER-591 This seems to improve performance too - QA's perf test can verify",
  "b98a7be1": "PLANNER-549 TemporalValueRange peer review: incrementUnit field name is ambiguous (ename it to incrementUnitType) + javadocs + add amount modulus fail fast",
  "04562dc8": "SolutionDescriptor: 'problem fact' != 'fact' (which includes entities too) + consistent field/method order (problemFact, entity, score) + fail fast for drools calculation without problem fact annotated member (but not when the facts are empty)",
  "d1994824": "Add todo for fail fast on global.getType() check",
  "8f79b568": "Small optimization in the SolutionDescriptor",
  "cd30799e": "typo cloud optimization value proposition",
  "85a852cd": "improve cloud optimization value proposition",
  "05b64b8c": "improve fail fast error message for chaining",
  "ed154a4d": "PLANNER-531 Fail fast when using stateless ksession",
  "1f60effe": "Value Propositions: cloud optimization",
  "6d9f34bb": "Revert changes to fix slow startup...",
  "e88dcea3": "Fail fast if ScoreDefinition.fromLevelNumbers() returns null",
  "132669d2": "Replace fooList.toArray(new Foo[fooList.size()]) with fooList.toArray(new Foo[0]) because the latter is ironically faster (because it doesn't need to null fill an array first). Proof in http://shipilev.net/blog/2016/arrays-wisdom-ancients/",
  "afbca212": "PLANNER-484 Fail fast if value range provider value type doesn't match the planning variable's value type",
  "7a575dc2": "PLANNER-401: Added subsingle data to the performance summary table (ACC and time spent tab)",
  "3cebde56": "short referenced cyclic: Extra fail fasts for PLANNER-315 (and preperation for PLANNER-252)",
  "a8818731": "Extra fail fasts for PLANNER-315 Two shadow vars updated by the same variable listener should not require 2 variable listener instances",
  "d07c8698": "PLANNER-381 Automatic annotation scanning should reorder entityClasses based on inheritance to avoid a fail-fast",
  "05295acd": "PLANNER-352 fail fast if they annotate on both the field and the getter of that field",
  "f95eca99": "PLANNER-352 javadocs for new plumbing + extra fail fast + rename field names to less abstract name",
  "93921250": "docs/training: optimization algo's layers",
  "5f7bd1de": "PLANNER-273 Benchmark report should mention logging level (because that can effect performance)",
  "a9ed83c8": "fail fast with nearby selection in original order with distribution parameters + default to linear distribution instead of beta distribution",
  "036a28d0": "BZ-1203264: the default BlockDistribution's sizeMinimum should be 1 (requires Jiri's commit that fail-fast if it's less than 1 too)",
  "03bf731f": "BZ-1197784: Optaplanner sometimes ignores different scoreDefinitionType and runs anyway. => It should fail-fast if Solution's Score class and the ScoreDefinition's don't match up",
  "611a9d1e": "prepare for BZ-1197784: fail-fast if multiple scoreDirectorFactory's are configured or if none are configured",
  "b98c5a64": "slides: scalability of optimization algorithms",
  "3d3e2b2c": "docs: improve chapter optimization algorithms overview",
  "e6f8f591": "Activate Supply and Demand system + remove TrailingMapSupport (performance gain on VRP)",
  "cb4d48e7": "CompositeMove now uses a Move array instead of a List<Move> for performance reasons.",
  "0d13c064": "inc score calc: replace maps and lists with arrays for performance (speed increase from 140k to 150k)",
  "198df63d": "make CheapTimeIncrementalScoreCalculator faster",
  "413265f7": "PLANNER-246 ScoreDirector's constraintMatchEnabled should be false when possible: performance speedup for DRL based score calculation + PLANNER-204 Solver should log environmentMode mode",
  "3f5de70d": "PLANNER-208 Fail-fast if global scoreHolder does not exist",
  "32545667": "Fix performance regression introduced in CR1 from Beta4 for extended entity's + SolutionDescriptor.getEntityDescriptor(...) has been renamed to SolutionDescriptor.findEntityDescriptor(...) => fix bug",
  "a69fe011": "Fix performance regression introduced in CR1 from Beta4 for extended entity's + SolutionDescriptor.getEntityDescriptor(...) has been renamed to SolutionDescriptor.findEntityDescriptor(...)",
  "85f20a40": "fail fast if incrementalScoreCalculatorClass does not implement IncrementalScoreCalculator",
  "8895eb5a": "Pillar swap selector: fail fast on entity dependant value range",
  "687a4603": "make PatientAdmissionSchedulePerformanceTest fast again (temporary workaround)",
  "399cda6c": "Refresh only the image on vehiclerouting and avoid image cache",
  "19c629c3": "faster cloner by caching Fields and Classes deep clone decisions",
  "b913e9fe": "allow to build a phase cached moveSelector that has a subselector that might have entityListDirty=true in steps.",
  "e9982062": "PLANNER-221 also apply no-cacheType logic to ValueSelectors",
  "0f7dc68c": "allow FromEntity valueSelector to work inside a phase cached changeMove",
  "b546eb2a": "PLANNER-221 Performance bottleneck: do not default EntitySelectors to cacheType STEP if the entity count is stable",
  "5665e703": "PLANNER-217 LocalSearch should not fail fast at startup if an immovable entity is uninitiazed",
  "f3e3ffb3": "docs Local Search improvements + PLANNER-186: no acceptor config should fail fast",
  "b32550c3": "Project job scheduling: make startDate and endDate non-null so sinks have an endDate even when not all allocations are initialized (faster incremental score calculation)",
  "8d60cce7": "Project job scheduling: faster incremental score calculation",
  "879ffe8f": "a queued entity placer must be at least cacheType phase",
  "87a433fb": "docs: even debug logging can slow down performance",
  "c600c971": "earlier planningEntityClass fail fast",
  "6d72743e": "don't hard code class names in fail-fast messages",
  "0560de53": "Fail fast on XStreamScoreConverter use for BendableScore",
  "db542472": "fail fast on pebkac problems",
  "00c6b4ce": "constructCloneCollection by instanceOf: fail-fasts + generics",
  "d2b0c6d9": "fail fast if variableDescriptors is empty",
  "4ce97d5a": "extract fail-fasts on ambigious config",
  "9f76c59d": "don't cache more than needed + remove alreadyCached variable + introduce Selector.getCacheType()",
  "1bb3e7cf": "PropertyAccessor: wrap PropertyDescriptor for faste rand easier access",
  "4863b7b9": "Fix performance and scalability issue by replacing a List remove() and contains() by a Set remove() and contains() + don't rely on equals/identity of entities",
  "0d5e9260": "fail fast on trailingEntities corruption",
  "f7c41b56": "improve fail fast",
  "4c7ecae6": "performance improvement",
  "9b177580": "Scalable construction heuristics: Placer: ValuePlacer fail-fast",
  "9a7518d9": "docs: fix recommendations on cached random selection",
  "c9d9b66f": "cc: benchmark jit vs cached",
  "b54385dd": "document that turning on trace logging slows down the app",
  "3df31716": "small logging performance increasing: don't calculate time spend if it's not going to be logged",
  "129f5204": "fail-fast when the config combines neverEnding without a forager that can handle it instead of going into an almost endless loop",
  "21239317": "clean up Selector fail fast messages",
  "2feed3f6": "clean up SelectorConfig fail fast messages",
  "845f0b93": "make nurseRostering benchmarker exit faster",
  "b6907cfe": "revert changes 'pas perform 3 times better with JIT' due to invalid benchmark (although JIT clearly works a lot faster, it requires the complex move to be jitted)",
  "a18dc756": "log trace messages when a cacheList or created or shuffled because either of those can be a bottleneck in some use cases (and these log messages are the only way to identify them). Before and after benchmarks prove that the logging has no noticeable performance impact.",
  "7f9e0583": "docs cached random selection",
  "ca0e47cf": "docs cacheType and selectionOrder",
  "91580b7a": "JBRULES-3615 sable solution writing with a flag to avoid OutOfMemoryError and performance issues on very large datasets",
  "c6a20e15": "make the performance tests reproducable: no random failures",
  "8df3c32d": "refactor: move cacheType before selectionOrder",
  "e4255317": "docs: jit and cached random selection",
  "b21f9911": "JBRULES-2213 log accepted vs selected move count and fail fast when things don't add up (like they do in TTP)",
  "82d47c6c": "finally fix the original + cached problem",
  "9574e32b": "change cacheType specs: default to cacheType JIT instead of inherited",
  "0a8c1efb": "ProbabilityMoveSelector : add it in config and deal with the conflict with shuffled (but not yet cached)",
  "2acebf43": "fail-fast on negative parameter",
  "5fdef914": "under cached selectors should be in original order",
  "ea24163e": "fail-fasts",
  "713155bd": "Move from package cached to common(.decorator)",
  "908769b5": "Rename package cached to decorator",
  "60a934b9": "clean up location of cachedEntityList",
  "3c58d14b": "hook in ShuffledMoveSelector +fix how cacheType is propagated",
  "7206ad8b": "Benchmarker: fail fast if an inputSolutionFile does not exist",
  "bba8726c": "Don't cache FactHandle from MoveFactory into Move, because there is no decent performance gain (and it complicates the code way to much - premature optimization is the root of all evil)",
  "f8f40457": "fail fast during infinite loop in the hack",
  "f3b31750": "fail fast when running into JBRULES-3371 as long as it's not fixed",
  "2b7c3610": "fail-fast when they misuse the wrong MoveFactory with chained variables",
  "fe3b20d3": "avoid random test failures due to timeouts on slow machines",
  "38c5a8e5": "TSP: nextCityId bug when clicking twice fast in real-time planning",
  "15de5a7e": "cached problem fact",
  "b897ec08": "remove failing tests obseleted by performance tests in DEBUG mode",
  "c324c1d8": "performance optimization",
  "14a603db": "performance improvement: don't recalculate the score if not needed",
  "063d1c14": "failfast instead npe",
  "8c3e8ec5": "benchmark statistic CALCULATE_COUNT_PER_SECOND (to analyse drools performance)",
  "1e53ac29": "JBRULES-2809 performance tests to check working memory corruption: nurse rostering",
  "b940b990": "JBRULES-2809 performance tests to check working memory corruption",
  "ae13eda9": "JBRULES-2912 Divide by zero exception on timeMillisSpend on a fast computer",
  "ad437b43": "JBRULES-2912 Divide by zero exception on timeMillisSpend on a fast computer",
  "16d12b71": "planner speed tests => with graphs on hudson we'll be able to check the performance of drools-expert & planner over builds",
  "7068f387": "fail-fast if startingSolution is null",
  "ac9641ee": "DEBUG mode is slower than before",
  "12c10c31": "more fail-fast on nonsense",
  "9863c568": "nurse rostering: EmployeeConsecutiveAssignment (20 times faster but has undoMove issue)",
  "44b25caf": "pas: kick some performance into the solution intializer",
  "3c03e43f": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "a8193a6a": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "55d77a73": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "633bbbd0": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "9fc3c654": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "5e672aae": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "c66e8bf4": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "c16dd075": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "eb68bf56": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "15943048": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "a421b1af": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "55ad336f": "javadocs (extraction from score_refactor attempt 1 that cannot be committed because its a lot slower)",
  "22f8966e": "performance comment",
  "0c0d5ea3": "usage of topicconflict for faster score calculation",
  "11bb4d4b": "calculate student size too (breaks performance even more...)"
}, "OsmAnd": {
  "f83140796": "Update libraries with androidx and disable Jetifier for faster builds",
  "dcdabd7f9": "Fix locking map by slow weather layer",
  "96988f2a7": "Add Online and Offline total cache size on Weather settings screen",
  "b9f305eff": "Recalculate cached properties of gpx-file after points change #16380",
  "0317bca8c": "Use application cache directory",
  "1a1472d0c": "Merge pull request #16163 from osmandapp/Index_cache_in_cache_directory",
  "eecfb869f": "Set index cache file path",
  "f0788b482": "Merge pull request #15798 from osmandapp/fix_remove_ped_fastest_route",
  "510a31ff9": "Merge branch 'master' into fix_remove_ped_fastest_route",
  "e6e769b54": "Fix remove pedestrian fastest route (short way)",
  "3cc9a74d5": "Improve the algorithm performance when use map location",
  "962e562da": "string optimization",
  "926aaf724": "Merge pull request #15413 from osmandapp/raster_maps_not_cached",
  "dbd0fc428": "Fix raster maps not cached",
  "4d618864d": "Implement cached route line for opengl layer",
  "eaca4a4b3": "Clear Mapillary cache",
  "35f848b59": "Add raster cache to Mapillary",
  "18d2455f1": "Fix slow loading network",
  "b2cbdcfbe": "Fix cached markers widgets",
  "6f11954a4": "Fix polygons cache, fix arrow/line/text to marker",
  "563c2ad51": "[ad] 'drawableToBitmap()' have been added to be able call without internal optimizations.",
  "b2ec7ba6c": "[ad] cached logic for 'alpha' and 'visible' params in the vector layer.",
  "4e7c4d095": "[ad] cached logic for 'alpha' and 'visible' params in the tile layer.",
  "4fd8e3b27": "icons are obtained from cache, fixed crash on screen rotation",
  "febcfe2b5": "Merge pull request #13556 from milan11/backup_performance",
  "1ced6dea3": "Improved performance of the backup method (saving of favourites backup as extra compressed file).",
  "81fb04a5c": "Necessary optimization that breaks tests",
  "d433516ec": "Use one cache for all Mapillary layers of Mapillary vector tiles",
  "a26e1b319": "Add native routing approximation as it might be faster for 4.1",
  "63badf535": "Proper cache of route info attributes",
  "5c52ae81b": "Fix UI performance in status screen",
  "ff1cbaed1": "Remove slowing and extra code",
  "2ea888a82": "Merge pull request #11824 from osmandapp/tiles_cache_optimization",
  "02e8a321e": "Don't delete visible tiles from cache",
  "ebfdf6438": "Fix issue with B and SS (requires performance review",
  "168ad216e": "Merge pull request #11597 from osmandapp/tiles_cache",
  "fcb625db8": "Add additional tiles cache",
  "2f7ab7e1f": "Merge pull request #11404 from osmandapp/dynamic_cache_size",
  "9f0eb27eb": "Merge branch 'master' into dynamic_cache_size",
  "95a1d5c9e": "Add clearing of tracks' cache",
  "1e809d791": "Add MapTileLayerSize for cache size",
  "a0e52f355": "Update bitmap cache",
  "a2b6a24e5": "Move update cache size to AsyncLoadingThread",
  "b1ba62898": "add check for same cache size",
  "fe40ec722": "Dynamic bitmap cache size initial commit",
  "ddd66a9f8": "Fix track width draw cache",
  "86b08b756": "fix cache and incomplete route offset",
  "3a800d252": "refactor poi cache db",
  "15ce3fa99": "Add incomplete stops to cached indexes",
  "7699e2061": "add reading of incomplete routes. Add cache - work in progress",
  "c02a7820f": "custom poi types cache db",
  "13be19873": "Added icons drawable cache",
  "c7b98dd0e": "Introduce cache and delete todo",
  "86e40f24e": "Introduce cache and delete todo",
  "c2b9cb103": "Merge pull request #8497 from osmandapp/avoid_cached_roads",
  "3217aae9a": "Added cache vars to aidl widget",
  "0ebbb2fd4": "Fix cached prefs reset",
  "a8b71688e": "Improve copy preferences performance",
  "cf8dec2c9": "fix crash when deleting points too fast",
  "f4bfa131b": "Fix cache evals",
  "160a0cba6": "Fix caches method",
  "40737935e": "routing optimization via cache. v1",
  "1492c6864": "Create define/edit menu item on the Download map->Local->Online and cached tile maps",
  "cc4621de2": "Fix fastest route and fuel efficient dependency",
  "4295bf89c": "Replace fast_route_mode pref by short_way for car based profiles",
  "c6be1a9c1": "fix for slow excluded id check",
  "39845c360": "Improve Transport reader algorith (make it much faster?)",
  "963acad11": "Improve Transport reader algorith (make it much faster?)",
  "2bf269451": "Avoid transport routes where walking is faster",
  "9557f7b9a": "Code optimization",
  "c013510f5": "Map cache done. Testing...",
  "82078bd94": "Added full english JS tts support (needs performance optimization)",
  "55232223a": "Added full english JS tts support (needs performance optimization)",
  "5f05110d0": "Replace cached location with current",
  "4d5d60b86": "Check if icon is already cached",
  "128d8a749": "Do not show cache size in wikivoyage options menu",
  "14b027d2a": "Show Picasso cache size",
  "682450dc7": "Update saved articles list after clearing cache or changing 'Download images' setting",
  "3bcde18d5": "Do not refresh cached data in constructor",
  "1a155356c": "Add the ability to clear wikivoyage images cache",
  "7f332a3e6": "Show cached images even if option 'Show images' disabled in Saved Articles list",
  "3ad7d2009": "Show cached images even if option 'Show images' disabled",
  "9c5ba471d": "Disable the ability to clear the images cache in wikivoyage for now.",
  "4ea5ab16d": "add options for icons cache and history",
  "a75154dbf": "Add some refactoring and optimizations to MapMarkersHelper",
  "79e2f1dde": "Future optimization for the subway icon",
  "1b43a910f": "Future optimization for the subway icon",
  "7dc6d1f42": "Show distance and direction from cached location in context menu",
  "dff5f4b90": "Use gray for cached location in context menu",
  "f922f9044": "Remove cache for synced items",
  "ba6394503": "Added mvt parser lib. Added mapillary vector tiles. Refactored resources cache.",
  "64db258bb": "test optimization",
  "b652687d3": "Temp fix of slow WPT search",
  "8d6c3ff07": "Add extra type for search to display results faster",
  "1f75f8f10": "Add extra type for search to display results faster",
  "52b7a8e50": "Merge pull request #2661 from osmandapp/faster-search",
  "b9fdcdf21": "Merge pull request #2644 from osmandapp/slow-search",
  "1843c9b85": "small code optimization",
  "2390c95a1": "POI multiselection: combine standard filters for faster filtering",
  "01ca3955e": "Adapter in GpxUiHelper.java now uses Icons cache.",
  "fb1bec7b7": "Made ContextMenuAdapter use icon cache.",
  "7f5e74da0": "Imports optimization",
  "0055c3edd": "New change for fast route recalculation",
  "1eb8da20f": "back out, looks like it has no impact on slow map start",
  "5534acff1": "test out issue with slow map start",
  "285fcf0e5": "Updated plugins incons and updated back performance on map",
  "d4c5e748e": "Never cache activities they could be not active",
  "23527a471": "Fix cache color hint",
  "c1e1c10f3": "Try to fix performance",
  "e2406d4ea": "Fix fast scroll",
  "4d7bc4a8a": "Add fast share intents",
  "4c8b83f13": "Fix fast route mode (latest bug)",
  "4fb713de5": "Fix sqlite bugs (slow startup & backward compatibility)",
  "0cf97ac82": "using ellipsoidal 'distanceBetween' instead of spherical haversine (MapUtils.getDistance) is a little more exact, also seems slightly faster",
  "c81ca3270": "Fix slowness during startup",
  "5182f7fb6": "Try to get sensor changes faster",
  "daa3deb00": "car mode optimization in touring view",
  "cdc02ab89": "Merge 2 routing mechanism and leave old for optimizations",
  "ed71b9142": "Introduce fast check for boundaries",
  "5f39f05ae": "Introduce fast check for boundaries",
  "e499a16e1": "Remove fast scroll",
  "2f74329bd": "cache areas of Rings",
  "e2877d351": "Rings simplify cache, remove obsolete methods and get rid of some unexpected behaviours",
  "0bacf1ccc": "Add fast scrolling thumb",
  "40da08cef": "rendering optimization: equal priority for equivalent roads at intersetions",
  "034c8b760": "Fix routing performance issue",
  "74177e542": "purge cached bitmaps on exit",
  "682028693": "purge Skia font cache on exit",
  "eb8b5b6ee": "Move faster when animating route. Try to get to each point in 2 steps.",
  "8fd0c4698": "fix the cachehitcolor for favorits and history lists in search",
  "129bdce53": "Small refactoring and do not clear bitmap cache often",
  "5c131240d": "make renderer debugging readable faster (2)",
  "4549713db": "make renderer debugging readable faster (1)",
  "050a00395": "Improve performance",
  "b8a12cbfd": "Improve transport search performance",
  "90372dc9e": "fix slow processing of streets, boundaries",
  "71baf5a7a": "Small improvements to Local Index Activity. Made search faster",
  "73c576af2": "optimizations",
  "989720ffa": "optimization csize",
  "c322bbd53": "optimizations",
  "00b355b01": "optimizations from http://developer.android.com/guide/practices/design/performance.html",
  "932e66aee": "Improve routing, make it faster and more expected",
  "a24123cbd": "- removing not needed code for disabling day/night option when night renderer is selected - fixed sunrise/sunset calculation, the calculated time was in local time zone but was parsed as GMT - sunrise/sunset calculation is slow to be called in short intervals as it is now after changes for full night mode. Added 5 seconds delay between recalculations, which is OK. It is something like your sunrise/sunset is delayed by 5 seconds :-)",
  "aed5ca28a": "native http support for multidownloader fix problems with broken connection (works much faster)",
  "caa6b1dd5": "implement geocache type for amenity and change geocache rendering fix issue 265",
  "a1a66cb62": "fix bug with rtree cache",
  "8c6d3d409": "remove old renderer (test performance gain is less 10%)",
  "833ab7e60": "implement continous vector rendering (to see image faster)",
  "255a5c3be": "fix performance",
  "11bdabcb8": "small performance improvement",
  "48f7a6367": "fix performance for address index",
  "c81d9dbed": "improve performance",
  "03b9d890b": "fix issue 156 improve performance by adding h2 database",
  "0cbabe4bd": "fix performance for hamlets in address inde",
  "42483aad8": "fix performance",
  "09dfc8244": "implement faster coordinates for rendering",
  "b726918d3": "1. fix performance issues 2. change touch layer map strategy",
  "2136c7487": "fixing performance issues"
}, "otter": {
  "7f80d17": "fixed issue #824 , remove lib/fastsql install",
  "5e02a88": "upgrade fastsql 973",
  "3c488da": "fixed issue #801 , upgrade fastjson",
  "3b910bb": "upgrade fastsql 366",
  "45519e9": "upgrade fastsql",
  "39ef9e3": "use fastsql"
}, "otto": {
  "cd0453b": "Fail-fast when attempting to subscribe or produce on non-public methods.",
  "234bebf": "Don't swallow handler exceptions: fail fast"
}, "paascloud-master": {
  "": ""
}, "packer-ng-plugin": {
  "fe5f85c": "cache market value"
}, "PageIndicatorView": {
  "": ""
}, "Paper": {
  "c7a82c1": "Clean up hopper optimization patch",
  "55a16d8": "Fix Varint21FrameDecoder cached length buf usage",
  "1654175": "[ci skip] Update performance problem issue template to account for new config formats (#7967)",
  "a8a01bb": "port Significantly improve performance of the end generation (#7919)",
  "286bd1b": "1.18 misc performance dev branch (#7368)",
  "17eb884": "Use a CHM for StructureTemplate.Pallete cache",
  "c904da6": "Offset spigot item optimizations instead of Mojang's (#6290)",
  "0af80ab": "Bump Paperclip and fix configuration cache issue",
  "8c78a82": "Cleanup unnecessary hopper optimization diff Fixes #6941",
  "e895403": "Improve horrible CraftChunk#getEntities performance (#5999)",
  "8986007": "Clean cache on upstream update",
  "864ef24": "fix profile cache mappings",
  "20d8812": "Fix CraftPotionBrewer cache (#5632)",
  "ccb217c": "Change cache keys",
  "808bd91": "Add fast alternative constructor for Vector3f (#5339)",
  "06900ae": "Fix username connecting with no texture being overwritten by usercache (#4970)",
  "821ce25": "Significantly improve performance of the end generation",
  "c712f2c": "[1.16] Improve performance of matching ingredients for shapeless recipes (#4694)",
  "e4d10c3": "Revert recent changes around player skulls using user cache",
  "5fc45f4": "Revert recent changes around player skulls using user cache",
  "01ce3cb": "Only complete from cache if ID is given (#3591)",
  "92d1247": "Improve light optimizations and fix bugs",
  "88a6882": "Fix unloading inaccessible chunks too fast regressing gen speed",
  "18c6865": "Optimize performance of object pool",
  "fc917d1": "Optimize Hoppers - Major performance improvement",
  "ceb824d": "Fix ChunkCache .getXIfLoaded to use the local chunks in the cache",
  "dda9680": "Optimize brigadier child sorting performance",
  "55e3501": "Set cap on JDK per-thread native byte buffer cache",
  "92d2907": "Multiple memory and performance optimizations (removing streams)",
  "c096fe1": "Port 20w15a Villager AI optimizations",
  "be7b406": "performance: Improve Activation Range entity iteration",
  "bacbd88": "performance: Many Entity Activation Range Improvements",
  "31bc07c": "Drop hopper optimization patch",
  "9ea1f9e": "performance improvement for CraftChunk.getEntities() (#2629)",
  "8260cdf": "Use getIfLoadedImmediately and not cached immediately for isLoa… (#2641)",
  "6ccf0bd": "Reimplement hopper optimization patch (#2388)",
  "160d1bc": "Only write to cached header in RegionFile if write potentially succeeds (#2294)",
  "693102c": "Fix performance regression in loadChunk(x, z, false) (#2211)",
  "4f47cbd": "Fix MC-151674 Close RegionFiles when they get evicted from cache",
  "af52f13": "Remove light optimization",
  "40e666b": "Add config to disable light recalculation optimizations",
  "2f8bdbf": "Fix BlockState hashCode optimization patch performance bug",
  "d1b6d22": "Improvements to Timings concurrency and lookup performance",
  "04b8268": "Improvements to DataFixers for performance",
  "aad2e08": "[CI-SKIP] Remove Trove and update to fastutul 8 on -api",
  "48b1b0a": "Optimize Spare Chunk loads to be removed faster",
  "cd6a5f3": "Remove Water optimization from the Light Optimizations",
  "87d59fd": "Prevent fluids from loading chunks - major performance boost",
  "2d7e5dc": "Disable Vanilla last chunk access cache, use ours",
  "ecf97dd": "Fix some performance regression in last patch",
  "a12c088": "add entity count cache #1207",
  "8175ec9": "Relookup Entity Save ID if was null during precache",
  "7bb3f45": "don't use a stream for entity counts (performance)",
  "0ae8b2f": "Missed a case where to remove a chunk lookup on TE removal (performance, not bug fix)",
  "c00a8a7": "Don't try to complete profile on creation from cache, only on complete()",
  "b4b6491": "Remove the immediate dispatch optimization and adjust thread executors",
  "84b0287": "Fix bug with hopper optimizations when amount > 3 - Closes #1011",
  "8835dcc": "Replace HashSet with fastutil's ObjectOpenHashSet in HashTreeSet",
  "11f2794": "Remove use of FastUtil for unload queue, very bad performance",
  "1f626a5": "Do not relocate fastutil",
  "919cb9d": "Update upstream CB, reduce version cache time",
  "8d4d85c": "Merge branch 'vemacs-cachedthreadpool-login'",
  "aaf6c3f": "Temporarily remove synchronization from UserCache optimizations In regards to GH-301",
  "db83abe": "Bring back an EAR optimization from 1.9.2",
  "5aa3237": "Improve Maps (in item frames) performance and bug fixes",
  "348e696": "Disable, Enable GPG signs as needed Pre, Post git am Disable GPG signing before AM, slows things down and doesn't play nicely. There is also zero rational or logical reason to do so for these sub-repo AMs. It's re-enabled (if needed) immediately after, pass or fail.",
  "11d1937": "Include Redstone Torches in the redstone physics event optimization",
  "cdd926c": "Re-add fastutil map to Chunk map. Amaranth confirmed its faster by 3x",
  "bb265b9": "We don't need to go fast anymore",
  "d8c6c41": "gottagofast",
  "c0e1410": "Fix pom to be compile instead of provided for fastutil",
  "c92ce02": "Move fastutil from a patch file to a library, and improve EAR",
  "9bebf86": "Merge pull request #163 from cybertiger/region-file-cache",
  "af65eaa": "Sanitise RegionFileCache and make cache size configurable.",
  "4b35a6d": "remove blockstate cache patch",
  "3074851": "Setting the cache is important to access a cache",
  "816fcce": "Fix skull cache case bug",
  "04daf84": "Update tick limiter removal and TE/E removal optimizations",
  "19619f8": "Remove an unused list of TileEntities slowing down removal",
  "6d0a86a": "Use the server usercache for player heads",
  "060c59e": "SPIGOT-1050: Add a missing case in the disable usercache saving option",
  "4d70f42": "Unload client chunks + only cache whole chunk maps",
  "5ceee0e": "Fix liquids stuck in fast drain loop",
  "461353e": "SPIGOT-522: Remove the global api cache option",
  "25c5c2c": "Implement performance improvements from the EMC-CraftBukkit fork See the individual patch files for more details",
  "cab333b": "Rebase (Update) from upstream SpigotMC Don't send requests of every player was found in the global api cache SpigotMC/Spigot@841270ff1ee8f22fe9d83f7e1c25325882c4930b Correctly set the response code for the cached lookups and return the ... SpigotMC/Spigot@f170b7899c0351a4230cd73820280a1afb051053 Don't try and re-set the global api cache on reload SpigotMC/Spigot@b410a00a66a78fb6c908af13a29f9881933d5dac Use a compile time sneaky throw hack. SpigotMC/Spigot@508462b96b96b9ac5881c188829563c56b2ecc69 Fix a missed rename in WorldGenGroundBush SpigotMC/Spigot@0614d8fae98c9f4dd17ae77f2bccaec763838478",
  "a245892": "Remove brewing stands from the TE optimizations as well Possible conflict with CB wall time patches?",
  "31d35e7": "Update TileEntity optimizations (again again) ... hopefully less often now",
  "169c67a": "Update with latest TileEntity optimization changes",
  "d95ac58": "Configurable hanging tick EntityHangings make a somewhat extensive calculation ever 100 ticks to check if they should die (obstruction etc). This patch makes this magic number configurable, allowing server owners to pick how often they want EntityHangings (e.g. ItemFrames) to tick. Higher values may provide a performance boost for Hanging-heavy servers.",
  "8c8c10c": "Configurable speed for water flowing over lava Higher values = Slower water movement = better performance http://hastebin.com/axuzaralas.vhdl",
  "7d802ab": "Temporarily remove the better water lighting updates patch while we ensure there are no performance or implementation issues Specifically around non-water fluids",
  "df10dcf": "Update from upstream SpigotMC Set the minimum max health attribute value to 0.1 SpigotMC/Spigot@d3b9fa0d1f24aeb5fa94e3b4056d54c99cd18893 Add an option for a global cache for any request on Mojang's api SpigotMC/Spigot@3452c620df79bff2530583b235d3957f3109ca4e Handle cases where the api fails to return a profile SpigotMC/Spigot@6a6eff33197004ec4296f93a9f2220da855dd4c3",
  "4aef560": "Update from upstream SpigotMC Remove defensive copy in EAR SpigotMC/Spigot@f1ba1f6c074ef746b7f6c2be2e72c4542dacd8bf Make 'moved wrongly limit' configurable SpigotMC/Spigot@f7ab380e16dd0d70b91ccb7c7541066829799b0f Fix null Tile Entity Worlds (we already had this) SpigotMC/Spigot@b271cdbfa06356d6940a5e5bd204ce5718ce545c Fix slow tab complete for some commands SpigotMC/Spigot@f3b7952c73c1fff1e167fbf0bd96d36c09aeb198 Only suggest ops to deop and remove whitelist add case entirely SpigotMC/Spigot@0e1fcfbe70c2eb64c6649a02edbd874eeda1d734 Allow tab complete for /whitelist add SpigotMC/Spigot@27f8aa22bd071568fe08d50d8fe1430421c7d4c3",
  "16cc0a6": "Upstream - cache heads because Mojang rate limited the session servers",
  "c87d2ff": "Upstream - Fix slow 'loading libraries'",
  "a9bcec2": "Improve LongHash performance - take #2",
  "0dc2b96": "Revert 'Improve LongHash performance.'",
  "1705259": "Improve LongHash performance.",
  "170aa26": "You're never gonna win, are you. People want bugs as a result of increased performance fixed, but then they want more performance as a result of bugs fixed. This reverts orebfuscator back to being threaded, and thus more performant, but unsafe.",
  "4864fd1": "Sacrifice oreobfuscator performance for safety and reliability.",
  "feacfb9": "[Experimental] - Enable compressed bulk chunk cache.",
  "202b1fd": "Implement a compressed chunk cache. This still needs a lot of work to figure out a good mechanism for looking up previous chunks, however at the moment when coupled with a high bulk chunk limit, it can be effective for solving lag issues.",
  "6eefe4e": "Allow configuring of player sample size, and default the sample to 12, the same as Vanilla. This has some performance overhead, as we have to shuffle the list each time, but this is better than the server displaying as offline!",
  "af480b8": "Revert previous change to clear chunk list on the end of each tick, make it configurable instead. Whilst the new behaviour was technically correct as it prevented the possibility of the chunk tick list actually increasing over time, it introduced a few issues, namely the fact that it slowed growth to unreasonable levels, and interfered with the values which server admins have finally tuned, and come to enjoy over the last few years. If it is absolutely essential that growth be halted and ticking reduced as much as possible, the config option is there for power users. If we wish to 'fix' this by default in the future, a new chunk ticking algorithm, which actually has meaningful config options should be designed.",
  "184ccfa": "Remove slow and complex pipelining and make our own packet writing system. Speed glorious speed.",
  "2005106": "Rename next tick list performance patch",
  "6033d89": "[Testing] improve oreobf performance / potentially fix errors (reverse-merged from commit 1d56399e1688b8947939f26783aecfef51bdd6f6)",
  "1d56399": "[Testing] improve oreobf performance / potentially fix errors",
  "5aa5d16": "Add javassist depend for better performance",
  "8a03556": "[EXPERIMENTAL] Take #3 at an even better / faster buffering system, use at own peril!",
  "bb34dba": "Take #12312 at faster encryption - a brave soul who doesnt mind a minute or 2 of downtime should try",
  "c8b552e": "Revert 'Use blazingly fast encryption.'",
  "3d85d6b": "Use blazingly fast encryption.",
  "7ae39f3": "Use release Netty to avoid performance regressions.",
  "cb11c55": "Add volatile to be sure the JVM wont cache the value",
  "d212863": "Implement an uber efficient network engine based on the Java NIO framework Netty. This is basically a complete rewrite of the Minecraft network engine with many distinct advantages. First and foremost, there will no longer be the horrid, and redundant case of 2, or even at times, 3 threads per a connection. Instead low level select/epoll based NIO is used. The number of threads used for network reading and writing will scale automatically to the number of cores for use on your server. In most cases this will be around 8 threads for a 4 core server, much better than the up to 1000 threads that could be in use at one time with the old engine. To facilitate asynchronous packet sending or receiving (currently only chat), a cached thread pool is kept handy. Currently this pool is unbounded, however at this stage we do not need to worry about servers being resource starved due to excessive spam or chat. == Plugin incompatibilities As a side effect of this change, plugins which rely on very specific implementation level details within Minecraft are broken. At this point in time, TagAPI and ProtocolLib are affected. If you are a user of ProtocolLib you are advised to update to the latest build, where full support is enabled. If you are a user of TagAPI, support has not yet been added, so you will need to install the updated ProtocolLib so that TagAPI may use its functions. == Stability The code within this commit has been very lightly tested in production (300 players for approximately 24 hours), however it is not guaranteed to be free from all bugs. If you experence weird connection behaviour, reporting the bug and steps to reproduce are advised. You are also free to downgrade to the latest recommend build, which is guaranteed to be stable. == Summary This commit provides a reduction in threads, which gives the CPU / operating system more time to allocate to the main server threads, as well as various other side benefits such as chat thread pooling and a slight reduction in latency. This commit is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported license.",
  "72acec7": "Move tick loop changes to own patch with a few optimizations.",
  "22bb4da": "Sync free, but still safe reference cache for chunk loading."
}, "parceler": {
  "e65a91d": "Added AutoParcel and AutoValue performance tests",
  "b1953be": "ParcelableAnalysis contains a cache that should be saved for the lifetime of the processor.",
  "570fa7b": "Added Boolean ReadWriteGenerator based on int rather than boolean[]. Reworked child Parcel to generate in-place serialization. Added performance application.",
  "2c71518": "switched to ASTJDefinedClassType to identify package for invocation builder optimizations"
}, "pentaho-kettle": {
  "9efda145": "[BACKLOG-36581] Further optimization for the case where no escape characters are used; searching for and replacing the empty string '' within a given string is a waste of resources.",
  "4a0ae5fd": "[BACKLOG-36549] File cache was being accessed when opening the dialog after saving a file, and the cache had not been updated to reflect the new file. Cache is now cleared for the parent directory when saving a file so that it shows up later. Also corrects an issue with filtering repository files when accessing the cache.",
  "8c95f5d8": "[BACKLOG-36514] File type filter not being applied to files read from the cache.",
  "6608cdbe": "[PDI-18668] Fix for not using the cache when the filter is selected",
  "9e203c01": "[BACKLOG-36366] Show a busy icon when the file dialog is busy loading the list of files (e.g. when accessing slow cloud services).",
  "087ca7d7": "[PDI-19578] Introduce property KETTLE_USE_META_FILE_CACHE (default N) to control whether trans/job/step metas are cached when being loaded multiple times over the life of a parent trans/job. Cache is currently broken; variable space is not updated even if a parent parameter value has changed, resulting in undesired behavior.",
  "21c11aba": "[PDI-19378] - Pentaho 9.2 has much higher Voluntary Context Switches causing reduced performance",
  "7a31d4d2": "[PDI-19378] Pentaho 9.2 has much higher Voluntary Context Switches causing reduced performance - fix",
  "430e412c": "[PDI-19378] Pentaho 9.2 has much higher Voluntary Context Switches causing reduced performance",
  "0fd557b8": "[BACKLOG-19168] Introduce FileMetaCache to cache meta of sub-job/transformations to enhance performance when Connected to Repository",
  "69dddc10": "[PDI-18792] Performance of the 'Write to log' step when the 'Print headers' checkbox is activated 5x slower since 5.4 release",
  "c8fe0518": "[PDI-18792] Performance of the 'Write to log' step when the 'Print headers' checkbox is activated 5x slower since 5.4 release",
  "125f5fb3": "[BACKLOG-32437] Delegate PVFS file cache to specific vfs provider",
  "f7ee1e10": "[BACKLOG-32458] Refresh vfs browser cache on repo change",
  "3569085b": "[BACKLOG-32292] Clear file browser cache when job/trans runs",
  "f43673de": "[PDI-18397] Refreshing database connection tree on jobs and transformations causes performance issues in Spoon",
  "251b2c15": "[BACKLOG-31404] Update Microsoft Excel Writer step to improve performance when streaming using template (#6905)",
  "88d6af83": "[BACKLOG-29956] Added cache flag/checkbox so we do not access the da… (#6827)",
  "b78dfef0": "[PDI-17781] - Logging Registry is not cleaning up child loggers, resulting in decreased performance over time",
  "ca53239a": "[PDI-17755] Missing .languageChoice causes Text File Output step to be 150x slower to run immediately after Spoon install",
  "a74eaad2": "[BACKLOG-25694] As a Worker Node system admin I would like to see events with ETL execution completion time related to PDI Jobs/Services so that I can troubleshoot performance issues (#5803)",
  "d78f81d7": "[PDI-17505] GetXMLData step is 2-3 times slower due to change made for PDI-11018 (#5728)",
  "84be8f45": "[BACKLOG-22705][CLEANUP] GlobalMessageUtil optimizations and performance improvements",
  "0275c082": "[BACKLOG-22861] Changing variable name, elevating evaluation for performance (#5260)",
  "f8bea443": "BACKLOG-21889 Improve performance of TextFileOutput step when using split row functionality",
  "d74780d8": "[BACKLOG-22072] DET / DataServices not working with Stream Lookup step - restored info-sensitive cache keys for previous fields",
  "816f0a30": "[PPP-3892] - Use of vulnerable component com.fasterxml.jackson.core : jackson-databind-2.5.4.jar ,com.fasterxml.jackson.core : jackson-databind-2.3.3.jar,com.fasterxml.jackson.core : jackson-databind-2.5.3.jar",
  "39ff51b5": "[BACKLOG-22072] DET / DataServices not working with Stream Lookup step - getPrevSteps should also be using step meta cache keys",
  "5904f62f": "[PDI-16818] Improvements to RowMeta have slowed down again in 7.x+ - added cache invalidation on changing trans hop`s state",
  "5f9eb9b0": "[BACKLOG-20802] Implement fix for Text and Hadoop File Output step to improve performance when writing multiple files to a folder",
  "6a537007": "[PDI-16969] - Fix for step fields cache not being cleared. (#4833)",
  "1949dab6": "[BACKLOG-20794] - everytime a step changes, need to refresh step fields cache",
  "adc9506b": "[PDI-16818] - Fix performance issue",
  "9e6740df": "[BACKLOG-20407] - Replace cache version creation (#4697)",
  "f4d31a63": "[PPP-3888] - Use of vulnerable component com.fasterxml.jackson.core : jackson-databind-2.5.4.jar ,com.fasterxml.jackson.core : jackson-databind-2.3.3.jar,com.fasterxml.jackson.core : jackson-databind-2.5.3.jar - additional PR to remove transitive dependencies",
  "1e1f3e2a": "[PPP-3888] - Use of vulnerable component com.fasterxml.jackson.core : jackson-databind-2.5.4.jar ,com.fasterxml.jackson.core : jackson-databind-2.3.3.jar,com.fasterxml.jackson.core : jackson-databind-2.5.3.jar",
  "ee7cbe1d": "[PDI-16684] Every click on the PDI UI sending a request to the Pentaho Server cache was added for versioningConfiguration property",
  "4f13e760": "[PDI-2301]-Slave server monitor refresh freezes Spoon -Optimized LoggingBuffer( by using concurrent collections and streams) -Implemented local-temp-file cache for keeping statuses of stopped or finished transformations or jobs which significantly decreases carte response time and cpu usage ( especially for medium and large logs) -The saved log content will be alive during specified by user properties in kettle.properties ( By default 1 day) -The changes remove restrictions to saving limited number of logs ( It was 5000 lines by default before ) since statuses are saved as temp files, not in memory -Optimized SpoonSlave: -Disabled excess events( which called tran/job status request many times at one moment ) -Fixed memory leak. Before SpoonSlave saved all the carte ktr/kjbs logs in map (id,log) and never cleared it( even if it was removed ) . In case of large logs we catch OOME and Spoon crash. -Update slave view time is configurable now via kettle.properties (SPOON_CARTE_VIEW_UPDATE_TIME) -Fixed critical memory leak which concerns xml parsing( XMLHandlerCache ). The implementation of it is wrong and incomplete. XMLHandler ,which we use every time we need to parse xml, caches nodes(which may be large ones) and never clears it. Sooner(if we parse xml files) or later it causes spoon crashed (oome) .Reimplemented the cache by using WeakHashMap.",
  "0828e59e": "[BACKLOG-19342] make FastJsonReader fast again (#4514)",
  "bda167bf": "[PDI_16337]-Spoon db dialog cache doesn't update it's database interface after changing db type. Now after selecting and changing database type, db cache will hold and update the correct value of database interface",
  "1ec944bd": "[BACKLOG-15718] Added cache busting (#4141)",
  "2f4a54a0": "[PDI-16252] - Normalise Rows step performance logic fix (#3818)",
  "d27326de": "[BACKLOG-15784] Increase performance of data services for DET",
  "ca22e6b5": "[PDI-13987] “Text file output” step writes field to the file with different encoding (binary data with different encoding, lazy conversion) - update output Row and input Row meta for 2 and more sources - fixed writing encode for 'fast data dump' off",
  "5426ec74": "[PDI-12727] - Change ROWNUM<1 to 1=0 in OracleDatabaseMeta.java for better performance",
  "a4802f79": "[PDI-15635] - Changed implementations of collections, which are used in multithreaded environment im order to get proper synchronization and better performance.",
  "cbc0d8b7": "[PDI-15202] Enable cache on 'IS NULL' condition (DatabaseLookup step)",
  "97db7c75": "Revert '[PDI-15058] - Container dir as karaf cache dir'",
  "f5b2a717": "[PDI-15058] - Container dir as karaf cache dir",
  "745c7e10": "[PDI-682] - Replace StringBuffer with StringBuilder for performance",
  "ab6375ce": "[SP-2443] fixed the reference leak of cached objects",
  "475d4522": "[BISERVER-12905] Switching to a lazy version of the RepositoryDirectory to increase performance with large repositories",
  "e8a58bd6": "Revert '[BISERVER-12905] Switching to a lazy version of the RepositoryDirectory to increase performance with large repositories'",
  "e3a2d0af": "[BISERVER-12905] Switching to a lazy version of the RepositoryDirectory to increase performance with large repositories",
  "04fb2788": "[PDI-3314] - very slow database lookup if 'not all equal conditions' and 'load all rows at start' - implement a brand new cache with indexing - add tests - fix Checkstyle violations",
  "2b6d0413": "[PDI-3314] - very slow database lookup if 'not all equal conditions' and 'load all rows at start' - change DatabaseLookupData - introduce Cache interface and DefaultCache as its default implementation - copy existing code to DefaultCache - fix the rest to let it be compiled",
  "88e0ebbf": "[PDI-14611] - Improving RowMeta.clone() performance",
  "511eee0c": "[TEST] Removing JVM optimizations for sporadic unit test failures",
  "d630b149": "[BAD-215] Add Support for the Simba Driver - Some databases return different url according to parameters sent to them. - Need to clear cached DatabaseInterfacesMap in case some database plugins are changed/added/removed",
  "e214904a": "[BACKLOG-3790] Dynamically configured karaf instances, caches and ports",
  "e08d7a0b": "PDI-13780 - Database Lookup yields wrong results when preloading table into cache",
  "5d1bd015": "[PDI-13230] - Date conversion to Unix Timestamps 5X slower between 4.x and 5.x",
  "e7319b9c": "[PDI-13696] - Text File Input: deteriorated performance for compressed input",
  "3cb88872": "[PDI-12927] - Filter Rows performance issue",
  "9d715f51": "[BACKLOG-174] - The command line import utility in 5.0.0 is over three times slower than 4.4.0 GA. - Database - amount of separate queries objects to database is reduced by using batch mode - RepositoryExportSaxParser - uses the only builder during export - RepositoryImporter - get several small speed-ups - holds the only DocumentBuilder for creating DOM-documents instead of re-instantiating it each time - XMLHandler - now obtains external builders - 'final' modifiers of static methods are removed as they are meaningless - Import - improve readablitily a bit",
  "a4c65828": "[PDI-11344] - Blocking step poor performance because of not setting BaseStep.first to false - introduce test",
  "0a14d909": "[PDI-11344] - Blocking step poor performance because of not setting BaseStep.first to false - revert test as it should be placed in engine module",
  "1dc2a96a": "[PDI-11344] - Blocking step poor performance because of not setting BaseStep.first to false - introduce test",
  "ee10de4e": "[PDI-11344] - Blocking step poor performance because of not setting BaseStep.first to false",
  "f634fc43": "[PDI-12161] - Fixes for performance regression",
  "66ebf147": "[PDI-11565] - Modifying AuthenticationPersistenceManager to always register a NO_AUTH provider, KerberosUtil to supply principal, not use cache",
  "41f2c7df": "[PDI-8702] Text File Input step has a performance issue",
  "c77028ef": "PDI-11513 : Instaview on OS X Mavericks - processing is very slow between steps",
  "c3518207": "[PDI-8702] Text File Input step has a performance issue",
  "a8b27105": "PDI-11506 : As an ETL Developer I want to have a preload cache option in the combination lookup step",
  "dfde83a2": "[PDI-10094] Fix logging for Teradata fastload",
  "ecd2c1a5": "PDI-10897 : Using a mapping (simple) adds about 20% performance penalty Figured out that opening the mapping from the sample caused a problem. This does some code hardening.",
  "ce5707c3": "PDI-7102 : Data validator step can be very slow",
  "8c335080": "PDI-10651 - Using HashSet to cache used db metas during write out, adding db metas from the extra log tables",
  "a5282a4a": "PDI-10117 - Added logic to look for .kettle-ignore in folders while scanning for plugins. Any folder with this file will not be traversed. Changed plugin registry singleton to be created as part of the static initalization of the class, allowing for get instance to be unsynchronized, created ExecutorUtil to have a common place to get an ExecutorService so that the cached threads could be reused elsewhere.",
  "b5aa355a": "PDI-10244 : Unit tests in Eclipse are too slow",
  "9022195f": "PDI-10244 : Unit tests in Eclipse are too slow",
  "cd75c192": "PDI-7208: removed some debug logging. Also made a few optimizations relating to PDI-10123",
  "f7dc2718": "PDI-8588: Fixed TransformClassBase for (much!) better performance",
  "cd9e5848": "PDI-6771 : Sort-Step slow, bad performance with large sort size and pass only unique rows",
  "220e478a": "PDI-7968: Removed references to local-dev Ivy cache",
  "0aef1d96": "[PDI-7968]: Refactored the top-level build procedure. This includes setting up a separate local Ivy repository for developers building Kettle modules and plugins, and also using a common area for build artifacts (dependencies, classes, etc.) to improve performance.",
  "df10c3c2": "BISERVER-7789 - Use Platform TRUNK with Instaview - updating .classpath for new ehcache-core jar",
  "bcf464a1": "PDI-8334 : Group by step fails in a clustered transformation when no rows are coming in PDI-8231 : As an application and data integrator I want to have a JDBC driver to access Kettle transformation data (initial pushback optimization trial)",
  "0329a510": "PDI-8298 : When a transformation uses unique_connections the database connection is closed after the transformation finishes. This sometimes causes the following transformation to use the same connection which is then closed by the first transformation. PDI-8305 : The logging registry slows exponentially when a single parent has it's number of children increase in size ESR-2026 : Database dead lock when the same transaction is called from two different subjobs",
  "85cde016": "PDI-8228 - Improve memory usage and performance in JobEntryResult and JobEntryJob",
  "2201a30b": "PDI-7812 : As a Pentaho MapReduce User, I would like to be able to quickly open the transformation(s) used PDI-7988 : Improve performance of Kettle startup by caching jar file annotations PDI-7788 : As a web service consumer I want to have a plug-in system for Carte/DIS servlets + warning fixes",
  "f8b8b263": "PDI-7556 : Performance of the Vectorwise Bulk loader : investigate and implement faster load alternatives (UI look fix)",
  "5cb3ddea": "PDI-7556 : Performance of the Vectorwise Bulk loader : investigate and implement faster load alternatives",
  "f1cc99cd": "PDI-7855 : Use the Vectorwise COMBINE statement to truncate a table. PDI-7556 : Performance of the Vectorwise Bulk loader : investigate and implement faster load alternatives",
  "cb5f62d6": "PDI-7553 : Performance of the Vectorwise Bulk loader: String replacing is too slow",
  "0e250422": "PDI-6924 : Group By - Concatenate strings with ',' has lousy performance",
  "14f2e9cb": "[PDI-6662] - New OpenERP Object Input icon [PDI-6685] - New OpenERP Object Output icon [PDI-6719] - New OpenERP Object Delete icon [PDI-6684] - Updated the default output batch size to 100. 1000 seems like it is freezing and 100 is big enough for the slow update on the server. Also updated the API that fixed a data type conversion bug.",
  "ee438540": "PDI-5410: As a PDI developer I would like to be able to set the optimization level of the 'Modified Java Script Value' step. Fixed backwards compatibility bug when opening dialog. Fixed similar bug in step code.",
  "4dd1aa0c": "PDI-5410: As a PDI developer I would like to be able to set the optimization level of the 'Modified Java Script Value' step. Fixed potential bug where clearing out a variable from the execution dialog using spaces would cause a number format exception.",
  "2a73deea": "PDI-5410: As a PDI developer I would like to be able to set the optimization level of the 'Modified Java Script Value' step. Fixed logging message when default value is used- when optimization is specified as a variable that equates to nothing.",
  "d782f257": "PDI-5410: As a PDI developer I would like to be able to set the optimization level of the 'Modified Java Script Value' step. Also added code to the dialogs 'Copmpatibility Mode' selection event so the the step would be flagged as changed.",
  "dad62a98": "PDI-5315: XML: Create a new step that is capable of processing very large and complex XML files very fast -> Namespace",
  "56fb675d": "PDI-5315: XML: Create a new step that is capable of processing very large and complex XML files very fast -> Namespace",
  "7b0524fb": "PDI-5315: XML: Create a new step that is capable of processing very large and complex XML files very fast -> sample transformations",
  "e1cc6c50": "PDI-5315: XML: Create a new step that is capable of processing very large and complex XML files very fast -> test data",
  "57b21354": "PDI-2671 : Text File Output step is slower with lazy conversions enabled (only in special cases)",
  "b00018c3": "PDI-2671 : Text File Output step is slower with lazy conversions enabled (only when we're not trimming)",
  "c23d947b": "PDI-2671 : Text File Output step is slower with lazy conversions enabled",
  "8ce0830c": "PDI-5313: XML: Create a new step that is capable of processing very large and complex XML files very fast - dialog",
  "6db19998": "PDI-5313: XML: Create a new step that is capable of processing very large and complex XML files very fast - samples",
  "99a6eecc": "PDI-5313: XML: Create a new step that is capable of processing very large and complex XML files very fast",
  "13299a69": "PDI-5313: XML: Create a new step that is capable of processing very large and complex XML files very fast",
  "73094977": "PDI-5313: XML: Create a new step that is capable of processing very large and complex XML files very fast",
  "b315bdd9": "PDI-5313: XML: Create a new step that is capable of processing very large and complex XML files very fast",
  "c45d1621": "Small performance and conservative memory consumption tweak for the sort step.",
  "a15491c9": "[PDI-5410] - Allow optimization level to be overridden using variable.",
  "50d9337c": "Minor optimizations for efficiency.",
  "fa9aa96f": "[PDI-5135] [PDI-5148] Implemented equals/hashcode for UIRepositoryDirectory newly fetched objects in the cache can be matched with existing UI objects properly.",
  "1e396fc0": "[PDI-3230] save performance--removed server hits hooked to timer per graph",
  "0b448c79": "PDI-3230 *MAJOR* performance improvements if using kettle repository (in particular enterprise repository). assemblies Carte-jmeter.jmx core dbdialog engine engine-ext integration LICENSE.txt plugins pom.xml README.md Translator.bat translator.sh translator.xml ui utilities if repository supports caching of RepositoryDirectoryInterface (fully populated from root) we no longer do things like: loadRepositoryDirectoryTree().findDirectory() we instead call findDirectory() on the repository and let the repository implementation handle any possible enhancements/caching (the file and database repositories pass thru to old behavior essentially) assemblies Carte-jmeter.jmx core dbdialog engine engine-ext integration LICENSE.txt plugins pom.xml README.md Translator.bat translator.sh translator.xml ui utilities if a repository has shared objects we are paying a huge price for constantly reloading them for *many* operations sprinkled about the sources of kettle (we have a repository taking 5 seconds to perform this, and this is after an 11X improvement already in place) assemblies Carte-jmeter.jmx core dbdialog engine engine-ext integration LICENSE.txt plugins pom.xml README.md Translator.bat translator.sh translator.xml ui utilities we are now caching, depending on the repository implementation, sharedObjects for jobs and transformations, this has a TREMENDOUS impact on repository performance assemblies Carte-jmeter.jmx core dbdialog engine engine-ext integration LICENSE.txt plugins pom.xml README.md Translator.bat translator.sh translator.xml ui utilities a menu item has been added to the Tools -> Repository menu to clear the shared object cache (the implementation in Spoon will also reload trans for job depending on what is open)",
  "a654ea66": "[PDI-1704] - Patched performance enhancement to mimic older functionality (return type, etc...)",
  "6295d977": "[PDI-4764] Added range check around history table update to prevent an IndexOutOfBounds Exception. I went with this rather than synchronized blocks as the UI display can lag behind the execution without harming the performance of the transformation.",
  "2e9ceeea": "PDI-4841 - Step search feature is very slow on windows. By default BasePlugin types will search all subdirectories except their lib directories.",
  "bf5fb0a5": "PDI-3593 Dimension lookup/update: java.lang.IndexOutOfBoundsException on specific row numbers when cache is enabled, fixed applying patch provided by Jordan Ganoff",
  "010bba46": "[PDI-4724] Fixed BaseMessages.getString(Class<?>, String, Object...) correctly forward the class to the MessageHandler so the class's ClassLoader is used to look up the ResourceBundle if it has not already been cached.",
  "b5abd5b2": "PDI-2815: DB2 connections do not support batch updates and lead to heavy performance degradation",
  "ed1ae199": "PDI-2830 Allow for flexible optimization of JVM options for use with PDI (e.g. -Xmx, -server options, Garbage Collector, Excessive GC Time)",
  "8c154e51": "PDI-2830: Allow for flexible optimization of JVM options for use with PDI (e.g. -Xmx, -server options, Garbage Collector, Excessive GC Time)",
  "6fbb1c02": "PDI-2830: Allow for flexible optimization of JVM options for use with PDI (e.g. -Xmx, -server options, Garbage Collector, Excessive GC Time)",
  "18ae0e65": "PDI-4212 / ESR-426- More performances fixes for GetXMLData.",
  "08573052": "[PDI-4234] All clear DB cache options now fire the clear methods",
  "63126477": "[PDI-4234] Fixed method execution from 'clear complete db cache' menu item",
  "66268ab1": "PDI-4024 : error writing to performance log table",
  "12621321": "[AGILEBI-414, AGILEBI-410] Publishing refinements and model properties form performance improvements",
  "bb8ecd48": "PDIEE-166 : Clean up importer, use SAX and shared objects caching for performance reasons, organize imports, compile warning fix",
  "de28ea15": "[PDI-3745] Focusing password or username field based on existence of cached username",
  "09db88f7": "PDI-1638: As an ETL-developer, I want to check invalid values in the 'Step performance measurement interval'",
  "f4da0621": "PDI-3669 : Allow prevention of out of memory situations by setting a limit to the number of step performance snapshots",
  "193fab83": "PDI-3557 : cannot get logging to work with performance table (more code hardening)",
  "01c164f6": "PDI-3557 : cannot get logging to work with performance table",
  "f4e7185b": "[PDI-2840] Performance optimizations. Now scanning only one directory down from pluginFolder",
  "1cfb344d": "PDI-3081 performance improvements",
  "195fcd46": "[PDI-3081] added getJobAndTransformationObjects method that combines getJobObjects and getTransformationObjects; various performance tweaks to PurRepository",
  "ce2a742f": "port from 3.2.5 to trunk: Fix for PDI-3014 - numbers coming out of JDBC were BigDecimals that wouldn't divide properly. Enhanced divide methods to support by default 64bit precision with the option for custom MathContext. Note there is still a performance penalty to be had with doing even simple integer arithmetic using BigDecimals, but that isn't my call. I'm just fixing the regression. Needs unit tests.",
  "9460dc62": "port from 3.2.5 to trunk: Add progress tracking by incrementing the lines updated counter every time a file is finished processing. Removed a performance penalizing call to System.gc() that was put in for a very old bug Fix PDI-2118 - Doesn't apply filters for first rows after header.",
  "1e8ac133": "[PDI-2517] Changed AddXML step to omit empty values from XML result per Matt's suggestion to improve performance",
  "9c853122": "PDI-2325 : Cloning data rows could be faster",
  "a1fdd4c7": "PDI-2325 : Cloning data rows could be faster",
  "c8ffd2ec": "[PDI-2744] fixed: Error in database lookup with 'enable cache' and 'load all data from table' when using variables",
  "61925ecf": "PDI-1764: Small performance tweak",
  "c49fdd39": "PDI-2183 -- Ensure first log of performance monitoring accurately captures the number of rows processed.",
  "14279a31": "PDI-1634 : As an ETL developer, I want to improve the performance of the Dimension steps (Dimension Lookup/Update, Combination Lookup/Update)",
  "bbe40b08": "PDI-2100 - Enhancements to 'Replace in string' step 2 to 3 times increase in performance Also found and eliminated a possible IOOB error if creating more output fields than the row values array overallocation can handle",
  "86e0c17a": "PDI-2046 - Make sure all rows stay in cache if the option for load all rows is enabled and an old value for cache limit was specified.",
  "57ab1d7c": "Simple optimization -- change getLine() method of TFI to use StringBuilder instead of StringBuffer",
  "84719020": "DetectLastRow: small optimizations + synchronization.",
  "90203d78": "PDI-1618: DB Lookup : add a checkbox: load table data into memory - slow performance depending on hit ratio",
  "fd5cd715": "Add delete of previous .dmg disk images to the macapplication target. If they aren't deleted each consecutive build becomes slower because it recursively includes them in the new image.",
  "b8fe6dfa": "Fixed a forgotten break in a case... no issues out of this - only cleaner code and a very little bit performance gain.",
  "4f72e3a7": "PDI-524 : DB Lookup with caching enabled causes excessive CPU utilization and continually slows thruput on large datasets (Also do between)",
  "d190e2c3": "PDI-524 : DB Lookup with caching enabled causes excessive CPU utilization and continually slows thruput on large datasets",
  "6f9a1c99": "PDI-524 : DB Lookup with caching enabled causes excessive CPU utilization and continually slows thruput on large datasets",
  "c7c5f7cc": "PDI-1005, PDI-886 UI tweaks for performance monitoring",
  "5ffcc6bd": "PDI-969: Metadata for Oracle, Hypersonic and Generic databases are not cached",
  "0dac91c4": "Probable fix for PDI-758 : Using certain VFS filesystems such as zip,gz leaves uncompressed files behind indefinitely in $TEMP/vfs_cache",
  "35cdba8f": "PDI-760 : Spoon : it's slow to switch between a job and a transformation",
  "ce40fd12": "PDI-782 fixed NPE when attempting to disable cache by setting it to -1 as described in user guide",
  "2769b673": "PDI-781 : Merging data with widely varying data volumes causes a performance bottleneck in any step (fix for stalling issue)",
  "b85b6166": "PDI-781 : Merging data with widely varying data volumes causes a performance bottleneck in any step",
  "2e040604": "change label ebst and fast compression zip compression french translation",
  "6a48dc17": "PDI-42 : first code in the form of step performance snap shots",
  "accb9a7b": "Apply patch for PDI-660 : optimization of RegexEval",
  "8347c78a": "getXMLData : Make it faster...",
  "fbbb8b2f": "Moving out the performance test code to the Kettle-performance codebase",
  "1447924e": "Fix for PDI-561 : Dimension Lookup / Update : performance problem because of logging oversight",
  "91aacb5a": "Fix for PDI-512 : handle nulls in a better way in text file output using fastpump.",
  "79fdd32f": "SimpleDateFormat threadsafe optimization in Log4JKettleLayout",
  "b7424973": "PDI-453 : Unzip files is too slow",
  "c4cd971a": "Improved fix for PDI-411 and PDI-363 : don't read all attributes, only those for the specific database id. This should be a lot faster in larger deployments.",
  "d311801c": "Extra input field for PDI-346 - Sort data read with lazy conversion is too slow (forgot to commit)",
  "d54eff41": "Fix for PDI-346 : Sort data read with lazy conversion is too slow (convert data automatically inside of sort step)",
  "58f6c7db": "Workaround for PDI-346 : Sort data read with lazy conversion is too slow",
  "8efed579": "Workaround for PDI-346 : Sort data read with lazy conversion is too slow",
  "e5ac0b62": "Backward compatibility fix: we need to try and do a left trim on integers because the default is to add a space as a plus sign. Calling the trim() method is fast if there is no space in front of the number. We're only doing this for numeric values where the trim-type is not set. Also fixing a problem in Repository: PDI-304 : values where always found with id=0. Additional checks where needed for database.getOneRow()",
  "140c1c8b": "Fix for PDI 275: Dimension lookup throws NPE after database cache is cleared",
  "199a6221": "Fixing preview rows race condition, improved performance Re-enabling variable support in TableView fields Made default rowset size larger again.",
  "0f6600de": "PMD sweep, small optimizations",
  "705d2bfc": "PMD sweep, small optimizations",
  "78745af6": "PMD sweep, small optimizations",
  "b1d26a4a": "Start of PMD sweep, small optimizations",
  "b6ee555e": "Small optimization in cvsinput",
  "3d73d968": "v3.0.0 : Fix for bug #6008 : indexing the non empty rows fixes performance problems when handling large numbers of rows in table views (text file input with 16k+fields)",
  "0811cd4b": "Moving to an ArrayBlockingQueue for performance reasons.",
  "6970b285": "Patch to allow fields to be re-ordered in the Select Values and Mapping Input steps. Field re-ordering was made optional to avoid performance problems down the road.",
  "758e3635": "Added code for faster fast-dump that should also support binary data",
  "641c05f2": "Further performance tweak: do not create TreeItems that are not going to be displayed because of a filter or if showFoldersOnly mode is on.",
  "87670f7c": "Changes to the unit tests to: Allow the size of the data used for performance tests to altered Check that the transformations prepare ok before they are executed",
  "9893a5c7": "retrieve all database attributes with a single database select to improve performance of repository explorer with slower db connections",
  "9eb504a6": "retrieve all database attributes with a single database select to improve performance of repository explorer with slower db connections",
  "e6a4d06e": "CubeInput / CubeOutput for 3.0 ... some optimization (variables support) follows for easier test case generation",
  "b10f7e68": "Trying to solve the mystery of the stalling performance unit tests",
  "2406ddad": "Adding 'compatible' flag to the ScriptValueMod step to improve performance: we don't have to create the old-style Value objects anymore.",
  "2a79cc33": "More performance tweaks and the first working 'lazy sort' example (input-sort-output)",
  "a8dff111": "Updates to the performance test transformation: made the RowSet buffers larger: better for 2.5 and 3.0.",
  "d440afbc": "A whole slew of performance updates and architecture changes in the recently ported steps.",
  "d117bad9": "Fixup for WaitForFile job entry... the file check would be cached which is useless (also backported to 2.5.1)",
  "a40b3d26": "3.0 : reworked the run testing framework a bit. Added DB lookup test Changed DB lookup cache strategy (same 10% fuzzy rule logic)",
  "3eab970b": "3.0 : Dimension Lookup fixes and initial load performance test",
  "708a7abd": "peanut optimizations",
  "b1fb0ac6": "More sorting 'run' performance test cases",
  "9647c9c7": "3.0 : more kick-ass performance tweaks to TextFileInput and SortRows",
  "c1e82ac6": "3.0 : Adding stream lookup, another clear performance winner",
  "e1dba717": "3.0 vs 2.5 Making performance testing easier",
  "2fe1e221": "Small performance tweaks to TFI in 3.0 tree",
  "d392bfdd": "First transformation run tests. No Spoon GUI rewrite yet, just the runtime. GenerateRows to Dummy is working very fast.",
  "59035443": "Fixed: Dimension lookup/update does not show '-1' for no cache",
  "ce5ba2c3": "Extra optimization for #5494",
  "3350bc99": "Fix for #5494 : rip out part of the optimization, and replace by another robuster one. Previous version would keep reading while it already saw all of its input.",
  "9412b3c0": "Created a RowSet replacement to improve performance in high speed environments. By Sven Bden",
  "42d2939b": "Subsequent fix for Bug - [# 5451] Dimension lookup/insert and cache size=1: endless loop with java.lang.OutOfMemoryError",
  "9ecd5d2c": "Fix for Bug - [# 5451] Dimension lookup/insert and cache size=1: endless loop with java.lang.OutOfMemoryError",
  "66d3dbba": "Applying performance optimisations by James Dixon",
  "05f07765": "BaseStep.stopAll() can call Trans.stopAll() and should do so. It makes life simpler. A stop is reached faster this way, right after the error occurs.",
  "2b4baef5": "Preparation for CRQ #4988 : text input file is now as fast/slow as before (maybe a tick faster). Split out filter functionality for later changes.",
  "e7db0fd2": "Also clear cache for DROP and CREATE table.",
  "405d07e3": "Small optimizations/removal of PMD violations",
  "33db7741": "Replace 'new Integer(i)' by 'Integer.valueOf(i)'. For values between -127 and 128 this is much faster (on the current Sun Java windows implementation), and the effect is the same (Integers are immutable).",
  "979446f3": "Small optimizations/removal of PMD violations",
  "4094d250": "Small memory optimizations",
  "9d4bfb99": "Even faster?",
  "fa9cf130": "Trying to solve a performance problem in the GUI updates when dealing with large log sizes of the transformations.",
  "54f0759c": "Goes a bit faster with compression",
  "82f517da": "A series of performance cleanups and patches. We also allow the thread priorities to be managed of not.",
  "3a1caeab": "Improving performance by GZipping the sorted data on disk, another patch by Biswa (Biswapesh Chattopadhyay)",
  "271d10a7": "More misc bug and performance fixes",
  "ac13f746": "Small performance fix for non-padded string exports",
  "6545b21d": "Let less we manage, the faster it runs, a tribute to the JVM...",
  "5a4b3e7d": "Job/Trans job entries: only load the metadata once for a big performance gain while looping.",
  "a2fa0bb9": "Updates to Enterprise DT FTP library, removal of ehcache lib",
  "96d1e9bf": "Fix for bug #2862 : make sure never to remove a RowSet unless it's actually empty. The code just became so fast lately that the race-condition came in place. I don't know who commented out the in.isEmpty() condition though. :-( It was probably done for testing purposes or perhaps because the person in question didn't see this race condition.",
  "6e3f7373": "Check in for CR #2428 : small code optimization",
  "4413a46a": "More cleanup in terms of performance.",
  "b7e9a438": "Check in for CR #2428 : removed not reachable code, resulting in small optimizations",
  "a6a7bd42": "More debug performance fixes for 'debug=' situations",
  "d4973fb5": "More debug performance fixes for 'debug=Messages.getString()'",
  "314cac80": "More debug performance fixes for 'debug=Messages.getString()'",
  "09963d1f": "More debug performance fixes for 'debug=Messages.getString()'",
  "02de6d65": "More debug performance fixes for 'debug=Messages.getString()'",
  "55000f07": "More debug performance fixes for 'debug=Messages.getString()'",
  "eca9c8f7": "More debug performance fixes for 'debug=Messages.getString()'",
  "1bf0511c": "More debug performance fixes for 'debug=Messages.getString()'",
  "754fb164": "More debug performance fixes for 'debug=Messages.getString()'",
  "a193d495": "More debug performance fixes for 'debug=Messages.getString()'",
  "3d5214aa": "More debug performance fixes for 'debug=Messages.getString()'",
  "78ecdddc": "More debug performance fixes for 'debug=Messages.getString()'",
  "d500bed4": "More debug performance fixes for 'debug=Messages.getString()'",
  "a4e69879": "More debug performance fixes for 'debug=Messages.getString()'",
  "e9f98f39": "More debug performance fixes for 'debug=Messages.getString()'",
  "1852fd0c": "debug=Messages.getString() fixes : waaay too slow.",
  "5253b16b": "Fixed serious performance degradation because of externalisation of debug messages.",
  "2a5bae6d": "Refresh even faster to draw out race conditions before going production.",
  "353d79fb": "Don't save in the cache if it's turned off in the options. Fix for bug #2382",
  "b50d4a81": "Don't save unchanged connections: faster",
  "013bc0dc": "Add a clear cache in the SQL Editor window.",
  "58d69046": "Change String to StringBuffer in combiInsert and setCombiUpdate. It's a bit faster.",
  "cbabbb23": "Oops, 0 = cache everything :-)",
  "a58850bb": "Improve cache label: in rows / 0=nothing cached",
  "14dc2c3d": "Small performance optimization [# 2191] Text file input: add functionality to read in mixed mode files",
  "c449e503": "Various cosmetical tweaks (linux) and performance upgrades",
  "aa2c9568": "Add clear() method to clear the XML Handler cache once in a while...",
  "d0cdd023": "modified for performance",
  "d7cf9349": "modified XMLHandler.java for performance",
  "0cec13a9": "Tom modified some codes for performance",
  "13b9dc69": "Tom modified some codes for performance",
  "57f1c378": "Fix for bug - [# 1870] Database cache is not cleared when running DDL",
  "b1ec6f43": "Taking care of performance of the getXML() methods: use StringBuffer retval.append() in stead of retval+=",
  "85f29abb": "Performance trick to get back results faster in large grids.",
  "4b213682": "Made the optWidth() algorithm optionally consider only the X first rows making it a lot faster with huge tables.",
  "21be1820": "First commits for variable nr of header & footer rows. Also support for wrapped lines. Nr Footer rows is not yet working. We need to cache these rows.",
  "c8e0622d": "Huge performance upgrade by removing the set of default values. These values are overwritten anyway by the parent dialog. 50.000 rows of 30 fields now show in under 1 minute on my laptop.",
  "550c5ab5": "Improve error logging, check, performance and bug fix for boolean values",
  "c5603178": "Make Kettle a bit more aggresive on fast machine by only waiting 1ns in case the buffer is full. For low I/O transformations this is more appropriate. We want to make this configurable in the 2.3 release.",
  "3bd0b6a2": "Change Request - [# 1355] GroupBy: cache rows so result can be added to original row. Implemented and basic functionality is tested, probably needs a bit more testing.",
  "6d6d800f": "Change Request - [# 1335] Dimension key caching First commits, added jar file for ehcache (stable version 1.1) Made Row and Value implement Serializable. Implemented private void readObject, writeObject"
}, "PermissionsDispatcher": {
  "be33ecb": "core: tiny performance update (#683)",
  "a036abd": "Clean up code and improved validate methods performance a bit.",
  "fc02449": "Make better performance loop iteration",
  "21f38ef": "Modify to cache target sdk version."
}, "Phoenix": {
  "": ""
}, "PhotoView": {
  "": ""
}, "physical-web": {
  "7699a36": "Merge pull request #700 from hayesjordan/cache-clear",
  "baa6118": "Deleting cache after changing PWS",
  "5746259": "Use PriorityQueue to improve performance in UrlGroup",
  "4f3f36e": "Re-order our cache refresh logic",
  "a9cf069": "[PWS] Add checkbox to bypass cache at /webui",
  "ea7285e": "Clear out old cached redirects",
  "76ee2c5": "Do not store invalid urls in the cache",
  "bc3195a": "Faster update of the beacon list, Update after the cache has been loaded",
  "c5427c3": "Merge pull request #259 from matthewsibigtroth/slow_metadata_response_fix",
  "1affd50": "slow metadata response fix",
  "08c0a52": "Minor optimization",
  "7dac69c": "Merge pull request #216 from dinhviethoa/long-term-cache",
  "c630a44": "Implemented long term cache: returns immediately cached response and fetch in the background the updated content"
}, "picocli": {
  "838d0e4": "Fixed isJansiConsoleInstalled performance issue",
  "bb209a3": "Optimize incremental builds and local build cache usage",
  "b196201": "[#1351][#1362] update RELEASE-NOTES for `completionCandidates` optimization",
  "9b7e181": "[#454] DOC improved diagram colors (force GitHub cache refresh)",
  "49813a0": "[#454] DOC improved diagram colors (force GitHub cache refresh)",
  "59fa0df": "[#454] DOC improved diagram colors (force GitHub cache refresh)",
  "1dbf134": "[#634] Bugfixes for detecting terminal size, cache the result and add debug tracing",
  "f6a11f6": "Reduce size of logo used in readme for faster loading time"
}, "PictureSelector": {
  "": ""
}, "pig": {
  "787ac17": ":bug: Fixing a bug. 指定spring cache type",
  "a0d096f": ":arrow_up: Upgrading dependencies. fastjson 1.2.83",
  "d1c40e5": ":recycle: Refactoring code. close #I58JCS on-the-fly cache creation broken in Spring Framework with release 3.10.0 #3033",
  "c1fc58b": ":sparkles: pig-common-security Code optimization remove @ComponentScan.",
  "dc4700a": ":sparkles: pig-common-core Code optimization.",
  "c92ef06": ":sparkles: pig-gateway Code optimization, convenient for the later Spring native.",
  "477addd": ":sparkles: pig-common-swagger Code optimization, support servlet, webflux, gateway at the same time",
  "96f3276": ":sparkles: Code optimization.",
  "8239900": ":arrow_up: Upgrading dependencies.升级hutool 5.3.10,fastjson 1.2.72 :fire: Removing code or files.移除自定义refactor netty版本",
  "b85bc1b": "fix: 潜在的空指针异常 这里的cache存在潜在的空指针异常",
  "5477ad1": ":lock: v2.7.5. 紧急修复 fastjson 安全问题",
  "5a35db4": ":up: 升级fastjson 1.2.68",
  "8f46ef2": "!41 【轻量级 PR】：:lock: Fixing security issues. #I1CAQP fastjson 1.2.67版本发布，Bug修复安全加固, Merge pull request !41 from izy473781821/N/A",
  "74f76e2": ":lock: Fixing security issues. #I1CAQP fastjson 1.2.67版本发布，Bug修复安全加固,"
}, "piggymetrics": {
  "aaf8e17": "add env file for faster docker-compose bootstrapping",
  "458ebe4": "browser cache control + js input fixes"
}, "pinot": {
  "ab0c27e9": "Add decoder initialization error to the server's error cache (#10773)",
  "9e4b5ade": "Enabling dictionary override optimization on the segment reload path as well. (#10557)",
  "48deafdf": "create segment zk metadata cache (#10455)",
  "fd08b906": "Adding fields to enable/disable dictionary optimization. (#10484)",
  "5a89491c": "[spark-connector] Memory optimization for GRPC data fetcher (#10209)",
  "bb123964": "[Clean up] Do not cache PropertiesConfiguration within SegmentMetadataImpl (#9952)",
  "a3bed7c0": "Fix the server admin endpoint cache to reflect the config changes (#9734)",
  "9698b3e4": "[hotfix]groovy class cache leak (#9716)",
  "aa6bf865": "Do not cache record reader in segment (#9604)",
  "28753426": "[hotfix] fix cache timeout again (#9614)",
  "75892a78": "Improve primary key serialization performance (#9538)",
  "e1aa147f": "add cache timeout (#9524)",
  "38ac70a9": "[Upsert] persist validDocsIndex snapshot for Pinot upsert optimization (#9062)",
  "8e1a87fe": "[hotfix] upgrade cache action version (#9469)",
  "fb4966b0": "[multistage] carry partition scheme for optimization (#9100)",
  "7e060fdb": "Improve StarTree traversal performance (#8570)",
  "52e5a2c3": "make tableNameMap always cache list of tables (#8475)",
  "ec95df48": "use lower level Joda API in transform function for 10-15% performance boost (#8414)",
  "9c1a490a": "Bugfix for order-by all sorted optimization (#8263)",
  "dfc7ea8a": "cache prometheus rules (#8241)",
  "0df84927": "faster metric scans (#7920)",
  "f27cf0b3": "Fix performance problem of base chunk forward index write (#7930)",
  "9ba03e42": "Fix thread safety issue and add cache to EmptySegmentPruner (#7828)",
  "eff53513": "cache JsonPaths to prevent compilation per segment (#7826)",
  "14c377d3": "Fix JSONPath cache inefficient issue (#7409)",
  "a875c99d": "Apply the optimization on dictIds within the segment to DistinctCountHLL aggregation func (#7630)",
  "92074f96": "[Cleanup] Precompute and cache query properties in QueryContext (#7608)",
  "0e49e74a": "use StandardCharsets.UTF_8 which is faster than looking up the charset and doesn't need to handle excetions (#7599)",
  "c31d1a14": "add license checker to linter and fail fast (#7475)",
  "58fcd5b7": "simplify association between Java Class and PinotDataType for faster mapping (#7402)",
  "4fd84be8": "Added guava cache package to common relocated packages (#6758)",
  "003442a5": "[TE]frontend - Fix the display for 'NaN' values in performance-stats (#6365)",
  "4ba7204a": "Fix table cache in pinot-broker (#6329)",
  "66e9394e": "Improve performance for distinct queries (#6285)",
  "50df5cb9": "Enhance forward index reader for better performance (#6262)",
  "fa7b0e4e": "Perf optimization for SQL GROUP BY ORDER BY (#6225)",
  "2a04de82": "[TE] rest-api enhance implementation to calculate alert performance (#6273)",
  "17a38733": "Improve performance of DistinctCountThetaSketch by eliminating empty sketches and unions. (#5798)",
  "df0f37c4": "Fix LocalPinotFSTest that fails on fast hardware (#5603)",
  "34531289": "Removes redundant DateTimeFormatter cache in DateTimeHandler (#5405)",
  "62799a32": "Improve GroupBy query performance by setting initial size for OpenHashMap used in DictionaryBasedGroupKeyGenerator. (#5291)",
  "df3b9040": "Fix travis cache (#5225)",
  "0d5b5e28": "Make text index query cache a configurable option (#5176)",
  "14743447": "Remove the construction of second bitmap in text index reader to improve performance (#5199)",
  "8dfa51af": "Lucene DocId to PinotDocId cache to improve performance (#5177)",
  "c9d88e47": "Fix the assumption of 'SERVER_' hostname prefix for admin endpoint cache in PinotHelixResourceManager (#5057)",
  "96a55cbc": "[TE][detection] Implement anomalies cache to speed up detection (#4900)",
  "e4c3b562": "[TE] Stop producing so many logs -- don't check for holes in the middle of timeseries for complete cache misses (#4890)",
  "2201a22d": "[TE] Generify centralized cache DAO and add certificate-based authentication support for Couchbase (#4862)",
  "e6e7bf92": "[TE] Use default centralized cache settings if exception occurs during init (#4845)",
  "81703be9": "[TE] Centralized cache proof-of-concept for anomaly detection via Couchbase (#4761)",
  "18a9f2fa": "Use guava cache for instance admin endpoints (#4678)",
  "e041ec54": "[TE] frontend - harleyjj/detection-health - UI for model performance (#4413)",
  "5e2a810b": "upgrade fastutil to 8.2.3 (#4325)",
  "86fe0347": "[TE] detection - configure cache look back from yaml (#4028)",
  "57368dd4": "[TE] backend - add an API to clear cache for DefaultDataProvider (#3936)",
  "0d981ab6": "[TE] detection - time series provider loading cache (#3842)",
  "0e7d6573": "[TE] frontend - aaronucsd/Added the new preview pills and performance header (#3792)",
  "f6c4d3bf": "Unify all JSON usage to fasterxml.jackson package (#3677)",
  "c25e5eaa": "Use ZkCacheBaseDataAccessor to cache instance configs in PinotHelixResourceManager (#3633)",
  "a7a927f2": "[TE] tracking - increase datasource performance output (#3615)",
  "8c845ed5": "[TE] rootcause - fix chunking offset cache (#3518)",
  "b745abba": "[TE] rootcause - faster heatmap via end-to-end topk limit support (#3211)",
  "0ef084d3": "Invalidate controller leader cached value if exceptions occur during segment completion calls (#3135)",
  "cd98557c": "Change SegmentMetadataImpl.getPropertiesConfiguration() so that we don't need to cache the properties configuration (#2992)",
  "b4efa3a2": "Purge task optimization (#2787)",
  "1c1a6a60": "[TE] cache - reduce refresh of deprecated caches (#2737)",
  "8738a2c5": "[TE] cache - replace scheduled reload with on-demand reload (#2730)",
  "d630ebd0": "Re-implement RetentionManager to not cache any RetentionStrategy or SegmentZKMetadata (#2726)",
  "9d1f0c91": "[TE] rootcause - use maxtime cache for aggregation loader (#2664)",
  "fe581d82": "Refactor DataBlockCache and DataFetcher for multi-value support and performance (#2610)",
  "fd7367d4": "[TE] Alert performance by application (#2291)",
  "92b4e178": "[TE] Add try-and-catch block to protect the initialization of cache loader. (#2123)",
  "e62d28b8": "[TE] rootcause poc - cache inconsistency fix on empty result (#2101)",
  "4ae951be": "Refactor Trace for performance concern (#2057)",
  "f079991c": "[TE] Decouple Pinot data source and cache loader for future extension (#2018)",
  "029ba084": "[TE] add default cache expiry 1 hour after write",
  "92fbeeeb": "Refactor DefaultGroupKeyGenerator for performance concern (rename to DictionaryBasedGroupKeyGenerator) (#1809)",
  "f2e5e974": "[TE] Remove mandatory whitelist, parallelize initial cache loads, improvements to admin, cleanup and more (#1732)",
  "b639ea03": "[TE] DataFrame setters and fastjoin (#1698)",
  "c68c42c6": "Removed all SentinelTests, refactor fastHll tests (#1645)",
  "093cea37": "Updating the table config cache timeout to 1hr (#1659)",
  "b486454b": "[TE] Monitoring performance counters (#1610)",
  "be492580": "[TE] Dataframe performance improvements (#1577)",
  "70143760": "Fix the issue where cache does not get cleared properly when setting fields in schema (#1488)",
  "6e43c210": "[TE] Changes to caches to handle external data sources (#1470)",
  "2fa9861b": "Refine performance evaluation method (#1353)",
  "7f8e9256": "[TE] Dataframe performance tweaks (#1341)",
  "afce0545": "Filter optimization to merge range predicates on time columns. (#1086)",
  "2178667d": "Filter optimization to avoid unnecessary predicate evaluation. (#1027)",
  "a79a8c32": "Add additional metrics around server query performance (#994)",
  "9e0b38d2": "Routing table rebuild optimizations/rewrite (#795)",
  "70a172de": "Remove pinot files from cache even tests failed (#815)",
  "8210882c": "Use Travis cache for builds (#803)",
  "41775d45": "starting cache loading asynchronously to reduce application start time (#792)",
  "670d77db": "Build an executable jar from QueryRunner for performance testing. (#766)",
  "8490641a": "Allow changing optimization settings per-query (#741)",
  "9454abe4": "Add multiple or equality predicate optimization (#728)",
  "254d96dc": "Add max weight limitation to ResultSetGroup cache (#729)",
  "a9f4d9c6": "Tool to measure performance of lookups on String Dictionary. (#710)",
  "39a4983e": "Using dashboard, dataset and metric caches to speed up queries",
  "fa3d75d4": "Adding caches for metric, dataset and dashboard configs",
  "a3fdbbfe": "TE: fixing timerange optimization (#573)",
  "dad58892": "Unify the package for Json related operations: Remove the remaining dependency to codehaus.jackson and move to fasterxml.jackson. This unification prevents the errors that are induced when processing Json objects using the mix of codehaus and fastxml's class, e.g., reading a json object of codehaus using an object mapper of fasterxml. (#544)",
  "b58295c6": "Improve inequality performance on sorted columns (#433)",
  "41f559a5": "Upgrade fastutil to 6.5.16 (#430)",
  "10027a1d": "Optimizing performance of splitting on time column. (#262)",
  "c0e20178": "Remove precondition check where it can be triggered per record, as it can impact performance. (#149)",
  "84a0dd4a": "[PINOT-3104]: StarTree: Enhancements and performance improvements. (#141)",
  "d1dedb4d": "Adding filter cache, dashboard cache, and easier startup setup",
  "e64a4fe1": "Adding filter cache, dashboard cache, and easier startup setup",
  "a0a9870e": "fix for Firefox heatmap tooltip, filter in title on contributors, tabular delta chart changes, utility refactor, header performance optim",
  "73ccdb42": "Moving cache initialization to CacheRegistry initialize",
  "0eb19e12": "Fix anomaly detector to correctly instantiate pinot client w/ caches",
  "d2ff241a": "Added collections cache with whitelist/blacklist, periodic load of collections, endpoints for cache refresh",
  "af9c8829": "Re-implementation of MCombineOperator for faster inter segment combining of group-by results.",
  "3a3ac2f8": "Fix some functional and performance issue in SegmentInfoProvider",
  "67582d06": "[PINOT-2840]: Re-write of aggregation group by operator, for performance improvements",
  "15fb8028": "Fixing bug with previous commit and further optimization to reuse docidArray across calls",
  "22d0f645": "ThirdEye Client+Dashboard: 1. Added ThirdEyeMetricFunction abstraction to separate argument expressions and derive raw metrics. 2. Added PinotThirdEyeClient and factory. 3. Added CollectionMapThirdEyeClient and ThirdEyeClientConfig to instantiate multiple clients from a file and map requests/collections to the appropriate clients. Removed serverUri parameter from dashboard since it is no longer required. Added config endpoints for reloading clients and viewing configs. 4. Appropriate test cases for key classes mentioned above. 5. Anomaly: Disabled KalmanTest (slow and no longer used) to speed up local testing.",
  "74677e9d": "Make pinot-perf depend on pinot-integration-tests so that we can reuse the test harness setup logic in performance tests",
  "5385cdd8": "Add special cases to handle specific group by scenarios (1 column with a small dictionary, fast aggregation when the entire block matches all rows)",
  "1b3515bc": "Add performance benchmark harness and dependency on JMH",
  "908b5e1b": "changes to thirdeye-anomaly: integration of scan statistics + performance enhancements disable twindow parameter search in stl-wrapper add support for overlapping monitoring windows add support for simulated online mode with arbitrary timeranges THIRDEYE-593 : Add thirdeye-anomaly function management server.",
  "24a73f43": "Greatly improved memory usage of segment creation, removed creation and retention of large amounts of boxed primitives, removed memory inefficient cache, removed inefficient binary searches, added missing assertion for unsupported data type, added logging of pre-index creation per-column statistics, refactored forward index creator interface",
  "dfd78e88": "DIsabling snapshot due to slow response time on abook",
  "666f4def": "[PINOT-1597] Improving the performance of Planning Phase",
  "a9b71395": "removing fastutil sets from segment creation",
  "058d5bae": "making read faster in realtime segment",
  "e8e6aa8b": "PINOT-1434: Adding performance benchmark driver, set up local cluster, uploads segments and runs perf queries.",
  "ba02062d": "time bucket optimization"
}, "pinpoint": {
  "2a732d7f": "[#noissue] Remove count in uri stat grpc proto, and add failure count column to improve performance",
  "0d5f13b4": "[#NOISSUE] add log for performance test",
  "731b63dc": "[#noissue] Fix spotbugs warning - performance",
  "bed813bc": "[#NOISSUE] add log for performance test",
  "0f49fdf9": "[#9052] Improve AlarmJob performance",
  "4c42e526": "[#8952] Replace guava cache with caffeine cache",
  "5feca800": "[#NOISSUE] cache name constant, fix typo in flink",
  "0a93351e": "[#NOISSUE] cache name constant, fix typo",
  "3a201f89": "[#8186] Replace Ehcache with Caffeine",
  "7f8d83c2": "[#8162] reloading app list clean cache",
  "127c253a": "[#8162] Improve cache coherence for multiple web-server",
  "57cb3b94": "[#8162] cache applications api on browser/server side",
  "0d2e3d11": "[#8088] Improve performance of IOUtils.toByteArray()",
  "a05c598e": "[#6821] Adds server map performance improvements as an experimental feature",
  "4f2a05f1": "[#7753] Improves performance of creating stream when executing ActiveThreadCount",
  "7263bce6": "[#noissue] Update billboard.js for the tooltip event performance",
  "9458390a": "[#noissue] Memory usage optimization",
  "e4194216": "[#6821] Improves server map performance",
  "9f6b560d": "[#7579] Improve the performance of finding active agents",
  "af34d283": "[#7169] Add cache and etag policy for static resources in Web",
  "94859f76": "[#noissue] Add build-plugins-module profile for build performance",
  "77dcc74b": "[#noissue] Build performance improvement in local profile",
  "dba2cfad": "[6359] Apply travis cache",
  "137391d8": "Bump fastxml.jackson.version from 2.9.8 to 2.10.1",
  "248d4630": "[#noissue] Tune UI performance",
  "10bc2751": "[#noissue ] add performance analysis report",
  "540c8168": "[#noissue] Fix potential NPE & Apply hostAddress cache",
  "801bf00f": "[#5672] Adds a function to warmup connection cache",
  "8e6697f9": "[#5672] Adds a function to warmup connection cache",
  "a59fd644": "[#5672] Adds a function to warmup connection cache",
  "0a4ede9f": "[#5156] AsyncId optimization",
  "bc91ce85": "[#4737] add writeconcern mapper for performance",
  "e940fb42": "[#4751] Update library - ehcache-core 2.6.9 -> 2.6.11",
  "d1b90e21": "add fastjson plugin",
  "b4e1fc58": "[#noissue] TCommandRegistry performance optimization - Replace unnecessary ConcurrentHashMap - Reduce memory allocation - pre-build index",
  "881fb4cc": "[#3399] Add HTTP status code - loop optimization",
  "e2fece21": "[#3167] Enum optimization - code cleanup",
  "b9356d9a": "[#3196] ActiveTrace optimization - empty case optimization",
  "2077e47f": "[#3196] ActiveTrace optimization - memory usage - object size - cpu cycle",
  "665e934d": "[#3167] Enum optimization",
  "19ffa4b0": "[#3167] Enum optimization - Reduce Memory footprint - Remove Array copy of enum.values()",
  "8230383a": "[#2584] Remove cache lock contention",
  "203fd549": "[#3096] Add arcus/memcached async on/off options",
  "206c6345": "[#noissue] string append optimization",
  "a9d8582d": "[#3014] Improved ThreadLocal performance - Reduce ThreadLocal access - Reduce ThreadLocalMap#Entry creation",
  "72caedc2": "[#2801] Add another layer of accept application cache",
  "36d1652c": "[#noissue] ExcludePathFilter optimization",
  "d71f4425": "bug fix - slow when deleting input value",
  "03d7d5ba": "#2187 Fail fast if trace/stat v2 tables don't exist",
  "3b91d885": "improvement scatter chart performance when realtime",
  "80a38986": "Add guide message in general configuration. - User configuration is stored in browser cache. Server-side storage will be supported in a future release.",
  "ad118f76": "add fastError, normalError, slowError, verySlowError",
  "12b252df": "Merge pull request #992 from emeroad/#985_endecoding_performance_optimization",
  "6b911fca": "Merge pull request #988 from emeroad/#985_endecoding_performance_optimization",
  "f718a06b": "#798 improve sql trace performance - add testcase",
  "72e939ab": "#798 improve sql trace performance",
  "539ab398": "Divide interceptor invoker methods to improve performance",
  "44273ea2": "Infinite circular scroll performance improvements. timeline click event bug fix.",
  "be3c8555": "Merge pull request #627 from jaehong-kim/arcus-memcached",
  "d251b16a": "Merge branch 'master' of https://github.com/naver/pinpoint into arcus-memcached",
  "887b825e": "performance - gap, depth",
  "3a6272eb": "Add no-cache meta tag",
  "5a6d441d": "Merge pull request #239 from jaehong-kim/api-cache",
  "36a07222": "add cacheable key & testcase",
  "917e9f1d": "apply cache(ehcache) for api metadata",
  "d9428a45": "#208 Improvement sql cache logic",
  "8c3f5175": "[#117] Improved MetadataHolder APIs. Added @CacheApi to mark cache target. Removed static initialization of ServiceType and AnnotationKey",
  "8ef1019c": "remove bad performance api, fix Interrupt state",
  "4b8ff499": "fast classSkip",
  "f73c47b7": "#119_filter_wizard_bug_fix - scope:true, node, link cache disable",
  "4fb4134d": "[#46] Add slow count checker for calle",
  "819a8720": "[#17] add checker(slowRate, errorCount, errorRate, responseCount)",
  "a91120de": "[#51] Api 파라미터 cache 해서 id만 전송하도록 수정 [#51] 관련 코드 정리 [#51] statementId cached args로 변경되어 테스트도 맞게 수정",
  "b84f7f62": "Merge branch 'netspider/static_resource_cache' of Pinpoint/pinpoint-web",
  "f51f92c4": "[강운덕] [PROFILER-62] sql cache 시 sql의 hashId를 key로 사용하지 않고, SimpleCache에서 발급 된 유니크 아이디를 사용하도록 수정함.",
  "2502c55e": "[강운덕] [PROFILER-62] sql cache 시 sql의 hashId를 key로 사용하지 않고, SimpleCache에서 발급 된 유니크 아이디를 사용하도록 수정함.",
  "566a849e": "[김훈민] Fixed #5 to support FrontCacheMemcachedClient and FrontCacheFuture",
  "40a15b2c": "[김훈민] Fixed #5 to support FrontCacheMemcachedClient and FrontCacheFuture",
  "3aa847e2": "[유치수] [web-152] static resource cache문제를 해결하기위해 script, link taglib 추가",
  "4ea98945": "[강운덕] [PROFILER-42] memcached lib에서 호환성 체크를 하여 2.x 버전의 memcached에서 인터셉팅을 수행하지 않도록함. - 해당 코드는 한계가 있음. future는 그대로 modifier를 수행함.",
  "88d2e406": "[김훈민] #37 memcached client 버전 체크",
  "6983dc27": "[강운덕] [pinpoint-thrift #2] serializer, deserializer의 threadlocal cache의 선언을 잘못했음. UDPReceiver수정, TCPReceiver도 threadlocal cache적용.",
  "0c6a8a45": "[강운덕] [PINPOINT-266] slot 타임의 경계를 정확히 처리 하지 않는 버그 수정, 1000초 까지 fast라면 1000초도 1000",
  "33533fa5": "[임대현] [NOBTS] transactionDao, IndexedDb -> WebSql -> Window cache 순으로 DAO 하기",
  "da2059a7": "[유치수] [NOBTS] emeroad.pinpoint에 slow 추가.",
  "c1919bbd": "[유치수] [NOBTS] demo에서 memcached, www.naver.com 호출 안함.",
  "a24b2a82": "[강운덕] [LUCYSUS-1744] cacheupdate부분 리팩토링, 별도 class로 분리함.",
  "73e9d6a0": "[강운덕] [LUCYSUS-1744] cacheupdate부분 리팩토링, 별도 class로 분리함.",
  "699fb728": "[강운덕] [LUCYSUS-1744] string cache api추가. jdbc connect시 string cache api 를 사용하는 것으로 변경. 최초 connect시 30개 connection이 생성되는 testcase에서 4k에서 2k로 데이터 사이즈 축소.",
  "81375e74": "[강운덕] [LUCYSUS-1744] string cache api추가. jdbc connect시 string cache api 를 사용하는 것으로 변경. 최초 connect시 30개 connection이 생성되는 testcase에서 4k에서 2k로 데이터 사이즈 축소.",
  "bd7f10fc": "[강운덕] [LUCYSUS-1744] string cache api추가. jdbc connect시 string cache api 를 사용하는 것으로 변경. 최초 connect시 30개 connection이 생성되는 testcase에서 4k에서 2k로 데이터 사이즈 축소.",
  "195e8281": "[강운덕] [LUCYSUS-1744] string cache api추가. jdbc connect시 string cache api 를 사용하는 것으로 변경. 최초 connect시 30개 connection이 생성되는 testcase에서 4k에서 2k로 데이터 사이즈 축소.",
  "37c06262": "[강운덕] [LUCYSUS-1744] string cache api추가. jdbc connect시 string cache api 를 사용하는 것으로 변경. 최초 connect시 30개 connection이 생성되는 testcase에서 4k에서 2k로 데이터 사이즈 축소.",
  "0fd2a38f": "[강운덕] [LUCYSUS-1744] string cache api추가. jdbc connect시 string cache api 를 사용하는 것으로 변경. 최초 connect시 30개 connection이 생성되는 testcase에서 4k에서 2k로 데이터 사이즈 축소.",
  "052ab303": "[강운덕] [LUCYSUS-1744] string cache api추가. jdbc connect시 string cache api 를 사용하는 것으로 변경. 최초 connect시 30개 connection이 생성되는 testcase에서 4k에서 2k로 데이터 사이즈 축소.",
  "d0f690d3": "[강운덕] [LUCYSUS-1744] cache의 초기화 사이즈 및 concurrency를 증가시킴/",
  "e88b789c": "[강운덕] [LUCYSUS-1744] cache의 초기화 사이즈 및 concurrency를 증가시킴/",
  "574b47a4": "[강운덕] [LUCYSUS-1744] arcus, memcached method검출시 검색 한계사이즈를 둠.",
  "4ba303a4": "[강운덕] [LUCYSUS-1744] arcus, memcached의 key 추출 로직을 compile time에 결정하도록 개선함.",
  "2846c7bd": "[강운덕] [LUCYSUS-1744] arcus, memcached의 key 추출 로직을 compile time에 결정하도록 개선함.",
  "3b6699be": "[강운덕] [LUCYSUS-1744] arcus, memcached의 api를 추적여부 설정가능하도록 함. key값을 추적여부 설정가능하게 수정. - arcus의 첫번째 string을 key로 판단하고 추출하는 extractor추가. 동적 판단이라. 추후 정적 판단로직으로 튜닝이 가능할것 같음. - 과거의 정적 api 레코딩 api를 삭제함.",
  "b85b50ff": "[강운덕] [LUCYSUS-1744] arcus, memcached의 api를 추적여부 설정가능하도록 함. key값을 추적여부 설정가능하게 수정. - arcus의 첫번째 string을 key로 판단하고 추출하는 extractor추가. 동적 판단이라. 추후 정적 판단로직으로 튜닝이 가능할것 같음. - 과거의 정적 api 레코딩 api를 삭제함.",
  "5d4b4c71": "[강운덕] [LUCYSUS-1744] arcus, memcached의 api를 추적여부 설정가능하도록 함. key값을 추적여부 설정가능하게 수정. - arcus의 첫번째 string을 key로 판단하고 추출하는 extractor추가. 동적 판단이라. 추후 정적 판단로직으로 튜닝이 가능할것 같음. - 과거의 정적 api 레코딩 api를 삭제함.",
  "364f38b8": "[강운덕] [LUCYSUS-1744] arcus, memcached의 api를 추적여부 설정가능하도록 함. key값을 추적여부 설정가능하게 수정. - arcus의 첫번째 string을 key로 판단하고 추출하는 extractor추가. 동적 판단이라. 추후 정적 판단로직으로 튜닝이 가능할것 같음. - 과거의 정적 api 레코딩 api를 삭제함.",
  "692c37ca": "[강운덕] [LUCYSUS-1744] arcus, memcached client에서 어떤 api를 캡쳐 할지 결정하는 로직을 white list 방식으로 변경함.",
  "3962bb77": "[강운덕] [LUCYSUS-1744] arcus, memcached client에서 어떤 api를 캡쳐 할지 결정하는 로직을 white list 방식으로 변경함.",
  "61f83135": "[강운덕] [LUCYSUS-1744] arcus, memcached client에서 어떤 api를 캡쳐 할지 결정하는 로직을 white list 방식으로 변경함.",
  "b49c2c21": "[유치수] [NOBTS] histogram에 slow, error를 합칩, total 없앰. histogram의 값을 모두 더하면 됨.",
  "faa201d9": "[강운덕] [LUCYSUS-1744] lrucache의 구현체를 guava로 변경함. 14.0.1",
  "a38435ea": "[강운덕] [LUCYSUS-1744] nocache적용 코드 삭제. servletFilter로 대체됨.",
  "1dda03ed": "[유치수] [PROBE-182] css, js nocache 추가.",
  "dfbc8fe5": "[유치수] [NOBTS] nocache 추가.",
  "b9d5a8c1": "[강운덕] [LUCYSUS-1744] sql cache로직 보완",
  "72b1bd1f": "[강운덕] [LUCYSUS-1744] sql cache로직 보완",
  "f9ad579b": "[강운덕] [LUCYSUS-1744] sql cache로직 보완",
  "4f9c646d": "[강운덕] [LUCYSUS-1744] sql cache로직 보완",
  "6c15d3a9": "[강운덕] [LUCYSUS-1744] sql을 파싱하여 cache가능하도록 정규화 시키는 함수 개발.",
  "16252d8b": "[유치수] [NOBTS] classify Arcus and Memcached",
  "586af877": "[유치수] [NOBTS] classify Arcus and Memcached",
  "a1c6a58b": "[유치수] [NOBTS] add /memcached.hippo",
  "3f636b8a": "[강운덕] [LUCYSUS-1744] flowchart의 traceIndex 조회 로직 최적화 120ms에서 17ms정도로 성능향상이 있는것으로 보임. 로직 최적화가 아니라 cache size때문에 그럴수도 있음. hbasetemplate2에 multi scan관련 api를 추가함.",
  "a822ae17": "[강운덕] [LUCYSUS-1744] flowchart의 traceIndex 조회 로직 최적화 120ms에서 17ms정도로 성능향상이 있는것으로 보임. 로직 최적화가 아니라 cache size때문에 그럴수도 있음. hbasetemplate2에 multi scan관련 api를 추가함.",
  "9cb27f78": "[강운덕] [LUCYSUS-1744] flowchart의 traceIndex 조회 로직 최적화 120ms에서 17ms정도로 성능향상이 있는것으로 보임. 로직 최적화가 아니라 cache size때문에 그럴수도 있음. hbasetemplate2에 multi scan관련 api를 추가함."
}, "pixel-dungeon": {
  "": ""
}, "Pixiv-Shaft": {
  "1670c12": "删除cache"
}, "plantuml": {
  "2fa62e9": "chore: add MIT in cache",
  "81bd00e": "fix: restore correct cache behavior https://github.com/plantuml/plantuml/issues/1368",
  "12fce2c": "no gradle daemon so windows 2019 can use the cache.",
  "5e446d8": "Improve performance by replacing StringBuffer with StringBuilder",
  "5c2634c": "Simplify ImageBuilder.getFinalDimension() and cache calculated result."
}, "Play-with-Algorithms": {
  "108a12e": "Compare the performance between recursive and non-recursive implementation of path compression in UF.",
  "46bae3a": "Chapter 06 added a new optional case. To test our UFs performance, we try to use the same test cases:)"
}, "PLDroidPlayer": {
  "": ""
}, "pmd": {
  "6bc57b47": "Reduce cache size",
  "22871ad0": "add a test for display name in the cache",
  "9e436408": "Change cache log messages to be debug/trace",
  "bdbbcac3": "Add checks for the cached values",
  "4f947b46": "[core] Fix the cache",
  "7006d7fc": "Move cache nagging into PmdAnalysis",
  "993c5f80": "Update pmd-java/src/main/resources/category/java/performance.xml",
  "9d7c37ce": "Update performance.xml",
  "7557abb7": "Update pmd-java/src/main/resources/category/java/performance.xml",
  "b741ce26": "fix addEmptyString in performance.xml",
  "e8935523": "Update pmd-java/src/main/resources/category/java/performance.xml",
  "455d1a68": "Update cached RV",
  "7a43e874": "Merge pull request #3873 from pmd/dependabot/github_actions/master/actions/cache-3",
  "2a57871f": "Bump actions/cache from 2 to 3",
  "f2db24ff": "Use new caches in CI build",
  "aa95c8f7": "Merge pull request #3645 from adangel:pmd7-supertypecheck-cache-oom",
  "3cde14a5": "[ci] Start with an empty cache",
  "64595b80": "Added a compiled pattern cache for the configured method name patterns. Fixed some checkstyle-reported formatting issues.",
  "c00d84aa": "[core] Fix XPath rulechain optimization bug",
  "19a4c9cd": "Cleanup performance.xml of deprecated rules",
  "3b550542": "Merge pull request #3324 from Monits:better-cache-fingerprinting",
  "d444f30e": "[ci] Add gradle cache",
  "3996049c": "Remove ThreadLocal supertype cache",
  "7f1b6f58": "Deprecate performance.xml/AvoidUsingShortType",
  "9fe90d4a": "Deprecate performance.xml/SimplifyStartsWith",
  "db3c6360": "[ci] Avoid mixing caches",
  "51c0df87": "Remove cache entirely",
  "30124fef": "Don't cache enclosing class (pretty rare to hit it)",
  "91835315": "Add vendor/bundle to cache",
  "381c5b70": "Update performance.xml/*Instantiation",
  "6064d16e": "Add fast paths",
  "01de9ce4": "add github actions for a fast view of pr succeed/not. travis-ci is toooo slow.",
  "266c4c33": "Fix performance regression caught by stress test",
  "8c06dbcd": "[doc] Improve performance of rule doc generator",
  "ca6a1b6b": "Add performance rule AvoidCalendarDateCreation Including unit tests and examples. Originating from github.com/jborgers/PMD-jPinpoint-rules. Links to more doc later.",
  "bb3223d9": "Add performance rule AvoidApacheCommonsFileItemNonStreaming Including unit tests and examples. Originating from github.com/jborgers/PMD-jPinpoint-rules. Links to more doc later.",
  "e0ac470c": "Improve performance of classloader",
  "3fd74794": "[java] Cleanup rule test xml files (performance)",
  "798cce16": "Dont use global tree cache",
  "96532f26": "Make typeIs XPath functions use the typeres cache",
  "b71575fa": "[java] Cyclomatic complexity is misreported (lack of clearing metrics cache)",
  "5db5c62b": "[core] analysis cache: Use always different checksum",
  "3755d5d7": "Tag n.s.pmd.cache as internal API,",
  "b85d71f6": "[core] Resolve cached rule instances by more than class name",
  "39b51aac": "code review fixes: re-enable javadocs ScalaTokenizer keeps nodes in scala for performance gain Change AST{name}Node designation to {name}",
  "3b646edd": "Small minor performance improvements",
  "af7ccce2": "Avoid caching by default, provide a cached() method instead",
  "29734539": "Fix http response cache, refs #1545",
  "1a2fec2d": "[core] Analysis cache fails with wildcard classpath entries Fixes #1477",
  "583c56bd": "Fix logging when creating cache file",
  "5db7b174": "[java] Split the rule tests for performance",
  "3a572e4a": "Add todo for faster impl of hasDescendantOfAnyType",
  "e2c6f1e4": "Add '-no-cache' CLI switch, to disable incremental analysis",
  "e1b95428": "Use char notation to represent a character to improve performance.",
  "fd51f625": "Update performance.xml",
  "af4c5b2a": "Update performance.xml",
  "142e5338": "Update performance.xml",
  "766565a0": "Update performance.xml",
  "fbd93068": "Update performance.xml",
  "1308b2c7": "[core] Changes to execution classpath invalidate cache",
  "a81d1423": "[core] Avoid a phony warning about not using cache",
  "4dcef95e": "Add new apex-performance/AvoidSoslInLoops rule to 600 ruleset",
  "b8ac7091": "Change syntax highlighting algorithm Boost in time and space performance",
  "c0c5e73a": "Improve syntax highlighting performance",
  "2639b4fe": "[apex] Add AvoidDirectAccessTriggerMap rule to the performance set",
  "68cb1104": "Preserve old cache file",
  "96d2983f": "[core] Fix NPE on cache",
  "8bba0269": "Merge branch 'faster-symboltable' of https://github.com/Monits/pmd into pr-333",
  "1a8432be": "pdate changelog, update performance meassurements",
  "fe73d907": "Merge branch 'analysis-cache-phase2' of https://github.com/Monits/pmd into pr-255",
  "33bad0b9": "Reduce cache size",
  "c0e1c3e7": "Slightly improve performance of XPath Rule UseLocaleWithCaseConversions",
  "bc8cadc8": "Merge branch 'cache-dir-creation' of https://github.com/Monits/pmd into pr-144",
  "afe79674": "Merge branch 'cache-doc' of https://github.com/Monits/pmd into pr-143",
  "f4e727d2": "[java] Make CloneMethodMustImplementCloneable over 500x faster",
  "1c387e35": "[core] Create missing intermediate directories for cache",
  "66ef85b4": "[core] Add documentation on analysis cache usage",
  "87f26e57": "Use a LRU cache in SaxonXPathRuleQuery",
  "19a8d0d0": "Minor optimizations to type resolution",
  "ad568de2": "Merge branch 'faster-type-qualify' of https://github.com/Monits/pmd",
  "71df067a": "Consider classpath and ruleset for cache invalidation",
  "cbb3d39e": "Basic analysis cache implementation",
  "2f5a7058": "Merge branch 'faster-symbol' of https://github.com/Monits/pmd into pr-117",
  "10e4cc72": "Merge branch 'faster-parse' of https://github.com/Monits/pmd into pr-115",
  "565a9aa0": "Add a cache to ImplicitImportResolver",
  "d350bcb4": "Make explicit imports orders of times faster",
  "46ad3a47": "Improve multithreading performance: do not lock on classloader.",
  "9da51952": "RuleSetFactory Performance Enhancement:- To enhance performance of RuleSetFactory, the RuleSets generated by RuleSetFactory from ruleSetString is set in PMDConfiguration and is checked before generating it again in MonoThreadProcessor, MutliThreadProcessor and PMDRunnable classes.",
  "36bc2c2d": "Configure Travis antlr4-wrapper.xml BUILDING.md code_of_conduct.md CONTRIBUTING.md Dangerfile docs do-release.sh Gemfile Gemfile.lock javacc-wrapper.xml LICENSE mvnw mvnw.cmd NOTICE package.json package-lock.json pmd-ant pmd-apex pmd-apex-jorje pmd-cli pmd-coco pmd-core pmd-cpp pmd-cs pmd-dart pmd-dist pmd-doc pmd-fortran pmd-gherkin pmd-go pmd-groovy pmd-html pmd-java pmd-javascript pmd-jsp pmd-julia pmd-kotlin pmd-lang-test pmd-languages-deps pmd-lua pmd-matlab pmd-modelica pmd-objectivec pmd-perl pmd-php pmd-plsql pmd-python pmd-ruby pmd-scala pmd-scala-modules pmd-swift pmd-test pmd-test-schema pmd-tsql pmd-ui pmd-visualforce pmd-vm pmd-xml pom.xml README.md SPONSORS.md email antlr4-wrapper.xml BUILDING.md code_of_conduct.md CONTRIBUTING.md Dangerfile docs do-release.sh Gemfile Gemfile.lock javacc-wrapper.xml LICENSE mvnw mvnw.cmd NOTICE package.json package-lock.json pmd-ant pmd-apex pmd-apex-jorje pmd-cli pmd-coco pmd-core pmd-cpp pmd-cs pmd-dart pmd-dist pmd-doc pmd-fortran pmd-gherkin pmd-go pmd-groovy pmd-html pmd-java pmd-javascript pmd-jsp pmd-julia pmd-kotlin pmd-lang-test pmd-languages-deps pmd-lua pmd-matlab pmd-modelica pmd-objectivec pmd-perl pmd-php pmd-plsql pmd-python pmd-ruby pmd-scala pmd-scala-modules pmd-swift pmd-test pmd-test-schema pmd-tsql pmd-ui pmd-visualforce pmd-vm pmd-xml pom.xml README.md SPONSORS.md cache antlr4-wrapper.xml BUILDING.md code_of_conduct.md CONTRIBUTING.md Dangerfile docs do-release.sh Gemfile Gemfile.lock javacc-wrapper.xml LICENSE mvnw mvnw.cmd NOTICE package.json package-lock.json pmd-ant pmd-apex pmd-apex-jorje pmd-cli pmd-coco pmd-core pmd-cpp pmd-cs pmd-dart pmd-dist pmd-doc pmd-fortran pmd-gherkin pmd-go pmd-groovy pmd-html pmd-java pmd-javascript pmd-jsp pmd-julia pmd-kotlin pmd-lang-test pmd-languages-deps pmd-lua pmd-matlab pmd-modelica pmd-objectivec pmd-perl pmd-php pmd-plsql pmd-python pmd-ruby pmd-scala pmd-scala-modules pmd-swift pmd-test pmd-test-schema pmd-tsql pmd-ui pmd-visualforce pmd-vm pmd-xml pom.xml README.md SPONSORS.md deployment to sonatype-nexus-snapshots",
  "a51a5847": "Another small performance improvement for rule FieldDeclarationsShouldBeAtStartOfClass It is still the slowest rule from #1308 PMD runs endlessly on some generated files",
  "172c20ef": "Small performance improvements for rule FieldDeclarationsShouldBeAtStartOfClass It is the slowest rule from #1308 PMD runs endlessly on some generated files",
  "bd5ec60a": "pmd: fix #1082 CPD performance issue on larger projects",
  "b034dfb2": "pmd: fix #958 Intermittent NullPointerException while loading XPath node attributes antlr4-wrapper.xml BUILDING.md code_of_conduct.md CONTRIBUTING.md Dangerfile docs do-release.sh Gemfile Gemfile.lock javacc-wrapper.xml LICENSE mvnw mvnw.cmd NOTICE package.json package-lock.json pmd-ant pmd-apex pmd-apex-jorje pmd-cli pmd-coco pmd-core pmd-cpp pmd-cs pmd-dart pmd-dist pmd-doc pmd-fortran pmd-gherkin pmd-go pmd-groovy pmd-html pmd-java pmd-javascript pmd-jsp pmd-julia pmd-kotlin pmd-lang-test pmd-languages-deps pmd-lua pmd-matlab pmd-modelica pmd-objectivec pmd-perl pmd-php pmd-plsql pmd-python pmd-ruby pmd-scala pmd-scala-modules pmd-swift pmd-test pmd-test-schema pmd-tsql pmd-ui pmd-visualforce pmd-vm pmd-xml pom.xml README.md SPONSORS.md synchronizing the method cache antlr4-wrapper.xml BUILDING.md code_of_conduct.md CONTRIBUTING.md Dangerfile docs do-release.sh Gemfile Gemfile.lock javacc-wrapper.xml LICENSE mvnw mvnw.cmd NOTICE package.json package-lock.json pmd-ant pmd-apex pmd-apex-jorje pmd-cli pmd-coco pmd-core pmd-cpp pmd-cs pmd-dart pmd-dist pmd-doc pmd-fortran pmd-gherkin pmd-go pmd-groovy pmd-html pmd-java pmd-javascript pmd-jsp pmd-julia pmd-kotlin pmd-lang-test pmd-languages-deps pmd-lua pmd-matlab pmd-modelica pmd-objectivec pmd-perl pmd-php pmd-plsql pmd-python pmd-ruby pmd-scala pmd-scala-modules pmd-swift pmd-test pmd-test-schema pmd-tsql pmd-ui pmd-visualforce pmd-vm pmd-xml pom.xml README.md SPONSORS.md adding additional null check",
  "d675790e": "Redesign GuardLogStatement: Turns out that the implementation based on the one published by Heiko Rupp could simply not catch all the case in our test suite. I therefore opted to backport the previous implementation - a simple Xpath rule, from GuardDebugLogStmt into a java class. Performance are not as good as the one based on Heiko's proposal, but it still twice faster as the simple GuardDebogLogStmt (instead of five times faster). However, correctness is in this case more important.",
  "42d51ad4": "Enhance GuardDebugLogging: - replace xpath implementation by newly created GuardLogStatementRule - increase performance by 5 (from 0.5s to 0.1s)",
  "d126d9b0": "pmd: bugfix 3546093 performance improving by caching not found classes",
  "b52a5a0b": "optimizations, export improvements, bugfixes for new functionality",
  "b965f14a": "minor sort optimization",
  "06918d5c": "Applied patch 3217201: CPD performance regression, thanks to Cd-Man",
  "a66f8f76": "formatting, minor optimization",
  "06fffc9e": "formatting, minor optimization",
  "b1847bbf": "Syntax colouring in summary examples, externalized strings, minor optimizations",
  "b069ec10": "Performance optimization for ends-with type include/exclude patterns. Assuming one has N patterns, and M files to check, one starts to see noticeable improvements once N*M is greater than 100,000.",
  "0bf768ab": "minor optimizations",
  "632fe970": "fixing performance issue on PreserveStackTrace by removing use of descendant:: axis. See bug 1808110",
  "1a18003f": "Clean up RuleViolationComparator, implement without funky usage of .equals, instead of compareTo, etc. Runs a small bit faster too (when there are 100,000s of violations :)",
  "90da682e": "optimizations, adaptations for new property mgmt framework. Some classes may still be removed.",
  "3a29f395": "minor optimizations",
  "2c907a02": "typos & minor optimizations",
  "12c5faef": "typos & minor optimizations",
  "a91dad5f": "typos & minor optimizations",
  "eb534f3c": "typos & minor optimizations",
  "f88a14f1": "dogfood optimization",
  "45495dca": "Minor optimization to ASTTreeNode to have the parent node be the actual parent which created the node.",
  "67c81944": "code cleanup (deprecated calls and optimization):",
  "66283d5d": "Add support for XPath 2.0 and XPath 1.0 compatibility using Saxon. This is implemented using the Saxon OM classes, for good performance. Existing PMD XPath functions are refactored to be compatible with Saxon's extension support. The functions are exposed using 'pmd' and 'pmd-java' namespace prefixes, while these prefixes cause no issues for Jaxen, they are required by Saxon.",
  "6f9e4ca1": "minor performance tweak",
  "92f5b2ad": "append single char vs single char string optimization",
  "80a80939": "minor refactorings & performance tweaks",
  "36a6580c": "Correct performance regression related to initialization of XPath query.",
  "9dad20ca": "Back out RuleSet cache performance optimization in RuleSetFactory due to thread-safety issues.",
  "1cdecb2f": "optimization: ConcurrentHashMap instead of Collections.synchronizedMap",
  "ea83a17b": "optimization of AvoidFieldNameMatchingMethodName",
  "e2d28c80": "optimization of UnnecessaryBooleanAssertion, it was the second most expensive XPath rule, now almost twice as fast",
  "57d35ddb": "Add info about RuleChain for performance. Also, pre-commit instructions.",
  "6dc2a506": "optimization: DoNotCallGarbageCollectionExplicitly rewritten. The new implementation only takes 40% of the time.",
  "201f6b51": "More detailed performance metric logging.",
  "f9de48c1": "Adding a new rule AvoidStringBufferField.xml inspired by Lint4J one (http://www.jutils.com/checks/performance.html), with appropriate test case, and entry in changelog.",
  "1b3eb203": "SingularField no longer complains on lock objects Small performance improvement (improvement not measured)",
  "561f5788": "optimization of xpath rule: on jdk benchmark, rules went from around 270s to 35s (overall benchmark speed on all rules was cut in half by this change)",
  "af3cbdb4": "xpath optimization: benchmark went from 43s to 0.8s on jdk source tree",
  "b3c3714e": "Removed redundant rule, thanks to Romain Pelisse for the performance testing!",
  "9e7deee8": "I've refactored this class to not cache the results any more. This is a tradeoff in testing I've found the CPU tradeoff is negligeable. With the cache, large codebases consumed a lot of memory and slowed down greatly when approaching 3,000 classes.",
  "62d1e9ee": "a minor optimization to test commits in CVS",
  "71c8d956": "minor scope optimization",
  "ea035b77": "XML test-data format now support reinitialization of rules, so you no longer need seperate junit test-methods for rules that cache",
  "e75bead8": "minor optimization",
  "b66c99dc": "minor performance tweak & import set cleanup",
  "fa760a73": "minor optimization",
  "3969dcbf": "minor performance tweaks",
  "ee22ca56": "minor optimization",
  "4be25d55": "StringBuffer use optimization",
  "23f2e782": "faster contains() test using Sets",
  "9fd45540": "faster contains() test using Sets",
  "95857a8b": "optimization in preparation for new property mgmt code: retrieving report level just once at startup",
  "ff044bf2": "append optimizations",
  "a24b7c6a": "optimization: faster searches through sets vs lists",
  "8fd7757e": "minor optimization",
  "7fe14b10": "various optimizations",
  "24614994": "optimizations",
  "ad9fd1ff": "optimizations",
  "358f94eb": "minor optimization",
  "9a3ec168": "minor performance tweaks",
  "972b7499": "Another optimization, thanks Brian!",
  "8dd11222": "Using the JavaCC CACHE_TOKENS option to optimize the parser slightly. This option makes the parser slightly smaller (about 2KB) and very slightly faster",
  "2d4428aa": "More optimizations thx to Brian",
  "83585035": "Batch markers update to try to gain performance",
  "3520a962": "Add performance mesures on commands and on pmd execution",
  "e9f7bbe3": "Rewrote AvoidCallingFinalize in Java; fixed bug and runs much faster, too.",
  "ec1d41be": "Fabio Insaccanebbia's implementation of UseArraysAsList in the optimizations ruleset, thanks Fabio!",
  "526f835b": "Fabio Insaccanebbia's implementation of UseArraysAsList in the optimizations ruleset, thanks Fabio!",
  "771bca32": "Fixed a FIXME; NullAssignment is a bit faster now. Also moved a utility method up into SimpleNode; I think this is something that either Wouter or Allan had suggested a while back...",
  "44ce21d7": "Another microoptimization... ordering the type checks based on frequency",
  "7863dc6c": "Preprocessing methods to select out the attribute methods, about 5% faster overall processing now",
  "d3baafce": "Optimized the SystemOutPrintln rule; now it runs about an order of magnitude faster.",
  "ef8802c7": "Optimized the SystemOutPrintln rule; now it runs about an order of magnitude faster.",
  "617e7fb9": "Fixed bug 1114029 - optimization rules no longer throw NPEs at various points.",
  "3d869fda": "new simple optimization rule: AvoidInstantiatingObjectsInLoops",
  "6c2249fb": "added optimizations ruleset link",
  "7ec1f67a": "new optimization ruleset initial import",
  "1eb560da": "Added a source code cache, modified to use new Rule interface methods - i.e., usesDFA(), tweaked text positions",
  "be3969a2": "Removed old rule caching stuff; Ant 1.6.2 makes this micro-optimization irrelevant. Also, cleaned up imports.",
  "3e37ecb6": "Minor optimization to store report references of only Errorneous files and not all as in previous commit",
  "06cb96e4": "More optimizations thanks to IDEA",
  "5dbf29f2": "More optimizations thanks to IDEA",
  "5275620f": "A couple more optimizations thanks to IDEA",
  "5e85b466": "Minor optimization to EmptyCatchBlock",
  "b60b81a5": "More CPD optimization thanks to Steve Hawkins",
  "d9cae7a3": "More CPD performance optimizations; thanks again to Steve Hawkins",
  "16def1da": "Tweaked MatchCollector; now it's about 10% faster",
  "94d5293e": "Refactoring to improve performance Updating PMD engine to v1.05 Fixing CPD usage to conform to new engine implementation",
  "91b2b629": "Refactoring to improve performance",
  "2aee4db4": "Updating PMD engine to v1.05 Refactoring to improve performance",
  "62c41512": "Some optimizations.",
  "068a10f5": "Some minor optimization to the generated parser - removed some unnecessary casts",
  "6661a2d9": "Tweak; another few milliseconds faster",
  "d2e8f058": "Initial version of Brian Ewin's new CPD - much, much, much faster",
  "5a657b9c": "slowly beefing up method symbol table",
  "36528df9": "slowly developing the method name symbol table",
  "f17b1e64": "slowly refactoring towards a better name lookup system",
  "51ed9481": "more refactoring. the code is slowing moving towards a bunch of Scope types - LocalScope, CaseScope, etc, etc - with each Scope being checked in sequence and know what it covers, how shadowing works, and so on.",
  "2af02643": "slowly refactoring towards a nicer symbol table",
  "9968b1d1": "Fixed issue with fast repeating mouse clicks in the source file list. It was causing PMDViewer to freeze because the Java event thread and the PMD analysis thread entered into a deadlock.",
  "ac61ff5d": "a miniscule optimization",
  "d7011e2a": "working on expanded tile sequencing... slow going",
  "ff450e89": "moving slowly ahead towards event notification",
  "af3eac4e": "slowly putting the options panel together",
  "35c22900": "slowly putting the options panel together",
  "b6bf0bf8": "slowly putting the options panel together",
  "4cbbf643": "various tweaks, slowly putting Options dialog together"
}, "PocketHub": {
  "3915d5b": "Merge pull request #652 from fadils/add-fast-scroll",
  "54c93c0": "Add fast-scroll",
  "bf67fc0": "Merge pull request #649 from fadils/fast-scroll-in-commit-diff",
  "c32bc34": "Add a simple fast-scroll",
  "498c32b": "Ensure old cached folder is always deleted",
  "5bde50e": "more DiffStyler optimization (as per review)",
  "dd27764": "fault tolerance and performance in DiffStyler",
  "b961a16": "Set cacheColorHint on list views to be transparent",
  "89c65ac": "Insert loaded image into cache even when not current",
  "191e966": "Make spinner twice as slow",
  "dd9f2a6": "Remove enabling of fast scrolling",
  "046773d": "Remove fast scrolling on list views",
  "f9eb290": "Increase avatar cache size to 75",
  "1476007": "Enable fast scroll on all list fragments",
  "cc4fe3e": "Enable fast scroll on dashboard issue lists",
  "fbd419b": "Enable fast scroll on issue list"
}, "poi-tl": {
  "719957b": "failfast特性",
  "a02e7ac": "Revert '快速失败failfast特性'",
  "98a1f45": "快速失败failfast特性"
}, "PojavLauncher": {
  "da62479": "Remove GL4ES build and cache",
  "52243ef": "Make CallbackBridge static again for more performance",
  "4dfa3f2": "Delete arm64 gl4es to test cache",
  "98a5d0b": "Switch to SurfaceView for performance; Fix dropping items when it shouldn't be the case;",
  "3dd0e03": "- Move some BaseMainActivity to their respective classes - Improved control onTouch performance",
  "14529f1": "New option: sustained performance",
  "87f84c0": "Add vgpu cache",
  "17f78be": "Swipeable buttons are a bit faster now",
  "153e991": "Clean up, keyboard is faster now",
  "9cc4243": "Add a memory optimization if you don't edit the buttons",
  "6f100d6": "Fix slider performance degradation when editing controls",
  "14bf84f": "Slight performance optimization for mouse users.",
  "dcd0f5d": "Slight performance optimization related to DEBUG_STRING",
  "cb82ff5": "[gl4es] swap repo (trigger new cache)",
  "a9925c3": "Merge pull request #763 from serpentspirale/minebutton_optimization"
}, "PowerJob": {
  "95a1f43": "feat: use async log to optimzie agent performance",
  "dc61bb4": "fix: JavaUtils cache failed in windows env",
  "c47fd69": "test: use gatling to test remote framework performance",
  "d12ac4d": "feat: optimize performance",
  "268f5dd": "feat: add BenchmarkActor for performance test",
  "eb6b0c3": "feat: add BenchmarkActor for performance test",
  "0b5a404": "chore: upgrade fastjson version (1.2.68 -> 1.2.83)",
  "5ed6eac": "perf: use cached lock replace SegmentLock",
  "f7b5436": "feat: multi stage TimeWhele to imporve schedule performance #110",
  "32a9f44": "[fix] fix the bug of worker score not cached",
  "e722004": "[fix] use fastjson to serlize reference",
  "8db9149": "[modify] change local cache's expire time",
  "d44f818": "finished simple test for TaskTracker(MapReduce Mode) and change serialize framwork to fst because of fastjson's indian"
}, "powermock": {
  "19e08d8": "Fix performance issues"
}, "PRDownloader": {
  "9a832bc": "Add time gap for sync for resource optimization"
}, "presto": {
  "18a98e5b": "[native] Refactor cache counters in periodic task manager.",
  "1f93894a": "[native] Export Ssd cache error counters",
  "07d5c853": "Add optimization rule to optimize for empty input tables",
  "3e47e57f": "Remove obsolete cache enabling logic (#19464)",
  "b222491f": "Fix bug during projection pushdown in payload join optimization",
  "e1d0b5c3": "[native] Add 'async-cache-ssd-disable-file-cow' config property.",
  "a750f0c3": "Add payload on the LHS of the join during payload join optimization, push down projections for computed join keys",
  "e5625be1": "Add optimization to merge aggregations with and without filter",
  "9058d0d5": "[native] Add counters for hive connector file handle cache",
  "4cc538da": "Default the Stripe cache size for ORC files",
  "d7f6da4e": "Optimize function name and comment for fast path merge join",
  "fd7ae5f9": "Bypass cached directory, when caching is disabled",
  "0cec10b2": "Add optimization to merge duplicate aggregations",
  "a2ad7c27": "Add operational endpoints for connector cache cleanup (#19212)",
  "04b77503": "Enable outer join null key optimization in some case",
  "cc8634cd": "Fix null ptr issue for empty join optimization",
  "e16f275c": "Fix prefilter for group by limit optimization",
  "d5eeba46": "Add Data cache support for Delta Connector",
  "5d8b74dd": "Update alluxio cache.dir config in the test",
  "9b488fba": "Use per-query cache for HBO stats",
  "e95f379a": "[native] Export in-memory cache counters",
  "acd458df": "Update description of optimization rules",
  "5a879a07": "Add optimization to randomize null key in outer join",
  "cff48b5b": "[native] fix connector creation when cache is enabled",
  "2fba5b64": "Address review comments for constraints optimization",
  "ba608346": "Make exchange/hash optimization rules work with HBO",
  "fe629581": "Fix runtime stats unit of local cache",
  "67055ab9": "Add an option to fetch all table partitions from the catalog instead of by filtering by partition column predicates This amortizes the overhead of the remote call and improves overall planning performance with AWS Glue when there are tables with a large number of partitions",
  "cbfec413": "Do not cache bufferAdapter in OrcInputStream",
  "80bfb63c": "Support new functions in materialized view optimization",
  "f40878dd": "Consider only partitions in query for materialized view optimization",
  "d7727376": "Fix materialized view query optimization type mismatches",
  "2455f427": "Reduce calls to metastore in materialized view optimization",
  "4d20e15c": "Add subquery support for materialized view rewrite optimization",
  "79421bf9": "Add grouped execution session property check for merge join optimization",
  "84a73501": "Only support inner join for merge join optimization",
  "5c3ac4c4": "Implement constraints based optimization rules",
  "51cb8219": "Add materialized view rewrite optimization for COUNT",
  "31cba319": "Fix unable to display stage performance",
  "06377cdb": "Fix some 'Populate maven cache' steps",
  "83aa60cf": "Support timely invalidation of parquet metadata cache",
  "b780bcac": "Add column count limit for cached partitions",
  "10211d47": "Add stats for metastore partition cache",
  "d8afc0eb": "Minor optimization of MapFlatSelectiveStreamReader",
  "ef1fd25c": "Improve listing performance of Hudi tables",
  "e3c9af6c": "Enable cost based optimization by default",
  "7330a040": "Improve SimpleTtlNodeSelector performance",
  "1dbfc9d7": "remove max initial split from hivesplitmanager constructor & improve fragment cache hit ratio",
  "19545894": "Revert 'Improve listing performance of Hudi tables'",
  "070c9954": "Improve listing performance of Hudi tables",
  "e54a3e0c": "Add shadow cache configs",
  "56c5255c": "Add more RuntimeStats to help performance tuning",
  "096b080b": "Improve SortedPositionLinks performance",
  "dd4dc7c9": "Making resource group service cache configurable",
  "bc9ee232": "Add session property to force metadata query optimization",
  "48fadf11": "Fix resource group concurrency for multi coordinator When a burst of traffic comes to coordinator, it ended up running more than allowed queries. Two reasons for that: 1. In multi coordinator, we were not stamping last running query for non leaf resource groups, which lead to shouldWaitForResourceManagerUpdate to return always true for non leaf resource groups. So if the traffic is coming from lot of different resource groups, coordinator end up running less than allowed in each resource group but at root level it ends up running more. 2. ResourceManagerResourceGroupService cache end up having stale resource group info which also end up allowing coordinators to run more than allowed queries at a cluster level. As part of this diff we are fixing 1 by stamping last running query to all it's parent resource groups. And to address 2, making cache refresh rate and expiration configerable.",
  "8b4933c4": "Drop presto-array's dependency on fastutils",
  "b33ea692": "Fix output column name in materialized view query optimization",
  "78b53baa": "Add a configuration property for total FRC cache size",
  "ad122d31": "Add a hive session property to enable per query cache metrics",
  "07cb30ca": "Add PageProcessor fast path for unfiltered row count projections",
  "cae41c20": "Revert 'Improve PartitioningExchanger performance'",
  "7fb8c460": "Optimize MarkDistinctHash for faster distinct mask creation",
  "96b37221": "Add a fast path for unwrapping if in AGG IF to FILTER rewrite",
  "8c67b57d": "Add cache_enabled session property into hive",
  "91d64824": "Handle table alias for query rewrite optimization",
  "e7533aaf": "Improve Decimal sum and average aggregation performance",
  "bfd946f9": "Improve PartitioningExchanger performance",
  "fda59c30": "Fix multithread writing for fragment result cache",
  "b62c3ce2": "Restrict functions for Materialized view optimization",
  "f8806085": "Add filter validation for query optimization",
  "2bdff631": "Improved string concat for code size and performance when it's used for concatenating more than 5 strings.",
  "43b96f02": "Add query optimization using materialized view",
  "ab404cac": "Add materialized view query optimization utility",
  "6d19caa1": "Improve cassandra query performance by adding metadata cache",
  "3cc2a27b": "Record #bytes read from cache and external",
  "bb4b68e6": "Invalidate cache if partition is not present",
  "44b7a7b1": "Add DWRF stripe cache support to OrcWriter",
  "30114f5b": "Prepare ORC writer API for DWRF stripe cache",
  "59b469cf": "Add StripeMetadataSourceFactory to consume loaded DWRF stripe cache",
  "4428cf73": "Fix the partition cache invalidation logic to be more efficient",
  "baea41bb": "Allow StorageOrcFileTailSource to read DWRF stripe cache data",
  "fca1f242": "Add support for partition cache verification",
  "e9c4a306": "Decode Parquet dictionary faster",
  "494b7f5d": "Plumb DWRF stripe cache info from proto to model",
  "69a52160": "Extend join optimizations based on empty source.",
  "8803df37": "Fix evictor type for Alluxio cache",
  "3e1c1f31": "Enable different cache eviction policy",
  "333dbb0a": "Support of inner join optimization with empty source.",
  "7c7930e7": "Improve performance of getRegionLogicalSizeInBytes",
  "b043970f": "Upgrade fastutil to 8.5.2",
  "6259ff34": "CI cache maven repo",
  "a24e7e16": "Add more stats for fragment result cache manager",
  "f9ecd2ae": "Add unsynchronized fast paths to reduce contention in ExchangeClient",
  "47a39d4d": "Shrink cached buffers in OrcInputStream",
  "7561c121": "Add flag to set cache eviction retries",
  "817d50ac": "Fix split cacheable setting for affinity scheduling",
  "f117ceb9": "Improve NestedLoopJoinOperator performance",
  "213660bc": "Add local cache for Parquet Metadata",
  "ce96d881": "Fix a potential NPE by allowing nulllable cache base directory",
  "a9308291": "Add unit tests on async cache restore",
  "1489cac8": "Introduce fragment result cache manager",
  "e7e8ecc9": "Fix performance regression when Hive SerDe doesn't prefer Writables",
  "a458ecbe": "Track cache objects sizes in CachingOrcDataSource",
  "4d4f29f5": "Generate DynamicFilter in optimization and cost calculation process",
  "4a37013b": "Simplify integration with Alluxio local cache",
  "89632d3a": "Improve Alluxio cache documentation",
  "2d2693f0": "Fix failure during optimization of LIKE expression",
  "d72661fb": "Support common sub-expression optimization in CursorProcessorCompiler",
  "793ef467": "Create warning for COUNT(DISTINCT) to use approx_distinct for performance benefits",
  "4db99a82": "Add cache quota support for hive connector",
  "e58c3511": "Allow cached reads on the non-offset version of readFully",
  "52a87c70": "Add dependency of fastutil for Druid HDFS file parsing",
  "a75114b3": "Enable common sub expression optimization in PageFunctionCompiler filter",
  "bf9b5261": "Support caching all tables in file status cache",
  "7eb85a22": "Add SqlBaseParser initializer hook and refreshable ATN caches",
  "0491783e": "Fix subscript expression optimization during subfield pushdown",
  "d52db96c": "Refactor cacheable for BucketNodeMap",
  "3f980812": "Fix and improve performance for limit query determinism analysis",
  "58df3788": "Introduce cacheable for bucketed splits",
  "342afc8e": "Decide cacheable when scheduling unbucketed splits",
  "f0b57fe7": "Make file status cache disabled by default",
  "954f1ce5": "Add Hive directory listing cache",
  "8296be0c": "Move PushdownSubfields below logical optimization",
  "ab55def6": "Promote Elasticsearch scan performance with index sorting",
  "3f8d9dad": "Inject cache manager for Raptor HdfsModule with provider",
  "789364e2": "Track filter function performance",
  "98f54e77": "Fix stripe metadata cache weigher to use retained size",
  "bc2e8b24": "chunk merge files during cache write to avoid reading excessively large data into memory and other optimizations",
  "808043fe": "Add cache for stripe metadata",
  "177a680f": "Move cache related class into separate package",
  "866f6657": "Add support for refreshing functions cache in namespace manager",
  "3b7f1430": "Add ParametersAreNonnullByDefault annotation to cache loading methods",
  "b0645420": "Add SqlFunctionProperties to bytecode compiler cache keys",
  "b54d2483": "Improve HashGenerator.getPartition performance",
  "d75bd6b8": "Use fast varint read path in LongInputStreamV1",
  "c1b2b2e4": "Add cache for orc file tail information",
  "c4ab6158": "Move LIMIT 0 rule to its dedicated optimization phase",
  "3e4c8d79": "Implemented scaffolding for plan pushdown optimization in JDBC",
  "ac7bb686": "Improve performance for positioned reads on S3",
  "1b55942e": "Remove typeOnly optimization from SqlToRowExpressionTranslator",
  "3f652876": "Add sanity checker to check no expression left after optimization",
  "4705a171": "Apply connector-specified optimization in PlanOptimizers",
  "a01845ab": "Apply expression optimization for RowExpressionInterpreter::optimize",
  "b957f9b9": "Improve performance for DictionaryBlock.getSizeInBytes",
  "75a2b971": "Improve performance for thread snapshot component",
  "290f5be2": "Replace floorMod with faster reduction function",
  "b8c16076": "Add feature toggle for TopNRowNumber optimization",
  "76ca2818": "Invalidate all metastore caches upon flushCache",
  "937c4255": "Invalidate statistics caches after Table/Partition modifications",
  "bda3d6ed": "Improve performance and simplify map equal and distinct from",
  "e82dd6ae": "Stop product test containers faster",
  "7edd2526": "Add cache for parameterized type",
  "5e4235b5": "Disable optimization to short circuit on empty tables",
  "95edb1eb": "Use state object to cache output for array_join",
  "4da96b4e": "Change StatsCalculator API and cache stats in Memo",
  "eb3beb76": "Remove performance optimization for Future cancellation",
  "73d7303b": "Fix performance regression in SourcePartitionedScheduler",
  "8267b7f8": "Remove auto GC based on code-cache fill level",
  "4920ba48": "Expire projection and filter cache entries after one hour",
  "901a16fd": "Expire specialized function cache entries after one hour",
  "26b81670": "Improve performance of Analysis.getType(Expression)",
  "3178ffae": "Revert the code cache collection threshold to the previous value",
  "2790951f": "Extend non-equi join optimization to support range predicates",
  "04d9de84": "Add tests for non-equi join condition optimization",
  "d3fde32b": "Remove unused field from inequality join optimization",
  "3e31629d": "Improve map element_at performance by utilizing MapBlock O(1) access",
  "adb07a99": "Add cache to PageFunctionCompiler",
  "777c57db": "Test that cachedInstance in scalar function uses bounded memory",
  "794dbe5a": "Add PruneIndexSourceColumns optimization rule",
  "b10d5c7a": "Add PruneMarkDistinctColumns optimization rule",
  "66e93cd9": "Add PruneJoinChildrenColumns optimization rule",
  "825a0ffb": "Add PruneJoinColumns optimization rule",
  "08c922fe": "Add PruneCrossJoinColumns optimization rule",
  "c9d786c9": "Document encryption performance impact",
  "08e7fa36": "Recover the optimization in SliceArrayBlock",
  "a817360e": "Fix concurrency of Avro schema cache",
  "340988cf": "Rename fast_inequality_join flag to match feature toggle",
  "0c84723d": "Drop 'experimental' from fast-inequality-joins's description",
  "2d6fd9d7": "Improve performance of Raptor shards system table",
  "c0cf70c5": "Remove Cassandra cache configs",
  "9f3b7a0a": "Add optimization to include intermediate aggregations",
  "fe06fe86": "Change default metastore cache timeout to 0 in Hive connector",
  "08478320": "Remove processing_optimization implementations",
  "fa556295": "Fix performance regression in ExchangeClient",
  "980a52ac": "Do not cache partition keys",
  "e6571543": "Use fast decimal in DOUBLE to DECIMAL casts",
  "19c66350": "Use fast decimal division for divide and modulo operators",
  "3ffae435": "Use fast decimal in decimal to double casts",
  "7bdbd1f5": "Use fast decimal in AVG aggregation",
  "fdf248dc": "Use fast decimal in SUM aggregation",
  "99dad487": "Use fast decimal in add and subtract operators",
  "db0dd927": "Use fast decimal in multiplication operator",
  "87daeb8a": "Use fast decimal as internal long decimal representation",
  "637fff3c": "Improve performance of expensive getRegionSizeInBytes",
  "505842db": "Add stage performance page to Web UI",
  "acd9c45d": "Expose JoinProbeCompiler cache stats via JMX",
  "d8806ebb": "Expose JoinFilterFunctionCompiler cache stats via JMX",
  "3e4209ef": "Expose OrderingCompiler cache stats via JMX",
  "8559ae56": "Expose JoinCompiler cache stats via JMX",
  "2845b706": "Handle escape in LIKE predicate optimization",
  "629cc84d": "Introduce cache for LDAP authentication",
  "4b6651c5": "Add benchmark for ArrayTransform optimization with bytecode",
  "9956b5ed": "Improve performance of array_join",
  "22401a13": "Import quicksort of IntBitArray from fastutils",
  "f02780d3": "Fix and refactor boolean expression optimization",
  "6971be40": "Fix performance regression in HiveMetadata getTableLayout",
  "6430c91a": "Avoid running slow query on H2",
  "b9c62b82": "Limit Hadoop FileSystem cache size in product tests",
  "f93288dd": "Introduce hive.fs.cache.max-size property",
  "37233532": "Add cache size limit to Hive metastore cache",
  "647e8245": "Initialize cached instances in join filter function",
  "5b9ff8c6": "Use expireAfterWrite in Hive metastore cache",
  "b621953b": "Reduce default code cache collection threshold to 40%",
  "fe28b418": "Make code cache collection threshold configurable",
  "e6c14b7f": "Add cache for Signature to SpecializedFunctionKey resolution",
  "94952acc": "Add per-transaction Hive metastore cache",
  "fb4347ab": "Clarify that only bucketing optimizations are broken in 0.150",
  "983091db": "Disable outer join to index join optimization for non-equi criteria",
  "160ecd2b": "Improve performance of CLI output",
  "1b116344": "Allow configuring the interval for checking code cache size",
  "ee3ac800": "Invalidate cached data for new name when renaming a table",
  "25c5c5cf": "Add 0.137 release notes for expression optimizations",
  "21496c04": "Fix invalid plan with precomputed hash optimization in scalar subquery",
  "2c164a85": "Add dictionary optimizations to FilterPage in Page Processor",
  "42facb90": "Add optimization for RunLengthEncoded blocks in PageProcessor",
  "4156ed77": "Make equality checks for standard type classes faster",
  "a7d83509": "Add negative cache to topology aware scheduler",
  "95554c67": "Fix performance regression when building hash tables",
  "6b66350b": "Remove PruneRedundantProjections optimization",
  "9a4fe1e8": "Improve performance of InCodeGenerator",
  "7fbc5b27": "Accept Kerberos credential cache file path without FILE prefix",
  "d0bf004a": "Rewrite the very slow test for join",
  "863d4d88": "Use fastutils primitive sets in huge IN lists bytecode.",
  "8c0f3dfd": "Rewrite arbitrary to improve performance",
  "496e080e": "Enable distributed joins and hash optimization by default",
  "db74d643": "Move ProjectionPushDown to optimizations package",
  "2fd4d4b4": "Further optimization to computeAssignments()",
  "2353df2a": "Optimize performance of selectRandomNodes()",
  "be6815e2": "Fix bugs in AddExchanges and constant optimizations",
  "e7ef8a0e": "Invalidate Hive metadata cache for failed operations",
  "69f68443": "Fix precomputed hash optimization",
  "e86f3fe4": "Add cache for Raptor node IDs",
  "7f331bed": "Fix for row number window function optimization",
  "b2e64492": "Don't cache instantiated parametric types",
  "16ada09c": "Updated jol to 0.2 to resolve the slow startup problem due to heavy GC",
  "c3a0703c": "Improve Driver performance",
  "9a581589": "Add slow and fast OrcTests",
  "7a9f2d76": "Remove file optimization and compression from Raptor",
  "67ad0e3f": "Fix row number optimizations for unreferenced outputs",
  "f9897e87": "Add fast smoke test for distributed Hive",
  "c66fc6de": "Add fast smoke test for distributed Cassandra",
  "997b9f21": "Fix performance regression in variance aggregation",
  "df4c9915": "Minor cleanup and (potential) optimization in compiler",
  "87981e7b": "Revert 'Minor cleanup and (potential) optimization in compiler'",
  "59e0cbab": "Minor cleanup and (potential) optimization in compiler",
  "d3ef0e0e": "Remove useless date time literal optimization tests",
  "4febef7f": "Rewrite GroupByHash for performance",
  "4fb9bb7b": "Improve performance when computing partitions domain summary",
  "519e5226": "Use faster implementation of Murmur3 for approx_distinct",
  "70105e0c": "Allow optimization of subexpressions in certain cases",
  "a38d71b0": "Add optimization for DISTINCT LIMIT queries over sampled data",
  "cfaf60ec": "Add more optimizations for sampled tables",
  "9c2f4b9e": "Fix optimizer performance regression",
  "66c9f86e": "Fix logging for full code cache condition",
  "be685a53": "Allow fetching list of cached file systems",
  "f6c8855c": "Improve query performance for hive bucketed tables",
  "fa19eac9": "Add some SemiJoin predicate move around and limit optimizations",
  "2eda9d6d": "Install the code cache gc trigger on run()",
  "4ffd7f4f": "FileSystemCache include the fsType as part of the cache key",
  "0c1bc597": "Disable Jackson field name canonicalization (string intern cache)",
  "51535faa": "Refresh hive cached values in background",
  "efee4496": "Add com.fasterxml.jackson to parent-first packages",
  "b7c0d82d": "Add sys.slow_datanode table",
  "07eebdd8": "Expose hive flush cache via JMX",
  "ccccaa48": "Make trivial queries super fast",
  "6135b563": "Refactor FileSystem cache and fix incomplete caching issue",
  "17730b02": "Flush buffered console results during slow queries",
  "3aa2a0c5": "Send task info back with most responses so state is updated faster",
  "3ba5e6eb": "- Extend MetadataCache to also cache PartitionInfo and Partition names. - add JMX exposure of the Metadata cache stats.",
  "6e24ee2a": "After benchmarking the stats functions, rejigger the code a bit to make double_stddev and double_stddev_pop a mindboggling 27% (!) faster and all the long methods a little faster.",
  "ec5e6054": "Change task thread pool to an unlimited cached thread pool",
  "69eb80bf": "Fix AggregationOperator performance regression",
  "c94dc011": "Move plan optimizations to a separate package",
  "dfbd2ce7": "Slice performance improvements",
  "c5f25cb5": "Minor performance improvement for AggregationOperator",
  "9ee771fa": "Minor HashAggregationOperator performance improvements"
}, "PreviewSeekBar": {
  "667c7c0": "Tweak load control for faster loading",
  "d558e3f": "Tweak load control for faster loading"
}, "processing": {
  "65c167b0": "get the jre download to work by using a cached copy",
  "89a08081": "trying out a cached copy of the JRE to address #5827 and others",
  "1c8b0566": "more notes about font issues and performance",
  "b84ca828": "greatly improve startup slowness on systems that have a lot of fonts installed",
  "b2bbaf17": "rewrite requestImage() to fix errors/slowness/concurrency problems",
  "71814820": "rewrite exec() to do threads, also handle fast/excessive output cases",
  "4093d2b9": "rewrite loadBytes(File) for better performance",
  "ea4c0765": "Improve loadBytes performance",
  "3e1c8ded": "IO: Compile native code with -ffast-math",
  "b7011c80": "Don't cache search classpath, only build it when looking for a class",
  "aed36d65": "Linux deleting too slowly, see if this fixes",
  "2c7bdaa5": "rewrite csv handling, fix parsing bugs, remove newlines option, improve performance",
  "908e8f5c": "rewrite the empty sketchbook PR for performance",
  "3c590a7a": "save previous texture in tessellator only if tex cache in non-null",
  "38c0477a": "Merge pull request #3874 from JakubValtar/opengl-cache-dependencies",
  "95e4d542": "Merge pull request #3815 from JakubValtar/regex-cache",
  "c9367b24": "Make the PApplet regex cache LRU",
  "1d1ccef4": "don't add bevel triangles when line segments are in different geometry caches",
  "d35b6717": "Merge pull request #3771 from JakubValtar/fx-tint-cache-fix",
  "16b1fcd9": "FX - fix bug where fonts would share a tint cache",
  "45619944": "FX - fix AIOOBE in tined glyph cache",
  "0a25bf31": "FX - loadPixels, updatePixels, get and set optimizations",
  "c01a309d": "improve string breaking performance with edge case (fixes #211)",
  "1005bd09": "remove spacing performance art to normalize w/ the guidelines",
  "5edf335d": "more nannying at the expense of performance (fixes #3347)",
  "00fec711": "duplicate stroke vertices when they fall in separate cache blocks",
  "d63de0bd": "add one-way renderer to check performance",
  "c03f370a": "move blit() out of SmoothCanvas, add one-way renderer to check performance",
  "964f31ad": "back in business, but still not nuts about current performance/complexity",
  "950f8555": "mark cache methods, update comments",
  "0179b56e": "set absolute path, remove cache methods",
  "b489a1a9": "Merge pull request #2826 from federicobond/primitive-optimization",
  "27d53035": "add setRow() and fixes for Table(Iterable) performance",
  "3ee9f9a9": "some cleaner logic to allow for #2424, which should also work when video buffers start accumulating in the cache on slower machines.",
  "eb677517": "getBufferPixels() removes the buffers from the cache, fixes the #2424",
  "a1b01318": "Added loaded flag to PImage, removed cache object introspection in loadPixels()",
  "ed61c90f": "further work on retina and improving performance",
  "9ff1fd33": "removed parameter cache, some tweaks to the Texture class",
  "0ab5db79": "property sets cache objects in loadTextureImpl(), testing double buffered primary FBO",
  "1cd06241": "moving font cache inside PGraphicsOpenGL",
  "494f9978": "swap how image cache is handled, and use weak reference",
  "479f53b0": "performance improvement for PVector.limit() (issue #1122)",
  "be3f06ad": "primary surface is used as key object when setting the cache for font textures",
  "34ab9d6d": "Some cleanup in Texture, PGraphicsOpenGL.loadTexture() works in all situations and faster in non-FBO-backed surfaces.",
  "c9cbc5d0": "completed new implementation of image cache handling",
  "a0cf1a66": "update tex cache when tessellating lines, points",
  "351fb50b": "texture cache is not used in retained mode",
  "496817f3": "Getting the new index caches to work in retained mode",
  "3b2b1f5c": "Using arrays instead of ArrayList for fill index cache",
  "db2387d7": "Added mode to PShape, reworked tessellation, update in PShape3D, release of cache and tess objects when STATIC mode is used.",
  "b9894f80": "Some optimizations into geometric transformations in PShape3D",
  "3e722512": "try to improve performance of tint(), mostly failing",
  "1e1d7822": "Corrected size of cache of point attributes in PShape3D",
  "c6921251": "Fixed texture cache handling in renderFill()",
  "371944ba": "Expanding vertex cache by doubling previous size",
  "8254d0e6": "Added cache update for line and point data",
  "7064096e": "Implemented cache mechanism for efficient update of PShape3D objects.",
  "ebe84bcd": "implemented disable/enable texture cache hint",
  "2ee6b5e0": "deal with blank canvas performance and Java2D (issue #729)",
  "6b5e71a0": "Removed used of cached gl objects, buffer swap emulation in PFramebuffer when no FBO extension is available",
  "26640488": "Removed used of cached gl objects in A3D",
  "527ea8a7": "fix caret bug leading to slow degredation of the PDE",
  "bdf2ca22": "GeometryBuffer is working (and it is fast)",
  "f45b7032": "Some fixes and optimizations in PShape3D",
  "326cc459": "Fully working version of NoClear mode (on N1), but still very slow",
  "4fd7f122": "Vertex group optimization in PShape3D.",
  "51f9e972": "some more optimizations in A3D",
  "1eec4bf2": "fix for bug #1245 cacheMap issue",
  "67c9953a": "tweaks for imageMode() and image cache changes",
  "00096248": "added a quick comment on the finalize() method for the image cache",
  "ee5b4c4a": "fix obscure image cache bugs when multiple renderers are used",
  "72bf7a1d": "fixes to open up gl library for better optimization",
  "0efeafc3": "fix slow sketchbook loading problem",
  "5b110db1": "more bug notes, plus faster blur and new FILTER and DILATE code from toxi.",
  "49639c30": "changes to copyFile() routine to make it faster and spew exceptions"
}, "proxyee-down": {
  "": ""
}, "pulsar": {
  "6cfa4683": "[improve][broker] Fix ServiceUnitStateCompactionStrategy to cover fast-forward cursor behavior after compaction (#20110)",
  "8b0a0a38": "[improve][ml] Add Read cache misses metric for ledger (#20001)",
  "fe547c7b": "[fix][client] Shade com.fasterxml.jackson.datatype.* to prevent ClassNotFoundException (#19458)",
  "cb306c8e": "[fix] [broker] Make the service name resolver cache of PulsarWebResource expire after access (#19532)",
  "69866a60": "[improve][ci] Improve test fail fast: disable for non-PR builds, fail parallel forked test procs (#19252)",
  "a62ba196": "[improve][test] Run cleanup methods even when failfast mode is enabled (#19220)",
  "e9b9ce34": "[improve][ci] Limit cache step to 5 minutes to fail faster when it gets stuck (#19219)",
  "74313816": "[improve][broker] Add ref count for sticky hash to optimize the performance of Key_Shared subscription (#19167)",
  "fe45a9cf": "[improve][broker] Pin executor to managed ledger instance to cache the string hashing (#18078)",
  "a70aec03": "[improve][broker] Avoid share same random in multi-threads due to performance issue (#18660)",
  "63e452b6": "[improve][broker] Pin executor to dispatcher and StreamingEntryReader to cache the string hashing (#18566)",
  "6fec66b1": "InflightReadsLimiter - limit the memory used by reads end-to-end (from storage/cache to the write to the consumer channel) (#18245)",
  "c5135f19": "[fix][broker] calculate default cache size correctly in standalone mode (#18217)",
  "a7f1a565": "[fix][broker]After the broker is restarted, the cache dynamic configuration is invalid (#17035)",
  "15502dd0": "[improve][doc] Deduplication can have effects in performance and is not activated at client level (#15368)",
  "856ef155": "[fix][broker] Fix broker cache eviction of entries read by active cursors (#17273)",
  "e3b25403": "[enh][broker] Add metrics for entry cache insertion, eviction (#17248)",
  "fb0f653e": "[improve][client-c++] Use an atomic `state_` instead of the lock to improve performance (#16940)",
  "374b3a18": "[fix][broker] Fix memory leak if entry exists in cache (#16996)",
  "e451806a": "Fix rack awareness cache expiration race condition (#16825)",
  "3619edc6": "[improve][broker] refactor ManagedLedger cacheEvictionTask implement (#14488)",
  "cccf2520": "[improve][broker] Create the cursor ledger lazily to improve the subscribe performance (#16389)",
  "df1ff2f9": "[fix][doc] Fix the documentation of performance-pulsar-perf for 2.10.x (#16536)",
  "bdda1ebd": "[improve][java-client] Improve performance of multi-topic consumer with more than one IO thread (#16336)",
  "d9f56407": "[feat][broker] PIP-145: Notifications for faster topic discovery (#16062)",
  "96237a96": "[improve][java-client] Replace ScheduledExecutor to improve performance of message consumption (#16236)",
  "31cd8576": "[security] Update fastjson version to 1.2.83 (#16148)",
  "6fc5214d": "remove topic -> namespace cache in LedgerOffloaderStatsImpl (#15869)",
  "fcf5e148": "[optimize][txn] Optimize transaction lowWaterMark to clean useless data faster (#15592)",
  "858aa6d1": "Improve /metrics endpoint performance (#14453)",
  "2d12011d": "[fix][jdk17] Enable Netty and BookKeeper IO optimizations on jdk17 (#15256)",
  "93331d37": "Add a cache of versioned KeyValueSchemaImpl (#15122)",
  "b1225fec": "TableView should cache created readers (#15178)",
  "83cd7911": "[fix][java-client] Fix performance regression with message listener (#15162)",
  "9b36dcd7": "Add a cache eviction policy：Evicting cache data by the slowest markDeletedPosition (#14985)",
  "94cc46a6": "[fix][jdk17] remove illegal access warning and enable reads optimization on jdk17 (#14999)",
  "6e129668": "[DOC]optimization concepts-messaging retry letter topic (#14498)",
  "b0213b22": "Support dynamic update cache config (#13679)",
  "82644145": "[Flaky-test] Fix metadata cache flaky test (#14373)",
  "2e16b434": "Fix metadata cache inconsistency on do refresh (#14283)",
  "9e73f9c6": "[doc] Adjust the logic before and after, add a small optimization when installing manager (#13994)",
  "5886327b": "Add test to ensure correct zk children cache invalidation (#14178)",
  "9165aed7": "[Metadata] Let entries expire in the metadata caches (#14154)",
  "f48b53d3": "[Transaction] Resolve the performance bottleneck of TransactionBufferHandle (#13988)",
  "0cd94628": "Release old bundle from ownership cache when operator split bundle (#13678)",
  "634ce83a": "[Doc] add explanations for performance metrics (#13574)",
  "fb4e2c8c": "Optimize the debug log that affects performance, and unify the style (#13498)",
  "c531c1ca": "[Transaction] Fix performance (#13253)",
  "2209d2a1": "PIP-45: Removed old ZK caches implementations (#13075)",
  "1b20a97d": "[broker]Optimize topicMaxMessageSize with topic local cache. (#12830)",
  "2b57373d": "Remove -XX:-ResizePLAB JVM option which degrades performance on JDK11 (#12940)",
  "09571b9e": "[website][upgrade]feat: website upgrade / docs migration - 2.6.3 / security/performance/clients (#12862)",
  "2bc44993": "Ensure cache is refreshed (and not just invalidated) after a store write (#12788)",
  "c961bb6d": "[website][upgrade]feat: docs migration - 2.6.4 / security/performance/client (#12805)",
  "1bf80d39": "commit chapter performance (#12762)",
  "1ea381d0": "[Code optimization] Delete unused import (#12690)",
  "ed1cd802": "[website][upgrade]feat: docs migration - 2.7.1 / performance (#12611)",
  "65e5b49f": "doc optimization for initialize-cluster-metadata (#12567)",
  "b4d05ac1": "Fix the read performance issue in the offload readAsync (#12443)",
  "2c2922d6": "Ensure the ownership cache lock expiring triggers an unload (#12194)",
  "f81824d8": "Added test for bundles cache invalidation (#11408)",
  "38bba54a": "Unit test to verify metadata cache consistency across brokers. (#11202)",
  "5819242e": "Reduce the probability of cache inconsistencies (#11423)",
  "798b34fd": "[Issue 10860][pulsar-metadata] Ensure metadata cache consistency across brokers (#10862)",
  "4b86c26e": "[Transaction] Transaction admin api get slow transaction metadata. (#10701)",
  "00677bfc": "Ensure all the ReadHandle gets properly closed on cache invalidation (#10659)",
  "bdb09902": "[Transaction] Transaction log low water mark optimization. (#10422)",
  "da2b323a": "performanceReader add aggregate stats (#9276)",
  "c6158e3d": "Improve localrun performance by using JVM options more suited for it (#10273)",
  "3e5fbcea": "[WebSocket Client] WebSocket url token param value optimization (#10187)",
  "7e834066": "Fix entry cache size update logic so it won't go negative. (#10225)",
  "4f2e4513": "Tune GitHub Runner VM options to increase working RAM and improve performance (#10239)",
  "df1a0242": "Don't cache the auth-data; get it from the connection (#10203)",
  "7d1b684d": "Add TestNG listeners for 'fail fast' and resource cleanup (#10195)",
  "907fcb5b": "change log level for topic polices cache not init exception (#10059)",
  "cee6377d": "[Broker] Fix race condition in BrokerService topic cache (#9565)",
  "cdef6446": "Fixed NPE and cache invalidation in leader election (#9460)",
  "fed5cd3e": "[docs] Update performance tuning reference (#9384)",
  "639b45ab": "[pulsar-broker] clean up topic that failed to unload from the cache (#8968)",
  "18f539ea": "Fix performance issue caused by invalid logging configuration (#8908)",
  "32ea62fd": "improve performance of checkPublishRate() (#8623)",
  "37453b5f": "Fix zk cache expiration check (#8458)",
  "bebce4f4": "[pulsar-broker] Refresh ZooKeeper-data cache in background to avoid deadlock and blocking IO on ZK thread (#8304)",
  "9d740075": "fix: intermittent test failure due to invalid cache (#8405)",
  "d8f319ea": "[pulsar-broker] fix: use correct configuration for zk-cache expire time (#8302)",
  "38429e1e": "[Fix] Should not cache the owner that does not belong to current server (#8111)",
  "bc5be217": "Improve the performance of toString for MessageIdImpls (#7820)",
  "1e8f4b6b": "make zk cache executor pool size configurable (#7794)",
  "b7cfa98a": "Restore maven cache to github workflows (#7651)",
  "cf6e28f7": "Use Github actions cache for Maven deps (#7527)",
  "f8080f4e": "[C++] Show bytes throughput for performance tests (#7371)",
  "df0d189d": "Various fixes and optimizations for processing assignments in function worker (#7338)",
  "1a46666e": "Add a pulsar perf document and performance section (#6970)",
  "f4fc7994": "[ISSUE 6563][Broker] Invalidate managed ledgers zookeeper cache instead of reloading on watcher triggered (#6659)",
  "1eb4bb8e": "[pulsar-broker] support configurable zk-cache expiry time (#6668)",
  "c555eb7c": "Improve Key_Shared subscription message dispatching performance. (#6647)",
  "2ed2eb86": "[Flink-Connector]Get PulsarClient from cache should always return an open instance (#6436)",
  "e1f3409f": "When building docker image, copy tarball at the end to use build cache (#5334)",
  "aa83ad32": "Fix topic owner check while namespace bundles cache invalidate. (#5919)",
  "22a70c2b": "[pulsar-io] improve hbase sink performance (#5705)",
  "7c3f3bdc": "Expose metrics of Caffeine caches (#5320)",
  "dc95abf4": "[pulsar-broker] Fix: invalidate cache on zk-cache timeout (#5298)",
  "a4cfcd78": "add different cache flags for size() and toString() (#5040)",
  "d22e0143": "Reload zk cache asynchronously (#5049)",
  "0367f5f0": "Fix StructSchema reader cache loading logic",
  "1b304a94": "By default, auto configure the size of Bookie read/write cache (#4297)",
  "db66df2d": "Support performance tool to print aggregated throughput. (#4245)",
  "eff28749": "C++ connection should fail fast if the TLS handshake fails (#4218)",
  "e9619fa5": "Avoid payload copy when inserting into managed ledger cache (#4197)",
  "f5c7b22f": "Allow to configure the managed ledger cache eviction frequency (#4066)",
  "d85b0c93": "[Issue#4159][pulsar-testclient] Added ['-p','--max-outstanding-across-partitions'] parameter to the producer performance benchmark (#4160)",
  "479f067b": "[pulsar-broker] clean up producer/consumer result from connection-cache (#4145)",
  "ccea6245": "Reduce number of hashmap sections for ledger handles cache (#4102)",
  "c3e8a33a": "Optimizing performance for Pulsar function archive download (#4082)",
  "b50e0eba": "improve data-generator source performance (#4058)",
  "a057a143": "[pulsar-broker] Fix deadlock: add zk-operation timeout for blocking call on zk-cache (#3633)",
  "f1be6bda": "Fix the loop of consumer poll, so the consumer can cache more than one record in signal poll. (#3852)",
  "e183abae": "CPP Client - changing min cmake to 3.4 and adding flag for ccache (#3610)",
  "4ec98d83": "Auto-configure managed ledger cache size based on JVM available mem (#3573)",
  "7eca99e4": "Use jackson for serialization and deserialization of json since its faster than gson (#3163)",
  "32d6334d": "more optimizations for sql (#3139)",
  "eab17ad6": "Few optimizations for pulsar sql (#3128)",
  "65592ad2": "cache StorageClient (#3078)",
  "7d2a0127": "Refresh ZK cache based on insertion time rather than access (#2785)",
  "9bf33579": "Make Pulsar Docker have very short ttl cache time so that bookie changes etc are reacted to quickly (#2774)",
  "1905133e": "Issue #2638: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (#2644)",
  "acc26c9e": "Introduce warmup period in performance producer (#2338)",
  "f0d09077": "When preparing pulsar-build Docker image, ensure apt-get update is not cached (#1689)",
  "070a9f69": "Clean the local cache of downloaded packages if it already exists (#1674)",
  "a2cf9183": "Used defaults for Netty allocator used in entry cache (#1465)",
  "16b448f6": "Replace cached data key from the map if present already (#1417)",
  "9503274b": "Fixed ZK cache test exectutor configuration. (#1343)",
  "920277be": "Introduce `functioncache` and `functioncontainer` (#9)",
  "a6e02bf7": "Include BoringSSL native implementation for faster TLS (#1094)",
  "f551c4f6": "Update bundle-cache on split-bundle and avoid disabling main bundle (#822)",
  "de24aaf1": "support tls in performance tool (#662)",
  "052ca00a": "fix: intermittent test by invalidating cache to read fresh data (#642)",
  "73d50b6c": "Local-policies cache should copy global-policy data and return combined result (#593)",
  "9a8098fb": "ZookeeperCache children-cache invalidation on watch-event and LoadManager handling if availableBrokerCache is not updated (#550)",
  "c7d982be": "Add authetication by http header in WebSocket performance tool (#505)",
  "d9c92e72": "Shutdown zk cache executor on service shutdown (#487)",
  "b47df828": "Move websocket performance client and fix bugs (#430)",
  "09b6bb0c": "handle zkCache failure: invalidate cache and zk-getData failure (#377)",
  "19399e0f": "Delete local-policies and invalidate cache when namespace is deleted (#352)",
  "ea85d954": "Updated CPP Travis build script to use cached dependencies. (#278)",
  "b1dd7f9f": "Fixed Discovery Service initialization of global zk cache (#203)",
  "1868d2ff": "Async ZooKeeper cache implementation (#76)",
  "4e1bde9f": "In unit tests, do ZK cache reloads in same thread, to avoid race conditions (#31)",
  "9f7461cd": "Mocked timeout tests failing on slower build machine",
  "f09d5798": "Invalid ZK cache after updating property and cluster metadata"
}, "QLExpress": {
  "e9469df": "Merge pull request #221 from tiandankanfeng/branch_security_and_efficient_local_cache",
  "bbb7412": "feat: remove entry and do not cache fault instruction.",
  "44b514e": "feat: exclude cache get method.",
  "30fcca6": "feat: use MapEntry and ensure cache test stability.",
  "48d38ef": "Merge remote-tracking branch 'origin/branch_security_and_efficient_local_cache' into branch_security_and_efficient_local_cache",
  "38274fe": "feat: add get method for cache.",
  "87bc791": "feat: exclude replaceable pom and add constructor for cache.",
  "5f921d8": "//bugfix处理ExpressRunner嵌套情况下，cache还原的问题"
}, "QMUI_Android": {
  "804a5cd": "cache",
  "fcede26": "use count for performance",
  "b120c0b": "cache all view for child fragments.",
  "6053171": "bugfix: clear cache views in onDestroy. #624",
  "4b67f12": "bugfix: remove animator to improve performance",
  "a4c86da": "fix: getRealScreenSize 去掉 cache 防止折叠屏切换屏幕时无法更新宽高信息",
  "1472841": "fix: Neithor pendingSelectedIndex nor selectedIndex is current after fast scrolling ViewPager multiple times",
  "cfddcb0": "bugfix: sometimes the result of getRealScreenSize is wrong in the orientation, so we can not cache it",
  "e82b085": "NPE protection with some minor optimizations",
  "0f8e702": "cache the result of onCreateView(). #373, #379",
  "7ccd7ad": "optimization bottomSheet",
  "1c74715": "optimization dialog",
  "27cd184": "optimization",
  "371100b": "optimization",
  "3c2c55a": "QMUIRadiusImageView optimization"
}, "QNotified": {
  "0cc7627": "Add fast-fail cache for DexKit",
  "8575d37": "Try to fasten Azure Pipeline build (#1151)",
  "24e9e6b": "ci: fix can't restore cache (#1123)",
  "efa0226": "Add direct-accessible package name cache",
  "9623e98": "[skip ci] faster cache",
  "e2bb707": "[skip ci]cache",
  "f4f0d30": "performance improvement",
  "238aa6e": "fix crash after reset cache"
}, "QR-Code-generator": {
  "cb46435": "Improved the memoizer by adding fast path and slightly simplified existing logic, updated copyright year in readme document.",
  "f4d3257": "Updated readme because C supports ECI segments (due to commits d126f7b1ed39 and 66f650022018), and Java supports kanji optimization (due to commit 8800acf003cd).",
  "8800acf": "Revamped Java QrSegmentAdvanced code to implement optimization of kanji text, and simplify existing algorithms.",
  "f8e5927": "Simplified and renamed addEccAndInterleave(), based on the slow QR library C version algorithm.",
  "71cc657": "Updated cache logic to be exception-safe."
}, "QtScrcpy": {
  "": ""
}, "quarkus": {
  "d410876b3": "Merge pull request #33134 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.15.0",
  "9380d0945": "Merge pull request #32999 from mkouba/qute-dev-mode-fix-extmet-optimization",
  "d7842f983": "Adds infinispan caches configuration resource build property",
  "4d3a54329": "Qute build steps - refactoring and performance improvements",
  "3c2a8c4d0": "Minor configuration-cache related fix for `buildNative`",
  "715ea8ba0": "Merge pull request #32508 from snazy/gradle-conf-cache",
  "717e2f2ab": "Gradle-Plugin: Do not let Gradle build fail w/ configuration cache",
  "07f30aadb": "Upgrade Oracle DB container images to use the slim-faststart variant",
  "6048280a1": "Merge pull request #32255 from geoand/redis-cache-rest-client",
  "f954e5f3f": "Ensure redis-cache does not cause load value on the wrong executor",
  "f10a208b0": "Make `QuarkusBuild` not pollute Gradle's build cache",
  "286cf2c56": "Merge pull request #31865 from cescoffier/redis-cache",
  "3a1260954": "Add support for pluggable backend in quarkus-cache",
  "dd28f10de": "Merge pull request #31910 from geoand/cache-rest",
  "35e5c33a6": "Migrate test cache test to RESTEasy Reactive",
  "5c58a03dd": "Container runtime detection cache and rootless check",
  "6c4b4bc99": "Merge pull request #31795 from geoand/cache-polish",
  "ea3468ae7": "Update cache doc and Javadoc to use constructor and singleton",
  "3a328dc85": "Merge pull request #31755 from mkouba/cache-getasync-optimization",
  "437b15d59": "Merge pull request #31728 from gsmet/cache-impls",
  "4d5dd43a9": "Add workflow_dispatch trigger to allow manually running fork cache creation job if desired",
  "429c44573": "Dont build if cache-hit occurs on push to fork main, the cache wont be updated.",
  "8746898eb": "Register additional cache implementations for reflection",
  "a633de019": "Merge pull request #31633 from gwenneg/cacheconfigmanager-doc-typo",
  "2767f393c": "Merge pull request #31424 from cescoffier/devui-cache",
  "5859357e0": "Scheduler - Quartz FireTimeTest - extend assertion offset for slow CI",
  "1ae51eb30": "Implement the cache card for the new dev ui",
  "a892a3ee8": "Use more performance toArray variant in RESTEasy Reactive",
  "c23c65b77": "Integration tests: fix 'infinispan-cache-jpa' module",
  "b2fefc3ff": "Integration tests: fix the 'cache' module",
  "4486712bc": "Optimize bytecode recording test performance",
  "46511e37c": "Merge pull request #30826 from gsmet/cache-metrics",
  "743d6d55c": "Caffeine - Automatically register metrics cache impls if Micrometer is around",
  "32da1f14e": "Fix comment about Caffeine optimization",
  "97ba0c363": "Apply some minor performance tweaks to MappersKey",
  "a5e78b79a": "Merge pull request #30778 from gsmet/liquibase-mongodb-optimizations",
  "f6fbc90f4": "Merge pull request #30719 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.14.2",
  "77e17c378": "Merge pull request #30669 from gsmet/faster-doc-preview",
  "d72d355a5": "Allow global default cache configuration",
  "84f589e87": "Merge pull request #30469 from mkouba/qute-cache",
  "03cb806be": "Merge pull request #30341 from mkouba/cache-deployment-spi",
  "f8f7c4906": "Merge pull request #30316 from mkouba/cache-invalidate-predicate",
  "01a0106b4": "Merge pull request #30258 from gwenneg/cache-doc-typo",
  "e98290659": "Fix quarkus-cache doc typo",
  "71246e390": "Change quarkus-cache config phase from BUILD_TIME to RUN_TIME",
  "3c0be9394": "Fix memory leak in Agroal local connection cache for Netty's FastThreadLocalThread",
  "43157cbfd": "Update the performance guide with respect to Quarkus default GraalVM GC",
  "08013cae6": "Merge pull request #30116 from gwenneg/quarkus-cache-status",
  "9413966ac": "Change quarkus-cache extension status to stable",
  "2d45ce318": "Qute generator - minor cleanup and optimization",
  "df5d507c9": "With the latest Redis release, the geo commands may return doubles containing un-parseable characters. This is due to an optimization (https://github.com/redis/redis/pull/11552/files) added in the Redis:7 stream.",
  "86e660026": "fix issue #29770: always store raw model into cache",
  "2ce7349f0": "Add fast path to same host logic",
  "9c5c1f803": "Add fast path to same origin check",
  "544b042fc": "Merge pull request #29464 from geoand/csrf-optimization",
  "5e5d057bc": "Merge pull request #29437 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.14.1",
  "3d1af9afa": "Type cache pollution affecting also Types class",
  "f639f405f": "Prevent type cache pollution in Arc's BeanTypeAssignabilityRules",
  "c10a368e8": "Merge pull request #29111 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.14.0",
  "b58b24fa5": "Merge pull request #29044 from geoand/cache-type-polution",
  "4334c57a5": "Prevent https://bugs.openjdk.org/browse/JDK-8180450 for cache code",
  "f1876adb8": "Update the classloading reference guide to mention fast-jar vs legacy-jar",
  "ca41040dc": "Merge pull request #29045 from mkouba/qute-typecache-pollution",
  "3573ab9d8": "Qute - try to avoid type/cache pollution in the EvaluatorImpl",
  "972938241": "Merge pull request #28874 from geoand/cache-alloc",
  "57c1cb593": "Qute - micro-optimizations",
  "eb352f835": "Merge pull request #28550 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.4.20221012",
  "bdbce007e": "parent 9a5bc36beb5f06e762397e52adde371e47182e6c author Bartosz Markowski <bmarkowski@fastmail.com> 1650397767 +0200 committer Justin Lee <evanchooly@redhat.com> 1663167910 -0400",
  "c18c4d088": "Create Infinispan caches on first access with the minimal config if they don't exist",
  "a880f2bb4": "Merge pull request #27835 from quarkusio/dependabot/github_actions/actions/cache-3",
  "fd97d3b6c": "Bump actions/cache from 2 to 3",
  "1d613bf7f": "Merge pull request #27742 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.4",
  "154a4a27d": "Merge pull request #27341 from karesti/create-caches-infinispan-properties",
  "8c7cce794": "Merge pull request #27588 from Sanne/oracle-faststart",
  "676133641": "Switch Oracle DB container image to new 21-slim-faststart flavour",
  "5e6764421": "Apply minor optimization to KubernetesClientProcessor",
  "07d341c55": "Create caches in Infinispan using the application.properties",
  "a1e8eb39a": "Merge pull request #27488 from gastaldi/cache_put",
  "4acdabb09": "Merge pull request #26485 from aloubyansky/runnerjar-tests-to-use-fast-jar",
  "e8ff00a03": "Make runnerjar tests to use fast-jar instead of the legacy-jar format",
  "c07a764d3": "Merge pull request #26194 from glefloch/fix/gradle-cache",
  "a94485939": "Cache Gradle dependency cache to speed up CI",
  "caad913ec": "Add FAQ entry on detecting performance issues in production",
  "b2c2e59a2": "Merge pull request #26135 from gastaldi/fail_fast",
  "912fa8019": "Put back fail-fast: false",
  "d921f9752": "Merge pull request #25844 from gwenneg/issue-23515-cache-key-generator",
  "58371c902": "Leverage Gradle build cache in integration tests",
  "8e15ed6f6": "Merge pull request #25647 from mkouba/qute-build-steps-optimizations-02",
  "fe2bd46ed": "Merge pull request #25623 from mkouba/qute-build-steps-optimizations-01",
  "2bfe349c2": "Qute - optimizations of build steps - round 1",
  "11176902d": "Merge pull request #25612 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.3",
  "6fc6c8532": "Adding debug log when adding entry into cache in sync calls",
  "871675fb8": "Merge pull request #25193 from geoand/rr-load-class-performance",
  "7494b3a14": "Merge pull request #24966 from geoand/minor-optimizations",
  "245d9d59b": "Merge pull request #24589 from geoand/rest-client-optimization",
  "48bc18792": "Exclude everything from org.hibernate:quarkus-local-cache to avoid javax transitives",
  "3aeccd43e": "Merge pull request #24168 from famod/formatter-cache-version",
  "ae2c1b1b5": "Make formatter and impsort cache version-specific",
  "e5394bf73": "Build on other OSes Use actions/setup-java's cache",
  "18ee324d7": "Fix issue with fast-jar loading of top-level directories",
  "e08ebedf8": "Merge pull request #23222 from Postremus/faster-appmodel-serialization-uid",
  "8ec045ab6": "Merge pull request #22856 from gwenneg/cache-dev-ui",
  "d45c8901e": "Fix cache clear from dev UI",
  "4bd4e90e0": "Merge pull request #22885 from gwenneg/issue-22538-cachename-cache-creation",
  "b52453998": "Allow cache creation from CacheName annotation",
  "a350d942f": "Merge pull request #22854 from gwenneg/cache-traces",
  "c03287f8f": "Log cache keys content and trace cache methods",
  "2e4a786e0": "Merge pull request #22683 from gwenneg/issue-22431-cache-invalidate-non-blocking",
  "376d63108": "Merge pull request #22804 from mkouba/qute-clear-cache",
  "ea93b01eb": "Improve GRPC server blocked performance",
  "0a153c8fb": "Support non-blocking cache invalidation",
  "b335c8f90": "Qute - few micro-optimizations",
  "03d3f461e": "Merge pull request #22401 from gwenneg/issue-22147-cache-metrics",
  "54fb5185b": "Qute - cleanup and minor optimizations",
  "473e1ea1b": "Merge pull request #22414 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.13.1",
  "fc3744ea8": "Record cache metrics with Micrometer",
  "ee7e6c905": "Merge pull request #22135 from Postremus/faster-compiler-init",
  "cedd6660c": "Merge pull request #22136 from gsmet/fix-cache-doc",
  "005abc069": "Adjust @RegisterForReflection recommendation in cache.adoc",
  "85316bccf": "Merge pull request #22128 from Postremus/faster-aabs2",
  "f36f6d192": "Merge pull request #22121 from gsmet/cache-native-info",
  "63d4f601d": "ArcContextProvider optimizations",
  "c3b3a4640": "Merge pull request #21936 from sberyozkin/defaul_token_cache_not_injected",
  "b71f6d369": "Only print stacktrace of conflicting buildsteps if wanted The quarkus-core-builder detects conflicts between buildsteps, and throws exception for that. This exception also included the stacktrace of the original caller of the build method. However, this pointed to a big lambda chain. Since this stacktrace was created for each buildstep, this got costly fast.",
  "c018702fe": "Qute - cache SectionHelperFactory config by default",
  "26cc6102e": "Apply small optimization to Resource Method handler population at startup",
  "ab1c2ed72": "stream().anyMatch should be faster than .filter().count()",
  "48b02fc07": "Apply micro-optimizations to RESTEasy Reactive startup",
  "43886370a": "Apply micro-optimizations to Arc startup",
  "d5231687c": "Clear cached devservices properties on close",
  "45bd0a4db": "Apply small optimization to RESTEasy Reactive startup",
  "ac07c30c0": "Apply tiny micro-optimization to Config Source",
  "1252f174b": "Apply small optimizations to CL setup",
  "4b9e90f8b": "Qute - fail fast if template extension class contains no suitable method",
  "88af4fa23": "Merge pull request #20710 from pawch/quarkus-cache-adoc-fix",
  "ef3853098": "Update cache.adoc",
  "3ef4e5d9a": "ArC build time optimization fix",
  "cca576a86": "Merge pull request #20209 from sberyozkin/oidc_introspection_userinfo_cache",
  "147063b3d": "Fix race conditions in OIDC cache",
  "f35be09fe": "Support for TokenIntrospection and UserInfo cache",
  "1e90ec305": "Deployment performance improvement",
  "238b37f0f": "Fix flaky GetTransactionLifecycleTest caused by slow CI",
  "0580569c8": "Merge pull request #19742 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.5",
  "e5ac1e25a": "Clear Avro cache on reload",
  "08afe29cd": "Merge pull request #18867 from cescoffier/fix-windows-cache-directory-warning",
  "2e040b521": "Add a custom connection cache to Agroal",
  "4a5221633": "Avoid trying to set permissions on the cache directory on windows.",
  "6629d181f": "Merge pull request #18467 from aloubyansky/registry-clear-cache",
  "ffa6e30c7": "ArC micro optimizations",
  "db446d756": "Merge pull request #18466 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.4",
  "db5a7637f": "Avoid trying to start devservices for DuplicateIdWithParentTest (slow)",
  "987a373c6": "Infinispan extension upgrades ACTIONS.md ADOPTERS.md adr bom build-parent COMMITTERS.adoc CONTRIBUTING.md core coverage-report dco.txt DECISIONS.adoc devtools docs extensions independent-projects integration-tests jakarta LICENSE.txt MAINTAINERS.adoc mvnw mvnw.cmd pom.xml README.md relocations SECURITY.md tcks test-framework TROUBLESHOOTING.md update-extension-dependencies.sh update-version.sh Upgrade to 12.1.6.Final ACTIONS.md ADOPTERS.md adr bom build-parent COMMITTERS.adoc CONTRIBUTING.md core coverage-report dco.txt DECISIONS.adoc devtools docs extensions independent-projects integration-tests jakarta LICENSE.txt MAINTAINERS.adoc mvnw mvnw.cmd pom.xml README.md relocations SECURITY.md tcks test-framework TROUBLESHOOTING.md update-extension-dependencies.sh update-version.sh ISPN-13146 Improve the documentation and defaults ACTIONS.md ADOPTERS.md adr bom build-parent COMMITTERS.adoc CONTRIBUTING.md core coverage-report dco.txt DECISIONS.adoc devtools docs extensions independent-projects integration-tests jakarta LICENSE.txt MAINTAINERS.adoc mvnw mvnw.cmd pom.xml README.md relocations SECURITY.md tcks test-framework TROUBLESHOOTING.md update-extension-dependencies.sh update-version.sh ISPN-12780 Protobuf schema registration property ACTIONS.md ADOPTERS.md adr bom build-parent COMMITTERS.adoc CONTRIBUTING.md core coverage-report dco.txt DECISIONS.adoc devtools docs extensions independent-projects integration-tests jakarta LICENSE.txt MAINTAINERS.adoc mvnw mvnw.cmd pom.xml README.md relocations SECURITY.md tcks test-framework TROUBLESHOOTING.md update-extension-dependencies.sh update-version.sh ISPN-13137 Avoid creating the Remote cache without configuration",
  "411cb171b": "Qute - fix performance regression caused by Results.NotFound",
  "fbf4cc98c": "Use a ClassValue based cache to optimise header encoding of non-string types",
  "b2869764f": "Apply some micro-optimizations to logging setup code",
  "707153c5f": "Merge pull request #17661 from geoand/rr-cache-doc",
  "d23ac5291": "Use proper parent first artifacts set in fast-jar",
  "9245ad39e": "Merge pull request #17392 from essobedo/classloading-parent-first-fast-jar",
  "8aeea2afa": "Allow to define parent first artifacts in fast jar mode",
  "16e8d7ef5": "Change cache key for deploy snapshots build",
  "6978921af": "Merge pull request #16608 from gwenneg/issue-16607-cache-emitted-uni-item",
  "acd116b0b": "Merge pull request #16623 from phillip-kruger/dev-ui-cache",
  "d762cdcf4": "ArC - improve the performance of intercepted subclasses",
  "2dc8bc898": "Merge pull request #16490 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.12.3",
  "76ceadcb7": "Merge pull request #16436 from FroMage/faster-all-config",
  "b6ddd49d9": "Merge pull request #16180 from mkouba/qute-micro-optimizations",
  "86bf33135": "Log message on slow restarts",
  "cf29351b3": "Vert.x 4: Fix vert.x cache location in Lambda HTTP",
  "ace24ab19": "Qute - minor cleanup and micro optimizations",
  "df695f35e": "Fix issue with fast-jar not working using OpenShift and Docker strategy",
  "4e9850330": "Merge pull request #16109 from quarkusio/dependabot/maven/com.fasterxml-classmate-1.5.1",
  "037023ffe": "Enable formatter & impsort for quickly, cache outside of target",
  "ba778a7e3": "Merge pull request #15614 from michalszynkiewicz/rest-client-performance-improvements",
  "ed0ac8830": "Resteasy Reactive MicroProfile Rest Client performance improvements",
  "eb98535ef": "Merge pull request #15541 from cescoffier/vertx-cache-wolrd-writable",
  "e00468771": "Fix Polyglot with fast-jar",
  "394286eca": "Cleanup the created (random) cache directory during shutdown",
  "557d96ced": "Merge pull request #15463 from aloubyansky/fast-jar-dir-resources",
  "181597b94": "Create /tmp/vertx-cache and configure it to be world-readable and writable. Under that directory, another random directory is created that is only readable and writable from the current user.",
  "50b6ee7a8": "CI: Align ci-fork-mvn-cache to initial build",
  "ce49e2221": "Integrate Fernflower decompiler into Quarkus build of fast-jar",
  "008bfd31b": "Merge pull request #14753 from gsmet/fast-jar-default-2",
  "b0a1c8097": "Merge pull request #14833 from patriot1burke/aws-lambda-fast-jar",
  "ffd891cfd": "Merge pull request #14780 from gwenneg/cache-rest-client-performance",
  "137a026b0": "[#13169] Check if src/main/java exists before attempting to copy sources into source cache",
  "28dd9b4d5": "Update the documentation for the switch to fast-jar as default",
  "57f5f1411": "Use fast-jar as default packaging type",
  "25186e322": "Fix QuarkusProdModeTest to work with fast-jar packaging",
  "b46caff93": "Improve cache performance with MP REST Client",
  "f26c11c04": "Merge pull request #14735 from famod/fix-ci-fork-mvn-cache",
  "cbe293479": "CI: Fix cancel-previous-runs in ci-fork-mvn-cache",
  "d1703739b": "Merge pull request #14567 from geoand/fast-jar-doc",
  "ad07cad90": "Add note on how to run fast-jar to getting started guide",
  "40af214dd": "Merge pull request #14636 from gwenneg/cache-interceptor-eager-computation",
  "ecccff6c7": "Move generated app-cds file into quarkus-app directory for fast-jar",
  "1f7985050": "Merge pull request #14321 from gwenneg/cache-manager-synthetic-bean",
  "1cb6edf62": "Merge pull request #14282 from gsmet/fix-npe-cache",
  "edee0ff4d": "Merge pull request #14267 from gwenneg/stop-instantiating-empty-cache-name",
  "e002b6922": "Stop systematically creating a cache with an empty name",
  "787808125": "Merge pull request #14208 from gwenneg/clean-cache-doc",
  "ccb5bfe8b": "Remove deprecated cache doc information",
  "547eff35e": "Ensure logging-json works properly with fast-jar",
  "efa405f87": "Merge pull request #14124 from famod/fork-mvn-cache",
  "be1f01b1d": "Merge pull request #14136 from gwenneg/noopcache-exceptions-throw-test",
  "a4d003ca2": "Merge pull request #14111 from gwenneg/immutable-cache-interception-context",
  "e9aa970c1": "CI: Introduce job to populate Maven cache in forks",
  "3e9763d74": "DEV Console: support for cache",
  "23146f097": "Merge pull request #13991 from gwenneg/issue-8221-restclient-cache-compatibility",
  "cf112bb2d": "Merge pull request #14094 from gwenneg/fix-cache-concurrency-test-instability",
  "862ba9cbe": "Fix cache ConcurrencyTest instability",
  "1da99b6ab": "Fix cache compatibility with rest-client",
  "88cd97ed0": "Merge pull request #14054 from gwenneg/cache-concurrency-test",
  "8c4404fca": "Merge pull request #14032 from gwenneg/cache-exceptions-management-refactor",
  "14cb82915": "Test cache synchronous value loader execution",
  "c3b491566": "Remove microprofile-context-propagation-api runtime cache dependency",
  "fe1e19003": "Merge pull request #13967 from mkouba/qute-cleanup-and-optimizations",
  "3f140d7f0": "Qute cleanup and minor optimizations",
  "99b6b43bc": "Also handle @JsonView on slow path in RESTEasy Reactive",
  "3f816ad7b": "Merge pull request #13296 from gwenneg/issue-8140-cache-injection",
  "ddd838252": "Introduce cache injection and NoOpCache",
  "8a17324e4": "Merge pull request #13545 from gwenneg/issue-8221-cachekeyparameterpositions-interceptor-binding",
  "619785b62": "Added link to cache quickstart in cache guide",
  "6503280ef": "Make tiny performance improvement in media type matching",
  "d96beacf0": "Improve performance of Accepts / @Produces compatibility check",
  "9acf58772": "Apply another minor performance improvement",
  "bdb527283": "Apply tiny performance improvement for the fast path",
  "6625acedd": "Apply minor performance optimization",
  "77d7e4cf1": "Use slightly faster vertx header encoding",
  "058f22f90": "Apply minor optimizations JAX-RS Response handling",
  "32aadcddf": "More performance improvements",
  "58f62a416": "Switch to the Vertx JSON writer (much faster than Jsonb), treat providers as stateless beans",
  "de1efce25": "Merge pull request #13410 from gwenneg/issue-13399-cache-exception-handling",
  "9e3dd92a9": "Fix cache exception handling",
  "3e5fae85a": "Wrong comparison in cache guide",
  "f163e3758": "Merge pull request #13244 from gwenneg/issue-13158-cache-with-context-propagation-deadlock",
  "72ea4e8a4": "Compute cache value on calling thread to fix thread starvation",
  "b8c2f922b": "Reset internal caches of RunnerClassLoader at end of bootstrap",
  "e4b1b736b": "Cleanup the local cache of redis connections after closing them",
  "8cb5780b1": "Release the Hibernate ORM metadata caches before recording its state",
  "87a9dd54d": "Add Caffeine cache implementations required by users",
  "b972eb40b": "Request scope performance improvements",
  "4f3230551": "Merge pull request #12712 from gsmet/ci-caches",
  "292e9764a": "Go back to the official actions/cache@v2",
  "86f1b9e0e": "Use a Maven cache for snapshots deployment",
  "af12a6764": "Only refresh the CI cache monthly",
  "ef877bb04": "Merge pull request #12490 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.11.3",
  "ab8ba2627": "Update Mutiny to 0.9.0 (performance fix)",
  "62a37ca68": "Avoid copying sources directly in the source cache",
  "80d9d4653": "Merge pull request #12294 from galderz/t_sourcecache_container_12283",
  "41f948a91": "Merge pull request #12226 from mkouba/qute-cache-expr-resolvers",
  "f7126b78e": "Create source cache when building native in container #12283",
  "d5885c0cf": "Qute: bunch of performance improvements",
  "17acb0479": "Fix Sentry usage with fast-jar",
  "39db62d99": "Update instructions to set fast-jar flag in codestarts",
  "60de9b9c0": "Update instructions to set fast-jar flag",
  "97011ef47": "Fix the fast-jar suffix",
  "9d949588f": "Merge pull request #11621 from glefloch/fix/gradle-native-output-cache",
  "8b69b078a": "Work around Caffeine warnings during cache computations",
  "31366b704": "Merge pull request #11401 from gwenneg/cache-exceptions-management-test-coverage",
  "732d7ac96": "Improve tests related to exceptions thrown during cache computations",
  "34f3ebffb": "Throw ExecutionException cause during cache computation",
  "b9979aa55": "Merge pull request #11271 from gwenneg/issue-8140-move-cache-lock-timeout-logic",
  "0ce7f22b3": "Move cache lock timeout logic to CacheResultInterceptor",
  "fb0fd524c": "Merge pull request #11212 from gwenneg/issue-8140-refactor-cache-key-building-logic",
  "7e850f7f1": "Micro-optimization on String comparison",
  "98b0e6509": "ArC - cleanup and optimizations",
  "cce532808": "Refactor the cache key building logic",
  "1a54332ad": "Merge pull request #11139 from gwenneg/issue-11138-cache-extension-enable-flag-property",
  "46fe5fb2c": "Merge pull request #11172 from quarkusio/dependabot/maven/com.fasterxml.jackson-jackson-bom-2.11.2",
  "85a091b94": "Ensure quarkusBuild Gradle task works properly with fast-jar",
  "8eeafbc9e": "Introduce build time flag property to disable the cache extension",
  "44816816b": "Fix cache key in CI",
  "9aaeb9d0d": "Merge pull request #11110 from gastaldi/cache_ci",
  "3da056de7": "Fix cache key in CI",
  "8b69ba033": "Merge pull request #11046 from gwenneg/issue-10436-cache-key-parameters-positions",
  "133263bdf": "Explain in the cache doc that the composite key elements order matters",
  "9ae4b4d0b": "Fix explicit composite cache key elements values",
  "83473ca80": "Merge pull request #10940 from pilhuhn/cache-doc-addition",
  "b0cbab518": "Add support for cache-from in Docker extension",
  "4018e6e87": "Merge pull request #10892 from stuartwdouglas/revert-fast-jar",
  "ba1e38d15": "Revert 'Simplify fast jar dockerfiles by only using a single copy command.'",
  "d7b051012": "Merge pull request #10634 from andreas-eberle/simplify-fastjar-dockerfile",
  "cc4435c0f": "Simplify fast jar dockerfiles by only using a single copy command.",
  "eee411684": "Merge pull request #10622 from tsegismont/db2-cached-ps-deprecation",
  "cf60fa2ad": "Reactive datasource config: cache-prepared-statements is not specific to DB2",
  "eb94b68ee": "Merge pull request #10588 from geoand/jib-fastjar",
  "5df6d61e1": "Fix broken Jib with fast-jar",
  "297a82b73": "Bootstrap workspace discovery: fix infinite loop, pom model cache",
  "601aa53b5": "Merge pull request #10538 from pedroigor/fastjar-work",
  "fe7c6949a": "Merge pull request #10243 from stuartwdouglas/fastjar-work",
  "c27fb267a": "Merge pull request #10419 from stuartwdouglas/docker-fast-jar",
  "001642b5c": "Fix fast-jar Dockerfile",
  "fcabf20e6": "Merge pull request #10369 from mkouba/instance-cache-get",
  "bc14f61fc": "Ignore .cache directories created by the formatter-maven-plugin",
  "fd7730a54": "Set version of org.apache.httpcomponents:httpclient-cache",
  "a49798bc1": "Reactive datasource config: cache-prepared-statements is not specific to any DB",
  "d17ee8cd0": "Merge pull request #10037 from stuartwdouglas/fast-jar-docker",
  "34df2f823": "Add docker support for fast-jar",
  "b89fabe16": "Merge pull request #9813 from stuartwdouglas/faster-class-loading",
  "e6d153a6f": "Minor optimizations",
  "9fb4df8a7": "Merge pull request #9817 from geoand/fast-jar-directory",
  "dffe95751": "Make the directory containing the output fast jar a constant",
  "be757231b": "Make fast-jar work with transformed classes in a default package",
  "6ff99dec5": "Apply minor cleanup to JibProcessor when building fast-jar",
  "5716b830a": "Merge pull request #9564 from geoand/spring-cache-doc",
  "c4232ee13": "Merge pull request #9525 from stuartwdouglas/forced-dep-cache",
  "b5ba13336": "Disable CP cache when using forced dependencies",
  "7db7c0446": "Add a TROUBLESHOOTING.md page with performance related tips",
  "aa291fe7a": "Merge pull request #9358 from mkouba/reactive-route-cache-sec-identity-event",
  "bd1902f71": "Improve getResources performance",
  "9da2a8f52": "Add 10 mins to cache timeout",
  "a43662e47": "OptaPlanner: Fail fast if no constraint implementations are found",
  "97a9a461e": "Fix JibProcessor to work with fast-jar",
  "9299d8206": "issue#8822 Explicitly set the io.netty.machineId system property to prevent potential slowdown during the io.netty.channel.DefaultChannelId initialization",
  "d6a010b87": "Revert 'Improve getResources performance'",
  "7201ad784": "Merge pull request #8968 from gwenneg/cache-doc-context-propagation",
  "ae277ee13": "Add context propagation section in the cache extension guide",
  "02e481fca": "Merge pull request #8813 from stuartwdouglas/proxy-cache",
  "be2302ec3": "Improve getResources performance",
  "5ac2a1986": "Merge pull request #8935 from geoand/cache-timeout",
  "4ff4d795f": "Improve query performance by using BsonDocument.parse",
  "938c7f811": "Merge pull request #8808 from stuartwdouglas/compiler-cache",
  "fac9276bc": "Merge pull request #8227 from gwenneg/issue-8166-cache-context-propagation",
  "f639a91a3": "Propagate context inside quarkus-cache async computations",
  "0e054f48a": "Fix elytron-security performance issue due to missing bean scope",
  "906a479a1": "Another round of small Hibernate Validator startup optimizations",
  "6d293be9a": "Reactive routes - improve @Route method invocation performance",
  "1e6a6a21a": "Merge pull request #8477 from sberyozkin/keycloak_auth_path_cache",
  "fa59427d3": "document the flags to make the full build faster",
  "f9e094f11": "Merge pull request #7727 from rsvoboda/slow.lookup.message",
  "c1f1f9d37": "Enhance slow lookup message to be explicit abour macOS and to mention path for Windows",
  "d2dda06a9": "Merge pull request #7647 from gsmet/failfast-false",
  "d222c185d": "Remove the clean up cache action as the path was incorrect",
  "16f5258ea": "Set fail-fast to false for the JVM builds",
  "4ac9785ac": "Merge pull request #7627 from stuartwdouglas/cache-timestamp",
  "95743741c": "Check timestamp for CP cache",
  "61b3ae077": "Use launch mode as a prefix for the file used as the app model cache when bootstrapping dev mode and tests. Also rename deployment.cp to app-model.dat to reflect the actual content of the file.",
  "a5d996e95": "Integration tests for disabling 2nd level cache",
  "b51d4e681": "Allow to disable Hibernate ORM 2nd level cache",
  "498e8f181": "Merge pull request #7342 from gsmet/native-fail-fast-false",
  "7f8174ac5": "Set fail-fast to false for the native builds",
  "08e0b8152": "Tuning the timer for cookie renewal, should help on very slow VMs",
  "b5271af63": "Don't fail fast on the JDK matrix build in forked repositories",
  "8f7eeaae3": "Merge pull request #7200 from pivovarit/cache-presize-array",
  "acd38e39a": "Fix class loading performance problem",
  "077be8b06": "Fixes callout and property value cache from doc",
  "5812f7bb8": "Reflections - cache key hashCodes and get rid of Objects.hashCode()",
  "88ca9511c": "ArC - improve performance of Reflections.findX() methods",
  "544b68564": "Rename application-data-caching.adoc to cache.adoc",
  "35ba222ab": "Merge pull request #6793 from gwenneg/introduce-area-cache-label",
  "47b4feff8": "Add area/cache auto-labelling",
  "1ac29b83d": "Merge pull request #3394 from gwenneg/issue-3128-quarkus-cache-extension",
  "b7d8ef57d": "Introduce quarkus-cache extension",
  "5dce48f99": "ObjectStoreEnvironmentBean.getObjectStore should not cache the user.home during build-time",
  "2f2d7ab8c": "Merge pull request #6029 from stuartwdouglas/htmlunit-cache",
  "590a4b00c": "Disable HTMLUnit cache",
  "294fda90d": "Merge pull request #5563 from gastaldi/nocache",
  "da6b9af30": "Display the cached directory names before removing them",
  "784ce3786": "Add a comment explaining what we do in the prepare cache step",
  "695b2c8d3": "Bump cache version for Azure pipeline",
  "fc43fb40f": "Force a cache refresh with a version",
  "b181b6774": "Avoid caching the io.quarkus artifacts in the Azure cache",
  "b453595ad": "Do not cache config object in RestClientBase",
  "575c4dd0b": "Make some micro-optimizations to @RolesAllowed CDI handling",
  "c02b9d7b8": "Make Infinispan embedded cache manager a singleton scoped to an application",
  "b2b6caef3": "Merge pull request #5042 from sberyozkin/oidc_deps_optimizations",
  "463928fef": "fix: make sure that cachedOpenApiPath is always resolved against http rootpath",
  "56158cd0a": "Updating to quarkus-vertx-core and other dep optimizations",
  "70aca8c17": "Merge pull request #5117 from gsmet/restore-maven-cache-tck",
  "bbe193eca": "Restore the Maven cache for TCK runs",
  "a5834feb4": "Disable Netty self-optimization in native mode",
  "e463a4af0": "Do not use cache when loading resources, fixes #4645",
  "47c96644b": "Much faster config table for all-config",
  "b5274fbbb": "Issue #4254 Force java.io.tmpdir = /tmp for native executable to address vertx-cache folder creation problem",
  "2fa1e1796": "Do not cache user.home during build time",
  "85ace8a46": "Merge pull request #3794 from stuartwdouglas/windows-cache",
  "8ce3d73da": "Fix maven cache on windows",
  "2adb9e5b0": "Merge pull request #3734 from stuartwdouglas/maven-cache",
  "adcd3127e": "Make better use of the maven repo cache in CI",
  "9ed405ce9": "Merge pull request #3698 from stuartwdouglas/enable-maven-cache",
  "67c564e9b": "minor optimization to Kogito code generation",
  "9c880392b": "Vertx - make it possible to set cache dir for native image",
  "924dd153c": "feat: change Hibernate cache expiration max-idle type to Duration",
  "50597aaec": "Merge pull request #2553 from stuartwdouglas/optimization",
  "116081155": "Some optimizations that help with reload time",
  "b93ec365c": "Merge pull request #2515 from stuartwdouglas/cache-archives",
  "9324300be": "Some simplifications to the new Hibernate ORM cache config",
  "79dae6593": "feat(#2312): move to using a config map for quarkus.hibernate-orm.cache.* config properties",
  "0df24eb67": "Fix for #1868, bootstrap cache directory should be nested",
  "7bb7273f8": "Merge pull request #1821 from aloubyansky/no-graph-cache-in-build-dir",
  "47026d53e": "move classpath cache from ~/.quarkus to project.basedir/target",
  "0af385a08": "Fix for #1797, ID-based invalidation of the bootstrap CP cache (also introduces the classpath cache format id)",
  "3291a2f02": "Remove JPA cache stress tests",
  "ee95499ad": "Share cache instance between all config source wrappers",
  "7965b1967": "Enforce maven version in the dev mojo and create mojo (so we fail fast)",
  "9193c3bb2": "Update how we measure performance guide. Fixes #1279",
  "cc3765fdf": "Add JBoss Log Manager in JPA cache tests",
  "5fe5f8df3": "Merge pull request #1210 from gsmet/review-cache-doc",
  "8e8d59a9e": "Delete independent-projects/infinispan-hibernate-cache-quarkus",
  "9c5309f47": "Switch the new Hibernate 2LC implementation to quarkus-local-cache as a separate project",
  "476e5da00": "Merge pull request #1092 from mkouba/computing-cache-null-value",
  "54a0e1d8b": "Merge pull request #935 from galderz/t_shamrock_properties_for_hibernate_cache_v2",
  "830a55539": "Support Hibernate cache params via shamrock.* properties",
  "63c2c9ba0": "Merge pull request #896 from galderz/t_hibernate_2lcache_default_size_maxidle",
  "e49ef8428": "Eventually consistent Hibernate cache tests moved to unit tests #731",
  "3ad9a6b8f": "Remove dependency on shamrock-core-deployment from infinispan-hibernate-cache-protean",
  "c0afc8180": "Merge pull request #759 from galderz/t_hibernate_2lcache_docs",
  "342d3d2d9": "Merge pull request #772 from gsmet/comment-cache-assertions-again",
  "c7c408c2e": "Update Hibernate 2L cache documentation",
  "894dad672": "Hibernate 2L cache documentation",
  "c8ff56b7a": "Max idle evictions applied eventually in Hibernate cache impl #731",
  "b75a76435": "Cleanup the pom of infinispan-hibernate-cache-protean",
  "c494f1f51": "Merge pull request #710 from galderz/t_random_2lcache_failures",
  "5d27a98b0": "Align Hibernate cache timeout units",
  "63cfd5534": "Fix Hibernate cache random failures #694",
  "bdced2d2b": "Merge pull request #659 from galderz/t_infinispan_hibernate_cache_v2",
  "cc30b916b": "Remove native image profile for Hibernate cache stress test module",
  "ac10da27f": "Entity not found is valid with Hibernate cache, deal with it",
  "ca97498f3": "ArC - document 'remove unused beans' optimization",
  "6aa62814d": "Hibernate second-level cache impl",
  "e5720ebe1": "ArC - add 'remove unused beans' optimization",
  "04f3f74c1": "Merge pull request #172 from emmanuelbernard/performance-measure",
  "fd1c72e54": "Merge pull request #74 from mkouba/arc-optimizations",
  "cda2eddf8": "Arc - various stuff, mostly perf optimizations",
  "a834c3702": "Arc - cleanup and perf optimizations around programmatic lookup",
  "36bb21894": "Minor cleanup and optimizations",
  "bcb7e0fb8": "Use -XX:TieredStopAtLevel=1 for faster startup",
  "a01020167": "Upgrade Weld, configure unused beans optimization"
}, "quartz": {
  "dae37c8": "MNK-5609 : rewrite this test to not make assumption about the performance of the test machine",
  "daaaf4b": "use maps not caches, source job data map for recovered jobs correctly, fix shutdown test"
}, "quasar": {
  "5f84622": "Revert to x3 clock slowdown",
  "db70540": ":green_heart: Try to fix Travis build by slowing down clock",
  "cc7571e": "Update cache with local actor when registering (see #110)",
  "e747880": ":white_check_mark: add instrumentation optimization tests",
  "568d13a": "refactor instrumentation forwarding optimization",
  "803c2f6": "watch for more exceptions in instrumentation optimization",
  "8bc600d": "Initial optimization logic to skip instrumentation for methods that just forward to a suspendable call (not yet working) [ci skip]",
  "cf25623": "Adapt to faster-queues and Kotlin 0.1-SNAPSHOT",
  "f52e8a2": "Merge branch 'fast-queues'",
  "0fea676": "Merge branch 'master' into fast-queues",
  "1a02842": "Merge branch 'master' into fast-queues",
  "f9f25c9": "Merge branch 'faster-getstack'",
  "2a44101": "Merge branch 'faster-getstack' into extra-classifier-info",
  "6122fb2": ":bug: cache default AsynchronousChannelGroup with scheduler. Close #74",
  "1d23a83": "FiberFileChannel uses a cached thread-pool rather than the fiber scheduler",
  "a8de2a5": "Improve SCArrayQ performance",
  "3121c2d": "Improved queue performance",
  "10c8cdd": "Remove forgotten scissors (big performance hit) in channels.Selector",
  "633410f": "Improve performance of Stack.getStack()",
  "69b9f29": "Pick appropriate fast dynamic record implementation as the default for newInstance",
  "39cca61": "Fixed MAJOR performance regression - stackTraces were being taken even when recording was turned off",
  "b00a5b0": "Fixed race condition in SCArrayQ that resulted from cachedHead",
  "5035637": "SCArrayQ optimizations"
}, "querydsl": {
  "e824f98": "Merge pull request #2756 from querydsl/dependabot/maven/net.sf.ehcache-ehcache-core-2.6.11",
  "628e14a": "Bump ehcache-core from 2.6.0 to 2.6.11",
  "942812f": "Merge pull request #2706 from querydsl/memory-leak-template-cache",
  "f62c06c": "[#2218] Store cached templates weakly",
  "9f859ba": "Java 6/7/8 performance upgrades and migrations",
  "f82ee57": "Wait for slow containers to start",
  "455837f": "Delete unused/outdated 'performance results'",
  "010588f": "Merge pull request #1495 from querydsl/add-slow-category",
  "7abf6ba": "Add ability to mark tests as slow and disable slow tests in default build",
  "b521f03": "Make cached properties transient in querydsl-core",
  "e93e3dc": "Make cached properties transient in querydsl-sql",
  "2c57ec5": "Make cached properties transient in querydsl-spatial",
  "6c99bcb": "Make cached properties transient",
  "53f9288": "Merge pull request #1186 from querydsl/travis-optimizations",
  "5bc9d3e": "Merge pull request #1104 from querydsl/performance-tests",
  "6931541": "Exclude slow performance tests for jenkins and travis",
  "ea66005": "Changed cache key to a List<?> produced by a ImmutableList.Builder.",
  "72d39b9": "Initial commit of a detailed sql listener interface so we can instrument the performance aspects and execution aspects of queryDSL",
  "7efac3e": "Remove delegate methods cache",
  "99b389e": "Use the Benchmark Runner for the normalization performance test.",
  "1edf371": "Merge pull request #733 from querydsl/sql-codegen-faster",
  "903c1a5": "Make test faster",
  "8f7ad73": "oracle paging performance fix",
  "1b5e319": "Add OperatorImpl cache population #481",
  "d5cddcf": "added column metadata to make the sql backend more interoperable with other backends also opens the opportunity for more optimizations and checks (like prohibiting null values for nonnull columns)",
  "f7690c6": "improve performance of QBean.newInstance()",
  "87ec48a": "#346 Add ScrollableResults based optimization for Hibernate",
  "f685d1f": "#341 Fix TemplateFactory cache synchronization",
  "2c5b060": "remove String constant cache",
  "84ec095": "add optimization for expression extraction",
  "5f97d61": "updated h2 dependency and performance test",
  "2952d9b": "add various regex related performance improvements",
  "7c1a601": "added performance test for JPA",
  "4194732": "add varargs related performance tests",
  "8ada51b": "#304 improved Configuration performance",
  "51d4d58": "#304 updated performance test",
  "ee655e2": "#304 improved SQL list performance",
  "cb093bd": "#304 improved quoting check performance",
  "02ef2c3": "#304 improved Normalization performance",
  "1956559": "#304 updated new performance test",
  "230b475": "#304 added new performance test",
  "69fe1e1": "#198 further performance improvements",
  "e1fdad6": "removed querydsl-scala/.cache",
  "d4db0db": "getMap optimization",
  "9fcf0bc": "added synchronization to the static element cache",
  "5dd0b42": "#666442 : added element cache to support incremental code generation with delegates",
  "8ca0475": "added cacheing of constructor",
  "2bdb33f": "added cacheing of values",
  "ca00c68": "Fixed LuceneQuery.listResults, had a logic bug in which totalCount wasn't all of the matched documents, but just the amount of documents matching the limit. Also as a slight optimization lists initialized to resulting size in initialization.",
  "ae50651": "added test for cache",
  "b800192": "added new performance stats",
  "05826bc": "added new performance data",
  "91e910e": "added optimization for like usage",
  "bc9e254": "added optimization for like usage",
  "8d66927": "worked on query optimization",
  "4c7c584": "worked on query optimization"
}, "questdb": {
  "1fb6fcd": "fix(sql): fix COPY performance for pre-created tables with non-default symbol capacity (#3305)",
  "4da7b10": "fix(sql): fix group by performance when selected columns have aliases (#3013)",
  "84a0f5e": "feat(core): use faster hash function in hash tables on ILP hot path (#2868)",
  "19b4ce9": "fix(sql): fix slowness due to redundant disk reads in LIMIT K,N filtered queries (#2849)",
  "a41e43e": "chore(ilp): symbol cache fix (#2760)",
  "0160d11": "fix(http): fix filtered query performance when limit query param is specified (#2748)",
  "4dc191f": "fix(sql): fix slow optimisation of queries with many set operations (#2734)",
  "7d6e448": "fix(ilp): fix variability in ILP performance (#2654)",
  "4e13393": "fix(sql): fix group by hour(ts) query optimization (#2622)",
  "fae802f": "chore(core): port of fast double algorithm by Daniel Lemire (#2527)",
  "b4f21bc": "feat(sql): add gauge metrics for current cached query count (#2504)",
  "29257b1": "fix(pgwire): recompile cached update sql when table structure altered instead of failure (#2479)",
  "092ef10": "fix(sql): release on-heap memory when analytic queries are returned to cache (#2473)",
  "905ee16": "fix(core): improve native memory management of factories, cursors and caches (#2442)",
  "f6277ce": "chore(core): decrease default SQL cache and O3 memory sizes (#2431)",
  "792cca6": "feat(sql): high performance impl of `copy` SQL for unordered data files (#2155)",
  "2187854": "fix(sql): improve performance of certain SAMPLE BY queries (#2277)",
  "d4de195": "chore(test): fix flaky flush query cache tests for pg wire (#2264)",
  "597e38e": "chore(test): improve stability of flush query cache tests (#2255)",
  "dee5cc8": "chore(ilp): make sure to reset symbol cache capacity when ILP connection is closed (#2220)",
  "a1b6050": "fix(sql): use xxhash hash algorithm to improve join performance (#2174)",
  "ff0ee1c": "chore(test): add missing wait to flaky flush query cache tests (#2097)",
  "a5517c7": "fix(sql): fix stack overflow in select and insert cache pooling (#2103)",
  "1ca6e40": "chore(test): fix flaky query cache flush tests (#2035)",
  "6a03e1a": "feat(sql): add flush_query_cache() function (#2028)",
  "baa43bd": "fix(pgwire): improve performance of PG wire by avoiding needlessly calling recv() that does not receive anything (#1833)",
  "121f159": "chore(core): allow disabling query caches (#1735)",
  "4f0d76f": "feat(sql): implement 'touch' function, useful to preload the data from disk into system page cache. (#1305)",
  "9993d05": "feat(ci): added cache to maven builds (#1217)",
  "b197a10": "fix(sql): force query cache expiration on table meta change (#1204)",
  "76c314e": "fix(pgwire): fix slow client stuck with incorrect resume flow (#1160)",
  "14175e5": "feat(sql): improved performance of `latest by` by factor of x2-4 (#1084)",
  "a349964": "fix(pgwire): fixed infinite loop when client is slow to read cursor (#954)",
  "06ef9f7": "fix(cairo): fixed non-deterministic behaviour of order by for 'uncached' symbols (#877)",
  "f11e29e": "Improve http implementation performance and fix some compression issues (#845)",
  "9906861": "feat(ilp): Improve TCP ilp performance and refactor txn (#824)",
  "abbfa61": "feat(griffin): function factory cache automatically derives bool operators from '=', '>' etc. (#796)",
  "ac1ea2c": "feat(griffin): faster round() impl when scale is zero (#454)",
  "1cebddd": "feature(griffin) - support alter symbol column cache flag (#407)",
  "4c60b8f": "fix(griffin) - alter table add column symbol does not respect cached flag - fixed #374 (#385)",
  "b1dc53c": "chore(griffin): text parsing refactor - trying to improve 'copy' performance",
  "522b970": "chore: prefetch next address in SIMD aggregation - up to 20% performance improvement! (linux build)",
  "ece1d8e": "chore: prefetch next address in SIMD aggregation - up to 20% performance improvement! (windows build)",
  "fbe20ba": "chore: when i created systimestamp() i noticed that in a single query adjacent records were 7us apart! This was totally atrocious performance that warranted a review. After this refactoring we do three records within 1us. All of this to do with CPU cache cohesiveness.",
  "51119fc": "chore: improved hash function distribution to reduce collisions in maps, that use power-of-two masks. There is an observable performance improvement across the board.",
  "c20f40d": "chore(lineproto): performance optimisation - 30% faster ingestion due to parser improvements",
  "20ea2b0": "chore(cutlass): refactored LineProtoReceiver to have generic and recvmm() code subclass same base class. Additionally LineProtoReceiver can run on either worker pool, or its own thread for best performance",
  "3c42d5c": "fix: use ParallelGC for better overall performance on Windows",
  "3a3feb7": "fix: use ParallelGC for better overall performance on Linux",
  "17e3fe2": "feat(griffin): new algo for 'sample by .. fill none' without key. It executes a little faster than generic algo.",
  "0280bbd": "fix: remove read of array element via unsafe - it is a slower method compared to conventional array read.",
  "ca7ee6a": "CUTLASS: improved text file ingestion performance via making text parser a little more optimal and not doing utf8decode on dates and timestamps where its not needed.",
  "7f018ec": "GRIFFIN: tidy-up toString() invocations. I will cache those strings that are column or table names rather than making new string all the time. GRIFFIN: assigned table name to InsertStatement so that it can be self-sufficient at execution time. Added tests for no timestamp and all partition types. CAIRO: performance-optimised ByteSequence returned by VirtualMemory",
  "793cc26": "GRIFFIN: removed duplicate code. Improved performance of symbol based filter, such as sym = 'XYZ' in cases where 'XYZ' does not exist. The cursor will not iterate over data if filter becomes constant.",
  "545e625": "GRIFFIN: optimised 'and' and 'or' operators to recognise constant conditions better and avoid unnecessary data processing. GRIFFIN: '=' impl for SYMBOL = CHAR, STRING = CHAR GRIFFIN: 'sum' performance optimisation",
  "c90a945": "GRIFFIN: group by performance tweaks",
  "53dd15a": "Config: increased default map key capacity from 2k to 2M - this improves performance of group by queries",
  "0d4c0e5": "CUTLASS: refactored switch statement out of json query processor to improve performance",
  "e2ee517": "Misc: JMH benchmark for Log4j2 vs QuestDb Log. Good news QuestDb Log is 20x faster and absolutely zero GC NET: work in progress regarding text file upload, working to test slow/interrupted uploads Misc: added Os.currentTimeNanos() implementation only for linux for now, will add other OS soon Misc: commented out legacy test that is failing intermittently. I am rewriting this part of code completely and will focus on new code and tests working consistently",
  "2cc9eaf": "NET: Refactored IODispatcher to allow much faster disconnects. This is required to keep server resources in check.",
  "f7d2d0f": "CUTLASS: http parsers performance optimisation",
  "e8cdbde": "CAIRO: bugfix: fast map became dependent on nextColOffset value to fix another bug. This dependency broke rowid key functionality. Fixed now.",
  "7d10c9f": "GRIFFIN: take character cache capacities from configuration. Validate function name against list of SQL control symbols, such as comments etc.",
  "933d3d8": "CAIRO: aligned two map implementation under single interface. They can be used interchangeably. CompactMap emphasises memory footprint over performance. FastMap emphasises performance over memory footprint.",
  "6816b8b": "CAIRO: QMap is seriously underwhelming. I'm committing my last attempts to make it faster than it is, but i think i've reached a dead end. DirectMap is at least 20% faster still. I'm going to use that instead.",
  "8a33c74": "CAIRO: compacted QMap memory footprint without noticeable performance impact",
  "9f1a50f": "CAIRO: QMap. This implementation will take over function of DirectMap in legacy code. Re-implementation i think is necessary due to substantial performance gains that can be made. Current QMap is first cut, it does job well as far as being fairly optimal for entry emplacement and not using heap. However number of collisions is still high, which makes it memory inefficient and potentially much slow that it can be. I'm about to address the collision ratio with restructuring of underlying memory model. The new model will directly link entries with the same hash code and will attempt to distribute collided entries more uniformly. This should reduce rate of reoccurring collisions.",
  "af4d522": "GRIFFIN/CAIRO: To compile and execute SQL we do at least three TableReader lookups. There is always a possibility that table structure changes between these. When this happens query model validation becomes undone and SQL code generator and cursors would have to be aware of that. To reduce complexity of writing and testing ever paranoid code I decided to have table version along table name. ReaderPool now requires table version to lookup anything. When version doesn't match - exception is thrown. This exception will then be caught and SQL will be re-compiled again or cursor removed from cache (when i get to implement cache that is)",
  "b0f23a1": "CAIRO: filled gaps in test coverage. Cairo had to catch up fast when I was coding Griffin. New functionality is tested via Griffin tests, but I though it would be good idea to review newly added code and test it for value it provides generally, e.g. outside of Griffin context.",
  "12eb03b": "CUTLASS: refactore ByteSequence out of line protocol parser making it marginally faster. Larger benefit are consistent UTF8 decoding functions, which Json lexer was lacking. Now both use same UTF8 decoding code. Json lexer wasn't handling incorrect UTF8 bytes causing VM to run out of memory. This is fixed and tested.",
  "12692f4": "GRIFFIN: full test coverage for 'create table' statement. Lexer code coverage is fast approaching 100%.",
  "a9bcd4d": "GRIFFIN: more tests for joins, performance optimisation",
  "310bfa5": "GRIFFIN: improving SQL lexer' test coverage, bugfixes, performance improvements.",
  "b2f6e6a": "CAIRO: preparing cursors to be cached and reused.",
  "f559cb0": "CAIRO: refactored TableReaderCursor into top-level class. TableReader caches index readers. Introduced BitmapIndexReader interface to hide backward- and forward- scans behind. Started integrating Cairo with SQL implementation by introducing notion of DataFrame and DataFrameCursor.",
  "35e4a02": "CAIRO: refactored out dependency of SQL test class; added tests to verify that TableWriter and TableReader honour symbol map cache flag.",
  "8ec1b9b": "CAIRO: removed ImmutableCharSequence - String is faster (intrinsics?)",
  "9cc5f4d": "CAIRO: added cache to SymbolMapWriter",
  "90c15c7": "CAIRO: vastly simplified string reading, 25% performance improvement right away. Not sure why I wrote such a convoluted CharSequenceView implementation in the first place. Being down with flu helps re-evaluate things i guess :)",
  "91cd5c4": "CAIRO: refactored static call to calculate mapped memory page size into flexible interface method. Added test to verify that BitmapIndexBackwardReader does not unmap last page excessively when it has to follow BitmapIndexWriter in real time. Unmapping of page causes huge performance bottleneck and it must not regress.",
  "c152bef": "CAIRO: refactored virtual memory, bitmap index following performance review. BitmapIndexReader may be slow to follow writer because it increases its view of values in very small increments, causing significant overhead. I will think through a better solution to deal with increments. Also started writing a naive implementation of SymbolMapWriter. Stress test of that highlighted need for BitmapIndexWriter to have its own cursor rather than relying on reader.",
  "fe0993f": "CAIRO: performance improvements. General: stub for portable timer setup",
  "41ae8d6": "CUTLASS: CAIRO line protocol parser amortizes commits to improve performance.",
  "d073a85": "CUTLASS: provide access to cached CharSequence instances mainly to meet CAIRO needs. When information arrives in inconvenient order, for example column name before type CAIRO will need to access name to create table columns, etc. This is better than CAIRO having to create copied of objectd it needs later.",
  "49a3a33": "Total refactoring. This is a re-born project in many ways. Existing storage engine is going to be replaced eventually with new, robust, well-tested, more flexible and yet faster engine - CAIRO. SQL implementation will remain, it is going to get integrated with CAIRO as well. HA package will die, it is going to be replaced with much more reliable and fast replication over UDP.",
  "ca149d5": "CAIRO: adding and removing columns is optimised to re-use as much of existing objects, files and memory pages as possible to improve performance.",
  "2f72152": "CAIRO: ballpark performance test. To be profiled and optimized further.",
  "0c5a332": "initial cut of cairo storage system, things are quite raw and require refactoring, but performance primise is excellent.",
  "2878291": "I'm writing UDP connector that supports Influx line protocol. This is first cut of line protocol lexer before final performance optimisation.",
  "e8aa5e0": "UTF8 support implementation forced strings to be decoded into a buffer before being copied to storage. This added performance penalty. To regain some of the performance storage copy leverages the fact buffer is contiguous memory space, rather than abstract CharSequence.",
  "a27bc5d": "First cut of JSON lexer. This is event based implementation that does not require memory nor does it copy input around or caches it. I still need to write parsers on top of this lexer to parse specific json formats. First port of call - import schema in json.",
  "a473e6c": "my understanding of zone information returned from DateFormatSymbols was incorrect. After researching data I managed to improve zone performance by 50%, reduce memory required to store zone rules and reduce startup time by order of magnitude. As a separate exercise I have done jmh testing to prove that my date parsing expedition was worthwhile! It is at least 50x faster than either java implementation (SimpleDateFormat or LocalDate) and that's before pattern is compiled into bytecode. I think it'll double performance because code of current method is huge.",
  "731cff8": "Zero-gc date formatter. This implementation is fully compatible with Java's SimpleDateFormat pattern, but takes simple millis as an input and does not allocate anything. It supports timezone conversion together with DateLocale. Although this is faster than Java it can be made even more rapid when formatter's bytecode is generated according to pattern. This is the next step.",
  "a9248da": "ui build system is faster and it works on linux",
  "357785d": "asof join performance optimisation",
  "ba1a28b": "replacing vega with echarts map optimisation to improve aggregation query performance",
  "9e97d9f": "sequential read/write mode flag is dynamic, which makes journal caches behave consistently.",
  "d382ffa": "bugfix: some tests run inconsistently on slow server, these are problems with tests not live code.",
  "1f066af": "bugfix: add millis to date bugfix: date overflow on large millis bugfix: virtual function can return SYMBOL type bugfix: parse explicit constants (123L, 12.34f, 123.4d) bugfix: performance improvement in parseDateTime() bugfix: float constant in SQL bugfix: date comparison in 'where' clause bugfix: date equality not working new: typeOf() function new: toDate() function",
  "5705a75": "cached query plans recover automatically across all threads when journals are renamed. Threads amortize recovery by handling runtime exceptions from cursor creation.",
  "1b75203": "compiler for code that copies Record to Map key, it will make aggregation, resampling and aggregation execute faster",
  "f4a0a48": "bugfix: order by can reference column alias performance: VirtualRecord is a little faster",
  "80770b1": "rewrite of split record to improve performance of joins",
  "cf9b89f": "wip: record refactoring to improve performance of complex joins",
  "19fe68b": "bugfix: null column check in select clause perf: improving MemoryFile performance by a little bit",
  "236ba6d": "Type cast support for 'create as select' statement. Casting is done via bytecode assembly to achieve top performance.",
  "32e0148": "improving append performance",
  "3dd37ca": "this is the fastest MultiProcessor (MP) framework implementation yet",
  "b4d4b91": "multiprocessor performance tests",
  "ae5b542": "preparing for rowid access to sorted record set, which would improve query performance throughout and enable neater implementation of analytic functions",
  "76f38bf": "refactoring and performance improvement of RecordList",
  "1dd3a13": "reducing garbage generation in grid, improved performance of wide grids",
  "c229493": "refresh journal when retrieving SQL from cache",
  "1c6b1d9": "json handler rewrite to cope with variable buffer size and large width journals. This implementation makes best effort to send largest chunks (faster), has smaller minimum data unit size (column) and detects unusably small buffer size",
  "8a0afbe": "refactoring json handler to simplify code and improve performance",
  "b71ea54": "slowing down inactive workers",
  "40aee5b": "improving performance of data acquisition",
  "00ded3f": "prevent cache from freeing same object twice and make cache GC friendly",
  "7c96abb": "compiler performance optimisation for hash joins",
  "3b4ded0": "completed cache",
  "35dad8c": "beefing up cache test",
  "a7df5b2": "compiler refactoring, query plan reusability test, query cache",
  "2500c6f": "write performance optimisation",
  "c7e9f80": "Replacing more instances of ArrayList with faster structure",
  "85687bd": "Replacing ArrayList with faster structure",
  "f2e06fc": "replacing ArrayList with faster structure",
  "a80f6a5": "faster structure to replace ArrayList",
  "236a26f": "(issue #29) adapting tie-break test to slow servers",
  "15b5d58": "(issue #29) adapting tie-break test to slow servers",
  "e9aff64": "(issue #6) refactored joins, replaced hash function with faster variant and improved release of direct memory.",
  "dfa90cb": "#6 replaced arrays with explicit variables for clarity and performance.",
  "1d80e50": "read performance tweak, refactoring query system to accomodate aggregation",
  "22f54fd": "replacing Trove lists with faster implementations",
  "2a891d7": "replacing TIntList with faster implementation",
  "0e687b6": "Generic read (issue #20), 25% performance improvment for read/write.",
  "84ce67d": "replaced ByteBuffer with Unsafe to gain performance.",
  "d9515b8": "index and join performance optimisation",
  "355fd9a": "- distinctHintCount defaults to 1 and is forced to be >1 if symbol is indexed - removing dependency on thrift from nfsdb-test-model - renamed Symbolndex.put() to Symbolndex.add(). Corrected attribute names in nfsdb.xml in tools. mode is not a symbol anymore. 3,000,000 appends are fine now. - strings are stored uniformly with length always being 4 byte int. This removed fork code that slows down string append and read. - SymboIndex now has cursor over rowids. 'all' queries return data in descending order. Logging now produces logger name. Moved uses of SymbolIndex.getValues() to Cursor - network replication",
  "e1b4785": "temp partition purge thread could fail on slow hardware",
  "0e00864": "temp partition purge thread could fail on slow hardware",
  "c4b6410": "temp partition purge thread could fail on slow hardware",
  "828eb10": "- improved commit() performance - added bulk reader and writer - renamed recordHint attribute - added txCountHint attribute",
  "b96b65f": "read/write performance boost",
  "a79119b": "refactoring, examples, performance improvements.",
  "670e2ba": "refactoring, examples, performance improvements."
}, "quickstart-android": {
  "cf90ca8": "Add flag to enable/disable performance monitoring plugin (#907)",
  "9ea541b": "Merge 'Update to show use of cache when offline.'",
  "134f262": "Update to show use of cache when offline."
}, "rabbitmq-tutorials": {
  "479c04c": "optimization",
  "a75cb98": "optimization",
  "05a8c3d": "Parametrize slowness of the CI machine.",
  "b70a410": "Our CI server is quite slow, give it a bit more time."
}, "reactive-streams-jvm": {
  "": ""
}, "react-native": {
  "c56968c5": "Make CircleCI caches for hermesc be version dependent (#37452)",
  "bfca23a2": "feat(cli) check and warn if npx react-native version is using an old cached version (#37510)",
  "a239827a": "Fix MobileConfig react_fabric:enable_text_measure_cache (#37400)",
  "3a58b1a2": "Fail fast when read-only globals are defined twice (#37156)",
  "2058da8f": "Unrevert 'use stable sort for performance entries' (#37017)",
  "d77798b2": "Back out 'Use stable sort for performance entries'",
  "96373904": "Separate turbo and legacy module caches (#36986)",
  "8e046cbb": "Use stable sort for performance entries (#36998)",
  "3506c8d7": "Ability to always log certain performance entry types (#36820)",
  "1387179b": "Implement specialized container type for performance entry buffering (#36726)",
  "4a5f5503": "Don't cache UIManager type inside the Event data structure (#36677)",
  "51893c4e": "Make JS Representation cache all TurboModule properties (#36625)",
  "0018a695": "Refactor startup performance API implementation",
  "f4e56fdf": "Refactor performance memory API implementation",
  "c1023c73": "Add performance.reactNativeStartupTiming API",
  "e36fe691": "Back out 'Fix logic of removal of TMs cache'",
  "64835590": "Fix logic of removal of TMs cache",
  "d528fe28": "Add performance.memory API example to RNTester",
  "8486e191": "Address New Architecture performance regressions by properly setting NDEBUG (#36172)",
  "70fb2dce": "Add performance.memory API",
  "ad953f6f": "Unify native performanceNow implementation across platforms",
  "41c17ddd": "Batch/throttle reporting of the performance entries",
  "120e87b8": "Show warning when native module for performance marks and measures is not available",
  "7a9ed166": "Update pods cache",
  "14e69db4": "Implement native logic for performance event reporting (#35526)",
  "ddba780c": "fix: Change checkout cache strategy (#35259)",
  "9578c2ca": "Ship large meassure cache in all platforms",
  "51f20279": "Circle CI: Reduce build_hermes_macos Hermes SDK cache size by 75% (#34886)",
  "af4e0615": "Circle CI: do not share .git cache across different operating systems (#34885)",
  "bf55a3a3": "Make sure ccache is considered as part of the CMake build",
  "5c211f2b": "fix: image cache did not take into account request cache policy (#34556)",
  "ff7f5a33": "Update the cache keys to fix Hermes (#34491)",
  "14c207d9": "Refactor: Minor performance improvement of BackHandler.removeEventListener (#34281)",
  "9923ac1b": "Properly cache sdk/hermes to improve build times (#34209)",
  "22a067b7": "RemoveDeleteTree memory optimizations",
  "3a7170ca": "Performance optimization to allow paint to happen (up to) 1 frame earlier",
  "fa814d48": "PointerEvents: Fix dispatch optimization",
  "114d31fe": "Use monotonic clock for performance.now() (#33983)",
  "656d1cef": "Add optimizations to RNTesterPlatformTest result rendering",
  "00751f64": "Fix out-of-order prop parsing deoptimization in TextView/Paragraph",
  "782e004e": "Fix pref deoptimizations due to out-of-order prop parsing",
  "e3a0eea9": "Remove with_brew_cache_span from Circle's config (#33831)",
  "58bc9815": "Use anchors to avoid cache key duplication (#33821)",
  "c6daadca": "Bump CocoaPods to 1.11.3 and Ruby to 2.7.5 in tests/cache (#33654)",
  "f503b212": "improve interpolation performance with big input range (#33598)",
  "61b013e7": "Allow modifying iOS image cache limits (#33554)",
  "c231d5e3": "VirtualizedList optimization - memoize FlatList._renderer",
  "adb2962f": "VirtualizedList optimization - refactor CellRenderer props to eliminate parentProps",
  "19cf7026": "VirtualizedList optimization - avoid lambda creation in CellRenderer onLayout prop",
  "b2454f9e": "Add feature flag for spannable cache",
  "97f3eb2d": "Ship large text measure cache in Fabric Android",
  "f43f05d2": "Updated template gitignore with fastlane best practices (#33186)",
  "189c2c89": "Synchronously render cached images",
  "681ed402": "Turning on clang tidy performance-*",
  "60e60a9b": "Refactor: Assign string label to each case in RCTPLTag enum for startup performance logging",
  "1721efb5": "fix: Use same implementation for `performance.now()` on iOS and Android (#32695)",
  "df331aea": "Commit cache-bust to manual testing script",
  "f2e0b2f4": "Fix crash in PreAllocation optimization",
  "9a43eac7": "Add missing @jest/create-cache-key-function dep root package.json (#31668)",
  "2f477b18": "fix: update to @jest/create-cache-key-function@27 (#30637)",
  "090196f3": "ReactContext: Fail fast when NativeModules thread is null",
  "f2762146": "Fabric: Fixes in Android TextLayoutManager for better caching performance",
  "995e962a": "Fix fast refresh settings in RN Dev Menu",
  "5ae8e84d": "Fix IntBufferMountItem optimization + LayoutAnimation bug",
  "cfd39bc6": "Provide default for cachebreaker value",
  "08eacf8a": "Ship optimization of ReadableNativeMaps",
  "b9ad5a70": "Micro-optimization in ReadableNativeMaps",
  "3ade096f": "Add cachebreaker to remote assets",
  "3cdef265": "Remove premature optimization in FabricUIManager; could be causing stopSurface inconsistencies",
  "053cd6b3": "Make dependencies cache more reliable on CI (#30534)",
  "0e9296b9": "Update the cached dimensions when orientation changes (#30324)",
  "192e821f": "Hook up logTaggedMarkerWithInstanceKey to performance logger [2/n]",
  "74fc285c": "Allow specifying custom timestamps in performance logger spans",
  "fd9787ec": "Remove `fbjs-scripts` in favor of `@jest/create-cache-key-function`",
  "22b5f32f": "Add extras to timespan and points in performance logger",
  "f1b84ddf": "Remove update option from stopTimestamp method in performance loggers",
  "fc4f667c": "Remove unnecessary addTimeAnnotation method from performance logger",
  "4d842963": "Remove unused timespan descriptions from performance loggers",
  "2788ee8b": "Improve performance logger definition and type safety",
  "5b93c49e": "Fabric: Using pre-cached UIColor objects for black, white, and clear colors",
  "f5c246d5": "Use reader/writer lock for TurboModule cache access",
  "b2655612": "Bump brew cache key (#29843)",
  "38062cf8": "Log renderApplication_React_render timespan to scoped performance logger if available",
  "57b10f75": "Allow setting a custom performance logger in XMLHttpRequest",
  "db474a47": "RN: Fixed `performanceNow()` to allow debugging in Chrome",
  "509e9dbd": "Change signature for addTimestamp for performance logger",
  "caf01091": "RN: Remove `fbjs/performanceNow` Dependency",
  "0cef464f": "StopSurface optimizations",
  "33ed3583": "Bust `surfaceActiveForExecution` cache after executing a batch of items",
  "36688d35": "Remove module cache from ReactPackageTurboModuleManagerDelegate",
  "44618c80": "Revert D20464278: Make Lambda function called in NativeModule mutable to improve performance",
  "5290047d": "Make Lambda function called in NativeModule mutable to improve performance (#28297)",
  "79efa434": "Update ImageEditingManager to use internal storage before falling back to external for cache",
  "24e0bad8": "Make JSCRuntime::createValue 35% faster (#27016)",
  "e737535f": "Fabric: Small optimization in RCTNSAttributedStringFromAttributedString",
  "8f5779cd": "Add in the optimization to check the first/least timer in the queue before iterating (#27841)",
  "733532e5": "Make JSStringToSTLString 23x faster (#26955)",
  "66fcd6f8": "Remove deprecated target `folly:evicting_cache_map`",
  "05f1bb3d": "Bump Homebrew cache key (#27764)",
  "4aac0191": "add DEBUG_NETWORK_SEND_DELAY for simulating slow network",
  "e08412d9": "Fabric: Text Measuring: TextMeasureCache the new, improved text measure cache",
  "9bfb48e7": "Bump Yarn cache key and fix JavaScript tests (#27343)",
  "bdd1a675": "Dismiss all logs on fast refresh",
  "7e49a632": "Send fast refresh stats",
  "2d95668a": "Add fastRefresh to NativeDevSettings",
  "bfc9839a": "iOS Image: skip CADisplayLink optimization only when weakProxy is enabled",
  "fc0b03a0": "Fabric: Small perfromance optimization in `[RCTViewComponentView updateLayoutMetrics:oldLayoutMetrics:]`",
  "28d26c2e": "Fabric: Small optimization in RCTMountingManager",
  "a1273bb5": "Do not load JS bundle from local cache if Metro is running",
  "1c5944be": "Disable logging from performance logger unless it is enabled",
  "c9694f75": "iOS CocoaPods: Fixed typo in symlink, update cache",
  "055b28b4": "pass cachedLayout and cachedMeasure measures to plugin",
  "01a42bc3": "TM iOS: Prevent module cache invalidation race",
  "8253f909": "Bump babel plugin version to break metro cache",
  "360e9999": "TM iOS: reduce the scope of cache access lock",
  "5d3d3987": "- fix crash on performance logger (#24821)",
  "71c3c238": "Reduce measure cache size to 8",
  "2fd381ca": "Remove API to constrain measure cache size",
  "694bf710": "TM iOS optimization: codegen @selector for each method call.",
  "845eee40": "Allow arbitrary location for third-party iOS dependency cache",
  "3c7d8e0c": "Remove paragraph_measure_cache experiment code",
  "f9a344c4": "Switch style getters to JNI fast calls",
  "03841cf0": "Migrate PerformanceLoggerFlag to scoped performance logger",
  "efd28bdc": "Revert D14186694: [RN] Use global or scoped performance loggers everywhere",
  "a9b3ca7f": "Use global or scoped performance loggers everywhere",
  "9a2026be": "for experimentation: configurable measure cache size",
  "1aabbf5d": "Allow to create local performance loggers",
  "edceba9a": "Slider component - cache measurements, don't create measure manager on iOS",
  "9ac219e0": "fix getter of result from Image query cache (#23602)",
  "4cf70306": "Use cached react tag versus id on view",
  "5bc9c9b0": "Add Image query cache result type (#23608)",
  "daccb543": "Add new performance metric in Fabric",
  "10679a97": "Temporarily remove optimization of updateRootLayoutSpecs",
  "c3522a01": "Don't call `jni_YGNodeFree` as fast native method",
  "b0c69aba": "Allow compiler optimization (#23536)",
  "fd3b8f20": "Fabric: Introducing Better: For faster, clear and ideomatic codebase",
  "fb8ba3fe": "Enhance image freshness check before stored into cache (#23226)",
  "7f278888": "Add performance counters for Fabric",
  "10e4a851": "Address some paragraph measure cache follow-up nits",
  "c435ff38": "Revert D13895627: [react-native][PR] [iOS] Enhance image freshness check before stored into cache",
  "e98d5a28": "Enhance image freshness check before stored into cache (#23226)",
  "c16fadb7": "Track how much measure cache entries are used",
  "f506019e": "count cache hits",
  "a9049442": "Fabric: Use LRU to cache results of ParagraphShadowNode::measure",
  "1024dc25": "Change location of iOS build cache directory to ~/Library/Caches/ (#22688)",
  "cf85d0e4": "Add HTTP cache by default (like iOS) (#18348)",
  "1fde677c": "Remove duplicated `OnGlobalLayoutListener` to improve performance (#22849)",
  "6f70d4c0": "Roll back `-ffast-math`",
  "1a499f43": "Enable removeClippedSubviews on Android only for improved scrolling performance",
  "57a38263": "Roll back `-ffast-math`",
  "11d4512a": "Update React Native OSS Yarn and Gradle caches",
  "3a98318c": "Increase cache and file size limits",
  "54f7eb34": "Performance improvement for loading cached images on iOS (#20356)",
  "bb93abf5": "Fix checkout_code: Remove Metro cache check (#21998)",
  "27a3bdb8": "Adapt methods for fast calls",
  "5f31a108": "Support `!`-style fast calls for Android",
  "7062e5bd": "Apply `--reset-cache` argument to `bundle` command (#20706)",
  "0f086359": "Fix passing the --reset-cache CLI argument to Metro",
  "4d0a194d": "add appveyor cache (#20490)",
  "affb135d": "Revert D8978844: [react-native][PR] Performance improvement for loading cached images on iOS",
  "2ca7701a": "Performance improvement for loading cached images on iOS (#20356)",
  "27a38ded": "Enable View flatening optimization by default",
  "5017b86b": "Fix extreme TextInput slowness on Android (#19645)",
  "a07b6602": "Improve performance for node reordering in FabricReconciler",
  "d62e4324": "Adding UIManager performance counters in Fabric",
  "0bbac18c": "circle ci: yarn cache uses package.json checksum as a key",
  "8c74864d": "Update Android packages cache key",
  "1ad8351d": "Clear apt cache",
  "c041c9fd": "clean up experimental setup and keep using ffast-math flag",
  "1020ac94": "OSS: add gradle wrapper helper to prepare offline gradle caches",
  "c194c181": "Fixed performance regression in `ShadowView`s layout process",
  "c9d75628": "Clear cache to resolve iOS, tvOS workflow",
  "828cd788": "Pass cacheVersion param via the new API",
  "96ec2dcb": "Fix enableBabelRCLookup option in new CLI + global cache script",
  "51b6749c": "bump Android cache key",
  "f50af7f8": "update npm cache key",
  "877f1cde": "Fix and re-enable 'view flattening' optimizations for Marketplace",
  "a163f70f": "Optimize the performance of Origami",
  "c01a171e": "Removing `inherited background color` optimization from ARTSurfaceView",
  "8c8944c1": "Removing `inherited background color` optimization from RCTText",
  "19b0a65c": "Improve accessibilityLabel performance",
  "dfebcb70": "Don't set global.performance to undefined if it was initialized already",
  "d79e245d": "AMA changes to support disk cache",
  "02306722": "Reverting the dirty child optimization",
  "587225ab": "Used hasDirtyChildren tag for the optimization",
  "e9780bdc": "ReactNative sync (c3718c4...abce30f): the one about the Prepack optimizations",
  "c3038d72": "Warn about slow main thread React methods",
  "c65d9042": "Improve HMR performance by allowing to specify bundlingOptions to getShallowDependencies() method",
  "6763f7a2": "Revert D5724764: [react-native][PR] iOS: Warn about slow main thread React methods",
  "68461492": "iOS: Warn about slow main thread React methods",
  "aa9a40f6": "Update default .gitignore to work with fastlane setups in sub-folders",
  "7ac6fa7a": "Check if fresco is initialised before clearing memory caches",
  "3fadd740": "Update performance.md to reflect existence of `useNativeDriver` in An…",
  "6b29fe78": "Avoid creating a new Path instance for performance",
  "8377b30b": "ImageBackground: use cached styles",
  "9d4cc7cc": "Check before overriding global.performance",
  "a4badb84": "packager: TransformCaching: make choice of cache explicit in the API",
  "40a53918": "packager: TransformCache: trivial optimization wins",
  "143beaf9": "Use local paths for global cache",
  "76d6f904": "packager: faster terminal feedback",
  "eb72d509": "packager: TransformCache: store last cache collection time",
  "00a0343a": "Revert D4957570: [yoga] Consolidate measure cache for layout nodes and leaf nodes",
  "6272ef87": "Consolidate measure cache for layout nodes and leaf nodes",
  "3e08a289": "Remove irrelevant options from cache key",
  "de3478c1": "packager: GlobalTransformCache: cache the transform options digest",
  "1c53c9b2": "packager: Module: remove dead cacheTransformResults option",
  "f72d9dd0": "Add option to track when we're showing blankness during fast scrolling",
  "b2101836": "packager: index files by dir for fast matching",
  "6dbcb47e": "use performanceNow instead of Date.now() in ScrollResponder",
  "20ba9871": "packager: TerminalReporter: stop reporting global cache errors",
  "4797701b": "packager: clear cache",
  "439cb76a": "packager: GlobalTransformCache: reduce asynchronicity for non-cached bundles",
  "23c2a6cf": "Removed harmful optimization in ReactNativeEventEmitter",
  "06dd0831": "Fix suggestion to 'npm start -- --reset-cache'",
  "b956c111": "Revert D4716024: [yoga] Avoid transfering cached layout information to java",
  "f0240e00": "Avoid transfering cached layout information to java",
  "0a475d2b": "Use performanceNow to calculate __BUNDLE_START_TIME__",
  "434ca242": "Use CLOCK_MONOTONIC instead of CLOCK_MONOTONIC_RAW in performanceNow",
  "d9ae27ba": "Clear Fresco memory cache in onHostDestroy",
  "927b3562": "Fix react-native-git-upgrade cache busting",
  "12b228c5": "Improve scroll to top performance",
  "3b3d294a": "Even faster source map generation",
  "d12d0b4c": "packager: do not try to fetch uncached files",
  "e2a5bc1a": "packager: socket timeout for global cache",
  "4f60ac40": "packager: disable global cache stdout",
  "ea752b96": "Use `version` from `packager/package.json` for cache key",
  "05e0b671": "Convert max cache count into a define",
  "1297a4a8": "Rename cache warmer to glyph warmer",
  "690368fc": "Warm text cache.",
  "fc622504": "Show low res image if available in cache",
  "1f07e895": "packager: don't keep on using global cache forever if it misses",
  "e5de8bce": "packager: make legocastle script to write to the global cache",
  "59873d7a": "packager: Module: gives global cache more retries",
  "6740207b": "packager: Bundler: hash all the cache key components",
  "6554ad59": "Kill fastfs",
  "188093ae": "packager: Bundler: use stable paths for cache key",
  "5e008c93": "Add fastlane to default .gitignore",
  "df43cc7f": "Fix animation in fast navigation between scenes",
  "4785a601": "packager worker/index.js: do not write to cache directly",
  "81e4139e": "Remove isTextNode optimization",
  "ea016db3": "JSTransformer/worker: cache transformed code as separate files",
  "0089cd76": "Make CSSNode#measure final, cache more correct methodid",
  "e7dc71ba": "Exposing layout cache check publicly",
  "35614db3": "RM fastfs.js: @flow",
  "fb4f34bc": "Remove fastpath",
  "d6c52580": "Remove `fastfs.readWhile`",
  "80cb5efb": "switched fast-fs to use fs for API calls",
  "cacc31d7": "Calculate asset hash from file contents, cache hashes",
  "69c88981": "Expose image cache interrogation to JS",
  "d3282e3b": "Clean up fresco cache clearing code",
  "16f76d44": "SKETCH Add performance tracking for rendering",
  "b01feb41": "Incremental: Fix require of performanceNow",
  "55543008": "Remove cached bundle if update fails",
  "754da27d": "Remove rejected promises from the cache",
  "5df9c673": "Make reloads faster for simple file changes",
  "3f504ec1": "Make reloads faster for simple file changes",
  "5405aeb2": "First step to boot rn apps with hot bytecode cache",
  "cb778aa5": "reset-cache flag no longer needs boolean",
  "b21c8f16": "--reset-cache no longer accept a boolean parameter.",
  "04183532": "Add MicroProfiler for low-overhead profiling of JSC/bridge performance",
  "2a823bbc": "Add custom cache setter",
  "f12d0a22": "Create protocol for delegate for image cacheing",
  "631785f2": "Change RCTImageLoader's Cache System to default NSURLRequest's cache system",
  "2426b3b5": "Prevent tests with invalid UTF-8 from failing when jest reads them from the cache",
  "477cc529": "Use fresco cache to show low res image if available",
  "b49633e0": "Fixed image test flakiness by tying decoded image cache to module lifecycle",
  "4c76e547": "remove premature optimizations",
  "5d06402b": "Made npm deployment to be independent of git tags cache",
  "c8f39c3d": "Added small decoded image cache to prevent images flashing when component is reloaded",
  "c779e233": "Improve SwipeableListView performance",
  "bb065366": "call bundle with reset-cache true as default from standard project",
  "90f9f484": "add reset-cache command to bundle",
  "033e7c80": "Support the bytecode cache for FBReactKit",
  "fffcb9c8": "Fix ImageEditingManager when no external cache",
  "a6a5ef4a": "added cache prepare step for packager in ios e2e test",
  "f7bcb3e9": "Add a way to prefetch remote images to cache with Image.prefetch",
  "ef8ad82a": "Add more performance logs and Systrace events for RAM and bridge startup",
  "77e1b377": "Atomic install, remove locking, cache xz archives (for offline installs)",
  "22e55d43": "Adding Pre-PArsing cache & StringRef to iOS 8's JSC",
  "f6853b8e": "Add more performance logs and improve Systrace support",
  "fd816b13": "Update node-haste and replace fast-path with node-haste's version to fix Windows compatibility",
  "c304364a": "Improvements to the preparsing cache",
  "d94a5674": "Add new worker for code transform, optimization, and dependency extraction",
  "b5f80065": "Introduce transformer `cacheKey`",
  "9a918ef4": "Improve performance of node-haste2 and react-packager",
  "727a2a95": "Let the module cache depend on transform options",
  "2997c8fe": "Move getting the cache dir into react/jni",
  "8c62ed7c": "Use `fastfs.readWhile` to parse module docblocks",
  "700b8488": "Expose fastfs on the DepencenyGraph instance.",
  "9308f89c": "Add per-field cache invalidation",
  "68f71dab": "Make HMR faster (2)",
  "65b8ff17": "Make HMR faster",
  "2d9876de": "Add partial reading of files to fastfs",
  "0b39c72b": "Fix bundler to not do as many passes in optimization",
  "a61ab879": "Add transform option to module / module cache",
  "ea1aec3c": "JSC Pre-Parsing cache",
  "0963192b": "Bump js/package.json version to clear cache",
  "38486dcb": "Throw if there's an error persisting the cache",
  "e4c53c28": "Improved shadow performance",
  "f421d2b0": "Fix cache errors",
  "e75e8611": "Make Hot Loading faster",
  "699a75b0": "Clear Fresco caches when going low on memory",
  "f827a513": "Fixed double-callback for cached images",
  "397791fc": "Added in-memory cache for AsyncLocalStorage",
  "c16574a0": "Don't special case performanceNow",
  "666706b0": "Inline cache mock for DependencyGraph-test",
  "c76c2224": "Clear cache entry when calling multiRemove",
  "fb46e39c": "Make the modification time of the transformer file relevant for the cache.",
  "dbe37e78": "Improved AsyncLocalStorage performance",
  "d3038408": "Bring back 'download from server' perf optimization",
  "7fe7a2a2": "Improved JS bundle loading performance",
  "2bdfb40a": "fix navigator comparison link in performance doc",
  "8356b609": "Use different cache keys for Package objects (fixes #2949)",
  "554bdf98": "[Docs] First pass at performance guide",
  "c6a9d0e6": "Update cacheVersion in bundle.js",
  "75d0b904": "Merge pull request #2609 from exponentjs/faster-ci-tests",
  "3ee65225": "Protect against races in deleting corrupt cache",
  "59b9dc88": "[react-packager] Add command line option to reset cache on OSS",
  "eb9a9395": "[ReactNative][JSCProfiler] Cleanup make file and make targets cacheable",
  "b17b328a": "[react-packager] Fix cache issues",
  "36f76e58": "Improve the performance of React Native tests",
  "0c61b49f": "Improved RCTCache performance + fixed border color crash",
  "01151f8c": "Added LRU cache to fix out of memory issues with color caching",
  "7963add0": "[ReactNative] Revamp Navigator scene cache strategy",
  "dc393162": "[RN Events] clear disk cache on logout",
  "ff49d86a": "Implemented fast path for same borders/radii",
  "5429b5f9": "[react-packager] Use transformer name in cache name",
  "ee449301": "[ReactNative] Fail faster in OSS tests",
  "735f6733": "[ReactNative] Fail faster in OSS tests",
  "9024881f": "Store package cache in /tmp",
  "749f6a69": "[react-packager] Don't cache rejected promise",
  "2c13456f": "Merge pull request #648 from spicyj/npm-cache",
  "c68fc1a9": "[react-packager] Hash cache file name information to avoid long names",
  "591d7b32": "Make the publish script faster by not converting all the files on every file",
  "535bdfcf": "[react-packager] Recover and warn from corrupted cache file",
  "6153fffb": "2015-02-03 updates - Add back providesModule transform to JSAppServer | Joseph Savona - [ReactKit] fix open source performance issue | John Harper - [ReactKit] improve ReactIOSEventEmitter logics | Andrew Rasmussen - [reactkit] fix web view JS executor and bind it to Command-d | John Harper - Removed hardcoded RCTModuleIDs | Nick Lockwood - [ReactKit] Animated GIF support | Alex Akers - [ReactKit] Update RCTBridge to support non-`id` argument types | Alex Akers - [reactkit] fix typo in RCTCopyProperty() change | John Harper - [reactkit] fix shadow view crash on missing properties | John Harper - [reactkit] fix transform keypath | John Harper"
}, "react-native-camera": {
  "9c0b87e": "fix: Remove the `mCamera.setPreviewDisplay` call on surface destroy as it may cause ANRs or slow down the UI when unmounting. The side effect of this is a nasty warning `BufferQueue has been abandoned` that can be ignored. (#3331)",
  "afa7bb1": "fix: fast capture orientation. (#3269)",
  "7109ac7": "feat(ios): Reset cached exposure limits to avoid a crash. (#2948)",
  "7653092": "Merge pull request #1519 from photomadic/fix/consistent-cache-directory",
  "bba84a9": "fix(cache): store video recordings in same directory as photos",
  "0eddf6d": "Add skip processing on android for fast picture saving",
  "91a560a": "Improve android performance with Expo picture resolve implementation. Get rid of MutableImage. Return base64 only if asked via options map.",
  "c6907b9": "Merge pull request #1147 from jgfidelis/save-img-cache-ios",
  "683b3ee": "Merge pull request #1146 from jgfidelis/implement-local-cache",
  "9998c0f": "Fix build problem, save image on cache directory and return uri on response.",
  "f53aab5": "Create local cache directory and save image there when photo is taken.",
  "0778294": "Fix performance issue on Android: add option to clear window background when camera starts",
  "9fd9d1f": "(android): android performance improvements (#644)",
  "714bc67": "Search only defined barcodes to improve performance",
  "e1b319e": "Merge pull request #239 from corbt/faster-video",
  "17789a0": "Attempting to improve performance by changing the initialization process"
}, "react-native-config": {
  "": ""
}, "react-native-fbsdk": {
  "352be26": "fixed how fastfall is being called"
}, "react-native-image-picker": {
  "13861fa": "Change directory where temporary files are stored to cache directory (#1533)",
  "9d227c0": "save images to cache unless storageOptions key is provided"
}, "react-native-notifications": {
  "d6750ab": "Remove gradle cache files"
}, "react-native-svg": {
  "f3d8c9d": "chore(deps): bump http-cache-semantics from 4.1.0 to 4.1.1 (#1982)",
  "fe419f6": "refactor(android): optimize rendering performance",
  "defce98": "refactor(android): optimize rendering performance",
  "fde018b": "[android] Clear path cache to fix fill rule when > 1 Use with same href",
  "9321aa5": "[android] Fix clearing of cached glyph advance on add/remove children",
  "eaec9b9": "[android] Fix calculation / clearing of cached glyph advance",
  "abb17bc": "Fix re-rendering of emoji when path data is cached, closes #927",
  "9a32d22": "[android] Implement cache invalidation early exit shortcut",
  "30cbc31": "[android] Fix cache invalidation",
  "00f0b66": "[iOS] Implement fast path for SVGLength css value resolution",
  "2a449c3": "[android] Implement fast path for SVGLength css value resolution",
  "7e42a99": "Clear cached data in tree when changing properties on root svg element.",
  "c16a9ed": "Removing check for cachedClipPath when getting clipPath in VirtualNode, as it hinders image clip path update, when animating the clip path itself",
  "47fe6be": "Organize import, fix stale width and height cache.",
  "7088d52": "Refactor and simplify, cache path properties.",
  "2ee1a24": "Fix Images do not render if they are not in the cache"
}, "react-native-video": {
  "2c391f5": "Merge pull request #1298 from relivecc/ios-cached-asset",
  "f0a1beb": "return cached asset",
  "03734bb": "Merge pull request #1172 from react-native-community/bugfix/ios-cache-texttracks",
  "b6ee8f7": "Simplify text track + cache bypass code",
  "a26dc26": "Bypass cache when sideloaded text tracks are specified",
  "685133e": "remove cache property",
  "82edb95": "remove cache property",
  "4f386d2": "make video cache feature optional",
  "4021996": "Schedule cache garbage collector",
  "438aa79": "Add cache property; Make playerItemForSource in 'RCTVideoManager.m' async",
  "e504944": "Swap out MPMoviePlayerController for AVPlayer - Better performance, can play multiple videos on one screen too!"
}, "react-native-webrtc": {
  "": ""
}, "reactor-core": {
  "eb59474": "Document not to reuse/cache EmitFailureHandle#busyLooping (#3224)",
  "db8902d": "Replay terminal signals to late subscribers in Flux.replay(int) and Flux.cache(int) (#3200)",
  "2c3de5d": "[doc] Polish Schedulers javadoc for common/cached instances (#2995)",
  "1584793": "[build] Have jcstress part of slowerChecks (#2958)",
  "a050dcf": "Polish Mono cache operators documentation (#2790)",
  "569f537": "Tune test performanceOfContinuouslyCancellingGroup (#2777)",
  "2da73e9": "[build] Parallelize slow tests in release workflow",
  "53f4648": "Add Mono.cacheInvalidate[If|When] (#2717)",
  "5e979bb": "[polish] Tag 3min worth of tests as 'slow' (#2738)",
  "409a5cf": "Add mergeComparing as fail-fast alternative to mergeOrdered (#2719)",
  "0871105": "Polish corner cases in FluxLimitRequest, complete fast on cap=0 (#2699)",
  "988fa89": "Add Mono.cache(ttl, ttl, ttl) overload with Scheduler (#2619)",
  "476cc67": "[polish] Add slow and flakky junit5 tags, see #2506",
  "68b9db6": "fix #2451 directBestEffort sink to return OK when fast+slow subscribers",
  "af1d4e6": "Apply svg optimization",
  "19fc1ba": "Fix #2342 by failing fast on non-serialized access to Sink (#2365)",
  "a29a4d0": "fix #2049 Fail fast if EmitterProcessor queue is full",
  "9a495e2": "fix #2002 Implement Mono.cache() as MonoCacheTime without TTL",
  "bb36afe": "Improve subscribe loop performance, rename CoreOperator (#1882)",
  "cb72730": "fix #1700 Improve cache eviction in ElasticScheduler",
  "c436cf0": "[build] Make downloadBaseline faster by using compression + onlyIfNewer",
  "0bde86c": "fix #1189 Add cache alias with Scheduler parameter",
  "86de85a": "fix random cache test failure (use VirtualTimeScheduler)",
  "44dc73c": "fix random cache test failure (use VirtualTimeScheduler)",
  "d734ad8": "fix #1125 Add TTL-generator variant to Mono.cache",
  "b08ba93": "fix #1004 Materialize Signals also have Context, which are cached",
  "1cd669b": "fix #930 Add javadoc for Mono.cache(Duration)",
  "e9a5269": "fix #683 Add Mono.cache(Duration)",
  "0478eb5": "refresh StepVerifier cached code",
  "a6289c2": "Add tag/name support with chained optimization Remove default toString",
  "475ca5e": "fix #767 Revert publishOn async path detection over-optimization",
  "7a33c07": "fix #750 - support complete/error cache resubscribing when expired",
  "29f09c5": "Simplify and cache on toString assembly stacktrace",
  "bfd6511": "Tweak doc diagram link for publication job and include local cache for reactor-test 2-step build",
  "3adf610": "Replace the map for cached Schedulers with 4 AtomicReferences",
  "3c34356": "fix #392 Flux.replay/cache fusion is invalid with operators using its isEmpty",
  "5254299": "Cleanup and optimizations: - prevent double error on skipUntilOther - rename internal ParallelUnorderedXx to ParallelXx - unwrap peek afterTerminate error - micro optimize async path in publishOn - remove isEmpty catch in publish(fn) - add post terminate check on materialize - reuse drainutils constant in scan seed - remove instance cost for ArrayDeque",
  "ff2ae75": "Fix Mono.or optimization, add assembly on Mono.first",
  "79572bb": "Try excluding flatMap empty source optimization for now :(",
  "1506285": "Complete pairWise combinatory optimizations (#240)",
  "0333399": "fix #218 Shutdown cached schedulers upon setFactory (#221)",
  "df835fe": "fix #174 Add ttl signatures for Flux#cache and #replay",
  "44e0126": "fix #172 Refactor replay/cache to fix cancellation issues fix #171 Remove unused and confusing Flux#process() fix #170 Refactor onBackpressureBuffer to make use of delay Improve fuseable support in connectables",
  "3bdc9c7": "Schedulers cache tweaks, move UUIDUtils to ipc",
  "6b3d875": "Fixed scalar optimization, empty() -> mono of empty list",
  "ec7873d": "+ MonoSupplier, Flux -> Mono conversion optimizations",
  "834cab1": "Make OneQueue work as a fast-flow Spsc queue.",
  "53e0986": "fix cache , optimize in a bit",
  "a80ccd3": "test queue optimization size",
  "6b4cc20": "Sync with RSC (zip operator, scalar optimization and package trait split)",
  "253a7c2": "fix scalaroptimization",
  "9db2fef": "remove scalar optimization",
  "2a4690b": "remove scalar optimization",
  "75ba1d2": "remove scalar optimization",
  "545be7b": "remove scalar optimization"
}, "realm-java": {
  "e567259": "Add support for gradle configuration cache (#7753)",
  "36715bb": "Fix DiskReadViolation warning when opening cached Realms. (#7503)",
  "a732676": "Rename CI docker cache",
  "1460419": "Fix CI cache",
  "6d71bff": "Use supported file name for Docker CI cache",
  "f282fcb": "Fix Gradle cache not working in parallel builds (#6285)",
  "8eb8e96": "Fix Gradle cache not working in parallel builds",
  "c274673": "Improved performance when parsing field descriptions (#5952)",
  "2cfc1ec": "Fix some performance issues when initializing the Schema (#5404)",
  "9dd6190": "Fix a bug that RealmSchema.remove() and RealmSchema.rename() don't update internal cache (#5037)",
  "f2b4c9f": "Disable lcache (#5072)",
  "743156f": "Merge pull request #4272 from realm/my/faster_build",
  "ffe5bdf": "improve performance of getters and setters in proxy classes (#4206)",
  "3608892": "Enable lcache on CI (#3717)",
  "cb1a6ef": "Accelerate build with ccache and lcache (#3523) (#3609)",
  "1d77c7f": "Accelerate build with ccache and lcache (#3523)",
  "9de7182": "Add support for ccache (#3518)",
  "1b53fbf": "Invalidate schema cache when the schema version of Realm is changed by other process (#3409).",
  "c519363": "improve `Table` and schema cache. (#3315)",
  "6240a3d": "Finalizer optimization: Replace hashmap",
  "b541d76": "Convert migration and cache tests to JUNIT4",
  "1c83f60": "Enable not slow test case",
  "ebb0f1f": "Merge pull request #1632 from realm/my/field-indices-cache-for-each-Realm",
  "0bd5368": "increase timeout of async stress tests because of slow device in CI",
  "06ed940": "Merge pull request #1356 from realm/cm-bug-cache-wrong-key",
  "e4ed77e": "Remove config cache if needed",
  "243bffd": "Verifying that configuration cache is working correctly when replacing a encryption key.",
  "487c5f7": "No longer caches configurations with a encryption key before it has been validated the key is correct.",
  "5b96a37": "Better error message and make test smaller and faster",
  "832db90": "Merge pull request #1156 from realm/cm-configuration-builder-cache-compare",
  "09168d6": "RealmConfiguration now used as cache key",
  "b49bc6c": "Formatted JavaDoc. Realm.canonicalPath is now package protected to enable faster path comparison.",
  "01b13be": "Merge pull request #1148 from beeender/make-send-noti-faster",
  "ddc2661": "ColumnIndices are now cached pr. Realm instead of globally.",
  "ad27d65": "Merge pull request #983 from realm/cm-bug-cache-invalidation",
  "f6edc52": "Realms are now only cached if correctly opened.",
  "309e982": "Centralise the access to the simpleNames cache",
  "6a8d16a": "Properly check for key equality while using a cached Realm instance",
  "cf5e02a": "Merge pull request #768 from realm/cm-migration-cache",
  "83a43c3": "Update changelog + minor string comparison optimization.",
  "5790190": "Fixed issue with Realm cache not being cleared during a RealmMigrationNeededException + Added unit test.",
  "c601f8b": "Adjusted timeout to allow slower hardware.",
  "f58cc12": "Style fix + using already cached column positions instead.",
  "6a433b7": "Disable UTF8 test which is slow...",
  "199ebdc": "Merge pull request #572 from realm/cm-bugfix-realmcache",
  "b191685": "Fixed Realm cache not working.",
  "e9bac19": "Fixed build warnings + Realm cache lookup.",
  "e19cd49": "Merge pull request #531 from realm/ez-migrate-clear-cache",
  "eb1166a": "Clear the realm cache on migrations",
  "eb987db": "Merge pull request #463 from realm/kg-faster-better-sort",
  "e24bea0": "Merge branch 'kg-faster-better-sort' of github.com:realm/realm-java into kg-faster-better-sort",
  "70d3595": "Remove failing pro guard configuration from performance example",
  "2e49402": "Make the performance example work with the annotation based interface",
  "0fb6e05": "Integrate the annotation processor and make the performance test an app",
  "9064300": "Cleanup and extra test conditions in performanceTest. Maintain realmRowIndex.",
  "a412a0f": "performance test runs without fail.",
  "22c73f2": "Preliminary links and performance test",
  "9b99eb3": "using switch stmt in jni + faster test case",
  "77e1b37": "Added internal performance test of get-method",
  "3c58f45": "Added internal performance test of get-method",
  "9ca889f": "made test case faster",
  "51706f2": "added count(), lookup() metods. Added simple performance test",
  "2199cf4": "Example-performance. Started adding memory usage (not finished).",
  "7df81cd": "Added performance test to example. - currently can't load DLL...",
  "8fa5377": "Performance test now uses column search (2x faster than query)",
  "bf25c0d": "Added Example application (including performance tests)",
  "de6228a": "Added some performance tests."
}, "RealtimeBlurView": {
  "": ""
}, "rebound": {
  "": ""
}, "Recaf": {
  "4d2ff4a": "fix: Tabs dragged to new windows not invalidating tab cache of old window",
  "4d64be0": "fix: DecompileAll plugin fails when using Fernflower due to non-threadsafe cache handling",
  "8305e94": "perf: Improve tree filtering performance with reflection hackery",
  "fa9a645": "TextPane performance and threading improvements",
  "b2da72c": "Add todo note for future variable generation optimization",
  "64d6f47": "Maven resources now cache resolved artifacts",
  "aca4c16": "Cache FernFlower instance for reuse optimization",
  "b3ce567": "Stream optimizations",
  "f2cfa51": "Regarding the last commit, its fixed... I forgot to update the cache",
  "207758e": "Fix a lot of the issues regarding Hierarchy. Consider this more of a 'I finished' than a 'I fixed some bugs' This also introduces multithreading, so if using linked method renaming is slow for larger jars, just throw more threads at it. Methods that are extensions of core classes can optionally be locked to prevent accidental renaming.",
  "baf405c": "Fix issues related to method opcode cache not matching representation"
}, "RecyclerViewItemAnimators": {
  "": ""
}, "RecyclerViewPager": {
  "02bac2f": "Add attribute to control scroll speed. (Wear screens are much smaller and slower scrolling speed is required.) Bumped gradle wrapper version.",
  "6274e68": "Updated Gradle version to 2.1.0 Fix crash when scrolling vertical recycler fast - (Position -1 crash)"
}, "red5-server": {
  "": ""
}, "reflections": {
  "536819e": "Fix a performance degradation introduced by PR #183",
  "e56cd65": "Fix issue #81 by disabling cache's use on url connection"
}, "rejoiner": {
  "": ""
}, "remusic": {
  "": ""
}, "RePlugin": {
  "bc2e700": "【buyuntao】sendIntent2Process code structure optimization, startPluginProcess lock optimization.",
  "bdcb90d": "【buyuntao】Split and optimize the logic related to the pit process, and the process allocates relevant lock optimization.",
  "4c27717": "Improve MP.getPlugins() performance",
  "2e04f8d": "resolve : aar complied from build-cache can't be injected by plugin-gradle",
  "fed382c": "resolve : aar complied from build-cache can't be injected by plugin-gradle",
  "63c2715": "resolve : aar complied from build-cache can't be injected by plugin-gradle",
  "d856598": "Code optimization",
  "d2f85fa": "Accept the optimization proposal (Same version installation)",
  "75e9d4e": "Accept the optimization proposal (plugin uninstall)",
  "b68b03e": "The 'rpShowPlugins' gradle task optimization",
  "8fbcdd8": "Gradle task grouping and optimization"
}, "requery": {
  "e795cd7": "Android performance logging disabled by default",
  "7486961": "travis ci add cache settings"
}, "resilience4j": {
  "b956822": "Bump actions/cache from 3.0.11 to 3.3.1 (#1907)",
  "71262dc": "Fixes #1809: Improvement on race condition in cache module (#1822)",
  "ef5129d": "Bump actions/cache from 2.1.7 to 3.0.11 (#1790)",
  "1a426a6": "Build performance improvement (#1716)",
  "50104c7": ":zap: Gradle optimizations (#1695)",
  "5c67e09": "Bump actions/cache from 2.1.6 to 2.1.7 (#1590)",
  "564130e": "Bump actions/cache from 2.1.3 to 2.1.6 (#1445)",
  "ce4b9b9": "Perf: improve EventProcessor#processEvent(E) performance (#1400)",
  "cdda262": "Replaced tags slow_successful and slow_failed by successful and failed.",
  "ced1572": "Added slow call count metrics (#640)",
  "3856cfb": "Issue #634: Added slow call rate to Dropwizard Metrics (#632)",
  "89cb7f1": "Issue #547: Added slow call rate to CircuitBreakerMetricsCollector an… (#574)",
  "52d6087": "Improvements for ConcurrentEvictingQueue pointed out by some stranger. ConcurrentEvictingQueue.peek is now ~50% faster. 'stranger' thank you :)",
  "7d9ac6c": "Issue#15 circular fifo bufer optimization (#29)"
}, "rest-assured": {
  "4178f9f": "Caching m2 directory for fast build times",
  "43a04b4": "Upgraded faster Jackson optional dependency from 2.4.0 to 2.4.1.3",
  "f4fa228": "Non-backward compatible change: The json-path module accidentally depended on faster-jackson, jackson, gson and simple-json and brought then in as transitive dependencies. This has now been resolved which means that these dependencies are optional as intended (issue 297)",
  "989cf68": "Jetty now quits faster"
}, "retrofit": {
  "e4e7cb3": "Update dependency com.fasterxml.jackson.core:jackson-databind to v2.15.1 (#3897)",
  "79a814a": "Merge pull request #3879 from square/renovate/com.fasterxml.jackson.core",
  "d917b2e": "Update dependency com.fasterxml.jackson.core:jackson-databind to v2.15.0",
  "017eb3b": "Merge pull request #3822 from square/renovate/com.fasterxml.jackson.core",
  "ab595d0": "Update dependency com.fasterxml.jackson.core:jackson-databind to v2.14.2",
  "c586f58": "Merge pull request #3247 from square/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "4c4d7f8": "Retain service method parameters when ProGuard optimization is enabled.",
  "b65ba67": "Merge pull request #129 from square/jw/cache",
  "b40e91c": "Makes the gson instance Guice injectable rather than hard coding it. Clients will have to discover the just-one-gson optimization on their own."
}, "retrolambda": {
  "": ""
}, "ribbon": {
  "034e113": "Change RandomRule to use a ThreadLocalRandom instead of Random, as a perf optimization",
  "880b00d": "Change ServerStats and LoadBalancerStats to use CachedDynamicIntProperty instead of DynamicIntProperty as a perf optimization",
  "b271cdf": "Make sure that the correct set of servers are removed from map of cached RxClient when server list refresh happens.",
  "85fdfe9": "Use _cache suffix in cache hystrix command name. Rename http client/cache hystrix commands.",
  "4773dd1": "Simplify Hystrix command chain implementation and make it more efficient for cases when there is no cache and Hystrix information is not needed.",
  "1e319b6": "Configure distinct name for cache Hystrix command. Set independent Hystrix configuration from http client, with default timeout 20ms. Move non-http specific Hystrix class from http.hystrix to ribbon.hystrix package.",
  "78d99eb": "Separate cache and http request into two separate Hystrix commands.",
  "9639b14": "Rename EvCache cacheKey to key, to be consistent with CacheProvider.",
  "5f0c003": "Dependency changes. Fail fast if return type is not ByteBuf in HttpRequestTemplate.",
  "06496e8": "Make Http method mandatory. Move template classes to package private. Added checking of inputs in HttpRequestBuilder. Added JUnit test for Hystrix request cache.",
  "196be00": "Rename some methods in ClientOptions. Use raw content source for HttpClientRequest if set. Set correct hystrix properties from Ribbon properties. Parse cache key templates.",
  "866c0e0": "Added cache functionality.",
  "32191a3": "WIP: refactor ribbon-rxnetty module to have a base class for cached RxClient.",
  "46f1cf0": "Added Fail fast switch on null VIP for DiscoveryEnabledNIWSServerList.",
  "52c1ee0": "Removed cache abstraction of NettyHttpClient",
  "c0feeb7": "Fail fast for DiscoveryEnabledNIWSServerList if vipAddress is null. Added JUnit test for connection pool cleaner.",
  "a23f3f9": "Fix Issue #22. Fix performance regression of AvailabilityFilteringRule. More documentation."
}, "richeditor-android": {
  "": ""
}, "RichText": {
  "": ""
}, "ripme": {
  "8f17f95": "gradle, not execute slow tests by default",
  "118c353": "tag slow tests, so they can be excluded/included",
  "77e9a15": "Improved luscious ripper for faster and complete rips.",
  "fa8f7b5": "Replaced use of Collection.size () by Collection.isEmpty () which makes the code more readable and may have more performance",
  "3c925b4": "1.7.48: Fixed instagram ripper; Added Korean translation; Added quickQueue support to nhentairipper; Rewrote nhentairipper to be faster; myhentaicomics ripper now requests proper url when downloading images; Can now include comments in url files; Added the ability to blacklist tags on e-hentai.org'",
  "3d30df1": "Rewrote nhentairipper to be faster"
}, "RippleEffect": {
  "": ""
}, "RoaringBitmap": {
  "7056910": "Added a performance hint. (#610)",
  "b3c3edf": "implement fast bitmap cardinality threshold check (#535)",
  "575ec0b": "Merge pull request #530 from RoaringBitmap/slow-tests",
  "d4e841d": "improve test performance, reduce memory usage",
  "5033e7c": "benchmark for slow buffer run vs run and",
  "73a0957": "add specialised andNotCardinality for improved performance (#378)",
  "8e76afd": "Removing a counterproductive optimization. (#375)",
  "7f28045": "Bitmap add range performance (#214)",
  "26c0dc0": "Switch to eh-cache sizeof agent, maintain one dataset in memory for j… (#183)",
  "96dd52a": "Fix cache invalidation on .flip",
  "ab86768": "faster equals comparison run vs array #161 (#162)",
  "973ff94": "Merge pull request #133 from ppiotrow/range-operations-performance",
  "1f2addc": "Added benchmark for range optimizations",
  "28a416a": "Apply range optimizations in Buffer version",
  "5f81927": "Tests before actual range optimization",
  "b513a46": "New fail-fast travis script.",
  "7feeb2a": "inot range performance optimization",
  "11f5051": "xor between Run&Bitmap containers range optimization",
  "5e62217": "and operation between Bitmap&Run containers performance",
  "024e992": "RunContainer.andNot range optimization",
  "3c997fb": "BitmapContainer.(i)andNot range optimization",
  "9752929": "BitmapContainer.remove & iremove range optimization",
  "289ba59": "Merge remote-tracking branch 'upstream/master' into range-operations-performance",
  "99ea4a6": "Merge branch 'master' into performancetweaks/august2016",
  "7f9f67d": "Revert 'Introducing one optimization that might be beneficial.'",
  "80ff79a": "Introducing another optimization (naive lazy or with bitmap conversion)",
  "6ec583f": "Introducing one optimization that might be beneficial.",
  "77f7de6": "Porting optimization 1 to buffer",
  "4f7315b": "Revert 'Second part of optimization https://github.com/RoaringBitmap/RoaringBitmap/issues/107'",
  "c5db5f7": "Second part of optimization https://github.com/RoaringBitmap/RoaringBitmap/issues/107",
  "1075da9": "Implementing optimization 1, part 2",
  "d42b599": "Implementing optimization 1 from https://github.com/RoaringBitmap/RoaringBitmap/issues/107",
  "35864b4": "Union cardinality can be computed fast from the intersection cardinality",
  "70d8ca7": "Avoiding unnecessary function call. (Probably does not matter for performance.)",
  "dd361b8": "Making the unit test faster...",
  "b8508d5": "Minor optimization.",
  "7aab049": "Some optimization/simplification.",
  "6ba36b1": "Minor changes to make performance more predictible.",
  "3befa14": "Making the performance clearer.",
  "e64ea3f": "Minor code style tuning so that performance is more apparent.",
  "acbb146": "Branchless operations are fine, but the code was ugly and slow. Putting back branchless in charge.",
  "72ca51a": "Branchless cardinality maintenance functions appear slower than branching ones.",
  "14d5ad7": "simplified code for RunContainer.inot; now even more closely based on not. Not taken over to MappeableRunContainer and not yet supporting an extra-fast implementation for flip over an entire runcontainer.",
  "806d96b": "Removing ineffective optimization.",
  "974ad79": "Add optimization in lazyorToRun as a workaround for JVM crash",
  "b8c21c4": "Further optimizations on the PQ OR approach",
  "216f28d": "Reverting silly non-optimization.",
  "0029a8a": "Merge branch 'master' into fasterorrunarray",
  "76929b3": "Fixing another performance issue.",
  "46bdec4": "More optimization.",
  "43186bf": "Porting the faster run+array or to buffer.",
  "8b7e67b": "Fixing performance bug.",
  "edcc738": "Port in-place or optimization to 'buffer' package",
  "5eff61d": "Minor optimization for the priority queue.",
  "cc38203": "fixing my performance fix.",
  "ea0c653": "Another optimization.",
  "e383b8c": "Trying another 'fix' for the bad horizontal OR performance.",
  "dec54c3": "Minor optimization.",
  "0054feb": "Various optimizations.",
  "12b9cb3": "More cleaning and optimization.",
  "1b21b66": "Adding more tests, to make sense of the performance of EWAH.",
  "23e2d40": "Various optimizations having to do with horizontal OR computations.",
  "4b891ee": "Low-level optimization, plus one fix.",
  "6c061c3": "Various small optimizations, cleaning, and better benchmarks.",
  "f4f86fa": "Still need to improve performance for dimension_008 and dimension_003.",
  "7d76db7": "Various minor optimizations.",
  "9b00240": "Oops. Missing silly optimization.",
  "f2b99c3": "Data files will not be in zip files (for performance and storage reasons).",
  "9c467e1": "Adding real-data tests and did some runcontainer-to-runcontainer optimization.",
  "9514f77": "fixed bug in the buffered generic (bad performance) code.",
  "1bbc4c3": "Some progress (mostly optimization).",
  "8874171": "Improving select performance (Bob Potter)",
  "0c89c7e": "The new intersections really are faster even in the worst cases now.",
  "fb016d0": "Slightly faster tests and the script allows you to narrow it down.",
  "b781236": "Code review on and optimization: - Add worst-case scenario benchmark - Keep old and new implementations of and - Rewrite index lookup based on Util.advanceUntil",
  "c159f0c": "Turning on the 'useinplace' flag. It saves a few lines of code but seems not to impact the performance.",
  "9e45c81": "Several fixes and optimizations",
  "d8f39a7": "Some optimization... and making ConciseSet work",
  "5610af7": "Minor optimization that might save time... sometimes...",
  "11053ed": "Generating Benchmark results of each optimization method",
  "45a4652": "To be fair, WAHBitSet and ConsiseSet should benefit from similar optimizations",
  "b903567": "Code review + optimization",
  "ed2f902": "Ameliorating the performances by reducing the call to Long.bitCount(), toIntUnsigned() and some other changes.",
  "43c9f96": "More optimization",
  "0e2fcc1": "Various optimizations.",
  "29536b0": "Minor optimization (adding ShortIterator)"
}, "roboguice": {
  "d9e2f37": "Introduce a surprising performance improvement in DefaultRoboModule",
  "fde93a1": "Introduce a surprising performance improvement in DefaultRoboModule",
  "836953c": "Remove support for static resource injection due to large performance overhead https://github.com/roboguice/roboguice/issues/87",
  "5fa918e": "Remove support for static resource injection due to large performance overhead https://github.com/roboguice/roboguice/issues/87",
  "65d3093": "Add an alternate implementation of SafeAsyncTask called AndroidCallable. This version is faster, and I believe it has cleaner semantics when using it with java.util.concurrent",
  "9c461a3": "Fix corner case I wasn't catching, increase memory of destroyed activities, improve performance",
  "8745a71": "performance improvement?",
  "eefc847": "Implemented static RoboGuice.createInjector() to get rid of RoboApplication. Works, but slow. seems to initialize multiple times"
}, "robolectric": {
  "5c503f98": "Reset static DateUtils cache when RuntimeEnvironment.setQualifiers is called",
  "b45b15d8": "Change ShadowBluetoothAdapter to cache getRemoteDevice instances. In android, the state for a given device (uniquely identified by its address) is global. When you have two instances of BluetoothDevice and mutate one, the other will reflect it, even though they are not the same java object.",
  "0a528073": "Use runner.arch when calculating ICU cache keys",
  "1cb59ea9": "Update tests workflow to use consistent icu cache key",
  "26bfcfb2": "Implements ShadowWallpaper #setBitmap & #getWallpaperFile annotations build.gradle buildSrc CODE_OF_CONDUCT.md dependencies.gradle errorprone gradle gradle.properties gradlew gradlew.bat images integration_tests junit LICENSE nativeruntime pluginapi plugins preinstrumented processor README.md resources robolectric sandbox scripts settings.gradle shadowapi shadows testapp utils WORKSPACE setBitmap: caches lock or home screen wallpaper in the memory. annotations build.gradle buildSrc CODE_OF_CONDUCT.md dependencies.gradle errorprone gradle gradle.properties gradlew gradlew.bat images integration_tests junit LICENSE nativeruntime pluginapi plugins preinstrumented processor README.md resources robolectric sandbox scripts settings.gradle shadowapi shadows testapp utils WORKSPACE getWallpaperFile: return an open, readable file descriptor of a previously cached lock or home screen wallpaper bitmap.",
  "d182d5aa": "Create separate cache directory for getExternalCacheDir",
  "e62857f8": "Fix slow EspressoWithMenuTest",
  "5acf2806": "Unregister apk asset when cache is cleared.",
  "e8d1249a": "Remove ApkAssets from cache when their corresponding native object is destroyed.",
  "10acb64c": "Stem CachedDependencyResolverFileCacheTest flakiness by increasing valid cache time.",
  "61664305": "Create separate bazel build targets for each test so individual compilation is faster.",
  "a6436b9f": "CircleCi optimizations.",
  "448ebf56": "Merge pull request #4315 from robolectric/perf-fast-private-methods",
  "a75a7bb1": "Merge pull request #3726 from robolectric/instrumentation-optimization",
  "1e2e0cd0": "Revert 'Merge pull request #3444 from robolectric/cacheSQLite'",
  "f6a47d34": "Merge pull request #3444 from robolectric/cacheSQLite",
  "abdade6e": "Collect performance stats.",
  "5c708400": "Use gradle-cached android-all jars in tests.",
  "79dc2dd6": "Reduce test parallelism, log .cache-hash.",
  "3004ef99": "Fix parsing of cached XmlBlocks.",
  "60180cf4": "Refactor ARSC loading to use transliterated c++ code. Much faster.",
  "c75356b6": "Reset shared preferences static cache. (#3055)",
  "cb9b3e63": "Reset shared preferences static cache. (#3055)",
  "2be51956": "Merge pull request #2742 from robolectric/cache_app_resources_only_once_across_all_apis",
  "aaac7157": "Merge branch 'master' into cache_app_resources_only_once_across_all_apis",
  "623e0c3f": "Performance + Memory improvements - Application's resource loader is no longer tied to the Android Runtime's resource loader so we don't need to cache per sdk. Also cache the compile time SDK resource loader as this is constant across all tests.",
  "eb01f4f0": "Split ManifestFactory's work into identifying a key for the desired manifest, and generating a manifest based on that key, so manifests can be cached.",
  "2300baa6": "Merge branch 'jaredsburrows-fix-gradle-cache' into travis-component-install",
  "21e9b86c": "Merge branch 'fix-gradle-cache' of https://github.com/jaredsburrows/robolectric into jaredsburrows-fix-gradle-cache",
  "0f41db9b": "fix gradle cache",
  "72378b42": "Use containsKey() to check for entries in the Plan cache, instead of calling get() and checking for null. (#2509)",
  "85763ea2": "Synchronize the plan cache in ShadowWrangler (#2458)",
  "6c5f1799": "Remove cache for resource indexes.",
  "c5340e0e": "Merge pull request #2395 from alsutton/cache_resource_index",
  "b757ea22": "Merge branch 'cache_resource_index' of github.com:alsutton/robolectric into cache_resource_index",
  "f126ac07": "Merge pull request #2277 from ngbravo/improve-build-performance",
  "a657ba46": "Merge branch 'master' into improve-build-performance",
  "cfb076fd": "Merge branch 'master' into improve-build-performance",
  "c6443b67": "RobolectricTestRunner: Do not create the cache directory unless required",
  "8e6c7fc4": "Change the cache size",
  "ab5b7714": "Merge pull request #2111 from holmari/reset_optimizations",
  "73d2855f": "ShadowResources: further optimization to ShadowResources reset behavior",
  "29cedcf9": "ShadowBitmapFactory: disable cache only when needed",
  "ce52a671": "[Fix for #2049] Use ConcurrentHashMap instead of Hashmap for shadow config cache management.",
  "4dd0d23c": "Added static resetter to clear SQLite connection cache (#1510).",
  "b6d77495": "Merge pull request #1762 from lexs/cache-files",
  "c86ef92f": "Added static resetter to clear SQLite connection cache (#1510).",
  "4b17033e": "Replace rudimentary caching of SdkEnvironment in RobolectricTestRunner with a basic LRU cache in EnvHolder. This is sized at the number of api levels supported by Robolectric since most test suites will only ever have this number of environments. It is possible to have more environments than this if multiple InstrumentingClassloaderConfigs are used which is rare, but is the case in the Robolectric test suite. This is why we need to also include the test runner class name as part of the key as a substitute for InstrumentingClassloaderConfig.",
  "fe5b0ad2": "Some optimizations for resources",
  "39be80d9": "Merge pull request #1703 from robolectric/maven-dependency-cache",
  "dfda31ca": "Re-fetch cached dependencies that don't exist in the local maven repository.",
  "9a92c5a8": "Merge pull request #1689 from lexs/cache-serviceloader",
  "84b2bfac": "Fix performance issues caused by 8d15a25dcbb23",
  "37ad5edf": "Merge pull request #952 from psliwa/performance-bust",
  "57fcae4d": "fix theoretically possible cache id conflict",
  "38df92bd": "cached MavenCentral",
  "e122a92c": "Decouple fastest time and min distance checks in simulateLocation.",
  "51bc3377": "Merge pull request #828 from robolectric/xian/jar-cache-touchups",
  "d195a890": "fail fast when sqlite connection is used from bad thread",
  "179dcb85": "Add cache eviction policy and MT-safe.",
  "32ecab5d": "Merge pull request #824 from aweber/cache_jar_file",
  "9204d8fe": "Switch back from String#charAt(0)==x to startsWith(x): safer, not much slower.",
  "38d163f3": "Use StringTokenizer instead of String#split(), for fastness.",
  "52a3fc5c": "Perf: cache nulls for classes with no ShadowConfig.",
  "177dc89b": "Merge pull request #497 from JakeWharton/jw/response-cache",
  "0053bd8d": "Bump translator cache version number.",
  "33fee863": "Test optimizations.",
  "8e3a5a9e": "Merge pull request #275 from metalhead8816/upstream_lrucache",
  "752e0b03": "rename env var name cached.roboelectric.classes.path => cached.robolectric.classes.path",
  "5b84e76c": "System property for a custom path to cached-robolectric-classes.jar",
  "7e8a3fa0": "add shadow support for external cache dir",
  "0776210e": "Write to correct directory, clear cache+files after test",
  "b2900d29": "Need to increment jar cache version after repackage.",
  "ae26238c": "Add ShadowBitmap and implement drawing cache stuff in ShadowView.",
  "9fe97bbd": "Bump cache version after Uri__FromAndroid change.",
  "29df02b8": "Oops, bump cache version id.",
  "30291fcb": "Made caching of classes cumulative by reading the entire cache into a map at start-up time.",
  "bae7da88": "The cache jar is overwritten every time. It does not make sense to append to the cache jar since the jar file code is not smart enough to replace duplicate entries.",
  "391a1fe9": "Add version info to cache jar so we can invalidate old caches when the bytecode changes.",
  "4bf9b9d9": "moved cached-droid-sugar-classes.jar to local tmp directory.",
  "e7c2aaf2": "Cache transformed class files for faster test startup."
}, "Robust": {
  "": ""
}, "rocketmq": {
  "92ea901": "[ISSUE #6765] org.apache.rocketmq.util.cache doesn't look like it's being used",
  "42c5fd5": "[ISSUE #6708] Use GitHub cache for CodeQL",
  "877f146": "ReceiptHandleProcessor message renewal strategy optimization",
  "feb1f30": "ReceiptHandleProcessor message renewal strategy optimization",
  "1e3e763": "ReceiptHandleProcessor message renewal strategy optimization #6232",
  "fce6460": "ReceiptHandleProcessor message renewal strategy optimization #6232",
  "06a87e6": "ReceiptHandleProcessor message renewal strategy optimization #6232",
  "667ebbc": "ReceiptHandleProcessor message renewal strategy optimization #6232",
  "ed84914": "proxy some optimization (#6175)",
  "eaf3b9f": "improve performance",
  "0da68ce": "update com.alibaba:fastjson 1.2.69_noneautotype to 1.2.83 (#5547)",
  "1116de4": "[ISSUE #5294]fix ClassLoad path optimization (#5295)",
  "f7878d1": "[ISSUE #5305] fix proxy TopicRouteService cache bug (#5306)",
  "aa3feec": "[ISSUE #5254] Stream close optimization (#5255)",
  "b50f55f": "[ISSUE #5100] Recover the optimization of pull request #2885 (#5101)",
  "ed9c775": "[ISSUE #4999] Optimize ConcurrentMap#computeIfAbsent performance on jdk1.8 a workaround (#5008)",
  "0bd8bdf": "[ISSUE #4568]Improve performance of consume queue (#4569)",
  "e5a71bb": "using caffeine replace guava cache (#4669)",
  "05fee0d": "[ISSUE #4435] Code optimization for ConsumeQueue abstraction. (#4439)",
  "3bd4b2b": "Update fastjson version to 1.2.69_noneautotype",
  "5386a3c": "bump up fastjson version",
  "d937c1d": "[ISSUE #4245] Remove the topic route cache in nameserver",
  "5584a78": "[ISSUE #4203] Support zstd/lz4 compression to improve send/receive performance",
  "b6e65a8": "[ISSUE #4099]Optimized the performance of sending traceMessage in `AsyncTraceDispatcher` (#4180)",
  "3cbb3b8": "[ISSUE 3585] [Part B] Improve encode/decode performance (#3588)",
  "ead6274": "fix mac 12+ slow bug (#4010)",
  "9fff8ae": "[ISSUE #4053] NamesrvController code optimization",
  "d99bf55": "[ISSUE #3992] code optimizations about BrokerContainerStartup.class",
  "4992f4e": "[ISSUE ##3832] in order to improve the performance by change the variable location of queueId (#3833)",
  "e4394b6": "[ISSUE 3585] [Part C] cache the result of parseChannelRemoteAddr() and eliminate this method in flame graph. (used 4.84% cpu before this commit in producer side) (#3589)",
  "ed258b3": "[ISSUE 3585] [Part D] improve performance of createUniqID(), from 2.41% to 0.42% in flame graph of producer side. (#3590)",
  "2624763": "doc-optimization (#3523)",
  "7b05208": "[ISSUE #3467] Fail fast on loading files with error mappedFileSize",
  "311d76f": "[ISSUE 3194] [PART C] Replace AtomicLong with LongAdder in StatsItem.java to improve performance (#3351)",
  "97da4ac": "Improve performance of expandIP, and readable",
  "6358b3c": "Revert 'Improve performance of expandIP, and readable'",
  "7a6c374": "Revert 'Improve performance of expandIP, and readable'",
  "d7a830c": "[ISSUE 3194] [PART A] Use LongAdder instead of AtomicLong in BrokerStatsService to improve performance. (#3195)",
  "2baae14": "Improve performance of expandIP, and readable",
  "a23df96": "[ISSUE 2883] Improve performance of string2messageProperties/messageProperties2String, and save 1 byte for each message.",
  "a137e48": "[ISSUE 2883] [Part G] Optimise parse performance for SendMessageRequestHeaderV2, unit test",
  "0325772": "[ISSUE #2883] [Part E] Improve produce performance in M/S mode. (#2889)",
  "b13a4c8": "[ISSUE 2883] [Part G] Optimise parse performance for SendMessageRequestHeaderV2",
  "d65778f": "[ISSUE #2883] [Part B] Improve produce performance in M/S mode. (#2885)",
  "7a6edb7": "[ISSUE #2926] fix fast-try.sh fail to run in ubuntu (#2927)",
  "088dd29": "update fastjson version from 1.2.69 to 1.2.76",
  "6588063": "Writing style optimization",
  "845c5fd": "[ISSUE #1846] Dledger model change into pipeline manner to improve performance (#1847)",
  "f07bc79": "[ISSUE #2283] Fix the spelling mistake in ProducerManager & some code optimization",
  "b628114": "chore(pom):update fastjson version (#1795)",
  "bafd621": "change log level, optimise performance of endTransaction and txCheckTask",
  "fdbd3cb": "Optimise transaction check performance: fix problem that processed opOffset not add to doneOpOffset",
  "ebc0ede": "optimization exception declare of request",
  "ed94087": "fix(remoting) upgrade fastjson to 1.2.61",
  "f28be82": "optimization : change SYNC_MASTER flushSlave/flushDisk to pipeline to reduce produce latency and improve throughput",
  "523b60c": "fix(replica): resolve abnormal slow recover",
  "44153fd": "Fix the slave abnormal recover slow issue",
  "ede33c1": "[RIP-10] optimization test case of DefaultMessageStore (#995)",
  "27622c5": "[RIP-10]HA test case optimization and reduce the time spent (#931)",
  "b3ba266": "Fix os pache cache busy problem",
  "d434a3a": "Update fastjson to the latest stable version",
  "4d76016": "Polish parts slow UT",
  "9d11b56": "Issue #311 improve broker register topicrouter info performance",
  "e744222": "[ROCKETMQ-319] Improve broker register performance and reduce memory usage (#205)",
  "c94fc4f": "[ROCKETMQ-311] Add a swith for broker fast failure and support pull request queue",
  "4df3155": "[ROCKETMQ-143][HOTFIX] Update fastjson to 1.2.29",
  "3fe7535": "[ROCKETMQ-143][HOTFIX] Update fastjson to 1.2.29",
  "6b7d206": "[ROCKETMQ-143][HOTFIX] Update fastjson from 1.2.12 to 1.2.28",
  "7970441": "[ROCKETMQ-143][HOTFIX] Update fastjson from 1.2.12 to 1.2.28",
  "acbb4b5": "set fastFailIfNoBufferInStorePool default false..",
  "747b161": "fast fail consider about HA",
  "c7e8818": "fast fail if store pool is empty",
  "5deae29": "Merge branch 'findbugs-performance' into 'master'",
  "fe6c92f": "Merge remote-tracking branch 'origin/master' into findbugs-performance",
  "9f324e8": "findbugs fix for performance issues.",
  "d4a5411": "Issue #104 add pagecache rt log",
  "a84f8e9": "Issue #104 page cache rt",
  "d098548": "Issue #104 update cachedog.sh, add date&time",
  "762bb09": "Issue #104 and cache dog shell",
  "cddd8ed": "Issue #104 add clean cache shell",
  "2e8fd1c": "Issue #104 add clean page cache shell and change copyright on windows",
  "34f2dec": "Issue #104 add clean cache shell file",
  "8513f3c": "findbugs fix for performance issues.",
  "3ef3218": "发布前，修改fastjson版本1.2.12",
  "e99b5c9": "Issue #86 Broker写入pagecache耗时分布按照分钟来打印，打印有错误",
  "7640cf7": "Issue #86 Broker写入pagecache耗时分布按照分钟来打印",
  "bbc2986": "Issue #86 Broker写入pagecache耗时分布按照分钟来打印",
  "ce33b75": "Issue #60 SDK精简依赖,去除fastjson版本检查",
  "409ecb9": "添加 field cache",
  "87af62f": "修复启动过程中打印fastjson版本的问题",
  "dfddbe1": "客户端与服务器都需要检测fastjson包冲突问题。",
  "5fb21df": "fixed #480 修复拉消息时，计算是否在cache的方法",
  "4ace3a8": "fixed #480 修复拉消息时，计算是否在cache的方法",
  "0ef965c": "#476 开发查询Consumer内存数据结构功能，RemotingCommand有一个错误的get方法，会引起fastjson错误序列化",
  "d9b0c12": "#476 开发查询Consumer内存数据结构功能，RemotingCommand有一个错误的get方法，会引起fastjson错误序列化",
  "a4b6e61": "#476 开发查询Consumer内存数据结构功能，RemotingCommand有一个错误的get方法，会引起fastjson错误序列化",
  "2046685": "#476 开发查询Consumer内存数据结构功能，RemotingCommand有一个错误的get方法，会引起fastjson错误序列化",
  "c9007b0": "netty升级到4.0.19.Final fastjson升级到1.1.40",
  "a9fefcd": "netty升级到4.0.19.Final fastjson升级到1.1.40",
  "8dca679": "netty升级到4.0.12，fastjson升级到1.1.37",
  "6007836": "netty升级到4.0.12，fastjson升级到1.1.37",
  "01b05a5": "#144 RemotingCommand序列化部分改为fastjson",
  "ac52f5f": "#144 RemotingCommand序列化部分改为fastjson",
  "0677f1a": "修改fastjson 依赖",
  "e7afbb6": "修改fastjson 依赖",
  "60e5ab6": "fixed #109 使用fastjson，之前反序列化失败的原因有2个 1、非公开类，在反序列化过程中无法正确创建对象 2、fastjson不支持AtomicLong类型，33版本已经修复。 @qianjinkr",
  "74e543a": "fixed #109 使用fastjson，之前反序列化失败的原因有2个 1、非公开类，在反序列化过程中无法正确创建对象 2、fastjson不支持AtomicLong类型，33版本已经修复。 @qianjinkr",
  "6467d42": "fixed #32 将gson序列化改为fastjson @wenshao @zhongl",
  "0a7008d": "fixed #32 将gson序列化改为fastjson @wenshao @zhongl"
}, "rocketmq-externals": {
  "4515360": "Systemctl parameter optimization (#884)",
  "b238bbf": "Polish parts slow UT",
  "5c48ed1": "[ISSUE #570] ASoC connect runtime optimization: CLI (#622)",
  "564376b": "[ISSUE #570] ASoC runtime optimization: Cassandra connectors (#587)",
  "8b36443": "[ISSUE 503] Metadata synchronization optimization (#504)",
  "90b7a43": "[ISSUE #344] Update the fastjson version of runtime to 1.2.58 (#347)",
  "1399e76": "[ISSUE #256]Add loading icon for slow querying",
  "174ef97": "Fix ISSUE# 256 Add loading icon for slow querying",
  "bc83e99": "serializer change from fastjson to kryo (#41)",
  "8956388": "change org.codehaus.jackson to fastxml json MultiMQAdminCmdMethod annotation add timeout support",
  "8082b16": "js/css first load is very slow so add a loading page",
  "2d134fc": "todo improve. when data size is large,request is too slow",
  "e46cfc2": "filter different kind of topic|make it faster",
  "d447dc8": "when create a new consumer,if not be consumed,can't be found in consumerList //it Fixed,But this page is too slow,need improve --StyleTang"
}, "roncoo-pay": {
  "": ""
}, "RoundedImageView": {
  "": ""
}, "rstudio": {
  "e0c9b2c1": "Fix reading cached cross reference (#13048)",
  "3bf28232": "Fix reading cached cross reference (#13048)",
  "25840605": "Merge pull request #13036 from rstudio/feature/faster-parse-http-date",
  "6eb8250e": "Updated news for performance fixes",
  "c193362e": "Companion commit to performance improvements for caching/locking",
  "1324b126": "Merge pull request #12985 from rstudio/bugfix/companion-cache-users-and-nodes",
  "797a127d": "Companion commit to performance improvements for caching/locking",
  "f030dd63": "Change panmirror cache check to use release branch (#12743)",
  "85e4cba1": "Merge pull request #12553 from rstudio/feature/windows-dependencies-cache",
  "c4f34503": "Merge pull request #12548 from rstudio/feature/12532-sccache-dep-macos",
  "3ddafc39": "Update install-sccache with macOS support",
  "23c27fe4": "Merge pull request #12534 from rstudio/bugfix/prevent-sccache-install-on-osx",
  "a9a750ee": "Prevent sccache install script on macOS",
  "0dc231fc": "Merge pull request #12526 from rstudio/feature/sccache-support",
  "1adefc4a": "Add sccache support",
  "462d5136": "Break image layer cache if panmirror source is updated (#12437)",
  "d3ca44b8": "node-gyp cache clear debugging",
  "405d39e5": "fifth attempt to fix node-gyp cache issue",
  "7e7c799b": "fourth attempt to fix node-gyp cache problem",
  "ff22fb6a": "third attempt to clear node-gyp cache to fix build",
  "32f60466": "Another attempt to fix node-gyp cache problem",
  "2a1802dd": "try to remove the gyp cache to avoid intermittent build failure",
  "11579f2d": "add null checks to cache_ when reading pref values",
  "c20b4269": "reverted one line of the slow session starting fix",
  "f94e5850": "Merge pull request #11408 from rstudio/bugfix/slow-starting-companion",
  "d8278900": "Companion commit for slow session starting PR",
  "6c274438": "tweak electron npm cache location",
  "47e007d7": "don't cache attr-edit widgets (as they have different behavior based on location)",
  "21f2fd45": "Merge pull request #9725 from rstudio/bugfix/electron-slow-load-flashing",
  "4e7e0d61": "increase 'slow' threshold for tests",
  "fce9ebe0": "check saved cache for notebook output before giving up (#8239)",
  "803f0523": "update detect changes cache when reading environment state",
  "490fdef7": "cache encoding (avoid excessive filesystem reads)",
  "5af9eb21": "fast-forward past orphaned items in render queue",
  "90245025": "re-enable zotero cache",
  "11eacba0": "rename zotero cache dir",
  "8b2ba003": "Improve first load performance of insert citation dialog",
  "6cc2bb11": "Load tree fast!",
  "103b4d5f": "ensure chunks are matched correctly during cache replay",
  "21cf405a": "use strict equality checks for zotero cache versions",
  "de04b38f": "fix for performance issue with many Ace chunks (WIP)",
  "78d072a8": "zotero: use server cache when offline",
  "005ccece": "Improved add to bibliography performance",
  "271d31a1": "Deal with local cache of results",
  "c61572fb": "note cache dir in comment",
  "aa518f1a": "etag for server side cache",
  "e296479b": "server side cache for bibliography",
  "95d1eacd": "use page-based rendering for performance",
  "b6178184": "panmirror: run pandoc async + cache capabilities by version",
  "a771b715": "many improvements to outline behavior / performance",
  "706f3283": "Enable shared cache for sqlite databases. This is heavily recommended by SOCI and we are seeing potential race conditions in availability of tables without it.",
  "3c2b50cd": "Merge pull request #6775 from rstudio/feature/prevent-theme-cache",
  "2208a91a": "use diff-match-patch rather than fast-diff",
  "19b8d249": "always use fastdiff",
  "f2456dec": "use fast-diff rather than jsdiff",
  "659f0f49": "Merge pull request #6614 from rstudio/bugfix/gwt-unit-test-slowdown-fonts",
  "8eca2e4c": "disable JobsListTests GWT unit test due to slowness",
  "7514ed9b": "Revert 'disable shader cache by default on Windows'",
  "d0065843": "disable shader cache by default on Windows",
  "98d6811d": "use in-memory cache of web resources",
  "b523862a": "Merge pull request #6208 from rstudio/bugfix/qt-fast-install-macos",
  "8a8526c8": "fix macOS dependency script to use new fast Qt install scripts",
  "1af3d013": "cache URL for running job",
  "ede0f5fb": "cache computed lengths",
  "e8d71a80": "improve replace performance with bugs (WIP)",
  "a4f726b3": "Merge pull request #5532 from rstudio/bugfix/slow-plot-replay",
  "b6e6e015": "improve performance of plot replay (#5531)",
  "183761df": "change order of subdirectories to ensure symbols are cached correctly.",
  "aebef9a4": "additional fixes to prevent null references starting up on slow connections",
  "a6a8bbf0": "fix timing issues when starting new terminals on slow connections",
  "7fce0110": "realtime spelling: set popup z-index, add more domain specific words, refactor and amend elements that shouldnt be spell checked, moderate performance tweak",
  "e015d019": "cache user state when writing",
  "ef5b3eaa": "Merge pull request #5016 from rstudio/bugfix/is-package-project-performance",
  "ad749d10": "cache package information using indexer",
  "1bb56c6a": "allow cache on failure (avoid repeated noisy attempts to generate wrappers)",
  "e5f56ade": "initial population of layer cache",
  "d161c4b7": "Includes a chunk caching toggle for RMarkdown chunks. When selected, this adds `cache = TRUE` (equivalent to `cache = 3`) to the current chunk.",
  "cd5830a3": "Includes a chunk caching toggle for RMarkdown chunks. When selected, this adds `cache = TRUE` (equivalent to `cache = 3`) to the current chunk.",
  "932a7aaa": "Reordered get_int logic to be a little more intelligent so it is slightly faster in the common case (by checking for regular int first)",
  "4498eda4": "Merge pull request #4278 from rstudio/feature/better-lru-cache",
  "3aea9664": "Improve LruCache implementation. Before, updating or removing an entry from the cache required a linear search on keys to be performed. Now, the operation completes in constant time (simply updating some pointers)",
  "c882a83d": "suppress errors when reading available.packages cache (closes #4188)",
  "c1552e90": "Fix bug to ensure that when closing child proc fds in thread-safe mode, if the parent is unable to read the child fds and only a close message is sent, the child process will fall back to the safe slow close method",
  "04adad02": "Merge pull request #3878 from rstudio/bugfix/datatable-column-performance",
  "859dc29b": "Merge branch 'master' into bugfix/datatable-column-performance",
  "07a37abf": "Merge pull request #3887 from rstudio/bugfix/dataviewer-performance-v2",
  "c1b54209": "ensure Stan code input is written to notebook cache",
  "2e0f7658": "reduce the optimization level of debug builds on linux to prevent values from being optimized out.",
  "48829842": "Revert 'tweaks for data viewer performance'",
  "ac4d49ff": "Merge pull request #3842 from rstudio/bugfix/startup-performance",
  "688f7f51": "disable shader disk cache w/Intel GPUs (closes #3632)",
  "3ad3f5a7": "cache and check codepage (avoid expensive R calls when possible)",
  "9be95d87": "cache success when checking for build tools",
  "e5e11e27": "specify versions of components, use faster and more robust download technique",
  "bd8c60a0": "evict stale cache entries; avoid accumulating attach handlers (#3310)",
  "e626a144": "'max_repo_cache_age' added in R 3.5",
  "5bd63e6c": "ensure 'time' attribute set when using cached available packages",
  "0da13f05": "check to see if R has already cached available packages",
  "2f525532": "expire cache after 1 hour",
  "f9921f7c": "cache NEWS links",
  "d15f93a6": "use package metadata cache before reading DESCRIPTION",
  "79a49517": "use scrollbar width when displaying buttons in explorer; cache computed width",
  "97c50fd0": "check for NULL cache entries",
  "344fc11c": "don't purge cache entry when tab dismissed (handled server-side)",
  "288c3afe": "Merge pull request #3051 from rstudio/bugfix/data-viewer-performance",
  "8dbb24b6": "tweaks for data viewer performance",
  "cf237f68": "cache more information re: object source, etc",
  "be67f8c8": "cache discovered compilation arguments",
  "35b24639": "Merge pull request #2517 from rstudio/bugfix/slow-fork-high-ulimit",
  "67114a66": "Changed method of closing fds when working to be much faster",
  "06f21da1": "Fixed asio process unit test issue found by Gary. Turns out on some systems fork is extremely slow, so the call to spawn 1,000 simultaneous process can take a long time on such systems. Bumped up the wait timer to something more reasonable, and made sure to set the amount of spawned processes to a proportional amount based on open files limit.",
  "dc6b8d41": "cache language on client side (avoid excessive adaptToLanguage RPC)",
  "879dbf0e": "implement and simplify completion cache for Python",
  "3251a675": "Merge pull request #2168 from rstudio/feature/cache-common-deps",
  "d43cbc89": "update cached R Markdown package state after install; fixes #1801",
  "b3fc8b26": "rename data viewer resources for cache busting; fixes #1573",
  "823a7bb0": "Merge pull request #1758 from rstudio/bugfix/windows-nfs-slowness",
  "43190ef5": "candidate fix for slowness on NFS",
  "6763917b": "Merge pull request #1707 from rstudio/bugfix/viewer-row-names-performance",
  "30edcfea": "improve Viewer performance w/large datasets",
  "68aba2d7": "Merge pull request #1611 from rstudio/bugfix/slow-file-dialog",
  "585f7244": "cache and replay launch environment for new sessions",
  "810a2494": "performance tweaks",
  "6c8483cb": "fix editor performance degradation in rmarkdown under windows",
  "6ef70656": "remove from R cache when doc closed as well",
  "e221cec4": "clean up cache when host doc removed",
  "49f4a616": "migrate cached object to use doc id in cache",
  "7c87fea3": "avoid need to cache all levels of object exploration",
  "152b457f": "cache highlighter used per row as well",
  "ad4a1ce8": "nfs cache busting; always make best-attempt at execution",
  "8043f971": "Merge pull request #1035 from rstudio/feature/virtualconsole-performance",
  "f996b829": "Merge remote-tracking branch 'origin/master' into feature/virtualconsole-performance",
  "642a72d8": "guard against missing viewer cache dir",
  "3df567e5": "skip emitting permissions event (viewer cache now session-scoped)",
  "59592d9e": "Merge pull request #998 from rstudio/bugfix/orphaned-viewer-cache",
  "a8c1c0f2": "use sessions-specific viewer cache; remove orphaned entries",
  "2c0b42b7": "Merge pull request #997 from rstudio/bugfix/list-dirs-performance",
  "01c71499": "avoid using 'list.dirs' (performance)",
  "157bf1f6": "ensure cache directory available when generating outputs",
  "4feb12eb": "invalidate caches; store fewer connection details",
  "8938a69c": "improve performance w/ fixed layout (at expense of correctness)",
  "22fa961d": "improve performance; cancel resize when mouse leaves target region",
  "713a9215": "Merge pull request #854 from rstudio/feature/ace-linewidgets-performance",
  "405c78c5": "restore external chunks into knitr code cache prior to notebook preview",
  "dfc3713e": "add clear knitr cache command and clarify language around clear prerendered output command",
  "f45c8c9a": "cache scroll position for prerendered Shiny documents",
  "f65606a4": "ensure system encoding for profiles cache dir",
  "f5ba3ddc": "remove now-redundant cached package availability state",
  "18390216": "invalidate dependency manager cache when package state changes",
  "565d2a71": "cache satisfied dependencies in dependency manager",
  "3e27491f": "add command to clear knitr cache",
  "bb09ea3f": "notebook: no need to commit cache for unsaved docs",
  "e5eee54d": "cache metadata in stream mode",
  "c9e66d42": "plumb metadata about emitted objects into cache & client events",
  "3452a1a7": "initialize cached R version; correct version switches",
  "e97f089c": "Merge pull request #656 from rstudio/bugfix/find-in-files-performance",
  "2ccde134": "move saved stage cache folder when renaming notebooks",
  "b0e3e284": "move saved stage cache folder when renaming notebooks",
  "1fd023aa": "append code to cache for non-R engines",
  "2581b588": "use .nb.html over local cache if newer (e.g. from vcs)",
  "ffa6a7ce": "hydrate local cache from .nb.html if present",
  "8946be26": "tolerate empty / missing cache in 'readRnbData'",
  "a3b17663": "correctly merge html dependencies when committing notebook cache",
  "08c5aee0": "always clean up the uncommitted notebook cache when the document closes",
  "29091664": "scaffolding for writing elements to cache",
  "d3644460": "initial steps on writing out cache data",
  "e8546132": "derive cache from saved context",
  "8895d1ef": "update cache cleanup logic to use new directory structure",
  "b0abdb8c": "Merge remote-tracking branch 'origin/master' into feature/persistent-nb-cache",
  "264362e6": "add encode/decode pair; use 'createNotebook' when no cache",
  "b0b413dd": "begin work on two-stage notebook cache (WIP)",
  "b2f7eeae": "evaluate hook for generating output from cache data",
  "77e4c6fa": "render with 'eval=FALSE' when no cache available",
  "f2e42220": "ensure initial console input represented in notebook cache",
  "3660ab96": "generate notebook on save even when no cache available",
  "91b8a6d5": "address possible use of invalidated iterator in notebook cache cleanup",
  "5bcc505d": "Merge pull request #687 from rstudio/feature/console-input-performance",
  "e2326a03": "add support to clear rprof and html cache independently",
  "4d8f8500": "use cacheFileExtension for urls that contain no extension at all",
  "06565cb0": "removed unused cacheFileExtension field",
  "34227064": "make lack of cache data non-fatal",
  "66d5ff4d": "only cache focus state if window does have focus",
  "a234d9b9": "only main window needs to update cache",
  "67bfdb52": "handle missing notebook id cache entries more gracefully",
  "81cf1bc3": "maintain sequence number across chunk executions (fix cache issue)",
  "356a2650": "implement faster 'readLines' function",
  "6efe490a": "simplify; hydrate cache when opening notebook",
  "47e9a9b1": "begin extracting elements from .Rnb for cache hydration",
  "52c36c8b": "pr fixes on profile cache cleanup improvements",
  "69cbb2dc": "cache decoded line's size rather than recomputing at each stage",
  "479455ff": "helper for directly creating notebook from cache",
  "a5dd06ef": "remove profiles cache when document closes instead of window close",
  "bd572615": "clean up notebook caches after some period of disuse",
  "37caa799": "only delete temp rprof files when hosted in the profiles-cache directory",
  "be2b8438": "update cache reader to conform with new structure",
  "801d38c0": "move notebook output cache into internal RStudio state folder",
  "b5cdbc00": "avoid etag-based cache for notebook plots (etc) in desktop mode",
  "23085ec9": "Revert 'add .Rnb.cached folder to Git and SVN ignore files'",
  "04243f31": "prevent against deleting missing files when clearing profiles cache",
  "7fcab377": "add versioning within notebook chunk cache folder",
  "8456b20e": "remove .Rnb.cached gitignore change",
  "33ef28dc": "add .Rnb.cached folder to Git and SVN ignore files",
  "48d3a1af": "factor cache & chunk def functions to separate translation units",
  "389692ab": "ensure profiler cache directory is created when a rprof opens",
  "8bddd143": "shift responsibility for cleaning data viewer cache on dismissal",
  "b1e0f4d3": "cache system include paths",
  "4fa9aa61": "Merge pull request #600 from rstudio/bugfix/empty-cache-file-load",
  "2b15dd36": "defend against unloadable cache data file",
  "825790eb": "Rmd + cache => Rnb",
  "454595b9": "when opening an .Rmd file, populate cache from .Rnd if missing",
  "a8a10d0b": "populate cache as part of hydrating R Markdown from .Rnb",
  "66111858": "extract and save script chunks from .Rnb file to cache",
  "0c25d722": "revert change to remove rprofile.site since this is not a performance profile",
  "9f8bf018": "only create profiler cache directory if it does not exists",
  "d31cc1b3": "revert change to remove rprofile.site since this is not a performance profile",
  "e34fb3d4": "initial work on parsing .rnb file to notebook cache",
  "3712d296": "initial work on '.Rnb.cache' => '.Rnb'",
  "36fb3b0f": "invalidate cache when users clicks update in data import, even for the same file",
  "40036228": "plumb context id through notebook cache folder locations",
  "a304818a": "include context ID in notebook cache folder name",
  "f15e07f1": "add fallback to copy/unlink when notebook cache can't be moved",
  "5b8294a5": "use hidden folder to cache chunk output",
  "9745d599": "code review feedback: use etag cache, mark path encodings, etc.",
  "7547d56d": "clean up cache folder when closing unsaved docs; provide path",
  "b9b49872": "persist chunk console output inside Rnb cache",
  "05d1b29b": "avoid writing empty notebook cache folders",
  "143f6319": "serve chunk output directly from cached folder",
  "1e04b9b5": "clean up cache when unsaved source documents are closed",
  "93cf098b": "store chunk definitions in .rnb.cached folder; replay on file open",
  "6ede2818": "create data viewer cache directory more eagerly (not on shutdown)",
  "ead37361": "don't retrieve addins from server (cache copy from init/events)",
  "e1d25bd5": "load cached addin registry at startup rather than deferredInit",
  "a52cb236": "use cached session RPC key when possible",
  "effce429": "don't reuse cached app name",
  "e25d7475": "use cached app name if available",
  "b82c6bee": "don't cache host name",
  "2394e44f": "don't cache pid for lockfile names",
  "230aa036": "defer clearing indicator in case server response too fast",
  "a102ee04": "fix issue when tearing out data view for temp objects (keep cache)",
  "1271eec8": "update cached splitter position on resize",
  "4a62c45e": "less 'magic' when cloning TokenCursors (iterating over all properties can be slow)",
  "96151aa7": "close other docs: cache active editor reference; run continuations",
  "8ff7c3bc": "Merge pull request #446 from rstudio/bugfix/qt-help-cache",
  "6bf1d8b2": "avoid sending etag-based cacheable content in desktop mode",
  "47a380a8": "cache result of detecting system R version",
  "92d10993": "stop lookback at chunk headers (performance)",
  "8af157a5": "Merge pull request #437 from rstudio/bugfix/faster-package-checks",
  "68f420db": "improve performance of various token-related routines",
  "4ae32c14": "Merge pull request #417 from rstudio/bugfix/slow-virtual-console",
  "396bf821": "improve performance of virtual console when highlighting is used",
  "7e14d104": "cache the results of linting function bodies",
  "e256b265": "maintain conversion cache to avoid hit from repeatedly converting wide to UTF8",
  "90c9a4f2": "some optimizations + checking number of arguments passed",
  "047b11e7": "cache by address directly",
  "b5ea5f25": "move NSE inferrence to C for performance",
  "5f765a55": "always mark encoding on viewer cache directory",
  "d62a9184": "cache old Ace snippets (support 'revert' later)",
  "7f444ceb": "cache project compilation config",
  "a5db7f63": "cache NAMESPACE imports on startup",
  "93d7ed4a": "assign coerced frame to viewer's cached data environment",
  "53085621": "scripts for faster rebuilding of packaged rstudio on windows",
  "aec95aac": "only duplicate data views for which a cache key exists",
  "c5171f7f": "suppress warnings when cleaning cached data environment on shutdown",
  "558c4b62": "extra test for cached/working environment existence for data viewer",
  "0b358e1f": "suppress warnings when cleaning cached data environment on shutdown",
  "34b90b41": "extra test for cached/working environment existence for data viewer",
  "d68ab3f2": "cache library, require calls (WIP)",
  "cee6d7b5": "optimizations to file / folder lookup",
  "2a86300e": "debounce expensive resize handler (improves resize performance)",
  "54edf2a5": "ensure 'cacheable' is a scalar",
  "aa90415a": "directly return whether results cacheable",
  "dd6ab42b": "wire up package completions to cache",
  "7c28bcd7": "replace cache entries when object changes are detected",
  "70fd81d5": "duplicate on open and clean up cache when satellite window closes",
  "33515774": "save a cached copy of viewer objects for use when source object is gone",
  "e4ee3c5b": "use global cache for precompiled headers",
  "8d4afcaf": "drop cached frames; make viewers survive session suspend/resume",
  "35fa26fb": "flush completion cache when crossing paren",
  "daa20823": "Merge pull request #199 from rstudio/bugfix/completion-cache-exception",
  "d4e66108": "check that completion from cache is not null in 'usingCache'",
  "1884aa1a": "don't invalidate the cache on backspace; beginSuggest will handle invalidatePendingRequests",
  "91c7d812": "make sure we pass on the cached function name",
  "078c2191": "cache function argument completions; clean up debug output",
  "06c37187": "handle Packrat global cache-aliased packages gracefully in pane",
  "f046943f": "Support for 'local.repos', 'use.cache', 'external.packages'",
  "2fba6e6f": "handle removal of used/unused packages differently; cache action lists",
  "31a80df4": "set rmd preview files as non-cacheable in desktop mode",
  "c2507a91": "fix accumulating editor slowness in R Markdown mode",
  "76af30b4": "use bookmark href to cache PDF viewer location (reduce coupling)",
  "becb8a03": "allocate gwt symbol map cache on the heap",
  "70896801": "show progress after clearing knitr cache",
  "1a4a0a21": "don't use knitr cache by default for presentations",
  "cb27e9af": "force revaliation whenever returning cacheable content",
  "a00aec9d": "load symbol map when priming the cache",
  "e28d8328": "specify -noprecompile for faster devmode startup",
  "7537cb46": "command to clear the knitr cache for the active presentation",
  "e0799fae": "improve performance for large environments (bulk add initial object set)",
  "e51528bd": "per-document figure and cache paths for knit",
  "260d101f": "cache file contents of most recently served media byte-range request",
  "ca345db7": "don't cache learning resources",
  "49b9d14d": "cache resource files; custom css for code blocks",
  "cd8f2ddb": "faster enable/disable of error option",
  "de2cfd50": "cache successful check for cpp build dependencies",
  "db53d19b": "eliminate low magification zooming (caused scrolling performance problems)",
  "4b0594f7": "Fix overly fast scrolling for Microsoft wireless laser mice on Windows",
  "7d468353": "Fix overly fast scrolling for Microsoft wireless laser mice on Windows",
  "df3d9760": "invalidate spelling service cache when calling learnWord on os x",
  "1d2e238d": "cache spelling results",
  "d396d560": "make chunk options cache static",
  "a6a70ca6": "remove progress indicator from shell widget (make it more re-usable and solve startup progress issue for very fast connections)",
  "6439fe12": "revert use of webkit cache in desktop mode (was crashing in some cases)",
  "f8561caa": "Revert 'use file based webkit cache in desktop mode' (was crashing when opening the history pane on linux)",
  "42e29ed4": "use file based webkit cache in desktop mode",
  "ac291896": "clear rsa encrypt cache on session serialization",
  "1441cfcc": "Fix super slow scrolling mode on Mac",
  "e5970087": "refresh history_database cache whenever the underlying file changes",
  "31cee568": "invalidate code search result cache if the code index is updated",
  "60c9a9c7": "Change console capacity to 1000 lines for better performance",
  "b81d74f6": "improve event scanning performance",
  "414899e8": "make defaultEncoding (and potentially other user prefs) available directly from userSettings (via invalidatable cache of parsed json)",
  "e59813cc": "clear search cache on losing focus; cache up to 25 result sets",
  "cf343abd": "store project cache in project relative directory",
  "da8c5eae": "Dramatically better performance when running lots of commands in console",
  "a6612de1": "Dramatically better performance with large console output",
  "7c4eefa8": "Handle physical/logical distinction in FastSelectTable; slightly faster console perf",
  "14ca5157": "Incremental/on-demand parsing for function outlining (dramatically faster on large files)",
  "966cb497": "fast-fail when making packages",
  "7aa3cab7": "Make sure public key doesn't get cached by IE8",
  "ca4cba29": "Use cache-control:private for IE file export codepath. Also fix spaces in attachment filenames"
}, "runelite": {
  "ae83dec7": "Merge remote-tracking branch 'abex/cache-code-2023-05-17-rev213'",
  "54f04805": "cache: rename ambient sound fields",
  "daae1bc7": "cache: update uv calculation code",
  "332802d7": "Merge remote-tracking branch 'abex/cache-code-2023-04-05-rev212'",
  "78301507": "client: cache update 3-15-2023",
  "5ce5744c": "cache: fix texture projection on models without tex coords",
  "9154c4c6": "cache: refactor item renderer",
  "4eb1d879": "cache: remove various savers",
  "2aa0b974": "Merge remote-tracking branch 'abex/cache-code-2023-02-22-rev211'",
  "ed5c5553": "xtea: cache seen keys on disk",
  "b65723f5": "cache: update Model face limit",
  "0a3fdb42": "loot tracker: add support for frozen caches",
  "651aaef1": "cache: add rev210 npc loader code",
  "196f4ad5": "client: update to cache 2022-11-09-rev209",
  "d6c22aee": "cache: update ItemDefinition to 209",
  "21e66cf2": "cache: add seq animaya fields",
  "aef9c8fa": "cache: update 209",
  "c22e9600": "Merge remote-tracking branch 'abex/cache-code-2022-10-05-rev208'",
  "3224b6ff": "Merge remote-tracking branch 'abex/cache-code-2022-09-21-rev208'",
  "48100b14": "client: invalidate declaredAnnotations caches after startup",
  "4416cbd4": "loottracker: add cache of runes",
  "2bd0f1ce": "cache/ScriptVarType: add db row",
  "92338d71": "cache/ParamLoader: load types correctly",
  "1c648fd5": "cache: add dbtable opcodes",
  "93b12655": "cache: add DBTableIndex",
  "84d1cf7a": "cache: add DBRowDefinition",
  "4ef97be2": "cache: add DBTableDefinition",
  "0db46942": "cache: add ScriptVarType#id",
  "bfc7ccd6": "cache: add running/crawling anim opcodes from rev 205",
  "2fa6eb1d": "cache: update indextype names",
  "d6260f24": "api: add object composition cache accessor",
  "a5514641": "cache: make slf4j-simple an optional dependency",
  "c04534b7": "cache/MapImageDumper: draw cross region objs when drawing single regions",
  "fa4776f3": "cache/MapImageDumper: fix object wall checks",
  "3ca47609": "cache/MapImageDumper: handle pushdown objects correctly",
  "685ee8d7": "cache/MapImageDumper: fix icon & wall size & placement",
  "050e453a": "cache/MapImageDumper: add transparency support",
  "a00a8f39": "cache/MapImageDumper: add layer & brightness configuration",
  "a97d5b70": "cache/RegionLoader: allow plugging an external xtea key provider",
  "7cbef5ed": "cache: unify jagex hsl conversion",
  "4975781b": "cache: do not return partially or doubly lit textures",
  "b6c2653a": "cache: correctly link bought & placeholder items",
  "6a4544ed": "cl: set pmd cache location",
  "71da8bc3": "cache: use LinkedHashMap for switch jump tables",
  "3ad8452d": "cache: rename texture animation direction and speed",
  "ffc5380f": "cache: script: remove unused import",
  "15a393fe": "cache: script: use linkedhashmap for switch map",
  "d03421d2": "cache: refactor ModelLoader.decodeOldFormat variable names",
  "f1fb26eb": "rl-api: expose cache getters",
  "b53dc9ee": "cache: remove netty-buffer dependency",
  "060cb31a": "Merge pull request #14550 from abextm/phub-cache-longer",
  "9349ea84": "cache: remove http-api dependency",
  "c1aa0c48": "client: move jagexcache into .runelite",
  "7dd504fd": "http-service: remove cache controller",
  "02235d15": "cache: add rev202 model formats",
  "2e1e5bfd": "rl-client: remove chatbox performance plugin",
  "2eb2cdc3": "cache: rename objectdefinition ambient sound ids",
  "1443d5a3": "Add runelite_callback opcode to cache",
  "e98c3da7": "rl-client: use vanilla ItemComposition cache",
  "4cab29cf": "api: remove cachedModels2 and nodecache setters",
  "f1fc3ccb": "cache: add 197 opcodes",
  "14545aac": "rl-client: never cache 4/5xx requests",
  "04884bea": "cache: update cs2 opcodes",
  "2ab6196b": "Merge pull request #13637 from abextm/cache-code-2021-05-26-rev196",
  "a0d28b2f": "cache/NpcLoader: add category opcode from rev 195",
  "36216c7c": "cache/ObjectLoader: add randomizeAnimStart opcode from rev 193",
  "a2d72d75": "Merge remote-tracking branch 'ghubo/cache-code-2021-03-24-rev194'",
  "12844291": "item controller: add config for price cache time",
  "aa46b117": "cache updater: fix race with saving archives and computing archive hashes",
  "12a84f4c": "http service: remove unused cache item image endpoint",
  "03058a7a": "Merge branch 'cache-code-2021-2-23'",
  "9381e62f": "Fix incorrect named value when storing FlatStorage caches",
  "48262fdc": "Merge remote-tracking branch 'abex/cache-code-pre-2021-1-20'",
  "3a1784c2": "Update Quest Enum to latest cache (#12999)",
  "2ec4de4e": "Merge pull request #13013 from abextm/cache-code-2021-01-06-rev193",
  "d9b90e6c": "cache: allow partial caches to load",
  "059edd77": "cache: allow concurrent disk storage reads",
  "922c5e34": "cache: fix objexporter hsl to rgb calculation",
  "4668140d": "Merge remote-tracking branch 'abex/cache-code-2020-09-16-rev191'",
  "1c6e1164": "Merge branch 'cache-code-2020-08-26-rev191' into master",
  "c5f8b881": "cache: add default values to HealthBarDefinition",
  "93c1e36b": "config: increase config cache to 256",
  "23997a81": "cache: add healthbar dumper",
  "4b806d53": "Merge pull request #11883 from abextm/cache-code-2020-06-12-rev182",
  "fb32b584": "cache: emit null npc ids",
  "667a0e92": "cache: diable some long-running tests",
  "1c272bb6": "cache: add spotanim dump test",
  "22b5534e": "Merge pull request #11415 from abextm/cache-code-2020-04-30-rev182",
  "dd1736df": "Merge pull request #11077 from abextm/cache-code-2020-03-26-rev182",
  "c95bc2b5": "cache: update kit definition",
  "e4699555": "Merge pull request #10896 from abextm/cache-code-2020-02-27-rev182",
  "abf055c9": "Merge protocol and protocol-api into cache-client",
  "2ee6c9a7": "cache: add blocking mask to object definition",
  "8c5197c6": "cache: update sequence definition",
  "2eaf5718": "cache: Add hitsplat definition",
  "2dad9091": "cache: add field initializers to interface def",
  "fa5c6eee": "Merge branch 'cache-code-2020-01-09-rev182'",
  "c5491147": "cache: add param config",
  "778d3e13": "Merge pull request #10339 from abextm/cache-code-2019-11-28-rev182",
  "e777e13a": "Merge pull request #10311 from abextm/cache-code-2019-11-21-rev182",
  "9d6f817a": "Merge pull request #10259 from abextm/cache-code-2019-11-14-rev182",
  "294a0ab8": "Merge pull request #10171 from abextm/cache-code-2019-10-31-rev182",
  "c2e7b61a": "cache: update npc definition and loader",
  "12955a6e": "Merge pull request #10084 from abextm/cache-code-2019-10-17-rev182",
  "4dd5d4b2": "Merge pull request #10048 from abextm/cache-code-2019-10-02-c1-rev182",
  "562ff323": "cache: update object definition",
  "d6041bdc": "client: use own okhttp client with cache",
  "740697fd": "Merge pull request #9848 from abextm/faster-click-hull-external",
  "27b5d730": "menu entry swapper: fix menu searching optimization",
  "b6035a6c": "Merge branch 'cache-code-2019-09-12-rev182'",
  "7d74f6d6": "Merge pull request #9765 from abextm/cache-code-2019-08-29-rev182",
  "bd0badf7": "authfilter: cache sessions",
  "7e7b0373": "Merge pull request #9658 from abextm/cache-code-2019-08-15-rev181",
  "bbbac4ac": "Merge pull request #9614 from abextm/clanmanager-empty-cache",
  "44a000bd": "Merge pull request #9616 from abextm/cache-code-2019-08-08-rev181",
  "3e4f61b4": "ClanManager: handle startup with an empty cache",
  "c342f739": "client: cache config values",
  "3d326a6e": "client: cache and reuse Graphics",
  "bd7a6ed7": "Update Quest Enum to latest cache",
  "90441d24": "Merge pull request #9454 from abextm/cache-code-2019-07-25-rev181",
  "f42ebbfe": "runelite-client: Preload certain slow classes",
  "b75cb155": "Merge pull request #9429 from abextm/imageio-cache",
  "046e8621": "Merge pull request #9392 from abextm/cache-code-2019-07-18-rev181",
  "be8d5d1f": "Merge pull request #9275 from abextm/empty-cache-firsttime",
  "911893b7": "cache/FrameDumperTest: Don't get the wrong framemaps for a frame",
  "db874a4d": "Merge pull request #8954 from abextm/cache-code-2019-05-30-rev180",
  "10a7384c": "Merge branch 'cache-code-2019-05-23-rev180'",
  "e9ad22e6": "Merge pull request #8714 from abextm/cache-code-2019-05-02-rev179",
  "927e02ff": "interface styles: invalidate healthbar cache on shutdown",
  "864fe9ac": "Merge pull request #8636 from abextm/cache-code-2019-04-25-rev179",
  "ad8328e1": "Merge pull request #8498 from Abextm/cache-code-2019-04-11-rev179",
  "ed8a24b0": "cache: datafile: simplify next sector calculation",
  "94a0ee55": "Normalize configuration between cache-updater and http-service",
  "0f5dc650": "Merge pull request #8275 from Abextm/cache-code-2019-03-21-rev178",
  "fa2b98a4": "Merge pull request #8208 from Abextm/cache-code-2019-03-14-rev178",
  "75fbb07b": "cache: use RuneStar cs2 opcode names",
  "40ea7fa6": "cache: assign temporary names for new varc string opcodes",
  "3881bb08": "Merge pull request #8032 from Abextm/cache-code-2019-02-28-rev177",
  "c81c0efb": "Merge pull request #7875 from deathbeam/null-check-cache-items",
  "e8019d05": "Null-check cache when getting items in http service",
  "7edd6021": "Merge pull request #7828 from deathbeam/fix-item-comp-cache",
  "09d324e1": "Reset item composition cache on menu shift click change",
  "a44f32d8": "Merge pull request #7738 from Abextm/cache-code-2019-02-07-rev177",
  "233de558": "Merge pull request #7597 from Abextm/cache-getters",
  "527be68a": "cache: Include id in StructDefinition",
  "3253de94": "cache: use lombok Data for all definitions",
  "bc627809": "Merge pull request #7214 from Abextm/flatcache",
  "43bcbe0e": "cache: Generate NullItemID",
  "cbe4358e": "Update item variations to latest OSRS cache",
  "a651f1cf": "Merge pull request #7260 from Abextm/cache-code-2019-01-10-rev177",
  "330d47b5": "cache: Add equals and hashCode to all Definitions",
  "33e76436": "cache: Add FlatStorage",
  "067c9aa2": "xtea service: add cache for recently tried keys",
  "ed20a3f1": "Remove cache-server",
  "a2c1b1b9": "Merge pull request #6922 from Abextm/cache-code-2018-12-13-rev177",
  "b60b47f3": "Merge pull request #6838 from Abextm/cache-code-2018-12-06-rev177",
  "0c54cf04": "Merge pull request #6733 from Abextm/cache-code-2018-11-29-rev177",
  "18ec8642": "cache: prevent dumping enums with no data",
  "f65a0c22": "cache: Add ScriptVarType to Enums",
  "b6166c81": "Merge pull request #6630 from Abextm/cache-code-2018-11-22-rev177",
  "caa1eadc": "Properly null-check chat performance widgets",
  "cd5c745b": "Merge pull request #6475 from Abextm/cache-code-2018-11-15-rev176",
  "06850cff": "feat: add StructDefinition to cache",
  "f0bdf4ba": "Update item_variations.json for latest cache changes",
  "2f9e9436": "Merge pull request #6389 from Abextm/cache-code-2018-11-08-rev176",
  "71f398de": "feed controller: add cache control for feed result",
  "608d5fb7": "cache: Correct Location loading",
  "7cc40e22": "Merge pull request #6057 from Abextm/cache-code-2018-10-18-rev176",
  "6f6db127": "Merge pull request #5924 from Abextm/cache-code-2018-10-11-rev176",
  "725326cd": "Merge pull request #5799 from Abextm/cache-code-2018-10-04-rev175",
  "34a7b17d": "Merge pull request #5661 from Abextm/cache-code-2018-09-27-rev175",
  "98bfe79b": "Merge pull request #5558 from Abextm/cache-code-2018-09-20-rev175",
  "9a268945": "Merge pull request #5467 from Abextm/cache-code-2018-09-13-rev174",
  "7a99eaf4": "Merge pull request #5394 from Abextm/if-cache-names",
  "0ceb29d9": "Merge pull request #5429 from Adam-/hiscore-cache",
  "959f83f9": "cache: add various world map related opcodes",
  "f7c83db9": "cache: Store ID in ScriptLoader",
  "36971a2a": "cache: Disassemble CS1s",
  "9e8c3d8c": "cache: name InterfaceDefinition fields",
  "67af0dcf": "Merge pull request #5333 from Abextm/cache-code-2018-09-06-rev174",
  "3ed69a85": "Merge pull request #4792 from Abextm/cache-ordering",
  "feebe520": "Merge pull request #4793 from Abextm/cache-newlines",
  "0fdfd8a9": "Merge pull request #5207 from Abextm/cache-code-2018-08-30-rev174",
  "c02ff65a": "cache: fix outputstream writeString to not write unicode strings",
  "40ff5555": "world service: split controller from service and add cache",
  "f6e34b7e": "cache: Properly produce `\n` only on windows on jdk9+",
  "4ab21e1f": "cache: Do not depend on Index insertion ordering",
  "1e6de021": "Merge pull request #4696 from Abextm/cache-client-response",
  "d0cb8144": "cache-client: Return failure to the handshake Future",
  "ca7ca3a7": "Disable zoom extender when a cache overlay fails to load",
  "23c13c1d": "cache: fix assembler to set correct switch table index",
  "bf79c323": "cache: Relax label name constraints",
  "49ace3f7": "-Fixed objects of variable width and length from being positioned incorrectly on the map. -Renamed LocationKey to ModelKey and added another field so that cached values are correct for objects using the same models. -Implemented shading to the scene. -Implement full SceneTilePaint with variable colors and textures. -Implement textures while rendering SceneTileModel -Enable maps to be loaded by their region id instead of just their coordinates. -Implement full object model creation (replacement colors, replacement textures, resizing, translation) -Added two new methods to ModelDefinition used in object model creation.",
  "7c96955c": "Merge pull request #4025 from Adam-/widget-optimizations",
  "e7574b4f": "cache: rename additional npc definition fields",
  "bf2d7501": "Merge pull request #3842 from Abextm/cache-object-id-limit",
  "929d7708": "cache: consolidate ID class printing and split ObjectID",
  "12ac1b2c": "item manager: cache unable to look up on unsuccessful bulk lookup too",
  "947947e3": "ge search panel: catch cache load exception from search returning null",
  "e96d46b0": "Skill calcs performance improvement",
  "32b7abb6": "Merge pull request #2985 from devLotto/fast-stretched-fixed-mode",
  "6c18bcb6": "SetOpaque performance fix",
  "822bceac": "Use NpcSpawned and despawned for getting cacheNpc",
  "7cc72609": "cache: Strip tags from java names",
  "42005ffc": "item manager: cache no price when unable to batch lookup",
  "37703ef8": "Improve performance of ClueScrollWorldMapPoint",
  "5da9d697": "Add SpriteManager to get sprites from the cache.",
  "30e70bb9": "cache: Name ObjectDefiniton's varpID and configID correctly",
  "3a073d1a": "Fix herbiboar performance/blinking",
  "e0b7ac9d": "Update cache-server test to use cache 165 too",
  "fa3858af": "Merge pull request #1236 from deathbeam/fix-ground-items-cache",
  "103c3b87": "cache: Allow scripts to start with comments",
  "c916b9cb": "Add clan member manager to cache clanmember ranks, use in clanchat plugin",
  "65e3629f": "clanchat plugin: change cache to expire after write",
  "01f2532b": "Add DMM name drawing opcodes to cache",
  "68b38d10": "Merge pull request #1207 from deathbeam/fix-ground-item-recache",
  "dff0ce00": "Invalidate item manager cache on hopping and login",
  "19bd1f5c": "Invalidate ground items cache properly",
  "9f943832": "cache: rewrite map image dumper with logic from client",
  "769ce714": "cache: add post to object loader",
  "f50760c8": "cache: add and compute hsl in overlay",
  "d3c4c955": "cache: add and compute hsl in underlay",
  "f3b9548c": "cache: split color palette code into its own class",
  "86578fcc": "cache controller: expose item sprites",
  "66c8fce6": "cache: add item sprite renderer",
  "148a7e1c": "cache: add resize, recolor, and retexture to modeldefinirtion",
  "710c0a2e": "cache: store original pixels and palette too, and add normalize()",
  "beb9d3a2": "cache: expand on texture definition and loader",
  "73505223": "cache: fix not invalidating vertexNormals in reset",
  "e4af1aa0": "cache: add updateNote to ItemDefinition",
  "a3e4dc40": "cache: add provider interfaces for items, models, sprites, and textures",
  "0d5a7ea6": "cache: change netty dependency to netty-buffer",
  "10311e49": "cache: fix item definition default zoom2d",
  "3df3910b": "NpcID: update ids to cache 165",
  "e8d232de": "runelite-api: expose cachedNpcs",
  "069e9c44": "Merge pull request #889 from Adam-/cache-165",
  "4a7e9582": "cache: update cache to 165",
  "51b077b4": "cache: Add get_is_mobile opcode.",
  "ee35d323": "cache: release the ByteBuf allocated when calling ByteBuf#readBytes(int)",
  "4bcfdc53": "item controller: cache empty price lookups",
  "a0f074fd": "Re-cache chatMessageManager colors on startup",
  "cc124d6d": "Properly invalidate cache and load icons in Clan",
  "6f0c7c74": "slayer plugin: add check for cachedXp when xp changes",
  "2e8013b0": "Update ItemID from 160 cache",
  "cb78508b": "cache: Update ObjectManager to include NULL names",
  "181c717a": "runelite-client: add central skill icon cache",
  "d5f56f69": "http service: change cache datasource to runelite-cache2",
  "cda04b7a": "Split out cache updater into own project",
  "8c678f69": "cache service: split up into cache controller and service",
  "b25c237e": "cache service: fix duplicating index to archive associations",
  "a73afb79": "cache client: log when index crc changes too",
  "1a97d56e": "item manager: fix trying to cache null in getItemPrice",
  "b66cb707": "runescape-api: remove RSCacheableNode::getNext() and getPrevious(). They are different than RSNode's next and previous, but have the same signature so they can get called instead. This caused the ground overlay to only show 1 item because it was iterating the cache, not the item list.",
  "550a0790": "cache: allow carriage returns in newlines in scripts",
  "ff1c5681": "cache service: fix findArchive to select distinct",
  "c4d838b1": "Add ability to overlay cache archives",
  "049ab218": "cache: add script id to grammar",
  "6353bb01": "cache: add get_camera_focal_point_height",
  "d53200cb": "cache: add set_camera_focal_point_height",
  "7b3c8c34": "cache: add comment to rs2asm grammar",
  "cdfc7c54": "cache: add get_zoom_distance",
  "4ca7ee20": "cache: add set_zoom_distance",
  "e6506371": "cache: allow passing instruction set to assembler",
  "4624371b": "cache: remove script interpreter",
  "b7d8b756": "item service: set cache-control: public too",
  "9aded64e": "cache service: remove unused import",
  "8eb37bb3": "Revert 'cache service: move database updating to happen during download'",
  "1eeab55b": "Revert 'cache service: don't skip already up to date archives'",
  "05732746": "Revert 'cache service: use an identity hashmap as equals checks archive contents'",
  "00480e60": "cache service: use an identity hashmap as equals checks archive contents",
  "244cce50": "cache service: don't skip already up to date archives",
  "36acbebd": "cache service: move database updating to happen during download",
  "fff5f510": "cache service: skip loading filedata as it is not necessary for cache updater",
  "e1a6fb13": "cache service: lazily load store",
  "1066aa23": "Merge pull request #344 from deathbeam/better-clan-rank-cache",
  "c774784c": "http-service: change item price cache to 30 minutes",
  "9021b9a6": "http-service: add cache control to item price",
  "0fda8354": "http-service: disable default cache control provided by spring-security",
  "ad8b2e82": "http-service: fix item price cache to use fetched time instead of price time",
  "a29f5536": "cache test: get tmpdir from a system property",
  "a407af86": "cache: also disable map dumper test",
  "ee3f4add": "cache: disable map image dumper test",
  "82d277a8": "cache: split cache client and server into their own projects",
  "c4bee112": "cache: add map and location definition, convert Region loading to use it",
  "162efc9b": "cache: add savers",
  "a27d3686": "cache: add a few more write* to outputstream",
  "0cebc5eb": "cache: lombok definitions",
  "e9e7e2a1": "cache: rename some fields of object and interface",
  "a718d006": "cache: fix readString to not sign extend negative values",
  "e685ac24": "cache: fix readBigSmart",
  "54c61857": "cache: fix writeBigSmart",
  "1f153ddc": "cache: default index data to protocol 6",
  "033cf3bb": "cache: split loading archive files from archive loading",
  "69deaa5b": "Fix overlay renderer cache",
  "21f25430": "cache: fix compression with encryption",
  "cba98663": "cache: remove tree storage",
  "440ecd6c": "cache server: never send appended archive revision",
  "c31758a7": "cache: test scope slf4j-simple",
  "a94ccedb": "cache: use own Xtea implmentation instead of bouncycastle's",
  "0049b8d3": "cache: improve xtea test",
  "1a6f84ca": "cache: remove whirlpool as it is not in osrs",
  "c035d060": "cache: add more opcodes",
  "672a24bc": "cache: redump test scripts to fix tests",
  "415a764c": "cache: add more cs2 instructions",
  "80bb459f": "cache: add djb2 test",
  "7b665286": "cache dao: fix findMostRecent() to sort by revision properly",
  "dbbdd31e": "runelite-client: make item image cache non static",
  "2cb8f0fe": "cache: fix assembler test",
  "901ff8e5": "cache: update opcodes",
  "9936fe35": "cache: update world map dumper for Areas",
  "a5f6da90": "cache: remove runelite api dependency",
  "8cf0e1cc": "cache: set protocol on downloaded indexes too",
  "593e93b1": "cache: fix writeBigSmart",
  "ba4447d8": "cache: update cache version to 154",
  "f1bc016c": "cache: use the most recent cache instead of the archive with the highest revision, which isn't always reliable",
  "16aff436": "http-service: disable csrf protection which got enabled from the cache security manager",
  "7ce893af": "cache: store index and archive crcs, and check them for updates too",
  "714547e1": "cachedao: use prepared statement for finding files in archive",
  "76b2d367": "cache: netty-ize client and server",
  "744f912d": "http-service: update cache storage",
  "7ccd7445": "cache: fix tree storage test by sorting files prior to adding",
  "cbfa298a": "cache: add generated equals/hashCode to ArchiveFiles",
  "94530bda": "http-service: add cache service",
  "ea7a9257": "http-api: add cache pojos",
  "ed05ab93": "cache client: download indexes even if revision is up to date",
  "218333e9": "cache: split archive file processing out from archive",
  "78f5ddcd": "cache: split storage apart from Store",
  "1b5cd873": "cache: fix not creating files in cache client",
  "dcdcfc74": "cache: make slf4j implementation optional for others which pull it in",
  "ce250f78": "cache: throw less out of download()",
  "9e006553": "cache: use newer index data parser for cache client",
  "bf443617": "cache: split index data reading off. It is shared with the cache client too.",
  "bee7bcec": "cache: overwrite archive crc/revision with stored version on mismatch",
  "69b85e41": "cache: expand on revision/crc mismatch warnings",
  "684bf707": "cache: rename File to FSFile",
  "0bfdf1d3": "cache: split index request from download, remove hardcoded client rev",
  "1305c379": "cache: rename downloader -> client",
  "01b792f9": "cache: use hex for archive names",
  "07c8442f": "cache: add getter for npcs list",
  "fd0c3a10": "cache: add run command opcode",
  "f802ae8b": "cache: correct inventory dumper log message [ci skip]",
  "cc52cd7c": "cache: add get_inventory_size instruction 3304",
  "72e1df2a": "cache: add inventory loader and dumper",
  "5a270cfc": "cache: don't complete haneshake future until after state is changed to connected",
  "cba8c83c": "cache: use id to uniquely name fields",
  "57ce1a1c": "cache: update to 148",
  "b1010d78": "runelite-client: add cache for item compositions in grounditems plugin",
  "41dfdbef": "runelite-api: update NpcID from cache 143",
  "c3b3a761": "runelite-client: cache negative item price queries",
  "bec5ff64": "cache: fix trackdumpertest with negative archive names",
  "c0a25b56": "cache: update to 143",
  "ca93ce2a": "cache: remove unnecessary loop from TrackLoader",
  "7e0a1c37": "cache: fix trackloader sometmies producing corrupt midis",
  "0ef72eb8": "cache: fix setting enum size",
  "6a552a81": "cache: add area definition and loader",
  "1bc843b6": "cache: fix cache server test",
  "f81592c3": "cache client: batch requested archives instead of requesting individually",
  "9adfb183": "cache: add loaders for archive 0 of world map index",
  "21f9f583": "Update cache to 142",
  "2e5e118d": "cache: extract cache to working directory based on cache version",
  "31f600e4": "cache: add string append instruction",
  "519e6d9f": "cache: add switch to interpreter",
  "99d47b20": "cache: add invoke to instructions",
  "21d79550": "cache: also write int operand for sload",
  "27d15424": "cache: add stack and lvt string/int counts to rs2asm",
  "4f14eebd": "cache: document invoke/return some, add beginning of lvt to interpreter",
  "82fcdb95": "cache: add iload/istore sload/sstore opcodes",
  "3cd86bbb": "cache: fix framemap dumper file names",
  "48bbb11a": "cache: add definition/loader for frame and framemap",
  "ba4ff2ed": "cache: couple of newFile -> newFolder",
  "2f3073e0": "Merge pull request #55 from kfricilone/cache/defs-update",
  "c5326405": "cache: remove npc_def opcode",
  "50857627": "cache: update definitions",
  "d007cdfa": "travis: add .m2 to cache",
  "50b7ff20": "cache: add switch instruction",
  "b96619e2": "cache: add script attrs to assembler and disassembler",
  "e210cf6f": "cache: load script key/value pairs too",
  "9e1ad936": "cache: update script loading for newer cache",
  "d038cc1e": "cache: also copy index255",
  "791854ed": "cache: remove old cache from test resources, instead pull in as a dependnecy via maven",
  "31a781e5": "cache: set handshake future prior to writing handshake",
  "f7afd315": "cache: Add mapping for opcode 1301",
  "9024417b": "cache: document more handshake responses",
  "512d0f5f": "cache: add varbit definition and loader",
  "cafa2b31": "cache: add track1 definition and loader",
  "b71ada8f": "cache: add djb2 manager with a couple hashes dumped from the client",
  "198d61f7": "cache: sound effect parsing",
  "776add59": "cache: add interface definition, loader, and manager",
  "16f23c9e": "cache: add textures to objexporter, from @UniquePassive",
  "731fa488": "cache: add texture manager",
  "a3828fce": "cache: split npc exporter from dumper",
  "5e7ab6e3": "cache: split object exporter from dumper",
  "e154d857": "cache: split item exporter from dumper",
  "83735cea": "cache: split sprite exporter from dumper",
  "cdbbe9f5": "cache: try-with-resources the rest of the Stores in tests",
  "7146d4da": "cache:add sprite dumper",
  "9444e8ce": "cache: fix cache server to buffer stream socket data, this works with vanilla client",
  "609b0f15": "cache: don't return archive data in saveContents, its already compressed and encrypted which is confusing/everywhere already checks first",
  "220175b8": "cache: add cache server",
  "aa023307": "cache: decompress and load archive data in client too, so saveTree() later works as expected",
  "a723d662": "cache: add kitdefinition and loader",
  "98096fd1": "cache: also include normal indicies in faces",
  "081bed8a": "cache: fix material names colliding/the same one multiple times with different alphas",
  "046ce8d8": "cache: fix exporting alphas",
  "da68089c": "cache: add .obj model exporter",
  "592a2502": "cache: consolidate dumper entrypoints, add pack/unpack commands",
  "b2327d7e": "cache: add saveTree/loadTree to save/load cache to/from a normal filesystem",
  "963d82c9": "cache: assume archive data we don't decompress contains no revision. The downloaded data does not.",
  "9170c418": "Make cache client a little more friendly to use",
  "937d27a1": "cache: some work on the interpreter",
  "76dcf79e": "cache: also clear instruction list by name",
  "633a184d": "cache: add assembler and split scriptdumper test into disassembler/disassemblertest",
  "6d23945e": "cache: also label conditional jumps",
  "e6cf1567": "cache: fix tests... static state being initialized twice",
  "96849485": "cache: fix labels (earlier script dump was fine)",
  "cc0b5e1a": "cache: add names to instructions",
  "56448b4e": "cache: various fixes to downloader and logging improvements",
  "47541ffe": "cache: newer stuff for itemloader, from @UniquePassive",
  "73b0beae": "cache: fix itemdumper",
  "ea612d18": "cache: fix 5309",
  "09272b9f": "cache: rest of the opcodes",
  "25edc006": "cache: some work on script opcodes",
  "aeffd8aa": "Add raw map dumper, and support for xtea encryption. Split datafile reading from deccryption/decompressing, allow cache client to simply save the encrypted+compressed data, too.",
  "535cbaa6": "Add cache downloader client",
  "c42d313c": "Split cache from deobfuscator into own project",
  "a1caacc2": "Add NpcID. These ids look weird, I wonder if they are scrambled. The cache version this is extracted from is old.",
  "755d0138": "Fix artifact resolver to allow local cache files",
  "3444655f": "Rewrite constant parameter. A bit faster now. Can't tell if its right. Seems to compile.",
  "bcbc8799": "Unused params test, this is very slow.",
  "b16fbd71": "Constant parameter test, kind of slow though, 46s.",
  "2fdf2b47": "ise tests/cleanup. needs more optimizations.",
  "83a51ea0": "Remove block graph and jump inliner which wasn't used. The loading time for the block graph (because of the way exceptions were looked up) was too slow.",
  "1a8e11b7": "Test exports png files ok, need to clean this up as it is mostly ripped from os cache suite",
  "eee5f72d": "Add disabled test to dump cache",
  "95368f61": "Fix constant parameter corrupting instructions. Make unused blocks faster.",
  "ec503039": "Fix up jump inlining, this causes linear scans of the instructions for a lot of exceptions and is slow. Need to allow inlining in try blocks?"
}, "ruoyi-vue-pro": {
  "b908076": "fix: cache type error",
  "3e60ff2": "feat: add cache key",
  "40520b6": "fix：降级 fastjson 版本，解决新版本的 jimu 报表在 2.0.10 会报错的问题",
  "a01e94a": "fix：升级 fastjson 版本，解决新版本的 jimu 报表在 2.0.5 会报错的问题",
  "a0f7f0f": "!211 Redis 监控添加缓存列表 Merge pull request !211 from 圆梦巨人/feature/cache-list",
  "797be10": "Merge branch 'master' of https://gitee.com/zhijiantianya/ruoyi-vue-pro into feature/cache-list",
  "1c89d3b": "!179 fastjson漏洞处理 Merge pull request !179 from October/master",
  "0e601d9": "据国家网络与信息安全信息通报中心监测发现，阿里巴巴公司开源Java开发组件fastjson存在反序列化漏洞。fastjson被众多java软件作为组件集成，广泛存在于java应用的服务端代码中。攻击者可利用上述漏洞实施任意文件写入、服务端请求伪造等攻击行为，造成服务器权限被窃取、敏感信息泄漏等严重影响。此次事件影响fastjson 1.2.80及之前所有版本。目前，阿里巴巴公司已发布fastjson最新版本1.2.83以修复该漏洞，组件升级地址为：https://github.com/alibaba/fastjson/releases/tag/1.2.83。 请各单位高度重视，迅速通报预警本辖区、本系统单位，及时排查梳理受影响情况，在确保安全的前提下修复漏洞、消除隐患，提高网络系统安全防护能力，严防网络攻击事件。同时，加强安全监测，做好应急处置准备，发现突出情况要迅速处置并第一时间报告。",
  "eadc4f7": "替换带代码里所有 fastjson 的内容，统一使用 jackson",
  "521ff51": "升级fastjson到最新版1.2.74",
  "7de5358": "升级fastjson到最新版1.2.73",
  "4cf3786": "升级fastjson到最新版1.2.70 修复高危安全漏洞",
  "31b63bf": "升级fastjson到最新版1.2.70 修复高危安全漏洞",
  "5d20be2": "升级fastjson到最新版1.2.68 修复安全加固"
}, "RxAndroid": {
  "a45bcb6": "Merge pull request #287 from ReactiveX/jw/cached-instance",
  "57d7a4c": "Merge pull request #280 from ReactiveX/jw/hook-cache",
  "13092f7": "Drop volatile in favor of failing fast if not subscribed from UI thread"
}, "RxAndroidBle": {
  "ef2db2d": "Added granted permissions cache in CheckerPermission. (#802)",
  "0414620": "Revert removal of ScanFilter match on cached device name",
  "f02eec8": "Added link to a small performance comparison in Readme. (#41)",
  "248d7e0": "Disabled `RxBleGattCallbackPerformanceTest` for performance (sic!) reasons. Removed unneeded parts.",
  "9c5df19": "Optimized logging in RxBleRadioImpl which should improve very frequent operations performance (does not apply to notifications)",
  "5fc8705": "Fixed logic of checking filter UUIDs. Optimized performance.",
  "309b3d4": "Added caches & build trigger after cache was invalidated.",
  "c781461": "Fixes RxBleDevice cache that was returning that is empty when it wasn’t.",
  "602669d": "Fixed performing / using / cacheing RxBleDeviceServices.",
  "a837a0e": "Stopped tracking cache.xml"
}, "RxEasyHttp": {
  "": ""
}, "RxJava": {
  "9cd59f1": "Bump actions/cache from 3.0.11 to 3.3.1 (#7539)",
  "b02a9d5": "Bump actions/cache from 3.0.10 to 3.0.11 (#7477)",
  "040ddca": "Bump actions/cache from 3.0.9 to 3.0.10 (#7474)",
  "2858f93": "Bump actions/cache from 3.0.8 to 3.0.9 (#7473)",
  "ceee82e": "Bump actions/cache from 3.0.7 to 3.0.8 (#7466)",
  "219a1f0": "Bump actions/cache from 3.0.6 to 3.0.7 (#7461)",
  "05c8521": "Bump actions/cache from 3.0.5 to 3.0.6 (#7455)",
  "e26f95d": "Bump actions/cache from 3.0.4 to 3.0.5 (#7449)",
  "e338cc5": "Bump actions/cache from 3.0.3 to 3.0.4 (#7439)",
  "2e0033d": "Bump actions/cache from 3.0.2 to 3.0.3 (#7430)",
  "31ec3f4": "Bump actions/cache from 3.0.1 to 3.0.2 (#7412)",
  "0b385c5": "Bump actions/cache from 2.1.7 to 3.0.1 (#7408)",
  "8ee7799": "Bump actions/cache from 2.1.6 to 2.1.7 (#7367)",
  "327fa44": "Bump actions/cache from 2.1.5 to 2.1.6 (#7278)",
  "bb03bcf": "3.x: Action cache clear, limit environmental variables (#7238)",
  "5bb119b": "Bump actions/cache from v2.1.4 to v2.1.5 (#7234)",
  "2d87345": "Bump actions/cache from v2 to v2.1.4 (#7230)",
  "c3cfb5a": "2.x: Improve the Observable/Flowable cache() operators (#6275)",
  "b9f5ef8": "2.x: benchmark (0..1).flatMap and flattenAs performance (#6017)",
  "41cfbf6": "2.x UnicastProcessor fail-fast support (#5226)",
  "29bceef": "[2.x] UnicastSubject fail fast support (#5217)",
  "66fbf5a": "2.x: measure performance of 0-1 length inner source to flatMap",
  "ab21265": "2.x: improve performance of Observable.flatMapIterable (#4612)",
  "78c4975": "2.x: fix SchedulerLifecycle.testStartIdempotence vs cached threads dying",
  "99359a7": "2.x: scalar flatMap optimization enabled",
  "06708c5": "Test some UnicastSubject, cache, NotificationLite, amb",
  "92b27f2": "RxJavaPlugins performance enabling fix & lockdown.",
  "c4c3140": "Operators publish, replay and cache.",
  "dd5c646": "Improve performance of NewThreadWorker.tryEnableCancelPolicy(). Disable search for ScheduledExecutorService.setRemoveOnCancelPolicy() on Android API < 21",
  "b21c237": "cache() now supports backpressure (again)",
  "e4000b3": "Merge pull request #3081 from abersnaze/cache-rollback",
  "e8dd4ed": "Revert 'cache now supports backpressure'",
  "5411086": "Revert 'If cache() now supports backpressure, correct javadocs to indicate this.'",
  "e25cd27": "reduce probability of ExecutorSchedulerTest.testOnBackpressureDrop failing on slow machine",
  "8d1cecc": "break tests as approach timeout so that don't fail on slow machines",
  "0420193": "Merge fully rewritten and other related optimizations",
  "ec3d522": "If cache() now supports backpressure, correct javadocs to indicate this.",
  "18ff5af": "cache now supports backpressure",
  "729e90e": "Fix the performance degradation due to different schedule execution and SubscriptionList.add() and thread unparking.",
  "9fb5614": "Merge pull request #2880 from davidmoten/reduce-optimization",
  "adaa913": "fix race condition for Observable.from(Iterable) where two concurrent calls to the Producer.request with Long.MAX_VALUE could start the fast path twice",
  "f8f4cd0": "fix race condition for range where two threads concurrently request Long.MAX_VALUE and both start the fast path thus possibly some items more than once",
  "2f7145a": "ensure OperatorZipTest.testZipRace does not fail on slower machines",
  "75b9ec6": "Add .gradle to cache",
  "0fd9c76": "Fix the bug that 'publish' will cache items when no subscriber",
  "36b323e": "add check for isUnsubscribed to OperatorTakeLast fast path",
  "e26dd2b": "Fix the bug that cache doesn't unsubscribe the source Observable when the source is terminated",
  "a683fcc": "enable faster travis builds",
  "4633809": "non-deterministic timeouts on slow machines",
  "0f6dd5a": "remove javadoc warnings from cache(); add @since annotation to cache(b)",
  "0f12e5f": "Merge pull request #1467 from benjchristensen/cache-docs",
  "1bb0c21": "Javadocs for cache operator",
  "d429110": "Add perf tests for cache(1) variant",
  "20cee90": "Merge pull request #1393 from gliptak/cachehint",
  "4e38f63": "Merge Perf Fix: Re-enable fast-path",
  "d44f059": "Add cache(int capacity) to Observable",
  "47ea6c8": "Merge pull request #1276 from jbripley/cachedthreadscheduler2",
  "798fa7e": "Merge pull request #1281 from benjchristensen/composite-subscription-performance",
  "7ea8e4f": "Merge branch 'master' into cachedthreadscheduler2",
  "5d7d73c": "Lock-free, MPSC-queue based, fast-path serializing Observer.",
  "538d245": "Implement a cached thread scheduler using event loops",
  "26cd9dd": "Some performance improvements",
  "756e699": "Only cache the latest items in the time window",
  "a569f72": "Merge pull request #999 from benjchristensen/serialize-optimizations",
  "d48a3b2": "Produce a shadow'd jar for the performance benchmarks",
  "34a2561": "Experimenting with different implementations and performance",
  "8b3862e": "not quite functional ... and slow",
  "10fa255": "Add full example for Activity + retained fragment + cache",
  "84372e1": "Merge pull request #881 from benjchristensen/lift-performance",
  "f3a7f3d": "CompositeSubscription performance increase",
  "4571e92": "Updates while validating no major performance and memory regressions",
  "c53a473": "Merge pull request #574 from samuelgruetter/cache-documentation",
  "e1a4d02": "clarify documentation on cache()",
  "b92391d": "Merge pull request #447 from mattrjacobs/internal-impl-cache",
  "2998ac3": "Drop volatile in favor of failing fast if not subscribed from UI thread",
  "2f44a8d": "JRuby performance test",
  "ac90e6e": "Merge pull request #316 from benjchristensen/fix-slow-unit-test",
  "4e21ee7": "Merge pull request #263 from benjchristensen/publish-replay-cache",
  "b4b635e": "Added tests against periodic scheduling. I hope the delays are stable yet fast enough...",
  "c0ec61f": "restore performance optimization to reduce wrapping",
  "ca9d482": "performance test classes",
  "72b3c66": "ignore Scala .cache folder",
  "fa1af64": "Merge pull request #107 from benjchristensen/performance",
  "787d8fc": "Refactoring towards performance improvements",
  "e5d9d9c": "Performance optimizations for dynamic function execution."
}, "RxJava2-Android-Samples": {
  "1d7b06a": "Add comments for cache",
  "72a2f1a": "Add fast-android-networking-rxjava2 library and internet permission"
}, "RxJava-Android-Samples": {
  "605dc13": "feat: update disk + network cache example",
  "614c8b1": "fix: revert pseudo cache merge fragment to old code",
  "b000ba3": "Merge pull request #37 from marukami/cache-merge-frag-fix",
  "7a96bf4": "feat: improvised pseudo cache after conversation with artem https://twitter.com/kaushikgopal/status/591271805211451392",
  "d7c5f4e": "fix: cache example no longer wip fixes issue #6",
  "61e69ff": "feat: flush out pseudo cache example using .concat",
  "6d0b0f3": "wip: pseudo cache is still wip",
  "736b1ac": "feat: wip: write pseudo cache example using .concat"
}, "RxJavaSamples": {
  "": ""
}, "RxLifecycle": {
  "": ""
}, "RxPermissions": {
  "": ""
}, "Sa-Token": {
  "8bbae3e": "修复 sa-token-redis-fastjson2 模块代码警告",
  "4119cf8": "修复 sa-token-redis-fastjson 模块代码警告",
  "aa22fe8": "修复 `sa-token-alone-redis` + `sa-token-dao-redis-fastson` 时 Redis 无法分离的问题",
  "132ad78": "新增 `sa-token-dao-redis-fastjson2` 插件",
  "1c5653d": "修复 sa-token-dao-redis-fastjson 插件 `session.getModel` 无法反序列化实体类的问题。",
  "3addd68": "修改插件名称：sa-token-dao-redis-string -> sa-token-dao-redis-fastjson",
  "409ae80": "update sa-token-doc/doc/use/session.md. 文档中有这个方法的使用, 但是没有提前说明 https://sa-token.dev33.cn/doc/index.html#/fun/jur-cache",
  "751cc58": "Merge pull request #284 from dromara/dependabot/maven/sa-token-plugin/sa-token-dao-redis-string/com.alibaba-fastjson-1.2.83",
  "565b122": "Bump fastjson in /sa-token-plugin/sa-token-dao-redis-string",
  "4805c2e": "!142 增加dcy-fast-cloud链接 Merge pull request !142 from 青年/dev",
  "3ef954b": "feat：增加dcy-fast-cloud链接",
  "d4ee232": "Merge pull request #246 from dromara/dependabot/maven/sa-token-plugin/sa-token-dao-redis-jackson/com.fasterxml.jackson.core-jackson-databind-2.12.6.1",
  "26cde5d": "!1 提交dcy-fast开源rp Merge pull request !1 from 青年/N/A",
  "5269e30": "提交dcy-fast开源rp"
}, "ScalingLayout": {
  "": ""
}, "screw": {
  "dc92a72": ":arrow_up: 升级jupiter为5.7.0，lombok版本为1.18.16，升级mysql驱动版本为8.0.22，升级mariadb驱动版本为2.7.1，升级db2驱动版本为11.5.5.0，升级fastjson版本为1.2.75，升级druid版本为1.2.3，升级versions-maven-plugin版本为2.8.1，升级formatter-maven-plugin为2.13.0，升级maven-source-plugin为3.2.1",
  "2b859b3": ":arrow_up: 升级mysql驱动版本为8.0.21、升级mariadb驱动版本为2.6.2、升级postgresql驱动版本为42.2.14、升级sqlite驱动版本为3.32.3.2、升级fastjson版本为1.2.73",
  "a3ec921": ":arrow_up: 升级db2-jdbc版本为11.5.4.0、升级hsqldb版本为2.5.1、升级fastjson版本为1.2.72"
}, "scribejava": {
  "6ba3072": "introduce PMD/category/java/performance.xml/UseStringBufferLength rule",
  "9442d4f": "introduce PMD/category/java/performance.xml/UseIndexOfChar rule",
  "2751d79": "introduce PMD/category/java/performance.xml/UnnecessaryWrapperObjectCreation rule",
  "9caf83a": "introduce PMD/category/java/performance.xml/StringToString rule",
  "9cb0b10": "introduce PMD/category/java/performance.xml/StringInstantiation rule",
  "36546e8": "introduce PMD/category/java/performance.xml/ShortInstantiation rule",
  "5b64e22": "introduce PMD/category/java/performance.xml/RedundantFieldInitializer rule",
  "4768e4f": "introduce PMD/category/java/performance.xml/OptimizableToArrayCall rule",
  "3088146": "introduce PMD/category/java/performance.xml/LongInstantiation rule",
  "af2e0f0": "introduce PMD/category/java/performance.xml/IntegerInstantiation rule",
  "f3f23f1": "introduce PMD/category/java/performance.xml/InefficientEmptyStringCheck rule",
  "d0ecbc6": "introduce PMD/category/java/performance.xml/ConsecutiveLiteralAppends rule",
  "9ca8ba9": "introduce PMD/category/java/performance.xml/ConsecutiveAppendsShouldReuse rule",
  "929ad9e": "introduce PMD/category/java/performance.xml/ByteInstantiation rule",
  "07349a4": "introduce PMD/category/java/performance.xml/BooleanInstantiation rule",
  "08f6298": "introduce PMD/category/java/performance.xml/BigIntegerInstantiation rule",
  "ad666fe": "introduce PMD/category/java/performance.xml/AvoidArrayLoops rule",
  "128a12c": "introduce PMD/category/java/performance.xml/AppendCharacterWithChar rule",
  "39f02cc": "introduce PMD/category/java/performance.xml/AddEmptyString rule",
  "ae14353": "optimize debug log performance impact on prod in OAuth1 and fix NoClassDefFoundError on Android device with SDK 18 and lower (thanks to https://github.com/arcao)",
  "b6cb1dc": "precompile regexp Patterns (microoptimizations)",
  "f4cf304": "small performance boost in MapUtils"
}, "SDE-Interview-Questions": {
  "008da06": "Links optimizations and personalizations"
}, "seata": {
  "86c1c5d": "bugfix : check if table meta cache should be refreshed in AT mode (#5395)",
  "8f83fdf": "bugfix: Druid disable oracle implicit cache (#5098)",
  "1282432": "bugfix: fix key [transport.enableRmClientBatchSendRequest ] cache penetration (#4678)",
  "496d08c": "bugfix: fix fastjson serialization of time data types (#4505)",
  "ed2917d": "optimize: optimization after a unique index conflict occurs in tcc fence log (#4303)",
  "21c103d": "optimize: Improve the performance of global commit and global rollback (#4270)",
  "88c1ca4": "optimize: acquire lock return fail-fast code in redis-pipeline mode. (#4277)",
  "21ab990": "optimize: cache reflection results of the fields and methods (#3918)",
  "0db08f5": "optimize: optimization `apm-skwalking` operation method to generate rules (#3840)",
  "0672229": "optimize: optimize zk registry lookup performance (#3795)",
  "6075716": "bugfix: configuration cache get value cast exception. (#3293)",
  "f145cf7": "bugfix: fastjson write undo log not parser. (#2926)",
  "c4f82e6": "bugfix: fix getConfig cache value is 'null'(#2904)",
  "73724a9": "optimize: increase the cache of configuration values (#2611)",
  "7e04d2a": "optimize: optimize ColumnUtils.addEscape method performance (#2044)",
  "47b9b2c": "bugfix: druid parameter optimization. (#2529)",
  "d3049de": "bugfix: Saga StateMachineRepository#getStateMachineById will replace the last version in cache (#2384)",
  "9981b7c": "bugfix: fix type error when fastjson deserialize long type (#2234)",
  "0fa55cb": "bugfix: fix fastjson undo filter tableMeta (#2233)",
  "9f3d47f": "optimize:An optimization about DefaultRemotingParser (#2033)",
  "6ec6ab6": "Feature: Saga provide a switch to skip branch report on branch success, in order to optimize performance. (#2151)",
  "c6e1266": "optimize: increase the oracle table meta cache code coverage (#2078)",
  "97dc589": "bugfix: fix duplicated table meta cache key (#1929)",
  "d98510e": "optimize: improving method format performance (#1798)",
  "f412a9f": "performance: add phase one successful reporting switch (#1869)",
  "f4af62c": "optimize:optimization of seata-spring-boot-starter (#1867)",
  "f405c5e": "optimize: abstract table meta cache (#1750)",
  "12dc58c": "fix undo support oracle table meta cache (#1749)",
  "1441069": "Based on Java 5 optimization (#1705)",
  "72ef58b": "bugfix: fix deadlock and lock optimization (#1605)",
  "25da228": "Security issue: upgrade fastjson version to 1.2.60 (#1602)",
  "f522e7a": "upgrade fastjson and nacos-client (#1080)",
  "da8631c": "optimize file write performance (#795)",
  "58284ea": "An optimization about MessageFuture (#831)",
  "ec72f20": "fix #753 code optimization of EurekaRegistryServiceImpl (#754)",
  "2e8fe3e": "fix #633 change version to 0.4.1-SNAPSHOT and optimization code (#634)",
  "9040c42": "fix #618 change version to 0.4.0-SNAPSHOT and code optimization (#619)",
  "9f6d30c": "fix #597 Code optimization meet p3c code checking rules (#598)",
  "b3d58e9": "add javadoc, format codeStyle, optimization import"
}, "seatunnel": {
  "a653b14": "[Improve][Zeta] Improve JobMetrics fetch performance (#4467)",
  "5c689e9": "[Improve][E2E][Jdbc] Reactor jdbc e2e with new api, then remove the useless e2e case. For better performance, we split the jdbc e2e module into three modules. (#4165)",
  "aeceb85": "[Improve][Connector-V2][Clickhouse] Improve performance (#3910)",
  "f69af2a": "[Improve][Shade][Hadoop] Improve hadoop shade by including classes in package com.google.common.cache.* (#3855) (#3858)",
  "a5a3959": "Revert '[Feature] [Plugin] add spark cache transform (#2854)' (#3491)",
  "4d43094": "[Feature] [Plugin] add spark cache transform (#2854)",
  "7393c47": "[Improve] [Engine] Improve Engine performance. (#3216)",
  "4af4d8c": "[Improve][Common]DeployMode enumeration Generate Map method optimization (#3055)",
  "37d9e0d": "[ST-Engine][TaskExecutionService]Add dynamic thread sharing optimization (#2366)",
  "e93fdf7": "fix same source and sink registerplugin librarycache errpr (#2015)",
  "d8b2309": "[Bug][fastjson] Upgrade fastjson, fix deserialization remote code execution vulnerability (#1737)",
  "1d445dc": "[Improve]Some code block optimizations (#1600)",
  "61eeb1a": "[Performance] [utils] Extract the Pattern instance for getUniqueTableName method to get better performance (#1302)",
  "addb1f4": "[Feature][ci] Correct the usage of maven cache in Github Action (#1260)",
  "14f30f1": "[Bug] [seatunnel-connector-spark-redis] Solve user unauthorized problem and code optimization (#1136)",
  "b668aad": "[Feat] maven dependency optimization #760 (#761)"
}, "SeeWeather": {
  "5bc9f5a": "fix okhttp cache",
  "04c808e": "optimize net and cache"
}, "selenium": {
  "2078d5a7": "[rust] Add clear-cache and clear-metadata and configuration keys",
  "887da781": "Revert 'Enable remote Bazel cache through Google Cloud Storage'",
  "8951418f": "Do not enable remote Bazel cache unless access key is present",
  "e8e57714": "Make remote cache private until the costs are figured out",
  "a019e92c": "Fix nightly releases access to Bazel remote cache",
  "87b4de80": "Enable remote Bazel cache through Google Cloud Storage",
  "409b057b": "[py]: 🚀 Improve performance (#11310)",
  "0231def8": "[rust] Check driver in cache before uncompressing (fix #11226) (#11273)",
  "5c375dd2": "[rust] Include optimization parameters for Selenium Manager releases (#11116)",
  "24a57414": "[dotnet] remove deprecated html5 commands and classes for web storage, application cache and location context",
  "6fe87db7": "update cached atom files",
  "d62a05ac": "[dotnet] add performance log type (#10616)",
  "58a55ce8": "[grid] Stopping a session by invalidating its cache entry",
  "e4c07b39": "[grid] Reusing HandleSession instance to handle all sessions, it improves performance a lot",
  "c6d02f33": "[rb] update vendor cached gems",
  "ebee17a4": "[java] Improving performance of tests for http clients by reusing the same test server, they run in ~1 s instead of ~40 s now",
  "1fa14289": "[java] Minor performance improvement",
  "0fee4952": "[java] Marking unit tests with a special JUnit category annotation, this allows to choose the marked tests in IDEA and use these fast tests as a safety net (they complete in less than 10 s on my machine)",
  "e797f867": "Using bazel cache for JavaScript jobs",
  "7bba7f63": "[java] Minor performance and style improvements of ExpectedConditions",
  "bcdbb1fa": "[java] RemoteWebDriver should fail fast if there is no command executor provided",
  "5ee4e241": "[rb] revert optimization I suggested for #8834",
  "5768f191": "Setting our own timeout for bazel command that is less than travis timeout to avoid killing the job and allowing to store partially populated cache",
  "7cec87e0": "Update cached ChildProcess to 4.0.0",
  "a7b08891": "[java] CommandLineTest is fast enough to tag it 'small'",
  "76d48074": "[java] Minor performance improvement",
  "a76d1f97": "[java] Minor performance improvement",
  "de98d767": "[java] MInor performance improvement: no need to load options if section name is empty",
  "a9c7d6d8": "[java] Minor performance improvement",
  "25c2c9cc": "[java] Small performance improvement",
  "cfebea20": "[grid] Driver server session factory should perform additional capabilities test before an attempt to create a driver server, this does not hit performance much in valid case, but improves performance if the factory is not properly used. The same is true for SessionSlot too.",
  "5dc166d3": "[java] Fail faster if a driver server can't start.",
  "230da066": "[bazel] Avoid overriding user-set cache locations for the travis builds",
  "7ab5f1b4": "Update cached dependencies for Ruby bindings",
  "5183bd5f": "Explicitly setting bazel cache options",
  "4d9d6cd1": "Trying to cache bazel output on travis",
  "aa238852": "[java] Ignoring performance logging tests in legacy Firefox",
  "5c2dcceb": "[java] Caching non-loopback ipv4 address of the local machine because host resolution is a slow operation",
  "857c471c": "Add rake as development requirement and update cached gems",
  "7957ef55": "Clean the local Node's cache of sessions regularly",
  "e14ab1fe": "[java] Adding waits to upload test because it's a slow action",
  "e36b8c05": "Revert 'Add '--no-results-cache' when running tests via BUCK'",
  "b8da61f5": "Add '--no-results-cache' when running tests via BUCK",
  "afb952f3": "Limit the size of the cache directory for buck",
  "5cce5cf4": "Improve takeScreenshot performance in ie driver.",
  "b0191719": "Added no-cache header to HTTP GET command of RemoteWebDriver",
  "43e6f4e7": "Removing clearing of known element cache on document navigation",
  "e8baecab": "Deleting useless separate job for calcdeps, we don't share cache between jobs",
  "2068c26f": "Revert 'Attempt to have a cache warming step'",
  "5d6f7316": "Attempt to have a cache warming step",
  "194eb5cd": "Optimizing travis config for the current development needs for faster feedback:",
  "79aeb2c4": "Trying to use travis per-job cache on master branch",
  "0bea0a1a": "Stop converting capabilities to FirefoxOptions, it's not required for matching but hurts performance and resource usage. Fixes #5209",
  "6600f6a9": "Match SessionCleaner session expiry time with DefaultSession cache's timeout.",
  "a17ee39a": "Use a guava cache in the DefaultDriverSessions",
  "7f126959": "Stop using static initializers to look for firefox executables. It is not a frequently used operation to care about performance so much. And static initialization prevents ability to change location specified by a system property after first initialization. Also it prevents ability to find a firefox installed later than selenium server was started.",
  "dfd0f1b8": "how slow can travis be? seemingly very slow... or something else is going on :)",
  "4ce9c0c9": "Use the buck-cache",
  "274e9f2c": "rb - performance updates",
  "aba9a5f8": "Java: Test speed optimization",
  "68bff358": "Disable appcache tests for Marionette",
  "7c99758a": "Deleting fail-fast check of browser configuration, this breaks another Grid dependency on parts of RC server. The check must be performed in RC server (if ever).",
  "5986687e": "Fixing a test to avoid fast-fail branch",
  "79ea708e": "Enabling fast failure for cookie manipulation in IE",
  "ee27db1b": "server: Increasing a test timeout to make it more stable in a slow network",
  "79a755c2": "server,tests: Increasing test timeout a bit to make it less fragile on slow computer",
  "59d3940e": "Minor optimization for dynamic type creation in .NET PageFactory",
  "c9e9245a": "Adding support to submit cleaned diagnostic information to a gist and stop hiding errors so that we can fix them faster",
  "e581237f": "Re-revert 'Upgrading httpd.js to the latest version and fixing the error message on exit. Fixes issue 2637' This should fix Firefox 36 compatibility, but causes performance degradation on Linux, that is to be investigated as a separate issue.",
  "136daa9d": "Adjust test so it is more tolerant of slow browser performance",
  "d18b9fd3": "Revert 'Upgrading httpd.js to the latest version and fixing the error message on exit. Fixes issue 2637' Because it has negative impact on FirefoxDriver performance",
  "cbc1080f": "Adding logging to cache clearing for IE driver",
  "fc8c9093": "Uncommenting clean target commented in the previous commit for faster debugging",
  "27aec014": "Move mutable property definitions from the prototype to the constructor for better performance in v8.",
  "963f64c2": "Safari is flaky. Reducing timeout to fail faster when we're going to fail. When it starts successfully, it always does in 4 seconds on some modest machines.",
  "92c0da72": "Introducing ability to clean browser cache before launching IE.",
  "caf461af": "Improving grid console: 1) all resources are local now, the console can work without Internet connection, 2) cacheing for static resources, 3) logo changed to the grid logo, 4) favicon. Fixes issue 4762",
  "162fe4e0": "Implementing 'fail fast' check of supported browsers on a grid node start (RC protocol). Fixes issue 638",
  "85007681": "Split the SafariDriver's injected and page scripts into several modules so we can avoid loading large amounts of JS before it is needed. The performance improvement is most noticable with pages that contains lots of frames that the driver may not interact with. The included benchmark runs in 73 ms without the SafariDriver installed, 1250 ms using the driver without modules and 518 ms using modules. The modules in this change are pretty rough, so it's probably possible to squeeze out further improvements.",
  "a35b98fc": "FrancoisReynaud: tests are running locally. Specifying localhost makes tests run faster by skipping the RegistrationRequest.guessHost() calls.",
  "043822f3": "LukeIS: adding application_cache/status to the wire protocol. Also adjust wire.py to always use unix line endings when writing to the wiki page. (all the other html5 wire commands appear to be documented, and execute_sql is deprecated / going away, so...). Fixes Issue 2230",
  "0f714cf6": "Start using pre-generated (IEFT) parameters for DH key generator for performance improvements. Thanks David Hook (dgh@autochthonous.org)!",
  "2ccf8f14": "JimEvans: Changing the shared WebDriver C++ server component to use strings in serialized commands instead of integers. Testing does not seem to indicate this will introduce a performance issue, and it makes logs more intelligible when logging the raw JSON of a received command. As far as anyone can determine, the only consumer of this component is the IEDriverServer.exe, so this should be a completely internal change.",
  "759c94a1": "JimEvans: Adding new capability 'enableElementCacheCleanup' to the IE driver. When set to true, the IE driver will clean the known-element cache of invalid elements after every page load. This is intended to keep memory usage down and improve performance. However, it is an intrusive change, so this capability is provided temporarily to allow disabling this behavior if problems arise. The default of this new capability is 'true', meaning this behavior is turned on by default.",
  "55a3f96e": "JasonLeyba: Fix massive performance regression introduced in r18176 - use textContent not innerText.",
  "95c6d58a": "AlexeiBarantsev: Separating touch tests from basic interactions tests to run them on mobile drivers only. This should make standard test set lighter and faster.",
  "eadae7c7": "SimonStewart (on behalf of Googlers): it appears as if appcache does not always cache",
  "415221f4": "SimonStewart: Remove getCurrentUrl from the fast path of the firefox driver, as lots of people don't expect the newer behaviour (apparently)",
  "86c33036": "DavidBurns adding the ability to get appcache status for Python and FirefoxDriver",
  "2b9f167f": "DanielWagnerHall for DanhNguyen: Use more efficient base64 encoding string to speed up chromedriver performance significantly.",
  "8f87b01d": "EranMes on behalf of EmmaSoderberg: Fix performance logging test for Firefox.",
  "afa94153": "AlexeiBarantsev: Rolling back ability to set devMode from the command line (because it can affect text execution performance)",
  "e37904a9": "DanielWagnerHall: Add a basic performance profiler to the RemoteWebDriver and FirefoxDriver, adds a more general logging system to the FirefoxDriver which the rest of it currently doesn't use (but will soon). The parser, interpreters and grapher for the profiler output data live in https://seprofiler.googlecode.com and https://seprofiler.appspot.com and are a work in progress.",
  "15dc2ea7": "JimEvans: Removing SetWindowPosition and SetWindowSize atoms from the IE driver. It's faster and more efficient to simply call the ::SetWindowPos API.",
  "6a58787f": "JimEvans: Slight optimization in element location and size handlers in IE native code, saving a round-trip call to javascript.",
  "218b22d8": "FrancoisReynaud: removing the test from the regression suite as it accesses a slow external site. Need to find a replacement.",
  "069d08cb": "FrancoisReynaud: follow up on r16691 and r16692 for grid:e2e. Removing calls to NetworkUtils in the unit test to make them run faster.",
  "92bad948": "FrancoisReynaud: follow up on r16691 for grid:test this time. Removing calls to NetworkUtils in the unit test to make them run faster.",
  "6d358236": "FrancoisReynaud: building proxy in tests without specifying the host triggers a call to NetworkUtils for network address auto discovery, and that's really slow (5+ sec per test ). Adding -host=localhost to all unit test to make them run faster.",
  "a57a0f36": "JasonLeyba: When executing user-supplied JS, the result may contain DOM elements that belong to another document. When this happens we need to wait for the ownerDocument to store the element in its WebElement cache before sending a response to the user. Unfortunately this means even more message passing and async fun. Hopefully the code isn't too difficult to follow now.",
  "c31aea4c": "JasonLeyba: Execute the getTitle command in the injected script instead of using the SafariBrowserTab object. The SafariBrowserTab's title attribute is not always updated right away after a new page is loaded. We can detect when a page is loaded, but not when the title is updated. If we just talk to the injected script, while slightly slower, we'll get the behavior we want.",
  "693fff70": "SimonStewart: I'm bored of slow java compilation times. Simplifying the code used to create the classpath and introducing a cache. Suddenly, my builds are more acceptable again",
  "0630f99d": "EranMes: Implementing application cache support for the Android Driver. Note that there's no real API breakage introduced by this change. The ApplicationCache API was incorrect and not implemented by any driver.",
  "6661d940": "DanielWagnerHall: Break the dependency of the android server on the firefox driver. Yay fast compilation times. Of course, I don't know whether this works, or not, as the AndroidDriver appears broken, but this will help diagnose that.",
  "6b6ee16a": "SimonStewart: No longer needing to load any files at instantiation time for the firefox driver: it's all compiled JS. Introduce an element cache JSM. This relies on the fact that a JSM is only ever loaded once and a reference passed to all future loads in order to maintain the correct behaviour of the driver",
  "2e03077f": "SimonStewart: Rename the fast loading strategy 'unstable' (because that's what it is) and push the check to see whether commands can continue into the command processor. If we ever add a third strategy, this should be replaced with polymorphism",
  "9b7762ed": "JariBakken: Add app cache / sql database specs.",
  "0c36c3a5": "JasonLeyba: Update the window check in bot.inject.cache.getElement to properly exclude DOM elements in IE.",
  "1492845b": "francoisReynaud: timeout was too low. Test failed on slow computer.",
  "c7f1f567": "SimonStewart: I thought that last check in went in a little too fast. Actually adding the new guava libraries",
  "734d5ba1": "JariBakken: Avoid slow closure compilation by passing `./go <js-target> minify=false`",
  "fc0abc87": "SimonStewart: Hiding the new fast check for page load behind a preference.",
  "8013178e": "SimonStewart: Adding a failing test that demonstrates the problem caused by slow loading dependencies in frames. This occurs commonly when there are web-bugs and analytics scripts loading slowly",
  "b28dbdf2": "JariBakken: Fail fast if chromedriver exists but isn't executable.",
  "1e300321": "JimEvans: Fixing IE scroll of elements in container where the style has 'overflow: scroll'. This may have a slight adverse effect on performance due to the requirement of walking the DOM parent tree. Fixes issue #1654.",
  "c0a684c5": "EranMes, on behalf of KenKania: Fix atoms for chrome. Also, add target type js_fragment_cpp which splits the source and header files. This follows chromium style for constants and hopefully compiles faster.",
  "cb20bede": "EranMes: Skipping some tests on Mac only. Also making the drag-and-drop test more robust so it won't fail on slow machines.",
  "cfab2dd5": "DanielWagnerHall: Adding browser test for non-cached lookups",
  "f8ff7c5b": "DouniaBerrada: On behalf of AbdullahNayeem, adding clear app cache to the wire protocol.",
  "50648faa": "DouniaBerrada: On behalf of AdbullahNayeem, submitting atoms for app cache.",
  "f70be1b9": "DavidBurns removing a line that over time causes performance to degrade for issue 1854",
  "14956ee4": "MichaelTamm: UrlChecker uses a cached thread pool with daemon threads now (Fixes issue 1756)",
  "bed5e039": "DouniaBerrada: Adding temporary fix to inject.js to initialize the nextId. Sometimes cache.nextId isn't initialized though the cache exists.",
  "739774c7": "SimonStewart: Since the webdriver instances are single-threaded we _must_ wait for the webdriver instance to return before attempting to execute the next command. Although this means that tests may run slower than hoped for, this does mean that we get more consistent behaviour out of the emulated driver in the case where commands 'time out'",
  "923d8fd0": "DouniaBerrada: Android WebDriver is now as fast as desktop browsers! Moved Jetty from its own process to the ui process. There are no guarantee that this will work prior to froyo.",
  "134640b8": "SimonStewart: The selenium-backed webdriver is a little slower than a real webdriver",
  "244bea7b": "DouniaBerrada: Removing app cache from webview because it causes some apps to crash.",
  "b84229cc": "JariBakken: se-client - slowly building up the Rakefile",
  "030507e9": "JasonLeyba: ErrorHandler now includes the server's stacktrace as the cause of a thrown Exception by default (this was previously off by default). Consequently, users will start seeing JavaScript stacktraces from the FirefoxDriver in their logs. This will help us track down reported bugs much faster.",
  "38685d95": "SimonStewart: Making the build a little faster by moving when we calculate the classpath for the selenium tests.",
  "ba8f2f15": "JimEvans: Refactor of .NET unit tests to reuse the same WebDriver instance between tests. This should make them run much faster.",
  "1ada8a07": "Allow RPC optimizing engine to be used in singleWindow setups too. The caching behavior can improve performance there too.",
  "7c724fa9": "Achieve better factoring of XPath optimization cache for RPC optimizing engine. Remove browserbot.addXPathEngine(), as there is no easy way to call this from a user extension, which is what it was intended for. Overriding XPathEvaluator.prototype.init() is suggested instead.",
  "7cfff74e": "Add a sourceIndex check that, at least for IE, guarantees that our cached nodes have not changes positions in the document tree, and therefore are invalid.",
  "c5152760": "Improve the RPC optimizing XPath engine, by caching document nodes, fixing bugs in the cache implementation, and optimizing XPath's as finder function, instead of as XPath's.",
  "5dbdb0d2": "Employ caching techniques to boost performance of rpc-optimizing XPath engine. Allow new engines to be easily added by overriding XPathEvaluator.prototype.init() .",
  "89a70ef6": "Add work on alternative xpath engine that works around IE window RPC slowness. It actually evaluates xpaths in an iframe inside the local Selenium window first, from which it is able to build an optimized path that essentially 'hashes' directly to the element in the remote window. The actual evaluation engine used is a delegate - i.e. either of the existing non-native engines. This work is completely turned off at the moment, and can be opted in by uncommenting a line in htmlutils.js and adding the content of rpc-optimizing-user-extension.js as an extension. The code uses jQuery. In my tests so far, I have found that for multiWindow mode - the mode of interest - while it offers better performance than the ajaxslt library, it still lags behind javascript-xpath. Still, it might be an interesting approach to continue to investigate.",
  "da6ef96c": "PatrickLightbody We no longer make a copy of the FirefoxProfile anymore, as well as no longer cache the profile for reuse. As such, we are deleting ProfileManager entirely and leave it to the user to re-use their FirefoxProfile if they want to do any such caching. We are doing this because it turns out there are no real savings by copying the profile, since the directory ends up changing and extensions.ini end up with a bad directory reference, causing Firefox to restart itself anyway",
  "f000ecb0": "PatrickLightbody Preferring the isTextPresent logic from Se 1.0 by using the same getTextContent() behavior found in htmlutils.js. Doing this because the getText() function on the body tag tends to cause crazy page scrolling behavior that slows things down, causes rendering quirks, and otherwise doesn't perfectly match the original Selenium 1.0 behavior.",
  "9d8df6b9": "PatrickLightbody Honor the profile actually used by the binary, not the one passed in. This is important for cleanup, since without this the profile that gets cleaned up ends up being the wrong one for people who use 'new FirefoxDriver(...)' and pass in their own FirefoxProfile that they want to resuse/cache.",
  "397aa68a": "PatrickLightbody Getting rid of any calls to InetAddress.getCanonicalHostName(), which cause my machine to be stupid and slow",
  "f7571678": "DanielWagnerHall: Fire blur and focus events when typing in HtmlUnit. Note that as of this commit, roughly the following tests fail for me on a slow XP system: testsShouldIssueMouseDownEvents in IE and remote IE, some page-loading-timing-based tests in Firefox, some character-code tests in JSAPI",
  "9c3863c0": "EranMes: Additional changes to native events code under linux. Do not steal focus if the active window was obtained after another was closed. Fixed a segfault that occured due to access to a null pointer in the XQueryTree cache (cache array was freed, but the next XQueryTree failed and the cache was left in an inconsistent state).",
  "ca92c204": "MichaelTamm: increased performance of Select.selectByVisibleText",
  "140fa1f3": "DanielWagnerHall: Making exceptions more like jobbie. Making native calls faster by returning a value rather than making calls into the page. Reverting to chrome version of npruntime.h. General tidying.",
  "95130a2d": "Python firefox driver improvments: 1. Create anonymous profile directory in temparory so every test run has clean cache and prefs 2. Changed the webdriver constructor to take a FirefoxProfile object, user can create it manipulate the prefs before passing it to webdriver. Existing user code will not be broken because profile is overloaded to take either a profile object or a profile name string. 3. Added find_elements_by_tag_name",
  "9660d00f": "SimonStewart: Making the select class faster for the common cases of selecting by text and value",
  "1adbbbb1": "On second thought, keep getOffsetLocator default opt-in. It might adversely affect recording performance otherwise.",
  "155599ce": "GregoryBlock: Optimise disk activity, cache named and anonymous profiles, all in the name of improving startup times for FirefoxDriver.",
  "78a5203d": "SimonStewart: AjaxElementLocator is now a slow loadable component",
  "446beaa2": "Add a constructor that doesn't have the slowResources boolean, because nobody cares about it",
  "c2a98217": "SimonStewart: The remote webdriver now works with IE. There's still work to be done, particularly around making this faster.",
  "f7d7aa93": "SimonStewart: Improve the speed of typing in IE. This should now be proper fast. Thanks to David Wang for the patch.",
  "129ff239": "SimonStewart: Adding back the key event listener to support those cases where typing is slow or hard to detect by the event hook.",
  "6e06b80b": "SimonStewart: Renaming the package from googlecode to openqa. Tested on a linux, so probably broken for IE. Also missing shim classes to allow slow migration of tests. And the wiki is now out of date",
  "1c6757c4": "Launchers: Introducing BrowserInstallation object for future launch time optimization",
  "acfa19da": "Small performance tweak to XPath: // != /descendant::",
  "56c59fe8": "[SEL-552] Fixing 'All Commands' window performance by flushing the window on every call to 'open'",
  "71f95958": "SimonStewart: Working on making the IE driver go faster",
  "6465ca5f": "Capture in AJAXSLT r50 ... this should be it for the 'first XPath result' mod. :) This refines the logic used to weave in and out of optimization mode.",
  "975e9946": "Capture in AJAXSLT r46. This adds an optimization for situations when only the first XPath result is ever needed; expect a nice performance boost. It also cleans up the previously introduced 'in play attributes' logic, which has been reduced to its simplest form without involving the ExprContext.",
  "683bbc02": "Add a test ... I'm investigating why evaluating an XPath in a popup window is so slow.",
  "3216bda7": "Capture in AJAXSLT r43. This should greatly improve performance for XPaths that use text() or normalize-space() inside of predicates.",
  "bc0ba3db": "Capture in AJAXSLT r38. The meat of the change is a potentially heavy-hitting performance tweak for IE. Now AJAXSLT only copies node attributes that were referenced in the XPath.",
  "47a9133e": "Updating timeouts for slow tests",
  "ad3a3bf3": "Fix UI element testcases after Core update. Now using ajaxslt on the testcase snippet instead of the native mozilla xpath evaluator. Could be slower, but less hoop-jumping makes it worth it.",
  "62d986cb": "Added support for the faster 'javascript-xpath' library from (http://coderepos.org/share/wiki/JavaScript-XPath)",
  "6a68475c": "Update AJAXSLT to include ignoreAttributesWithoutValue optimization. This should provide a big speed boost for XPaths containing attribute steps.",
  "511a0713": "Improve performance of recursion by not re-modifying the window on every step",
  "e57ddefc": "CacheBlockTest. Shows that our IE cache blocker isn't working.",
  "797b81af": "SimonStewart: FirefoxLauncher works when the create profile stage is slow.",
  "03aacfdd": "Only extractCommand once; on long getEval commands this can be a big performance improvement",
  "74081a7b": "Store registry backup data using Java Preferences. On Windows, Java Preferences stores data in the registry, so this is basically just a faster way of accessing the registry. Also hardcode proxy settings when a custom PAC is not appropriate, and ALWAYS create a profile directory.",
  "62eae521": "Improved reliability of dogfood suite, especially when run under slowResources mode. Added a flag so we can tell when the test case is finished loading.",
  "83835a77": "Provide support for dynamically setting 'slowResources'. We'll use this in TestPrompt.html on the Selenese side to allow the user to turn on slowResources with a simple checkbox.",
  "7f4128a0": "If we're running on the Selenium Server, provide a checkbox to allow the user to slow down the web server",
  "1de8f32c": "Don't share a lock between the CommandQueue and the BrowserResponseSequencer; I think this is causing performance problems in the build",
  "d5bd91a1": "Is it the max connection limit that's slowing down the official build?",
  "d1a4d1d9": "Experiment with using <script> tags to improve performance",
  "ed12e824": "pre-fetching SSLRelays causes SeleniumServer startup time to take longer - jacking up the sleep time until we have a better way to startup faster",
  "4a918e2a": "Substantially improve performance of _getFrameElement in IE",
  "a68c65a7": "Improve performance of isVisible on IE; getCurrentWindow is very expensive there, so avoid that call if possible",
  "f6e26138": "Make i18n test a bit faster by opening the i18n url just once at the beginning",
  "1ebaf826": "We don't need slowResources in framed mode. also renaming browser_bot_tests to unittests",
  "dc3cddc8": "sel324, 0.7 and 0.8 has almost same performance through my testing",
  "e95d12e3": "Moving draganddrop test to the end, because it's annoyingly slow",
  "619519c4": "Don't run the slow tests in -coreless mode; there's no point. (They'll be run by Core instead.)",
  "f87194bb": "Lengthening timeout on these tests, which can fail in slow mode sporadically",
  "7e95cb4f": "Increase timeout to 15 minutes. It can take a while in slow mode while watching over VNC",
  "a0f68425": "Refresh the page a little faster",
  "a23f0ecc": "These old releases are slowing down the source download; grab releases from release.openqa.org instead",
  "5d04b0c0": "increase time out to make linux build pass on a slow machine",
  "1a49f4ad": "move slow mode implementation to selenium-rc; switch from bool arg to an integer giving the number of milliseconds to pause between operations",
  "b4ea6a94": "move slow mode implementation to selenium-rc; switch from bool arg to an integer giving the number of milliseconds to pause between operations",
  "23f3bacb": "move slow mode implementation to selenium-rc; switch from bool arg to an integer giving the number of milliseconds to pause between operations",
  "11c1f074": "Add slow mode test",
  "5578928b": "fix slow mode under proxyInjectionMode",
  "e5457295": "fix slow mode under proxyInjectionMode",
  "68a9c4de": "1. deprecate dragDrop in favor of dragAndDrop 2. add dragAndDropToObject (will implement later) 3. slow mode setter in the API",
  "9988536b": "give programmatic access to get/set slow mode",
  "70fe5c7f": "improved log view performance",
  "cd1a713e": "Be less slow",
  "88e2e8e7": "remove 'setContext' to make tests faster",
  "83b0ba82": "remove 'setContext' to make tests faster",
  "4bcfd264": "remove 'setContext' to make tests faster",
  "d3178b53": "TestVisibility fails under slow running. It looks like ReadyState plugin doesn't work correctly.",
  "9a8813dd": "extend pause time of TestOpenInTargetFrame.html for slow ff tests.",
  "8d6d4d16": "fix SEL-233 and refactor pagebot a little: not to cache *currentWindow* in it, pass browserbot into as reference",
  "f68bbe7b": "Don't cache a reference to the 'current' document; instead, get it from the window whenever we need it. Fixes the internal 'Permission denied' error described in SEL-297.",
  "f12e75c3": "crack the waiting time for page load, make it more reliable in ie-slow test of slenium.build.win32",
  "093b5139": "Fixing SEL-296, which was causing failures in chrome mode. Changing the way we eval dom strings. At the same time I changed the chrome launcher in RC to use xpcnativewrappers=no, which may improve our FF security situation. Tested with FF/IE/Opera fast+slow. (IESlow still seems unstable.)",
  "ae0c98b6": "Added fast and slow versions of every browser test",
  "75d37697": "Merging framesupport back into trunk; tested fast/slow on IE and FF",
  "3c3ff6b6": "change ajax test case of Java client driver, in order to make build faster. NOTE: you may need update local maven repository with latest version of Selenium-Core, otherwise the new test case may fail.",
  "519f6706": "change ajax test case of Java client driver, in order to make build faster. NOTE: you may need update local maven repository with latest version of Selenium-Core, otherwise the new test case may fail.",
  "7d8db414": "change ajax test case of client drivers (except Java), in order to make build faster. NOTE: you may need update local maven repository with latest version of Selenium-Core, otherwise these new test cases may fail.",
  "41b8443b": "don't backup/restore registry on linux, because it's pretty slow to deal with registry on wine",
  "dda73479": "change the waiting time in slow refresh test to 2s, because rc defaultly waits 2s for page loading.",
  "a175e390": "wait longer to compensate for newly slower test_page.slow.html",
  "b651d8e2": "make slow refresh slower to make sure refresh test in opera always successful.",
  "ec9c1222": "added a slowResource mode, intended for debugging Selenese HTML tests",
  "ba7150c7": "1. debugMode now propagated to the JavaScript side 2. if selenium server is running in debug mode, log messages are propagated to the server console 3. slow down test_async_event a little bit to stop intermittent failures in debug mode (apparently caused by the system slowing down under the burden of moving the log messages to the server)",
  "cd4ca8e4": "1. debugMode now propagated to the JavaScript side 2. if selenium server is running in debug mode, log messages are propagated to the server console 3. slow down test_async_event a little bit to stop intermittent failures in debug mode (apparently caused by the system slowing down under the burden of moving the log messages to the server)",
  "730ec034": "- Renamed the 'slow loading' page, so that it has a special extension, making it easier to add a delaying handler in Apache",
  "15f61ea5": "- A bit too fast removing this one...",
  "df5a1fa4": "Add no cache headers to prevent IE caching response",
  "4fcdd9e8": "Add no cache headers to prevent IE caching response",
  "b4f431d4": "Provide XPath for browsers without native support, using a pure-JavaScript implementation. It's slow, but functional. Closes SEL-78.",
  "051516b4": "Provide XPath for browsers without native support, using a pure-JavaScript implementation. It's slow, but functional. Closes SEL-78.",
  "d3526818": "Recognise simple XPath expressions using regexps, and handle them using DOM-traversal, which is usually faster (SEL-81).",
  "eeead98e": "Recognise simple XPath expressions using regexps, and handle them using DOM-traversal, which is usually faster (SEL-81).",
  "822b632c": "Simplify locateElementById(); the use of document.evaluate() is unnecessary, and DOM-traversal seems to be faster, anyway.",
  "70a5a17f": "Simplify locateElementById(); the use of document.evaluate() is unnecessary, and DOM-traversal seems to be faster, anyway.",
  "033692c5": "TestRunner cached test results are now displayed correctly in Safari. Licence file for selenium-logging.js",
  "2756aef2": "TestRunner cached test results are now displayed correctly in Safari. Licence file for selenium-logging.js",
  "c574548a": "checkbox to force Selenium to slow down...",
  "1da27566": "checkbox to force Selenium to slow down...",
  "d29c3300": "All 'action' commands can now be called with an AndWait suffix, which causes them to wait for a page reload (eg selectAndWait). Click is the exception. Added test_slowloading_page, which tinyWebServer serves up with a delay for testing page reloads. Added verifyTitle assertion.",
  "4ef9dce6": "All 'action' commands can now be called with an AndWait suffix, which causes them to wait for a page reload (eg selectAndWait). Click is the exception. Added test_slowloading_page, which tinyWebServer serves up with a delay for testing page reloads. Added verifyTitle assertion."
}, "Sentinel": {
  "04e5047": "deps: Update fastjson to 1.2.83_noneautotype",
  "855e388": "deps: Update fastjson to 1.2.69_noneautotype",
  "ca13ea6": "Use CopyOnWriteArraySet for ConnectionGroup#connectionSet to avoid iterator fast-fail (#2559)",
  "0b5f619": "Improve performance of TimeUtil adaptively in different load conditions (#1746)",
  "bc4c21e": "dependency: Upgrade fastjson to 1.2.75 (#2006)",
  "6f2f844": "Fix the problem that requests will never be blocked when slowRatioThreshold = 100% (#1779)",
  "ff0e53f": "Upgrade fastjson to 1.2.71 (#1545)",
  "fd4e69b": "Update fastjson to 1.2.68",
  "49e60a3": "Force modifyRule command handler to fail if an incompatible old fastjson found (#1377)",
  "80d5c8b": "Enhance reliability and performance of InMemoryMetricsRepository (#1319)",
  "4d9a5ef": "Update fastjson version to 1.2.60 (#1045)",
  "88b5631": "dashboard: fix AuthorityRuleEntity and ParamFlowRuleEntity fastjson serialize problem (#889)",
  "78f69bb": "Upgrade fastjson dependency to 1.2.58 (#950)",
  "d05a603": "Update fastjson dependency version to 1.2.56",
  "5d3ccb0": "Solve the issue that sleeping-based tests are not stable and optimize slow tests (#546)",
  "61fede3": "Add a CommandCenterProvider to resolve and cache the CommandCenter instance (#409)",
  "e893dd8": "Make build faster by reducing fixed waiting time in tests (#449)",
  "9e1b5a9": "Update dependency version of fastjson and jacoco-maven-plugin",
  "40cd335": "Update fastjson dependency to 1.2.54"
}, "serve": {
  "77ca82d": "fix: kserve fastapi migration issues (#2175)",
  "4e08fd1": "Add metric cache and migrate existing metrics to cache implementation (#2199)",
  "0ea5ae5": "FAQ on slow model initialization (#2246)",
  "898e2c2": "Update performance_guide.md (#1697)",
  "411ab09": "Merge pull request #1376 from shrinath-suresh/fast-transformer-readme-update",
  "4fc9fff": "Merge branch 'master' into fast-transformer-readme-update",
  "97e1a74": "Merge branch 'master' into fast-transformer-readme-update",
  "454c731": "Merge branch 'master' into fast-transformer-readme-update",
  "bef86eb": "Merge branch 'master' into fast-transformer-readme-update",
  "7667ede": "Merge pull request #1261 from jagadeeshi2i/fast_transformer_readme",
  "58d1a06": "Merge branch 'master' into fast_transformer_readme",
  "820dc30": "Merge branch 'master' into fast_transformer_readme",
  "a93f3a4": "Merge branch 'fast_transformer_readme' of https://github.com/jagadeeshi2i/serve into fast_transformer_readme",
  "a6efef6": "changed to exp directory and added fusion optimizations, warmup and tqdm progress bars",
  "293d3a7": "Merge branch 'master' into fast_transformer_readme",
  "e2111d4": "Merge branch 'master' into fast_transformer_readme",
  "ff4c119": "fix: faster transformers k8s readme",
  "c6bd58e": "feat: Add readme for fast transformers huggingface bert",
  "a05eb5a": "Fixed a minor bug related to invalid image input. Also did small optimization of previous bug fix."
}, "Shadow": {
  "7aa65f7": "feat(core.transform): ShadowTransform声明为支持build cache",
  "6f42a9d": "更换docker image到image: dockerimage.isd.com/android-build/shadow-build-cache:latest"
}, "ShadowLayout": {
  "": ""
}, "ShapeOfView": {
  "": ""
}, "shardingsphere": {
  "47d97d7c": "Fix sonar issues on Collection methods with O(n) performance should be used carefully (#25833)",
  "f5718e79": "Set cache loading timeout to 1 min (#25736)",
  "965a7c66": "Finish mysql performance_schema tables (#25340)",
  "a1cb0ba0": "Refactor : refactor the sonar cache and names (#25348)",
  "7dbf1c04": "Add more mysql performance_schema tables (#25338)",
  "24b24550": "Add more mysql performance_schema tables (#25282)",
  "fb615566": "Add more mysql performance_schema tables (#25266)",
  "5a5e52bb": "Add more mysql performance schema tables (#25256)",
  "ddeb628d": "Add more mysql performance_schema tables (#25146)",
  "f55ec7ad": "Add more mysql performance_schema tables (#25143)",
  "f366cb01": "Add more mysql performance_schema tables (#25134)",
  "50c55a24": "Add mysql performance_schema tables (#25117)",
  "2a71f2ac": "Fix statement cache not closed when connection is closed(#24070) (#24099)",
  "a1322be8": "RALStatement inheritance structure optimization. (#24065)",
  "7152f643": "Clear service cache when any configuration changed (#23104)",
  "b2a01c51": "19937 federation optimization test 20221205 (#22693)",
  "53ad7838": "Add more test cases in the federation optimization test (#22601)",
  "50854e10": "test: add test case for federation optimization test. (#22545)",
  "3e311713": "19937 federation optimization test 20221128 (#22468)",
  "05283a54": "Update sharding-cache.en.md (#22474)",
  "23dae263": "19937 federation optimization 20221121 (#22444)",
  "25e078ad": "Add documents for sharding cache (#22317)",
  "74f99beb": "Refactor optimization unit test. Describe the case in xml file,… (#22241)",
  "ad4644f5": "update example action job cache key (#22157)",
  "b38b3827": "Refactor : refactor and upgrade all actions/cache (#21466)",
  "018d69b5": "Add sharding cache plugin (#21240)",
  "e6054270": "Refactor : update all maven cache step in workflows(#21184) (#21196)",
  "a0731b7e": "Reuse cached connections as possible when unicast sharding (#21126)",
  "b7542ee6": "Disable fail-fast for Daily Continuous Integration (#21045)",
  "0ce169ac": "feat: remove useless rules for push down filter and project. remove useless subquery rules temporarily, and subquery optimization will be considered carefully in the next step. (#20721)",
  "75bcf03f": "feat: modify filter optimization rules. (#20599)",
  "170f3f30": "Add pre-check for migration job to fail-fast (#20500)",
  "5b36c73a": "Fix the maven cache action (#20220)",
  "27e6c3a5": "show processlist performance improve (#19857)",
  "a3a0d80b": "Refactor performance test doc (#19380)",
  "954bebf8": "update article for performance test (#18353)",
  "85ea9ab0": "Do not cache data source in GlobalDataSourceRegistry for scaling (#18033)",
  "4f545899": "little performance improve for encryptRule (#18012)",
  "d0f6bcf3": "Scaling IT minor optimization (#17995)",
  "87d948e6": "Remove ShardingSphereResource.cachedDatabaseMetaData (#17866)",
  "2383fa6e": "Add fast failed of scaling it, print more logs (#17766)",
  "61612952": "Delete guava cache concurrencyLevel (#17753)",
  "6b67aedb": "Use caffeine instead of guava cache (#17712)",
  "33a75039": "Scaling IT optimization (#17702)",
  "75ce5ab8": "Fix: The cache is not updated after DistSQL modifies props in non-cluster mode (#17465)",
  "e1be9173": "optimization check highly available status (#17049)",
  "0f4fb4f8": "Optimize UUID performance (#16959)",
  "3c0a2e5a": "NanoId faster and shorter than uuid (#16913)",
  "eb7f0a81": "Improve performance about large tables loaded. (#16917)",
  "7b4c54e0": "addResource code optimization. (#16802)",
  "08372cf1": "PostgreSQL scaling auto create table optimization (#16727)",
  "122aa9fd": "Optimize performance, log MDC information only when sql-show is enabled. (#16678)",
  "0abd8787": "Remove use of Stream API to avoid performance degradation (#16668)",
  "f3149242": "Recover fail-fast to default value true (#16406)",
  "0d42ecb7": "remove get data from curator cache (#15986)",
  "510cb7cd": "Optimize traffic sql hint algorithm performance (#15958)",
  "70d27b2e": "Add StatementManager and cache statements for ShardingSpherePreparedStatement (#15934)",
  "27ebe623": "Update performance-test.cn.md (#15895)",
  "1e8ca8cd": "Load proxy instance list from cache for traffic rule (#15884)",
  "cb1aa63c": "Replace Guava cache with SoftReference ConcurrentHashMap in OrderedServicesCache (#15867)",
  "6ba23910": "Optimize EncryptProjectionTokenGenerator logic to improve performance (#15773)",
  "8f012fe4": "Refactor curator cache for curator zookeeper repository (#15672)",
  "3020ed15": "Use new version configuration instead of cache for scaling (#15492)",
  "6edcd9a4": "Update ci.yml for run CI faster (#15283)",
  "41a92c94": "Code format optimization and remove unnecessary mock. (#15233)",
  "f152d010": "Replace dataSourceFactory.newInstance to dataSourceManager.getDataSource for better performance and avoid possible connection leak (#15126)",
  "db2c9062": "Reduce call of isNeedEncrypt method to improve performance (#15072)",
  "76a8b274": "Reduce ParameterRewriterBuilder size to improve performance (#15064)",
  "5b41b66c": "Find record in reversed order to improve ack callback performance in inventory task (#15025)",
  "f76bf59b": "Move ackCallback in channel impl; Improve performance of MemoryPipelineChannelFactory.createPipelineChannel (#15022)",
  "58b42bea": "Adjust readwrite-splitting document about namespace and readwrite-splitting performance document. (#14900)",
  "758fe334": "Optimize performance of executing openGauss batch bind (#14505)",
  "3454e0af": "improve load single table performance (#14031)",
  "ef7aea26": "Add default cacheOption (#13955)",
  "10671be9": "optimize rewrite engine performance (#13916)",
  "753995d2": "optimize query optimization doc (#13890)",
  "4658046d": "Minor optimization documentation (#13761)",
  "203594b7": "Use props to configure cache option (#13722)",
  "8f40f0ca": "Parse hint optimization. (#13681)",
  "3433cb37": "Shadow route optimization (#13669)",
  "1204cb85": "Add cache index DAL SQL parser for MySQL. (#13499)",
  "e82146a7": "Refactor cache rule configuration (#13411)",
  "0dcde889": "Add cache configuration for SchemaRulePersistService (#13319)",
  "01334321": "Improve scaling job start process when rule cache changed (#13266)",
  "db80066f": "Encapsule ShardingSphereConnection.cachedConnections as inner field (#12917)",
  "e969fc62": "Add optimization rules and unit test for cross join (#12904)",
  "ddad91a7": "update query optimization doc (#12815)",
  "33062dc4": "Using Netty executor to optimize Proxy performance (#12474)",
  "23dc470a": "cache readwrite splitting statement (#12524)",
  "e213a5f5": "Fix rule cached listener (#12196)",
  "d220ef8e": "optimize select performance (#11984)",
  "605e05c9": "improve metadata load performance (#11767)",
  "35ff1665": "optimize performance for delete, update and insert statement (#11847)",
  "4f55a0a0": "sharding rule performance optimization (#11777)",
  "3285ad55": "modify tableRules to Map to improve performance (#11768)",
  "6618aa14": "Code optimization for shardingsphere-shadow project. (#11282) (#11285)",
  "62e07d2e": "Minor optimization in DropReadwriteSplittingRuleStatementUpdater (#11302)",
  "4cc516ef": "Add cache for PostgreSQLCommand (#11303)",
  "2a1f5b17": "Minor performance enhance of MySQL authentication (#11271)",
  "54aa29c2": "Avoid to call SQLUtil.getExactlyValue out of parser module to enhance performance (#11206)",
  "a0adcb72": "Avoid use String.format to enhance the performance (#11205)",
  "ba641444": "Move cached statements and result sets into DatabaseCommunicationEngine (#10932)",
  "f99d700f": "Create sql node engine for sql optimization (#10895)",
  "3d64e7d4": "Translate performance-test-sysbench.cn.md into English (#10288)",
  "1dc3f430": "optimize cacheCurrentRow logic of GroupByStreamMergeResult (#10142)",
  "abd27608": "optimization for execution group (#10036)",
  "16e1833a": "Use OrderedSPIRegister to replace cache from engine details (#9790)",
  "5f29088b": "Add cache for OrderedSPIRegistry (#9788)",
  "b1e86074": "improve performance for proxy by caching instances (#9746)",
  "01f2c72c": "#9616, improve performance of Proxy by increase prepStmtCacheSize (#9618)",
  "d0963859": "Add rule configuration cached event (#8955)",
  "064e4867": "Support different Database types for Query optimization and fixed some bugs (#8918)",
  "4682f969": "Post event after rule configuration was cached (#8881)",
  "7e798466": "Adjust Directory for query optimization (#8875)",
  "583fac57": "Add cache manager for configuration changes (#8846)",
  "bdf43c3c": "Add information_schema and performance_schema's init framework (#8730)",
  "812992d7": "Move cache into core package",
  "14860e2c": "Create new constructor to accept cache option (#8232)",
  "894c3edb": "Move static cache into parser engine instance (#8231)",
  "e6f3153f": "For optimization scaling importer performance (#8127)",
  "37651f3a": "Remove ShardingSphereSchema.cachedDatabaseMetaData (#8040)",
  "f6df19f7": "Refactor StandardSQLParserEngine and cacheEngine (#7914)",
  "4e9da28c": "Remove cache for RDL (#7830)",
  "7a4e7ceb": "Move cachedDatabaseMetaData from RuntimeContext to ShardingSphereMetaData (#7683)",
  "14a708ea": "Build all schema in constructor to improve performance (#7602)",
  "7aa27020": "#6872, remove connection test `SELECT 1` to improve performance",
  "1b3215d2": "#6872, use delete instead of truncate to improve performance",
  "c1992bf1": "Merge pull request #5481 from yanyzy/code-optimization",
  "f40bb8ff": "Code optimization",
  "61c049dc": "optimize performance of partitionRangeMap initialization (#5406)",
  "6aab9a8e": "Enhance scaling write into proxy performance (#5068)",
  "d1f85e02": "release cached transaction for BASE transaction type in proxy (#4940)",
  "93123ece": "orchestration mode code optimization . (#4825)",
  "1eff6175": "Use preload and cache to process properties (#4800)",
  "023fcf43": "update docs of performance test (#4458)",
  "a810c5be": "update docs of performance test (#4352)",
  "5b044489": "Update performance doc (#4310)",
  "ecd060cb": "Using multithreading make loadDefaultTables faster.",
  "676367f6": "Using multithreading make loadDefaultTables faster. maybe should remove repeat load tableMetaData?",
  "06135c64": "Using multithreading make loadDefaultTables faster and remove repeat load tableMetaData",
  "c0da2987": "fixed for #2997. Use guave cache instead of AbstractHashedMap (#3928)",
  "dbb6c164": "Modify performance test document (#424)",
  "79544df2": "modify performance test doc (#417)",
  "40367c43": "update performance test doc",
  "15c0c607": "#3704 Config optimization for ShardingScaling (#3706)",
  "12c8f9e9": "rename performance test files",
  "0b2e443b": "#3587, cache DataSourceMetaData (#3588)",
  "fad3fb68": "#31 Configuration optimization-optimization",
  "92911d77": "#31 Configuration optimization-check style",
  "7a310e31": "#31 Configuration optimization-instead fastjson with gson",
  "0290b3b1": "#31 Configuration optimization-check style",
  "2f923eb7": "#31 Configuration optimization-add configuration log",
  "f9a168db": "#31 Configuration optimization-update start.sh",
  "5d99e7b0": "#31 Configuration optimization-update README.md",
  "963211dd": "#31 Configuration optimization-change the configuration with json",
  "bcf627ff": "#31 Configuration optimization-delete previous config file and move some class",
  "436dd11f": "#31 Configuration optimization-add related files",
  "03c55336": "code style optimization (#3418)",
  "799c8152": "sharding-ui-frontend optimization correlation (#3357)",
  "fe1833aa": "Optimize performance, reduce unnecessary loops (#3034)",
  "f76bbc2c": "#2682, improve performance of RoutingEngine",
  "5281251e": "Merge pull request #2438 from TheRealHaui/additional-minor-performance-improvements",
  "532b1520": "Merge remote-tracking branch 'origin/additional-minor-performance-improvements' into additional-minor-performance-improvements",
  "41526492": "Additional minor performance improvements",
  "82a9825f": "Additional minor performance improvements",
  "e81f4a97": "for #2428, Add cache for master-slave",
  "dd2cad17": "Merge pull request #2403 from TheRealHaui/small-minor-performance-improvements",
  "5e4b6488": "Small minor performance improvements",
  "ced505a8": "disable SQL statement cache",
  "3df920f3": "for #1844, performance improvement",
  "b7f456c5": "delete the remove cache for proxy prepare statement.",
  "c57eef50": "delete the remove cache for proxy prepare statement.",
  "0ec95c96": "for #1963 revert guava cache for MySQLBinaryStatementRegistry.",
  "e5335944": "for #1963 move closed binary statement to guava expired cache to avoid exception in performance test.",
  "ea0d38c3": "fix performance problem for proxy-master-slave.",
  "f4e45a87": "fix performance problem for proxy-master-slave.",
  "6f71d620": "delete cachedDatabaseMetaData",
  "bc4416b2": "fix cache key problem of SQLParsingEngine.",
  "ecd862fe": "#1517, cache postgreSQLBinaryStatementParameterTypes in parse phase",
  "25f016f0": "#1517, cache postgreSQLBinaryStatementParameterTypes in parse phase",
  "b07897c3": "#1517, cache postgreSQLBinaryStatementParameterTypes in parse phase",
  "b181b9c9": "#1517, change parameter cache mechanism for PostgreSQL",
  "c26cb251": "switch off cache for statement",
  "da50e35d": "#1630, cache properties to avoid unnecessary synchronization",
  "54272055": "switch on cache of parse statement",
  "f47c021b": "for #1238 synchronized auto close of cachedConnections.",
  "f4f3ba64": "#1238 Make cachedConnections ascend order.",
  "d2a84d6f": "#1238 Clear cache while start new transaction.",
  "962958ea": "#1238 Clear cachedConnections while close().",
  "9193d1cb": "#1238 Clear cachedConnection while current request ended.",
  "52bef8fd": "#1238 Add cached layer while getConnections.",
  "5c1168dd": "#1238 Change cachedConnections to HashMultimap",
  "e9678f4a": "Revise NewInstanceServiceLoader.load for performance tuning.",
  "5ec4e565": "for #1172, Use SPI to instead of guava event bus for performance issue",
  "945ed177": "for #1205, sync cached connections when get connection for concurrency",
  "001ad07e": "try to improve performance test",
  "7ea16380": "delete statement cache",
  "e670ca87": "#1208, improve performance when use bindingTables",
  "8cacdd88": "add cache for travis",
  "605c1f2a": "get cache list",
  "2b9edced": "modify cachedConnections",
  "354535d0": "reuse cachedConnections",
  "46a92f3b": "modify cachedConnections",
  "89cbf1dc": "for #1088, cache statement and resultSet",
  "0c8e9494": "add local cache for transaction configuration adapter.",
  "b26a3275": "zk cache load and getvalue test",
  "3f9463e6": "cache test",
  "989533a1": "resolve problem for xa performance test",
  "0c107aa1": "remove the prepareStatement clear for mysql lur-cache strategy.",
  "60c86be0": "for #601: enhance performance",
  "fc55fb94": "update sharding-config.yaml and use &cachePrepStmts=true",
  "392697f3": "cache test",
  "abbfdfe7": "cache restart",
  "b1509f27": "cache restart",
  "22dd904e": "for #768, remove getter method of cachedConnections in class AbstractConnectionAdapter",
  "20f261eb": "for #768, remove useless cachedSQLType from MasterSlaveConnection",
  "bd521dfd": "lazy cache base",
  "a5e064fa": "lazy cache base",
  "04c84594": "lazy cache base",
  "6977b7bc": "lazy cache load",
  "c1d2169a": "lazy cache load",
  "69cd6772": "cache begin",
  "b2ed89e2": "cache begin",
  "e46a9ec3": "cache begin",
  "965c611b": "for #731 Improve Prepared Statements performance",
  "84f0d43e": "for #701: auto increment key can use cache for parse",
  "98e400f9": "for #701, only cache preparedStatement, do not cache statement",
  "d6bb344e": "for #701, put sql in cache",
  "b59bf455": "fix #701: move to cache package",
  "0e6c9602": "fix #701: cache sql parser result for (prepare) statement",
  "90da47df": "Refector ShardingJdbcDatabaseTester, connection cache add schema to support Oracle",
  "2f5bf2e4": "pull member up for AbstractConnectionAdapter.cachedConnections",
  "a5cb635b": "connectionMap => cachedConnections",
  "1f5dab2f": "add connection cache for MasterSlaveConnection and fix bug for getConnections",
  "304e3185": "remove cache for generatedKeysResultSet",
  "f6ce91fe": "fix #219 Improve thread performance.",
  "73fc7527": "fix #215 #161 Improve streaming sort performance."
}, "shardingsphere-elasticjob": {
  "c7a4f1a": "fix performance loss for the misfired configuration that is not turned on (#1885)",
  "fec7cff": "Fix OneOffJobBootstrapTest.assertExecute and JobSpringNamespaceWithTypeTest.jobScriptWithJobTypeTest assert failed in an environment of insufficient performance. (#1662) (#1663)",
  "553165a": "Add cache for getHostName (#1327) (#1328)",
  "87165de": "fix bug: add cache twice",
  "780029c": "app cache enable default value true => false",
  "2dbd55f": "cache app configurable",
  "6591248": "remove state cache form curator",
  "587e184": "sharding improvement: cache total sharding total count, will fire resharding when sharding total count changed for config only",
  "9f238f9": "can load job config from cache",
  "3162f05": "use singleton to improve junit performance",
  "c537f1b": "mock statistics service test case, to improve junit performance",
  "2415264": "mock listener test case, to improve junit performance",
  "e88dd03": "mock service test case, to improve junit performance",
  "f05d3f1": "mock service test case, to improve junit performance"
}, "shenyu": {
  "cc1afd9": "[type:refactor] refactor shenyu selector and rule cache (#4578)",
  "12d0eb9": "[ISSUE #4517]shenyu rule cache test case (#4557)",
  "3d8798b": "[ISSUE #4182] optimization global plugin sort. (#4429)",
  "1286b4a": "[type:fix] fix error cache usage (#4503)",
  "a7569b4": "[type:refactor] refactor rule match cache (#4446)",
  "e6fb40a": "Dubbo cache bugs (#4439)",
  "f6d42e8": "[ISSUE #4432] fix dubbo invoker cache bugs. (#4433)",
  "1746a8e": "[type:feat] add L1 cache and trie as L2 cache (#4417)",
  "962277f": "critical link, LOG invoke method, causing performance loss. (#4387)",
  "5966053": "[type: performance] optimize UpstreamCheckService (#4386)",
  "0a136fa": "Fixed jdk8 Map computeIfAbsent performance bug (#4338)",
  "99cafc6": "[type:feat] add trie match cache (#4222)",
  "af3a590": "[type:fix] fix cache too large (#4197)",
  "54f233d": "[type:feature] add rule cache (#4164)",
  "ff1abbf": "[ISSUE #4122] fix dubbo generic call performance bug (#4129)",
  "c9fb339": "Drop-down box optimization (#4074)",
  "ccd8d6c": "[type:bug] fix bug issue #3939, modify the cache key value. (#3941)",
  "eba0808": "[type: fix] fix selector cache bug (#3770)",
  "f68993a": "[type:refactor] refactor thread pool and cache pluign (#3735)",
  "2780c1f": "add: add a plugin enum cache, we can quickly get plugin by name in this cache. (#3608)",
  "6e906a6": "[type:Integration Test] Add redis modle test for cache-plugin (#3578)",
  "dd4bcf1": "Remove fastjson (#3481)",
  "16b3f77": "[type: refactor] reset cache plugin sort. (#3473)",
  "870b036": "[type:Integration Test] Add cache-plugin Integration Test (#3333)",
  "55cacb0": "[type:refactor] optimize the performance of MemoryLimitCalculator#maxAvailable (#3316)",
  "aa40fde": "[ISSUE #3255] optimize the performance of AbstractShenyuPlugin#filterSelector (#3273)",
  "e083bc9": "[type: refactor] optimize cache-plugin config logic. (#3164)",
  "430074e": "Optimize cache plugin (#3141)",
  "cd39bbe": "[type: refactor] refactor & optimize cache-plugin. (#3136)",
  "40c5170": "[type: refactor] refactor cache plugin (#3135)",
  "5801f9b": "[type: refactor] Minor code optimizations (#3086)",
  "5890c3f": "[type:feature] Code optimization about http sync. (#2787)",
  "c452dce": "1. Dubbo ReferenceConfig when removed from the cache, call ReferenceConfig destroy method. (#2636)",
  "35df916": "Revert 'optimization client build path (#2172)' (#2185)",
  "474505b": "optimization client build path (#2172)",
  "6c6bf31": "fix 'org.apache.shenyu.loadbalancer.cache.UpstreamCheckTaskTest.testRun test fail'(#2128) (#2146)",
  "42498e2": "[ISSUE #1721] Add test case for param-mapping and remove the cache module of plugins (#1722)",
  "25c2697": "fix guava cache usage (#1483)",
  "d53bd66": "cache dubbo provider version (#1453)",
  "f9f5157": "code optimization (#1367)",
  "720da1f": "fix: the cached AppAuthData don't contain path and param info (#1358)",
  "9ce3c3e": "Cache json deserialization for performance of plugins (#1317)",
  "149360d": "Cache json deserialization for performance of ContextPathMappingPlugin and DividePlugin (#1285)",
  "83bf888": "alibaba and apache dubbo config cache execption catch (#1021)",
  "393b9c1": "[#771]tars plugin metadata and cache code refactoring (#916)",
  "99bafea": "fix wrong sofa cache key. (#750)",
  "af4de61": "ObjectMapper is a completely thread-safe service class, it is meant to be used as singleton across the lifetime of the application. It is also very expensive to create. ... It is also prudent to do a review of all usages of ObjectMapper and ensure that it is not instantiated every time. This is a performance killer",
  "d04df92": "A variety of optimization.",
  "abea0f8": "cache cross.",
  "ef5fa3b": "optimal performance.",
  "7e9d3a2": "remove fastJson",
  "5141e0b": "update cache for http long polling",
  "70b8f0f": "add fastjson .",
  "ed90082": "ConditionStrategy and cache data"
}, "shimmer-android": {
  "": ""
}, "ShineButton": {
  "": ""
}, "shiro": {
  "284a4a0": "Merge pull request #777 from apache/dependabot/github_actions/actions/cache-3.3.1",
  "c79390c": "Bump actions/cache from 3.3.0 to 3.3.1",
  "e63f0d0": "Merge pull request #773 from apache/dependabot/github_actions/actions/cache-3.3.0",
  "ea7811f": "Bump actions/cache from 3.2.6 to 3.3.0",
  "30c7dd3": "Merge pull request #750 from apache/dependabot/github_actions/actions/cache-3.2.6",
  "c54ad74": "Bump actions/cache from 3.2.5 to 3.2.6",
  "cc9423f": "Merge pull request #737 from apache/dependabot/maven/org.cache2k-cache2k-jcache-2.6.1.Final",
  "71d4988": "Bump cache2k-jcache from 2.4.1.Final to 2.6.1.Final",
  "1afd6b8": "Merge pull request #705 from apache/jcache-main",
  "5d793fb": "Merge pull request #733 from apache/dependabot/github_actions/actions/cache-3.2.5",
  "1c4a809": "Bump actions/cache from 3.2.4 to 3.2.5",
  "b919b49": "Adds cache module for JCache",
  "0d1a7d7": "Merge pull request #701 from apache/dependabot/github_actions/actions/cache-3.2.4",
  "cba31a2": "Bump actions/cache from 3.2.3 to 3.2.4",
  "2ab2442": "Merge pull request #629 from mnd999/mnd999-name-authorizingrealm-cache-flag",
  "86f605b": "Performance optimization Change the acquisition of system properties to static variables to reduce contension in high concurrency environments. The Boolean.getBoolean method calls Hashtable to obtain system properties, and will lock.",
  "47891c3": "Merge pull request #205 from apache/cache-to-all",
  "b4cb5cc": "Add shiro-cache to shiro-all package",
  "5c8dd9d": "Merge pull request #180 from coheigea/ehcache_tests",
  "d661c29": "Adding some more ehcache unit tests",
  "bc5240d": "Move integration-tests and test-coverage modules to 'ci' profile, add fast profile",
  "2105c1b": "SHIRO-637: Refresh cached session in HTTP request when its state changes",
  "f5acaa0": "Update commons, ehcache, and aspects dependency versions",
  "73fb973": "Removing log spam when no cache manager is enabled.",
  "0140fab": "Extracted cache API to its own Maven module. No package names or public APIs have changed.",
  "cefe57b": "SHIRO-412: I got tired referencing Hazelcast-based examples I created outside of Shiro, so I'm bringing it into the project properly. Works great. Hazelcast is Apache-licensed as well and probably should be our default caching recommendation (Ehcache is I think still LGPL and a touchy issue - we can't extend any of its code - just invoke it).",
  "8f18e05": "SHIRO-288 - removed the call to WebUtils.normalize - the value specified is done by a developer configuring Shiro, not an application end user - if the url the dev specifies is invalid, startup will fail fast showing what went wrong - no need to 'sanitize' developer configuration input in this case. Added test cases for verification.",
  "7cfd45f": "SHIRO-95 - created test case to verify explicitly set Cache and CacheManager instances are not overwritten by defaults. Both AuthorizingRealm and CachingSessionDAO were setting their respective caches to null when a CacheManager instance was set - this behavior has been removed as it is unexpected by end-users. Also made Cache and CacheManager interfaces and implementations generics-capable. IniSecurityManagerFactoryTest#testCacheManagerConfigOrderOfOperations test method was added to verify functionality.",
  "8df63ee": "changed Factory.createInstance method name to Factory.getInstance. This name change allows for either a new object to be created or a cached object to be returned at the discretion of the underlying implementation. The previous ''createInstance' name implied a new instance is always created, which may or may not be desirable depending on the implementation strategy or usage.",
  "c5a3280": "Add the new value in put() to strongreferences queue by default to solve the test reliability issue with SHIRO-96 (because account info in memory realms may get garbage collected). However, this doesn't ultimately solve the issue as values that don't fit to strong references would still get garbage collected. Additionally, there's no need to use a cache for memory realms anyway - see SHIRO-49 for that.",
  "586b59b": "SoftHashMap - made some adjustments after re-reading Java Concurrency in Practice. MapCache - removed destroy() method (called clear(), which could have negative effects on a stateful cache. This also allowed removing import of the Destroyable interface.",
  "061e034": "fixed erroneous file path constant for embedded ehcache.xml file",
  "99ec911": "removing - incorrect location (not Ehcache specific)",
  "2fbaf89": "Fixed a few bugs related to remote proxy Session management (exceptions not properly propagating to the correct layer). Added some performance enhancements in the DelegatingWebSecurityManager to cache the session on a thread-local instead of regularly accessing the back-end system avoiding network round-trips where possible.",
  "30848a7": "- SHIRO-53 - enabled auto-deletion of Session objects after invalidation to prevent orphans. Added DefaultSessionManagerTest#testSessionDeleteOnExpiration() testcase for verification. - Removed auto-deletion of cached objects from CachingSessionDAO - this was preventing the SessionManager from performing appropriate cleanup/notification logic necessary for any invalid sessions held by the cache (this was preventing SessionListeners from receiving onExpiration and onStop callbacks) - Added proper toString, equals and hashCode implementations to SimpleSession",
  "2640688": "ensured the cached hex and base64 encoded values are marked as transient to prevent double payload size when remoting. Also implemented Serializable to allow easy transfer over the wire",
  "274f228": "JSEC-27, JSEC-40, JSEC-41 - removed default realm. Removed core depdency on Ehcache (now uses DefaultCacheManager which uses core SoftHashMap caches to prevent memory leaks), removed ensureRealms() method in SecurityManager implementation since the Authorizer and Authenticator implementations now assert if realms were properly configured or not",
  "8734588": "JSEC-24 CachingSecurityManager always needs a default cache manager, for now",
  "74d0949": "JSEC-125 - moved ehcache-based classes to the 'support' directory",
  "9278d8d": "JSEC-125 - moved ehcache-based classes to the 'support' directory",
  "32f5fd6": "JSEC-125 - moved ehcache-based classes to the 'support' directory",
  "8abb4ee": "JSEC-125 - moved ehcache-based classes to the 'support' directory",
  "9775a3b": "Added backport-util-concurrent to the quickstart webapp - it's required by the provided ehcache jar.",
  "b84b388": "ehcache optimizations for the PropertiesRealm",
  "776c8f9": "Fixed cache manager destroy problem in EhCache.",
  "2c1f124": "added destroy/cleanup code to EhcacheSessionDAO to cleanly destroy an implicitly acquired Ehcache CacheManager instance (was previously throwing log4j exceptions due to shutdown hook never being cleaned)",
  "e2374a3": "added check to fail-safe the sessionDAO if ehcache is not in the classpath, added a utility method to ClassUtils",
  "bd8d9ae": "restructured how Ehcache works within the SessionManager, specifically to address default activeSessionCache settings. This removed the need for the jsecurity-specific failsafe xml file.",
  "e0d472a": "updated ehcache.xml to include a jsecurity session cache (default production-quality session cache is not enabled when an explicit ehcache.xml is in the classpath).",
  "e97d7a5": "Enhanced Session DAO more ehcache work - using sensible defaults, tested w/ overflow to disk",
  "52d7785": "Enhanced Session DAO implementation & updated ehcache session settings to prevent preemptive cache timeout (interfering w/ JSecurity's session timeout)",
  "12293d2": "Added more robust disk-based session management via a SessionDAO implementation using Ehcache (in memory + disk-based cache & persistant across server restarts). This is now the default SessionDAO for the DefaultSessionManager, as it is production-worthy.",
  "218318b": "Added more robust disk-based session management via a SessionDAO implementation using Ehcache (in memory + disk-based cache & persistant across server restarts). This is now the default SessionDAO for the DefaultSessionManager, as it is production-worthy.",
  "bcca299": "Upgraded to latest stable version of ehcache (to 1.2.4) - well tested for high volume and clustered environments",
  "9b521d8": "changed delimiter split regex to a static final compiled Pattern for better performance",
  "cd07aa8": "minor optimization"
}, "shopizer": {
  "": ""
}, "shopping-management-system": {
  "": ""
}, "ShortcutBadger": {
  "": ""
}, "ShowcaseView": {
  "bceb848": "Improved performance"
}, "Side-Menu.Android": {
  "": ""
}, "Signal-Android": {
  "e5bf04a4": "Cleanup Recipient.externalPush to use RecipientId cache.",
  "6b6e2490": "Add performance logging for message processing.",
  "77751c1d": "Add read through cache for thread id.",
  "6aa4bb54": "Add database indices to improve message delete performance.",
  "aaca487b": "Improve performance around marking messages read.",
  "6db71f4a": "Improve performance of finding message positions in chats.",
  "4f06a0d2": "Improve performance from thread being updated to data available to render.",
  "026d0296": "Fix tapping too fast breaking my stories viewer.",
  "a35a167e": "Fix spoiler animation running after view is returned to cache.",
  "d88534e7": "Improve spoiler drawing performance.",
  "59141bc6": "Improve delete thread performance.",
  "c30e3664": "Improve performance of message processing.",
  "c0aff46e": "Add message processing performance test.",
  "f3693c96": "Improve conversation list cold start performance.",
  "7abf358a": "Pre-cache conversation_list_item_view to speed up cold start.",
  "afbce6f8": "Re-enable FTS optimization after deletes.",
  "7c716e55": "Fix slow kotlin build.",
  "f0b3aa66": "Revert 'Enable gradle configuration cache.'",
  "6e5b4bbc": "Enable gradle configuration cache.",
  "3738daf4": "Pre-cache max unreserved player count on process startup.",
  "59f05e08": "Improve performance of marking chats read.",
  "4d9dc428": "Improve the performance of the migration by ~4x.",
  "3cc556d8": "Fix issue with cache entry access.",
  "4908e393": "Skip prefetch call if no stories need to be cached.",
  "ad001d58": "Utilize center-inside transform to ensure proper downsampling of cached images.",
  "bdba048b": "Remove possible transaction from identity cache read.",
  "4077dc82": "Improve contact pull-to-refresh performance.",
  "da3623d7": "Fix fast story tapping.",
  "fe6058e0": "Improve cold start performance.",
  "b0dc7fe6": "Add batch identity key check call for improved safety number change performance.",
  "12e6ebb4": "Improve performance of GV2 profile fetch and mentions initialization.",
  "417070e9": "Prevent possible deadlock in identity cache.",
  "6fb6092a": "Implement a cache for faster typeface resolution.",
  "74e630aa": "Fix possible crash and remove old fastRecord system.",
  "945c308c": "Update group update messages faster.",
  "4c7bd80f": "Fix early ringing state on slow connections.",
  "e273f914": "Remove clear-cache call from database migration.",
  "46dd7f8a": "Improve performance of processing read syncs.",
  "947f59e8": "Improve chat list multiselect animation performance.",
  "5c1b57e4": "Implement ExoPlayerPool for better reuse and performance.",
  "08d03cb4": "Clear emoji cache after downloading a new set.",
  "ecfbeb69": "Allow images to be cached in the image editor.",
  "a805f9b6": "Utilize fast-in-extra-slow-out interpolator.",
  "c84de8fa": "Add a cache for GIFs.",
  "0b53ba89": "Improve MMS database insertion performance.",
  "7ac83625": "Add a write-through cache to the identity store.",
  "a57adcb2": "Remove identity store cache.",
  "0a677318": "Add a write-through cache to the identity store.",
  "2068fa80": "Several sender key performance improvements.",
  "c1317548": "Add a system for locally tracking performance on-device.",
  "615fbf87": "Improve thread update performance by avoiding costly join query.",
  "6eae2d39": "Improve thread update performance by removing need for message count.",
  "55651897": "Fix crash during cache warming for fresh installs.",
  "ae4167dd": "Write to RecipientIdCache on cache miss.",
  "62040d06": "Create a write-through cache for PendingRetryReceiptDatabase.",
  "e47db0d5": "Ensure recipients added to the cache have an identifier.",
  "5f1454ae": "Improve the performance of detecting duplicate messages.",
  "fa26fb6b": "Improve conversation query performance.",
  "c274ed6a": "Improve search performance.",
  "138f9476": "Revert emoji cache to old pattern.",
  "da4be5c1": "Allow recipient cache to refresh inline while in a transaction.",
  "b4ba5659": "Purge view cache when layout direction is changed.",
  "f9289189": "Add foundation for automated performance tests.",
  "80f35040": "Move BlobProvider storage out of cache and into internal storage.",
  "c27300c1": "Add a perf buildType for testing performance improvements.",
  "c3dea978": "Clear view cache properly after configuration change.",
  "221cf56d": "Enqueue cached layout inflation on background thread.",
  "3796ce69": "Clear auth cache on first verification failure.",
  "01375b32": "Don't release bitmaps managed by Glide, and don't cache group preview avatars.",
  "66f26683": "Do not cache locale in each conversation object.",
  "f8a0988e": "Various JobManager performance improvements.",
  "4ea861fe": "Improve 'mark all read' performance.",
  "3fec23fd": "Show remaining time on wave form view and cache wave form in database.",
  "62ac65e4": "Improve paging performance on slower devices.",
  "ed33e048": "Add CachedLayoutInflater to improve conversation render performance.",
  "a510bc74": "Recipient Id cache.",
  "8c6001fa": "Improve correctness and performance of camera contact search.",
  "92e97e61": "Clear cached self id on successful registration.",
  "19c83de5": "Fix possible performance issues with reactions query.",
  "c1e6b6b0": "Add better Loader performance logs.",
  "207dd23c": "Fix performance issue with large number of notifications.",
  "4e6798e3": "Fix occasional double scroll bar on fast scroller.",
  "11127c0d": "Clear external cache upon upgrade.",
  "e09c9910": "Clear Glide disk cache after image deletion.",
  "88d94cad": "Substantially improve Scrubber performance.",
  "e96a02ab": "Fix next/prev message detection with fastRecords.",
  "6c1a1fb9": "Use cache directory on removable storage for backups if present",
  "0b0853a2": "Clear cache on update",
  "95d76638": "Simple encrypted glide disk cache",
  "99a26e2b": "Don't invalidate entire recipient cache when contact data changes",
  "66e1be1a": "Don't invalidate entire recipient cache when contact data changes",
  "3df9112c": "Fix synced sent media messages expiring too fast",
  "e7937fd4": "Cache external address formatter for better performance",
  "a02f223a": "Join recipient preferences into thread query for faster lookup",
  "526d5104": "Start creating 'persistent' blobs in cache directory",
  "e2b81c96": "Update look and feel of fast-scroll-to-bottom",
  "edac0e85": "Fix non-thread-safe operations on canonical id cache",
  "23544fae": "Increase JPEG quality & slow down quality decrease",
  "53e9b2ad": "ignore fast sender clock",
  "4242ae1b": "Resize fast scroller when keyboard is shown",
  "8fb73a09": "Slight optimization for message status updates",
  "d58f4d12": "don't allow fast scrolling until data is available",
  "e51e5cdf": "fail faster in FileNotFoundException case",
  "b55df9e1": "don't cache preference for emoji",
  "f7e34a70": "Don't blow away entire recipient cache on clear event.",
  "58be07f5": "fix checkbox overlap with fastscroll",
  "9c2f14da": "Introduce unique part ID column for better cache accuracy.",
  "dc903e49": "Fix image cache bugs.",
  "f38bd7b1": "fix initialization of emoji cache",
  "a82d2dfc": "Revert 'change out key cached icon to be more unique'",
  "5bfe6475": "Merge pull request #1495 from mcginty/icon-cached",
  "d6d76fa9": "change out key cached icon to be more unique",
  "b860aeff": "Minor ConversationList scrolling optimization.",
  "93c222fe": "Added 'recent emoji' panel as an LRU cache.",
  "50fae643": "Replace LinkedHashMap with a SoftReference LRUCache. Add Slide cache.",
  "6230abb5": "Add synchronized access to cache",
  "2204584d": "Improve locking and performance on asynchronous contact loading.",
  "d991d652": "Fix key cache icon colors on GB."
}, "Signal-Server": {
  "df8fb5c": "Move messages cache stale discard to a separate scheduler",
  "7292a88": "Record table performance metrics around reported messages",
  "41a113e": "Stop queue persistence attempt if items aren’t removed from cache",
  "048e17c": "Use a memoizing supplier instead of a looping thread to cache remote config entries",
  "3bb8e5b": "Set a TTL for `Account` entries in the general cache",
  "d1d6e5c": "Filter stale ephemeral messages from cache",
  "e08c5a4": "Insert ephemeral messages in the standard cache queue",
  "ba522b1": "Clean redis message cache structure",
  "635f669": "Count slow queue drain events by platform.",
  "71510a8": "Decommission the old directory cache.",
  "943a5d1": "Shard push scheduling cache",
  "27534d4": "Log when messages cache detects topology change (#354)",
  "c355ef8": "Reduce the message cache thread pool size.",
  "9e342f2": "Use the same client for inserts and reads in the message cache cluster.",
  "9c53d81": "Use separate clusters for message cache read/write operations.",
  "26870d1": "Set source UUID when delivering envelopes from message cache/db on websocket",
  "a9d0aa1": "Add OS-reported metrics for cached/buffered memory.",
  "551a85c": "Use named variables instead of referring to KEYS/ARGV array indices in message cache scripts.",
  "c7230cc": "Remove messages from the cache in bulk.",
  "6f9ff3b": "Avoid querying the database if we think all new messages are in the cache.",
  "18ecd74": "Entirely discard the old message cache machinery.",
  "81e8143": "Rely solely on the clustered message cache.",
  "1dcc491": "Move cache-mirroring operations to the calling thread.",
  "6aa4acd": "Mirror 'clear queue' operations to the clustered cache.",
  "3b55b2d": "Actually make the 'scour message cache' available to Dropwizard. Oops.",
  "0aa1b80": "Add a command for persisting any detached messages in the old message cache.",
  "2ab42f3": "Refine and expand clustered message cache metrics.",
  "4d03514": "Add a command for clearing the messages cache cluster.",
  "0bc5566": "Mirror delete-after-persist operations to the clustered message cache.",
  "76389bd": "Clear would-be-persisted messages from the cache cluster, but don't store them to the database.",
  "f9f93c7": "Use UUIDs instead of phone numbers as account identifiers in clustered message cache",
  "6fc1b4c": "Add a cluster-backed message cache.",
  "eea073f": "Decommission the old cache.",
  "fc1d88f": "Read exclusively from the cache cluster.",
  "ff2783d": "Fixed a goof where we were mirroring a write to the wrong key in the new cache cluster.",
  "734dc2e": "Don't block the Redis instance when clearing the cache.",
  "7454e55": "Write synchronously to the cache cluster.",
  "c745fe7": "Fix a poorly-mirrored cache delete operation.",
  "7faf143": "Subdivide the account database crawler cache experiment and add logging to track down lingering disagreements.",
  "75cbfa2": "Mirror unlock-via-script calls to the cache cluster.",
  "e032f8d": "Add a command for clearing the cache cluster.",
  "52310b5": "Compare results of reads from old and new Redis caches.",
  "1388103": "Mirror writes to the cache cluster.",
  "20b5f0e": "Reset cache index",
  "1403dbd": "Handle pubsub callbacks from a cached thread pool.",
  "160c0bf": "Switch from Java serialization to JSON for memcache storage."
}, "SimianArmy": {
  "77ab32e": "Use Edda to crawl cloud resources so that we can improve performance and accuracy."
}, "simplify": {
  "ed4c7f6": "Ignore caches directory",
  "70f2486": "Print result and return registers if cached",
  "24ef744": "Minor comment / optimization",
  "c902944": "Add uninit this getClass peephole optimization",
  "9dab7c0": "Implement full program reset if virtual execution or optimization crashes",
  "2b3477e": "Travis is slowly killing me",
  "b2adb68": "Add more memory optimizations for build process",
  "99a1615": "Give optimization output room to breathe",
  "3d1d2a6": "Add minor optimizations, more whitelisted methods",
  "bcf7b84": "Add useless check-cast optimization",
  "651d7b3": "Sort optimization output",
  "a4fbc48": "Print # classes optimized and optimization counts",
  "7b6c044": "Add Method invocation optimization",
  "0a577ef": "Improve optimization",
  "f08fac0": "Improve memory performance",
  "0cd680f": "Fix dead remover optimization pass",
  "0e99677": "Use SparseArray for context registers, 100x faster"
}, "SimplifyReader": {
  "": ""
}, "Skeleton": {
  "": ""
}, "skywalking": {
  "81ec3af": "[Feature] Redis slow log collection (#10825)",
  "13c093f": "Support collecting memory buff/cache metrics in VM monitoring. (#10621)",
  "49594c4": "Bump up Java version to 11 and use junit tag to group IT and slow IT (#10390)",
  "8ca0946": "Fix `time_bucket` of `ServiceTraffic` not set correctly in `slowSql` (#10218)",
  "1082606": "Fix bugs caused by #10085. Metrics w/o time prefix in ID could be missed in the cache. (#10117)",
  "8c31172": "Refactor session cache in MetricsPersistentWorker. (#10084)",
  "1335a48": "apm-checkstyle apm-dist apm-protocol apm-webapp changes codeStyle.xml CONTRIBUTING.md dist-material docker docs HEADER LICENSE lombok.config Makefile mvnw mvnw.cmd NOTICE oap-server oap-server-bom pom.xml README.md skywalking-ui test tools Self-Observability: Add counters for metrics reading from DB or cached. Dashboard:`Metrics Persistent Cache Count`. (#10050)",
  "5df7beb": "Add counters for metrics reading from DB or cached. (#10025)",
  "2fa821d": "Enhance cache mechanism in the metric persistent process (#10021)",
  "59782f6": "Polish virtual cache doc (#9934)",
  "23eeb13": "Polish virtual cache doc (#9932)",
  "fa110f7": "Override cache restore timeout (#9894)",
  "f9db9ba": "Support monitoring PostgreSQL slow SQLs. (#9673)",
  "4e73a30": "Fix inconsistent virtual cache describe between code and scope definitions doc (#9663)",
  "bbe0a7c": "Support analyzing cache related spans to provide metrics and slow commands for cache services from client side. (#9622)",
  "0a85bc4": "Support monitoring MySQL slow SQLs (#9614)",
  "7f371ed": "[Critical] Fix a low performance issue of metrics persistent in ES (#9437)",
  "14800cb": "Optimize elasticsearch query performance by using `_mGet` and physical index name (#9339)",
  "43d6577": "Add more entities for Zipkin to improve performance (#9198)",
  "c5bde6d": "Improve the performance of TermsAggregation (#8959)",
  "c438ef6": "Improve readability and performance (#8855)",
  "e38f25e": "[CI] set up Java explicitly and use the built-in cache mechanism (#8851)",
  "e74adec": "Upgrade maven-wrapper to 3.1.0, maven to 3.8.4 for performance improvements and ARM more native support (#8320)",
  "fc0d0e1": "Message Queue performance and consuming latency monitoring (#7918)",
  "8820287": "Improve okhttp plugin performance by optimizing Class.getDeclaredField(). (#7364)",
  "982001c": "perf: optimize Envoy access log persistence performance (#7290)",
  "156678a": "Move ehcache-2.x plugin as optional (#7236)",
  "f5b7c3e": "Perf: cache metrics id and entity id (#7201)",
  "84a7fe3": "Perf: cache regex pattern and result, optimize string concatenation (#7199)",
  "b8fadec": "fix slow db dynamic config bug (#7192)",
  "de1d046": "perf: trim useless metadata fields in ALS to improve performance (#7191)",
  "e7bc81a": "Perf: optimize Envoy ALS analyzer performance in high traffic load scenario (reduce ~1cpu in ~10k RPS) (#7182)",
  "6e48dca": "Improvement Influxdb query performance (#6066)",
  "8a2a000": "Add `slowTraceSegmentThreshold` to forcibly sample slow traces (#5707)",
  "86ba425": "Add browser performance dashboard. (#5686)",
  "2b737e2": "Embrace the maven cache in the GitHub action. (#5619)",
  "197ef1e": "Improve Es trace basic query performance (#5132)",
  "68ab389": "fix an error when no statement with slowStatement (#5243) (#5245)",
  "89f314c": "Make the column length of slow DB statement having the good default value. (#5238)",
  "ce2469d": "optimization MetricsEsDAO multiGet (#5096)",
  "1817386": "Support cache mode in the agent. (#4858)",
  "4368f82": "[CVE] Update Nacos 1.0.0 to Nacos 1.2.0(Solve the security problem of the old version of fastjson) (#4753)",
  "a2eddd6": "Fix the cache unclear bug. (#4739)",
  "7de392a": "fix cache update timer exception when disable profile in the backend (#4682)",
  "102c90d": "Fix ehcache: format",
  "b2ad634": "Fix ehcache: performance issue",
  "e57176d": "Fix ehcache:  add interceptor for Cache's private constructor and setName method",
  "74c1f7e": "ehcache-2.x-scenario add EhcacheCloneInterceptor case",
  "54c1cd5": "Fix ehcache:  missing interceptor of private constructor called by clone method",
  "75aefd3": "Fix potential concurrent problems and tune performance (#4274)",
  "99100ed": "Split the `collect_http_params` as per plugins for better performance (#4170)",
  "42d422e": "parameterize the cache size. (#3741)",
  "6657e6e": "[test/plugin] fast-fail and reliablity (#3666)",
  "5880417": "Provide plugin for Ehcache 2.x (#3575)",
  "36a3601": "#106 cache/persist page query states (#3406)",
  "f0acf9b": "slow sql long string trim (#3318)",
  "b051f6b": "Log message cached unexpected (#3303)",
  "a71c3ab": "Add cached writer. (#3287)",
  "a0e8167": "Webflux plugin optimization (#3243)",
  "f658d9e": "Simplify the PxxMetrics and ThermodynamicMetrics to improve performance (#3162)",
  "8306ad4": "Reduce the number of threads to improve performance. (#3133)",
  "6338de3": "Improve OAP server performance. (#3127)",
  "c7916d9": "improve ContextManager.stopSpan performance: call ThreadLocal only once (#3068)",
  "7f3ff15": "One more time for heigher performance (#2930)",
  "f414d72": "Rewrite AtomicRangeInteger for higher performance (#2874)",
  "f683850": "Improve plugin performance (#2838)",
  "90fe05b": "Avoid webflux plugin generating many endpoints & optimization http plugin toPath method (#2718)",
  "58cf593": "Improve OAP cluster performance (#2271)",
  "c019535": "Fix mesh telemetry performance issue and adjust default thread number (#2261)",
  "479ee33": "Correct trace id in slow db statement (#2254)",
  "333bcd4": "Provide slow database rule document. (#2253)",
  "69cccd1": "Remove ci cache and remove out-of-date dependency. (#1709)",
  "5e3afe5": "Buffer library performance test and functional test successfully. (#1612)",
  "03af5f1": "Support m2 cache in CI.",
  "3fa77d5": "The core implementation of register and cache for scope inventory.",
  "787c64e": "fix spymemcached plugin can't work (#1354)",
  "cc655e1": "1. Add the performance collection point. (#1041)",
  "eda2d81": "Update span layer and server type by address id when those not equals to the values in cache.",
  "657b1a2": "Merge pull request #747 from apache/ci-from-cache",
  "33616bc": "Merge branch 'master' into ci-from-cache",
  "279ccb2": "Network address register and cache.",
  "be37792": "Change the instance performance entity to instance metric entity.",
  "6435882": "Add cache service manager in worker construction.",
  "27dfc3e": "Use cache service from cache module.",
  "b1e2ebd": "Refactor cache module to provide cache services.",
  "4a77986": "Add cache service",
  "cb7b4e7": "Merge pull request #535 from ascrutae/fix/es-cache-dao-config-issue",
  "dd59580": "Fixed the bugs from the change of cache module created and segment standardizing.",
  "079f53e": "fix redis, memcached and resttemplate plugin woks incorrect",
  "d92b0cd": "Merge pull request #518 from IluckySi/ilucky-skywalking-xmemcached-v2",
  "bdc6dfc": "Merge branch 'master' into ilucky-skywalking-xmemcached-v2",
  "da0b4ca": "Suppor Xmemcached V2.x",
  "a6cd991": "Support XMemcached V2.x",
  "13cf324": "Support XMemcached V2.x",
  "086c5ac": "Refactor code for performance",
  "fb9200a": "Create cache module to provide id or name get. e.g.. application id, instance id, service id…",
  "a2d2f41": "Merge pull request #490 from IluckySi/ilucky-spymemcached-v3",
  "e61cc13": "Support SpyMemcached V2.x",
  "13920ea": "Merge pull request #489 from wu-sheng/revert-481-ilucky-spymemcached",
  "caffba4": "Revert 'Support SpyMemcached V2.x'",
  "57860b9": "Merge pull request #481 from IluckySi/ilucky-spymemcached",
  "02cc6fa": "Merge branch 'master' into ilucky-spymemcached",
  "22deca0": "Support Spymemcached V2.0",
  "1a36dc8": "Support SpyMemcached V2.x",
  "5db8403": "1. Use guava cache to support id name exchange. 2. Add abstract ExchangeWorker to aggregate the data wait to exchange. 3. Once per second, timer call the implementation work of ExchangeWorker to exchange. 4. Exchanged data send to AggregationWorker, the data exchange 10 times but not exchanged, then give up. 5. Just component finish the exchange coding.",
  "e4f56ab": "add Dao container to cache Dao",
  "04fbe18": "Merge pull request #252 from wu-sheng/feature/high-performance-agent",
  "8b22a52": "Merge branch 'feature/high-performance-agent' of https://github.com/wu-sheng/sky-walking into feature/266",
  "3f3d933": "Merge branch 'feature/high-performance-agent' of https://github.com/wu-sheng/sky-walking into feature/high-performance-agent",
  "e36810d": "Merge branch 'feature/high-performance-agent' of https://github.com/wu-sheng/sky-walking into feature/high-performance-agent",
  "6cfea15": "Merge pull request #256 from ascrutae/zhangxin/feature/high-performance-agent",
  "13816c8": "Add “ClassLoader” paramter for enhance method. Prepare for improving interceptor initialization performance.",
  "dd268b2": "Merge branch 'feature/high-performance-agent' of https://github.com/wu-sheng/sky-walking into feature/high-performance-agent",
  "e2c85d9": "Merge pull request #255 from ascrutae/zhangxin/feature/high-performance-agent",
  "1633d1e": "Merge branch 'feature/high-performance-agent' of https://github.com/wu-sheng/sky-walking into feature/high-performance-agent",
  "b3c39ae": "Merge branch 'master' into feature/high-performance-agent",
  "6cd5be9": "Merge branch 'feature/high-performance-agent' of https://github.com/wu-sheng/sky-walking into feature/high-performance-agent",
  "947fed4": "Begin to refactor for performance.",
  "4403183": "Merge pull request #239 from ascrutae/zhangxin/feature/high-performance-agent",
  "cf3d2a4": "Add parts of ignore mechanism, and this is part of new sampling mechanism. All of these are providing higher performance.",
  "f0e626f": "1. Remove the “apm-trace” module, isolate the trace structure between agent and collector for considering performance. 2. Change the head name. 3. Provide potienal mechanism for ignore trace with certain suffix.",
  "8928716": "Revert 'Add new trace segment for improving sampling performance.'",
  "d2fe1b7": "Revert 'Revert 'Add new trace segment for improving sampling performance.''",
  "aaee861": "Revert 'Prepare for improving sampling performance.'",
  "19f2a56": "Prepare for improving sampling performance.",
  "5b853ec": "Revert 'Add new trace segment for improving sampling performance.'",
  "323468f": "Add new trace segment for improving sampling performance.",
  "eb52c38": "Remoe health-report module. Because the HealthCollector is based on ConcurrentHashMap. This triggers a performance issue, when the TPS is very high.( > 500)",
  "2906493": "Refactor code, still have some performance issues.",
  "77f096d": "Using waiting grpc send status, instead of reponse. Avoid performance loss.",
  "9561a50": "use disruptor to replace DataCarrier, to improve performance",
  "aabb247": "fix client batch send performance issue, and test case performance issue."
}, "SlidingMenu": {
  "": ""
}, "SlidingRootNav": {
  "": ""
}, "smali": {
  "8533431": "Check whether we have a next element instead of accessing it and catching the exception. Exceptions are notoriously slow in Java, so we want to avoid that.",
  "c1f2da0": "Improve the performance of the TypeRewriter.rewrite method",
  "f1c1162": "MemoryDataStore: Fail fast on invalid offsets",
  "fd258ad": "Add support for class path entries that look like dalvik-cache entries",
  "7e58d49": "Improve the performance of the IndentingWriter",
  "a70eb74": "Fix performance issue when assembling classes with many static fields",
  "1ad2f50": "The fastIndexOf inline method should be a direct method, not virtual",
  "bba8645": "minor optimizations in ByteArrayInput",
  "6658846": "- Add support for the change in deodexerant where it now dumps all vtable entries, instead of having to query for a specific one - cache the vtable information we get from deodexerant"
}, "Small": {
  "7a51a67": "Ensure the merged application-scope resource has been correctly cached after Android 7.0. Fix #548",
  "b93db05": "feature: 1.better groovy syntax 2.store build-cache file instead of string path 3.try catch reflect filed explodedDir of PrepareLibraryTask",
  "37b4253": "bugfix: 1.gradle-plugin switch exploded-aar folder to build-cache 2.StripAssets lib.*'s jar which has assets resource can package into app.*",
  "7a0e2a6": "Ensure cache the merged resources for current application, fix #429",
  "7d1e16a": "Move bundle.json I/O to thread and improve the performance of preSetUp",
  "bbb58b9": "Hook ActivityThread handler to replace plugin activity info ahead, update the resources cache to ensure each new activity resources is correctly hacked"
}, "small-spring": {
  "37f369c": "Merge pull request #44 from X-Leonidas/optimization20220312"
}, "SmartCropper": {
  "": ""
}, "SmarterStreaming": {
  "a98bdd1": "1. [iOS Player]: Bug fixing; 2. [iOS Player]: Optimized playback performance; 3. [iOS Publisher]: Support local view position settings; 4. [iOS Publisher]: Optimized publisher performance;",
  "ed3681a": "1. [iOS Player]: Bug fixing; 2. [iOS Player]: Optimized playback performance; 3. [iOS Publisher]: Support local view position settings; 4. [iOS Publisher]: Optimized publisher performance;",
  "feb12d5": "Update latest apk for some optimization.",
  "87c40e6": "Update latest apk for some optimization."
}, "SmartTabLayout": {
  "": ""
}, "smartTable": {
  "": ""
}, "SmartTubeNext": {
  "9ff2cf5": "video group: garbage collection optimization",
  "9d41625": "clear apk cache on exit",
  "2e83416": "player: ui performance tweak: upd",
  "8936c6b": "player: ui performance tweak",
  "8aee6b1": "sb: cached data fix",
  "604aebf": "clear cache on app update",
  "e911665": "player: seekbar refactor + disable preview cache",
  "dbe6ccf": "app: don't clear cache on exit",
  "420b88d": "[PATCH] SegmentDownloader: capture and rethrow cache exceptions",
  "1511002": "[PATCH] Reassign segment cache key in order to support parallel downloads",
  "c6c63a7": "player: seek preview optimizations",
  "56c125f": "vide menu: improve performance",
  "ef210bc": "mediaItem duration optimization",
  "dd1d217": "revert cached display metrics",
  "047dc31": "remove cached display metrics",
  "5ad0f77": "slow carousel fix",
  "d320871": "general settings: optimizations",
  "fd05a87": "small settings optimizations",
  "80755c2": "huge settings optimizations",
  "1f0fe81": "start refresh cache periodic task + refactor",
  "2522ad5": "add fast unsubscribe",
  "24b3986": "glide: disable cache",
  "0fdb9cf": "add disk cache size to debug info",
  "eb271e7": "glide: disable cache",
  "136751b": "glide: enable cache",
  "3c1bda9": "glide cache refactor",
  "34194d8": "improve cache cleanup on exit",
  "7bf593a": "player: implement fast seeking for videos with storyboard (indexed thumbnails)",
  "999c810": "playlist optimization"
}, "smile": {
  "7f2dfc7": "optimize JVM performance",
  "cb99606": "minor code optimization",
  "53afdba": "use simple LinearSearch as it is faster on many core systems",
  "74919ed": "optimize sampling performance",
  "52ab395": "simpler and faster kernel cache. more memory usage though",
  "937ef35": "fix kernel cache",
  "148320f": "use IntArrayList and DoubleArrayList in SparseArray for better performance",
  "9950043": "remove unnecessary init and make for loop faster by split",
  "63af1ec": "partial dereference of multidimensional array for better performance",
  "05f834f": "performance tuning for ColumnMajorMatrix and NDMatrix"
}, "SmoothProgressBar": {
  "": ""
}, "socket.io-client-java": {
  "": ""
}, "sodium-fabric": {
  "5e97922": "Merge pull request #1672 from PepperCode1/pr/1.19.3/restore-optimization",
  "e0a3fd1": "Restore VertexConsumer.quad optimization",
  "867a713": "Greatly improved the performance of biome color blending",
  "6d89b94": "Avoid slow texel accesses in texture processing during startup[",
  "1243e9c": "Many micro-optimizations and attempts to prevent regressions",
  "b13722c": "Use faster matrix rotation setup in entity rendering",
  "be1c74b": "Fix up remaining issues with vertex consumer optimizations",
  "b0d83bc": "Remove particle culling 'optimization'",
  "c5577ff": "Use faster sort code for immediate mode geometry",
  "649f64a": "Micro-optimizations for immediate item/block rendering",
  "bee047e": "new: clouds-depth shader to improve performance of depth pass",
  "7883309": "new: Cloud rendering optimizations",
  "c1f71f7": "change: Improvements and optimizations for block color blending",
  "843b0f0": "new: Cull the inside faces of leaf blocks when using fast graphics (#810)",
  "424a8f8": "change: Inline getChunkOffset() to improve performance with legacy AMD drivers",
  "5226295": "change: Adjust advanced optimization settings",
  "446a6cc": "fix: Compare current and modified option values using equals() The current and modified option values in the Sodium options need to be compared to see if the value is changed or not. Previously, this was done using the == operator. However, since the current and modified options are wrapper types, it will compare them as references, making them inequal when their values are the same. This issue does not happen in a majority of the Sodium options, since Java may cache the objects as values. To solve this issue, the current and modified options can be compared using equals(), which will compare by value instead.",
  "19ee2f0": "new: Port old loading screen optimizations from Lithium (#529)",
  "2734771": "buffer_builder/fast_advance: Fix using a fixed color (#474)",
  "cb2c905": "new: Add optimizations for box line rendering",
  "6e39532": "new: Add additional optimizations for item and block entity rendering",
  "964dca4": "new: Add optimizations for vertex buffer sorting",
  "647d213": "new: Debug hud and text rendering optimizations",
  "7e1e8ce": "change: Optimize render list iteration through improving cache locality",
  "d669609": "change: Use fast collection types for dirty chunk queueing",
  "3507696": "change: Avoid hash table lookups for block occlusion fast culling in simple cases",
  "3e70153": "new: Use fast block quad copying when building chunk meshes",
  "55ff9a5": "fix: Do not schedule air sections for rendering, take fast-path",
  "cc9df2d": "fix: Use feature detection to prevent enabling of unsupported optimizations",
  "be07510": "new: Implement new shader backend, render layer consolidation, and buffer storage optimizations",
  "4ed9758": "new: Allow different light cache implementations, use hashing for entity rendering",
  "0a235fe": "fix: Use atomic operations in the biome cache",
  "fcfccc3": "new: Include optimizations for particle rendering",
  "d7e9237": "new: Implement optimized colorization cache for chunk meshing",
  "3076562": "new: Implement additional optimizations for matrix uploading",
  "2d07207": "Implement faster vertex write method for VertexBuffer",
  "457adf3": "Add patches to improve performance of MatrixStack operations",
  "b759903": "Add patches to improve performance of Mojmath"
}, "sofa-boot": {
  "03c6f39": "Merge branch 'master' of https://github.com/sofastack/sofa-boot into master",
  "422c061": "Merge branch 'master' of https://github.com/sofastack/sofa-boot into master",
  "9e02f07": "Merge branch 'master' of https://github.com/sofastack/sofa-boot into master",
  "fce6d78": "Merge branch 'master' of https://github.com/sofastack/sofa-boot into master",
  "2ccdb95": "Merge branch 'master' of https://github.com/sofastack/sofa-boot into master",
  "b3770f2": "Add dynamic JVM service invoking cache (#876)",
  "7d59ebc": "Merge pull request #1 from sofastack/master (#685)",
  "759b738": "update fastjson to 1.2.69 (#666)",
  "7c2ef0c": "Migrate samples to sofastack-guides space. (#505)",
  "a80cc5e": "Upgrade fastjson and jackson (#495)",
  "fc2e2d9": "Using jackson instead of fastjson. (#122)",
  "6645da1": "code optimization, #66 (#82)",
  "f4d9162": "Remove sofastack from readme (#42)",
  "b5645e4": "update fastjson because 1.2.48 is not in central repo"
}, "sofa-jarslink": {
  "de8d7c2": "Merge pull request #124 from sofastack/ujjboy-patch-1",
  "3c444f2": "Transfer from alipay to sofastack."
}, "sofa-jraft": {
  "c5f11a6": "update com.fasterxml.jackson.core:jackson-databind 2.10.5.1 to 2.12.6.1 (#892)",
  "4f02797": "Support a config to make read index read failfast. (#738)",
  "4f9f779": "fail-fast on connection fail (#586)",
  "0afdb00": "solve PeerId cached toString result incorrect problem. Fixes gh-393 (#394)",
  "16cfe35": "[ISSUE#347]upgrade the com.fasterxml.jackson.core:jackson-databind to version 2.9.10.1. (#352)",
  "38cdd7e": "feat/by sofastack (#157)"
}, "sofa-rpc": {
  "8b6b7c7": "fix getDeserializerForCustomThrowable performance (#1288)",
  "169016c": "enbale mvn cache to speed up workflow (#1236)",
  "e8c00d5": "Clean reflect cache (#715)",
  "733c473": "Clean cache. (#714)",
  "2386a86": "Load local file into cache in LocalRegistry (#420)",
  "6bda979": "Change document url from wiki to sofastack.tech. (#230)",
  "d725217": "Aggregate caches for better cache management. (#106)"
}, "SoloPi": {
  "a68b923": "fix function show failure, fix performance record gbk",
  "d6fcd2f": "handle battery optimization",
  "70d2a34": "upgrade fastjson version"
}, "sonarqube": {
  "db71ccc5": "SONAR-19084 Fail fast if the GitHub App has not the expected permissions",
  "824e1af5": "SONAR-19005 Bump com.fasterxml.jackson:jackson-bom to 2.14.2",
  "0de4d123": "SONAR-18662 Improve performance of group membership updates",
  "ac52dfa0": "[NO-JIRA] optimize slow selectProjectUuidsAssociatedToDefaultQualityProfileByLanguage",
  "bec5515e": "SONAR-18565 - Improve IssueIndexer performance to use markAsUnchanged flag",
  "7905ff73": "SONAR-18472 Resolve telemetry performance issue",
  "ba579343": "SONAR-18168 Improve Python and Java DBD analysis: better cache management on PR analysis",
  "c8ec9a5b": "SONAR-18196 Improve PHP analysis: better cache management on PR analysis",
  "3349adc8": "SONAR-18201 Improve Python analysis: better cache management on PR analysis",
  "e17e32e9": "SONAR-18205 Make web service 'analysis_cache/get' public",
  "8b2213ef": "SONAR-18174 Analyzer cache should be kept in the file system to decrease memory use",
  "cdd07f91": "[NO JIRA] Update com.fasterxml.jackson:jackson-bom to 2.14.1",
  "dd822542": "SONAR-17604 cache all jar from build",
  "84dfd8b5": "SONAR-17532 fix low-performance issues with portfolios overview",
  "288086bb": "SONAR-17444 Analyzers's cache should expire after 7 days",
  "596bd1fa": "SONAR-17477 Analyzer cache not purged when branch is deleted",
  "3a8bae6a": "SONAR-17443 clear cache of a project or a branch",
  "a8fdb0fc": "SONAR-17337 Scanner download of analyzer cache doesn't handle compression correctly",
  "0a9bb9c7": "SONAR-17093 - Improve pull endpoints performance",
  "a283bf89": "[NO-JIRA] Ignore `install-state.gz` yarn optimization file",
  "d4b2fae9": "SONAR-16239 Log analysis cache download",
  "0abfd426": "[NO JIRA] Make frontend test execute faster using SWC",
  "a2b4550c": "SONAR-16187 Analysis cache gets cache from different branch when needed",
  "eb34454a": "SONAR-16096 Create webservices to get and clear scanner plugin cache",
  "ecf844b3": "SONAR-16097 Add plugin cache to the Sensor API",
  "1269984e": "SONAR-16115 Store plugin's scanner cache in SonarQube",
  "de1309d1": "[NO JIRA] Improve validate-ci cache management",
  "4d305adf": "[NO-JIRA] Improve git clone performance",
  "57c9b516": "BUILD-1202 Add gradle cache in cirrus cache",
  "e2faf2d8": "SONAR-15507 added new property sonar.updatecenter.cache.ttl",
  "0519eb3a": "Make yarn use the global cache only",
  "6847a3b6": "Fix issues with yarn install parallelization when no cache are available",
  "aeae9f86": "Add yarn cache to global caching",
  "bc4d1696": "SONAR-15237 Improve startup performance of the web process",
  "c0a07bac": "SONAR-14870 DNS cache never expires causing PR decoration to fail",
  "2fb8b360": "SONAR-14870 DNS cache never expires causing PR decoration to fail",
  "150e756b": "SONAR-14831 include only the used part of fasterxml.jackson.dataformat (protobuf) (#4133)",
  "e0a058d7": "SONAR-14681 improve project_measures metric purge performance",
  "b26ae4c3": "SONAR-14681 improve live_measures metric purge performance",
  "3c1a38e9": "Refactor BranchPersister to use cached project configuration",
  "b02d849f": "BUILD-894 Cache node_modules for faster execution times",
  "aed88b25": "Add global gradle settings to increase performance",
  "8ab6570b": "Use build-in Cirrus CI HTTP cache for gradle build cache.",
  "64f415e8": "[BUILD] removed nvd cache from owasp task",
  "5ca7a4f8": "SONAR-13793 improve ncloc count performance by using projects instead of components",
  "59adbb84": "Fix cache of MyBatis configuration extensions in unit tests",
  "04331614": "SONAR-12928 Persistence of live measures is a performance hotspot on Oracle and SQLServer",
  "d961c0a4": "SONAR-13093 Optimize cache of issues in Compute Engine",
  "50477b4d": "SONAR-12893 Disable password check in QA to make it faster",
  "4eb7a56f": "SONAR-12717 small computation optimization in SecurityStandards",
  "33651825": "SONAR-12258 Don't use cache on DocsVersions.json",
  "129ab9d7": "SONAR-7318 Fail fast when more than one Language is declared with a specific key",
  "0b3dcbf2": "SONAR-10408 Web service api/qualityprofiles/copy is too slow",
  "be564cac": "full drop usage of cirrus cache",
  "4a67f164": "disable gradle cache until Cirrus issue #478 is fixed (#2123)",
  "f789ba6e": "Revert 'disable gradle cache until Cirrus issue #472 is fixed'",
  "614259b4": "disable gradle cache until Cirrus issue #472 is fixed",
  "e28df109": "cache regex pattern",
  "65c7e3f5": "fix documented docker build command line and make it run fast",
  "37d0cb27": "Small performance improvement on documentation search",
  "94f63221": "Gradle cache key for 'test' tasks should not depend on build number",
  "d8d26012": "Use Artifactory for Gradle remote cache (#1628)",
  "c24973e3": "Enable Gradle cache for 'yarn_validate-ci' tasks (#1616)",
  "a16c34cb": "Since Gradle 5.0 JaCoCo plugin works with the build cache and parallel test execution",
  "b4f692f2": "Enable Gradle cache by default",
  "bd12d0fa": "Apply the Cirrus guidelines about Gradle cache",
  "137d3156": "Cirrus - Use new cluster with HDD nodes (no loss of performances)",
  "49adc787": "Delete .gradletasknamecache",
  "27f28caa": "Drop performance tests",
  "bcf76ab7": "Fix Gradle cache of sonar-web",
  "8442693d": "Do not cache Gradle daemon temp files",
  "4d07af93": "Improve documentation of performance tests in .cirrus.yml",
  "411fd8ef": "SONAR-11151 Only cache new lines from the report",
  "8c5d6f1a": "Make build of sonar-docs cacheable",
  "52a35ad3": "Improve performance SonarLint",
  "8cadf539": "Fix performance hotspot sonarlint",
  "9973bacb": "SONAR-10860 Make sonar-web cacheable with sonar-docs",
  "03692a7d": "SONAR-10283 Fail fast at startup when a language is missing a default built in quality profile",
  "3c04430c": "SONAR-10674 Fix max ages caches for plugins static resources",
  "daffaa48": "SONAR-10674 Update cache policy for js, css and images path files",
  "9552d581": "Make sonar-plugin-api-deps:shadowJar task cacheable",
  "18f6091b": "Make yarn_run tasks cacheable",
  "7275c439": "SONAR-10505 CE processes analysis report slowly when millions of issues",
  "b6a8ce03": "SONAR-10311 fix RuleDefinitionDto#setRuleKey not reseting cached ruleKey",
  "953dac0d": "SONAR-10313 Small code optimization",
  "8d3f85ca": "SONAR-10210 Fix performance hotspot in DB migration #1267",
  "48feb5a6": "SONAR-8967 Fail fast when trying to analyse a module",
  "912be3d9": "invalidate browser cache for logo",
  "dffcdc3f": "SONAR-7024 SQL optimization if multiple channels when checking permission",
  "dbdc9b86": "Adjust performance tests expected timings",
  "4b037992": "Adjust performance test timings",
  "51d27511": "Adjusting performance tests expectations",
  "cfce7692": "SONAR-9608 Fix some racing condition bug when clicking fast on the sidebar",
  "a4faca19": "SONAR-8798 make startup time performance test accept 34s (due to ES5)",
  "81a6eef4": "SONAR-8785 cache DbSession in ThreadLocals for HTTP requests",
  "7b14a735": "Do not override version of scanner in performance tests",
  "764185d9": "SONAR-9427 Improve performance on quality profile changelog",
  "91a64d83": "SONAR-9191 cache rule in RuleFinder during startup",
  "c9e073de": "integration tests: avoid false positive, if tests are executed very fast",
  "3742bff5": "Display about page faster",
  "e1c241af": "SONAR-8596 Fix a bug with cached bundles",
  "133d5af9": "SONAR-9186 fix performance hotspot when verifying authorization",
  "affd68df": "Disable DEBUG logs in performance test ComputationTest",
  "ba96db96": "SONAR-6315 cache rules and query active rules per profile",
  "53c6f5d9": "SONAR-6315 cache list of children of quality profiles",
  "9c893918": "set embedded database timeout to 30s for slow build machines",
  "4bc76a45": "SONAR-8831 increase performance of bulk issue storage",
  "aaafa6a2": "SONAR-8772 fix cache of non-granted permissions",
  "35485c87": "SONAR-7305 Improve performances of WS api/measures/search_history",
  "a2274824": "Use local SonarQube ZIP in performance and upgrade tests",
  "28bf1b05": "Use local SonarQube ZIP in performance and upgrade tests",
  "f98def2c": "Slight performance improvement in api/rules/tags",
  "2dddcd9b": "Slight performance improvement in api/rules/tags",
  "a8c470bc": "Improve reliability of RestartTest as Oracle init is slow",
  "ab31b7a5": "SONAR-8332 allow faster UUID generation with increment only change",
  "fcdefb9e": "Improve stability of ProcessUtilsTest on slow box",
  "3e176399": "disable eslint loader on fast build",
  "85bd0e60": "SONAR-8325 Improve MeasureDao#selectByQuery performance",
  "5e3e8bd5": "Exclude performance / windows jobs execution on MySQL",
  "601e3acd": "change MyBatis session cache to statement cache",
  "d7a1e092": "fixing quality flaws (mostly Java NIO slow methods usage)",
  "3f521552": "SONAR-8079 drop cache RuleRepositories",
  "af161f57": "[travis] remove resolver-status.properties to avoid cache invalidation",
  "7d2a86f2": "Delete unused org.sonar.home.cache.DeleteFileOnCloseInputStream",
  "dd7ca50b": "Fix performance issue in CE when many files have being deleted/moved",
  "d6f3a708": "Fix performance issue in CE when many files have being deleted/moved",
  "f2a4cc09": "Add JDK8 to Travis cache",
  "90f751a8": "Improve stability of ProcessUtilsTest on slow env",
  "a2ca041d": "Fix perf tests without WS cache and non connected mode",
  "a2804298": "SONAR-7124 Concurrent access to WS cache allowed",
  "63e3178d": "Remove performance test IssuesModeBigTest",
  "937e748c": "SONAR-7260 Fail fast if version of database is not supported",
  "c287097d": "Fix timings in performance tests due to hardware/OS change",
  "cef56702": "No need to take into account personId in measure cache (devcockpit moved to CE)",
  "1792451e": "Fix parsing of maven logs in performance tests",
  "f919b1ca": "Fix pom of performance tests",
  "887469d2": "SONAR-6397 don't call both containsKey and get when data is in cache",
  "8bdca11a": "drop z-index optimization (fixes issue with overalpped global search)",
  "a247cdab": "SONAR-7130 faster purge: single SQL query for all PRJ children",
  "6a13e5f6": "SONAR-7141 Fail fast if server started with Java 1.6",
  "287fbc9a": "SONAR-7100 Disable WS cache by default in issues mode",
  "ef483f44": "SONAR-7088 faster consumption of pending tasks in CE",
  "afb14c60": "reorder travis jobs for faster build",
  "b073a172": "Improve javadoc and randomness of fast uid generation",
  "b34b9848": "Revert 'do not cache node_modules in travis'",
  "910e7314": "do not cache node_modules in travis",
  "1a8a6d5c": "SONAR-6397 Use a cache when reading SCM info to reduce db calls",
  "40b5a093": "SONAR-6879 Don't delete cache if update fails and change strategy",
  "943e74fd": "Decouple cache invalidation criteria",
  "3badd476": "Change global cache strategy",
  "98e189c6": "Remove optimization on updated at",
  "9ee1c1e3": "Dont use server version in global cache keys",
  "0847774d": "SONAR-6777 Project cache sync",
  "069f75fe": "improve batch logging and performance",
  "4621782b": "Trying a better cache cleaning mechanism",
  "3fb22d77": "Fail fast on cache write error",
  "4cb2a976": "Improve file hashing performance",
  "17a844cc": "object instantiation optimization in VisitorsCrawler",
  "91c3bee0": "SONAR-6777 Project cache sync",
  "3be4a0c5": "SONAR-6777 Project cache sync",
  "3dfd8812": "SONAR-6776 Global cache sync",
  "da0e7d2e": "SONAR-6777 Project cache sync",
  "334d5914": "Fix WS persistent cache",
  "d5f10d28": "SONAR-6770 Improve logging of cache usage",
  "f0a1c302": "SONAR-6723 Use SQ version in cache keys",
  "cb839206": "Adjust performance timing due to new environment",
  "d7a4e565": "SONAR-6700 fix undeleted computation working dir and cache files",
  "e56cdd21": "It's not faster and might cause flakiness",
  "24c73130": "cache npm dependencies on travis",
  "a3f2f427": "SONAR-6649 Move initialization of persistit cache to global context",
  "12a57c66": "SONAR-6649 Move initialization of persistit cache to global context",
  "d2b14670": "SONAR-6649 Move initialization of persistit caches to global context",
  "eba86f1a": "SONAR-6649 Move initialization of persistit caches to global context",
  "8714a329": "now fully cache measures from batch in MeasureRepository",
  "c6af5401": "SONAR-6610 invalidate ruby metric cache when creating/updating/deleting a metric",
  "51424a1e": "Merge pull request #359 from SonarSource/disable_cache_by_default",
  "c77ed68f": "improve cache logging",
  "bd576ce7": "Fix performance issue because the report was in memory, now the report is read from the disk",
  "58b0f0cc": "Active fast grunt build in dev mode",
  "db30e4ec": "SONAR-6259 Use component caches to get id or uuid",
  "3aac5f8c": "faster grunt build",
  "cf172b28": "SONAR-6258 Add performance test on file sources persistence",
  "9e7c5906": "Adjust performance tests",
  "c0f002c5": "Issue/sourceline indexing is faster - adjust timeouts",
  "e67fec2e": "improve significantly memore consumption while using a disk cache",
  "cacae476": "remove extra logging of web tests, do not fail fast during analysis",
  "d6db2a34": "Merge pull request #147 from SonarSource/feature/faster-web-test",
  "048f2d4f": "Use default 8% for error margin of performance tests",
  "d09c8de8": "SONAR-6229 improve performance of ES indexing at startup",
  "6e65f86a": "Increase reliability of ProgressLoggerTest on slow machines",
  "ad0ce9f3": "Increase reliability of ProgressLoggerTest on slow machines",
  "639b2991": "Adjust performance test",
  "7e89ccd4": "Revert upgrade to Elasticsearch 1.4.4 as it seems to have performance regressions",
  "9fb6901e": "Merge pull request #112 from SonarSource/feature/fast_grunt",
  "095ff251": "Merge pull request #108 from SonarSource/feature/web/fast_tests",
  "c653538e": "SONAR-6000 Truncate duplication data to avoid exceeding persistit cache max size",
  "ad484939": "Used SortedMap as cache for FS to have consistent order in FS queries",
  "e9b5effe": "SONAR-6134, SONAR-6048 Improve performance of FS indexation",
  "9fb2ca6c": "SONAR-6068 Improve performance of FileSystem query operation",
  "83358971": "SONAR-6089 Only clear lookup cache of current View",
  "a8b9d06b": "SONAR-6089 Clear views cache when indexing views",
  "3601d3a2": "SONAR-6089 Only clear lookup cache of current View",
  "8f1b67ef": "SONAR-6089 Clear views cache when indexing views",
  "247fac81": "Disable ES cache on date-related filters",
  "967e8c20": "SONAR-6129 Browser cache must be forcibly reset at each new version of SonarQube",
  "1a967d04": "SONAR-6115 SonarQube is slower whilst running with Java8 vs Java7",
  "69a9025b": "SONAR-6115 SonarQube is slower whilst running with Java8 vs Java7",
  "1916caf2": "Improve performance of ES request on users",
  "1899835d": "Experimental optimization for truncate on Oracle",
  "9c021989": "Minor optimization in NotificationQueueDao",
  "37bc3798": "SONAR-5912 improve IssuesBySeverity performance and memory consumption",
  "f6176a48": "SONAR-5820 Improve performance",
  "4b7fab38": "Invalidate browser cache for issues app",
  "6aeb3e25": "Minor optimization in SourceLineResultSetIterator",
  "65439223": "Invalidate browser cache during web tests",
  "221a8ea2": "SONAR-5935 Move management of tags one class higher, handle network slowness/errors",
  "357f8f85": "Fix server-test-benchmarks assertions because of Lucene optimizations",
  "2ad3462a": "Remove test in SearchServerTest because of too many false-positives on slow windows environment",
  "3dc60a71": "Increase timeout of ProgressLoggerTest for slow boxes",
  "7b69c0f9": "Revert previous commit to have faster build",
  "7aa79a9d": "End of CI error investigations - creation of ES indices was not synchronous, so failed on slow boxes",
  "e94e094f": "SONAR-5868 Improve performances of fs indexation",
  "ff0096e6": "Add counter on issues performance tests",
  "796f0b1e": "Attempt to increase stability of StopperThreadTest on slow boxes",
  "2bdf27e7": "Increase stability of MonitorTest on slow boxes",
  "d8d5c8fd": "SONAR-5806 Invalidate database preview cache after snapshot switch on the server side",
  "7c6bdb3f": "Fix issue tracking regression after last optimizations",
  "d00874c6": "SONAR-5375 Minor optimization to remove all issues once for a given component",
  "cf5c90b9": "Increase timeout of SearchServerTest for (very) slow boxes",
  "b7023ff7": "Increase timeout of MonitorTest for (very) slow boxes",
  "fa2c2080": "SONAR-5564 - Added performance metric in SystemInfo",
  "94d7c17a": "SONAR-5564 - Added performance metric in NodeHealth",
  "ccd6cbaa": "Increase stability of NotificationServiceTest on slow boxes",
  "4b8c7909": "try to increase sleep period for slow boxes",
  "c84e6f8d": "SONAR-4898 improve stability of WatcherThreadTest on slow machines",
  "69459357": "SONAR-4898 improve stability of WatcherThreadTest on slow machines",
  "c20b2f51": "Improve performance of jacoco on sonar-server",
  "cd5e247d": "SONAR-5528 One more optimization for highlighting API -> don't hit value cache",
  "20ae7f5d": "SONAR-5528 Improve performance of persistit serialization for highlighting",
  "1cf7fa35": "SONAR-5528 Improve performance of syntax highlighting API",
  "8e32f1ab": "Updated indexQueue mechanism for performance (no compression yet).",
  "c31f7f2a": "improved test performances for sq #3 (use MetaDataHandler for MySQL)",
  "13e34d15": "improved test performances for sq #3 (use MetaDataHandler for MySQL)",
  "550dcbf9": "improved test performances for sq #2 (use sonar.jdbc.schema property to explicit schema for DBUnit)",
  "66642522": "improved test performances for sq (reuse iConnection in DBUnits)",
  "68431a3d": "improved test performances for sq (reuse iConnection in DBUnits)",
  "564e06f0": "SONAR-5334 Fix l10n cache issue (304 passing as done)",
  "e7e0038a": "SONAR-5334 Fix l10n cache issue (304 passing as done)",
  "34307c05": "SONAR-5334 Fix performance issue with localStorage on Safari",
  "16e9a197": "SONAR-5209 Issues performance",
  "bb2bf8a0": "Improve performance of creation of preview H2 DB.",
  "79ba8fae": "SONAR-5403 Migrations that convert technical debt from hours to minutes are too slow",
  "f3ce6988": "Try to improve performance of MeasurePersister",
  "c5206498": "SONAR-5331 Invalidate browser cache",
  "e35c7a6d": "SONAR-5007 clear preview cache on rule changes",
  "bd725eaf": "SONAR-5334 Implement l10n cache control mechanism on client side",
  "373adc53": "SONAR-5334 Implement l10n cache control mechanism on server side",
  "b6dd66d8": "SONAR-5007 flush previewDb cache when a rule is deactivated",
  "7e9af498": "SONAR-5007 clear preview-db cache on qprofile changes",
  "12077a64": "SONAR-5189 Reintroduce a memory cache for measure in decorators",
  "a59b6b9e": "Revert 'SONAR-5189 Reintroduce a memory cache for measure in decorators'",
  "c70e47fb": "SONAR-5189 Reintroduce a memory cache for measure in decorators",
  "cc071cc2": "SONAR-3437 Fix use of persistit with 3-Tuple keys. This allow to restore optimization of loading of measures.",
  "171cd79c": "SONAR-3437, SONAR-5189 Store measures in a persistit cache",
  "7b301db8": "Revert 'SONAR-3437, SONAR-5189 Store measures in a persistit cache'",
  "25d72e70": "SONAR-5189 Fix regression when searching measures in cache",
  "46395126": "SONAR-3437, SONAR-5189 Store measures in a persistit cache",
  "a1a322d1": "Minor optimization in CountUnresolvedIssuesDecorator",
  "6cb2618d": "Fix performance bug on the issues page",
  "6fad9a86": "SONAR-5141 Improve performance of technical debt measures decorator",
  "d82ef451": "SONAR-5056 Fix performance issue when converting new rule to old rule",
  "7e47d544": "SONAR-5139 Loading the issues of a given file is slow on Oracle",
  "3e934474": "SONAR-926 improve performance of db migration 490_migrate_package_keys",
  "4113f6b3": "SONAR-4996 Improve Java migrations performance",
  "b024967c": "SONAR-926 Optimize computation of file inclusion/exclusion build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config only browse FS once for both MAIN and TEST build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config put patterns in cache build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config don't build InputFile if file is excluded",
  "3f8e4526": "SONAR-926 increase performance of DefaultSensorContext#logWarning()",
  "389c7c75": "New Issues Page: fix performance issue",
  "9b0c99c8": "SONAR-4994 Webapp is slow when using Oracle DB",
  "25fbc170": "SONAR-4830 Extract plugin dependencies in the cache",
  "8aa56b45": "Remove false-positives of DefaultSystemClientTest on slow boxes",
  "c3eb47f2": "Change logging level for dry run cache",
  "cdfcc9f9": "SONAR-4602 Fix concurrent access issues with dryRun cache",
  "ce7a0f35": "SONAR-4602 Evict dryRun cache on profile restore",
  "80cef0e2": "SONAR-4602 Evict dry run cache for additional cases",
  "a091060b": "SONAR-4602 Evict dryRun cache when changing issues",
  "609bb9ad": "SONAR-4602 Evict dryRun cache when a new snapshot is available",
  "72dd489e": "SONAR-4602 Invalidate dryRun cache when changing quality profiles",
  "d3fad486": "SONAR-4602 Revert eviction of dryRun cache on settings change as it is not needed",
  "da48c008": "SONAR-4602 Disable dryRun cache until problems are fixed",
  "b5959766": "SONAR-4602 Invalidate dryRun cache when restoring settings",
  "541311a3": "SONAR-4602 Invalidate dryRun cache when changing settings",
  "6c6dc197": "SONAR-4602 Put dryRun DBs in a cache",
  "274ba091": "SONAR-4518 Improve performance of rule removal during server startup",
  "08a18e07": "SONAR-4524 Create notifications using batch insert to improve performances",
  "ea6fa01e": "SONAR-4529 Add index on created_at column of notifications table to improve notifications performance",
  "425271d5": "Fix quality flaw and increase timeout of EmbeddedDatabaseTest for slow boxes",
  "c7ac7ab2": "Improve performance of TestDatabase",
  "11c9d4f6": "SONAR-4321 Fix performance issue on Issues search SQL",
  "7ad750aa": "SONAR-3755 Fix big performance issue on selectChildrenComponentIds query (cherry picked from commit 4bbc914)",
  "bd4bc470": "SONAR-3755 Fix big performance issue on selectChildrenComponentIds query (cherry picked from commit 414edae)",
  "e534ce92": "SONAR-4368 Highly improve performance of the project deletion operation",
  "22cf40f4": "SONAR-3755 Fix performance issue in selectNonClosedIssuesByModule query",
  "4ad3ba86": "Fix cache of libraries",
  "07d0afa8": "SONAR-4301 Improve performance when searching component children ids from specified component keys",
  "2ec0ce98": "SONAR-3755 fix performance issue when loading transitions",
  "cb4fd333": "SONAR-3755 use persistent cache",
  "a4061d9d": "SONAR-3755 Issue finder optimization",
  "94349f41": "SONAR-3893 Further memory usage optimization",
  "922923e7": "SONAR-3893 Fixed snapshot source and data querying for better performance",
  "c0ccd41e": "SONAR-4140 fix performance of /api/batch_bootstrap/properties",
  "9cfa4065": "Do not cache file exclusions",
  "941756e4": "SONAR-2291 improve warning when temp folder and user cache are not on the same hard drive",
  "7c10d83b": "SONAR-2291 fix instability regression when temp dir is not in the same drive partition than cache",
  "be08b3ca": "SONAR-2291 fix performance issue when computing file hashes",
  "7bf52372": "SONAR-2291 move management of file cache to the new module sonar-home",
  "a9203f47": "SONAR-2291 Implement cache for JDBC driver",
  "b159d968": "SONAR-2291 Minor changes on cache build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config default cache folder is ~/.sonar/cache build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config fail execution when there is a checksum mismatch build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config improve logging",
  "9f3de2ad": "SONAR-2291 Don't extract plugins in the cache folder but instead extract them in a temporary location.",
  "ee10ce22": "SONAR-2291 Implement caching of downloaded Sonar plugins. build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config By default cache location is ~/.sonar/.cache build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config Cache location can be changed by property sonar.cacheLocation build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config To know if a plugin file have to be downloaded there is a checksum (MD5) comparison",
  "6cdb0c5c": "SONAR-4078 fix performance issue on oracle when verifying user permissions",
  "189a12a0": "SONAR-3825 improve performance of SQL request",
  "33b7e9aa": "SONAR-3621 fix performance issue of measure filters using favourites",
  "ad7276f7": "Fix performance of profile console",
  "c33db9ce": "Revert 'SONAR-3778 Bad performances when Hibernate requests measures on quality models'",
  "50004059": "SONAR-3778 Bad performances when Hibernate requests measures on quality models",
  "672f3443": "Improve slow profile page",
  "6006c366": "SONAR-3617 Improve performance of treemap filters",
  "8b1a5703": "Reuse database for faster unit tests",
  "b7fb648b": "SONAR-1608 Add index on projects.root_id for better performances",
  "7289e004": "SONAR-3537 Improve performances of the treemap filter",
  "03a73621": "SONAR-3537 Improve performances of the treemap filter",
  "b0cd79dd": "Minor performance improvement on the management page of group roles",
  "82676715": "Fix performance issues when processing reviews",
  "d13d8826": "Fix loading of file exclusions - do not cache exclusions in Project",
  "a28fe51a": "Fix loading of file exclusions - do not cache exclusions in Project",
  "d370ff3d": "SONAR-2962 Add an index on dependencies.project_snapshot_id to improve performance",
  "829a11b6": "SONAR-1928 Improve performances by splitting the SQL query in 2",
  "32f3ad3a": "Minor optimization of sidebar",
  "6b0cc083": "SONAR-75 implement negative cache of rule descriptions",
  "17aeea97": "SONAR-75 Add cache of rule descriptions",
  "a66c02e1": "Improve the test CommandExecutorTest#shouldStopWithTimeout for slow boxes",
  "14df43a6": "Increase timeout of CommandExecutorTest for slow boxes",
  "86d1d2ab": "Improve IT in order to better support performance issues",
  "84b7c5e1": "Do not keep DSM measure in cache",
  "00a21e0a": "Do not keep DSM measure in cache",
  "7dcedeab": "SONAR-2037 The index on 'measure_data.snapshot_id' is needed for DB performance",
  "c3e3df59": "Improve performance of NewViolationsDecorator",
  "65c77178": "SONAR-1760: Improve performance of NoSonarFilterLoader",
  "dac23d5e": "SONAR-1952 System Info page is slow to display due to database statistics",
  "d4d45536": "SONAR-1832: build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config Improve performance for 'Architecture rule' build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config Reduce number of violations whose line number is 0",
  "2d82eec7": "SONAR-1832: build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config Improve performance for 'Architecture rule' build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config Reduce number of violations whose line number is 0",
  "b918fe7c": "SONAR-1837: Add profiling logs to database optimization tasks",
  "d7869519": "SONAR-1837: build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config Add profiling logs to database optimization tasks build.gradle build.sh buildSrc debug-server.sh docs gradle gradle.properties gradlew gradlew.bat HEADER LICENSE.txt logs.sh NOTICE.txt plugins README.md scripts server settings.gradle sonar-application sonar-core sonar-duplications sonar-markdown sonar-plugin-api-impl sonar-scanner-engine sonar-scanner-engine-shaded sonar-scanner-protocol sonar-shutdowner sonar-testing-harness sonar-testing-ldap sonar-ws sonar-ws-generator start.sh stop.sh travis.sh ut-monitoring wss-unified-agent.config Extend TimeProfiler to produce logs using debug level",
  "60ae8203": "do not keep in cache violations in DecoratorContext"
}, "spark": {
  "d580ab1": "disable http request wrapper byte cache for multipart/form-data uploads (#891)",
  "1080cbc": "Disable stream cache for chunked transfer encoding",
  "52df5c4": "Merge branch 'cache-headers'",
  "99b094f": "Merge pull request #521 from perwendel/cache-headers",
  "73a54ca": "Merge branch 'master' into cache-headers",
  "1c41ef3": "Merge branch 'master' into cache-headers",
  "1379e54": "Set cache headers for static resources",
  "ded78b7": "Merge pull request #354 from perwendel/pw-performance-jetty-static-files",
  "83f98bd": "Might improve static files performance a tiny bit",
  "5101765": "Added TODO comment for optimization"
}, "spider-flow": {
  "3f3e2f4": "update com.alibaba:fastjson 1.2.58 to 1.2.83",
  "648bacf": "upgrade fastjson to 1.2.83"
}, "spock": {
  "d5b03a1": "Fix verify-osgi cache miss (#1607)",
  "15ab26c": "Disable build-cache for codeql-analysis.yml and use variant matrix",
  "c037481": "Fail-fast for invalid Stub interactions (#1086)",
  "0886296": "Add @Retry to TimeoutExtension test to reduce flakyness on slow systems",
  "436179b": "Clean more from cache for travis",
  "18dfc80": "Updates Byte Buddy, uses more granular type cache lock",
  "0fd7194": "Update to Byte Buddy 1.6.4, use built-in cache",
  "1405a49": "Reduce cache rebuilding on Travis",
  "a5ad45d": "avoid always rewriting the travis cache",
  "3814a45": "Removed dependency ranges from Grails dependencies that slow the build down.",
  "ace7d5a": "initial support for spec/feature run order optimization extended Maven plugin to support run order optimization improved @Stepwise extension more lazy initialization in Sputnik",
  "a73d362": "MainTransform's AST node cache is now reused across compilations"
}, "spotless": {
  "88abf9a": "Add @DisableCachingByDefault as hint why outputs are not cached (#1666)",
  "99295fc": "Add @DisableCachingByDefault to give a proper hint why task outputs are not cached",
  "6789a1d": "Run with build cache by default (#1596)",
  "771d5e3": "Run with build cache by default",
  "dcdcc78": "Enable stable config cache (#1588)",
  "c0668ad": "Merge branch 'main' into config_cache",
  "64b201b": "1480: adding tests without cache and for eslint",
  "32a5317": "Enable stable config cache",
  "a26e396": "Update dependency com.fasterxml.jackson.core:jackson-databind to v2.14.2 (#1536)",
  "4af3a5d": "Merge branch 'main' into renovate/com.fasterxml.jackson.core-jackson-databind-2.x",
  "5a04060": "Merge branch 'main' into renovate/com.fasterxml.jackson.core-jackson-databind-2.x",
  "2da48e6": "Update dependency com.fasterxml.jackson.core:jackson-databind to v2.14.2",
  "826760d": "Run spotbugs on all supported JRE because it's not that slow (17 seconds on my M1) and it's confusing to PR authors to not run.",
  "4aa3b7e": "Run spotbugs in all configurations because it's not that slow (17 seconds on my M1) and it's confusing to PR authors to not run.",
  "d0af06e": "Exclude maven from the assemble testClasses because it's not cacheable anyway.",
  "57be84f": "Use FileSignature to cache changes",
  "a4d5526": "Simplify GitRatchet cache logic",
  "050009f": "Stop testing node on windows because it's too slow and we test it anyway with test_npm_8.",
  "00c2d3f": "Improve the git ratchet performance (memory and speed) (#1038)",
  "2097cad": "Improve the performance of GitRatchet.",
  "ea6344e": "Support configuration cache within a single daemon (JvmLocalCache) (#986)",
  "f52f7fd": "SpotlessTaskService, towards configuration-cache (#982)",
  "0316ef7": "It's easier to make GitRatchet cache-friendly if `setupRatchet` always gets called, so that we can differentiate `not-hydrated` from `ratchet inactive`",
  "312b25e": "An easier way to detect that we are running with configuration-cache is to check to see if transient fields are null.",
  "f828147": "Expand test coverage for the configuration cache, and better error message for failures.",
  "d322c63": "We now fail-fast if the user tries to use configuration-cache.",
  "36947e6": "Refactor SpotlessCheck to use that formatter so that we can ditch the clumsy cache.",
  "dbad659": "SpotlessTaskSerivce now caches error messages from run to run.",
  "edf68d8": "Stay compatible with remote build cache",
  "10b1834": "Flush our project cache in case that's the problem.",
  "58a5273": "Configuration cache, part 1 (play nice with others) (#720)",
  "62794d4": "Merge branch 'main' into feat/dont-break-config-cache",
  "a5c44dd": "Fix the Gradle plugin not to break the `clean` task when Gradle's configuration cache is enabled (#797)",
  "60e424b": "Let spotless plugin not break clean task with the configuration cache",
  "3ec7b8e": "Upgraded plexus-utils to 3.3.0 - resolves performance functional-bug for directory scanning with include/exclude pattern(s)",
  "fa01f46": "Convert GitRatchetGradle into a BuildService, just to get around `buildFinished`, so that Spotless tasks don't interfere with config cache for other tasks.",
  "02ec8ee": "Does spotless interfere with config cache if its tasks are configured? (answer: yes)",
  "ef8b077": "Ensure that Spotless doesn't interfere with config cache when its tasks aren't configured.",
  "c9f5cf5": "We're going to need BuildService to fix configuration cache, and that bumps our minimum gradle from 5.4 to 6.1",
  "425a2a6": "Improve ProcessRunner performance with reusable buffers.",
  "b106f3d": "Go back to the old up-to-date and cache-friendly implementation of NpmFormatterStepStateBase.",
  "5bf0896": "Make the FileSignature internal cache `private final`.",
  "e872905": "No need for the FileSignature cache to store multiple versions per-file, once a file has changed, we can discard the old one.",
  "e4db705": "Use a central cache for the FileSignature, so that we keep the local performance based on lastModified that we had prior to this PR.",
  "92197e1": "Windows cache seems to be broken, we'll just let it be slow.",
  "5d091ac": "Add `test_gradle_modern_8` to the `assemble_and_test` workflow, and also refresh the windows cache.",
  "3ea4f86": "Deprecate GradleProvisioner.fromProject() with a faster implementation in FormatExtension.provisioner()",
  "b64ead5": "For the gradle plugin, put the root files in `{rootProject}/build/spotless-nodejs-cache`.",
  "adc91fa": "This instance is thread-specific, so it would have to be a thread-local cache, which is pretty complicated.",
  "5a00f14": "This will make things a *lot* faster.",
  "64bd15b": "Proposal for `-PspotlessApplyOnlyTo` (faster alternative to `-PspotlessFiles`)",
  "b77ce92": "TsFmtFormatterStepTest has apparently been broken for a while, not sure why it's been passing. Buildcache bug?",
  "345c519": "Improve performance for the common case where PaddedCell is not needed.",
  "eaee32d": "Replace '**/*.blah' with '*.blah', and applied this on each project that needed it individually. *Way* better performance.",
  "b2e6ee5": "For a long time, we have done a weird workaround to apply spotless on spotless itself, because gradle didn't support bootstrapping. Now it does, so we don't have to do that weird thing, which is good because it was also very slow.",
  "d215f24": "Only cache the modules-2 directory",
  "342386c": "Figured out a way to do it 100% transparently, without requiring declarations in root. We can infer them without a performance penalty by registering every subproject SpotlessTask with the RegisterDependenciesTask. When we eventually bump our minimum-required gradle to take advantage of task configuration avoidance, this workaround will still work - the only task we'll have to create eagerly is the registerDependencies task.",
  "1a10f0b": "TestProvisioner is now resilient to the dependency-cache pruning old deps (by re-downloading if the cached files have disappeared).",
  "10a89c8": "Use the same gradleUserHome as normal builds, to take advantage of the system cache.",
  "abbcf65": "Don't cache the ~/.gradle/wrapper folder",
  "33dc04d": "Fix #401 - Eclipse based formater M2 cache path contains URL escapes",
  "fdcbca9": "Merge pull request #380 from diffplug/feature/buildcache",
  "e68413e": "Added '/cache' to the buildcache url.",
  "647b553": "Try to get read-only access to the cache if we don't have r/w",
  "e01a9e9": "Removed debug logging, and enabled buildcache only for settings.gradle",
  "9089e42": "Enable the buildcache - read only for PRs, and read/write for trusted builds (merged, internal PRs).",
  "72a30f1": "Fix #348 - Unreasonably large configuration performance overhead",
  "e3b3d3e": "Merge pull request #279 from diffplug/eclipse_classloader_cache_extension",
  "2345cbd": "Added `~/.m2` as a cached directory, because stuff gets downloaded for maven-install-plugin and the wrapper.",
  "e438881": "Only run the maven tests on CI, for faster debugging. Also format fix.",
  "7401807": "Fixed: When the target of a Gradle SpotlessTask was reduced (e.g. some generated code was excluded), Spotless could keep giving warnings until cache file was deleted.",
  "c1fb358": "Fixed the gradle self-apply problem by setting the project-cache-dir. Appears that the java task is never up-to-date, not sure why.",
  "f97933c": "Optimized TestProvisioner, brought time of lib and testlib testsuite from 44s to 24s. More importantly, removed ~8s cache setup delay that was at the beginning of every single test.",
  "7160b1c": "Turns out that just calling ProjectBuilder.builder() takes about 3s the first time (class loading?). Thanks to the disk cache introduced in the previous commit, we usually don't need to create this at all.",
  "5c3c150": "TestProvisioner now caches previous results to disk. This takes testing step equality from 7s down to 0s. Creating a step still takes 3s on the first attempt, why?",
  "51ffda7": "Help to improve performance of FormatExtension#parseTarget.",
  "505c3f0": "Moved formatter.finish() to the end of ApplyFormatTask/CheckFormatTask - for much better performance.",
  "d41ca50": "Improved performance of LineEnding.toUnix() for strings which are already unix-style.",
  "449fc0d": "LineEnding.GIT_ATTRIBUTES.createPolicy() now caches the function used to create gitAttributes policies.",
  "3dd7085": "Improve performance of FormatExtension.customReplaceRegex",
  "86c38e6": "Small refactor of FormatterStep.create() and createLazy() which will dramatically improve the performance of the eclipse and google-java-format formatters.",
  "4262b2b": "Attempt at excluding project build and cache dirs - doesn't pass tests",
  "c88ab0d": "Apply IntelliJ-suggested performance issue fix.",
  "bf07b64": "Travis now caches the `build/p2asmaven` folder, and handles other intricacies of gradle and travis correctly.",
  "d0cebb6": "FormatTask doesn't have any outputs, so it doesn't help to specify inputs. Also LineEnding.Policy isn't serializable, and the whole thing is fast enough that it's hard to justify the effort to make it cachable anyway.",
  "6a0b92e": "LicenseHeaderStep is now based on regex, and has improved performance.",
  "47f9112": "Buffer was small by one, which will hurt performance on big checks.",
  "4d274af": "Heavy refactor to make spotless lazy. Fixed configuration closures, and big wins for performance."
}, "SpringAll": {
  "1b13781": "Spring Boot Shiro Ehcache",
  "9954549": "Spring Boot中使用Ehcache缓存数据"
}, "spring-analysis": {
  "bc3785d": "Merge pull request #18 from seaswalker/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.10.0.pr1",
  "032e174": "Merge pull request #8 from seaswalker/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "c9d1896": "Guava cache finished",
  "69a923e": "guava-cache构建",
  "783a36b": "guava-cache 2017年2月5日19:22:09"
}, "spring-authorization-server": {
  "": ""
}, "spring-boot": {
  "acad5b93": "Upgrade to Ehcache3 3.9.11",
  "cfd589c8": "Do not cache :spring-boot-project:spring-boot-docs:asciidoctor* tasks",
  "72a9f494": "Document that SystemTestPlugin output should never be cached",
  "ccd85b7e": "Upgrade to Ehcache3 3.10.8",
  "0ba83f08": "Upgrade to Ehcache3 3.10.8",
  "87444abc": "Upgrade to Ehcache3 3.10.6",
  "d05e7921": "Clarify spring.cache.type=hazelcast in the documentation",
  "421f2fac": "Fail fast when constructor bound and not compiled with -parameters",
  "06473a8e": "Upgrade to Ehcache3 3.10.4",
  "fcf774c3": "Upgrade to Ehcache3 3.10.4",
  "ff16f6d6": "Work around configuration cache problem in NBT Gradle Plugin",
  "9a398549": "Upgrade to Ehcache3 3.10.2",
  "7e0de51c": "Upgrade to Ehcache3 3.10.2",
  "1efbfdb3": "Upgrade to Ehcache3 3.9.10",
  "464237fc": "Upgrade to Ehcache3 3.10.1",
  "a111f66e": "Upgrade to Ehcache3 3.10.1",
  "5d290573": "Enable stable configuration cache feature flag",
  "0b9c2025": "Fix handling of String Java version in cache smoke test",
  "329fa8d3": "Run cache smoke tests against all cache providers",
  "79cda3e5": "Configure the Gradle Enterprise cache URL in the CI pipeline",
  "a2959bbc": "Polish 'Add support for cache2k in memory caching'",
  "774f61fc": "Add support for cache2k in memory caching",
  "3ed3d3eb": "Restore Ehcache 3 Support",
  "bf477700": "Upgrade to Ehcache3 3.10.0",
  "d14980ed": "Polish 'Tweak performance for Prometheus scraping endpoint'",
  "fb3f3c52": "Tweak performance for Prometheus scraping endpoint",
  "f0053d2f": "Merge pull request #'Tweak performance for Prometheus scraping endpoint'\n\nSee gh-30085 from",
  "93f31ee0": "Polish 'Tweak performance for Prometheus scraping endpoint'\n\nSee gh-30085",
  "e2ebb569": "Tweak performance for Prometheus scraping endpoint",
  "f354c4da": "Upgrade to Ehcache3 3.9.9",
  "07c8ab22": "Upgrade to Ehcache3 3.9.9",
  "cb818019": "Upgrade to Ehcache3 3.9.9",
  "fedf341d": "Upgrade to Ehcache3 3.9.8",
  "f0a4ac61": "Upgrade to Ehcache3 3.9.8",
  "c1a6f608": "Merge pull request #28548 from slowjoe007",
  "cae0b503": "Upgrade to Ehcache3 3.9.7",
  "58652469": "Upgrade to Ehcache3 3.9.7",
  "87146893": "Polish 'Add option to customize cache volume names when building an image'",
  "dc363462": "Add option to customize cache volume names when building an image",
  "302d616b": "Upgrade to Ehcache3 3.9.7",
  "4dc51421": "Prevent cache from consuming too much memory",
  "e15a5863": "Upgrade to Ehcache3 3.9.6",
  "1aaa79c8": "Upgrade to Ehcache3 3.9.6",
  "a3762b3f": "Upgrade to Ehcache3 3.9.6",
  "00008c86": "Upgrade to Ehcache3 3.9.5",
  "7fced191": "Upgrade to Ehcache3 3.9.5",
  "1fdeda0d": "Upgrade to Ehcache3 3.9.5",
  "e18eb082": "Fix additional metadata locations with config cache",
  "e2a877ca": "Upgrade to Ehcache3 3.9.4",
  "16ff9318": "Upgrade to Ehcache3 3.9.4",
  "617f7b95": "Improve ImageName/ImageReference parse performance",
  "25f529a5": "Upgrade to Ehcache3 3.9.3",
  "0bc37852": "Upgrade to Ehcache 2.10.9.2",
  "e7ac4f12": "Upgrade to Ehcache3 3.9.3",
  "87fce0b4": "Upgrade to Ehcache 2.10.9.2",
  "7f51e43d": "Upgrade to Ehcache 2.10.9.2",
  "e4fa39df": "Fail fast when finalName is misconfigured",
  "ae2ff784": "Revert 'Fail fast when finalName is misconfigured'",
  "263b7c20": "Fail fast when finalName is misconfigured",
  "2006444b": "Upgrade to Ehcache3 3.9.2",
  "ce13db4d": "Upgrade to Ehcache3 3.9.2",
  "11b77037": "Make TestFailuresPlugin compatible with Gradle's configuration cache",
  "82791b4e": "Improve performance of Tomcat 'jar:war:file' URLs",
  "c86ce271": "Use non deprecated properties to override web resources cache",
  "f0a6128d": "Add spring.web.resources.cache.use-last-modified",
  "c85cc33c": "Fix main class resolution failure when loaded from config cache",
  "72361a75": "Merge branch 'gradle-plugin-configuration-cache'",
  "c409d50c": "Document support for Gradle's configuration cache",
  "806464ed": "Update BootBuildImage to support Gradle's configuration cache",
  "c078a480": "Update BootRun to support Gradle's configuration cache",
  "d1f543fc": "Update BuildInfo to support Gradle's configuration cache",
  "83cfd3b2": "Update BootWar to support Gradle's configuration cache",
  "081ef2d9": "Update BootJar to support Gradle's configuration cache",
  "d136324b": "Add support for testing the Gradle plugin with --configuration-cache",
  "34c4c3f2": "Expose cache metrics for Redis",
  "efbbd8b3": "Improve performance of DispatcherServletRegistrationCondition",
  "bf9d23e5": "Consider SpringBootTest's web environment in context cache key",
  "04c5a3f1": "Upgrade to Ehcache3 3.9.0",
  "c6a9696d": "Polish 'Fix signed jar performance issues'",
  "4d053e15": "Fix signed jar performance issues",
  "9e0fd01a": "Deprecate resource 'app-cache' configuration support",
  "dc4de06b": "Restore customization of the Couchbase cache manager",
  "1270af90": "Only enable full path optimization when there's one DispatcherServlet",
  "5dd7780a": "Try to stabilise descendantOfPropertyAccess performance test",
  "8cd0f568": "Merge pull request #21650 from fastso",
  "0607af87": "Improve ConfigurationPropertySource performance",
  "4af6e7ff": "Improve ConfigurationPropertySource performance",
  "53099129": "Test large property source performance",
  "43936d66": "Improve Binder performance slightly",
  "c4a55a5f": "Fail fast when attempting to repackage a reproducible war",
  "11b98620": "Revert 'Clear ProducesRequestCondition cache attribute'",
  "e59d3fbb": "Clear ProducesRequestCondition cache attribute",
  "aeca44d3": "Revise credhub references for Gradle Enterprise cache user",
  "55d7f8b8": "Restore previous credhub references for cache username and password",
  "7f6b01c3": "Make sure Redis cache prefix includes cache name",
  "50aa2b60": "Simplify cache smoke tests",
  "8f9d9fa2": "Clarify which caches are automatically bound to the metrics registry",
  "20ff7647": "Increase cache ttl in CachingOperationInvokerTests",
  "f799e1dc": "Upgrade to Ehcache3 3.8.1",
  "29080b87": "Protect autoconfigure module against slow starting test containers",
  "20b6656b": "Protect autoconfigure module against slow starting test containers",
  "b1cefc1e": "Upgrade to Ehcache3 3.8.0",
  "0f105f74": "Fail fast if spring.config.location uses unknown file extension",
  "8e268987": "Improve thread safety in property source cache",
  "e2f69d04": "Use actual resolvedType when checking Binder cache",
  "6de14f71": "Fail fast if config prop constructor binding cannot determine names",
  "f665910c": "Use generic type for binder cache comparisons",
  "08cb8368": "Delete Devtools cache reset support for HATEOAS",
  "94a9748c": "Fix 'spring.resources.cache.period' for WebMvc",
  "07c702e4": "Upgrade to Ehcache3 3.7.1",
  "1f893d93": "Log warning on slow host resolution",
  "2448efc0": "Polish 'Cache MimeTypes to improve performance'",
  "b3f94c47": "Cache MimeTypes to improve performance",
  "ca011995": "Align with new fail-fast behaviour in Micrometer 1.1.4",
  "9e7d9225": "Allow processor cache to be configured to be unlimited",
  "ea80ca2f": "Do not assume HTTP protocol when customizing processor cache",
  "52a934fa": "Upgrade to Ehcache3 3.7.0",
  "a172e146": "Polish 'Always fail fast when SSL is enabled without a key store'",
  "62c8ac6e": "Always fail fast when SSL is enabled without a key store",
  "b0dbe09b": "Upgrade to Ehcache3 3.6.3",
  "9e571a28": "Fail fast if nested condition uses a phase inappropriate for its members",
  "3059f0e2": "Add configuration property for configuring Tomcat's processor cache",
  "85cb6bf0": "Revert 'Upgrade to Ehcache 2.10.6'",
  "fa4de5eb": "Upgrade to Ehcache3 3.6.2",
  "addc421b": "Upgrade to Ehcache 2.10.6",
  "7f8f1f5b": "Revert 'Backport 'Upgrade to Ehcache 2.10.6''",
  "264b7ca7": "Backport 'Upgrade to Ehcache 2.10.6'",
  "0c00d1d4": "Upgrade to Ehcache 2.10.6",
  "9e5f1715": "Support cachecontrol config property in WebFlux",
  "cdf0b556": "Upgrade to Ehcache3 3.6.1",
  "c897ff95": "Upgrade to Ehcache3 3.5.3",
  "3b0f00dc": "Document how to enable Hibernate 2nd level cache with JCache",
  "6cc272ec": "Polish 'Make sure cache busting works with error pages'",
  "64f04fce": "Make sure cache busting works with error pages",
  "3b51d793": "Remove useless jcache profile",
  "fccb8f56": "Upgrade to Ehcache3 3.6.0",
  "26353a8f": "Port test to use ehcache3",
  "be00c1db": "Fix dependency between cache and hibernate",
  "205bb764": "Specify ID for cache providers section in reference docs",
  "da49128e": "Merge pull request #13487 from izeye:caches-endpoint",
  "c67aedd8": "Polish 'Retrieve javax.cache.CacheManager using Bean ClassLoader'",
  "76b9d0d2": "Retrieve javax.cache.CacheManager using Bean ClassLoader",
  "faa9910e": "Enable cache when a SecurityContext parameter is used",
  "22642dd2": "Upgrade to Ehcache 2.10.5",
  "c72df104": "Improve caches endpoint format",
  "c16f99f7": "Revert 'Upgrade to Ehcache 2.10.5' in 2.0 as well",
  "ed9ac53a": "Revert 'Upgrade to Ehcache 2.10.5'",
  "f78fd74b": "Upgrade to Ehcache 2.10.5",
  "fb8a5a98": "Polish 'Add cache actuator endpoint'",
  "1a576733": "Add cache actuator endpoint",
  "cc66de28": "Populate cache in ConfigFileApplicationListener",
  "ecfc8d73": "Be defensive when clearing caches for restart",
  "4ebb5a94": "Upgrade to Ehcache3 3.5.2",
  "976a23d9": "Fix duration unit of spring.messages.cache-duration",
  "3fddfee6": "Fix default value of endpoint's cache ttl",
  "e5f8c685": "Ignore Spring tool suite 4 cache",
  "a5c74e51": "Ignore gradle name cache",
  "7d561f5e": "Polish 'Align with Micrometer's standardized cache metrics'",
  "ba52aa36": "Align with Micrometer's standardized cache metrics",
  "6bac365a": "Polish micrometer cache metrics",
  "0515ca0d": "Auto configure micrometer cache metrics",
  "7f0048a8": "Use fast exceptions when enumerating resources",
  "bc5863df": "Do not attempt to clear ResourceManager's cache with Java9",
  "d33c6773": "Use volatile for ReactiveTokenValidator.cacheTokenKeys",
  "e3c3bb00": "Rename spring.cache.control to spring.cache.cachecontrol",
  "c40517b0": "Merge pull request #10944 from ryonday:redis-cache-config",
  "46ef178f": "Polish 'Improve cache auto-configuration for Redis'",
  "a4ed406e": "Improve cache auto-configuration for Redis",
  "283c9de2": "Improve spring-boot-autoconfigure for Redis caches",
  "5df473a6": "Add env-based configuration of TTL of Tomcat's static resource cache",
  "d8b658c0": "Upgrade to Ehcache3 3.4.0",
  "27de7881": "Upgrade to Ehcache3 3.2.3",
  "192d9ee1": "Merge pull request #9734 from mp911de:redis-cache",
  "fc38c1ba": "Improve cache sample",
  "8ee6c201": "Upgrade to Ehcache3 3.3.1",
  "625a7668": "Merge pull request #9065 from dsyer:cachedocs",
  "f0609223": "Fix cache example in the doc",
  "53fd1f7f": "Fix cache sizing bug",
  "b5811986": "Upgrade to Ehcache 2.10.4",
  "6b167f1f": "Upgrade to Ehcache 2.10.4",
  "f5f65463": "Fail fast on getKeyFromServer() failure",
  "18f0e954": "Upgrade to Ehcache3 3.2.2",
  "0186fb2e": "Fail fast when plugin is used with an unsupported version of Gradle",
  "45632726": "Fail fast when a Zip64 jar is encountered",
  "5b2f0ea0": "Revert 'Add dep mgmt for fast-classpath-scanner while Neo4j uses LATEST'",
  "51a2d9b1": "Add dep mgmt for fast-classpath-scanner while Neo4j uses LATEST",
  "1d9520b3": "Document `fast` profile in contributing documentation",
  "28a8e3db": "Remove spring.cache.hazelcast.config",
  "bb8800a6": "Deprecate spring.cache.hazelcast.config",
  "dd6d2004": "Upgrade to Ehcache3 3.2.1",
  "d1149054": "Upgrade to Ehcache3 3.1.4",
  "98cf35d4": "Polish 'Ignore spock.lang annotations when creating test context cache key'",
  "8f18df8a": "Ignore spock.lang annotations when creating test context cache key",
  "627edc0f": "Use a different approach to disable HATEOAS Objenesis instance's cache",
  "84217076": "Polish cache sample readme",
  "b4858882": "Merge pull request #8202 from jxblum:spring-boot-sample-cache-ux-improvements",
  "31ed70e1": "Improve spring-boot-sample-cache UX by using Maven profiles",
  "fa6a1385": "Refine ImportsContextCustomizer cache logic",
  "93f97719": "Improve performance of RelaxedNames",
  "18ed6a58": "Upgrade to Ehcache3 3.2.0",
  "37605e35": "Document devtools influence on HTTP cache headers",
  "5ac75c94": "Increate timeout in Kafka tests as Windows CI agents are very slow",
  "45d672f5": "Ignore Spock annotations when creating test context cache key",
  "7d1164c2": "Upgrade to Ehcache3 3.1.3",
  "ecbe1a70": "Upgrade to Ehcache 2.10.3",
  "fc535fe2": "Disable resource chain cache when DevTools is enabled",
  "64d32191": "Ignore Kotlin annotations when creating test context cache key",
  "7019894f": "Clarify the role of spring-boot-starter-cache",
  "8ad47753": "Fail fast if both uri and client attributes are set",
  "a2794d75": "Clarify couchbase cache requirements",
  "f4da334f": "Upgrade to Ehcache 3.1.2",
  "aad40093": "Make Mock/Spy qualifiers part of context cache key",
  "7e263d89": "Polish cache doc",
  "7b3382e3": "Fail fast if @WebAppConfiguration is used with a non-mock web environement",
  "21a25ce8": "Revert 'Fail fast if @WebAppConfiguration and @SpringBootTest are used together'",
  "c54cdd67": "Fail fast if @WebAppConfiguration and @SpringBootTest are used together",
  "a16aa767": "Tweak performance of RelaxedNames.separatedToCamelCase",
  "96d5def1": "Add reference to Caffeine in cache sample",
  "b86241ca": "Upgrade to Ehcache 3.1.1",
  "38e3b39d": "Improves metrics performance by not guarding map.get",
  "f9c7db11": "Upgrade to Ehcache 3.1.0",
  "0d207d43": "Improve the performance of JarURLConnection",
  "3d0b682f": "Document `none` cache type",
  "c85948ac": "Fix cache sample README",
  "4c877a67": "Fix cache sample README",
  "81bf3867": "Fix spring-boot-sample-cache Infinispan example",
  "628cbcda": "Merge pull request #5807 from eddumelendez/polish-cache-sample",
  "7b9844f5": "Polish spring-boot-sample-cache README",
  "0cfcbeb4": "Add dependency management for Ehcache 3",
  "a4d7a775": "Apply spring.thymeleaf.cache to auto-configured ThymeleafViewResolver",
  "a4f77ae2": "Provide dependency management for com.fasterxml:classmate",
  "caf11e44": "Add Couchbase cache support",
  "830c4c99": "Update computation of ehcache statistics",
  "98cc6836": "Add Caffeine cache support",
  "acbb4e63": "Clear caches on ApplicationContext load",
  "939b66f4": "Use fast exceptions in findResource(s)",
  "1e2f1338": "Use fast exceptions in findResource(s)",
  "091478e0": "Disable ehcache statistics if necessary",
  "d88210f6": "Improve performance with BackgroundPreinitializer",
  "602a06d5": "Improve performance of RelaxedNames",
  "623fcfef": "Properly guard cache statistics providers",
  "002d3bd8": "Add fast profile",
  "79b9bdec": "Merge pull request #3794 from htynkn/set-cache-period-to-zero",
  "4e410681": "Disable resource cache when DevTools is enabled",
  "d241171f": "Use fast exceptions in hasMoreElements in LaunchedURLClassLoader",
  "c181a2d1": "Add simple performance test for properties binding",
  "c3d93f70": "Fail fast when a Logback configuration file is missing or malformed",
  "a33deee9": "Merge pull request #3235 from izeye/ehcache",
  "d93a76cc": "Merge pull request #3227 from izeye/cache-config",
  "01122607": "Fix typo in cache auto-configurations",
  "25f74cba": "Clear caches on initial restart",
  "83300b35": "Set additional template cache devtools properties",
  "d2f11c46": "Polish cache code",
  "fca192fa": "Add spring-boot-starter-cache",
  "0ad0ad4c": "Merge pull request #3101 from izeye/cache",
  "fbfdbce2": "Add cache documentation",
  "18d76349": "Add basic cache metrics support for Infinispan",
  "28d2955d": "Fix Hazelcast cache statistics condition",
  "eef027a4": "Polish cache sample",
  "23a27845": "Add cache sample",
  "91ce0abe": "Fix Redis cache auto-configuration",
  "1457a55e": "Remove spring.cache.config property",
  "825d01ea": "When cache names clash include clash manager name in all prefixes",
  "bbbb34a6": "Expose cache statistics as metrics",
  "bd93c752": "Add spring.cache keys documentation",
  "fbe97748": "Use spring.cache.config with JCache",
  "151220f4": "Add cache manager auto-configuration",
  "aa2e32a0": "Restore CLI startup performance",
  "001f2d6c": "Improve performance of MessageSource condition",
  "d6165d97": "A few tweaks that might improve performance on startup",
  "4f440fcb": "Java 7 ClassLoader performance improvements",
  "a3ceaf63": "Improve performance of fat jar loading",
  "5ed49462": "Add spring.messages.cacheSeconds to global config",
  "0a6074be": "Fix failing test due to cache timeout property",
  "25cc68ca": "Add spring.resources.cachePeriod to MvcAutoConfiguration",
  "4fc9dfc2": "Revert 'Add launcher.count as useful performance testing aid'",
  "5b90e185": "More performance tweaks for SpringCli",
  "e1605b46": "Add launcher.count as useful performance testing aid",
  "165ba2eb": "Add some performance tests for InitCommand",
  "df476bed": "Ensure local repository cache is always used",
  "c50fe073": "TomcatEmbeddedServletContainer now fails fast, if there are exceptions during protocol handler startup (re-throw exception)",
  "d2678e08": "Improve startup performance for nested JARs",
  "08137cf4": "Pin problematic dependency in local repo cache",
  "d75c1e49": "Speed up CLI tests if jar is cached locally",
  "697c2101": "Add cacheable switch to Thymeleaf template resolver"
}, "springBoot": {
  "c583ed6": "add guava cache Invalid",
  "e9025aa": "add cache",
  "8091036": "cache2 is work",
  "08cd977": "modify cache",
  "f3555f3": "redis cache is ok"
}, "spring-boot-admin": {
  "9a1ec11": "chore(deps): update actions/cache action to v3.3.1 (#2322)",
  "202a36a": "chore(deps): update actions/cache action to v3.3.0 (#2315)",
  "de33017": "chore(deps): update actions/cache action to v3.2.6 (#2293)",
  "3d12f61": "chore(deps): update actions/cache action to v3.2.6 (#2293)",
  "291bace": "chore(deps): update actions/cache action to v3.2.5 (#2276)",
  "9d3ce54": "chore(deps): update actions/cache action to v3.2.4 (#2256)",
  "7e47eda": "chore(deps): update actions/cache action to v3.2.3",
  "23e7d0c": "chore(deps): update actions/cache action to v3.2.2",
  "3f36e09": "chore(deps): update actions/cache action to v3.0.11",
  "5cb8255": "chore(deps): update actions/cache action to v3.0.10",
  "e7964bc": "chore(deps): update actions/cache action to v3.0.9",
  "aaf900a": "chore(deps): update actions/cache action to v3.0.8",
  "058827a": "chore(deps): update actions/cache action to v3.0.7",
  "203bfdd": "chore(deps): update actions/cache action to v3.0.6",
  "4564239": "chore(deps): update actions/cache action to v3 (#2083)",
  "ac726ef": "chore(deps): update actions/cache action to v2.1.7 (#1891)",
  "2d99805": "fix: clearing caches with key instead of name (#1838)",
  "f586897": "cache for node modukes (#1837)",
  "286d00d": "chore(deps): update actions/cache action to v2.1.6 (#1696) [skip-ci]",
  "0e544eb": "Toggle 'Clear caches' button for multiple instances (#1785)",
  "260fe11": "Use maven repo cache during publish snapshots (#1687)",
  "375ba88": "Fix handling of cached request body",
  "8fcfe72": "Added cache misses translation en/de",
  "b1a51a9": "Ignore missing 'miss' / 'hit' cache metric chart",
  "003c272": "Add support for clearing caches.",
  "ae8596c": "Using ehcache the cache statistics are not showing up",
  "7cfce4a": "Fix broken cache charts after micrometer change",
  "997ee85": "Add details for caches",
  "f6ce44c": "Fix cache stats display",
  "db292d9": "Improve rendering performance for application list",
  "00b7b57": "Show cache metrics from spring-boot 1.3 in details"
}, "spring-boot-demo": {
  "e6f43c6": ":sparkles: spring-boot-demo-cache-ehcache 完成",
  "7bff2f3": ":sparkles: spring-boot-demo-cache-redis 完成",
  "55c71b3": ":sparkles: spring-boot-demo-cache-redis 初始化",
  "1c57865": ":sparkles: spring-boot-demo-cache-redis 初始化"
}, "springboot-guide": {
  "": ""
}, "Spring-Boot-In-Action": {
  "": ""
}, "SpringBoot-Labs": {
  "1d03c0d": "增加 spring boot cache demo",
  "bf173c9": "增加 spring boot cache demo",
  "dd5d77e": "增加 spring boot cache demo"
}, "spring-boot-projects": {
  "": ""
}, "SpringBoot-Shiro-Vue": {
  "ecf281f": "Merge pull request #117 from Heeexy/dependabot/maven/back/com.alibaba-fastjson-1.2.83",
  "d521bf2": "Bump fastjson from 1.2.76 to 1.2.83 in /back"
}, "spring-boot-starter": {
  "a777d64": "Add configuration for cache on Travis CI"
}, "SpringBootVulExploit": {
  "": ""
}, "SpringCloud": {
  "ce52baf": "Merge pull request #218 from zhoutaoo/dependabot/maven/common/web/com.fasterxml.jackson.core-jackson-databind-2.12.6.1",
  "49743a6": "Merge pull request #219 from zhoutaoo/dependabot/maven/auth/authorization-server/com.fasterxml.jackson.core-jackson-databind-2.12.6.1",
  "49174d6": "Merge pull request #156 from zhoutaoo/dependabot/maven/auth/authorization-server/com.fasterxml.jackson.core-jackson-databind-2.10.0.pr1",
  "dcab4d1": "Merge pull request #155 from zhoutaoo/dependabot/maven/common/web/com.fasterxml.jackson.core-jackson-databind-2.10.0.pr1",
  "7842a9f": "Merge pull request #138 from zhoutaoo/dependabot/maven/common/web/com.fasterxml.jackson.core-jackson-databind-2.9.10.4",
  "d98be4b": "Merge pull request #139 from zhoutaoo/dependabot/maven/auth/authorization-server/com.fasterxml.jackson.core-jackson-databind-2.9.10.4",
  "59cb3b2": "网关签权加入jetcache缓存，默认10s相同url不远程调用，使用本地缓存",
  "5c5f9e3": "Merge pull request #101 from zhoutaoo/dependabot/maven/common/web/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "7cc8c92": "Merge pull request #102 from zhoutaoo/dependabot/maven/auth/authorization-server/com.fasterxml.jackson.core-jackson-databind-2.9.10.1",
  "9115c8c": "加入jetcache缓存，提高权限判断的性能",
  "584c024": "加入jetcache缓存，提高权限判断的性能",
  "6d1601c": "gateway-admin模块使用jetcache重构",
  "bb8bdb7": "改造其它模块使用jetcache两级缓存",
  "e62171a": "使用jetcache作两级缓存，优化缓存性能"
}, "spring-cloud-alibaba": {
  "d355f45": "Code optimization",
  "857e109": "Code optimization",
  "8e2a41e": "Code optimization",
  "da9a57d": "cache onRegister",
  "f6e8482": "Polish alibaba/spring-cloud-alibaba/#1194 : [Enhancement] NacosWatch optimization",
  "5b8d25e": "Polish alibaba/spring-cloud-alibaba/#1194 : [Enhancement] NacosWatch optimization",
  "c3d76b3": "Merge pull request #1115 from echooymxq/performance_#1090",
  "3b6220d": "do some optimizations about GenericService",
  "a49f662": "Polish spring-cloud-incubator/spring-cloud-alibaba#348 : Performance optimization",
  "41020df": "code optimization",
  "e163500": "Code optimization for ans starter"
}, "spring-cloud-examples": {
  "": ""
}, "spring-cloud-gateway": {
  "bc57f12": "Allow to deactivate global cache (#2895)",
  "bc3ac05": "Merge branch 'mmedio/fix-global-cache'",
  "2d67158": "Fixes memory lean with cached body",
  "0280f96": "Don't cache body twice.",
  "ec34a99": "add cache request body filter (#1943)",
  "73cd403": "Circleci adds CACHEVER to be able to bust cache on demand",
  "3d76da7": "temporarily omit restoring cache",
  "856a241": "Updates cacheRequestBody() to handle the empty body case.",
  "3cd2878": "Fixes cache is cleared on refresh but not actually refreshed. Fixes gh-1168. (#1215)",
  "71780c2": "Adds ability to cache body without converting to bytes (#1095)",
  "76d138f": "Adds ability to cache body without converting to bytes (#1095)",
  "38b2168": "ObjectProvider.getIfAvailable() is called too frequently, fix this performance problem.",
  "09eacaa": "Merge pull request #781 from young891221/handlerStrategies-performance-fix",
  "e5993ef": "Minor performance tweaks (showed as hotspots when testing).",
  "6c7168d": "Merge pull request #439 from ryanjbaxter/readbody-cachebody",
  "e6faa31": "Use RefreshRoutesEvent to trigger code to clear route caches",
  "e8c8509": "Add cache and public method to get combined filters for route"
}, "spring-cloud-kubernetes": {
  "d1b395b": "use branch name in the cache key (#1049)",
  "d338511": "Support Kubernetes config fail-fast and retry (#873)"
}, "springcloud-learning": {
  "": ""
}, "SpringCloudLearning": {
  "": ""
}, "spring-cloud-netflix": {
  "c795bd1": "#1203 Improve filter performance by using only one instance of AllEncompassingFormHttpMessageConverter (#1681)",
  "e272f8d": "change caches to ConcurrentHashMap"
}, "Spring-Cloud-Platform": {
  "b629c0f": "[Feature] 升级ace-cache",
  "aec18d0": "!14 [Feature] 集成ace-cache Merge pull request !14 from 老A/dev",
  "b7a79e7": "[Feature] 集成ace-cache"
}, "spring-data-examples": {
  "": ""
}, "springfox": {
  "69bed53": "Returning cache to life.",
  "16e8941": "Returning cache to life.",
  "078db0f": "Added gradle directory to the caches and ignored gh-pages",
  "891a6c2": "Merge branch 'PascalSchumacher-replace_reflections_with_fast_classpath_scanner'",
  "656eb0f": "Added warning when specification group doesnt exist in the cache",
  "55e6ee1": "Switched to explicit doLast to put the right version on cache buster",
  "e2e069d": "Added cache busting to the swagger scripts/resources",
  "1d5c386": "Skipped the pretty printing for better performance",
  "7448408": "Added cache clear method to documentation cache",
  "dfcf9a2": "Removed the caching aspect and preserved the cacheable and moved",
  "b5947b2": "Optimized the tests so that they run faster",
  "ece147f": "Fixed the issue with the cache key generator algorithm in addition",
  "6a06d0a": "Added the gradle cache to the cached directories",
  "d6feb9d": "Optimized the ApiModelReader to cache",
  "5a06488": "Cleaning up snapshot publishing tasks - Turns off travisci caching to fix build (likely cause cached .gradle dir)",
  "8c03514": "Trigger to verify travis cache",
  "363f7a7": "Trying travisci's cached container builds.",
  "0966acc": "#257 bug - slow scanner",
  "f3d0a0d": "Introduced Swagger cache to simplify configuration."
}, "spring-framework": {
  "3b364c2a": "Add cached-antora-playbook.yml back to .gitignore",
  "e77faf74": "Improve performance of canRead() in HttpMessageReader's",
  "9421fe1d": "Merge pull request #30139 from yuzawa-san:cache-reactor-request-methods",
  "c27a5687": "cache reactor request methods",
  "935c29e3": "Increase scope of regex pattern cache for the SpEL `matches` operator",
  "8e843c24": "Merge pull request #29853 from ThomHurks:cors-configuration-small-memory-optimization",
  "33023b24": "Provide optional SimpleBeanInfoFactory for better introspection performance",
  "edcc559b": "Add fast-path in BeanUtils#instantiateClass",
  "baebf71e": "Polish 'Improve AssertJ usage in cache config tests'",
  "5ed0c848": "Improve AssertJ usage in cache config tests",
  "da8c4de2": "Add AotDetector to reliably opt-in for optimizations",
  "4cebd9d3": "Fix SpringFactoriesLoader cache key when using default classloader",
  "eefdd2c7": "Avoid return value reference in potentially cached MethodParameter instance",
  "7aed6279": "Consistent fallback in case of fast-class generation failure",
  "f63a106c": "clear() method also clears argument resolver cache",
  "ceea00f7": "Fix cache annotation tip",
  "50ccb1bf": "Avoid duplicate JCacheOperationSource bean registration in <cache:annotation-driven />",
  "b452d1b4": "Remove obsolete references to Ehcache 2.x from ref docs",
  "a295a28e": "Defensively handle fast class generation failure for individual methods",
  "3e53e54b": "Remove external Javadoc links to Tiles and Ehcache",
  "eabe946a": "Skip readStream optimization for compatibility with misbehaving InputStreams",
  "0a776a76": "Fix memory leak on AOP Proxy class definition cache",
  "564c6f7f": "improve the performance of iteration",
  "0865abef": "Expose current cached session count",
  "729535d3": "Ensure presence of cached lookupPath",
  "99a1388b": "Re-resolve cached arguments in case of NoSuchBeanDefinitionException",
  "bd4e915a": "Assert same instance returned for cached merged BeanDefinition",
  "ada255d5": "Ignore duplicate config metadata for cache key in TestContext framework",
  "c840ba99": "Avoid cache miss for @ActiveProfiles w/ same profiles but different order",
  "61d89325": "Rewrite 'performance' test to JMH benchmarks",
  "939c76c4": "Revise documentation notes on getParameterType performance issues",
  "cdfdc340": "Log cache hit and cache miss for synchronized access",
  "a0336604": "Improve performance of JdkDynamicAopProxy.getProxy()",
  "589060d1": "Avoid LinkedList performance issues through use of ArrayDeque",
  "6acbc509": "Indicate caches should be initialized in SimpleCacheManager",
  "524ca1a6": "DefaultSubscriptionRegistry: Reduced thread contention build.gradle buildSrc ci CODE_OF_CONDUCT.adoc CONTRIBUTING.md framework-bom framework-docs framework-platform gradle gradle.properties gradlew gradlew.bat import-into-eclipse.md import-into-idea.md integration-tests LICENSE.txt README.md SECURITY.md settings.gradle spring-aop spring-aspects spring-beans spring-context spring-context-indexer spring-context-support spring-core spring-core-test spring-expression spring-instrument spring-jcl spring-jdbc spring-jms spring-messaging spring-orm spring-oxm spring-r2dbc spring-test spring-tx spring-web spring-webflux spring-webmvc spring-websocket src update_copyright_headers.sh DestinationCache is now synchronized on multiple 'destination' locks (previously a single shared lock) build.gradle buildSrc ci CODE_OF_CONDUCT.adoc CONTRIBUTING.md framework-bom framework-docs framework-platform gradle gradle.properties gradlew gradlew.bat import-into-eclipse.md import-into-idea.md integration-tests LICENSE.txt README.md SECURITY.md settings.gradle spring-aop spring-aspects spring-beans spring-context spring-context-indexer spring-context-support spring-core spring-core-test spring-expression spring-instrument spring-jcl spring-jdbc spring-jms spring-messaging spring-orm spring-oxm spring-r2dbc spring-test spring-tx spring-web spring-webflux spring-webmvc spring-websocket src update_copyright_headers.sh DestinationCache keeps destinations without any subscriptions (previously such destinations were recomputed over and over) build.gradle buildSrc ci CODE_OF_CONDUCT.adoc CONTRIBUTING.md framework-bom framework-docs framework-platform gradle gradle.properties gradlew gradlew.bat import-into-eclipse.md import-into-idea.md integration-tests LICENSE.txt README.md SECURITY.md settings.gradle spring-aop spring-aspects spring-beans spring-context spring-context-indexer spring-context-support spring-core spring-core-test spring-expression spring-instrument spring-jcl spring-jdbc spring-jms spring-messaging spring-orm spring-oxm spring-r2dbc spring-test spring-tx spring-web spring-webflux spring-webmvc spring-websocket src update_copyright_headers.sh SessionSubscriptionRegistry is now a 'sessionId -> subscriptionId -> (destination,selector)' map for faster lookups (previously 'sessionId -> destination -> set of (subscriptionId,selector)')",
  "86970269": "Support for custom cache registration in CaffeineCacheManager",
  "a3c5625d": "Internal cache of pre-filtered BeanPostProcessors (for faster iteration)",
  "57f1e86a": "AnnotationBeanNameGenerator caches meta-annotations for stereotype check",
  "e1951a09": "Improve performance of StringUtils.deleteAny()",
  "8c0aaf48": "Delete meaningless 'performance' test",
  "a70ad009": "Clear by-type cache in case of no pre-existing bean definition as well",
  "d97eabba": "Do not cache multipart MIME types in cache",
  "1c6dda3c": "Improve performance of StringUtils#cleanPath",
  "713a1128": "Improve ConcurrentLruCache performance",
  "1ec15ba9": "Always configure PDF backend as task will only run on cache miss",
  "8e5cad2a": "Add fast path for ClassUtils.hasMethod()",
  "f353bc0c": "ConcurrentReferenceHashMap cache for getInterfaceMethodIfPossible results",
  "d7d474f6": "Do not cache prototype @ControllerAdvice beans",
  "7f61f385": "Enable reading from the remote build cache for all",
  "1a54b83a": "Add opt-in support for remote build cache and pushing to it from CI",
  "46a31bc6": "Extract build cache settings to a dedicated file",
  "cba91ab2": "Stop Created-By manifest header from causing a test task cache miss",
  "3b0b1733": "Enable local build cache for buildSrc and main project",
  "00bad3dc": "Allow genJaxb's output to be cached when checkout locations differ",
  "6a08bfdf": "Avoid unnecessary synchronization for non-existent missing caches",
  "8f684682": "Ensure ClassFilter and MethodMatcher implementations are cacheable",
  "a986be3e": "Upgrade to ehcache 2.10.6",
  "9929d752": "Adapt to Spring Framework convention for static cache field names",
  "1890e04d": "Introduce interface cache for EntityManager and Query types",
  "95edcb81": "Retain merged bean definition caches when possible",
  "932f7713": "Improve performance of FormContentFilter",
  "5a308ad5": "Polish MimeTypeUtils LRU cache",
  "1b93ea97": "Fix concurrent reads issue in MimeTypeUtils cache",
  "6a05b97d": "Log identity hash for ApplicationContext for context cache hits/misses",
  "e5e2d2d6": "Polishing (includes minor performance refinements from master)",
  "574dffb6": "Some trivial optimization in method populateBean() (#22792)",
  "a7425c81": "Add dependency on opendmk_jmxremote_optional_jar for performance builds",
  "72119ac0": "ProducesRequestCondition caches accepted media types",
  "254f06e1": "Request attribute cache for resolved lookupPath",
  "9bd0ec33": "Release cached item in ChannelSendOperator when server error",
  "9c48d630": "Release cached item in ChannelSendOperator",
  "d10174a3": "Optimize performance of produces condition checks",
  "04ce6196": "Fix typo in cache abstraction chapter",
  "112cc702": "Improve performance of ConcurrentReferenceHashMap creation",
  "262c702d": "CachingMetadataReaderFactory releases shared cache Map on clearCache()",
  "4182935b": "Revert optimization in StringDecoder",
  "309e70a4": "Separate factory method cache for introspection purposes",
  "c634b2fa": "ResolvableType-based resolution uses BeanNamesByType cache if possible",
  "aebb2d52": "Logging refinements for transaction and cache processing (debug/trace)",
  "eddbf13d": "BeanFactoryUtils caches transformedBeanName results for factory beans",
  "e64c6dfa": "MergedBeanDefinitionPostProcessors clear internal caches on bean reset",
  "7f1a8d78": "BeanFactoryAdvisorRetrievalHelper avoids synchronization for name cache",
  "20c34cbb": "Provide predetermined capacity for cache operation collections",
  "f58854f4": "Locally cache factory method candidates per factory class",
  "cfbacfd8": "Revise ResolvableType.as for introspection performance",
  "478d7255": "GenericApplicationListenerAdapter caches resolved event types",
  "d0bbbf4c": "OrderUtils caches order values (for AnnotationAwareOrderComparator)",
  "1f5d0faf": "HandlerMethod caches interface parameter annotations",
  "93d91219": "Support for 'cacheRegionFactory' injection with Hibernate 5",
  "4d0800f3": "Improve ContentCachingRequestWrapper performance",
  "6d6aa72e": "improve performance of projection instantiation",
  "779cf8d2": "ConcurrentReferenceHashMap caches EntrySet in volatile field",
  "e2ccd55d": "ReflectivePropertyAccessor uses computeIfAbsent for cache computation",
  "bfcc1a1f": "ReflectivePropertyAccessor caches sorted methods per class",
  "6545cab4": "Improve performance of StringUtils#trimWhitespace Issue: SPR-16766",
  "bc07a540": "Clear AnnotationUtils cache after context refresh (along with others)",
  "129c05bc": "Comprehensively cache annotated methods for interfaces and superclasses",
  "24aae2e1": "Defensive containsSingleton cache guard within getObjectFromFactoryBean",
  "8d8e218b": "Consistent FactoryBean cache visibility in concurrent creation scenarios",
  "a02aafe5": "Regular getBeanInfo call for interfaces (enabling Introspector's cache)",
  "e48def2d": "Set readyToWrite flag after cached signals emitted",
  "4c741483": "ResolvableType returns clone for cached state with original local source",
  "72590dbb": "CachingConnectionFactory does not cache producer for temporary queue/topic",
  "260ebeca": "Improve performance of some string operations",
  "daee6eea": "ParameterMetaData.getParameterType performance on Oracle 12c",
  "bcf9f21e": "PropertyOrFieldReference checks cached PropertyAccessor against current EvaluationContext",
  "65343594": "FactoryBean object cache cleared on shutdown",
  "7ca0094f": "ResolvableType.clearCache() clears SerializableTypeWrapper cache as well",
  "4a57d451": "Reset cached ResolvableType on increaseNestingLevel/setContainingClass",
  "e566e25b": "Clear nonAnnotatedClasses cache in afterSingletonsInstantiated",
  "ad538677": "ContentCachingRequestWrapper supports content cache limit",
  "83929b2b": "Improve performance of StringUtils.capitalize()",
  "311522bc": "Run reactive integration tests only as part of performance group",
  "b3fa1b40": "Synchronized updates of STOMP header key cache",
  "774e4c3d": "Improve performance of StompEncoder",
  "084daa7f": "Document media type registration for appcache files",
  "1881aa5b": "Change default appcache manifest file extension",
  "e802f0e7": "Clarify use of Ehcache",
  "6d5af60a": "Expose DefaultSubscriptionRegistry's cache limit through SimpleBrokerMessageHandler and MessageBrokerRegistry",
  "2bf9bc31": "Remove Guava cache support",
  "4102c627": "Fixed ambiguous sentence in conditional cache documentation",
  "86557f25": "ConcurrentMapCacheManager recreates caches when initializing ClassLoader",
  "fdb31cd7": "Check actual cache value for unwrapped Optional",
  "240f254b": "Allow @Cacheable method to return java.util.Optional variant of cached value",
  "82778e17": "Fix copy & paste error for cache schema",
  "ebeba438": "Document context cache size control in the TCF in reference manual",
  "e18d5b59": "Limit size of context cache in the TestContext framework",
  "8bfba6a0": "EhCacheManagerFactoryBean logs cache manager name",
  "14bf6509": "Consistent cache key implementation across transaction and cache attribute sources",
  "23f3fff3": "Replacing potentionally slow and infinite while loop by a latch",
  "0597ff10": "Bsh/GroovyScriptFactory reset script cache in case of compilation error",
  "4c964473": "Defensively close jar files from non-cached JarURLConnections",
  "c4117885": "Refine AntPathMatcher optimizations",
  "a6d31d52": "Merge pull request #957 from soldierkam/cache-alloc",
  "e77ff3c9": "Improve AntPathMatcher matching performance",
  "6e7e4c03": "Merge pull request #948 from kamilszymanski/jcache-docs",
  "19d97c42": "Support for multi-threaded cache access",
  "fdc14a16": "AbstractApplicationContext clears ReflectionUtils cache as well",
  "34b596c6": "Polish cache javadoc",
  "c909789e": "Avoid mismatch between cached top-level versus nested parameter type",
  "44651fdf": "ObjectToObjectConverter caches detected methods/constructors",
  "3234d9ed": "ObjectToObjectConverter caches detected methods/constructors",
  "dd647659": "Rearranged cache test class names across several modules",
  "bf1afdfd": "Add cache tests for JCache",
  "98be36a3": "Extended default collection size for common per-bean caches",
  "7b711c4a": "AbstractAutoProxyCreator uses prefixed bean name as cache key",
  "2a2a8d3f": "Allow null values to be cached with `@CacheResult`",
  "e27df06f": "AnnotatedElementUtils consistently operates on actual annotation type if available (for performance reasons)",
  "c3dbaed4": "AnnotationUtils caches findAnnotation results in pre-synthesized form",
  "7ff915a0": "Enforce cacheLimit in DefaultSubscriptionRegistry",
  "75ea6f56": "Revised AbstractCacheManager for consistent locking when caches get added",
  "732a655f": "Reinstate performance test group assumption in SockJS tests",
  "48b965ad": "Improve performance of NumberUtils",
  "eef937e4": "Rename <mvc:cachecontrol/> to <mvc:cache-control/>",
  "09eb4920": "Merged bean definitions are now cached early and selectively evicted after post-processing and before actual bean creation",
  "8b507505": "Fix failure in performance build",
  "06a5ed9c": "AbstractApplicationContext resets common introspection caches after refresh",
  "08c032d9": "Allow Cache annotations to not specify any cache name",
  "bd787769": "Introduce 'synthesizable' cache in AnnotationUtils",
  "973582e7": "Introduce TestContextManager cache in SpringClassRule",
  "5cbe4b94": "Introduce dedicated 'cache' subpackage in the TCF",
  "6bc14cc7": "Add cache-related logs",
  "1273c90a": "ScheduledAnnotationBeanPostProcessor uses target class as cache key in case of proxy",
  "6b3092c2": "Clear expression caches on context shutdown",
  "c7b324b8": "Move cached expression evaluation abstraction",
  "d34402d3": "OperatorMatches caches compiled patterns",
  "8a47c181": "Assign Jetty SockJS tests to 'performance' test group",
  "ad71c6a9": "AbstractApplicationEventMulticaster populates ListenerRetriever cache in fully synchronized fashion",
  "fd7153ff": "Do not retain cache transaction managers",
  "67f18429": "Improve performance of generateKey",
  "da04362a": "Log context cache statistics in the TCF",
  "0e36402b": "Revised retrieval of cache strategy beans",
  "a13bb69c": "PropertyValue declares its cache fields as transient",
  "b16048b0": "ClassReader relies on autoboxing for reuse of cached primitive values",
  "6f987a9c": "Proper JCache metadata caching on non cache methods",
  "9d832816": "Further locking optimizations for the retrieval of non-singleton beans",
  "6f1acdd5": "Optimize ResolvableType cache",
  "0cc877ad": "MethodReference accesses cached executor in a thread-safe manner",
  "c508a70c": "MethodReference accesses cached executor in a thread-safe manner",
  "c52484ed": "CachedIntrospectionResults uses ConcurrentReferenceHashMap for its type descriptor cache",
  "7b93cefe": "Fix resource-chain XML syntax for cache",
  "7ea69fb9": "Improve ResolvableType.hashCode() for better performance",
  "d6b1cdc5": "Custom cache annotations and AspectJ",
  "78484129": "ConcurrentMapCacheManager recreates caches in case of setAllowNullValues change",
  "c2908399": "Investigate claim on SO regarding ctx cache in TCF",
  "fac0599a": "Add cache abstraction tests using JSR-107",
  "7a7641bd": "CachedSessionInvocationHandler properly caches createSharedConsumer results",
  "c84b30d4": "CachingDestinationResolverProxy for slow target DestinationResolvers",
  "083d415f": "Fix cache cleanup issue in DefaultSubscriptionRegistry",
  "682a910b": "ReflectionUtils caches Class.getDeclaredMethods() results; AnnotationUtils caches findAnnotation results",
  "938a2846": "Avoid pattern matching in isCglibRenamedMethod as far as possible (for performance reasons)",
  "9952973e": "Add missing cache-resolver attribute",
  "6a9b2292": "Split destination cache into access vs update",
  "c879796e": "Add cache limit to DefaultSessionRegistry and polish",
  "397aa829": "Fix expression cache",
  "2b89c1a8": "Improve cache abstraction chapter",
  "47a43271": "Add JSR-107 cache annotations support",
  "119dfd9c": "Fix cache decoration",
  "3c28301d": "Provide common cache config",
  "f06cad91": "Add custom cache manager per cache operation",
  "9859b970": "Consider a null ClassLoader (typically the bootstrap CL) as cache-safe",
  "33885736": "AbstractApplicationEventMulticaster only caches if event type and source type are cache-safe",
  "5dbcd76a": "Add doc section on configuration and performance",
  "38e7c477": "Cache.get(key, type) should also work in case of null value found in cache",
  "93c8b7ab": "DefaultListableBeanFactory only puts 'cache-safe' Class keys into its by-type cache",
  "9325a99b": "Merge pull request #462 from snicoll/cache-tx-tests",
  "319724f0": "Regularly purge ResolvableType cache",
  "d96b91a5": "Fix SerializableTypeWrapper equals() performance",
  "5068eb2e": "Add minor optimization to AbstractErrors",
  "ff26dfdd": "Added cache for path pattern tokenization",
  "a9605a11": "'acceptExisting' flag allows for sharing per cacheManagerName on EhCache 2.5+",
  "d4245610": "Fix performance test HSQLDB error",
  "de890fd1": "Synchronized cache creation on CacheManager",
  "b0b40dad": "Detect cache hit with multiple @Cachables",
  "639b2cb1": "Increase performance test timeout",
  "ea08d4b4": "Add .gradletasknamecache to .gitignore",
  "9cbac985": "Refined check for cache turnoff threshold",
  "a7af9505": "Avoid filling up AntPathMatcher cache",
  "6d882b14": "Add targetIsClass to SpEL property cache key",
  "823dbdf2": "Merge pull request #379 from Xaerxess/fix-doc-cache",
  "02cb8665": "Prevent cache of sockjs known prefixes from growing",
  "b7ff26aa": "Only cache resolved method when coming from ReflectiveMethodResolver",
  "296e2189": "Post SPR-8804 optimizations: better use of HC 4.3 APIs",
  "bf4563e2": "Include target types in MethodReference cache",
  "f9b12b83": "Include argument types in MethodReference cache",
  "f75d4e13": "Polish cache abstraction code",
  "b78fa271": "Assigned cache manager name in order to avoid EhCache assertion failure in case of multiple tests executed on the same VM",
  "db823ba1": "DefaultListableBeanFactory clears by-type matching cache on runtime register/destroySingleton calls",
  "d442c40e": "Added section on GemFire as a cache provider choice (SPR-9468)",
  "8c2ace33": "Support 'unless' expression for cache veto",
  "cb8dc73f": "Attempt to repro ReflectionUtils performance issue",
  "fc6377cc": "Add TimedSpringRunnerTests to performance test group",
  "944e1c95": "EhCacheManagerFactoryBean applies cacheManagerName ahead of creation (for EHCache 2.5 compatibility)",
  "6a5744e6": "CachedIntrospectionResults.clearClassLoader(null) removes cached classes for the system class loader",
  "a3211782": "AbstractCacheManager accepts no caches defined, allowing for EHCache default cache setup",
  "97ae403b": "AbstractAdvisingBeanPostProcessor caches per bean target class, working for null bean names as well",
  "4c0a3069": "Mark all IsFastEnough tests as performance tests",
  "68e3b777": "Segregate add'l long-running and performance tests",
  "60032e00": "Ignore performance-sensitive tests by default",
  "9deaefe7": "AbstractCachingViewResolver uses a cache limit of 1024 by default, avoiding overflow for redirect URLs",
  "0e2904b7": "Document cache and jdbc namespaces",
  "f6209cd7": "DefaultSingletonBeanRegistry avoids singletonObjects lock wherever possible for non-singleton factory performance",
  "0a3ea42f": "DefaultSingletonBeanRegistry avoids singletonObjects lock wherever possible for non-singleton factory performance",
  "c24825ca": "DefaultSingletonBeanRegistry avoids singletonObjects lock wherever possible for non-singleton factory performance",
  "e1d11ec9": "Do not cache PropertyDescriptors for autowireBean calls anymore, avoiding ClassLoader leaks",
  "3aa9ac15": "Update cache to support concurrent reads",
  "02ce826c": "Cache and late resolve annotations for performance",
  "0f119200": "Only cache by-type lookups if configuration has been marked as frozen",
  "538ce474": "Only cache by-type lookups if configuration has been marked as frozen",
  "abf341c3": "ResourceBundleMessageSource supports 'defaultEncoding', 'fallbackToSystemLocale', 'cacheSeconds'",
  "3fb3b7d6": "Work around JDK7 String#substring performance regression",
  "7d8843d0": "Expression detection properly handles cached String literals",
  "cec30a7a": "MessageSourceSupport uses locale-specific MessageFormat cache for default messages",
  "fdb9de14": "Use BufferedInputStream in SimpleMetaDataReader to double performance",
  "ecc6a5ae": "Improve SimpleStreamingClientHttpRequest performance",
  "08784f3b": "Apply cache settings consistently in EhCacheFactoryBean",
  "b91e989a": "JMS CachingConnectionFactory never caches consumers for temporary queues and topics",
  "c39a14a1": "Parse cache:annotation-driven key-generator attribute",
  "e9ab1a7a": "Update cache ref docs re 'args' vs 'params' naming",
  "02cd8681": "Normalize whitespace in cache reference doc",
  "312b1aa3": "+ add cache aspectj aspect",
  "cb3524ff": "+ fix failing cache tests + renamed afterInvocation to beforeInvocation (and changed the docs and tests accordingly)",
  "0a611aa7": "SPR-8082 + fix internal cache causing the multiple annotations key/conditions to overlap",
  "c2eafdb2": "AbstractCachingViewResolver caches unresolved view names by default ('cacheUnresolved'=true; SPR-8173)",
  "1bb6d29b": "AbstractCachingViewResolver caches unresolved view names by default ('cacheUnresolved'=true; SPR-8173)",
  "ac524330": "+ update cache docs",
  "d10f2258": "+ update aspectj cache aspects + update integration tests",
  "e90c7ead": "[SPR-7996] Improved documentation of the context caching mechanism in the TestContext framework: - now discussing cache key generation and uniqueness - now discussing cache scope, test suites, and forking",
  "03f6d235": "Reference @EnableCaching from spring-cache XSD",
  "3416a261": "+ add docs + rename cache:definitions to cache:caching (to be consistent with annotations)",
  "a252a285": "Convert cache package line endings from CRLF => LF",
  "42cbee88": "Add generics to AbstractCacheManager#caches",
  "7a71af29": "Remove stale duplicate copy of spring-cache XSD",
  "96200b69": "Refactor cache support test hierarchy",
  "b7f9bf2e": "Polish cache Javadoc",
  "8abb3150": "Fix cache generics warnings; polish whitespace",
  "473eaac1": "+ temporarily disable XML defs (since cache-update and cache-definition are not yet supported)",
  "cb146978": "Remove stale duplicate copy of spring-cache XSD",
  "e493887f": "+ update cache docs whitespace for better rendering",
  "e6d9b630": "some cache doc updates",
  "49b38190": "Fix typo in cache abstraction reference doc",
  "bd7fd57a": "Fix cache ref doc typo: Eh{c=>C}acheCacheManager",
  "63a217a4": "+ add XML support for cache abstraction (cache-advice) - DRAFT",
  "79ed87e3": "updated cache aspect after CacheAspectSupport base class changes",
  "abdae3d2": "general revision of cache package; added ConcurrentMapCacheManager",
  "8224af19": "[SPR-8549] ContextCache is now keyed by MergedContextConfiguration instead of String; MergedContextConfiguration now implements custom hashCode() and equals() methods and no longer generates a context cache key.",
  "26dbfba6": "SPR-8477 + add no-op cache implementations suitable for cache declarations w/o a backing store",
  "dbe96b5c": "[SPR-7326] MergedContextConfiguration now ensures that it holds non-null arrays with proper semantics for TestContext's cache key generation.",
  "3f58da1c": "[SPR-7326] Added unit tests to verify proper semantics of TestContext's cache key generation.",
  "7be1b5c3": "revised cache abstraction + remove generic signature on key generator (as the type is not used anywhere) + add a small improvement to CacheAspect to nicely handle the cases where the aspect is pulled in but not configured",
  "b39673aa": "revised cache abstraction - removed generics from Cache/CacheManager (they add no value since it's an SPI not API) + update docs and tests + renamed ConcurrentCacheFactoryBean to ConcurrentMapCacheFactoryBean",
  "dadd0f57": "revised cache abstraction - removed AbstractDelegatingCache (a cache is not a map, no need to offer a template) + renamed ConcurrentCache to ConcurrentCacheMap",
  "8dfcae53": "revise cache API + update failing test",
  "0eb40e1e": "revise cache API + update failing test",
  "dea1fc93": "revise cache API + update failing AJ test",
  "861e4817": "revise cache API + update failing test",
  "3699a037": "revise cache API + add missing files (remember to check 'show unversioned files')",
  "0b917e3f": "revise cache API - eliminate unneeded methods + introduced value wrapper (name still to be decided) to avoid cache race conditions + improved name consistency",
  "eb4b68ff": "SPR-8007 SPR-7832 + expose the invocation params through the cache root object + update javadocs",
  "a4aca640": "+ fix bug that prevented internal expression cache from being used",
  "5daad3e0": "SPR-8006 + fix contains/get race-condition of caches (by adding an extra cache call)",
  "523a83ca": "SPR-8008 SPR-8023 + fix bug in Ehcache cache that considered expired entries for key checks",
  "fb57316a": "renamed EhcacheCacheManager to EhCacheCacheManager",
  "ca2dbc1c": "renamed EhcacheCacheManager to EhCacheCacheManager",
  "4da39b48": "moved cache abstraction from context.support to context",
  "182b6a43": "+ fixed cache xsd minor typo",
  "4e50eafe": "Small performance improvement",
  "42403a37": "getPropertyTypeDescriptor implementation optimization",
  "67d9b8b9": "EhCacheManagerFactoryBean properly closes 'ehcache.xml' input stream, if any (SPR-7813)",
  "bfb3003c": "SPR-7308 + wrapping up cache documentation + plug in cache docs",
  "29a8ca4e": "SPR-7308 + draft cache documentation",
  "18e141cb": "SPR-7308 + optimize updating of multiple caches",
  "faf01b03": "SPR-7308 + add support for multiple cache names + require each annotation to specify a cache name + add method support in Key generator interface + add bug fix for embedded JDK concurrent declaration",
  "01e79cfe": "SPR-7703 - minor performance improvements to servlet and portlet handlers",
  "be21358d": "reintroduced getHandler(request, cache) in deprecated form (after removing it in 3.0.4)",
  "3c067e5d": "optimized AnnotationUtils findAnnotation performance for repeated search on same interfaces (SPR-7630)",
  "1f1577e3": "fixed @Value injection to correctly cache temporary null results for non-singleton beans (SPR-7614)",
  "1933b648": "fixed @Value injection to correctly cache temporary null results for non-singleton beans (SPR-7614)",
  "27a10c74": "resolve dependency outside of synchronized block before subsequently preparing cached arguments (SPR-7635)",
  "5be94731": "initialize cache Maps early, turning them into final fields",
  "aab05c4d": "Minor correction to doc updates made as part of SPR-7545 - 'cache-period' attribute was incorrectly documented as 'cache-seconds'.",
  "3e5aca86": "fixed no-message-received commit case for non-cached Sessions (SPR-7478)",
  "a032ce12": "renamed 'mapping-order' to 'order'; added 'cache-period'",
  "f25a04c6": "fixed JMS CachingConnectionFactory to correctly cache a producer without fixed destination as well (SPR-7148)",
  "3a5af35d": "CachedIntrospectionResults only caches GenericTypeAwarePropertyDescriptors if fully safe (SPR-7227)",
  "2136b04b": "added limit for parsed SQL cache to NamedParameterJdbcTemplate (SPR-7237); added configurable cache limit to CachingMetadataReaderFactory",
  "86906d1b": "checking in performance tests",
  "e6038928": "caching optmizations and performance tests",
  "594596f3": "cache invalidation",
  "64d6a42d": "improved conversion system logging, collection converter simplification/polish, several optimizations, annotation-driven formatting caching",
  "2dd11343": "SPR-6941: part (1) correct exception handling when null cachedExecutor",
  "09f02bc6": "use WeakHashMap for DataSource-keyed cache (SPR-6887)",
  "ee2b1cde": "SPR-6775 + remove class definitions for sticking around (by forcing eager metadata initialization) + improve cache size by eliminating the numbers of method metadata objects created + improve lookup access on method metadata",
  "b32c4cfb": "SPR-6775 + replace the vanilla hashmap with a quick-and-dirty, JDK based, fixed LRU cache",
  "265084cb": "fixed retriever cache putting",
  "e5d4ffc1": "reset retriever cache when adding/removing listeners (SPR-6624)",
  "04e08d69": "Updated docbook files to use Docbook 4.5 DTDs, so it uses the locally cached versions",
  "eb0b4f0c": "added support for Hibernate 3.3 RegionFactory cache SPI to LocalSessionFactoryBean (SPR-6387)",
  "acf574c3": "added conversion service performance optimizations; added mapping cyclical ref handling; removed ConverterInfo in favor of specifying S and T at registration time if necessary",
  "8eca898d": "removed outdated 'cacheJspExpressions' feature from ExpressionEvaluationUtils",
  "f323a5bb": "fixed broken classpaths for ehcache and junit",
  "ea9d8925": "next cut of JavaConfig metadata reading revision: using cached MetadataReaders",
  "81e683b3": "CachedIntrospectionResults always caches bean classes except in case of custom BeanInfo (SPR-4876)",
  "84cc3252": "type variable cache uses weak values",
  "57874a60": "SmartApplicationListener interface supports source type checking; SimpleApplicationEventMulticaster caches information about event/source matches",
  "cc5d3ec3": "Increased timings of performance test, because the 100 ms does not work on our CI server."
}, "spring-security": {
  "aad3e61f": "chore: Use cache in continuous-integration-workflow.yml",
  "e0d676c0": "SecuredAuthorizationManager should cache annotation's value",
  "56b9badc": "AnonymousAuthenticationFilter should cache its Supplier<SecurityContext>",
  "57d212dd": "Use cache and user.name system property on Windows",
  "47a56657": "Use cache and user.name system property on Windows",
  "66da4301": "Use cache and user.name system property on Windows",
  "865bf23e": "Use cache and user.name system property on Windows",
  "c87c5eb8": "Update ehcache to 2.10.9.2",
  "349cdf7e": "Update ehcache to 2.10.9.2",
  "ae532c08": "Add server request cache that uses cookie",
  "bdc60a91": "Don't cache requests with `Accept: text/event-stream` by default.",
  "cc956a66": "Don't cache requests with `Accept: text/event-stream` by default.",
  "365e6c11": "Upgrade com.fasterxml.jackson.core to 2.9.10",
  "1445d1b0": "Allow configuration of request cache through nested builder",
  "19de13bd": "Issue 6731 improve performance of checking headers",
  "4d1a23b6": "Update to ehcache 2.10.6",
  "c111f590": "Update to ehcache:2.10.5",
  "ea3dd336": "Cache headers only if no cache headers set",
  "df3b8bc2": "Add Spring MVC test for override cache control",
  "69274d9a": "SEC-2521: Improve StandardPasswordEncoder performance",
  "3b8f7fdd": "SEC-2732: ehcache-core -> ehcache",
  "01ea39ce": "SEC-2114: Provide Spring Cache Abstraction based cache implementations",
  "2be2660b": "SEC-1636: Add optimizations for simple pattern cases in AntPathRequestMatcher. '/**' and '**' are treated as universal matches and a trailing '/**' is now optimized using a substring match.",
  "bfb723fe": "SEC-1557: Added getter to DelegatingMethodSecurityMetadataSource. Also added some optimizations of cache lookup key equals method. A class type check is unnecessary since the key class is a private inner class.",
  "2d9f98d5": "SEC-1412: DefaultSavedRequest should ignore 'If-Modified-Since' headers to prevent re-displaying the login form (the cached result of the original request).",
  "dca0fd87": "SEC-1532: Add cache of previously matched beans to ProtectPointcutPostProcessor to ensure that it doesn't perform pointcut matching every time a new prototype bean is created.",
  "97bc2406": "SEC-1519: Added extra constructor to make sure strategy objects are initialized before the first attempt to retrieve an object from the Acl cache.",
  "ea5f2088": "Comment out OpenLDAP tests to allow running in IDEA, and reduce default load configuration of performance test class.",
  "8df356de": "SEC-1471: Allow use of a RequestMatcher with HttpSessionRequestCache to configure which requests should be cached by calls to saveRequest.",
  "f5468087": "Remove cached DiscoveryInformation from session in OpenID4JavaConsumer's endConsumption method.",
  "a5a95a8e": "Upgrade jython and disable cachedir.",
  "43f0e111": "SEC-1429: Removed cached authentication from session after successful authentication.",
  "adfac7e7": "Added gradle file for cas and standardised ehcache version",
  "fa740474": "SEC-1167: Introduce more flexible SavedRequest handling. Add namespace support for a custom RequestCache through the request-cache element.",
  "0d7b990e": "SEC-1184: Moved ACL cache classes and interface out of jdbc package.",
  "83da7be2": "Remove (ticket) cache package from CAS module. Unnecesary and has a circular reference.",
  "6b53703e": "SEC-1187: Moved pre-authentication status check inside try/catch block and repeated the call after reloading the user during the 'cacheWasUsed' logic.",
  "6db9a3fa": "Minor debugging optimizations.",
  "c564a879": "Some tests used for obtaining performance data.",
  "bb457e1d": "SEC-957: logger.debug without guard causing massive performance hit http://jira.springframework.org/browse/SEC-957. Added debug logging guard as requested.",
  "64442b66": "SEC-590: Correct misuse of 'continue' keyword so ACLs retrieved even when last element is already cached.",
  "340020ad": "SEC-655: Evict from the cache any children ACLs of the ACL being updated.",
  "833b76c0": "SEC-676: Remove child ACLs from cache during delete.",
  "1463b976": "SEC-629: authentication-provider doesn't support caching. http://jira.springframework.org/browse/SEC-629. Added support for cache-ref elements on jdbc-user-service and ldap-user-service",
  "cd61d76a": "SEC-719: Refactor portlet code to make more use of core classes http://jira.springframework.org/browse/SEC-719. Removed portlet-specific cache interface and implementations in favour of using (identical) ones from core.",
  "abd5e384": "removed unused eh-cache config file",
  "89415e3e": "SEC-693: RoleVoter can improve performance http://jira.springframework.org/browse/SEC-693",
  "659fe530": "Corrected wrong bean reference in cas sample and removed dependence on taglibs. Upgraded ehcache version to match core.",
  "5187f89f": "SEC-679: Removed use of MockApplicationContext and improved use of ehcache (shutting down cache managers after tests are run). Upgraded ehcache version to 1.3 as used in Spring pom.",
  "248d97c9": "SEC-513: Added support for cache flushing after updating or deleting data in JdbcUserDetailsManager.",
  "3f123e14": "SEC-518: Fix. 'Cache' in EhCache is a class, so change the APIs to use the interface it implements (Ehcache).",
  "5d64b868": "Removed user cache from tutorial app context, as it's session -based.",
  "048ee65f": "changed ehcache version to 1.2.4 as a part of creating 1.1.0 rlease",
  "5364db2c": "SEC-328: Avoid unnecessarily hitting backend a second time, if the cache wasn't used in first place.",
  "1b66467f": "Added ldaptemplate, ehcache and spring-mock dependencies.",
  "3eaed3ad": "Added additionalAuthenticationChecks implementation to make sure password is rechecked if Ldap is used with a user cache.",
  "36c09685": "SEC-223: Improve hashCode() performance.",
  "8f6275ab": "SEC-155: BasicaclEntryCache to provide 'remove from cache' support.",
  "5f75e9bf": "Refactor Authentication.isAuthenticated() handling to be more performance (as per developer list discussion).",
  "a163fc48": "A whole bunch of changes to the LDAP Authentication process. It should be both more object oriented, and faster.",
  "05bd6abb": "Added cache beans.",
  "944d11bb": "Changed to using DN in cache log messages rather than entire certificate.",
  "7db94cb5": "X509 UserDetails cache interface and implementation",
  "d47a2190": "Correct test failure on high performance JREs.",
  "6370fadf": "FilterSecurityInterceptor now only executes once per request (improves performance with SiteMesh). Suggested by Sanjiv Jivan.",
  "01fed081": "updated ehcache dependency to 1.1",
  "4bcc1222": "Modifications to support EH-CACHE upgrade (EH-CACHE appears to have changed the way the default cache configuration file gets handled).",
  "76c82db1": "Refactor EH-CACHE integration classes to work with Spring IoC provided Cache rather than manage our own cache internally.",
  "ac3d3483": "Improve performance of JBoss container adapter (thanks to Sergio Bern�).",
  "8d973af6": "Added MethodDefinitionSourceAdvisor for performance and autoproxying.",
  "b5cbcdc5": "Refactor DaoAuthenticationProvider cache model.",
  "1b24ff5e": "Refactor DaoAuthenticationProvider cache model.",
  "b6cb84e9": "Improve robustness so if ApplicationContext not shutdown correctly (thus destroy() not called) the cache will not fail on subsequent startups.",
  "b6e0c307": "Fixed issue with hot redeploy as cache not being closed."
}, "spring-security-oauth": {
  "bb4e363": "Set cache control headers for implicit grant response",
  "1355273": "Fix potential cycle caused by cached details in token services",
  "f4842d9": "SECOAUTH-363: add old-style Pragma: no-cache to error responses",
  "bd69420": "SECOAUTH-164: consolidate to single cache and fix redirects on refresh not supported to not require re-authentication"
}, "springside4": {
  "64c14e5": "update 3pp version, spring 4.0->4.0.1(bug fixing), jedis 2.2.1->2.3.0(apache connection pool from 1.5->2.0,support SCAN and WAIT), logback 1.0.3->1.1.0(bug fixing), powermock 1.5.3->1.5.4, ehcache 2.6.6->2.6.8, cxf 2.7.8->2.7.9,",
  "7202262": "rollback, ehcache 导致ut和ft不能一起跑",
  "8cd8965": "updat travis to fail fast, if unit test error, stop test the project",
  "12db040": "update 3pp version httpclient 4.2.5->4.3.0 , spring-data-jpa 1.3.4->1.4.1, spymemcached 2.9.1->2.10.0, guava 14.0.1->15.0, install plugin 2.4->2.5",
  "28758b2": "#223 使用m2e插件取代mvn eclipse:eclipse插件，并且，spymemcached终于放回中央库了，不需要连接它的私库了。",
  "9a7871e": "#78 Shiro使用更新。 1. 对Cache的使用，默认使用ehcache 120秒自然失效，而不是进行cluster level cache的即时清理。 2. 代码进一步清理。",
  "a9a5258": "#57 多个ehcacheManager，需要在配置文件中给予不同的名字",
  "c867b9f": "#57 将ehcache的hibernate 2nd Cache搬回Showcase",
  "e6fd0c3": "不再由Springside自建repository提供central没有的3pp jar包. 1.log4jdbc使用log4jdbc-remix, 在central能直接下包. 2.SpyMemcached也直接使用其自己的repository。",
  "7a0e381": "jmemcached 也用spring profile, 并设定maven jetty:run使用development profile",
  "48e4e9a": "cleanup,SpyMemcachedClient cleanup",
  "34442bc": "#9 shiro使用Ehcache RMI集群做授权缓存.",
  "c370f8e": "#9 ehcache demo cleanup",
  "1cb90c9": "#9 shiro使用Ehcache RMI集群做授权缓存.",
  "4f2e245": "#9 Ehcache配置中默认值部分不再重复配置，配置命名使用2.0的命名，在showcase中使用了按Size做的限制。",
  "ee296c1": "set socket timeout in functional test case for the slow jenkins.",
  "5a33b46": "Improvement #11 Shiro应用补全, 抽取password逻辑到password service, 并打开cache认证信息的选项",
  "36e909a": "更新Hibernate + Ehcache的配置. 不再使用hibernate-ehcache.jar而是用ehcache自带",
  "1de0080": "Issue #17 在github上创建Maven Repository并更新Spymemcached,log4jdbc的版本",
  "66ac15f": "Issue #17 在github上创建Maven Repository并更新Spymemcached,log4jdbc的版本",
  "f474f3c": "Unstable case in the slow ec2",
  "0e83719": "Fix jenkins radom fail in slow machine"
}, "spruce-android": {
  "": ""
}, "sqlbrite": {
  "b4fea5f": "Expose getReadable|WriteableDatabase, don't cache instances.",
  "3572936": "Merge pull request #97 from square/jw/slow-scheduler",
  "e6c781a": "Guard against a slow scheduler with backpressure strategy.",
  "31d6141": "Merge pull request #88 from square/jw/faster-tests",
  "c8021b7": "Remove upper-bound from timing tests for slow cloud CI."
}, "ssm": {
  "": ""
}, "SSM": {
  "": ""
}, "starrocks": {
  "d2541900": "[Enhancement] Make orphan files deletion more reliable and faster for cloud native table (#23480)",
  "65cc282a": "[Enhancement] cache iceberg database in a query session (#23897)",
  "bd2ce097": "[Enhancement] Optimization the performance of to_bitmap (#23824)",
  "a6bde652": "[Enhancement] opt the performance of bitmap_agg<int> (#23737)",
  "552707d6": "[Doc] update enable_cache_list_names default value (#23682)",
  "333bb8af": "[Doc] rename local cache as data cache (#23648)",
  "2bb741a3": "[Enhancement] Add a lru insertion point option to block cache to support inserting the new (#23267)",
  "9e03202a": "[Enhancement] Optimize a subtle inline performance problem (#23300)",
  "4e50d20d": "[Doc] update lake table wording in query cache (#23340)",
  "af0fffa9": "[Enhancement] aarch64: optimizations to test_hash, make_mask using Neon intrinsics (#22948)",
  "e5c16a09": "[Enhancement] Populate the block cache with the 'overwrite' option to avoid checking the existence (#22090)",
  "f8575448": "[BugFix] Automatically create block cache directories with `std::filesystem` to avoid importing fs_util.h (#22965)",
  "dda42eb0": "[Enhancement] Automatically create block cache directories if it is configured but not exist. (#22811)",
  "09c12a2d": "Update starcache commit (#22771)",
  "69e030ee": "[Refactor] Forbid decimal fast mul in UT for non-x86_64 target (#22741)",
  "85e74a5b": "[BugFix] Fix bug ttl_number use current time during optimization refresh (#22625)",
  "e3a904e2": "[Doc] improve document of performance optimization (#22522)",
  "c9b2ba9d": "[Enhancement] Disable page cache for spark/flink sql (#22473)",
  "97b551d5": "[Doc] update query cache (#22596)",
  "c98e9117": "[Enhancement] Consider ttl_number during optimization refresh (#22404)",
  "4cbcda96": "[Feature] Don't use hive partition file cache when executing 'insert into target_table select from hive table' (#22272)",
  "4615b0fe": "[Refactor] refactor filename in delta column group & delta column cache (#22094)",
  "9edd2cbf": "[Enhancement] Add starcache content directory to .gitignore to avoid untracking warning message. (#22177)",
  "5517f570": "[Doc] add azure&google storage and two-level cache (#22164)",
  "ba54aac8": "[Enhancement] limit max auto increment cache size (#21249) (#21251)",
  "bb4ae3c7": "[Enhancement] Skip the starcache installation when building starrocks BE. (#21823)",
  "fecb88e5": "[BugFix] Allow large meta objects in rocksdb block cache to prevent slow BE restart (#21876)",
  "b0d0533f": "[Enhancement] Avoid using page cache when collecting statistics (#21801)",
  "cb8ff23a": "[Enhancement] Make the number of thread that async lazy refresh the remote file cache configurable. (#21676)",
  "b0d98a74": "[BugFix] Update the starcache submodule to avoid linking some dynamic libraries to starrocks_be (#21564)",
  "f2fbbf21": "[Enhancement] Import starcache submodule to support DLA block cache. (#20927)",
  "929509ff": "[Doc] update query cache (#21351)",
  "05e8f5ec": "[Enhancement] Improve refresh external table performance (#21265)",
  "6d90b219": "[Bugfix] Missing last empty EOS chunk caused query cache hangs (#20699)",
  "52317c7e": "Optimize the performance of bitmap_contains on cross join for non-pipeline engine (#20653)",
  "282f66f4": "[Enhancement] Not fill old version data into local cache in compaction and schema change (#20456)",
  "a05e8bde": "Revert '[Enhancement] Import starcache submodule to support DLA block cache. (#20164)' (#20422)",
  "ed55db7d": "[Enhancement] Import starcache submodule to support DLA block cache. (#20164)",
  "02193f45": "[Tool][Dockerfile] artifact dockerfile enables cache and staros build option (#20385)",
  "fc79fbc9": "[BugFix] Storage cache ttl should be 0 when disable storage cache (#20185)",
  "704c9c46": "[BugFix] fix cmake file in block cache submodule (#20291)",
  "f0803f04": "[Enhancement] Disable enable_cache_list_names temporarily (#20195)",
  "3a624f43": "[Enhancement] Add primary index cache memory limitation (#18392)",
  "bfddaac2": "[Doc] Update query cache (#20082)",
  "92f5b667": "[Refactor] refactor lake tablet local disk cache statistics (#19851)",
  "f82af2dc": "[Feature] Configure starlet cache in storage dir (#19778)",
  "bc2f90fd": "[Doc] update query cache (#19962)",
  "b9b15d07": "[Enhancement] Add an simple HDFS client cache limit in BE (#19718)",
  "ae6ae3db": "[Doc] delete SUSE faq, query_cache_force and modify lateral join (#19724)",
  "58727735": "[Enhancement] Move io coalesce input stream below cache input stream (zero-copy feature) (#19584)",
  "f8cfaf45": "[Enhancement] set starlet cache thread_num in BE (#19631)",
  "27b156f8": "[Enhancement] LakeTable support query cache (#19572)",
  "0cad25ae": "[BugFix] DecodeNode report 'All slotIds should be remapped' when query cache enabled (#19560)",
  "35273c48": "[Doc] update query cache (#19437)",
  "4245569d": "update local cache, catalog, json (#19382)",
  "4a3be4c6": "[BugFix] fix the CachingFileIO had wrong length and support pin/unpin for disk cache (#18892)",
  "8719e5dd": "[Enhancement] optimize mv rewrite plan performance (#19020)",
  "9441456c": "[Tool] disable block_cache on arm build (#18160)",
  "967006bd": "[Enhancement] hive metastore cache max num is configurable by catalog properties (#19069)",
  "0478d687": "[Doc] mod enable_hive_metastore_cache in catalog (#19047)",
  "d39311fd": "modify enable_hive_metastore_cache to enable_metastore_cache in external catalog doc (#18940)",
  "57a71da9": "[BugFix] fix lake pk index cache ref leak and update delvec cache strategy (#18770)",
  "bcb154ec": "[BugFix] Fix Lowcardinality optimization could not work in Materialized View (#17425)",
  "b1757f17": "Support iceberg metadata two level cache (#18730)",
  "4da86e84": "[Enhancement] Set the default `block_cache_checksum_enable` to `false` to avoid the checksum overhead, (#18721)",
  "c7317c79": "Support iceberg local disk metadata cache (#18112)",
  "18c83e54": "[Enhancement] Only send valid and invalid dict cache columns info once (#18658)",
  "8158d834": "Revert '[Enhancement] OlapTableSink of non-pipeline engine support fast cancel (#15398)' (#18609)",
  "0a51466f": "[Enhancement] add block cache stats (#18510)",
  "38cc2b53": "[Enhancement] Add cache statistics in lake query profile (#18476)",
  "8e71e9b9": "[Doc] update a note in local cache (#18611)",
  "6954f607": "[Enhancement] Fix performance problem of operator's mem tracker (#18452)",
  "ca8ff416": "[Enhancement] Support pagecache dynamically enabled or disabled (#18101)",
  "cf7e6895": "[Doc] update query cache - per tablet unit (#18050)",
  "5d42081d": "[Doc] update 2.5 local cache and variable (#17746)",
  "1008900a": "[Enhancement] Rank window function optimization supports multi partition columns (#17544)",
  "bc50e5d4": "[BugFix] fix block cache key beause of undefined behaviour (#17517)",
  "fbc4a46d": "[Enhancement] Improve collect cte operator performance (#17049)",
  "c995d56d": "[Enhancement] avoid build slice cache in BinaryColumn (#17362)",
  "d3703724": "[BugFix] Fix the problem of slow `show frontends` when the Kubernetes pod restart (#17341)",
  "c1186aa4": "[Doc] update query cache (#17327)",
  "ff6b023f": "[BugFix] Update cachelib library to adapt the cpp abi compatibility with starrocks. (#17090)",
  "3be64e43": "[BugFix] Fix the thrift library conflict in some cases by linking the required cachelib dependencies statically (#16674)",
  "3a4ca5c1": "fixup one-phase aggregation fails to use query cache (#16705)",
  "4128a97b": "Update query_cache.md (#16697)",
  "12cdb444": "[Enhancement] FE support Join in query cache (#14728)",
  "d691145f": "[Enhancement] optimize sequential reading binary column performance (#16519)",
  "e237d324": "update figures in query cache (#16637)",
  "b22695da": "[BugFix] _query_context should be released before _runtime_filter_cache during gracefully shuting down (#16417)",
  "8c04b6c2": "[Enhancement] Optimize the performance for regexp_replace (#16356)",
  "1982805d": "[Doc] add content for block cache (#16307)",
  "4c2e089b": "[Enhancement] Reduce cache miss when evaluate lots of expr in aggregate (#15998)",
  "db1490b3": "Update query_cache.md (#16139)",
  "3b5f8feb": "segment replicate executor support fast cancel (#15969)",
  "6bc5301b": "[Enhancement] OlapTableSink of non-pipeline engine support fast cancel (#15398)",
  "3f1a5180": "Update query_cache.md (#15621)",
  "a4256ee0": "load support fast cancel (#15514)",
  "1911715c": "[BugFix] Fix pagecache memtraker statistics error (#15405)",
  "96962b62": "[doc] update query cache (#15449)",
  "b58ed252": "Update query_cache.md (#15349)",
  "994235f9": "[Doc]add release note and metadata cache for 2.5 (#15269)",
  "8bc2f5d4": "Update query_cache.md (#15256)",
  "59669dda": "[Doc] add 2.5 query cache (#15204)",
  "1fd276ce": "[Enhancement] enable storage cache by default for lake table (#15176)",
  "034bc543": "[BugFix] Update cachelib to support deployment via scp. (#15147)",
  "9fa1ea32": "[Enhancement] Skip filling local cache on writing GC.json (#14987)",
  "4e3418ca": "[Enhancement] optimize performance of percentile_cont function (#14609)",
  "88cfa943": "[BugFix] Fix broker load parallel performance issue since chunk buffer limit to one (#14636)",
  "e56943a0": "[Enhancement][Lake] Drop disk cache after GC (#14231)",
  "33980f8e": "[Enhancement] filesystem API for dropping local cache (#14594)",
  "5f178046": "[Enhancement] Enable skip filling local cache (#14496)",
  "ca600194": "[BugFix] fix read cache bytes (#14421)",
  "1c7d3fe9": "[Feature] Support Lowcardinality optimization in LakeTable (#12621)",
  "c92ba1dd": "[BugFix] query whose group-by and having clause depends on agg columns of aggragate table/mv can not use multiversion cache (#14141)",
  "be97f6b1": "[Enhancement] Improve orc chunk reader performance (#13779)",
  "daa0362d": "[Enhancement] use remote persistent uri as cache identifier (#13955)",
  "5fc6de21": "[BugFix] Turn off the default block cache switch because compatibility issues with some linkers. (#13729)",
  "d940e8a5": "[Enhancement] Improve performance of `strings::memcpy_inlined` (#13330)",
  "af6de8bc": "[Enhancement] invalidate resource mapping catalog table cache when dropping external table (#13472)",
  "0664c101": "[BugFix] Fix the `show_be_version.sh` script execute error due to the lack of cachelib dependency. (#13411)",
  "069c66f0": "[BugFix] Fix the bug of slow execution of show frontends #13340",
  "e8af4248": "[BugFix] update storage_cache_ttl default 30 days (#13228)",
  "a65b1b6a": "[Enhancement] Improve performance of 'show proc '/catalog/catalog_name'' (#12984)",
  "5d369936": "[Enhancement] Detect Too many versions to avoid failure due to too fast statistics collection (#13235)",
  "1308634e": "[Enhancement] Support cache persistence for block cache (#13207)",
  "0727378f": "[Enhancement] improve performance of array_agg function (#13057)",
  "47482dda": "remove not-required manual cache.prune (#13033)",
  "5cf80ae2": "purge zero-charge cache entry (#12993)",
  "89e437c1": "[Enhancement] add privilege collection cache (#12964)",
  "94b67cb6": "[Feature] Multiple eos countdown in query cache (#12806)",
  "e7389de8": "[Enhancement] add variable `enable_populate_block_cache` (#12566)",
  "d0b53ce0": "[Enhancement] Add a configuration item to control data checksum for block cache (#12622)",
  "c2103367": "[Enhancement] ignore error when write cache failed (#12559)",
  "3e633e2c": "[Refactor] Fix performance-2 by clang-tidy (#12679)",
  "13c01273": "[Refactor] Fix performance complaint by clang-tidy (#12678)",
  "215dfa3b": "[BugFix] Update cachelib package to include libaio dependency. (#12560)",
  "4d557aa3": "cache manager and post-agg operator shared the same chunk mistakely (#12528)",
  "a18a1bde": "[Enhancement] add option to disable disk cache (#12507)",
  "ee639bc7": "[Enhancement] support to read cache in any size instead of whole block (#12390)",
  "8986ec87": "use memory_usage instead of bytes_usage to account the memory usage of cache entry (#12446)",
  "8ed3f6fa": "[Enhancement] add cache metrics (#12252)",
  "75cb4952": "[Enhancement] some trivial optimizations(#12033)",
  "1a1ccac0": "[Enhancement] Support adjust cachesize automatically (#11810)",
  "a3ab2b87": "[Feature] Add page cache metrics (#12047)",
  "e0e8e27e": "[Refactor]Refactor hive meta cache and connector framework (#11915)",
  "f8bcb588": "[Feature] Multiversion cache (#12015)",
  "2630f07d": "[Enhancement] make block cache more flexible. (#11731)",
  "8db08e98": "[Feature] Introduce query cache framework (#9194)",
  "4e5f7a65": "[Enhancement] trivial optimizations on parquet parser (#11912)",
  "e1102714": "[Enhancement][Lake] Does not fill segment cache when doing compaction (#11773)",
  "39408dca": "[Feature] Add a block cache module to improve external table query performance (#11579)",
  "152c8f19": "Fix object column query stats cache throw semantic exception (#11554)",
  "30c4b1d7": "[Enhancement] Change page cache capacity by users (#11157)",
  "5a4cd961": "[Feature] Add Partition pojo to cache information (#11373)",
  "48f432c0": "[Enhancement] Optimize mem usage and performance of check strings length (#11334)",
  "1a0133af": "[Enhancement] use mem_limit to initialize page cache and calc max consistency mem (#11300)",
  "74007ec4": "[Refactor] Refactor lake table storage cache info (#11032)",
  "9057e370": "[Enhancement] open the page cache by default (#10482)",
  "6c0bb954": "[Enhance] introduce fastpath for merge nullable column (#10964)",
  "c9c8ff60": "Could populate column statistic cache after Analyze table manually (#10351)",
  "68da5362": "Fix staros starlet cache settings (#10383)",
  "b589485d": "[BugFix][Lake] Use full path of segment as cache key (#10366)",
  "109e4425": "[Feature] add configuration for fs.hdfs.impl.disable.cache (#10060)",
  "6324ba50": "[Bugfix]New partition for lake table inherit table cache properties (#10101)",
  "98481a36": "[Enhancement] Support optimizer performance test util (#10105)",
  "8e57377d": "[Enhancement] Optimize ingestion performance for table with materialized index (#7062)",
  "67493c90": "[Enhancement] Optimize exchange sink shuffle performance (#9120)",
  "8a92ffeb": "[Bugfix] fix miss string function in MAX/MIN function when enable dictionary optimization (#9632)",
  "cb8bacf9": "optimize performance of json_query functions (#9614)",
  "95b5e697": "[Enhancement] Improve the performance of extract conjuncts/disjuncts (#9332)",
  "8e60a000": "[Enhancement] improve CompoundPredicateOperator hashcode performance (#9186)",
  "d75fe494": "[Enhancement] optimize aggregate performance for nullable column (#9080)",
  "f56577e2": "Fill cache configuration before creating new cache filesystem (#9087)",
  "ba103d51": "[Bugfix] Fix the problem that dictionary optimization cannot get the dictionary after exceeding the cache capacity (#8946)",
  "f83dcf60": "[Enhancement] Support rewrite window function sort partition by in lowcardinality optimization (#8957)",
  "ef120732": "[Lake] Create shard with cache property (#8977)",
  "daec4473": "[Bugfix] Fix wrong result when process 'is null' in condition expr in dictionary optimization (#8869)",
  "9c26d3d3": "[BugFix] fix runtime filter cache use: hold shared pointer to avoid invalid pointer. (#8944)",
  "a7e493af": "[Enhancement] In-memory segment metadata cache for lake tablet (#8690)",
  "38000369": "[Lake] Support lake table storage cache property (#8488)",
  "4e636597": "[Enhancement] Support multi-column global dictionary optimization (#7939)",
  "f674d92d": "[Lake] Integrate starlet cache filesystem (#8391)",
  "1cb506a7": "[Enhancement] to get row num and data size together in order to faster, avoid a lock/duplicate code (#8357)",
  "7393e8b7": "[Bugfix] fix hive column stats cache bug (#8455)",
  "8a4d6189": "[Enhancement] Window function binary search optimization (#7996)",
  "52bfe631": "[BugFix] Fix return non-existent codes in global dictionary optimization (#8034)",
  "04cb09ee": "Revert '[Enhancement] window function binary search optimization (#7902)' (#8032)",
  "d993742c": "[Enhancement] window function binary search optimization (#7902)",
  "3df468cc": "[BugFix] Improve performance ofselection intersection in runtime-filter exploration-phase. (#7751)",
  "2e23e935": "[Lake] support tablet schema cache (#7675)",
  "d2744986": "[Enhancement] Imporve random exchange performance (#7299)",
  "23fc36c1": "[Lake] Metadata cache in TabletManager (#7284)",
  "6281ecf1": "[Enhancement] Make UUID generator thread-local for better performance (#6943)",
  "f6aa7175": "[Feature] Support FileIO cache for iceberg table (#6237)",
  "b70ad455": "[Enhancement] window function optimization, support rank (5) (#6120)",
  "8347ec31": "[Enhancement] rank window function optimization, add threshold of partition number(4) (#6411)",
  "4a39b7d9": "[UDF] optimize UDAF group by performance (#6082)",
  "a642fb0b": "[BugFix] clear cache in follower when alter resource (#6386)",
  "604047af": "[Enhancement] rank window function optimization, support row_number (3) (#6119)",
  "6e282b79": "[FixBUG] Hive auto sync meta cache remove skip rule when process AlterPartitionEvent (#6302)",
  "1fe7f1b2": "[Enhancement] Rank-window-function optimization, support partition topn (2) (#6118)",
  "67eaf9f9": "[Enhancement] window function optimization, add partitioner (1) (#5886)",
  "b4ca6b6e": "[Feature] Add fd cache and remove the file cache in BlockManager (#5901)",
  "0c92d3af": "disable dict optimization when having predicate has dictionary column (#5914)",
  "621e3d8c": "[UDF] optimize performance for Java scalar UDF (#5800)",
  "d2809f54": "[Bugfix] Disable cache of S3RandomAccessFile in FileBlockManager (#5866)",
  "a60339e0": "[Cleanup] Remove lru_cache.hpp and export_task_mgr.{h,cpp} (#5867)",
  "cd7b5203": "Enhance version graph capture_consistent_versions performance (#5720)",
  "4967eab6": "Minor: Add a todo for iceberg performance improvement (#5793)",
  "80404c10": "Fix the result error of lowcardinality optimization in delete multiple conditions (#5713)",
  "f04aa71d": "[Enhancement] support routine load in low cardinality optimization (#5543)",
  "bf918000": "Add log for slow database lock and fix some logging (#5453)",
  "844870d4": "Fix refresh cache issue for hudi table (#5382)",
  "d066f220": "[SR GeekCamp] Improve schema scan performance #4028 (#5320)",
  "a98e0b97": "Move lru_cache.{h,cpp} to be/src/util (#5331)",
  "46c63424": "[SR GeekCamp] Improve schema scan performance #4028 (#5124)",
  "d7957ee5": "Optimized the performance of schema change, improved by 1.42-27 times (#4828)",
  "b9226ae7": "Add restful api for runtime filter cache (#4838)",
  "12b9cebb": "Add RuntimeFilterCache to cache early-arrival GRF and speculative and passthrougth GRF delivery in BE (#4836)",
  "90db32e6": "[performance] optimize fixed-size multi distinct (#4940)",
  "b0cb8170": "[performance] fix bad performance in aggregator FixedSliceKey (#4935)",
  "1b4c54a2": "support a faster unique id implement (#4701)",
  "f468d7b9": "Support cleaning meta cache and fix null partition value exception for hudi table (#4599)",
  "e6f4333f": "Add fast fail when local dictionary size exceed max size (#4652)",
  "00af1f2c": "Add fast fail when collecting dictionary (#4624)",
  "ae336523": "Fix the performance issue of nullable column sort (#4633)",
  "6c90268e": "Support more lowcardinality optimization (#3988)",
  "e5a14a68": "BugFix: Rowset id cache leak (#4333)",
  "2eeca6a6": "Optimize time function convert_tz: add timezone cache members (#4101)",
  "fa49d664": "Optimize performance of small int join with direct mapping hash map (#3955)",
  "1254658d": "Fix low cardinality opmize crash in pipeline when enable cache table … (#3915)",
  "d721fb3a": "Aws sdk can be slow when get ec2 metadata in Aws::Client::ClientConfiguration (#3912)",
  "c4ba13c2": "Bugfix: cache desc tbl (#3821)",
  "dda5aa2a": "Revert 'cache desc_tbl (#3620)' (#3795)",
  "a0707777": "cache desc_tbl (#3620)",
  "1345fb65": "disable dict optimization when having predicate has dictionary column (#3598)",
  "b1ec915d": "Support CTE in global dictionary optimization (#3540)",
  "a0158216": "improve json construct performance by move value (#3549)",
  "dbab54b1": "Some optimizations in schema change (#3396)",
  "aa25ed35": "Replace validate_ascii_fast with !validate_utf8 to handle binary string contains illegal utf8 chars (#3254)",
  "2371be60": "improve TypeInfo::cmp performance (#3235)",
  "67f362bd": "Fix the problem of nested expressions in global dictionary optimization (#3147)",
  "3e801035": "hive metadata cache of fe automatic incremental synchronization (#3036)",
  "62791fbb": "Relax the conditions for enabling local shuffle optimization (#2899)",
  "b8a33d69": "Disable global dictionary optimization in case of large dictionary data (#2700)",
  "b1a2ada6": "Fix lowcardinality optimization returned incorrect results in expression execution (#2648)",
  "6f7a12b4": "Improve FE high concurrent performance part 5: reduce some unnecessary query logs (#2550)",
  "c14e64bb": "Improve FE high concurrent performance part 4: Disable collect query detail info by default (#2462)",
  "d3f82f33": "Improve FE high concurrent performance part 3: reduce lock in ConnectScheduler (#2436)",
  "0aba7c40": "Improve FE high concurrent performance part 2: Improve newSessionVariable (#2420)",
  "f57964e0": "Improve FE high concurrent performance part 1: reduce lock in BaseGenericObjectPool (#2408)",
  "270a9710": "Disable the optimization of eliminating Cast in ReduceCastRule (#2100)",
  "7f1da61e": "Decompress the bitshuffle-encoded pages in advance to fit the page cache (#1597)",
  "ed86a494": "Fix BE crash in lowcardinality optimization when late materialize (#2054)",
  "023fcf63": "Remove dynamic cache DCHECK (#2015)",
  "b2b942bc": "Fix UT dynamic cache check fail; Reduce capture_rowset wait time if tablet have already shutdown",
  "21c27351": "Move dict ahead of data to improve first-time reading performance (#1593)",
  "92545fa0": "SinkBuffer optimization by removing waiting logic of rpc task (#1561)",
  "ae9b94f1": "Fix the mem statistics bug of page cache (#1451)",
  "0a77d63c": "Fixed the logic judgment problem of whether the function can be used for low-base optimization in BE (#1372)",
  "a084ac49": "Disable low cardinality optimization for prodicate in project (#1339)",
  "a515fafa": "Fail fast when fe config with localhost in case of be report state with failure continuously (#1252)",
  "020e28c7": "Scan operator optimization (#1188)",
  "e0d21b18": "Disable low cardinality global dict optimization for only scan plan (#1164)",
  "a525da6b": "Add mem statistics for page cache (#1102)",
  "58f4c817": "Column dict cache support delete (#1059)",
  "27fff97b": "Make some string functions support low-base global dictionary optimization (#990)",
  "f74afce5": "Enable low cardinality optimization (#954)",
  "c706efed": "String functions support global dict optimization (#688)",
  "2992991b": "Update column statistics cache expire interval (#795)",
  "8db6c4e0": "Add cache dict manager for low cardinality string (#635)",
  "da5c7d29": "Improve create table performance by create partitions concurrently (#532)",
  "ae036bbe": "Avoid cache empty when getting column statistics from BE encountered exception (#569)",
  "df72d61a": "Add metrics for slow query and meta log count (#502)",
  "9350d27c": "Fix show frontends slow bug (#507)",
  "2bf3a3ea": "[SparkConnector] Support fast decimal (#382)",
  "b44af8cd": "Fix performance-noexcept-move-constructor by clang-tidy (#394)",
  "b6956700": "Fix performance-type-promotion-in-math-fn by clang-tidy (#393)",
  "1ecb7df9": "Fix performance-unnecessary-copy-initialization by clang-tidy (#392)",
  "0e9629be": "Fix performance-move-const-arg by clang-tidy (#391)",
  "3f9a964f": "Expire cached statistics for Fe follower when excute analyze job (#324)",
  "02dd2fbc": "Fix performance-inefficient-vector-operation by clang-tidy (#389)",
  "f5c86a7e": "Fix performance-faster-string-find by clang-tidy (#386)",
  "4a323ea4": "Fix performance-for-range-copy by clang-tidy (#387)",
  "348887ab": "Improve performance of multi-column group by (#250)",
  "131febf4": "[SR-3574] optimizing some object columnp agg-function performance and b… (#171)",
  "d5250c7d": "distrubute system fs.hdfs.impl.disable.cache change to be configurable (#210)",
  "b7cb8ae2": "fix possible compiler optimization error (#208)",
  "3fc5871b": "[SR-3574] Optimizing bitmap deserialization performance (#86)"
}, "StatusBarUtil": {
  "": ""
}, "StepView": {
  "": ""
}, "stetho": {
  "6ac43c5": "Merge pull request #348 from rickbrew/cache1",
  "d5c6036": "Merge pull request #63 from jasta/travis-nocache",
  "4bef2ca": "Stop using Travis-CI cache",
  "01e078b": "Merge pull request #46 from jasta/faster-travis",
  "e166788": "Merge pull request #10 from jasta/fix-missing-if-slow",
  "8b12919": "Fix issue that can hide slow network requests",
  "ef29933": "Add scripts/__pycache__ to .gitignore"
}, "StickerCamera": {
  "": ""
}, "sticky-headers-recyclerview": {
  "c14b72c": "Merge pull request #99 from xkuznetsova/cache-cleaning-fix",
  "897e540": "fix cache cleaning - clear cached header rects too"
}, "StickyListHeaders": {
  "68e6da0": "add fastscroll setting and fixes #240",
  "7123150": "added fastScrollAlwaysVisible attr",
  "6bcad8e": "finished polishing the code for now. Implemented the missing parts of the api and added fastscroll+sectionindexer to the sample/test project",
  "a21f803": "Merge pull request #99 from thatsmydoing/cachefix",
  "ee2fe04": "Fix count caches not being invalidated",
  "f5f7a80": "removed adapter count cache from list view as the adapter now caches the count. fixes #83",
  "43e6684": "Not rebuilding wrapper view every getView call anymore. Greatly improves performance",
  "1cf9ce5": "changed WrapperView super class from LinearLayout to ViewGroup. Should make for better performance",
  "edd412e": "did some refactoring as well as made everything a lot faster. Added a CursorAdapter subclass"
}, "Store": {
  "f4fdd1e": "Feature/clear all cache (#117)",
  "71220ba": "fixes race condition in memory cache (#90)"
}, "storm": {
  "726be6c": "Merge remote-tracking branch 'noslowerdna/thread-names'",
  "999eff5": "clear out read cache everytime a commit begins to handle the case where a commit fails and is retried",
  "8750ea7": "launch the worker heartbeat thread immediately so that slow loading tasks don't cause the worker to timeout",
  "debb8da": "fix disruptor cache / consumer started problem for single threaded claim strategy",
  "9c14f8f": "merge master, reset coordinatedbolt to use timecachemap",
  "2fe536b": "precompute has-ackers? as a micro-optimization",
  "af17378": "replace UUID with much faster Random, since it's a bottleneck",
  "1dc034d": "don't do reference serialization with Kryo to make it faster",
  "78900aa": "fix lookup from cached node+port hashmap",
  "55c7b57": "rename socket cache vars to be less confusing with the assignment vars",
  "0fef2b1": "use fast-group-by in critical path",
  "925d7dc": "keep execution metadata (tuple start time and outgoing ack val) in the tuple itself for increased performance",
  "0411f79": "massive optimization to shuffle grouping (10x)",
  "fd358a8": "microoptimizations to even-sampler and time-delta-ms with primitve math",
  "eba80e3": "remove thread-safety from outputcollector in favor of major performance enhancements, esp to shuffle grouping",
  "f7fa84a": "refactor reading of topology and topology config from supervisor cache",
  "f39c0bd": "cache drpc clients to eliminate overhead"
}, "strimzi-kafka-operator": {
  "e7dfb51": "Allow Kubernetes API servers to list from cache instead of always asking for the latest state (#7977)",
  "38c30c5": "Added auto-approval mechanism when optimization proposal is ready (#7310)",
  "37f3d15": "Fix Maven cache use in Azure Pipelines build (#6391)",
  "a405c47": "get new field under optimization proposal result (#5236)",
  "d5fe12e": "Try to fix the Kafka binaries cache (#5191)",
  "886a723": "Updated CC to 2.5.57 to pick up performance improvements (#5172)",
  "a81336b": "Add cluster before/after load information to rebalance optimization proposal in a ConfigMap (#4622)",
  "500dc7e": "Replace master optimization goals with main optimization goals (#4680)",
  "b4c68f8": "Fix Kafka binaries cache in Regression and Upgrade tests without image build (#4558)",
  "244a199": "Fix missing details in rebalance performance tuning table (#3600)",
  "eb9f2a7": "Added rebalance performance tuning options and documentation (#3216)",
  "488dad3": "Make the tests run faster. (#224)"
}, "subsampling-scale-image-view": {
  "7aea923": "Fix for #110 - avoid recycling cached bitmap",
  "74156f6": "Modified cached flag implementation - use static initialiser on ImageSource",
  "8e5d246": "Add boolean flag to determine if an external image cache loader is used. If so, the bitmaps should not be recycled."
}, "SuperTextView": {
  "": ""
}, "supertokens-core": {
  "": ""
}, "swagger-core": {
  "f6a80ee": "Merge pull request #3321 from swagger-api/feature/make-gradle-plugin-custom-task-cacheable",
  "f4aea21": "refs swagger-api/swagger-core#2312 - cache init param",
  "98fd61c": "Added eclipse specific files/folders to .gitignore (.project, .settings, .classpath and .cache)",
  "83ba1f6": "added toggle for endpoint cache",
  "663c516": "Added a plugin to swagger-play2 to enable reloading of cached metadata. Tested with Play 2.0.1"
}, "sweet-alert-dialog": {
  "": ""
}, "SwipeBackLayout": {
  "": ""
}, "SwipeDelMenuLayout": {
  "": ""
}, "SwipeMenuListView": {
  "": ""
}, "SwipeRecyclerView": {
  "": ""
}, "SwitchButton": {
  "": ""
}, "SystemBarTint": {
  "": ""
}, "tablesaw": {
  "a1f793d": "Boolean optimizations (#1097)",
  "6f109bc": "improve performance of RowTest",
  "c96e945": "made saw tests run faster, no loss of coverage (#1029)",
  "11fa6e1": "Improve innerJoin performance (#903)",
  "0db7d75": "Sorts column data using fastutil .sort methods (#778)",
  "76b2aec": "minor join performance improvement. Indexes were being recreated for each row in table",
  "33c9128": "replace an array search in Strings::isIn() with the same search using a HashSet for better performance",
  "38e7e1a": "reworked column construction so that providing a size parameter causes the column to be initialized with size # empty values. This makes it possible to set(row, value), without getting an error. Note that this is a significant change which may break existing code, if it provided a size param for performance, and then entered data using append.",
  "1d4bff7": "fix bug in performance test and slight refactoring in csv read",
  "d391f9c": "some improvements in CSV-reading performance and memory requirements",
  "cb28215": "performance enhancement on csv reads",
  "2e8448b": "Row performance fix",
  "1669a64": "cleanup row and add a performance test",
  "bc572c3": "performance test/experimentation",
  "56221d1": "Upgrade fastutil",
  "5086055": "Fix performance regression reading NYC taxi dataset",
  "c40b80f": "Fixed bug in category column copying. This will cause performance issues so a better fix is needed",
  "bd14b67": "fixed iteration in DateColumn so that it iterates by default on LocalDates. You can still get iterator on packedDates for performance sensitive work.",
  "30bef15": "Added parsing optimization to time and date time columns",
  "fb1620e": "IntIndex performance improvment (50% on 1/5B row index)",
  "687a6e9": "performance optimization on date parsing in CSV loading",
  "5c0aed6": "adding dictionary map changes for performance boost on imports",
  "f8ad9e1": "Additional performance tweaks to get closer to 1ms per select",
  "8771030": "performance (memory) improvements on new localdatetime functions",
  "d82f356": "merged column sort memory optimizations with other changes",
  "8001c11": "performance improvements to column sort routines"
}, "TableView": {
  "d53b2c9": "removed cached .idea",
  "fc88bb9": "Merge pull request #169 from damianogiusti/invalidate-cache-when-changing-dataset",
  "9c3766b": "Invalidate layout managers cache when changing the table dataset",
  "ad79e85": "performance improvement, programmatically set column width feature.",
  "9ecc0a8": "NewFeature: New boolean value has been inserted to ignore selection color for better performance.",
  "f13c7f7": "NewFeature: New boolean value has been inserted to ignore selection color for better performance. However, Calling SelectionHandler methods, same functionally can be done manually.",
  "4f2ca9c": "NewFeature: New boolean value has been inserted to ignore selection color for better performance.",
  "e496ec4": "NewFeature: New boolean value has been inserted to ignore selection color for better performance."
}, "TakePhoto": {
  "": ""
}, "Tangram-Android": {
  "17e38ad": "Remove CellRender and use fastJson.",
  "be6b814": "set performance monitor to layoutmanager",
  "5d85f75": "add performance monitor api",
  "36a7abf": "remove poor performance rx logic",
  "bc6ac5f": "refractor bannerView's impl, improve measure performance"
}, "TapTargetView": {
  "d737ed5": "Fail fast when given null view (#64)",
  "13a8cbe": "Library: Don't use view cache to draw the view"
}, "tcc-transaction": {
  "1458226": "remove fastjson dependency in core module",
  "1467d78": "tuning the transaction persistent performance, reduce the transactionRepository update times.",
  "24ff604": "update fastjson to 1.2.29",
  "5793a7d": "update fastjson to 1.2.29",
  "df8e6b3": "add Kryo serializer to improve the serialization performance. resolve issue #17"
}, "tech-weekly": {
  "": ""
}, "Telegram": {
  "d29eabd1": "Popup notifications (not finished), removed in-app notifications, DB performance optimisations (fixes for Android L), separate app logic from network logic (not finished)"
}, "TelegramBots": {
  "1e59eba": "Merge pull request #1052 from rubenlagus/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.13.2.1",
  "b8d6c23": "fix: upgrade com.fasterxml.jackson.core:jackson-annotations from 2.11.3 to 2.13.0",
  "d195d8f": "fix: upgrade com.fasterxml.jackson.core:jackson-databind from 2.11.3 to 2.13.0",
  "066ad7f": "Added information about fast DB accessors"
}, "Terasology": {
  "40db450e": "performance(network): shutdown faster with parallelization (#5029)",
  "e528a095": "Merge branch 'develop' into perf/fasterNetworkShutdown",
  "b98663c4": "Merge branch 'develop' into perf/fasterNetworkShutdown",
  "6c7c280b": "chore(NetworkSystem): shutdown faster by doing connections in parallel",
  "972ee972": "test(ChunkMeshWorker): remove some difficult to implement tests about optimizations we probably don't need",
  "85f9c826": "chore: remove some slow logging (#4936)",
  "180d36da": "perf: improve performance of mesh generator for chunks (#4794)",
  "1dca00a4": "chore: cache hashcode for uniform id (#4772)",
  "4b078e2d": "build(Jenkinsfile): improve pipeline performance; add docstrings (#4749)",
  "0bd23a74": "build: remove commented-out uses of reflections-cache",
  "2b54db57": "build: disable build-time cacheReflections in a more consistent way",
  "89de8c6f": "logistics: use new pre-cached builder image in Jenkins (#4631)",
  "9204eabc": "build: factor out reflections manifest `cacheReflections` task [WIP]",
  "78253eae": "build(modules): name the output `cachedModules`",
  "e0b16660": "build(PC): cacheModules is an output of :modules",
  "3b0d371f": "build(PC): compile-only dependency on module cache",
  "29cae4d8": "build(PC): gitignore module cache",
  "1875f3f5": "chore (git): ignore .idea/caches",
  "34422650": "chore (git): ignore .idea/caches",
  "8a9603fa": "feat(reflection): add reflections cache merging form subsystems to engine module",
  "f1f80455": "feat(subsystems): cacheReflections as resource of subsystem (subsystems build as `jar` always)",
  "b99193e9": "feat(gradle-reflections): setting `cacheReflection` task as uptodate when `classes` task uptodate",
  "d9c9bd32": "feat(subsystems): Add cacheReflections for `:subsystems:*`.",
  "791987d9": "chore (build): stop overriding the module cache lifetime",
  "1e774d99": "chore (git): ignore .idea/caches",
  "55154dc3": "Merge pull request #4179 from pollend/fix/performance-chunk-relevance",
  "c35f5c37": "fix(performance): optimize ModuleEnvironmentSandbox.getSubTypeIdentifier",
  "cc57e83e": "Removed CacheTextures from loading (appears to do nothing) I honestly believe these cachings were introduced far in history to somehow cache the assets before the current asset system. After close inspection, the code for block caching was introduced by @immortius way back in 2012 in 76ed8b0653569ab3e22d5dcb2b4db7981dabb49a , and remained unchanged since then. I couldn't find any side effects the code might be causing now, so removing it.",
  "6ce026db": "Merge pull request #3726 from eviltak/typeregistry-optimization",
  "0a13602a": "Merge PR #3469 by @theobisproject - performance improvement",
  "6264efa9": "Added increase cases and minor performance refactor",
  "088514ba": "Show chunks faster and reduce amount of invisible chunks (Issue #1886).",
  "9420e900": "Used fbo.getUri for performance monitor label",
  "1597e143": "Big performance optimisations for layered zones",
  "70c44ebd": "Using cachedInterpreters list",
  "b625a999": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed performance value printout, as recommended by indianajohn.",
  "a7aa0a24": "Merge PR #2456 by @flo - optimization.",
  "55c4e69f": "Improve performance by removing unnecessary locking.",
  "24e6db89": "Merge PR #2347 by @Josharias - chunk gen optimization.",
  "4a13fd47": "Merge PR #2203 by @flo - optimization.",
  "14ae8e5d": "Merge PR #2172 by @Josharias - physics optimization.",
  "730522bc": "Multiplayer performance improvements on physics for rigid bodies (aka the railgun). - Added an option to automatically slow down the world time when the game is running slowly. - Prevent uncessary component updates to be sent across the wire. Depend on the resynch events instead. This will reduce the overall bandwidth being sent to each client. - Add a debug overlay for time dilation so that you can see the auto time dilation in effect.",
  "225c1314": "Fix for #1777 Updated gradle build to use reflections-0.9.9 and the new dom4j dependency Tweaks to engine cacheReflections because it randomly started thinking it was always up-to-date on me. Core and CoreSampleGamePlay also updated to use the new reflections, this will need to be pushed out to other modules and possibly improved in structure.",
  "b071ec33": "Added a new mode to the DebugOverlay, specialized on execution time running means for rendering code. While functional, the new mode filters out activities registered with the performance monitor that are not pre-pended by the strings 'WorldRenderer::' or 'PostProcessor::'. At the time of this commit no activity is prefixed with those strings and as such the new mode displays only its title.",
  "7f7886db": "Merge PR #1751 by @emanuele3d - performance monitor enhancements",
  "ce61413e": "Introduce the concept of a Context to slowly get rid of CoreRegistry.",
  "69f3da4c": "Added support for automatic performance monitoring on @ReceiveEvent methods, by specifying the name of the activity in @ReceiveEvent annotation.",
  "0848320a": "Added dependency on opengl 2.0 in LwjglGraphics.checkOpenGL(), as it is required by the existing code. Refactored WorldRendererLwjgl.renderChunk() to improve readibility, plus some slight performance improvement.",
  "192dad95": "In this commit the current skysphere is mantained as an implementation of two new interfaces: BackdropProvider and BackdropRenderer, both now available through the CoreRegistry. Almost every other change is a consequence. The few unrelated changes are some easy optimizations stumbled upon, some renaming to remove abbreviations and some unused imports removals.",
  "db91f816": "Merge PR #1472 by @immortius - reflection cache tweak",
  "524eece0": "Reflections caches are now removed at the end of jar creation, to prevent them causing issues during development. Enabled downloading of source jars when generating idea workspaces.",
  "73489819": "RenderableWorldImpl changes. Addressed issues mentioned so far: public static variables made private for the time being; config-requiring static variables made non-static, as requested by immortius; small compromise/temporary changes to the comparators and the squaredDistanceToCamera() method for a small performance improvement.",
  "e7203f52": "Merge PR #1383 by @flo - chunk optimization (commit redo)",
  "8ccfdb7b": "Make the isChunkValidForRender check a lot faster.",
  "64bf47fe": "Update hotkeys and add a reflection cache clean task in Gradle",
  "533a5c00": "Use the inheritence cache in all getElementStyle methods.",
  "39bff07c": "Merge pull request #1329 from msteiger/reflectionscache_config",
  "ff1f5259": "Removed reflection cache flag from system config - moved to build system",
  "8345615e": "Plant systems now use the biome temperature/humidity for deciding whether to grow (change to LocalParameters), due to the high performance impact of perlin noise. Added biome id mapping synchronisation to the network protocol. Refactored several interfaces to remove access to world generation in non-authoritative mode and removed the RemoteWorldGenerator since it's no longer needed.",
  "14b99695": "Make sure the target directory for cached reflection data exists",
  "c9a3c187": "Implemented Sunlight regeneration propagation, and tied it to Sunlight. Some performance issues around initial chunk lighting merge remain.",
  "f70c9745": "Merge pull request #1003 from msteiger/reflections_cache",
  "2b73a9da": "Create a dedicated folder for (versioned) reflections cache files",
  "13d24fc6": "Added reflections cache",
  "ae3657cb": "Stylistic fixes for mesh rendering performance",
  "d96ec379": "Fix main performance problems with MeshComponent Rendering",
  "de57c8f8": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Completely removes volumetric lighting effect for the time being... Needs a rewrite to be faster and it si a tad to much for such a blocky game anyhow. :) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Disables volumetric fog for the time being - shouldn't be a global effect and doesn't look to good either at the moment build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Renames 'Local Reflections' to SSR and marks them as an experimental feature build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixes that local reflections were always active and thus 'overwrote' the costly global reflections build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Adjusts all video/rendering settings accordingly",
  "ae06572d": "Moved metrics and debug UIs into NUI. Implemented the Running Threads Metrics. Fixed an issue with non-modal screens interfering with lower screens. Fixed texture cache key used for bordered texture rendering Fixed update of overlays, and returning of overlays after adding them. Fixed some issues with the CaseInsensitiveEnumTypeAdapterFactory.",
  "3cb7fcf7": "Moved tiled rendering handling down into the Canvas Renderer. Changed Lwjgl handling of tiled textures to use cached meshes.",
  "f3338e32": "Retaining components is based on sample entities rather then Prefabs directly, as these might be modified by systems during entity creation. Improved performance of removing components that are no longer needed by iterating only through components that the entity actually has, rather than all of them.",
  "91fcbdc8": "Added com.google.common.base pacakge to the module sandbox. Rendering performance tweak. Updated Guava to 15.0",
  "c421d72d": "Merge pull request #718 from socram8888/fastpow",
  "b6d4a07c": "Add fast power functions to TeraMath",
  "d2c86d9d": "Tweaked error logging in TerasologyEngine/Terasology application. Errors occuring before the logger has been initialised will now be reported on the console. Started work on a new UI system (nui). Implemented the beginnings of canvas support, with text rendering. Text is now rendered by creating a mesh, which is cached across frames while in use. Added a new Color class. Overhauled Rect2i.",
  "40ebbe98": "Removed light propagation steps from chunk generation. Whenever a chunk is loaded, propagation is checked for the edges of the chunk to correct for changes since it was last loaded. Some performance improvements to batch light propagation - combines bound checks with fetch operations.",
  "cafff17a": "Changed StorageManager to place chunks in packed zips rather than individual files (creating a lot of small files was too slow).",
  "acddae54": "Changed generateAsset() to register the asset into the asset cache. If a generatedAsset has the same uri as an existing asset, the existing asset is reloaded with the new data instead. Moved textures over to the new asset structure.",
  "43ea54e5": "Changed generateAsset() to register the asset into the asset cache. If a generatedAsset has the same uri as an existing asset, the existing asset is reloaded with the new data instead. Moved textures over to the new asset structure.",
  "cf890a45": "Changed the JsonBlockShapeLoader/BlockShape interaction so that the BlockShape generates (and caches) rotations of shapes.",
  "dcbcfcda": "Improving performance by introducing block collection methods into BlockNetwork for adding and removing multiple network nodes in one call.",
  "90ab2662": "SimpleNetwork finally uses distance cache to speed its processing in case of often signal change on the network.",
  "fa5c87c7": "Assorted tweaks for #421 - ranged played-centered creature spawning - makes spawning around the player less dangerous - limits world-spawned creatures - adds performance monitoring to the spawning step - cleans and formats a bunch of stuff, rewrites some for clarity / performance",
  "6975a495": "+ added a benchmark to measure performance of tera array serialization for protobuf + added protobuf file implementing messages for chunks and tera arrays",
  "0a0f69ca": "+ implemented serialization handlers using ByteBuffers for every tera array + implemented benchmarks for different ways of serializing tera arrays + added Chunks.proto describing simple messages for chunks and tera arrays - removed stream based serialization handlers due to massive performance problems",
  "ef90f9e6": "+ added a log message to LocalChunkProvider about the size of the cache for nearby chunks",
  "800a78b7": "Fixed chunk cache region notification of chunks becoming available.",
  "48314ce9": "Tweaks HDR settings and replaces pixel read back operation for the update of the HDR exposure value. Seems to be a tiny bit faster? This is still a clear hot spot performance wise though.",
  "c4aafd8a": "Adjusts lighting of separately rendered blocks to match the lighting of chunks and sets Bullet Physics maxSubSteps to 8 so blocks won't fall in slow motion in combination with low frame rates.",
  "ef4b377c": "Fixes for #377 Recycling of entity ids should now work - forgot to return recycled entities Added some debugging code to show active entities Fixed the entity reference cache - it now correctly will drop unused references during garbage collection Changed block entity mode to default to ON_INTERACTION, so normal blocks are not retained indefinitely as entities.",
  "58482aec": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates various performance optimizations for tera arrays",
  "8d81376f": "GUI framework optimization",
  "8e563ca6": "Added block list screen (F5) / Added multiplayer screen (not visible yet) / Added shadow style / Few interface changes and other optimizations",
  "f4c4ac47": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Adds procedural fog. Variation is based on the daytime and a noise function Fog gets stronger during sunrise and dawn but is limited during the night. During the daytime it can get quite foggy… So be careful. ;) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Replaces costly sine functions with Crytek's sine/cosine approximations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Restores colored grass block textures Make sure to deleted the cached files in your SAVED_WORLDS directory build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Adjusts shaders to color grass blocks correctly build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Tweaks lighting so everything is correctly lit again (and not too dark) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Tweaks lighting to look nicer build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Adds some various other tweaks…",
  "9533c25e": "Threaded far cache fetch and region checking.",
  "875ac7e1": "Fixed a bug with fetching from far cache, replaced old world system with new one.",
  "c84d87e1": "Adjusted vector3i hash function to reduce collisions in ChunkProvider near cache Added locking to prevent parallel creation of Chunks",
  "f99f0dbd": "Initial wave of project restructure build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Adopted maven-style directory structure build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Moved performance tests into their own sourceSet (run with perfTest task) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Split resources and groovy into separate source paths build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Changed compatibility level to 1.6 build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Changed output to use the target folder build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Excluded some folders from the IDEA project to keep things neat build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Run is now executed on the produced jar to solve classpath issues, pending improved resource resolution",
  "6a4094ae": "Initial wave of project restructure build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Adopted maven-style directory structure build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Moved performance tests into their own sourceSet (run with perfTest task) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Split resources and groovy into separate source paths build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Changed compatibility level to 1.6 build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Changed output to use the target folder build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Excluded some folders from the IDEA project to keep things neat build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Run is now executed on the produced jar to solve classpath issues, pending improved resource resolution",
  "fb5da854": "Updated chunk caching Chunks are now stored commpressed in memory when (far cache) On exit the world gets saved as one file.",
  "39882c06": "Adds rendering queues to world renderer and introduces delta time based movement. This should fix the slowdown bug.",
  "0680df9e": "Fix broken performance test.",
  "b8088ef6": "Adds some additions and optimizations to the post-processing pipeline.",
  "c59adccb": "- Players now carry block groups instead of blocks. This enables the correct orientation of placed stairs. - Improved giveBlock console command. Now accepts the name of a block group or block, and quantity is optional. - Put performance monitoring around UIText rendering, as it appears to have performance issues.",
  "ef19fba6": "Blargh, so close to having the applet write to the user's temp dir instead of wherever it feels like (desktop, system32...), but there's an outstanding issue that blips away too fast in the Java Console for me to make out the error.",
  "243886b5": "- Added Chunk Tessellator performance test to aid development - Some fiddling with Chunk Tessellator performance",
  "6e8f22cc": "- Created a blender addon for exporting block shapes to groovy config files - Changed PerformanceMonitor to only be enabled when the metrics UI is visible - Added some protection against multithreaded use to performance monitor",
  "bc10f0ec": "Fixes #60 - but does so by disabling sound for GelatinousCubes as it was them reloading the footsteps audio resources for every new one spawned that caused the lag. We should probably have an audio cache of some sort instead, but too sleepy to prep that right now :-)",
  "bd758194": "Integrates the profiling framework and the recent optimizations by Immortius. Tweaks HDR rendering and bloom effect.",
  "75e28cf4": "Adds some minor optimizations and adjusts fog.",
  "032f784d": "Adds some minor optimizations and a simple Profiler class.",
  "3c55ea92": "Replaces fixed thread pool with a cached alternative.",
  "1af0e01d": "Adds some minor visual tweaks, optimizations and fixes.",
  "86117733": "Adds framework for creating simulators (nothing working yet) and some minor performance tweaks and optimizations.",
  "53b7c0a9": "Optimizes clouds (more coming soon) and increases rendering performance. Hopefully.",
  "dc78355b": "Improves performance by limiting the possible amount of chunk updates per second. Defaults to 20 updates/s and can be changed via config.",
  "9bb36d49": "Drastically improves performance.",
  "a25224b5": "Adds a brand new L-System based tree generator which is currently not used in the world generation process, but will be added soon (together with some nifty Groovy scripting support of course). Also adds some performance improvements and a new sound for placing blocks.",
  "5c56b501": "Replaces the ugly XML file for initializing the blocks with a stylish Groovy script. Removed the colored blocks for the moment. Adds some optimizations to speed up chunk updates near the player.",
  "e5484054": "Adds some minor optimizations and cleans up.",
  "63c4da14": "- Optimizes rendering a bit - Prioritizes thread execution so chunks near the player can be updated faster - Limits the amount of emitted particles",
  "e520eb3a": "- Adds some minor performance improvements - Removes unnecessary RNGs - Adds that players get rescued if the y position gets too low - Moves the spawning point from the world to the entity classes - Removes saving/loading of the spawning point for the time being",
  "223bd558": "- Moves the thread pool to a central position - Improves overall performance - Adds that VBOs are disposed correctly when a new world is loaded - Moves saving to a separate thread - Adds that all threads finish before the application exits",
  "690751c1": "- Adds a small optimization - Changes the initial detection of spawning points",
  "f6816733": "- Optimizes the way the chunk cache is organized - Fixes problems where chunks get written to disk and get read at the same time",
  "9057532d": "- Fixes automatic viewing distance detection - Reduces overall cache size",
  "ce2756a7": "- Removes the polling update thread - Optimizes (and fixes) chunk updates - Optimizes the chunk cache to rely on a thread pool",
  "518d88ac": "- Adds that tree trunks replace existent blocks - Adds some minor performance tweaks - Changes the way the sandboxed env. is initialized",
  "d6543930": "- Addresses #46-The game slows down randomly (but needs more testing) - Updates documentation",
  "c2644718": "- Fixed Perlin noise to work correctly with values x,y,z < 0 - Overhauled terrain: modified size of biomes, modified distribution of biomes, changed base terrain, ... - Reduced size of caves to minimize polygon count - Added some tests - Added a simple heightmap image generator for debugging purposes - Some minor optimizations",
  "454ff166": "- Finally fixed a very rare infinite loop - Addresses #41-Rivers should overlap beaches - Some minor performance improvements and optimizations",
  "7863522d": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Changed sky color a bit build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Minor optimizations",
  "7104a37e": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Player can no longer place blocks adjacent to every form of blocks build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some minor optimization build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some refactoring and code cleanup",
  "fbeedbcc": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Minor fixes and optimizations",
  "2e5a4d82": "Fixes #31-'Flying up and down gets much too fast' and adds #22-'Add underwater shader' and #21-'Add swimming'",
  "d963f559": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Updated terrain/biome generation build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Changed light tint build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some minor optimizations and fixes",
  "f236cb68": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added new 'lowered blocks' => Water build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed ambient occlusion (looks much better now) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Switched texture pack to the 'Good Morning Craft!' pack build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed blending of clouds build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed blending of translucent blocks build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Cleaned up build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some small optimizations",
  "96e947c6": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates New lighting engine build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Began implementing biomes... build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added cacti build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some optimizations",
  "ef9e5a60": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many, many optimizations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Reduced chunk size build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed possible deadlocks",
  "2b70a5ff": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Overhauled caching and rendering build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many performance improvements build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed rare deadlock (finally) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some more minor improvements build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added missing files",
  "a0eb06fe": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Minor optimizations and tweaks",
  "b77839a3": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Improved terrain build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Readded lake generation build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates 'Improved' stone layer build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Changed the way forests are generated build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some more optimizations...",
  "1937535f": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many optimizations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Removed the textures from GitHub and the nightly builds build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added a new update mechanism which downloads the textures from my server (currently is the 'Quandary' pack available) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Tweaked lighting and coloring build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates New initial seed for testing (very nice terrain)",
  "afd3de6c": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Started working on a new terrain generation engine (based on 3d perlin noise for large features as mountains – very slow, I'll add trilinear interpolation later on to speed up the process) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added LERP build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added separate mountain mountain generator (again)",
  "d053f089": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Modified fog shader build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates The size of the chunk cache now changes dynamically according to the viewing distance build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Changed forest probabilities",
  "51bd4a82": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Drastically improved performance build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Switched some collections to the Trove collections library build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some minor fixes build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Cleaned up a bit",
  "d2a69ded": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added simple XML structure to save world and player metadata (player position, world time, seed, ...) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Chunks do not replant during the night build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added flags to the chunk files (to remember if the light of a chunk was spread or not...) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some optimizations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some fixes build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some refactoring",
  "6477da1d": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some minor performance improvements build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed the tessellation for chunks touching the 'nil area' build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates 'show_map' now follows the position of the player",
  "4c049dc0": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many changes and optimizations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Some things are quite buggy at the moment(!)",
  "58e8bd66": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many optimizations (especially regarding the parallelization process) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Rewrote the flooging of light build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Etc.",
  "6922beff": "Small optimizations",
  "e2d4c39e": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Minor fixes and optimizations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added missing source file",
  "cf3c323f": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed collisios detection build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Improved/changed terrain generation build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added day-night-cycle build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added a fast random number generator build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added some logging information (more to come) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many other small fixes and changes",
  "9da62d3b": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Minor fixes and optimizations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added missing source file",
  "9b11c19d": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Fixed collisios detection build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Improved/changed terrain generation build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added day-night-cycle build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added a fast random number generator build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Added some logging information (more to come) build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many other small fixes and changes",
  "cbdeafe9": "Many fixes and optimizations",
  "4f73106d": "Many new features, optimizations and bugfixes",
  "abe99007": "Changed the color of the grass and changed the way the lighting is updated. Still too slow!",
  "6b2342f3": "Fixed the updating of neighbor chunks... Still a little slow but we're getting there",
  "e2cedd47": "Fixed the updating of neighbor chunks... Still a little slow but we're getting there",
  "aff219fd": "Many fixes and optimizations. Updating etc. works almost perfect now.",
  "d7976c6d": "Many fixes and optimizations. Updating etc. works almost perfect now.",
  "3afd38ea": "Many, many changes and optimizations!",
  "f6997e1b": "Many, many changes and optimizations!",
  "48389318": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates New lighting system build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many optimizations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Wrote a class for an Octree. Might be useful later... build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Cleaning",
  "8d554e76": "build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates New lighting system build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Many optimizations build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Wrote a class for an Octree. Might be useful later... build.gradle build-logic config docs engine engine-tests facades fileTemplates gitpod.dockerfile gradle gradlew gradlew.bat groovyw groovyw.bat Jenkinsfile libs LICENSE LICENSE_ARTWORK metas modules NOTICE openvr_natives README.md settings.gradle subsystems templates Cleaning",
  "7bd91f55": "And some more optimizations."
}, "termux-app": {
  "0a3efc5": "Changed: Use PermissionUtils to request disabling battery optimizations in TermuxService",
  "65252dc": "Changed: Use cached PackageInfo while getting version code and name for app",
  "80b495e": "Move storage permission logic to PermissionUtils and add disable battery optimizations code",
  "0c9b85a": "Micro optimization for StreamGobbler",
  "067709b": "Disable obfuscation of termux-app in release builds without disabling optimizations and shrinking",
  "5b7e406": "handle possible ActivityNotFoundException when requesting to disable battery optimizations",
  "94e5bc8": "Ignore battery optimization settings to prevent suspension",
  "90b6f93": "Add fast path for TerminalRow.setChar"
}, "testcontainers-java": {
  "76d767e": "Use slim-faststart images from oracle (#6156)",
  "88bea77": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.11' into combined-pr-branch",
  "5e090c2": "Bump actions/cache from 3.0.9 to 3.0.11",
  "bfe07eb": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.9' into combined-pr-branch",
  "a3889d1": "Bump actions/cache from 3.0.8 to 3.0.9",
  "9d677d8": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.8' into combined-pr-branch",
  "4171dd8": "Bump actions/cache from 3.0.7 to 3.0.8",
  "523fa19": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.7' into combined-pr-branch",
  "93051c4": "Bump actions/cache from 3.0.5 to 3.0.7",
  "51edf87": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.5' into combined-pr-branch",
  "8dfe6c5": "Bump actions/cache from 3.0.4 to 3.0.5",
  "f411a73": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.4' into combined-pr-branch",
  "82cf760": "Bump actions/cache from 3.0.3 to 3.0.4",
  "fa49f86": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.3' into combined-pr-branch",
  "7638150": "Bump actions/cache from 3.0.2 to 3.0.3",
  "ada816c": "Removal of containers from the cache is not synchronized (#4598)",
  "dc68002": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.2' into combined-pr-branch",
  "d3350c2": "Bump actions/cache from 3.0.1 to 3.0.2",
  "02a6065": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-3.0.1' into combined-pr-branch",
  "16fb27f": "Bump actions/cache from 2.1.7 to 3.0.1",
  "04ecb68": "Improve Gradle build cacheability (#5188)",
  "02e2615": "Merge remote-tracking branch 'origin/dependabot/gradle/modules/k3s/com.fasterxml.jackson.dataformat-jackson-dataformat-yaml-2.13.1' into combined-pr-branch",
  "ba3748e": "Add GE remote cache to examples project (#4855)",
  "e42a37d": "Reinstate usage of `READ_ONLY_REMOTE_GRADLE_CACHE` to avoid wrong cache hits (#4853)",
  "0b7e815": "Merge remote-tracking branch 'origin/dependabot/github_actions/actions/cache-2.1.7' into combined-pr-branch",
  "b85859c": "Bump actions/cache from 2.1.6 to 2.1.7",
  "b1cdaf9": "Tune Cassandra options for faster startup (#4309)",
  "9a3bff0": "Bump actions/cache from 2.1.3 to 2.1.6 (#4162)",
  "63d0290": "Update actions/cache requirement to v2.1.3 (#3651)",
  "c110086": "Change image used for test to avoid image name cache preventing proper pull (#3378)",
  "abf0f9a": "Fix remote gradle cache 400 InvalidArgument error (#3346)",
  "b073523": "Remove GitHub Actions cache restore keys (#3342)",
  "37df788": "Add continue-on-error for cache step, and upgrade GH cache action (#3133)",
  "892d84d": "Re-enable build cache",
  "785bdf5": "Temporarily disable use of build cache",
  "74a88ad": "Prevent Local gradle build cache collisions (#2778)",
  "3d40719": "Simplify remote build cache boolean expression",
  "cae51cd": "Tweak GHA CI configuration to enable Gradle remote cache push",
  "84f422b": "GHA: disable fail-fast matrix strategy (#2591)",
  "77189ef": "Set AWS credentials for the build cache in AZP (#2138)",
  "650e5b0": "Push to the build cache from AZP too",
  "9c320ee": "Add `x-amz-acl` header to allow public reads of the cache files",
  "64dcf7a": "use DigitalOcean for the build cache",
  "4373d1f": "Fail fast if `container_name` is set in Docker Compose file (#1581)",
  "2e7d69f": "fail fast if the event loop is shutting down",
  "b3d290a": "Fix problems with Travis gradle cache",
  "cb2c382": "Travis optimizations (#366)",
  "408e983": "Increase database connection timeout for slightly better reliability when DB containers are slow to start",
  "cd15bec": "Introduce null check for image tags when updating cache of available images.",
  "55671e5": "Merge pull request #81 from testcontainers/failfast-getMappedPort",
  "c16f2ad": "Make getMappedPort fail fast if the container isn't started or does not have the requested port exposed - add test",
  "8bd3309": "Make getMappedPort fail fast if the container isn't started or does not have the requested port exposed. Refs #75",
  "979a1c6": "Add Takari Maven plugins for slightly faster build",
  "ed9ba7e": "Add simple example for testing a Redis-backed cache",
  "c03e84c": "WIP: Add debug logging for timing information Add in-memory cache of available image names Improve some resilience of ambassador containers",
  "e397f26": "Resolve some unnecessary slowness of webdriver tests"
}, "testing-samples": {
  "5b82460": "Merge pull request #235 from jin/cache-android-test",
  "7dca3cf": "Add SHA256 of android-test for Bazel to cache it properly."
}, "TextDrawable": {
  "": ""
}, "thingsboard": {
  "43674b7f": "Ignore a flaky test that is based on wrong cache strategy",
  "f969f07f": "Minor performance optimization",
  "87bcaaba": "Default valid keys cache for 24 hours",
  "3bc5aa88": "Fix incorrect cache clearing on device delete",
  "54e59612": "Merge pull request #8254 from zzzeebra/optimization_dao_tests_with_cycles",
  "788013c6": "Local notification rules cache",
  "672c05d9": "clear duplicated attribute keys before loading them from cache to avoid NPE",
  "22981e5e": "added count entity cache",
  "e64887e0": "Added cache spec for tests",
  "0e01f1c7": "sendUpdateSharedAttributeToCloudAndValidateDeviceSubscription - timeout increased for run test stable on slow (busy) environments",
  "43f2e3b5": "Fix case when test runs to fast (within 1 millisecond)",
  "602e8ff7": "UI: typography optimizations",
  "ddca3ffc": "spring.test.context.cache.maxSize=1 removed as well as it always eq 1 during application tests (no performance effect)",
  "1bf57928": "tests: fixed test performance degradation (100% C2 Compiler) by removing -Xss384k and Mockito.clearAllCaches()",
  "24c930c6": "spring.test.context.cache.maxSize=1",
  "0448c9aa": "test memory optimization (disable integration rpc, coap, hikari.maximumPoolSize=16, etc).",
  "a6a4a67a": "handle timeouts on transport tests to provide clear explanation what is the problem. timeout increased for run test stable on slow (busy) environments",
  "60973c94": "us tests: wait timeout increased up to 30 sec for slow or busy environments",
  "8342d45b": "Merge pull request #7963 from YevhenBondarenko/fix/resources-cache",
  "0e28dd97": "fixed resources cache",
  "57242148": "UI: Move widgets cache to widget service.",
  "1b5d988d": "Improve upgrade from 3.4.1 to clear assets and repositorySettings cache",
  "bad7abac": "Merge pull request #7538 from smatvienko-tb/alarm-service-optimization",
  "11781bb6": "alarm service optimization - remove async().get() calls from synchronous methods",
  "2c8b9385": "Tenant Routing Info performance optimization",
  "31124311": "Device State performance improvements",
  "3aaefcae": "Merge branch 'feature/events-optimization'",
  "0678dbef": "Merge pull request #7001 from thingsboard/feature/events-optimization",
  "f1f1eb7c": "Merge branch 'master' of github.com:thingsboard/thingsboard into feature/events-optimization",
  "a339fe88": "Merge branch 'feature/events-optimization' of github.com:thingsboard/thingsboard into feature/events-optimization",
  "6a4140bd": "Merge branch 'feature/events-optimization' of github.com:thingsboard/thingsboard into feature/events-optimization",
  "3881c809": "Clean up cassandra partitions cache on remove",
  "c838c7ba": "Added slowQueue parameter to tune timeouts in runtime",
  "bf5f80c9": "Added pubsub queue support in bbt. Increased timeouts for slow queues",
  "7fa1ca36": "Remove transactional for delete tenant since it conflicts with the cache implementation",
  "3c85ca2f": "Merge pull request #6836 from smatvienko-tb/cache-flush-all-for-update-service",
  "84b8488f": "Merge pull request #6839 from smatvienko-tb/redis-cluster-startup-slow-down-avoiding-cluster-create",
  "18893d9c": "Fix tenants and User Update Time cache",
  "05c23049": "Redis cluster startup slowdown avoiding cluster create issue",
  "9bea1f2e": "cache flush all - redis cluster support",
  "48c3ce70": "Fix cache value serialization issue",
  "7bad2782": "Merge branch 'entity-view-optimization-develop34-clean' of github.com:smatvienko-tb/thingsboard into develop/3.4",
  "0c7dd1ec": "Merge pull request #6784 from smatvienko-tb/docker-optimization-no-install-recommend",
  "923dcff8": "No more transaction cache",
  "1ee35c2e": "EntityViewService optimization using local cache and lifecycle event broadcasting",
  "27870e9c": "Dockerfile optimization: --no-install-recommends ; rm -rf /var/lib/apt/lists/auxfiles /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_InRelease /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_dep11_Components-amd64.yml.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_dep11_icons-48x48.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_dep11_icons-64x64.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_multiverse_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_restricted_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_dep11_Components-amd64.yml.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_dep11_icons-48x48.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_dep11_icons-64x64.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_InRelease /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_dep11_Components-amd64.yml.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_dep11_icons-48x48.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_dep11_icons-64x64.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_i18n_Translation-de /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_main_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_dep11_Components-amd64.yml.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_dep11_icons-48x48.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_dep11_icons-64x64.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_i18n_Translation-de /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_restricted_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_restricted_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_restricted_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_restricted_i18n_Translation-de /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_restricted_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_dep11_Components-amd64.yml.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_dep11_icons-48x48.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_dep11_icons-64x64.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_i18n_Translation-de /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy_universe_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_InRelease /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_dep11_Components-amd64.yml.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_dep11_icons-48x48.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_dep11_icons-64x64.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_dep11_Components-amd64.yml.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_dep11_icons-48x48.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_dep11_icons-64x64.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_restricted_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_restricted_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_restricted_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_restricted_i18n_Translation-en /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_binary-amd64_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_binary-i386_Packages /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_cnf_Commands-amd64 /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_dep11_Components-amd64.yml.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_dep11_icons-48x48.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_dep11_icons-64x64.tar.gz /var/lib/apt/lists/de.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_i18n_Translation-en /var/lib/apt/lists/lock /var/lib/apt/lists/partial /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_InRelease /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_binary-amd64_Packages /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_binary-i386_Packages /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_cnf_Commands-amd64 /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_dep11_Components-amd64.yml.gz /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_dep11_icons-48x48.tar.gz /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_dep11_icons-64x64.tar.gz /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_i18n_Translation-en /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_multiverse_binary-amd64_Packages /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_multiverse_binary-i386_Packages /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_multiverse_cnf_Commands-amd64 /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_multiverse_i18n_Translation-en /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_restricted_binary-amd64_Packages /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_restricted_binary-i386_Packages /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_restricted_cnf_Commands-amd64 /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_restricted_i18n_Translation-en /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_binary-amd64_Packages /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_binary-i386_Packages /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_cnf_Commands-amd64 /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_dep11_Components-amd64.yml.gz /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_dep11_icons-48x48.tar.gz /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_dep11_icons-64x64%402.tar.gz /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_dep11_icons-64x64.tar.gz /var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_i18n_Translation-en ; apt-get purge -y --auto-remove",
  "ebbf5833": "Fix multi-key cache transaction for attributes service",
  "2b18b44a": "added tenant cache",
  "15c1e215": "Improve performance of relation and rule chain service",
  "76525766": "Postgresql repo from os-release $VERSION_CODENAME for dockerfile. Disable docker cache temporary to avoid cached releases collission",
  "1838e147": "Batch Relations save for import performance improvement",
  "ba9a768f": "Merge pull request #6682 from dmytro-landiak/fix/slow-query-logging",
  "fd53c243": "fixing slow queries logging",
  "c5ff1252": "Startup sequence optimization",
  "ba634ada": "Merge pull request #6536 from thingsboard/bug/cache-issues",
  "d1c1b705": "Merge branch 'develop/3.4' into bug/cache-issues",
  "32764d23": "Merge remote-tracking branch 'origin/develop/3.4' into bug/cache-issues",
  "a1596ac6": "Clean all the cache during update to 3.4",
  "ffe5b5ee": "OTA Package cache",
  "29396864": "Edge cache",
  "15104028": "Investigating the cache issues",
  "5f54887b": "entity view test performance improvements by Andrew's patch",
  "eed9a872": "test properties: Low latency settings to perform tests as fast as possible",
  "e61a77af": "BaseDeviceControllerTest refactored in async manner to improve performance",
  "92f141e2": "CustomerServiceSqlTest refactored in async manner to improve performance",
  "6a8800a8": "BaseCustomerControllerTest refactored in async manner to improve performance",
  "668634f8": "Tests: improved performance on tenant tests with concurrent creation and deletion",
  "f8a67511": "InMemoryStorage performance improved. Many test cases added since it is essential piece of code.",
  "7d40952f": "version upgrade: added clear redis to cache service",
  "6d196944": "add 'exists' method in TenantService and make it cacheable, update corresponding test",
  "ce085ea9": "UI: Modules load performance improvement - Load only systemJS compatible modules",
  "c15b4cee": "Merge pull request #5843 from smatvienko-tb/device-actor-performance",
  "bfe1daf9": "Improved performance of ts based query",
  "2a93edba": "add cache support for TenantService",
  "d3987d1c": "device actor checkSessionsTimeout refactored to improve performance and reduce memory pressure",
  "82dc38ac": "Merge pull request #5751 from smatvienko-tb/device_delete_transactional_and_cache_evict_refactor",
  "57b09b23": "device delete transactional and cache evict refactor",
  "cf2d8c68": "Merge pull request #5738 from smatvienko-tb/device_actor_do_not_dump_sessions_for_loacl_cache",
  "441168a9": "Merge pull request #5737 from smatvienko-tb/cache_spec_environments",
  "99cff022": "device actor - CPU overhead reduce for local cache - do not dump/restore device session for local cache. Test added for Actor system context init, default values supplied to simplify testing.",
  "e2155dee": "cache specs environments for CE added",
  "eebce55d": "Improved upgrade script performance",
  "d3c20b2e": "Alarm Query performance improvements",
  "540ccd0c": "upgrade: clear cache - //do not break to show explicit calls for next versions",
  "c621d41b": "version upgrade: cache cleanup service added to clear caches that can not deserialize anymore due to schema upgrade",
  "17f9eebe": "Set serialVersionUIDs for cached entities",
  "cb03cf74": "DNS cache TTL set to 60 seconds",
  "3ce5c27c": "dependency management: com.fasterxml (version unified with general jackson.version (no change), exclusions replaced with transitive dependency management), fasterxml-classmate version defined",
  "f3dcf720": "Merge pull request #5081 from vvlladd28/bug/entity-autocomplete/cache",
  "f9552e09": "UI: Fixed invalidate cache for change entityType or entitySubtype in entity-autocomplete component",
  "ecca0e5d": "device service cache eviction fix for saveDeviceWithCredentials",
  "b0be356f": "Merge pull request #5079 from thingsboard/smatvienko-tb-cache-caffeine-zero-size-fix",
  "82a66a94": "Fix device service cache. Configure maven surefire plugin to execute both test suits and single tests.",
  "6c4c4a22": "Merge branch 'cache-caffeine-zero-size-fix' of https://github.com/smatvienko-tb/thingsboard into smatvienko-tb-cache-caffeine-zero-size-fix",
  "eb8f115c": "Fix device cache",
  "1b49b000": "cache: Caffeine default specs adjusted from 0 to 10000 (10k). Because maxSize: 0 means the cache is disabled",
  "66924c62": "cache: Caffeine default specs adjusted from 0 to 1000000 (one million). Because maxSize: 0 means the cache is disabled",
  "638c2242": "cache: added test that fails on zero values specs",
  "ea217d2a": "cache: Transaction aware cache to synchronize cache put/evict operations with ongoing Spring-managed transactions.",
  "eead13ab": "Merge pull request #4882 from smatvienko-tb/events-cleanup-performance-improvement-for-big-data",
  "dd9257f6": "Merge branch 'master' into events-cleanup-performance-improvement-for-big-data",
  "babe3605": "events: performance improvements: UI fast response with latest events, ttl cleanup speedup (with schema update)",
  "d1855ee4": "javax.persistence.query.timeout with slowQuery repository for manual testing",
  "759e8ee3": "Device cache improvements during code review",
  "2287b05d": "device cache: removeDeviceFromCacheById added",
  "2880dcf5": "device cache by id",
  "f58fe164": "Merge pull request #4832 from smatvienko-tb/cache-attribute-service-performance-improvement",
  "5118e1ed": "events: performance improvements: UI fast response with latest events, ttl cleanup speedup (with schema update)",
  "6b622ce4": "cache: CachedAttributesService tiny test refactor",
  "0b479429": "Merge branch 'master' into cache-attribute-service-performance-improvement",
  "e1c1e7eb": "cache: CachedAttributesService fixed after merge to the latest master, fixed license headers",
  "26f0e484": "Merge pull request #4757 from smatvienko-tb/cache-attribute-service-performance-improvement",
  "be61b3c8": "cache: CachedAttributesService Executor choice depends on local or remote cache type. For local - directExecutor, for remote (IO calls) - dedicated threadPool to unblock any caller thread. Test added.",
  "c843b2f0": "cache: CachedAttributesService replaced directExecutor with CacheExecutorService",
  "e4dd517e": "cache: added cache executor service",
  "24eca345": "new utility class tbStopWatch added to improve performance measurement experience",
  "6888a1b3": "new utility class tbStopWatch added to improve performance measurement experience",
  "4e151609": "UI: Add dashboard logo sanitizer url; Added dashboard logo cache",
  "a0623e8e": "UI: Add cache cellContent, cellStyle, rowStyle in entity tables widget",
  "51d14efe": "fixed OtaPackage data cache",
  "67de61e6": "fixed OtaPackage data cache",
  "07926350": "UI: Improve dashboard performance - move widget header to widget container",
  "8e08ddcb": "Return fast if entity is edge",
  "c768fcba": "Dashboard performance improvements by changing change detection strategy to OnPush",
  "612a17af": "Clean up cache in case entity was renamed",
  "b2ba2025": "added firmware info cache",
  "3fbbfea3": "changed firmware data type to oid and updated firmwares caffeine cache config",
  "d25d13d7": "remote js-executor: added slow query log, log config on service start",
  "6c5cf107": "added firmwares cache to the application-test.properties",
  "cb945010": "device count performance for 100k+ devices per tenant. Added additional tests for the DeviceService",
  "3228312c": "alarms count: performance fix based on pg_stat analysis. Counters queries refactored as two subqueries: inner join (count with relations) + left 'anti' join (count without relations). AlarmServiceSqlTest passed. CE",
  "3e8824c5": "UI: Improved dashboard load performance by optimizing widget header template.",
  "43309d24": "Added instruction to update redis config if attr cache enabled",
  "c7df356f": "Wrapped attr cache requests, fixed bug",
  "ab76d81c": "Imrpvements to the cache",
  "29fd4fb0": "Save Attributes to cache",
  "5391d296": "Remove device from cache in case null value cached in the distributed redis",
  "8766902d": "UI: Class/Models optimizations",
  "ed56f041": "UI optimizations",
  "452090b9": "Merge pull request #3883 from ShvaykaD/feature/cassandra-partitions-cache-3.2",
  "e516cd31": "added Caffeine cache for Cassandra ts partitions saving",
  "2ea3b187": "partitions cache improvements",
  "0de5868b": "added Caffeine cache for Cassandra ts partitions saving",
  "529608e6": "Improved transport cache invalidation for device updates",
  "762c6dae": "improved performance of table widgets - removed unused ngZone.run and detectChanges, changed functions trackByRowIndex - now is used index, not id, minor improvements for functions, used after data updating.",
  "0245ff24": "Transport Profile cache",
  "07738c31": "Fix device profile cache",
  "7841d117": "Tenant/Device profiles cache support.",
  "02b6cf6d": "Fix alarm data subscription. Maps cluster mode optimizations.",
  "eef09242": "FullTextSearch performance improvement",
  "bbb2c0d0": "Alarm query optimizations",
  "b7321716": "Removed cache from OAuth2Service",
  "b9b8b49a": "Get OAuth2Params from DB (not cache)",
  "99782159": "Fix work with cacheWriteLock in saveTenantOAuth2 method",
  "1628f798": "Returned reading system OAuth2 config from DB (for startup cache filling)",
  "3a212355": "Added saving TenantOAuth2 config in cache",
  "2d42d4e3": "Added saving SystemOAuth2 config in cache",
  "8e1e1ec3": "Get OAuth2Params from cache (not DB)",
  "7bedf10b": "Load all OAuth2 config in cache on startup",
  "b3050b9a": "Init cache on start-up",
  "0af0422a": "Default edge rule chains code optimization",
  "ec8f53ae": "Rule chain UI performance improvements",
  "90d8bef5": "Alarm performance improvements",
  "d1c89fe1": "Added condition to response if the cache is empty. (#1912)",
  "97989d96": "Don't update unless the datahas changed, otherwise there will be performance problems when the data is large",
  "56a7d4c8": "Update fasterxml.jackson libraries version",
  "ffc56f5c": "Add prefix to device credentials cache keys.",
  "e9e10d74": "cache webpack resources and run loaders in concurrent mode",
  "768886d0": "Use a fast serialization library like FST for serialization of TbActorMsg instead of the default java serialization because java serialization is notoriously slow.",
  "f27ab35b": "Remove redundant cache properties from test config",
  "39e6b904": "Fixed entity view cache evict",
  "626d2ce1": "caffeine cache max size should include value collection size",
  "87eb21d6": "Were fixed caches",
  "7bfccc0f": "Was fixed cache to pass tests",
  "74bfd4c7": "fixed cache after merge with upstream/feature/entity-view brance",
  "9a77b2b1": "Was fixed the cache",
  "20e3dc25": "To repair the cache",
  "95865693": "use direction in relation search cache",
  "fb294561": "Cache assets when finding them by tenant and name cfr the caching of devices => add asset in cache directives of config files",
  "b835d665": "Few performance tuning parameters",
  "eba98b80": "relation cache fixes",
  "5b03e45f": "Relations cache fix.",
  "1776aadb": "cassandra rate limit clear latest telemetry cleare rule-plugin cache",
  "872a2065": "Fix cache issue for relation service",
  "fed0fe8b": "Redis cache as an option and adding Serializable.",
  "8eb6172d": "Ignore cache control headers for static resources.",
  "4b67d428": "Merge pull request #189 from volodymyr-babak/fix/device-name-type-cache-fix",
  "f7bbe213": "Fixed cache functionality. Moved annotation from interface to classes because of Spring bug https://jira.spring.io/browse/SPR-15271",
  "7120d61f": "Misc fixes after performance testing",
  "5f606912": "UI: Improve data simulation performance. Improve processing of default zoom level by map widgets.",
  "5471325f": "Disable spring boot cache control in order to enable browser caching."
}, "ThreeTenABP": {
  "": ""
}, "thumbnailator": {
  "": ""
}, "ticker": {
  "15241a0": "Measurement optimizations and remeasure after animation completes (#19)"
}, "Timber": {
  "b39934b": "Merge pull request #312 from rivaldi8/artist-list-always-fastscroll",
  "a77810e": "new architecture improving performance",
  "f6c41b9": "performance improvements",
  "8a760da": "faster queue song loading",
  "1a9bdde": "fix retrofit request cache",
  "de7f839": "performance improvements-wrap loaders in asynctask",
  "9d04f59": "recycler view fastscroller"
}, "tink": {
  "273933a": "Add refaster templates for DeterministicAead and StreamingAead key templates.",
  "48ccfca": "Add refaster templates to translate KeysetHandle.generateNew(AeadKeyTemplates.XYZ) to KeysetHandle.generateNew(PredefinedAeadParameters.XYZ)",
  "37e321a": "Add Refaster Templates to change MacKeyTemplates.XXX to PredefinedMacParameters.XXX in most cases.",
  "9554ad1": "Add two more refaster templates: one replaces apps BUILD.bazel cc cmake CMakeLists.txt docs go javascript java_src kokoro LICENSE objc passing_test.sh proto python README.md testing tinkey.rb tools KeysetHandle.readNoSecret(BinaryKeysetReader.withBytes(bytes)); with the simpler apps BUILD.bazel cc cmake CMakeLists.txt docs go javascript java_src kokoro LICENSE objc passing_test.sh proto python README.md testing tinkey.rb tools TinkProtoKeysetFormat.parseKeysetWithoutSecret(bytes); which does the same.",
  "dd698d4": "Improve the refaster documentation somewhat.",
  "94e792a": "Add a ReadMe file and an example how to run refaster patches.",
  "83f04c7": "Disable the test testBuilder_withRandomId_doesNotHaveCollisions on Android -- it is too slow and not very android specific so that a special test is not really needed.",
  "58ef710": "Merge pull request #542 from slowy07:minor-changes",
  "7f64e0e": "Two tiny changes to aid jscompiler optimization in tink",
  "0e875db": "Add OpenSSL-compatible one-shot AEAD implementation. When Tink is built against BoringSSL it uses the EVP_AEAD_(seal|open) APIs for performance reasons, while it uses the EVP_CIPHER APIs otherwise. AES-GCM-SIV and Xchacha20-Poly1305 are currently unimplemented with OpenSSL.",
  "0ccc51c": "Add seek to slow input streams.",
  "71636aa": "Add slow readable streams for testing.",
  "9ea506b": "This should provide a slight performance boost over cloning the Mac every time it is used and doesn't have to deal with edge cases.",
  "3a4783c": "Disable all tests which call factory.createKey() in TSan -- they are too slow.",
  "75edfba": "Fix some issues with the ecdsa subtle polyfill when running under closure optimizations and remove base64 url padding characters for better subtle interoperability.",
  "f40334b": "Fix some issues with the ecdsa subtle polyfill when running under closure optimizations and remove base64 url padding characters for better subtle interoperability.",
  "de8cae1": "Adding a small optimization, per bleichen@'s suggestion.",
  "4bec791": "Excluding failing or slow Android tests and running the rest as presubmit.",
  "e2b661b": "Reducing the running time of some of the slowest tests.",
  "ee6b44b": "Downloading maven jars with java_import_external which is faster.",
  "8142ab2": "Replacing git_repository with http_archive which is faster."
}, "tinker": {
  "b493bfd": "[tinker] cache method object when using reflection to invoke methods in applicationLike.",
  "4b3cf8d": "[tinker] bugfix: Some Android O device treat 'oat' directory under tinker's dex path as a regular file, which leads to failure of dex optimization.",
  "30c03bd": "[enhancement] remove splash oat Activity [enhancement] add interpret mode after first oat to fast first launch time"
}, "TinyPinyin": {
  "": ""
}, "tiny-spring": {
  "": ""
}, "titan": {
  "60766bb": "Adding query optimization time to profile",
  "ea08312": "Titan strategies are not vendor optimizations.",
  "3c2ccad": "registered more classes in AbsatractTitanGraphProvider as stuff was being cached. @spmallette -- this is so crazy and error prone. Is there a way around having to do this?",
  "c1d5dbd": "Added strategy that checks that IDs are supplied in the correct type and are not mixed within one query. Also make in memory graph fast by reducing id allocation wait to zero. https://github.com/thinkaurelius/titan/issues/1080",
  "7344c33": "Disable transaction cache for compute https://github.com/thinkaurelius/titan/issues/1031",
  "168fb44": "Add a new config option for waitSearcher that defaults to false. Allows unit tests to run without race conditions and other users to run a maximum performance.",
  "867fb39": "Introduces overwrite semantics for vertex properties. If a new property is added with cardinality single or set then it overwrites any existing ones without throwing an exception. If possible, it will try to avoid reading existing properties from the backend for better performance. Fixes #938.",
  "6deeea7": "Use TermsFilter for lucene test queries. This should be faster and also fixes the unit tests. Revert the default property cardinality to single.",
  "eba374e": "Only apply cache.tx-cache-size min on r/w tx",
  "a97710d": "Put a min of 100 on cache.tx-cache-size",
  "9655018": "Disable cache on correct tx for schema reads",
  "10454c3": "Add SolrIndex to reflective opt loader fast path",
  "f991580": "Implementing TP3 optimization strategies",
  "8889a15": "Added method getVertices(long.. ids) to retrieve multiple vertices at once with better performance and usability than retrieving them individually. Fixes #575",
  "4ba83ee": "titan-dist pom optimization",
  "5f615ee": "Added additional test coverage and made caching configurable on a per transaction basis so that schema retrieval operations can bypass the cache and cache eviction works as desired.",
  "09c5af1": "Disabled for now: test case for edge TTL constrained by vertex TTL where db-cache=true",
  "a31802d": "Add tx vertex cache size regression test",
  "a0b3fc2": "Fix cached_classpath generation for `mvn package`",
  "5de7451": "Keep all modified vertices in cache, not just those with added relations, so that we can keep track of vertex lifecycle states.",
  "7484589": "disabled test (for now) since its only performance related (move into corresponding profile)",
  "c976669": "Minor optimization by checking whether a store multi query is actually needed.",
  "fd77d82": "Refactored cache in KCVS, implemented new typecache, instrumented both with Metrics, updated test cases accordingly, and a lot of other minor refactoring changes.",
  "c05edc0": "Refactored cache in KCVS, implemented new typecache",
  "6c2c2c9": "Using reuseIterator in SimpleVerteyxQueryProcessor and IndexSerializer for better performance. BUILDS BUT NOT TESTED!",
  "e50826b": "Merge branch 'fix-for-performance' of github.com:mpouttuclarke/titan into mpouttuclarke-fix-for-performance",
  "6bcb26f": "added TitanHBase testing with Faunus -- very slow and requires HBase is running. Now two integration test flags -- skipCassandra and skipHBase.",
  "66cdb1c": "Added test case to investigate warm up query performance.",
  "6576a7a": "Set cache concurrency to available processors",
  "ca48986": "use Guava cache in RelationQueryCache",
  "a1870b3": "improved database level cache sizing",
  "ee21e37": "updated cache configuration for non-embedded local configuration to use 3 minute timeout.",
  "1a19b02": "Updated configuration files to enable cache by default",
  "10a0e03": "Added a concurrent update test for db level cache.",
  "1887ef9": "Improved database cache test coverage",
  "7311776": "Better size estimation for cache",
  "eb38250": "Tweaks to performance test surefire config",
  "9b59abf": "Reverted back to Guava cache which is slightly slower but better behaved since it does not require a separate cleanup thread.",
  "e9f4a13": "relaxed performance test case requirement to not fail on outliers.",
  "a39c3cb": "Implemented a database level storage cache for Titan that significantly increases warm cache performance. Added tests for the cache.",
  "e0c5f71": "Use simple hashmap for caching in CacheVertex and made sure all access to it is synchronized. This a single vertex in a single transaction it not contended a lot, this should be a lot more space and memory efficient than a heavy Guava cache. In the future, we should investigate how to release memory heuristically on such this 'cache'.",
  "d0fb48f": "Modify cache store adapter for locking",
  "86bc51a": "Added metric and cache hit based test cases to ensure that the correct number of storage backend retrievals are happening. Removed query limit check for static query caching. Fixes #479. Made hashcode for SliceQuery children based on HashCodeBuilder.",
  "28f1f56": "Added vertex centric index handling to SimpleVertexQueryProcessor for further performance improvements.",
  "51f9ca3": "Performance optimization by introducing SimpleVertexQueryProcessor that can handle the most common queries more efficiently.",
  "881248f": "Tweaks and fixes to Infinispan cache & manager",
  "763aada": "Merge branch 'fix-for-performance' into infinispan",
  "0fec266": "Merge branch 'fix-for-performance'",
  "820f683": "Tweak memory/performance test profile activation",
  "63cda81": "Merge branch 'fix-for-performance' into infinispan",
  "13dd48a": "fix VertexLRUCache get to actually cache non-existing vertices",
  "0b82db1": "Merge branch 'fix-for-performance' of github.com:thinkaurelius/titan into fix-for-performance",
  "4453864": "1) Added subsumption test to CacheVertex so that more restrictive queries can be answered from cache. 2) Renamed ImmutableLongObjectMap to RelationCache 3) Fixed ByteBufferUtilTest by using signum",
  "452a229": "replace guava cache in LRUVertexCache with Solr based CLRUCache backed by NonBlockingHashMapLong",
  "04edd7f": "Merge branch 'master' into fix-for-performance",
  "c761721": "titan-core performance improvements",
  "9692b2e": "Reduce default cache size of CachedKeyColumnValueStore to 1000.",
  "6bd2ad3": "Implements a property prefetching configuration option that will instruct transaction to load all properties on a vertex when a property is first looked up on the vertex. This leads to much better latencies on multiple vertex lookups against high latency storage backends and is hence enabled by default for distributed storage backends. Added performance test cases to validate its behavior and test performance. Closes #145",
  "ad6c72e": "Change hazelcast config from kcvs to cache",
  "b6c4402": "Extended performance test coverage for benchmarking read heavy transactions (i.e. traversals only).",
  "0db4efc": "Make mvn -Pperformance-test run MemoryTests",
  "41d3fad": "Better GraphQuery execution to take advantage of multiple indexes covering a single index. This takes care of the performance aspect of #373.",
  "b16a34e": "Renaming Groovy-based performance test",
  "fa7b919": "Refactored MultiQuery performance tests",
  "639d431": "Added TransactionBuilder interface which gives the user the ability to configure transactions prior to opening them and thereby controlling performance and consistency checking aspects of the transaction on a per transaction basis. Use TitanGraph.buildTransaction() for that. One aspect TransactionBuilder lets you control is whether a TitanTransaction should verify the existence of all vertices internally. Since this is expensive, its disabled by default but can selectively be enabled via TransactionBuilder in the face of data degradation on eventually consistent storage backends. Fixes #363. Fixes #214.",
  "7d69240": "Fixes #335 by way of introducing an LRU VertexCache. Added configuration option tx-cache-size to make its size configurable on a per transaction basis. Greatly refactored the PerformanceTest Case to verify that the LRU cache indeed solves the running out of memory problem as well as test for other memory leaks.",
  "69ce5e9": "Merge branch 'performance-test-rewrite'",
  "e73afae": "Moved performance test tuning into JUBProvider",
  "eef1dd2": "Merge branch 'master' into performance-test-rewrite",
  "d2673ff": "add KeyColumnValueTest for HazelcastKeyColumnValueStore (+ performance improvements)",
  "702f289": "Serial performance test refactoring",
  "746dfde": "delete titan-ehcache module",
  "5bc3cf6": "Initial rewrite of singlethreaded performance tests",
  "22500d4": "Merge branch 'performance-test'",
  "66a3912": "Reenabling performance and concurrent JUB tests",
  "f54f1be": "Finished query optimization and execution refactoring. NOT YET TESTED.",
  "3f689bb": "Temporary performance testing changes",
  "063f0a1": "Changed the storage format to: 1) Make it faster to read relation information without having to read properties of the relation (i.e. header only) by writing the relation and vertexDiffId backward 2) Moving the value for properties into the value part of the entry to allow longer properties than 2^15 byte.",
  "283366d": "Merge remote-tracking branch 'origin/master' into performance-test",
  "4726e73": "BlueprintsMapOutputReduce has been generalized to support arbitrary definitions of uniqueness using Gremlin/Groovy distributed-cache style scripting. Bam.",
  "90c88bf": "BlueprintsMapOutputReduce has been generalized to support arbitrary definitions of uniqueness using Gremlin/Groovy distributed-cache style scripting. Bam.",
  "a49e69e": "Simple performance benchmark implementation",
  "08940fc": "Reapply bugfix/optimization changes",
  "45a1fb8": "excluding the performance and concurrence tests from the default test suite",
  "6517555": "Improved performance of in memory key column value store by a factor of 3-5",
  "838fc7d": "disabling the exchange cache, it was causing the concurrent tests to fail",
  "0d0aede": "cleaning up some of the persistit performance notes",
  "35420a4": "Improve performance of Persistit adapter for Titan",
  "61fce12": "more memory mapper optimizations.",
  "57b7214": "more memory mapper optimizations.",
  "eedfe35": "more memory mapper optimizations.",
  "8c83e21": "migrated the optimized GremlinScriptEngine from TinkerPop Gremlin to FaunusGremlinScriptEngine. Much better performance as import is not callled on ever evaluation.",
  "a6ee345": "Playing with performance test",
  "5fafe91": "added simple performance test for key column value store",
  "da8901b": "refactored ID acquisition to make it more robust and faster. Added test cases to test multi-threaded id acquisition through two different storage manager instances.",
  "d2b1ccc": "founds some optimizations, cleanups, and made CountMapReduce emit a long -- and use a NullWritable key.",
  "4159a77": "more optimizations to combiners.",
  "87e8af7": "vearious Writable optimizations in mapreduce classes. Fixed a counting bug in SideEffectMap.",
  "fa47b09": "optimization to CommitVerticesMapReduce and small pathEnabled() tweaks -- getting ready for the biggy.",
  "b111301": "Uses a fixed key length of 8 for the BerkeleyJE adapter which improves performance.",
  "f8e8eca": "Moved test cases opening the database 100 times to performance since it takes quite a while.",
  "f4d8e06": "added optimization around static final Strings for edge labels to have the same in-memory reference.",
  "9296324": "added optimization around static final Strings for edge labels to have the same in-memory reference.",
  "70ff988": "added more new() optimizations and added new logo for documentation.",
  "26fadd4": "memory and speed optimization in various operators.",
  "f27f876": "memory optimization to Transpose and more testss in TransposeTest. Added a stub for EdgeDirectionFilter.",
  "43b6a1e": "trivival nick nack syntax optimizations to FaunusElement.",
  "ff4c4b8": "performance test exclusion in pom.xml"
}, "Toasty": {
  "": ""
}, "traccar": {
  "4b9ff1b": "Fix cache updates",
  "d0df0c2": "Handle missing cache",
  "471de2a": "Safer cache request",
  "c4ff983": "Add position cache",
  "65d3654": "More cache improvements",
  "cd229da": "Improve cache invalidation",
  "59bbaa3": "Handle missing cache (fix #4861)",
  "026dc29": "Add position cache",
  "43942f4": "Inverse user notification cache",
  "6e1d43d": "Integrate cache manager",
  "402fd2b": "Another permission optimization",
  "d9ad819": "filtering optimizations",
  "e39f556": "Make access to permissions cache thread-safe",
  "c64ad48": "Make session cache per protocol configurable",
  "38e92f4": "Instance variables optimization",
  "58a99a3": "Use the optional no_annotations=1 parameter in the call to the OpenCage API. This makes the response slightly faster by not requesting information traccar never uses.",
  "195ec5a": "- Move media servlet to api context - Cleanup and optimization",
  "df65b06": "Update group and device cache on group delete.",
  "668d0c6": "Combine trips and stops detectors and some optimization",
  "cbaf29a": "Make cache control configurable",
  "0e3c39e": "Fix initial cache fill",
  "6e08953": "Fix group cache update",
  "df53571": "Disable session cache for HTTP protocols",
  "98ba0e2": "Merge pull request #3269 from Abyss777/distance_optimization",
  "2c82232": "Small trips calculation optimization",
  "2cbfa0f": "Clear deviceUsers cache before refresh",
  "0999fa0": "Run slow test only on CI server",
  "0601225": "Don't cache user password (fix #2455)",
  "edaa074": "Option to ignore session cache (fix #2372)",
  "c8816bd": "- rename table and unique constraint - rename some functions - optimization and simplification",
  "ea0bdea": "Merge pull request #2242 from Abyss777/users_cache",
  "21bf101": "Implement cache for users objects",
  "41668ca": "Merge pull request #2187 from Abyss777/java_mail_optimization",
  "00f4968": "Merge pull request #2185 from Abyss777/java_mail_optimization",
  "4ebce65": "Small optimization",
  "70f6849": "Organized server cache",
  "56784bd": "Change order cache initialization",
  "a4a127b": "Merge pull request #2099 from Abyss777/fix_groups_cache",
  "dd8dc4d": "Disable group cache updates",
  "f8f21ce": "More optimizations",
  "49f0025": "Style fixes and optimizations",
  "f08bb5a": "- Work only with cached devices from everywhere",
  "6da14ad": "Current device geofences should survive cache update",
  "0271fa2": "Style fixes and optimization.",
  "6e00239": "- Synchronization device cache on updateLatestPosition and updateDeviceStatus",
  "0065906": "Two optimizations",
  "1bc13e9": "Small optimization and style fix",
  "d57d87e": "Invalidate cache on database update",
  "d7c46e9": "Implement performance testing script",
  "cefba4b": "Add latest position cache",
  "5490a03": "Put back cache timeout (fix #933)"
}, "Transitions-Everywhere": {
  "db0aef8": "optimization for ChangeBounds on 5.1+",
  "edf618c": "reflection invoke call memory optimization"
}, "transmittable-thread-local": {
  "c969c56": "test: migrate demos/performance testers/user api test from TTL v2",
  "a69db8b": "refactor: set `initialCapacity` of `HashMap` explicitly for performance",
  "fb515e1": "chore: improve `clear-appveyor-cache.ps1`",
  "d23ad0e": "! update `clear-appveyor-cache.ps1`:",
  "8b37aae": "fix terminology, thread cache -> thread pooling",
  "a391f56": "cache downloaded jdk",
  "8973bbe": "add cache config for travis-ci",
  "ed73383": "no longer need traceId2LeafSpanIdInfo cache. Oh yeah!! #53",
  "194aa50": "add performance case #19",
  "1764d90": "avoid map copy in method run and call, avoid performance problem"
}, "trino": {
  "b25d3593": "Add a note about TrinoFileSystemCache.cacheSize consistency",
  "0f3ff0a1": "Use shared cache for per transaction file listing cache",
  "361add99": "Make TestHiveMetastoreMetadataQueriesAccessOperations run faster",
  "7f3bad9c": "Use data size for file listing cache",
  "c0983fa9": "Remove Hadoop Path usage from file listing cache",
  "38ff6001": "Improve performance for LIKE patterns involving %",
  "a9ecea6f": "Move cache invalidation out of Delta metastore",
  "85159447": "Use metadata in Delta flush_metadata_cache",
  "888d123c": "Remove unnecessary cache reliance in Delta DROP TABLE",
  "d7587fbd": "Test JDBC flush_metadata_cache sequentially",
  "593b4aab": "Allow Delta flush_metadata_cache after table creation",
  "4194377c": "Rename class implementing Hive's flush_metadata_cache",
  "af628baa": "Set min validation to 1 for config 'hive.fs.cache.max-size'",
  "ccb06d5f": "Improve TopN row number and rank performance",
  "36ffb4e3": "Flush extended statistics in Delta's flush_metadata_cache()",
  "e2aab1ea": "Test table functions with column and node pruning optimizations",
  "91a2d511": "Fix race condition in the hive table stats cache",
  "500a04a5": "Optimize filter function performance with copyPositions",
  "1f492b52": "Fail fast on unexpected case",
  "1e5774dc": "Flush transaction log cache in Delta flush_metadata_cache procedure",
  "d0e1654a": "Don't install flush_metadata_cache procedure in Iceberg",
  "b56065b8": "Add hive.metastore-stats-cache-ttl doc",
  "52ec6dc3": "Make hive.metastore-stats-cache-ttl >= to hive.metastore-cache-ttl",
  "ce4e7d26": "Allow to disable transactional directory listing cache",
  "c7109540": "Rename Presto in Hive performance tuning documentation",
  "5d15ca4b": "Allow different jdbc metadata cache ttls for schema and tables lists",
  "47e78274": "Additional test coverage for tableNames cache",
  "a666ecbe": "Expose schema name cache stats",
  "2d0eb6b4": "Remove distributed index join optimization",
  "0a75b797": "Simplify parsing and optimization of pattern",
  "85ae09e9": "Use GitHub cache to mark which workspace states compiled successfully",
  "9e833ebb": "Fix disabling cache in the setup action",
  "d54b7465": "Enable Maven cache in `build-test-matrix` job of `ci.yml`",
  "e41c3a75": "Improve performance of drop table in iceberg connector",
  "5a34f279": "Allow Iceberg writes to use either append or fastAppend",
  "6c67e32b": "Avoid saving cache in the build-test-matrix CI job",
  "6f201a27": "Use records for cache key in CachingJdbcClient",
  "237db4b0": "Remove extra cache backreferences when loading part and part stats",
  "39cfaeb9": "Simplify disabled cache construction in CachingHiveMetastore",
  "1b9201f9": "Disallow using of single-entry loader in bulk cache",
  "b61aeb1e": "Improve metastore stats cache tests",
  "f79af9c3": "Describe join pushdowns prioritizing correctness over performance",
  "11a9b696": "Do not cache PageSerializer/Deserializer in FileSingleStreamSpiller",
  "56936ba4": "Improve performance of parquet dictionary to domain conversion",
  "6523e85c": "Restore Maven cache from default branch",
  "d649248f": "Set CI cache download timeout to enable retries",
  "6e29d60f": "Add dataset cache to BigQuery connector",
  "527abc5f": "Update Maven dependency cache in `maven-checks` job",
  "1d7f5309": "Invalidate table handle cache when column changed",
  "c92b8d53": "Fix IDE warnings in trino caches",
  "82baea74": "Handle map representation of cache in SafeCaches",
  "2daf1697": "Improve Iceberg remove_orphan_files performance",
  "d58e44eb": "Improve grammar in cost based optimizations doc",
  "5df9bf12": "Fix formatting in cost based optimizations doc",
  "9876f736": "Document delta.metadata.cache-size configuration property",
  "91345865": "Add a maximum size to the Delta Lake metadata cache",
  "bdd31324": "Test EvictableCache load counts with different cache bounds",
  "389403af": "Align flush_metadata_cache procedure named args with other procedures",
  "0ece4983": "Extends flush_metadata_cache procedure",
  "54503257": "Use named arguments only in flush_metadata_cache procedure",
  "f2b212b6": "Invalidate partition cache as well when dropping table",
  "1f260bcb": "Improve SlicePositionsAppender performance",
  "5120f3fe": "Allow configuring credential-cache for kerberized hive connector",
  "5a6fefb3": "Improve LIKE performance",
  "dbe6e2bd": "Introduce table cache to FileHiveMetastore",
  "bedbcf61": "Improve performance of Iceberg snapshot expiration",
  "82a2cb6e": "Fix docs on flush_metadata_cache parameters",
  "627e395b": "Document the hive.fs.cache.max-size property",
  "6a4fcc04": "Fallback to loading all active data files for cached Delta table log",
  "03a23e4b": "Fix JDBC metadata cache invalidation for query() function",
  "01843af5": "Test JDBC query pass-through caches more",
  "0dc71139": "Always test all caches in TestCachingJdbcClient",
  "ada381f9": "Test Delta plugin init with cache disabled",
  "bd333889": "Share nothing when the table snapshots cache is disabled",
  "2a7e4977": "Rename TableHandle cache and cache key in caching JDBC client",
  "159a05cb": "Add comment about the `cacheMissing` toggle",
  "dacd3023": "Fix CachingHiveMetastore.getPartitionsByNames failing while cache invalidation",
  "a958faae": "Support query cache option in BigQuery",
  "52464200": "Improve MySQL INSERT performance",
  "2d532b28": "Improve PostgreSQL INSERT performance",
  "f0a33e2d": "Improve redis query performance",
  "e4571d76": "Pick failing query faster in testOutOfMemoryKiller",
  "75532954": "Use safe cache for Delta Lake Transaction Log",
  "00cc00e4": "Ensure cached query results are discarded",
  "7abed736": "Invalidate CachingHiveMetastore's table cache after DROP TABLE",
  "8bfe9fa1": "Fix CachingDirectoryLister when constructed with 0 cache TTL",
  "bb60e2d7": "Do not use/serialize/deserialize fieldBlockOffset when not needed When there are no null rows within RowBlock then it's not needed to store fieldBlockOffsets. This improves performance and reduces network traffic as fieldBlockOffsets array is not serialized or deserialized. Tests TestRowBlock and TestRowBlockEncoding were added. Benchmark result:",
  "276b8bb2": "Disable cache sharing when cache is disabled in JDBC connectors",
  "39046208": "Simplify evictable cache implementation",
  "796d4485": "Extract caches implementation for use in client",
  "d40ab4e0": "Replace cache invalidation with TokenPoll.error",
  "cd03dda6": "Merge redundant hive cache tests classes",
  "0747a37a": "Ensure caches are not used unsafely",
  "7c559109": "Remove unnecessary cache use in RedisJedisManager",
  "51f18a1a": "Document safe cache invalidation in SqlTaskManager",
  "9ad19044": "Use lazy computation cache idiom",
  "6619807f": "Remove redundant asyncReloading wrapper in function listing cache",
  "10c47565": "Remove unused caches in BigQueryClient",
  "54419f29": "Refactor CachingHiveMetastore cache building",
  "6529d7be": "Extend flush_metadata_cache procedure to allow flush of specific partition cache entries",
  "08701145": "Use append instead of fastAppend for Iceberg writes",
  "5bae1e5c": "Improve performance of VariableWidthBlock#copyPositions",
  "48581bdc": "Improve decoding performance for long decimals",
  "c17c227d": "Add jdbc metadata cache flush procedure",
  "62ecf0d1": "Add hive metastore cache flush procedure",
  "a044970a": "Enable Maven cache in the CI workflow",
  "fd9e78cd": "Improve DictionaryBlock copy performance",
  "369849f4": "Improve performance of selectDictionaryPositions",
  "6ce24601": "Use Kerberos ticket cache if keytab is not provided",
  "24826104": "Extract BigQuery view materialization cache to separate class",
  "0f3b4ed4": "Use fast path in array_except when the right-hand array is empty",
  "e656ec46": "Improve performance when constructing QueryId instance",
  "da2cd0aa": "Ensure cached query results are discarded",
  "06d73454": "Improve SortedPositionLinks performance",
  "aac95d27": "Improve 128-bit multiplication performance",
  "a2f03fe2": "Add PageProcessor fast path for unfiltered row count projections",
  "80497f15": "Document the metadata.cache-maximum-size config property for JDBC connectors",
  "fb339253": "Document bigquery.views-cache-ttl config properties",
  "6bd61727": "Improve HashGenerator.getPartition performance",
  "15c9c531": "Optimize MarkDistinctHash for faster distinct mask creation",
  "1a159596": "Improve PartitioningExchanger performance",
  "3cfa6521": "Expose stats for caches in CachingJdbcClient",
  "8d5b360b": "Add metadata.cache-maximum-size config option to CachingJdbcClient",
  "e8ce3191": "Add flushCache method to CachingJdbcClient to invalidate all caches",
  "dd113a30": "Use table name as cache key explicitly",
  "e07325b5": "Make BigQuery views cache ttl configurable",
  "5288cbbc": "Clarify metastore cache property",
  "726b865a": "Retain more cached information upon insert",
  "9e7c0471": "Move Hadoop file system cache into Trino",
  "98b45dbe": "Make spatial join tests insensitive to join optimization",
  "ba894ecc": "Make join test insensitive to values optimization",
  "c5df3cc4": "Refactor ArithmeticUnaryExpression optimization",
  "56019ce7": "Suppress exceptions during expression optimization",
  "d39da664": "Decode Parquet dictionary faster",
  "0b9e2b78": "Added new config property for JDBC extern auth token cache",
  "8d4710bc": "Allow JDBC connector to invalidate statistics cache",
  "f652531e": "Fix Join optimization rule",
  "21ec7d49": "Add operator cache and coercion cache in metadata manager",
  "ceb2d1b8": "Add cached token option to jdbc externalAuthentication",
  "87d8d068": "Test cached getTableStatistics with query-based handle",
  "eab03cd8": "Improve performance of local exchange with connector partitioning",
  "e32676ad": "Improve performance of bucketed table inserts",
  "7779576f": "Improve performance of DictionaryBlock#copyPositions for masking block",
  "c41de1ec": "Improve performance of DictionaryBlock#copyPositions",
  "a4eb06ac": "Fork fastutil Int2IntOpenHashMap",
  "eaa4a7f1": "Improve aggregation performance for decimal",
  "60fccde7": "Remove redundant strategy.fail-fast from MemSQL CI",
  "74605d07": "Add unsynchronized fast paths to reduce contention in ExchangeClient",
  "f04496aa": "Hive performance properties table replaces presto pr 5845",
  "4a7c7bdc": "Fail fast Kafka Schema Registry on unsupported format",
  "8cda0299": "Fail fast INSERT with Kafka Schema registry tables",
  "3e140197": "Improve serde performance for int 128 blocks",
  "cd07bc46": "Improve serde performance for int block",
  "c7676bfd": "Improve serde performance for short blocks",
  "c681cdf1": "Improve serde performance for byte blocks",
  "08dce3fe": "Improve deserialization performance of int 96 blocks",
  "5bd4b431": "Improve deserialization performance of long blocks",
  "601ef3bb": "Refactor GroupedTopNBuilder for better performance and memory",
  "cbeed541": "Fork a local copy of fastutil LongArrayFIFOQueue",
  "b521dfc3": "Fork a local copy of fastutil Long2LongOpenHashMap",
  "0c8ec737": "Fork a local copy of fastutil Long2LongOpenCustomHashMap",
  "3e44101e": "Make BigArrays.SEGMENT_SIZE publicly accessible for optimizations",
  "b25c90b4": "Disable cache entirely when ttl is 0ms",
  "45f0dc5a": "Verify that columns are loaded and cached",
  "ad83f081": "Invalidate caches for given SchemaTableName only",
  "d0858b51": "Improve serde performance for Int96 blocks",
  "d10be6e8": "Decrease refresh thread count for metastore cache",
  "3a1bf59d": "Disable cache refresh for bulk metastore calls",
  "72eb05a2": "Simplify loading columns into cache in CachingJdbcClient",
  "caa3a78d": "Improve serde performance for Long blocks with nulls",
  "2e1e9120": "Improve serde performance for Long blocks with no nulls",
  "6a41fabd": "Fix detailed cache stats table name in docs",
  "616d1880": "Improve AesSpillCipher performance and reduce internal allocations",
  "7f303fbd": "Improve NestedLoopJoinOperator performance",
  "656060ce": "Add expiry to operators cache",
  "36b5b790": "Remove metastore transaction cache from Iceberg",
  "c922af8b": "Remove fast-inequality-joins configuration property",
  "ffe79e28": "Add memory tests for both cached and uncached ORC",
  "10f8a364": "Fix performance regression when hive SerDe doesn't prefer Writables",
  "e47b870b": "Improve performance of obtaining same current dynamic filter",
  "7bdb74cc": "Addressed second round of review comments, mainly added xml escaping and changing cache expiration property to reflect Duration type.",
  "1fb4fd1b": "Improve performance of reading Hive JSON tables",
  "889298f2": "Do not require 'hive.cache.location' on coordinator",
  "ea8d6929": "Add cache clearing to FileSingleStreamSpiller",
  "c8a31a07": "Remove redundant EXISTS during optimization",
  "45eb83eb": "Make sure cache reads counter increases when data is cached",
  "9ba18bb1": "Test getFileBlockLocations with cache",
  "448363f8": "Remove check that each node has cached data",
  "33fa45ed": "Make split scheduling Hive cache aware",
  "fd78ef67": "Add hive.cache.ttl and hive.cache.disk-usage-percentage configs",
  "a9da37db": "Remove session from HdfsContext, remove cache enabled session property",
  "1df99535": "Assert cached reads eventually",
  "3c261c77": "Assert remote read stats after file is fully cached",
  "77a633c6": "Add session property for disabling Hive cache",
  "db9422c1": "Add cache for delegation token in Hive thrift metastore",
  "ed964225": "Use dedicated cache key for internal Rubix configuration",
  "c2d34217": "Add cache write test",
  "8d4baa3f": "Make sure Rubix cache is not used with dynamic config providers",
  "c970ae0b": "Replace hive.cache.parallel-warmup-enabled with hive.cache.read-mode",
  "faff5e5b": "Improve readRows performance",
  "c9972e69": "Remove default for hive.cache.location",
  "135fad23": "Add SqlBaseParser initializer hook and refreshable ATN caches",
  "73825699": "Quiet fast install mvn",
  "c02f0174": "Fix Hadoop file system cache for JDK 12+",
  "96ade069": "Document cache TTL property in LDAP",
  "f6cc12d5": "Simplify FunctionRegistry caches",
  "7f1b04f8": "Don't create metastore cache when it's disabled",
  "01ca48b1": "Allow configuring hive directory listing cache with table prefixes",
  "e2a81a55": "Add support for Glue metastore cache",
  "faf44335": "Configure Hive metastore client to fail-fast in development",
  "8e45d531": "Allow configuring Hadoop KMS key provider cache TTL",
  "9448b99c": "Fix incorrect result for IS DISTINCT FROM optimization",
  "45393239": "Fail fast when plugin is not a plugin",
  "b25ebeb4": "Add Hive directory listing cache",
  "63ec248b": "Improve ORC double and float performance with batch reads",
  "30f78124": "Improve performance for positioned reads on S3",
  "b957f9b9": "Improve performance for DictionaryBlock.getSizeInBytes",
  "75a2b971": "Improve performance for thread snapshot component",
  "290f5be2": "Replace floorMod with faster reduction function",
  "b8c16076": "Add feature toggle for TopNRowNumber optimization",
  "76ca2818": "Invalidate all metastore caches upon flushCache",
  "937c4255": "Invalidate statistics caches after Table/Partition modifications",
  "bda3d6ed": "Improve performance and simplify map equal and distinct from",
  "e82dd6ae": "Stop product test containers faster",
  "7edd2526": "Add cache for parameterized type",
  "5e4235b5": "Disable optimization to short circuit on empty tables",
  "95edb1eb": "Use state object to cache output for array_join",
  "4da96b4e": "Change StatsCalculator API and cache stats in Memo",
  "eb3beb76": "Remove performance optimization for Future cancellation",
  "73d7303b": "Fix performance regression in SourcePartitionedScheduler",
  "8267b7f8": "Remove auto GC based on code-cache fill level",
  "4920ba48": "Expire projection and filter cache entries after one hour",
  "901a16fd": "Expire specialized function cache entries after one hour",
  "26b81670": "Improve performance of Analysis.getType(Expression)",
  "3178ffae": "Revert the code cache collection threshold to the previous value",
  "2790951f": "Extend non-equi join optimization to support range predicates",
  "04d9de84": "Add tests for non-equi join condition optimization",
  "d3fde32b": "Remove unused field from inequality join optimization",
  "3e31629d": "Improve map element_at performance by utilizing MapBlock O(1) access",
  "adb07a99": "Add cache to PageFunctionCompiler",
  "777c57db": "Test that cachedInstance in scalar function uses bounded memory",
  "794dbe5a": "Add PruneIndexSourceColumns optimization rule",
  "b10d5c7a": "Add PruneMarkDistinctColumns optimization rule",
  "66e93cd9": "Add PruneJoinChildrenColumns optimization rule",
  "825a0ffb": "Add PruneJoinColumns optimization rule",
  "08c922fe": "Add PruneCrossJoinColumns optimization rule",
  "c9d786c9": "Document encryption performance impact",
  "08e7fa36": "Recover the optimization in SliceArrayBlock",
  "a817360e": "Fix concurrency of Avro schema cache",
  "340988cf": "Rename fast_inequality_join flag to match feature toggle",
  "0c84723d": "Drop 'experimental' from fast-inequality-joins's description",
  "2d6fd9d7": "Improve performance of Raptor shards system table",
  "c0cf70c5": "Remove Cassandra cache configs",
  "9f3b7a0a": "Add optimization to include intermediate aggregations",
  "fe06fe86": "Change default metastore cache timeout to 0 in Hive connector",
  "08478320": "Remove processing_optimization implementations",
  "fa556295": "Fix performance regression in ExchangeClient",
  "980a52ac": "Do not cache partition keys",
  "e6571543": "Use fast decimal in DOUBLE to DECIMAL casts",
  "19c66350": "Use fast decimal division for divide and modulo operators",
  "3ffae435": "Use fast decimal in decimal to double casts",
  "7bdbd1f5": "Use fast decimal in AVG aggregation",
  "fdf248dc": "Use fast decimal in SUM aggregation",
  "99dad487": "Use fast decimal in add and subtract operators",
  "db0dd927": "Use fast decimal in multiplication operator",
  "87daeb8a": "Use fast decimal as internal long decimal representation",
  "637fff3c": "Improve performance of expensive getRegionSizeInBytes",
  "505842db": "Add stage performance page to Web UI",
  "acd9c45d": "Expose JoinProbeCompiler cache stats via JMX",
  "d8806ebb": "Expose JoinFilterFunctionCompiler cache stats via JMX",
  "3e4209ef": "Expose OrderingCompiler cache stats via JMX",
  "8559ae56": "Expose JoinCompiler cache stats via JMX",
  "2845b706": "Handle escape in LIKE predicate optimization",
  "629cc84d": "Introduce cache for LDAP authentication",
  "4b6651c5": "Add benchmark for ArrayTransform optimization with bytecode",
  "9956b5ed": "Improve performance of array_join",
  "22401a13": "Import quicksort of IntBitArray from fastutils",
  "f02780d3": "Fix and refactor boolean expression optimization",
  "6971be40": "Fix performance regression in HiveMetadata getTableLayout",
  "6430c91a": "Avoid running slow query on H2",
  "b9c62b82": "Limit Hadoop FileSystem cache size in product tests",
  "f93288dd": "Introduce hive.fs.cache.max-size property",
  "37233532": "Add cache size limit to Hive metastore cache",
  "647e8245": "Initialize cached instances in join filter function",
  "5b9ff8c6": "Use expireAfterWrite in Hive metastore cache",
  "b621953b": "Reduce default code cache collection threshold to 40%",
  "fe28b418": "Make code cache collection threshold configurable",
  "e6c14b7f": "Add cache for Signature to SpecializedFunctionKey resolution",
  "94952acc": "Add per-transaction Hive metastore cache",
  "fb4347ab": "Clarify that only bucketing optimizations are broken in 0.150",
  "983091db": "Disable outer join to index join optimization for non-equi criteria",
  "160ecd2b": "Improve performance of CLI output",
  "1b116344": "Allow configuring the interval for checking code cache size",
  "ee3ac800": "Invalidate cached data for new name when renaming a table",
  "25c5c5cf": "Add 0.137 release notes for expression optimizations",
  "21496c04": "Fix invalid plan with precomputed hash optimization in scalar subquery",
  "2c164a85": "Add dictionary optimizations to FilterPage in Page Processor",
  "42facb90": "Add optimization for RunLengthEncoded blocks in PageProcessor",
  "4156ed77": "Make equality checks for standard type classes faster",
  "a7d83509": "Add negative cache to topology aware scheduler",
  "95554c67": "Fix performance regression when building hash tables",
  "6b66350b": "Remove PruneRedundantProjections optimization",
  "9a4fe1e8": "Improve performance of InCodeGenerator",
  "7fbc5b27": "Accept Kerberos credential cache file path without FILE prefix",
  "d0bf004a": "Rewrite the very slow test for join",
  "863d4d88": "Use fastutils primitive sets in huge IN lists bytecode.",
  "8c0f3dfd": "Rewrite arbitrary to improve performance",
  "496e080e": "Enable distributed joins and hash optimization by default",
  "db74d643": "Move ProjectionPushDown to optimizations package",
  "2fd4d4b4": "Further optimization to computeAssignments()",
  "2353df2a": "Optimize performance of selectRandomNodes()",
  "be6815e2": "Fix bugs in AddExchanges and constant optimizations",
  "e7ef8a0e": "Invalidate Hive metadata cache for failed operations",
  "69f68443": "Fix precomputed hash optimization",
  "e86f3fe4": "Add cache for Raptor node IDs",
  "7f331bed": "Fix for row number window function optimization",
  "b2e64492": "Don't cache instantiated parametric types",
  "16ada09c": "Updated jol to 0.2 to resolve the slow startup problem due to heavy GC",
  "c3a0703c": "Improve Driver performance",
  "9a581589": "Add slow and fast OrcTests",
  "7a9f2d76": "Remove file optimization and compression from Raptor",
  "67ad0e3f": "Fix row number optimizations for unreferenced outputs",
  "f9897e87": "Add fast smoke test for distributed Hive",
  "c66fc6de": "Add fast smoke test for distributed Cassandra",
  "997b9f21": "Fix performance regression in variance aggregation",
  "df4c9915": "Minor cleanup and (potential) optimization in compiler",
  "87981e7b": "Revert 'Minor cleanup and (potential) optimization in compiler'",
  "59e0cbab": "Minor cleanup and (potential) optimization in compiler",
  "d3ef0e0e": "Remove useless date time literal optimization tests",
  "4febef7f": "Rewrite GroupByHash for performance",
  "4fb9bb7b": "Improve performance when computing partitions domain summary",
  "519e5226": "Use faster implementation of Murmur3 for approx_distinct",
  "70105e0c": "Allow optimization of subexpressions in certain cases",
  "a38d71b0": "Add optimization for DISTINCT LIMIT queries over sampled data",
  "cfaf60ec": "Add more optimizations for sampled tables",
  "9c2f4b9e": "Fix optimizer performance regression",
  "66c9f86e": "Fix logging for full code cache condition",
  "be685a53": "Allow fetching list of cached file systems",
  "f6c8855c": "Improve query performance for hive bucketed tables",
  "fa19eac9": "Add some SemiJoin predicate move around and limit optimizations",
  "2eda9d6d": "Install the code cache gc trigger on run()",
  "4ffd7f4f": "FileSystemCache include the fsType as part of the cache key",
  "0c1bc597": "Disable Jackson field name canonicalization (string intern cache)",
  "51535faa": "Refresh hive cached values in background",
  "efee4496": "Add com.fasterxml.jackson to parent-first packages",
  "b7c0d82d": "Add sys.slow_datanode table",
  "07eebdd8": "Expose hive flush cache via JMX",
  "ccccaa48": "Make trivial queries super fast",
  "6135b563": "Refactor FileSystem cache and fix incomplete caching issue",
  "17730b02": "Flush buffered console results during slow queries",
  "3aa2a0c5": "Send task info back with most responses so state is updated faster",
  "3ba5e6eb": "- Extend MetadataCache to also cache PartitionInfo and Partition names. - add JMX exposure of the Metadata cache stats.",
  "6e24ee2a": "After benchmarking the stats functions, rejigger the code a bit to make double_stddev and double_stddev_pop a mindboggling 27% (!) faster and all the long methods a little faster.",
  "ec5e6054": "Change task thread pool to an unlimited cached thread pool",
  "69eb80bf": "Fix AggregationOperator performance regression",
  "c94dc011": "Move plan optimizations to a separate package",
  "dfbd2ce7": "Slice performance improvements",
  "c5f25cb5": "Minor performance improvement for AggregationOperator",
  "9ee771fa": "Minor HashAggregationOperator performance improvements"
}, "tsunami-security-scanner": {
  "": ""
}, "TVBoxOSC": {
  "": ""
}, "twoway-view": {
  "3151c4b": "[layouts] Remove position argument from cache cacheItemEntry()",
  "56d7ebf": "[layouts] Remove offset cache from DividerItemDecoration",
  "b7ac829": "[layouts] Add cautionary performance warning in staggared grid",
  "fa25114": "[layouts] Rename ensureItemEntry() to cacheItemEntry() for clarity"
}, "tx-lcn": {
  "34ae905": "update com.alibaba:fastjson 1.2.34 to 1.2.83",
  "7601569": "txlcn-tm: cache",
  "b7b8e8b": "txlcn-tm: cache"
}, "typedb": {
  "0f43f66": "Optimise queries by introducing concept-level schema cache (#6808)",
  "5ca6151": "Add build cache to build-dependency job",
  "b85867e": "Set up remote bazel cache",
  "e0ad780": "Implement fast termination for reasoner (#6794)",
  "017a8cf": "Optimised relation unification performance (#6740)",
  "3f707c4": "Improve write performance by removing persisted statistics version (#6692)",
  "3bec439": "Fix reasoner to cache plans for given bounds (#6621)",
  "e6e6690": "Significantly faster rule conclusion insertability validation (#6521)",
  "892014d": "Separate active and optimal planner cache to optimise memory (#6443)",
  "b4d5686": "Improve type inference performance to enable large queries (#6431)",
  "e3aaaef": "Use a poller to store answer sources for the reasoner cache (#6340)",
  "c7d79aa": "Reduce traversal and resolver caches memory overhead (#6380)",
  "64640e3": "Simplify resolver answer cache execution flow (#6339)",
  "85ffd6b": "remove slow debug computation...",
  "a50814e": "Use self-hosted Bazel cache (#6198)",
  "ced5d18": "Introduce compressed and uncompressed clock cache for RocksDB",
  "347380a": "remove slow tostrings and logging (#6163)",
  "3798301": "Improve Type Resolver performance by giving it extra query planning time",
  "a6effd6": "Rule index: fast rule lookup and prevent deleting types in rules (#6035)",
  "b9d1cb5": "Improved the performance of data transactions (#6064)",
  "acb8546": "Fix traversal performance caused by not hitting traversal cache (#6058)",
  "2d1e11e": "Fixed Traversal.Structure to not modify itself, and make TypeResolver cache work",
  "8343698": "Added traversal test with performance bug (#5967)",
  "dd742d9": "Long lived rule cache and rule validation hooks (#5923)",
  "588450a": "Rearchitect schema cache by splitting schema db and data db (#136)",
  "8b2d123": "Introduce Schema Transaction cache with TraversalCache and ReasonerCache, and integrate TypeHinter properly",
  "694f486": "Lock schema commit and cache reset as an atomic step",
  "7806ee1": "Set ThingEdge.Persisted to not be cached in buffer",
  "55b9a69": "Fix import cache bug for migration (#5884)",
  "909f26c": "Refactor reasoner cache tests, RuleScalingIT and SubsumptionIT (#5843)",
  "ffff5a4": "Downgrade gRPC 1.29.0 to 1.24.1 due to performance issue (#5770)",
  "0d7cc81": "Fix ThingGraph.convert() by making it cache ThingVertex",
  "74fedec": "Removed Caffeine cache from AttributeSync implementation",
  "833dba1": "Defer db completeness check in query cache when fetching (#5673)",
  "7cb307c": "Fix relabeling and fail fast for invalid concept ID (#5554)",
  "e35718a": "Revise query cache behaviours (#5537)",
  "08b278a": "Ensure query cache doesn't return duplicate answers (#5520)",
  "88ddef7": "Use correct variable in //ci:test-cache (#5472)",
  "d68d312": "Increase commit performance by optimising type sharding (#5419)",
  "566fc11": "fix null pointer issue when retrieving meta implicit from ruel cache (#5403)",
  "47a548b": "Delete Concepts - sync in Janus tx cache (#5275)",
  "6d432b9": "Update query cache behaviour on insertions and deletions (#5300)",
  "c2acb94": "Limited cache (#5278)",
  "f444cb1": "update cache behaviour for queries with unique answer (#5262)",
  "505d21c": "make sure materialised answers are in cache when checking for existence (#5254)",
  "156fc6b": "Remove old query cache implementation (#5241)",
  "f34f3f6": "fix concurrent modification issue in cache (#5204)",
  "92f3f54": "cache pattern and vars for query and optimise conditional (#5197)",
  "592ef5d": "Enable query cache at tx level (#5131)",
  "7af7310": "removing unused code in caches (#5112)",
  "c027db0": "Increase query cache lifetime to disjunction (#5053)",
  "e69d80b": "Fix issues with fetching and propagating parents in query cache (#5056)",
  "0d4d323": "Propagate answers in cache if query is ground (#4972)",
  "94154e9": "Remove Sessions cache (#4920)",
  "da9f26c": "remove rule cache (#4808)",
  "086473c": "Introduce semantic query cache (#4633)",
  "f9a34c4": "Improve the m2 cache handling from using CI cache to workflow. Fix failing test caused by an invalid CI cache (#2984)",
  "0cdec4d": "add a call to cache in checking for need to decompose relations",
  "d0cf5ba": "cleanup query cache structure (#2909)",
  "ea1e4f7": "[Stable] Rule cache lvl2 (transaction level) (#2906)",
  "db393aa": "[Stable] Fix query cache inconsistency problems (#2862)",
  "4a759f7": "Merge pull request #2852 from kasper-piskorski/small-cache-fix",
  "b0a45dc": "disable janus cache (#2684)",
  "82fecd4": "[Stable] Fix some query cache inconsistencies (#2571)",
  "1942b3b": "Disable very slow query in SNB (#2369)",
  "9d82457": "Merge pull request #2355 from lolski/homebrew-slow-startup-from-fat-directory-workaround-stable-to-master",
  "d382e15": "Merge branch 'master' into homebrew-slow-startup-from-fat-directory-workaround-merge-to-master",
  "369c47e": "Flush tx cache to central cache even when not committing and not usin… (#2260)",
  "2c81e78": "make updates for structural cache",
  "156b51c": "Fix performance when traversing to concept subs (#2219)",
  "ab13ae8": "Remove casting cache (#2223)",
  "90c599a": "Introduce structural query cache (aka caching graql traversals) (#2121)",
  "3140165": "Memoize some fields for performance (#2123)",
  "8f5b190": "Extra cleanup and cache (#2113)",
  "3777d3c": "Cleanup cache calls (#2082)",
  "53c63ee": "Remove statergies causing slow queries (#2096)",
  "2c4eb78": "Fix performance issue with insert queries (#1994)",
  "2c9cba9": "Bug #16214: Odd validation errors caused by nasty cache leak (#1922)",
  "a31f083": "Bug #16214: Odd validation errors caused by nasty cache leak (#1922)",
  "b0a4ed5": "[Stable] To Miko with love (aka various small performance fixes) (#1874)",
  "ce88ae3": "Fix performance issue when specifying meta role (#1858)",
  "f5cfc4b": "Changed fast-fail behaviour in JS Promise.all() (#1809)",
  "e1586ea": "Fix issue with slow queries when comparing values of resources (#1706)",
  "e999559": "Bug #15092: Fix cache leak between transactions (#1645)",
  "ede710b": "Default cache timout to 10 minutes (#1600)",
  "fbf47c7": "Make copies of caches when cloning (#1465)",
  "f609fcf": "Graph ontology cache timeout configurable (#1462)",
  "fcdbdbd": "Engine 'fixes' to load: In-mem cache, logs over API (#1452)",
  "4c6261f": "Engine counts do not rely on cache (#1440)",
  "48323cd": "Fixing some mistakes on the new post processing jobs + time stamp on cache (#1432)",
  "89f083b": "Always dump cache when using read only graph (#1403)",
  "aa360d0": "common base class for cache and cleanup (#1159)",
  "e5aee38": "Deep clone cache to avoid transactions from affecting central cache. (#1152)",
  "8c00785": "Update cache time whenever cache itself is updated. Fixes bug where PP is always running. (#1129)",
  "e32874a": "small fix for cache answer retrieval (#1090)",
  "4f032c9": "Try to reduce race condition in post processing cache by deep cloning the resources to be merged (#843)",
  "83c02f5": "Improve performance and readability of `InsertQueryExecutor` (#839)",
  "12d376a": "FIx Titan performance issue due to no indexing on vertex IDs (#775)",
  "86861ef": "faster execution when requerying (#638)",
  "75e154b": "Disable dynamic smooth edges to improve many node performance (#300)",
  "bb53d7f": "Fix potential performance bug in Graql (#278)",
  "82d7dae": "Fix bug where queries involving types were slow (#152)",
  "bf0116f": "Make Travis automatically cache Maven directory (#126)",
  "ed456a6": "Clear Engine cache when clearing the graph with core. (#71)"
}, "u2020": {
  "e029cd4": "Merge pull request #288 from JakeWharton/jw/2017-07-19/faster-ci",
  "c8655fd": "Try to race emulator and build for faster CI.",
  "e1fa05f": "add OkHttp cache info to drawer",
  "904e0a6": "Share disk cache size between real and fake impls.",
  "b4d9d93": "Bigger cache."
}, "uCrop": {
  "9f13185": "Fixed resize logic for cropping original images. Coping 'content' uri images to cache if cannot get file path. Refactoring."
}, "UETool": {
  "": ""
}, "uid-generator": {
  "": ""
}, "UltimateAndroidReference": {
  "": ""
}, "UltimateRecyclerView": {
  "": ""
}, "UltraViewPager": {
  "3ca52a1": "Merge branch 'feature/opt_performance'"
}, "undertow": {
  "a4c5633": "Further improving performance by using less tmp registers",
  "748e553": "UNDERTOW-1812: Fail fast when renegotiation is requested using TLSv1.3",
  "18db96b": "UNDERTOW-1444 cached resources may not handle range requests correctly if item is too large to cache",
  "cb87679": "UNDERTOW-1320 Undertow DefaultByteBufferPool can overflow the allocation depth which disables the thread local cache",
  "18aa623": "UNDERTOW-1209 Slightly lower default buffer pool size to improve framed protocol performance",
  "6b262af": "Merge pull request #569 from frapex/mod_cluster-cacheconnections",
  "8d50105": "UNDERTOW-1204 mod_cluster proxy: set default value of cacheConnections (smax) to 1",
  "6a2d65c": "UNDERTOW-940 ResourceHandler sets cache headers regardless of status code",
  "5d29d4b": "UNDERTOW-811 Restore ability to disable cached authentication manager",
  "c221d2c": "Cache thrown exceptions to improve performance",
  "c8c4351": "Add ability to disable the cached authentication mechanism",
  "4b387e5": "Revert 'Minor performance optimisation'",
  "6d4565a": "Minor performance optimisation",
  "0f54e5a": "Use Fifo cache for path handler",
  "0b08aa6": "Change cache type to improve servlet performance",
  "bc76a32": "Add option to use cache in path handler, to reduce allocations",
  "14c7ce4": "1. If requested DELETE /test1 and this handler does not contain any DELETE, now it is searched if any route for /test1 was defined before calling invalidMethodHandler. Before it was always called; non uniform because after adding the route DELETE /test2, the code will search for a match for /test1 (defined by other http methods). 2. If I don't want to expose 405 (to be stealthy) or just for improving performance, I can now skip the matching done by allMethodsMatcher by setting invalidMethodHandler to null (before it was possible but will cause an exception and no call to fallbackHandler).",
  "6f82a7c": "update connection pooling to have a limit of cached connections",
  "f0cef74": "Improve performance",
  "32cbffc": "Fix chunking performance problem",
  "d0e4d38": "ServletPrentWriter performance improvements",
  "604a095": "Improve performance of read/write timeout",
  "d05bcad": "Fix issue in request parser fast path",
  "7c9771b": "Fix up bound check for cached headers",
  "777eaee": "WFLY-3261 Make sure login page is not cached",
  "0f6efec": "Fix bug in servlet Writer fast path",
  "493861a": "Do fast path encoding in a single loop",
  "ee60c0a": "Always add the cached authentcation mechanism so that programic loging works",
  "02dd5df": "Clear the cached identity from the session if it fails verification",
  "791c238": "Limit the size of the header string cache",
  "8d1e40c": "- replaces HashMap by EnumMap where the key is an enum, as EnuMap maps have better performance and memory characteristics for enum keys.",
  "634cc49": "UNDERTOW-117 Implement cache expiration for files based on the Xnio watch service",
  "f21d8c7": "Add option to ignore explicit flush for performance reasons",
  "18ed983": "UNDERTOW-112 Fix chunking performance issues by using writeFinal to write the chunk terminator",
  "5f78b18": "- improves performance of HttpString#appendTo(ByteBuffer) by using the bulk put method of ByteBuffer. Subclasses of ByteBuffer provide optimized implementations of the bulk put method which does not use a loop over the byte array.",
  "4bbfca1": "Make sure the max age of the buffer entry matches the max age of the cached metadata",
  "73d40ae": "Don't cache content-length, to prevent it from getting out of sync with the underlying file/cached entry",
  "e4e9fdc": "- replaces #toLowerCase() with #toLowerCase(Locale), #equalsIgnoreCase(String), #compareToIgnoreCase(String), or #regionMatches(boolean, int, String, int, int). #toLowerCase() without a Locale may lead to unexpected results in JVMs with Turkish locale (s. JavaDocs of String#toLowerCase()). Additionally it improves performance as #equalsIgnoreCase(), #compareToIgnoreCase() and #regionMatches() are faster in comparison to equivalent code which uses combination of #toLowerCase() and #equals(), #compareTo() or #startWith().",
  "5690b84": "- uses #valueOf(String) to obtain an instance of a wrapper object from the given string; if possible #valueOf(String) would return a cached object.",
  "66ffec2": "- fixes the initialization of state and remaining fields in case size is zero (Long.equals(Integer) results always in false; replaced by simpler and faster code).",
  "1d9b3c4": "Change to using arrays instead of lists for performance",
  "e553792": "Increase default buffer size to 16k for best performance",
  "b162b82": "Add utility class for automatically invaliding paths in the cached resource manager",
  "58ecf4a": "Add ability to invalidate cached resource data",
  "c9a2bbe": "Minor path handler performance improvements",
  "04c8ded": "WFLY-1585 Fix issue where cached resources could become corrupt",
  "d2552f0": "Change the way cached resources work, to avoid problem with includes",
  "f734a70": "Fix cache issue",
  "fd0ba25": "Improve the pipelining buffer performance",
  "050b54d": "Add support for maxAge into the buffer and LRU caches",
  "4c20854": "Fix output stream performance for large writes",
  "4c38d99": "Minor performance improvements",
  "ecb92d5": "Allow the buffer cache to be null in the cached resource handler",
  "142be04": "Add ability to write buffers directly to the output streams for best performance",
  "415d886": "Allow for multiple regions in the buffer cache",
  "cc82f98": "Minor performance improvement",
  "bd30c3e": "Add fast path to HTTP response channel",
  "8c9aa9c": "Add much faster header map implementation",
  "6dc665e": "Fix pipelining performance problem",
  "b0d4078": "Add cache control and clean up the predicates implemtation",
  "ef32ff9": "Add ETag and last modified support into the request cache",
  "98e55d1": "Fix minor performance issue",
  "d808650": "Add ability to configure a file cache",
  "4ae0c5b": "Add response code to cached information",
  "552c07c": "Adjustment so that the SSLSession is the current session and not a cached session, this is for a couple of reasons: - 1 - Firstly the session is not established until the channel is actually used, any cached session is for a pre-handshake state. 2 - Renegotiation is theoretically possible which again means a cached session may no longer be valid.",
  "3984ef1": "Use precompiled Pattern for performance reasons",
  "beb7263": "More performance and bug fixes",
  "138d424": "Remove path matching cache",
  "79de74c": "Don't hold a static reference to the file cache",
  "81485cd": "Initial buffer cache",
  "78e2847": "Make direct file cache hand off earlier",
  "cd90540": "Call completion handler in inline file cache; make completion handlers idempotent",
  "a8ce1fb": "Call completion handler from direct file cache",
  "b1d8b02": "Clean up error page handler and add file cache interface"
}, "usb-serial-for-android": {
  "fcd8596": "enable async read for FTDI as in CDC driver. this prevents -1 error from bulkTransfer() when receiving data in multiple packets, e.g. if consumed to slow at high baud rates. prevent loss of last packet if full"
}, "useful-java-links": {
  "5532ec3": "Merge pull request #117 from Vedenin/dependabot/maven/helloworlds/3.8-json/fastjson/com.alibaba-fastjson-1.2.83",
  "2c9d5fe": "Bump fastjson from 1.2.31 to 1.2.83 in /helloworlds/3.8-json/fastjson",
  "64a4f24": "Update version in pom.xml for fastjson and jackson",
  "3fff06c": "Update version in pom.xml for fastjson and jackson",
  "753a988": "Add new examples to gson and fastjson",
  "4a69bcc": "Add new examples to gson and fastjson"
}, "v9porn": {
  "": ""
}, "VasSonic": {
  "04cfd0a": "[iOS]SonicSession add method to get cachedHTMLString",
  "b2eaa70": "Fix cache-expire-time update faild",
  "d2a02c5": "Fix the NullPointException when save sonic cache.",
  "e284988": "Fix first load cache faild",
  "504bf51": "Fix the bug about template always refresh when cache-offline is store in LocalServer mode.",
  "f91b8f0": "Update cache expire time when connection success",
  "c1e2362": "Clear Sonic cache when Cache-Offline is false",
  "57e86f1": "Remove cache while response Etag header is not exist",
  "37bd1b2": "Sonic 2.0 cache change",
  "06a60b1": "Fix the charset bug: The website cache use wrong charset.",
  "9396b74": "commit the implementation of Sonic database and strategy of cache control",
  "e294884": "Sonic 1.1 support no Etag;cache expire check",
  "19fae8e": "Fix all cache exist check"
}, "vavr": {
  "24ebac4": "Actual faster LinkedHashSet tail (#2726)",
  "665aa9f": "Vector.of(T element) performance improvement (#2659)",
  "ebac4c1": "Improve performance of last() call on TreeMap (#2400)",
  "84c178d": "Fixes doc about LinkedHash* performance characteristics (#2348)",
  "445598b": "improve Array.permutations() performance #1995 (#1996)",
  "0c56073": "Iterator concat performance problem (#2006)",
  "a73d49f": "Merge pull request #1671 from mduesterhoeft/bugfix/map-traverse-performance",
  "fc07f64": "increases performance of CharSeq.mkString",
  "e280cf0": "Merge pull request #1492 from jorander/126_euler_Utils_isPrime_optimization",
  "e1235db": "makes HAMT iteration faster",
  "56d1a48": "Remove outliers from performance report",
  "65943dd": "Minor tidy up to performance report",
  "474a48b": "Moved performance reports to classes",
  "63e4c92": "Slight optimizations for `List.appendAll` and `List.reverse`",
  "b856a4b": "optimization to not create unnecessary Options",
  "ce997ce": "Traversable.sum() performance",
  "e097f68": "HAMT performance",
  "2aeefda": "hashcode does not need to be cached on a reflection type",
  "7abc1dd": "optimization for scanRight",
  "77a917a": "segmentLength + optimization",
  "f201860": "Vector performance improved #560 #568",
  "71a4a5d": "faster impl of TraversableOnce.sum(), average() and product()",
  "3e675d7": "added simple performance tests (have to be started manually)",
  "7f33772": "using isEmpty() instead of size() == 0 for better performance",
  "5c428fb": "performance table fixed #479",
  "4b5dac3": "Described performance characteristics of collections",
  "c1b2d77": "RedBlackTree.add() optimization: prevents tree re-creation, if value is already present.",
  "d394ede": "Minor optimization for List.allOf(NavigableSet) and List.allOf(j.u.List)",
  "b0fc15e": "Minor performance improvement - use String concatenation instead of String#format()",
  "4816739": "Synchronized List implementation with default methods of Foldable interface, i.e. removed methods which are already optimal and re-implemented some methods with List specific optimizations.",
  "e2b0c81": "performance improvements + javadoc",
  "2d6e955": "faster size function, prevents possibility of stack overflow for big lists"
}, "VBlog": {
  "": ""
}, "vert.x": {
  "782f658": "Openssl no longer has much better performance",
  "46057ba": "Explicit zero allocation fast path",
  "b1a5b00": "Speedup normalize Path for the fast case",
  "73202f0": "Use String::indexOf(char) intrinsic to speedup decode URI fast-path",
  "f4087d6": "Update FileCache to use java.io.Path to check writability of the cache content instead of strings",
  "221f2c3": "Improve MetricsTest#testThreadPoolMetricsWithInternalExecuteBlocking to be less racy in slow builds",
  "fb5fe77": "Add an API for accessing the cache dir name, to avoid users attempting to guess it using unspecified behaviors of the resolver",
  "dedbc35": "Moving the missing resources filter to the file cache",
  "323760a": "Fork HtthPostRequestDecoder from Netty that has performance fix (7b9a97a81f10ea574a8e6f2596075615d2eeb185) until 4.1.64.Final is released.",
  "e27d7ab": "Merge pull request #3836 from julianladisch/HttpClientRequest-query-cache",
  "a17f581": "Http1xClientConnection caches the expiration timestamp that is computed when the connection is recycled. When the connection is created by the pool but not used and immediately put back in the pool (it can happen with a slow TCP handshake) then the connection expiration timestamp field is not initialized and will tell the pool it is valid whatsoever. The connection remains usable like any other pooled connection however the pool policy will not apply to it (such as pool keep-alive setting).",
  "ed7aae1": "Merge pull request #3425 from eclipse-vertx/issues/fs-delete-cache-fail-leak",
  "24ab84a": "The shutdown hook wasn't starting the right thread and leaking the cacheDir to null while still in use",
  "94c489b": "File resolver should not cache cacheable entries with an invalid name - see #3376 - see #3372",
  "be7c454": "Add cacheDirname to exception to help troubleshoot issue",
  "fdac684": "Fix http documentation that mentions redirection might cache body for 307",
  "463cf28": "Set the cachedir to /tmp",
  "9ed8cae": "Optimize AsciiString exact match in VertxHttpHeaders: currently when the VertxHttpHeaders performs a key match, it uses the AsciiString#contentEqualsIgnoreCase method which does not check if the two keys have the same reference. When the same reference is provided the reference equality shall be used because it is faster than AsciiString#contentEqualsIgnoreCase and it avoid the call to this method which is not likely to be inlined in some situtations",
  "2e392de": "VertxHttpHeaders#add(CharSequence,CharSequence) does not used AsciiString cached hashcode value - fixes #2446",
  "59d26fd": "Don't cache the vertx.disableDnsResolver so it's read at the creation of Vert.x it makes testing easier",
  "53e1bd0": "Share the same DNS cache between event loop - fixes #2166",
  "162e5cf": "Try to simplify the queuing check with a cache of the queuing condition",
  "b2073fa": "Rework ServerConnection to have processMessage faster and easier to inline",
  "c6d84d3": "Merge pull request #1980 from eclipse/amannocci-faster-json-parsing",
  "cad2454": "Merge branch 'master' into faster-json-parsing",
  "894b41f": "Make the VersionCommand#getVersion() static and cache the value",
  "de6dc31": "Http2Headers result of entries() should not be cached - fixes #1641",
  "956811e": "Merge pull request #1585 from cescoffier/cache-dir-doc",
  "b34ba6d": "Add documentation on the Vert.x cache and how to configure it.",
  "f1d6cdb": "Exposing session cache mode setting in HttpServerOptions for Open SSL based HTTP servers (see org.apache.tomcat.jni.SSLContext.setSessionCacheMode)",
  "8952de7": "CompositeFuture doc about fail fast and succeed fast: it is not clear when an 'all' future fails and an 'any' future succeeds - say explicitely that an 'all' future fails as soon as one of its futures fails and that an 'any' future succeeds as soon as one of its futures succeeds",
  "6cdf6ed": "FileResolver performance issue - fixes #1298",
  "080cad9": "Provide a default impl for completer() and cache its return",
  "a9db964": "Block while cache dir is deleting https://github.com/vert-x3/issues/issues/72",
  "71156be": "Improve a bit the testConsumerUnregisterDoesNotCancelTimer0 to be more deterministic and run faster",
  "6c1b2f5": "Some improvements to net param defaulting and use different eventloop for acceptor for faster connection setup under load",
  "42653a8": "Remove SocketDefaults as they don't seem to give correct values on some OSes resulting in poor performance",
  "908c48d": "Add shutdown hook to delete file resolver cache dir and allow cache base dir to be configured with system property. Also disable cache dir creation if classpath resolve is disabled",
  "a9f9863": "Disable 100 continue handling by default and create fast path for non websockets",
  "b4defc9": "Message Forward -Added capability for forwarding messages -Added forward with header/body optimizations -Added isForwarded status flag on Message -Unit Tests -Cleanup, method renaming for consistency -Written against latest vert.x EB API",
  "c9aea8c": "Message Forward -Added capability for forwarding messages -Added forward with header/body optimizations -Added isForwarded status flag on Message -Unit Tests -Cleanup, method renaming for consistency -Written against latest vert.x EB API",
  "282e849": "Replace LinkedList with ArrayDeque as ArrayDeque is faster",
  "2227f2d": "Remove usage of Thread-Local for performance reasons",
  "fe3264b": "Some cleanup and optimization",
  "bb5549c": "Changing static config to volatile to prevent possible thread local cache.",
  "962ac07": "Various optimizations: BENCHMARKING.md BUILDING.md CONTRIBUTING.md LICENSE.md NOTICE.md pom.xml README.md src Allow to use pre-created optimized CharSequence for headers BENCHMARKING.md BUILDING.md CONTRIBUTING.md LICENSE.md NOTICE.md pom.xml README.md src Upgrade to new netty version BENCHMARKING.md BUILDING.md CONTRIBUTING.md LICENSE.md NOTICE.md pom.xml README.md src More performant handling of FlashPolicy",
  "60eb905": "Various optimizations: BENCHMARKING.md BUILDING.md CONTRIBUTING.md LICENSE.md NOTICE.md pom.xml README.md src Allow to use pre-created optimized CharSequence for headers BENCHMARKING.md BUILDING.md CONTRIBUTING.md LICENSE.md NOTICE.md pom.xml README.md src Upgrade to new netty version BENCHMARKING.md BUILDING.md CONTRIBUTING.md LICENSE.md NOTICE.md pom.xml README.md src More performant handling of FlashPolicy BENCHMARKING.md BUILDING.md CONTRIBUTING.md LICENSE.md NOTICE.md pom.xml README.md src Remove usage of ConcurrentMap",
  "b015967": "Various HTTP optimizations"
}, "vertx-examples": {
  "": ""
}, "vespa": {
  "d05c46e97": "Merge pull request #27142 from vespa-engine/mpolden/faster-json-decoding",
  "4cd704fd3": "Use multiple threads for pruning the session caches.",
  "c2a220bed": "Merge pull request #27112 from vespa-engine/balder/make-test-faster-and-deterministic",
  "8d6366ecf": "Remove slow/unstable benchmark",
  "46b165793": "Merge pull request #27038 from vespa-engine/mpolden/avoid-breaking-test-cache",
  "112a557ca": "Avoid breaking test cache",
  "60a1531f8": "Replace slow MultiReader with buffer",
  "93d0034b4": "Merge pull request #27027 from vespa-engine/vekterli/default-enable-fast-update-restart-when-consistent",
  "bd86b6411": "Default-enable fast path updates when document versions are consistent",
  "05e3a68f8": "Merge pull request #26976 from vespa-engine/mpolden/faster-json-decoding",
  "ae86612a1": "Merge pull request #26977 from vespa-engine/mpolden/faster-gzip",
  "8506ecab7": "Merge pull request #26942 from vespa-engine/mpolden/cache-access-token",
  "2c23e6ba1": "Merge pull request #26943 from vespa-engine/balder/gc-optimization-no-longer-necessary",
  "46eb59210": "Remove optimization no longer valid.",
  "604b0cf01": "Test both with and without enum optimization Test both with present 'default value = ''' and not.",
  "e01da392b": "Merge pull request #26688 from vespa-engine/hakonhall/extend-drop-caches-flag-expiry",
  "301bcc7eb": "Extend drop-caches flag expiry",
  "1459a6829": "Merge pull request #26645 from vespa-engine/balder/recursively-honour-cache",
  "ada9163c1": "Honour the cache recursively",
  "bbaa35f6b": "Merge pull request #26642 from vespa-engine/balder/more-statically-generated-compounds-in-cache-2",
  "e4533aaaf": "Merge pull request #26621 from vespa-engine/balder/add-general-compound-name-cache",
  "3b67ce346": "Construct compoundname from cache in Query.setPropertiesFromRequestMap",
  "63deb1e91": "Add a general cache for compound names",
  "8e29178b6": "Merge pull request #26600 from vespa-engine/balder/cache-the-compound-keys",
  "53212adaa": "Merge pull request #26574 from vespa-engine/balder/add-cluster-and-type-as-dimesions-to-drop-caches-flag",
  "8b01f8060": "Add cluster id and type as dimesions to drop-caches flag for finer control.",
  "f71844d7b": "Merge pull request #26544 from vespa-engine/balder/control-provisioned-disk-performance",
  "a3132a6bf": "Maintain cache of plans in use",
  "27ecb51b3": "join dimensions must equal common dimensions for optimization",
  "bab56127b": "summary.cache.initialentries and summary.log.chunk.skipcrconread does not have any purpose.",
  "4f53639e4": "Merge pull request #26433 from vespa-engine/balder/also-consider-static-cost-of-caches",
  "1e0598be2": "Track static cache usage",
  "28ab766a2": "Wire in and test static memory usage for caches.",
  "b9094db1b": "Only log slow execution on debug level.",
  "f43a89970": "Merge pull request #26319 from vespa-engine/hakonhall/add-drop-caches-flag",
  "ef879d9f0": "Add drop-caches flag",
  "4e2a4aec1": "Merge pull request #26293 from vespa-engine/balder/add-missing-configserver.cacheChecksumElems",
  "3f36d47be": "add missing configserver.cacheChecksumElems",
  "e438d6ac2": "Merge pull request #26280 from vespa-engine/havardpe/modernize-fastos-file-test",
  "aff182668": "modernize fastos file test",
  "690da3137": "Find archive URI for given account from ZK cache or ArchiveService",
  "15aee86aa": "Merge pull request #26243 from vespa-engine/havardpe/remove-fastos-try-2",
  "3393ff7cd": "remove additional no-longer-relevant fastos references",
  "cbc3aed54": "there is no fastos library anymore",
  "548b4fa86": "re-apply 'remove fastos'",
  "fbaff6e96": "Merge pull request #26233 from vespa-engine/revert-26225-havardpe/remove-fastos",
  "003f019d7": "Revert 'remove fastos'",
  "dc8610577": "Merge pull request #26227 from vespa-engine/balder/remove-fastos-types",
  "98167b26a": "Merge pull request #26225 from vespa-engine/havardpe/remove-fastos",
  "ddd8f0e9a": "Remove fastos/types.",
  "19f42845e": "remove fastos",
  "83330180d": "Merge pull request #26221 from vespa-engine/havardpe/move-fastos-file-code",
  "9ce9ed480": "move fastos file code to vespalib",
  "a75326292": "Merge pull request #26204 from vespa-engine/havardpe/gc-fastos-thread",
  "023d8a085": "Merge pull request #26199 from vespa-engine/havardpe/stop-using-fastos-thread-in-searchcore",
  "466c5afc1": "avoid using fastos thread in searchcore",
  "5b1995344": "Merge pull request #26175 from vespa-engine/havardpe/avoid-fastos-thread-in-storage",
  "f82bc5639": "Merge pull request #26174 from vespa-engine/havardpe/untangle-messagebus-from-fastos",
  "a907c3503": "avoid using fastos thread in storage",
  "d21091be1": "untangle messagebus from fastos",
  "1253d9530": "Merge pull request #26159 from vespa-engine/havardpe/untangle-vespamalloc-from-fastos",
  "ce3815a6e": "Merge pull request #26160 from vespa-engine/havardpe/untangle-slobrok-from-fastos",
  "316472c24": "Merge pull request #26162 from vespa-engine/havardpe/avoid-fastos-thread-in-searchlib",
  "c6f318159": "Merge pull request #26157 from vespa-engine/toregge/move-fast-value-view-to-separate-files",
  "fe0e2b8be": "stop using fastos thread in searchlib",
  "17c67a138": "untangle slobrok from fastos",
  "5b4b5bf53": "untangle vespamalloc from fastos",
  "d5dd8586c": "Merge pull request #26147 from vespa-engine/havardpe/untangle-fnet-from-fastos",
  "b6073079e": "untangle fnet from fastos",
  "c056ef98b": "Merge pull request #26137 from vespa-engine/bjorncs/onnx-cache",
  "317ac67bc": "Merge pull request #26136 from vespa-engine/havardpe/stop-using-fastos-thread-id",
  "6c4c2f2a4": "Merge pull request #26127 from vespa-engine/havardpe/stop-using-fastos-thread-in-vespalib",
  "805e24544": "Merge pull request #26093 from vespa-engine/havardpe/use-less-fastos-thread",
  "3ea4d22e7": "use fastos thread less",
  "98e408c66": "stop using fastos thread more places",
  "6201fe1ac": "Merge pull request #26019 from vespa-engine/balder/gc-timedout-optimization",
  "0fa853df4": "Merge pull request #26016 from vespa-engine/havardpe/stop-using-fastos-thread",
  "17fa5fe2b": "Use faster std::from_chars instead of oldstyle strtoul.",
  "d3a165f28": "stop using fastos thread",
  "7b42e88b9": "No longer need the trick for fast clock after we left centos7/rhel7 behind",
  "863e562f4": "Merge pull request #25565 from vespa-engine/mpolden/move-cache",
  "eaac041f0": "Move parent-child cache to NodeList",
  "6f927cf83": "Merge pull request #25479 from vespa-engine/jonmv/faster-deployment-status",
  "eca0f74de": "Use a thread pool for HTTP dispatch, especially faster with compression",
  "766ee34d3": "Merge pull request #25322 from vespa-engine/balder/ensure-fast-shutdown-for-invokerservice",
  "a30a19e95": "Move close() call up between interrupt() and join(). That enables faster join since close will wake up the interrupted threads.",
  "20983503b": "Merge pull request #25311 from vespa-engine/balder/faster-register-shutdown",
  "01ddb9946": "Add an eof object that can be sent to the Q to wake up the ones waiting for config. This enables faster close.",
  "7940907b7": "Merge pull request #25297 from vespa-engine/hmusum/revert-remove-downloaded-app-package-faster",
  "1c80df969": "Turn off FullSearch optimization for active lids blueprint createLeafSearch().",
  "aa8d7950f": "Merge pull request #24996 from vespa-engine/jonmv/faster-unit-tests",
  "c671a36ae": "Merge pull request #24978 from vespa-engine/freva/fix-var-vespa-cache",
  "3384454f5": "Fix directory permissions of $VESPA_HOME/var/vespa/cache",
  "0829f491b": "Merge pull request #24958 from vespa-engine/havardpe/the-hunt-for-fast-generators",
  "fa11bea60": "hunting for fast (compiler inlined) generators",
  "8f8b70f57": "do not stand in the way of return value optimization",
  "7e8c84f97": "Merge pull request #24737 from vespa-engine/toregge/slow-down-when-getting-to-far-ahead-of-server",
  "5a6b21062": "Merge pull request #24608 from vespa-engine/hmusum/remove-downloaded-app-package-faster",
  "73ca78767": "Add unit test for method cache",
  "45a3477bb": "Clear entire cache on class mismatch",
  "1e907223e": "Use actual class, not just its name, as method cache key",
  "dcb20bb39": "Merge pull request #24584 from vespa-engine/balder/log-when-inserting-classes-that-should-be-fixed-into-clone-helper-cache",
  "682edac3e": "Add a hook for tracking inserts into the method cache and log whenever clone methods are added.",
  "05cb343f8": "Merge pull request #24544 from vespa-engine/toregge/disable-inlining-of-virtual-member-functions-in-fastos-backtrace-unit-test",
  "eb95244e9": "Merge pull request #24569 from vespa-engine/bratseth/fail-faster",
  "f2314b1f3": "Disable agressive loop optimizations warnings when compiling with lto.",
  "7b9a174c7": "Disable inlining of virtual member functions in fastos backtrace unit test.",
  "733cb216b": "Merge pull request #24499 from vespa-engine/balder/use-faster-jsonrender",
  "7d54cd9ee": "- Unify on the faster JsonRender. The default Value.toString has a very high initial cost as it is intended for large json structures.",
  "2e5554816": "Merge pull request #24481 from vespa-engine/balder/hide-fuzzymatcher-to-improve-fastpath",
  "4cf695234": "Prefer ArrayList over LinkedList as it is normally faster.",
  "08f7a121f": "Merge pull request #24378 from vespa-engine/toregge/allow-paged-setting-for-tensor-attributes-without-fast-rank-setting",
  "62a65a21a": "Allow paged setting for tensor attributes without fast-rank setting.",
  "8be08877e": "Merge pull request #24373 from vespa-engine/tegge/use-paged-setting-for-serialized-fast-value-tensor-attribute",
  "14d58623f": "Merge pull request #24326 from vespa-engine/toregge/use-tensor-buffer-store-in-serialized-fast-value-attribute",
  "a4842f1dc": "simple join count optimization",
  "ea4e23dce": "Merge pull request #23821 from vespa-engine/balder/control-phrase-optimization-with-feature-flags",
  "db4fce7ca": "Merge pull request #23798 from vespa-engine/bratseth/fastpath-hashmap-and-set",
  "521a6fe07": "Merge pull request #23776 from vespa-engine/balder/drop-method-cache-on-class-cast-exception",
  "aa90841e3": "If you get a ClassCastException when doing clone by reflection it might be that you are using a staale method reference that has been replaced by new code from a new/reloaded bundle. If so we clear the method cache and gives it a new try.",
  "ec3113e27": "Merge pull request #23679 from vespa-engine/balder/balder/use-faster-hash_set_of_int-take-3",
  "5b6505916": "Merge pull request #23677 from vespa-engine/toregge/dont-cache-dynamic-teaser",
  "6175529d7": "Don't cache dynamic teaser.",
  "f755e2b6a": "Merge pull request #23670 from vespa-engine/revert-23648-balder/use-faster-hash_set_of_int-take-2",
  "3c79707ca": "Merge pull request #23648 from vespa-engine/balder/use-faster-hash_set_of_int-take-2",
  "ab30b6b7b": "Merge pull request #23662 from vespa-engine/bratseth/autoscale-faster-3",
  "5aabc4e97": "Use a hash map for faster lookup, and use explicit sorting when handing out bucket lists.",
  "5be0e33d7": "Scale up fast",
  "8844e681b": "Merge pull request #23574 from vespa-engine/bratseth/autoscale-faster-2",
  "cc0e0a691": "Merge pull request #23573 from vespa-engine/bratseth/autoscale-faster",
  "5b5f5704a": "Merge pull request #23357 from vespa-engine/bratseth/faster-autoscaling",
  "8934b4c48": "Add test, faster size, and order primary/secondary as expected.",
  "882b8e046": "Make cache expiry configurable",
  "0552e8d34": "Reuse fully retired nodes faster",
  "0255b9e40": "Merge pull request #23253 from vespa-engine/balder/faster-UnsafeContentInputStream",
  "753a7df00": "Reading in chunks instead of byte by byte is significantly faster.",
  "5ef7b0995": "Fail-fast if already timed out before RPC invoke",
  "fba0288cb": "112 mixed dot product optimization",
  "38e71d497": "Merge pull request #22913 from vespa-engine/balder/cache-the-document-metastore-readguard-in-the-single-context",
  "934a08b25": "Creating the document metastore read guard is expensive and is not necessary to do for every imported attribute. We do it once per metastore and cache it in the ImportedAttributeContext. It would be even better if we could drop support for the default makeReadGuard(bool). Then we would also avoid copying the shared_ptr.",
  "2edacadd4": "- Move code from .hpp to .cpp file as it is only used in one place. - Deinline FastFilterView to make FastValueIndex::create_view generated code smaller and faster. Less jumps and fewer registers to push and pop.",
  "2c4e2d394": "Merge pull request #22852 from vespa-engine/balder/use-fast-path-when-you-have-no-special-needs",
  "549ed4f59": "Merge pull request #22805 from vespa-engine/toregge/use-clang-attibute-to-turn-off-optimization-when-compiling-with-clang",
  "ebbf3c890": "Use clang attribute to turn off optimization when compiling with clang.",
  "b5ed98198": "Merge pull request #22707 from vespa-engine/havardpe/used-cached-queue-size",
  "ba55f9c87": "use cached queue size for metrics to avoid lock inversion",
  "2c3317709": "Merge pull request #22695 from vespa-engine/balder/collapse-fastlib-into-vespalib",
  "58a7afd1b": "Fold fastlib into vespalib and gc some unused code. Also move some code only used by juniper up into juniper test module.",
  "70d56237b": "Merge pull request #22670 from vespa-engine/geirst/fast-rank-restart-action",
  "06f290f54": "Changing 'fast-rank' on an attribute should trigger the restart action.",
  "f1267c097": "Merge pull request #22595 from vespa-engine/balder/gc-fast_util-library",
  "5c3cca172": "Only install a single fastlib library.",
  "0cb482d77": "Drop runtime dependency on fastlib_fast_testsuite",
  "3c44e7d4f": "GC fastlib_util library and move wildcard_match.h to juniper.",
  "34fb52a10": "Merge pull request #22360 from vespa-engine/toregge/fix-race-conditions-in-vespalib-cache",
  "8af573cd3": "Merge pull request #22268 from vespa-engine/bratseth/faster-lambda-parsing",
  "c4ef6387c": "Merge pull request #22248 from vespa-engine/arnej/add-fast-rank",
  "4a6482f9c": "add fast-rank for tensor attributes",
  "3f4dbbc7f": "Merge pull request #22210 from vespa-engine/balder/org.codehaus.jackson-2-com.fasterxml.jackson.core",
  "e744d3a41": "org.codehaus.jackson => com.fasterxml.jackson",
  "f95ad44fa": "Merge pull request #22064 from vespa-engine/havardpe/remove-fastos-application",
  "ab6219927": "Merge pull request #21957 from vespa-engine/toregge/remove-outdated-andnot-optimization",
  "b1e3641dc": "Remove outdated andnot optimization.",
  "1af9617f7": "Merge pull request #21936 from vespa-engine/havardpe/remove-fastos-getopt",
  "81758a304": "Export and import com.fasterxml.jackson.jaxrs.json to ...",
  "689c08f90": "Merge pull request #21685 from vespa-engine/mpolden/set-explicit-cache-dir",
  "26d2e98d9": "Revert 'Revert 'Use entity tag to expire sample apps cache''",
  "2c4f2ca7d": "Set explicit cache directory in Vespa CLI test runner",
  "f2d7c0af4": "Revert 'Use entity tag to expire sample apps cache'",
  "08f9d0cc3": "Use entity tag to expire sample apps cache",
  "44607b151": "Merge pull request #21605 from vespa-engine/havardpe/remove-tsan-warnings-from-fastos",
  "b47223861": "Get VESPA_DLL_LOCAL from vespa/fastos/types.h",
  "238537ead": "Merge pull request #21453 from vespa-engine/jonmv/no-retry-on-slow-API-calls",
  "83bd1e2e1": "Merge pull request #21142 from vespa-engine/balder/require-faster-movement-out-of-the-door-when-the-party-ends",
  "cd5530f09": "Require shutdown to complete faster.",
  "cbc0ae6f4": "Since vespamalloc is optimized for performance, the memory footprint for small utility programs is larger than necessary. So we disable it by default for - vespa-rpc-invoke - vespa-get-config - vespa-sentinel-cmd - vespa-route - vespa-proton-cmd - vespa-configproxy-cmd - vespa-config-status",
  "43dac4362": "Fail-fast if reconfigurer thread is interrupted",
  "d1f1b1a97": "Merge pull request #20854 from vespa-engine/revert-20840-mpolden/improve-cache",
  "a351489c9": "Revert 'Invalidate node object cache based on znode version'",
  "fc5aa4918": "Merge pull request #20840 from vespa-engine/mpolden/improve-cache",
  "f975356ed": "Invalidate node object cache based on znode version",
  "f0d603e0f": "Merge pull request #20838 from vespa-engine/geirst/remove-merge-performance-feature-flags",
  "c5bbaa70a": "Remove merge performance flags that are no longer needed.",
  "bfa87fbb5": "Merge pull request #20776 from vespa-engine/geirst/config-defaults-for-improved-merge-performance",
  "bffdb7cd3": "Merge branch 'master' into geirst/config-defaults-for-improved-merge-performance",
  "3578ae646": "Set defaults in config defs and ModelContext api to improve bucket merge performance on content nodes.",
  "b746b56aa": "Merge pull request #20773 from vespa-engine/mpolden/bump-cache-size",
  "5f23384bf": "Bump cache size",
  "5f21fe002": "Merge pull request #20759 from vespa-engine/geirst/feature-flag-defaults-for-improved-merge-performance",
  "545c9998d": "Set flag defaults to improve bucket merge performance on content nodes.",
  "7ecf22744": "Reduce default summary cache memory from 5% to 4% all over.",
  "d8c5ff88e": "Merge pull request #20736 from vespa-engine/balder/reduce-default-cache-from-5-to-4-percent-2",
  "9ab8f8ddf": "Reduce default summary cache from 5% to 4%",
  "caea36394": "Never modify cached runs",
  "76c192666": "Use smaller chunks for faster detection",
  "5a6fb9642": "Rename change data functions to reflect that an entry ref can be cached.",
  "5dd80d61e": "Make sure to keep memory cache when switching mode",
  "f494c1554": "Reduce watermark from 50% to 10% to get faster reaction.",
  "fdff53baf": "Keep shared_raw as it is needed for compile cache. But only provide shared_ptr<Executor> to avoid exposing sync.",
  "4852125d8": "Merge pull request #20226 from vespa-engine/balder/faster-int8_t-euclidian-distance",
  "5f896b2f6": "Merge pull request #19972 from vespa-engine/freva/fast-images",
  "3e72ba403": "Build the job used for PRs periodically to refresh the cache.",
  "dfb3afcea": "Merge pull request #19651 from vespa-engine/freva/reapply-cache-fs",
  "7997eb9a9": "Merge pull request #19641 from vespa-engine/revert-19628-freva/cache-container-fs",
  "007ed3495": "Merge pull request #19628 from vespa-engine/freva/cache-container-fs",
  "c0abe8ab8": "Add cache compression. Allow 2.2GB cache.",
  "afa6c12cf": "Try to force ccache compression.",
  "2dd6fc680": "Remove the ccache for now.",
  "23481258f": "Inspect cache size",
  "624744217": "the new protobuf protocol should have good performance now",
  "b8ff106dd": "Merge pull request #19570 from vespa-engine/balder/use-already-cached-enumidx",
  "ab9504d0a": "Use the enum idx that has already been looked up and cached.",
  "5f13963ae": "Merge pull request #19566 from vespa-engine/hakonhall/some-optimizations-of-rpcservertest",
  "4ff641005": "Some optimizations of RpcServerTest",
  "feeeb1b1e": "let default threadpool have a core of 2xcores with a max of 100xcores using a fast synchronous Q as default.",
  "680041d18": "Add config id to heap dump for faster identification.",
  "449011cba": "Use the faster BufferOutput over ByteArrayOutputStream that is synchronized.",
  "629e65c3e": "Merge pull request #19290 from vespa-engine/mpolden/sample-apps-cache",
  "8fd1e2515": "Stopping is server is a one way street. Returning BUSY as a temporary error will cause retries, instead of fast-fail.",
  "16c799289": "Merge pull request #19229 from vespa-engine/balder/cache-connection-target",
  "81273dfd1": "Merge pull request #19148 from vespa-engine/vekterli/use-ideal-state-cache-when-populating-statechecker",
  "5d492755b": "Use ideal state cache when populating StateChecker context",
  "f775dc6a3": "Merge pull request #19132 from vespa-engine/balder/faster-lightgbm-probe",
  "4a1ab13c4": "Merge pull request #19123 from vespa-engine/balder/cache-potentially-large-and-expensive-list",
  "0e4c6391c": "Use a single cached object to make logic simpler and only update on object.",
  "fc226e734": "Merge pull request #19044 from vespa-engine/lesters/onnx-model-eval-max-optimization",
  "45a6e3e12": "Set max optimization level for onnx runtime model evaluation in container",
  "e3fb6d001": "Merge pull request #18971 from vespa-engine/balder/faster-check-for-semi-identifier",
  "bbb6f3c0a": "Add a 5x faster handcoded detection of legal feature names that does not require quoting.",
  "1531996b8": "Revert local optimisation and instead use a cache, that will effect all use of getFunctions(). In a synthetic test runtime was reduced from 46 to 36 seconds.",
  "4ed95652c": "Merge pull request #18944 from vespa-engine/arnej/cleanup-more-unused-fastos-code",
  "37f520dd8": "Merge pull request #18941 from vespa-engine/arnej/cleanup-unused-fastos-process",
  "de376c730": "Ensure that only one thread will compute the missing object in the cache. The others will wait.",
  "f8983c8e6": "Directory cache is not optional.",
  "259af31dd": "Lazily initialise session cache and its network",
  "e2588ea50": "Merge pull request #18784 from vespa-engine/jonmv/faster-dynamic-throttle-policy-test",
  "995f3258f": "Merge pull request #18782 from vespa-engine/jonmv/slower-reindexing",
  "f03038eec": "Merge pull request #18525 from vespa-engine/jonmv/reapply-di-session-cache",
  "ba0cf910a": "Revert 'Merge pull request #18515 from vespa-engine/revert-18507-jonmv/reapply-session-cache-with-injected-config'",
  "ee063af54": "Merge pull request #18487 from vespa-engine/andreer/retrigger-to-deploy-certificates-faster",
  "fdea20ac7": "Merge pull request #18515 from vespa-engine/revert-18507-jonmv/reapply-session-cache-with-injected-config",
  "df5b3c4a3": "Revert 'Jonmv/reapply session cache with injected config'",
  "3a3330ccd": "Enable top-k optimization only if balanced and non-sparse",
  "eb6fadd85": "Merge pull request #18507 from vespa-engine/jonmv/reapply-session-cache-with-injected-config",
  "7fdb9e331": "Revert 'Merge pull request #18503 from vespa-engine/revert-18499-jonmv/session-cache-in-DI'",
  "a3c51b1f0": "Merge pull request #18503 from vespa-engine/revert-18499-jonmv/session-cache-in-DI",
  "33731b12a": "Merge pull request #18499 from vespa-engine/jonmv/session-cache-in-DI",
  "6b33bcb76": "retrigger to deploy certificates faster",
  "5e0d7c965": "Return from slow loop when shutting down",
  "7e77f09c3": "Disable accesslog to make test run slightly faster.",
  "535c296b9": "Merge pull request #18312 from vespa-engine/mpolden/faster-tests",
  "04cd31135": "Skip compression for performance",
  "c73c7bc70": "Merge pull request #18297 from vespa-engine/bratseth/upgrader-test-optimization",
  "ccb22a673": "Reuse some application packages for performance",
  "8fdcba59a": "Use a list instead of a set to make building faster. Then sort and uniq before applying the list.",
  "2b3456019": "Merge pull request #18225 from vespa-engine/havardpe/shared-onnx-model-cache",
  "60642e69e": "added onnx model cache",
  "b2e65b2bc": "Merge pull request #18121 from vespa-engine/balder/faster-hashtable-construction",
  "cdef79c90": "Merge pull request #17941 from vespa-engine/jonmv/cache-badges",
  "9dfa22b4d": "Merge pull request #17858 from vespa-engine/use-forkCount-to-run-tests-faster",
  "3ae17ada9": "- Use the enum batch updater directly. This avoids a temporary map and you have everything already in the L1 cache. - Remeber the enum in the scratchPad. This avoid a lookup later on during commit.",
  "e846ec3cc": "Merge pull request #17674 from vespa-engine/toregge/use-int-for-fastos-app-getopt-return-value-pass-2",
  "c9550db8f": "Merge pull request #17656 from vespa-engine/hakonhall/only-support-cache-acl-flag-is-false-code-branch",
  "5550df168": "Remove cache-acl flag",
  "84c4e3320": "Only support cache-acl flag is false code branch",
  "463ac2de7": "cache correct job",
  "ed3ee78f6": "Merge pull request #17644 from vespa-engine/toregge/use-int-for-fastos-app-getopt-return-value",
  "1121b5380": "Merge pull request #17642 from vespa-engine/toregge/disable-intel-optimization-on-arm",
  "f794a0722": "Disable intel optimization on arm.",
  "df65c5070": "Merge pull request #17635 from vespa-engine/toregge/enable-fastos-backtrace-for-aarch64",
  "786155530": "Enable fastos backtrace for aarch64.",
  "6ab4761b8": "Merge pull request #17601 from vespa-engine/hakonhall/allow-disabling-acl-cache-with-flag",
  "c85eed924": "Allow disabling ACL cache with flag",
  "d78232f1e": "Merge pull request #17540 from vespa-engine/balder/implment-case-sensitive-search-for-non-fast-search-attributes",
  "d5add2f4c": "Support both case sensitive, and case-insensitive search in non-fast-search attributes.",
  "b2026fde8": "Merge pull request #17474 from vespa-engine/revert-17469-mpolden/improve-cache",
  "75bb52e5b": "Merge pull request #17469 from vespa-engine/mpolden/improve-cache",
  "f57bbb336": "restore optimization lost when moving code around",
  "3c8ea3eea": "add unit test for lambda optimization bug",
  "de080e77a": "add optimization for join between bfloat16 tensor and number",
  "ae90624a1": "- Use faster std::to_chars. - Reorganize stackdumpitertor so members accesses frequently are colocated. - Add test to keep iteratorsize under control.",
  "82d5b7e86": "Avoid using slow std::string and std::ifstream, just use asciistream.",
  "764f5ac4b": "Merge pull request #17003 from vespa-engine/jonmv/cache-with-zk-node-version-as-key",
  "c708165b1": "Add comment about cache size",
  "5e99305b4": "Use ZK node version as cache, instead of reading all bytes and computing hash",
  "0dec30570": "Merge pull request #16989 from vespa-engine/jonmv/faster-tenant-listing",
  "16d74a3da": "Merge pull request #16891 from vespa-engine/balder/faster-shutdown",
  "7db6536b2": "Ask for fast shutdown of executor. Only wait 1s for scheduler to complete.",
  "1686c580d": "No need to postpone cleanup as we fail fast with the atomic needReschedule flag.",
  "67d862f72": "Merge pull request #16626 from vespa-engine/jonmv/faster-unit-tests",
  "bfaceb819": "Merge pull request #16419 from vespa-engine/toregge/fix-onhold-accounting-for-serialized-fast-value-attribute",
  "aa4eb187c": "Warn not to cache this",
  "c75fa130d": "Warn not to cache this",
  "5bc79680f": "Merge pull request #16344 from vespa-engine/havardpe/faster-single-dim-matching",
  "b6472df72": "added some optimizations for single-dimension sparse matching",
  "0197ac14e": "use GenSpec in fast_rename_optimizer_test",
  "1e05f9d10": "use GenSpec in fast_value_test",
  "8bafc67cc": "added sum_max_dot_product_function optimization",
  "9e590d920": "Make sure to add the session loaded to cache if it really was loaded",
  "7d0bf449b": "Use synchronized collections for cached and watchers",
  "2f5529f03": "Merge pull request #16157 from vespa-engine/revert-16156-revert-16123-bjorncs/access-log-optimizations",
  "e0efd6c13": "Revert 'Revert 'Access log optimizations [run-systemtest]''",
  "8612ccf19": "Merge pull request #16156 from vespa-engine/revert-16123-bjorncs/access-log-optimizations",
  "d541d8656": "Revert 'Access log optimizations [run-systemtest]'",
  "99dff1d3c": "Merge pull request #16123 from vespa-engine/bjorncs/access-log-optimizations",
  "d9de256eb": "also test without optimization",
  "4e6d9b184": "Merge pull request #16100 from vespa-engine/mortent/auto-reload-cache",
  "a12865ed2": "Improve json formatting performance",
  "5c908bb03": "Merge pull request #16043 from vespa-engine/bratseth/remove-cacheSize",
  "a59db61e7": "Merge branch 'master' into bratseth/remove-cacheSize",
  "a235d0e13": "Mark cacheSize as not used",
  "53b6319e0": "Remove cacheSize",
  "c10843997": "Merge pull request #16042 from vespa-engine/havardpe/remove-fast-sparse-map",
  "a9c9c53f8": "Merge pull request #16026 from vespa-engine/balder/faster-array_store_test",
  "dfc9b47d9": "Store the entry refs in an vepalib::hash_map that is faster than std::map. Saves 30+% of test time",
  "6a26f8a2a": "Merge pull request #16011 from vespa-engine/balder/reduce-fastos-thread-test-runtime-cost",
  "00d005ea8": "Merge pull request #15969 from vespa-engine/jonmv/faster-query-profile-compilation",
  "55599006c": "Merge pull request #15961 from vespa-engine/toregge/faster-tls-sync",
  "d826453c2": "Inline combination of dimensions and values to reuse knowledge (4x faster, 1.5x total)",
  "d18bf2a96": "Merge pull request #15817 from vespa-engine/mpolden/faster-tests",
  "c411f92db": "Avoid lookup bucket database entries two times when handling fast path update operation.",
  "ad78803b2": "Merge pull request #15789 from vespa-engine/geirst/remove-use-of-fast-value-tensor-implementation-flag",
  "8e9604dff": "Merge pull request #15790 from vespa-engine/balder/faster-equals",
  "7c55d49b3": "Remove use of 'use-fast-value-tensor-implementation' flag.",
  "af8c36d88": "Merge pull request #15785 from vespa-engine/balder/faster-equals",
  "f3e2acd0d": "Merge pull request #15760 from vespa-engine/geirst/revert-remove-use-fast-value-tensor-implementation",
  "a0f3ac3d9": "Revert 'Remove 'use-fast-value-tensor-implementation' flag.'",
  "25cbf4637": "Merge pull request #15741 from vespa-engine/geirst/remove-use-fast-value-tensor-implementation",
  "b422317fb": "Remove 'use-fast-value-tensor-implementation' flag.",
  "313875e52": "Add a force_insert method to the hash_table. It is faster as it skips the presence check and avoid equality compare. It allows duplicates and should hence be used carefully. At least resize will be faster as it it can safely be used there.",
  "7d9135e0c": "Merge pull request #15632 from vespa-engine/toregge/faster-distributor-bucket-db-update",
  "535b586ba": "Merge pull request #15573 from vespa-engine/balder/faster-client-wakeup",
  "8d9680d21": "Merge pull request #15484 from vespa-engine/arnej/add-serialized_fast_value_attribute",
  "42785e0da": "Merge branch 'master' into arnej/add-serialized_fast_value_attribute",
  "12d0b8124": "Merge pull request #15430 from vespa-engine/toregge/reduce-inlining-for-fast-sparse-map",
  "409692c53": "Merge pull request #15429 from vespa-engine/bratseth/autoscale-faster",
  "dfec53865": "Autoscale up faster",
  "4eb631659": "minor optimization of sparse_only_merge",
  "78bfefbf3": "Use a std:.unique_ptr to make Trace a thin wrapper for TraceNode to make the happy path fast.",
  "1fc808c56": "fail fast when inputs are undefined",
  "4f991e47f": "Merge pull request #15297 from vespa-engine/arnej/add-join-with-number-optimization",
  "c8e26367d": "Merge branch 'master' into arnej/add-join-with-number-optimization",
  "97ceb8303": "Add 32 most significant bits of gid key to key in btree mapping from gid to lid in document meta store to reduce amount of CPU cache misses during lookup.",
  "d1c63c751": "Tune parameters to show differences in performance.",
  "2f428f778": "Merge pull request #15228 from vespa-engine/balder/avoid-cachemiss-on-checksum-aggregation",
  "6f31478ed": "Merge pull request #15235 from vespa-engine/revert-15223-balder/use-faster-hash_set_of_int",
  "d65adc25e": "Merge pull request #15222 from vespa-engine/toregge/faster-bucket-order-compare",
  "bcf3647d7": "Avoid cache miss and dependency stall when have virtual small objects for checksum aggregation. Instead compute checksum inline with a simple switch.",
  "bb75c5975": "Merge pull request #15223 from vespa-engine/balder/use-faster-hash_set_of_int",
  "a91a8eb62": "Support mixed tensors being 'direct' triggered by 'fast-search' flag.",
  "d6718f2dc": "untangle factory-based optimization pipeline from DefaultTensorEngine",
  "b6526692b": "use specific scalar builder for fast value factory",
  "61a2caf4d": "let fast path allocate uninitialized cell values",
  "f6aa99141": "use uninitialized memory for cells in fast value",
  "586bd37f9": "Merge pull request #15001 from vespa-engine/arnej/unit-test-more-fast-values",
  "94a49a6ae": "Merge pull request #14984 from vespa-engine/balder/cache-repos-in-thread-local-persistenceutil",
  "7e2a2a577": "Test that new repo is reflected in cached value in PersistenceUtil.",
  "d4d0b1e03": "Merge pull request #14988 from vespa-engine/havardpe/faster-generic-reduce",
  "e1e5e4730": "Merge pull request #14974 from vespa-engine/balder/allow-faster-tls-resolution",
  "90633ae73": "make generic reduce faster",
  "12f27fcc4": "Allow for faster access of thread local variable. This is possible since we do not load our code explicit as dynamic library. Also replace __thread by standard c++ linkage thread_local.",
  "1ad064119": "Merge pull request #14871 from vespa-engine/geirst/fast-value-tensor-implementation-feature-flag",
  "d34d3c7ef": "Add feature flag to use fast value tensor implementation on all content nodes.",
  "3d89b1eaf": "fix TensorFieldValue::compare to be correct (but slow)",
  "73902f7db": "Merge pull request #14817 from vespa-engine/hmusum/always-remove-from-cache-when-deleting-session",
  "e5eba689f": "Merge pull request #14797 from vespa-engine/arnej/pack-fast-sparse-map-key",
  "6ec2b0366": "Merge pull request #14793 from vespa-engine/havardpe/fork-fast-and-simple-values",
  "c33a71693": "separate code for simple and fast values",
  "16d7902bc": "add optimization for the simplest dense-only concat case",
  "15aca50e6": "Merge pull request #14758 from vespa-engine/havardpe/fast-value",
  "0422bd14d": "fast value to enable inlined sparse operations",
  "f8cbda74d": "Remove unused flag drop-caches",
  "c5f63f99a": "Remove node-object-cache-size flag",
  "9dd865fe7": "Add config entry for node cache size",
  "30e8421ca": "Merge pull request #14713 from vespa-engine/mpolden/faster-tobytes",
  "78ed46a40": "Merge pull request #14682 from vespa-engine/mpolden/faster-tostring",
  "664ee8798": "Increase default node object cache size",
  "fdb980d9e": "Explicitly enable cache stats",
  "4f6a56c31": "Merge pull request #14533 from vespa-engine/mpolden/curator-cache-metrics",
  "7cedd2af5": "Report Curator cache metrics",
  "c88511105": "Merge pull request #14523 from vespa-engine/mpolden/node-object-cache",
  "00b8a48eb": "Add flag for adjusting cache size",
  "87063d652": "Report node object cache metrics",
  "985e7c38c": "Add node object cache",
  "0f16382d1": "Merge pull request #14517 from vespa-engine/balder/15-x-faster-tostring",
  "f7fb03cda": "Merge pull request #14436 from vespa-engine/arnej/faster-stop-services",
  "eaea924b6": "Merge pull request #14423 from vespa-engine/bratseth/autoscale-containers-faster",
  "7ecd25a81": "Merge pull request #14412 from vespa-engine/hmusum/use-directly-for-session-cache",
  "703a69752": "Always add to cache now that we change RemoteSession for sessions with same id",
  "2a238d333": "Merge pull request #14258 from vespa-engine/bratseth/even-faster-featuredata",
  "0a45b7c0e": "Handle matched-elements-only for weighted set term operator and fast-search attributes (weighted set, string or long).",
  "d6cce3804": "Remove slow tests of deprecated Session",
  "1e3ffd713": "allow 'attribute: fast-search' for sparse tensors",
  "00415c964": "create DirectTensorAttribute for sparse tensors with fast-search",
  "bdc43e2dd": "Remove the unused [header] and [body] fieldsets to simplify backend optimization during get.",
  "ef830f3cf": "Let fast be fast",
  "f1d49e5d8": "Merge pull request #13915 from vespa-engine/bratseth/faster-qp-lookup",
  "95bffbc79": "Merge pull request #13803 from vespa-engine/hmusum/add-listener-before-starting-curator-directory-cache",
  "1ae129d88": "Add listener before starting curator directory cache",
  "aac795835": "Merge pull request #13757 from vespa-engine/bratseth/query-profile-optimization",
  "e8ce57c2e": "Avoid adding local session to session cache twice",
  "1770ad004": "Try to avoid unit tests failing on slow nodes by Increasing default timeout",
  "11f5939ca": "Merge pull request #13583 from vespa-engine/hmusum/add-localsession-to-session-cache",
  "be48fcf39": "Add local session to session cache",
  "0e4a1ad6e": "Merge pull request #13580 from vespa-engine/havardpe/fix-compile-cache-deadlock-with-blocking-executor",
  "bfc6cfee7": "avoid deadlock when using compile cache with blocking executors",
  "aacb857c6": "Merge pull request #13577 from vespa-engine/havardpe/separate-result-locks-for-compile-cache",
  "ca0609486": "Merge pull request #13500 from vespa-engine/revert-13499-revert-13490-balder/fetch-and-merge-a-cacheline",
  "bebe03c7b": "Revert 'Revert 'When we pull in a cacheline, we should use it too.''",
  "aa622a409": "Merge pull request #13499 from vespa-engine/revert-13490-balder/fetch-and-merge-a-cacheline",
  "8a1262dcf": "Revert 'When we pull in a cacheline, we should use it too.'",
  "bda9b2e28": "Merge pull request #13490 from vespa-engine/balder/fetch-and-merge-a-cacheline",
  "8b85b6222": "Merge branch 'master' into balder/fetch-and-merge-a-cacheline",
  "8ef08f0c8": "When we pull in a cacheline, we should use it too. There is possibly wasting 7/8 of it and very likely suffer a cache miss.",
  "6daca073b": "Ensure we can not pick the same candidate twice. This make it react a lot faster especially with few nodes.",
  "822e108f4": "Merge pull request #13435 from vespa-engine/balder/gc-unused-slow-start-config",
  "8980eb568": "GC unused slow start config.",
  "648049581": "Merge pull request #13432 from vespa-engine/balder/remove-slow-start-from-code",
  "8dfa395f0": "Merge pull request #13429 from vespa-engine/balder/remove-slow-start-from-config",
  "b67314ad4": "Remove control of slow start. That was a blind alley.",
  "0ddf05df4": "Merge pull request #13385 from vespa-engine/hmusum/make-zookeeper-session-cache-a-separate-class",
  "03e79905d": "use index lookup table with shared cache",
  "00c0680f2": "Merge branch 'master' into hmusum/make-zookeeper-session-cache-a-separate-class",
  "847e0f303": "Merge pull request #13389 from vespa-engine/jonmv/1-minute-expiry-for-athenz-access-control-cache",
  "2e32189c6": "Move the cache part of SessionRepo into its own class",
  "7765b1862": "Merge pull request #13384 from vespa-engine/hmusum/increase-ccache-max-size-for-travis-builds",
  "5378fb48a": "Increase ccache max size to 1600M",
  "4d9334016": "Merge pull request #13371 from vespa-engine/toregge/move-fastlib-testsuite-to-namespace-fast-testsuite",
  "a2388c1a5": "Move fastlib testsuite into namespace fast::testsuite.",
  "05a8443b0": "Merge pull request #13344 from vespa-engine/havardpe/faster-simple-dense-join",
  "b7f9eff3b": "Merge pull request #13307 from vespa-engine/havardpe/let-compile-cache-use-shared-executor",
  "cdee9f2f3": "let compile cache use shared proton executor",
  "cf214d62e": "Use syncronized to make the loadbalancer semantically thread safe. Use a cache to avoid parsing a string to get an index. Move test to same package to avoid public access to internal details.",
  "eb9142931": "Merge pull request #13179 from vespa-engine/havardpe/faster-dense-avg",
  "a4f18f133": "There are so many combinations that the libstdc++ library can be built that the performance you get from std::chrono::system_clock and stxad::chrono::steady_clock has a dramatic performance difference. On RHEL7/Centos with an witout this patch is 18ns vs 550ns.",
  "ba77feb36": "Move function to count open files to fastos. Count open files on Darwin.",
  "43f1f598a": "Merge pull request #12902 from vespa-engine/bratseth/faster-qp-compiling",
  "c95bd438e": "Merge pull request #12895 from vespa-engine/toregge/simplify-fastos-file-unit-test-error-injection",
  "e3559d31e": "Add fastos::UNIX_File_RW_Ops class to simplify error injection in unit tests.",
  "91e1acc38": "log if getting endpoint cert metadata is very slow",
  "7fce3a500": "Use xxhash for most out hashing. It is significantly better quality hash. From 0.7.3 is is also significantly faster.",
  "36dd79a4e": "optimization => optimize_for",
  "3d8209623": "Merge pull request #12511 from vespa-engine/hakonhall/remove-unreferenced-service-model-cache",
  "19bbaf872": "Merge pull request #12618 from vespa-engine/balder/use-fast-map-for-few-elements",
  "94579ec02": "Use vespalib::hash_set instead of std::set to reduce number of allocation and epeed it up. Also use faster 2^N AND based hash tables.",
  "49aba2c5a": "Use a faster executor for single element exeutors",
  "2685a6eb9": "Merge pull request #12540 from vespa-engine/balder/faster-sync-reaction",
  "2c29c9d08": "In order to drain Q faster on sync, and also detect that we are in sync faster, we wake the consumer unconditionally on sync, and also unconditionally wake the producer when consumer is idle.",
  "a2739fa06": "Remove unreferenced service-model-cache",
  "1ae11322e": "Merge pull request #12489 from vespa-engine/hakonhall/remove-service-model-cache",
  "3a0540731": "Remove service model cache",
  "82511aa04": "Merge pull request #12449 from vespa-engine/jvenstad/add-equals-and-hashcode-to-cache-keys",
  "5c4a2842e": "Increase cache TTL to 10 minutes",
  "a71918045": "Define equality for composite cache keys in AthenzFacade",
  "275ae4e28": "Merge pull request #12335 from vespa-engine/jvenstad/cache-Athenz-user-domains",
  "29c74cfb8": "Merge branch 'master' into jvenstad/cache-Athenz-user-domains",
  "67ffb943a": "Merge pull request #12342 from vespa-engine/hakonhall/preserve-cache-by-default",
  "7456714a8": "Preserve cache by default",
  "d8be8f5ac": "Merge pull request #12341 from vespa-engine/balder/move-cachedthreadpool-to-vespalib",
  "3fd059692": "Merge pull request #12340 from vespa-engine/balder/move-cachedthreadpool-to-vespalib",
  "e8f646592": "Merge pull request #12339 from vespa-engine/hakonhall/disable-service-monitor-cache",
  "8021abb79": "Disable service monitor cache",
  "d7d87a8e4": "Use a global bounded cached tread pool as primary, and a single threaded one for fallback.",
  "85866b95d": "Merge pull request #12248 from vespa-engine/andreer/fail-faster-and-record-when-missing-endpoint-cert",
  "19a6d9e38": "fail faster and record when missing endpoint cert",
  "dd5388a31": "Use a cached threadpool for execution of connect. To avoid failing connect blocking other connects.",
  "224ffd0e7": "Increase memory sampling frequency to every 20s instead of every 60s in order to detect changes faster. Also log anomalies.",
  "28fce26f9": "Merge pull request #12045 from vespa-engine/bratseth/optimization-on-sddocname-and-recall",
  "bcc348965": "ccache has changed from --print-config to --show-config, but sgort version -p is the same....",
  "d554be2c3": "Use an interface that guarantees lifetime, and hence allows for optimizations.",
  "e80f38931": "Avoid concurrent modification of cached runs",
  "eda2dcb58": "Merge pull request #11935 from vespa-engine/balder/count-faster-when-cpu-permits",
  "5cb24ee23": "Count bits faster when hardware supports it.",
  "7de3db5a1": "Use atomic sematics for cached number of true bits to ensure visibility.",
  "c2bf66db1": "Merge pull request #11879 from vespa-engine/balder/maintain-cached-count-to-avoid-cost-querytime",
  "73aa08d82": "Maintain the cached bitCount to avoid cost query time.",
  "e3b6d094d": "Higher timeout due to slow CD controllers, for now",
  "bdade3d81": "Merge pull request #11722 from vespa-engine/mpolden/improve-deployment-v1-performance",
  "1ec628a03": "Merge pull request #11639 from vespa-engine/gjoranv/cache-metrics-per-consumer",
  "34191ac55": "Specify fast search explicit in test",
  "d41b25614": "Explain cache entries.",
  "ff2ec3d57": "Merge pull request #11612 from vespa-engine/vekterli/disable-fast-update-path-restart-by-default",
  "e577768f8": "Disable fast update path restarts by default",
  "d60817bf4": "Merge pull request #11604 from vespa-engine/mpolden/application-cache",
  "a200bf770": "fastos::TimeStamp -> vespalib::duration",
  "6f5128b0d": "Merge pull request #11561 from vespa-engine/vekterli/avoid-fast-path-update-race-with-concurrent-replica-creation",
  "d03b908f4": "Merge pull request #11559 from vespa-engine/balder/faster-simple-patternmatcher",
  "16d71fbf1": "Avoid fast past update restart race with concurrently created replica",
  "2bc18be3d": "Add a faster, but simpler pattern matcher. Builds tensoraddresses 5 times+ faster than the regex one.",
  "ce07c34e3": "Merge pull request #11444 from vespa-engine/arnej/gc-unneeded-fastlib",
  "c0c88e165": "remove unused fastlib dependency",
  "445dea6c7": "Merge pull request #11414 from vespa-engine/balder/gc-unused-fastos-code",
  "139565719": "GC unused fastos code.",
  "17968f6e8": "Need to use a volatile to ensure compiler will always generate correct code independent of inlining and optimizations.",
  "05377eb16": "Merge pull request #11363 from vespa-engine/balder/fastos_time-2-chrono-rebased-1",
  "ebe294975": "Merge pull request #11355 from vespa-engine/bratseth/faster-rebalancing-cleanup",
  "0e99acfd3": "use chrono instead of fastos time",
  "4059e8d8e": "Merge pull request #11319 from vespa-engine/vekterli/restart-two-phase-updates-in-fast-path-if-docs-in-sync",
  "2af589636": "Use fast updates when replica metadata is out of sync but document itself is in sync",
  "4faca41f2": "Merge pull request #11264 from vespa-engine/toregge/block-clang-optimizations",
  "972b8ae6c": "Merge pull request #11261 from vespa-engine/vekterli/preserve-cache-element-modification-status",
  "db0b0530c": "Preserve cached struct element modification status",
  "c63608db2": "Use minCpuCores where we care about the number, not the performance",
  "681740b37": "Use faster and more approximate snippetting",
  "45787a61e": "Merge pull request #11191 from vespa-engine/havardpe/fast-forest-experiments",
  "3018ff309": "fast forest refactoring and experimentation",
  "f6da9071b": "Extend the immutable interface and cache allFields in rankprofile",
  "532d786dc": "lower capacity report interval mainly in order to clear the alert faster once we get it fixed",
  "756b0fe95": "Allow for faster hashcode then tostring.",
  "34aced65f": "Merge pull request #11167 from vespa-engine/balder/do-not-join-linkedhashmaps-when-you-just-need-a-fast-lookup",
  "dfdbfe116": "Clean up container endpoints cache on application removal",
  "f32749042": "Stop writing to old rotations cache",
  "f3daabf4c": "Move optimization up",
  "9ea1fbd9d": "Merge pull request #10884 from vespa-engine/havardpe/enable-fast-forest-for-ranking",
  "6b54f52fb": "enable use of fast forest gbdt evaluation for ranking",
  "08afce06f": "Remove 'dynamic-upstream-connection-cache' flag",
  "87dabd856": "Merge pull request #10840 from vespa-engine/havardpe/faster-boosted-models",
  "65d640695": "faster gbdt forest evaluation",
  "b205caef3": "Merge pull request #10767 from vespa-engine/bjorncs/increase-upstream-connection-cache",
  "8df964e8a": "Add feature flag for controlling upstream connection cache",
  "f0358c83a": "Remove unused classes and unused metric cache_hit_ratio",
  "8f09786bc": "Merge pull request #10712 from vespa-engine/revert-10711-revert-10697-revert-10693-revert-10692-revert-10691-revert-10690-balder/no-more-fs4-dispatching-from-fastsearcher",
  "3c6887a27": "Revert 'Revert 'Revert 'Revert 'Revert 'Revert 'Balder/no more fs4 dispatching from fastsearcher''''.''",
  "c4a40e3b0": "Merge pull request #10711 from vespa-engine/revert-10697-revert-10693-revert-10692-revert-10691-revert-10690-balder/no-more-fs4-dispatching-from-fastsearcher",
  "c7f577949": "Revert 'Revert 'Revert 'Revert 'Revert 'Balder/no more fs4 dispatching from fastsearcher''''.'",
  "f20cdeb2c": "Merge pull request #10697 from vespa-engine/revert-10693-revert-10692-revert-10691-revert-10690-balder/no-more-fs4-dispatching-from-fastsearcher",
  "250f7e16e": "Revert 'Revert 'Revert 'Revert 'Balder/no more fs4 dispatching from fastsearcher''''",
  "90a77e2bc": "Merge pull request #10693 from vespa-engine/revert-10692-revert-10691-revert-10690-balder/no-more-fs4-dispatching-from-fastsearcher",
  "ccabf1c74": "Revert 'Revert 'Revert 'Balder/no more fs4 dispatching from fastsearcher'''",
  "bd6c6f09f": "Merge pull request #10692 from vespa-engine/revert-10691-revert-10690-balder/no-more-fs4-dispatching-from-fastsearcher",
  "89a1b3ae3": "Revert 'Revert 'Balder/no more fs4 dispatching from fastsearcher''",
  "f6b49bf9f": "Merge pull request #10691 from vespa-engine/revert-10690-balder/no-more-fs4-dispatching-from-fastsearcher",
  "a573985d1": "Revert 'Balder/no more fs4 dispatching from fastsearcher'",
  "ddb9cd0a5": "Merge pull request #10690 from vespa-engine/balder/no-more-fs4-dispatching-from-fastsearcher",
  "48798974a": "No more fs4 dispatching from fastsearcher. fs4 is gone",
  "ed96db111": "Merge pull request #10642 from vespa-engine/vekterli/handle-no-available-distributors-edge-in-policy-cached-cluster-state",
  "f0c7ef45e": "Handle edges when cached StoragePolicy cluster state has no distributors",
  "04694f5e9": "Merge pull request #10635 from vespa-engine/hmusum/improve-dumpcache",
  "dbdad124c": "Improve dumpcache command a bit",
  "47e33f766": "Merge pull request #10595 from vespa-engine/revert-10594-revert-10593-balder/make-fasthit-leaner",
  "6d82deb26": "Revert 'Revert 'Make fasthit leaner since it appears in considerable amounts during m…''",
  "a90ed2ed0": "Merge pull request #10594 from vespa-engine/revert-10593-balder/make-fasthit-leaner",
  "b86a77a36": "Revert 'Make fasthit leaner since it appears in considerable amounts during m…'",
  "4a9a427f8": "Merge pull request #10593 from vespa-engine/balder/make-fasthit-leaner",
  "be2d00845": "Make fasthit leaner since it appears in considerable amounts during merging, and only a few are filled.",
  "d8d71304c": "Removed chainContext cache",
  "57f9fbcd7": "Merge pull request #10367 from vespa-engine/bjorncs/remove-grouping-session-cache-feature-flag",
  "c1b58ec6d": "Remove feature flag for grouping session cache",
  "5348c1c5a": "Unify on fastos::time().",
  "aa828433e": "Add bandwidth and fastDisk to NodeRepository node",
  "6026e3ea7": "Enable grouping session cache default.",
  "c625f0a22": "Merge pull request #10349 from vespa-engine/bjorncs/flip-grouping-session-cache-default",
  "2659f502f": "Enable grouping session cache by default",
  "219815647": "Add tracing for query ranking cache observability",
  "2a59cbffa": "Merge pull request #10164 from vespa-engine/toregge/use-abort-in-fastlib-io-bufferedfile",
  "cbe2dfe89": "Always set grouping session cache config",
  "f2e0f65d0": "Merge pull request #10090 from vespa-engine/bjorncs/grouping-session-cache-feature-flag",
  "f5a0262e4": "Introduce feature flag for enabling grouping session cache",
  "4e087f971": "Handle internal sessions cached not being in sync with zookeeper",
  "468d42ee9": "Continously drop from cache what you have written to the log.",
  "9b78209e4": "A utillity for manual testing on continous dropping from cache.",
  "3568a5ed6": "Drop file continously from cache as we read it.",
  "710f0c610": "When the attribute is of type enum(mostly strings) the query vector can not be cached solely by its name. The reason is that it is not just being parsed. If it is an enum attribute of a weighted set, it will also look up the enum. BUt that is only valid in the context of an attribute. Oh, will it be good to be on tensors only....",
  "9ed47cc33": "no need for 100 entries in this LRU cache",
  "242d84991": "Write container endpoints to cache",
  "ed998d757": "Merge pull request #9695 from vespa-engine/ogronnesby/create-new-rotations-cache",
  "793209c73": "Create new rotations cache that keeps info on endpoints and clusters",
  "4f789ec70": "Merge pull request #9598 from vespa-engine/jvenstad/avoid-cache-invalidation-on-locking",
  "c504d866c": "Invalidate cache only when paths are attempted created",
  "a649efb28": "Merge pull request #9468 from vespa-engine/balder/use-final-and-make-toString-fast",
  "9c7582fb0": "Merge pull request #9464 from vespa-engine/balder/trigger-fastpath",
  "4bf6bbd8f": "Re-enable cluster state transition optimization",
  "190d8ba14": "Use a single character regex to trigger the fastpath.",
  "eb61d2d77": "Test provisioning with slow disk",
  "57bb58a6a": "Allocate slow disk nodes whenever possible",
  "c006a2c66": "Prioritize nodes with slow disk",
  "67f55d7c0": "Merge pull request #9407 from vespa-engine/vekterli/disable-bucket-db-pruning-optimization",
  "99487b06f": "Disable bucket DB pruning elision optimization for now",
  "89e4b526a": "Instantiate templates in a common location, so that they get consistent visibility independent of optimization level.",
  "dfbaedb2a": "Also make a faster DotproductExecutor when using enumerated values.",
  "1b16a29e1": "Merge pull request #9279 from vespa-engine/revert-9278-balder/unroll-to-counter-gcc8-slowdown",
  "d9740a166": "Revert 'Balder/unroll to counter gcc8 slowdown'",
  "024fa4af4": "Merge pull request #9278 from vespa-engine/balder/unroll-to-counter-gcc8-slowdown",
  "e96d199fb": "Unrooll loop as gcc8 is slowing down the loop by introducing stalls.",
  "68a1ef9c4": "disable concat optimization for non-double cells",
  "fe283c00d": "disable optimizations for tensors with non-double cells",
  "e96fba576": "Merge pull request #9268 from vespa-engine/hmusum/clear-cache-when-getting-empty-config",
  "c1ff01c40": "Clear cache when getting config with generation 0 (empty config)",
  "453b53e04": "Merge pull request #9185 from vespa-engine/vekterli/cache-superbucket-ownership-during-db-processing",
  "5c2cd3bd5": "Make cachedClusterState thread safe.",
  "d5b572ab9": "Merge pull request #8968 from vespa-engine/toregge/clear-padding-in-donecache",
  "5597e036c": "Clear padding in donecache.",
  "2ccc1d2c1": "Merge pull request #8967 from vespa-engine/balder/initialize-donecache",
  "c1a59684f": "Initialize donecache",
  "1af4ef96c": "Fix format string in fastlib module.",
  "61183241e": "Merge pull request #8756 from vespa-engine/toregge/use-fundamental-types-in-fastos-timestamp-constructor",
  "afb539ae5": "Use fundamental types in fastos::TimeStamp constructor.",
  "69a207f36": "Merge pull request #8750 from vespa-engine/toregge/fastos-on-darwin",
  "ff3110a8f": "Restore support for compiling fastos on darwin.",
  "583936a58": "Correct pull image optimization",
  "406b4053f": "Merge pull request #8703 from vespa-engine/balder/remove-packet-cache",
  "79d7a715d": "Remove cache key argument",
  "e43b67aaa": "Remove the packet cache. It will very soon loose its value as we are changing the protocol. And also as it does not work for grouping I think it is better to just let it go. We might want a cache sometime later, but then we should redesign it.",
  "7f87265d5": "Merge pull request #8671 from vespa-engine/ollivir/fail-connection-error-fast",
  "ae7f5d5d3": "Merge pull request #8631 from vespa-engine/freva/redeploy-zone-app-faster",
  "a140e1a43": "Deploy zone-app faster",
  "e8210ece3": "Use an optimization to avoid creating sets in happy path.",
  "6af1e4e96": "Merge pull request #8449 from vespa-engine/jvenstad/cache-orchestrator-host-statuses-for-reads",
  "884d2897f": "Use a more specific ZK path for cache counter",
  "55fc3eec5": "Add Acl to NodeAgentContextFactory and cache",
  "633f417f3": "Expose host status cache, and use it for all bulk operations",
  "d8c6190f7": "Invalidate cache only on changes or exceptions",
  "4d6da807c": "Actually make sure cache is up-to-date while lock is held",
  "5eec3429d": "Read host statuses in bulk per app, and cache until any changes",
  "4b8c9ea32": "Merge pull request #8329 from vespa-engine/toregge/eliminate-clang-warning-in-fastos",
  "baf454fd1": "Eliminate clang warning in fastos.",
  "d092bfd8c": "Use Guava cache with size-based eviction",
  "f186d70db": "Merge pull request #8252 from vespa-engine/hakonhall/start-the-cache",
  "587794d1e": "Start the cache",
  "251d08ecd": "Merge pull request #8245 from vespa-engine/hakonhall/cache-flags-db",
  "17b3e1016": "Allow faster shutdown by using more threads.",
  "d2e9d969e": "Remove binary-cache.def",
  "4b0b6571f": "Remove binary-cache.def",
  "e207b1d59": "Merge pull request #8155 from vespa-engine/balder/remove-some-more-fastlib-stuff",
  "3574b0c1c": "Merge pull request #8153 from vespa-engine/havardpe/remove-fastlib-webserver",
  "93fcb53d2": "remove fastlib webserver",
  "ca245ccf8": "Merge pull request #8138 from vespa-engine/hakonhall/allow-different-drop-caches-strategies",
  "eeeff8ac4": "Allow different drop caches strategies",
  "106b565e9": "Merge pull request #8079 from vespa-engine/jvenstad/remove-feature-flag-for-cache-invalidation-strategy",
  "44c89edf6": "Merge branch 'master' into jvenstad/remove-feature-flag-for-cache-invalidation-strategy",
  "d94cd77fe": "Merge pull request #8095 from vespa-engine/balder/avoid-expensive-cache-curator-generation-check",
  "5cf62f18b": "We do not have to check for cache expiry for every node. Once for the getNodes call should do.",
  "03a344eba": "Revert 'Add feature flag for cache invalidation method, default old'",
  "21809401b": "Merge pull request #8059 from vespa-engine/havardpe/invalidate-word-cache-on-init-range",
  "a136a97bb": "invalidate word cache on initRange",
  "d7a213e22": "Merge pull request #7954 from vespa-engine/revert-7953-revert-7927-jvenstad/fix-node-repo-cache",
  "5ee0d59f4": "Revert 'Revert 'Jvenstad/fix node repo cache''",
  "90403c2ce": "Merge pull request #7953 from vespa-engine/revert-7927-jvenstad/fix-node-repo-cache",
  "69308ac41": "Revert 'Jvenstad/fix node repo cache'",
  "a192abe8c": "Merge pull request #7927 from vespa-engine/jvenstad/fix-node-repo-cache",
  "7c0a02a79": "Add feature flag for cache invalidation method, default old",
  "79d3bf683": "Merge pull request #7934 from vespa-engine/hmusum/feature-flag-for-config-server-cache",
  "11f29b067": "Use feature flag for when to use server cache",
  "1cc8aab20": "Avoid writing a cache with an outdated counter from the start",
  "515a8af24": "Simplify cache handling",
  "f1975af4e": "Cleanup config definition repos and cache a bit",
  "30630bc78": "Reduce locked section by using a hashmap to reduce cachemisses during repopulation. Create the old2New mapping during compaction No more precompute phase.",
  "ed2c61d8e": "Merge pull request #7737 from vespa-engine/balder/faster-reaction-to-slow-groups",
  "9f8dba6c6": "Allow faster converge on startup, by capping decay rate at queries issued so far.",
  "0413b79cb": "React 10 times faster to changes in latency.",
  "31a7f27dc": "Merge pull request #7668 from vespa-engine/balder/avoid-readahead-on-fast-disks-to-favour-memory-footprint",
  "23dea83ac": "Avoid Query.clone which changes the sessionId (and the cache key)",
  "266414cf0": "Merge pull request #7514 from vespa-engine/balder/use-hash-map-for-faster-lookup",
  "8501e2e48": "Use a hash map for faster lookup.",
  "297ec0e50": "Merge pull request #7502 from vespa-engine/musum/cache-disk-usage-check-every-5-minutes",
  "85b08b29c": "Use hashmap for faster access.",
  "5338f7546": "No need to cache memoryPercentage as a member, when you already have access to it through the owning cluster.",
  "717d1f5de": "Merge pull request #7333 from vespa-engine/balder/cache-required-input-type",
  "16791ceee": "Merge pull request #7325 from vespa-engine/balder/fail-fast-on-bad-constructor",
  "53b50d201": "Rember that you did not have any constructor for this class and this parameter set. This will enable fail fast next time instead of having an exception thrown every time.",
  "89ac7b5a2": "depend on dynamic fastos and vespalib",
  "e6c831abd": "Merge pull request #7235 from vespa-engine/lesters/add-faster-rename",
  "6007a6fb1": "Add faster tensor rename if dimension after rename are in the same order",
  "bfc4feb4f": "Merge pull request #7145 from vespa-engine/lesters/add-java-reduce-join-optimization",
  "ed3bc0556": "Add reduce-join optimization in Java",
  "f905c1d69": "remove performance disclaimer related to using SimpleBuffer",
  "3a6ec425d": "Merge pull request #7097 from vespa-engine/balder/program-to-drop-files-from-cache",
  "9af0fd0f7": "Do not expose error. Drop from cache after rotation.",
  "08f34e35f": "Add simple usage test for vespa-drop-file-from-cache",
  "00d75be43": "Add simple usage test for vespa-drop-file-from-cache",
  "caf41285a": "Add simple program to drop files from the buffer cache.",
  "edd8b6078": "Merge pull request #7045 from vespa-engine/balder/add-in-memory-crc-for-summary-cache",
  "85491d4ce": "Update comments and tests as memory size has increased by 8 bytes per entry in the cache.",
  "30a6375d0": "Merge pull request #7060 from vespa-engine/mpolden/use-cached-rotation-status",
  "718466ef3": "Use cached rotation status in application API",
  "0fbc4d579": "Merge pull request #7031 from vespa-engine/mpolden/cache-rotation-status",
  "f53da8ecf": "Merge pull request #7036 from vespa-engine/balder/use-6-as-default-compression-in-summary-cache",
  "b12d76177": "Make level 6 default for cache compression.",
  "169e17642": "Migrate metrics for session manager grouping cache and add metrics for search cache.",
  "8160a5808": "Merge pull request #6967 from vespa-engine/ollivir/move-logic-to-fs4closeablechannel-from-fastsearcher",
  "1ba72a59a": "Less strict on possible missuse of deprecated API. Make by name operatons fast by looking up the field in the document type.",
  "378370515": "make test run faster",
  "0a945b54f": "Merge pull request #6752 from vespa-engine/geirst/fix-count-metrics-for-document-store-cache",
  "ef50ff054": "Fix reporting of count metrics for document store cache.",
  "9a515bdc2": "Improve test performance",
  "e7b3c5cdb": "Merge pull request #6700 from vespa-engine/geirst/expose-more-document-store-cache-metrics",
  "ae68b8669": "Expose more document store cache metrics.",
  "cec34c951": "Dummy commit to rebuild broken class file in SD cache",
  "1dfa9217a": "Merge pull request #6664 from vespa-engine/geirst/expose-document-store-cache-metrics",
  "9e9083dc4": "Expose new document store cache metrics.",
  "b059d4876": "Merge pull request #6662 from vespa-engine/geirst/migrate-legacy-document-store-cache-metrics",
  "708542ae8": "Migrate legacy document store cache metrics to new naming scheme.",
  "0e61d8895": "Merge pull request #6436 from vespa-engine/balder/choose-invalidate-or-update-of-cache",
  "81914f5a5": "Add control of cache update policy when an item changes value.",
  "573bf2c3f": "Revert 'As we changed to add a 5% summary cache some time ago, we should also…'",
  "fd578b991": "Direct io is default as cache is default.",
  "258ef397b": "As we changed to add a 5% summary cache some time ago, we should also change default read to DIRECTIO. That was an oversight at the time.",
  "cadba9d00": "Merge pull request #6357 from vespa-engine/bjorncs/cache-metrics-context",
  "a9e1f8619": "Merge pull request #6346 from vespa-engine/bjorncs/performance-regression-debugging",
  "d26a4e503": "Merge pull request #6277 from vespa-engine/geirst/ensure-fast-search-struct-field-attributes-work-with-same-element-operator",
  "66764d55b": "Support attribute settings (etc. fast-search) for struct field attributes.",
  "0fefd4e3b": "Merge pull request #6188 from vespa-engine/balder/cache-the-default-doctype",
  "3c8ec7040": "Merge pull request #6149 from vespa-engine/mortent/cache-role-sslctxt",
  "740197d63": "Merge pull request #6148 from vespa-engine/hmusum/use-same-repo-for-builtin-defs-in-all-caches",
  "a62f94103": "Merge branch 'master' into hmusum/use-same-repo-for-builtin-defs-in-all-caches",
  "a6cefdae2": "Merge pull request #6096 from vespa-engine/balder/optimization-takes-place-in-many-corners-of-the-world",
  "66494fdcc": "Also block optimization in QueryRewrite from handling NonReducibleCompositeItem",
  "d1e6b20cc": "Merge pull request #6031 from vespa-engine/balder/ensure-we-only-create-one-new-cache",
  "23e50026b": "Ensure we do not race on cache creation and create many caches that we just throw away.",
  "8447434eb": "Merge pull request #6028 from vespa-engine/mortent/cache-node-repo-access-control",
  "28ff79237": "Use existing way of annotating fastaccess attributes.",
  "93a8c3167": "Use existing way of annotating fastaccess only attributes.",
  "f9203fefc": "Merge pull request #5904 from vespa-engine/balder/faster-getId",
  "c1fa11b31": "Merge pull request #5662 from vespa-engine/hmusum/initialize-all-sessions-before-creating-directory-cache",
  "28e48c861": "Explicitly add all sessions when initializing instead of relying on cache",
  "3cf1efb24": "Merge pull request #5644 from vespa-engine/balder/add-todo-packetcache-removal",
  "9c5d74f3f": "Add todo about removing packet cache.",
  "308ba46cb": "Add directory cache listener before starting",
  "b2acdd624": "No reason to fake history to simulate a faster moving clock.",
  "6eddd5b23": "Make rpc target cache ttl configurable with a deafult lifted from 30s to 10 minutes.",
  "4a3f53a49": "Merge pull request #5542 from vespa-engine/hmusum/remove-use-cache-override-for-cd",
  "01b971fc9": "Remove unnecessary override for CD now that cache is enabled by default",
  "969977516": "Merge pull request #5443 from vespa-engine/hmusum/configurable-curator-client-cache-for-node-repo",
  "f357b93a6": "Make it possible to configure use of Curator client cache in node repo",
  "d43c44194": "allow multi-dimensional dot product optimization",
  "14af5207f": "Merge pull request #5375 from vespa-engine/mortent/cache-sia-keystore",
  "f718b7540": "Merge pull request #5372 from vespa-engine/mortent/cache-sia-keystore",
  "fef6ee8bf": "Merge pull request #5358 from vespa-engine/havardpe/fast-rename-optimizer-using-type-replacer",
  "b740e9b63": "'fast rename' is now an optimizer using the 'replace type' function",
  "1081ee11b": "Merge pull request #5205 from vespa-engine/arnej/ensure-more-optimization",
  "38b565a42": "Merge pull request #5183 from vespa-engine/bjorncs/cache-configserver-keystore",
  "78d0a367c": "Merge pull request #5125 from vespa-engine/havardpe/fast-rename",
  "a160552f1": "log performance events in separate thread",
  "cbdd44218": "added optimizer for fast non-transposing dense tensor renaming",
  "fa03629bf": "co-locate optimization with implementation",
  "7d9a1e30e": "Merge pull request #4853 from vespa-engine/revert-4852-revert-4814-balder/compute-summary-cache-automatically-in-backend",
  "01dcc5122": "Revert 'Revert 'Balder/compute summary cache automatically in backend''",
  "2b42b7abb": "Merge pull request #4852 from vespa-engine/revert-4814-balder/compute-summary-cache-automatically-in-backend",
  "3618b5fc5": "Revert 'Balder/compute summary cache automatically in backend'",
  "dead1465f": "Merge pull request #4814 from vespa-engine/balder/compute-summary-cache-automatically-in-backend",
  "bf6bcd896": "Merge pull request #4840 from vespa-engine/havardpe/allow-tensor-function-optimizations-at-any-level",
  "91b5ea5eb": "Set a default summary cache of 5% of memory",
  "700bd36c2": "Let cache be computed based on available memory.",
  "5cb5a8aaf": "Merge pull request #4800 from vespa-engine/balder/automatic-summary-cache",
  "6fa6ba840": "Test that summary cache is given 5% of memory unless specified explicit.",
  "ecf871bfa": "Merge pull request #4712 from vespa-engine/bjorncs/cache-sslcontext",
  "64f6740ba": "Add fastDisk, ipAddreses, hardwareDivergence fields to node-admin client",
  "d4702a834": "Merge pull request #4662 from vespa-engine/havardpe/partial-tensor-function-optimization",
  "ada08ec09": "tensor function compilation based on bottom-up in-place optimization",
  "cf931a4d1": "Merge pull request #4593 from vespa-engine/balder/cache-the-end-iterator",
  "f5df83756": "Merge pull request #4538 from vespa-engine/balder/fast-for_each",
  "91d0b8518": "Merge pull request #4526 from vespa-engine/balder/use-faster-iteration",
  "5e7bce870": "Use a faster and simpler iteration for speed and simplicity.",
  "7da97d9ff": "Retrieve initial certificate in constructor for fail-fast semantics",
  "fb3d9ff10": "Merge pull request #4012 from vespa-engine/balder/omit-sessionid-from-cache-key",
  "435b232c4": "The queryflags count as part of the cache key.",
  "89f857807": "1 - Ignores the session key when creating the cache key. 2 - Fix an earlier bug due to variable header size in cache key generation.",
  "cb150b422": "Merge pull request #3983 from vespa-engine/balder/remove-fastos-runtime-dependency",
  "c1ea203b5": "Remove fastos as runtime dependency",
  "a2df687ce": "Merge pull request #3971 from vespa-engine/revert-3957-revert-3943-toregge/use-standard-locks-in-fastos",
  "38b882085": "Revert 'Revert 'Toregge/use standard locks in fastos''",
  "fc93ea8b4": "Merge pull request #3957 from vespa-engine/revert-3943-toregge/use-standard-locks-in-fastos",
  "9c182da4c": "Revert 'Toregge/use standard locks in fastos'",
  "d28ab5ee8": "Merge pull request #3943 from vespa-engine/toregge/use-standard-locks-in-fastos",
  "11ce8e98a": "Merge pull request #3950 from vespa-engine/havardpe/simple-typed-double-optimization",
  "b4b524035": "Stop using FastOS_Mutex and FastOS_Cond in fastos unit tests.",
  "3f5670a1c": "simple optimizations for double map/join",
  "5116fc5e5": "Don't cache ZMS client instance",
  "c668472b0": "Merge pull request #3862 from vespa-engine/balder/faster-and-tighter-aggregation-of-partial-sum",
  "61895cb06": "Ensure all jobs share same cache",
  "d7d345178": "Configure ccache through cli interface",
  "a9135612c": "The first argument to fastMatch() should be the tensor with fewest cells.",
  "2e3b15832": "Merge pull request #3720 from vespa-engine/hakonhall/cache-snapshotting-of-servicemodel",
  "60606a6ba": "Use Direct I/O on document store reads in proton when disk is fast (SSD).",
  "e9d1682c9": "Merge pull request #3498 from vespa-engine/revert-3495-toregge/disable-slow-directory-scan-sampling",
  "4512162e1": "Merge pull request #3495 from vespa-engine/toregge/disable-slow-directory-scan-sampling",
  "1a09e1c56": "Disable directory scan for now, it causes bad behavior when system believes disk is fast while it is a spinning disk.",
  "ba002e951": "Sample disk usage on file system (as before) if disk is slow.",
  "389aeebfb": "Make attribute disk usage estimate more robust. Use cached values instead of calling methods that require an attribute guard being held.",
  "07875f460": "Sample disk usage on file system (as before) if disk is slow.",
  "664dc8e14": "Merge pull request #3390 from vespa-engine/geirst/fix-bitvector-search-cache-for-imported-attributes",
  "67bf5f95c": "Keep a document meta store read guard together with bitvector posting list in search cache for imported attributes.",
  "a9b48c321": "Merge pull request #3353 from vespa-engine/geirst/add-bitvector-search-cache-to-imported-attribute-vectors",
  "4119e49f0": "Make AttributeWriter::forceCommit() clear the search cache of all imported attribute vectors.",
  "9a2a64a3b": "Use bit vector search cache in imported search context if available.",
  "f77fff622": "Instantiate bit vector search cache in imported attribute vectors if visibility delay > 0.",
  "e65e07a49": "Implement simple bitvector search cache for use in imported attribute vector.",
  "fb9b1630c": "I guess the 'fast-search' hint is better than the 'filter' hint.",
  "c684dbf5d": "Don't cache repository.xml",
  "175c8f38a": "Increase ccache size",
  "6acb4c79d": "Merge pull request #3227 from vespa-engine/balder/remove-unused-code-in-fasthit",
  "7d4b8d465": "Merge pull request #3224 from vespa-engine/balder/add-tests-and-tracing-of-cache-and-sessionid",
  "62153b6e1": "Add info about enabled caches and their keys.",
  "9acc48024": "Improve ccache logging",
  "d3ad2fc35": "Merge pull request #3217 from vespa-engine/bjorncs/reduce-travis-ccache",
  "27e935856": "Reduce ccache size to 1GB",
  "8cdae0ca2": "Merge pull request #3209 from vespa-engine/toregge/implement-fast-search-for-imported-attribute",
  "7b3c8cbf9": "Print actual size of the ccache directory",
  "64809ac83": "Remove more clutter in fastos/types.h",
  "5469092e5": "Merge pull request #3135 from vespa-engine/balder/let-dispatch.summaries-imply-ranking.querycache",
  "2637f785e": "Reduce ccache size to 4GB",
  "2632edbb1": "Use ccache compression",
  "19cdf5164": "Print size of Maven repository and ccache",
  "100603d7a": "Reduce max size of ccache",
  "fbd92b4bc": "Add support for sessionid for using query cache.",
  "d503ee839": "Fix cache cleaning procedure",
  "c983e3bb1": "Merge pull request #3053 from yahoo/balder/keep-the-documentmetastore-readguard-alive-in-session-cache",
  "3b82c5430": "Keep the DocumentMetaStore readguard live in teh ssession cache so the blueprint are still valid afterwards.",
  "9c97ab85d": "Use the faster and more elegant for_each approach",
  "fc4e854bc": "Invalidate the cached count when we might have done so.",
  "1cc1be4df": "Invalidate the cached count when we might have done so.",
  "67595e154": "Move sync of summary service from fastaccess to storeonly feedview.",
  "2b3f18f32": "Merge pull request #3034 from yahoo/balder/initial-fieldpath-optimizations",
  "8f903d85a": "Use a on demand hash_set to do fast lookup in mapfiledvalue",
  "0c8bd42e3": "Use a presence vector to avoid expensive remove, an to lay the grouds for a faster find.",
  "157ff8c0b": "Use noexcept to get move constructor usage on containers and use fastCompare.",
  "908c5dfe1": "Merge pull request #3028 from yahoo/freva/remove-disk-usage-metric-cache",
  "671d903e9": "Do not cache disk usage metric",
  "213cfe282": "Merge pull request #3006 from yahoo/balder/faster-protocol-access-by-reserved-space",
  "30085a22a": "Move code that puts config in cache",
  "2fd870335": "add max size to resolved host cache",
  "aebc140f6": "do not cache identity resolve results",
  "006e8803a": "Merge pull request #2936 from yahoo/hmusum/add-fastDisk-to-nodes-response",
  "6dc1e57d4": "Add 'fastDisk' to nodes response",
  "abe9f7c9f": "Merge pull request #2923 from yahoo/lesters/faster-mapped-tensor-join",
  "8e2e54949": "Merge pull request #2885 from yahoo/vekterli/add-slobrok-generation-cache-to-storage-policy",
  "134e23ec9": "Add a lockfree Slobrok generation cache to StoragePolicy",
  "0aa083b5e": "Use a thread local state for faster compression/decompression.",
  "777943d31": "Do not provide unnecessary fastos/mutex.h by default.",
  "54581b5ec": "Merge pull request #2603 from yahoo/balder/fully-remove-fastos.h",
  "7e3047881": "Now everything builds without fastos.h",
  "349fee6bc": "Checkpount for removing fastos from tests",
  "1026c4571": "Merge pull request #2600 from yahoo/balder/remove-fastos.h-from-searchlib",
  "f8ce3307a": "Reduce fastos.h dependency.",
  "25829c28d": "Reduce fastos.h dependency.",
  "8610e079d": "Reduce fastos.h dependency.",
  "d2059d11f": "Reduce fastos.h dependency.",
  "2cc529aa1": "Reduce fastos.h dependency.",
  "5970b712b": "Merge pull request #2599 from yahoo/balder/remove-fastos.h-from-eval",
  "e224b93e9": "Reduce fastos.h dependency.",
  "8100948a5": "Merge pull request #2597 from yahoo/balder/remove-fastos.h-from-searchcore",
  "d525321b2": "Reduce fastos.h dependency.",
  "b4f993d40": "Merge pull request #2593 from yahoo/balder/remove-fastos.h-from-searchcorespi",
  "de6a41c82": "Reduce fastos.h dependency.",
  "736125c5c": "Merge pull request #2591 from yahoo/balder/reduce-fastos.h-dependency-in-storage",
  "7dfca7981": "Does not need fastos.h",
  "584e7ae8d": "Merge pull request #2563 from yahoo/balder/reduce-include-of-fastos.h",
  "ac4036043": "Reduce exposure of fastos.h and frt.h. Only include what you need where you need it.",
  "b54349609": "Reduce fastos.h dependency.",
  "a66eda704": "Reduce fastos.h dependency.",
  "bf510b140": "Reduce fastos.h dependency.",
  "da5e7a6f1": "Reduce fastos.h dependency.",
  "a25bdfc49": "Merge pull request #2542 from yahoo/balder/remove-fastos-dependency",
  "ba72824de": "Update zpe cache every 30th minutes",
  "7c4e89e0a": "Merge pull request #2391 from yahoo/geirst/make-searchcore-compile-without-optimizations",
  "3797ca96f": "Make searchcore compile without optimizations (-Og).",
  "c0a6a6bda": "Merge pull request #2387 from yahoo/arnej/reindent-fastlib",
  "9a5239261": "Merge pull request #2343 from yahoo/balder/normal-include-fastos",
  "882e2a4f9": "Merge pull request #2349 from yahoo/balder/normal-include-fastlib",
  "22dedb34f": "Add config for whether the disk is fast or slow (default is fast).",
  "bbf11af22": "let socket handle handle more socket stuff very simple Socket/SimpleSocket stop using fastos sockets in websocket experimental code stop using fastos sockets in vbench",
  "d6e72f6db": "Merge pull request #2215 from yahoo/revert-2213-revert-2202-balder/fast-access-fields-are-also-in-memory-for-streaming-search",
  "08f996f72": "Revert 'Revert 'Balder/fast access fields are also in memory for streaming search''",
  "329633d6a": "Merge pull request #2213 from yahoo/revert-2202-balder/fast-access-fields-are-also-in-memory-for-streaming-search",
  "0aa2d061c": "Revert 'Balder/fast access fields are also in memory for streaming search'",
  "20ecaec49": "Merge pull request #2202 from yahoo/balder/fast-access-fields-are-also-in-memory-for-streaming-search",
  "96f24c986": "Test and implement that only fast access attributes are produced for streaming cluster.",
  "005a9995c": "Merge pull request #2199 from yahoo/havardpe/remove-fastos-socket-get-hostname",
  "cf97c2df7": "Produce attribute config also for streaming clusters for the fast-access fields",
  "e5e27a0af": "add override in fastlib module",
  "df9fe1e0c": "Merge pull request #2148 from yahoo/bjorncs/forbid-fast-access-prediate-tensor-reference-attribute",
  "f62d204a8": "Add helper method to create attribute config. Test fast access change attempt with tensor attribute instead of predicate attribute (more likely to support fast partial update in the future).",
  "3b06e3522": "Forbid fast-access for predicate, tensor and reference attributes",
  "10c16985f": "Merge pull request #2135 from yahoo/balder/allow-faster-field-traversal",
  "05a6349ce": "Merge pull request #2132 from yahoo/bratseth/fast-deploy-on-manual-changes-2",
  "0aa0cbfff": "Merge pull request #2122 from yahoo/bratseth/fast-deploy-on-manual-changes",
  "35688b94a": "Merge pull request #2097 from yahoo/revert-2077-hakon/revert-use-cache-when-in-cd-system-2054",
  "5f115d65e": "Revert 'Revert 'Use cache when in CD system #2054''",
  "f8b6de552": "Increase timeout because factory is so slow",
  "b910bb569": "Merge pull request #2082 from yahoo/bratseth/cache-consistency",
  "3d6c4f160": "Make cache consistent",
  "c84c3a360": "Merge pull request #2077 from yahoo/hakon/revert-use-cache-when-in-cd-system-2054",
  "d60644849": "Revert 'Use cache when in CD system #2054'",
  "2f5e6b13d": "Merge pull request #2054 from yahoo/hmusum/use-cache-in-curator-client-in-cd",
  "0d871617e": "Use cache when in CD system",
  "87a690d57": "Merge pull request #1985 from yahoo/balder/if-session-cache-hash-group",
  "fc6e120ee": "Merge pull request #1981 from yahoo/balder/inline-getrawvalues-in-fastpath",
  "970218183": "Avoid race when getting config abi-check-plugin airlift-zstd ann_benchmark annotations application application-model bootstrap.sh build_settings.cmake bundle-plugin bundle-plugin-test client cloud-tenant-base cloud-tenant-base-dependencies-enforcer cloud-tenant-cd clustercontroller-apps clustercontroller-core clustercontroller-reindexer clustercontroller-utils cmake CMakeLists.txt Code-map.md Code-map.png component config config-application-package config-bundle config-class-plugin configd configdefinitions configgen config-lib config-model config-model-api config-model-fat config-provisioning config-proxy configserver configserver-flags configutil container container-apache-http-client-bundle container-core container-dependencies-enforcer container-dependency-versions container-dev container-disc container-documentapi container-messagebus container-onnxruntime container-search container-search-and-docproc container-spifly container-test CONTRIBUTING.md controller-api controller-server default_build_settings.cmake defaults dist dist.sh docproc docprocs document documentapi documentapi-dependencies documentgen-test empty.cpp ERRATA.md eval fat-model-dependencies fbench fileacquirer filedistribution flags fnet fsa functions.cmake GOVERNANCE.md hosted-api hosted-tenant-base hosted-zone-api http-client http-utils indexinglanguage integration jaxrs_utils jdisc-cloud-aws jdisc_core jdisc_core_test jdisc-security-filters jrt jrt_test LICENSE linguistics linguistics-components logd logforwarder logserver lowercasing_test maven-plugins messagebus messagebus_test metrics metrics-proxy model-evaluation model-integration node-admin node-repository NOTICES openai-client opennlp-linguistics orchestrator orchestrator-restapi OWNERS parent persistence pom.xml predicate-search predicate-search-core protocols provided-dependencies README-cmake.md README.md routing-generator screwdriver screwdriver.yaml searchcore searchlib searchsummary security-utils service-monitor slobrok socket_test standalone-container storage storageserver streamingvisitors tenant-cd-api tenant-cd-commons testutil TODO.md tsan-suppressions.txt valgrind-suppressions.txt vbench vdslib vdstestlib VERSION vespa-3party-bundles vespa-3party-jars vespa-application-maven-plugin vespa-athenz vespabase vespaclient vespaclient-container-plugin vespaclient-core vespaclient-java vespa-dependencies-enforcer vespa-documentgen-plugin vespa-enforcer-extensions vespa-feed-client vespa-feed-client-api vespa-feed-client-cli vespa_fsa vespajlib vespalib vespalog vespamalloc vespa-maven-plugin vespa-osgi-testrunner vespa_qrs vespa-testrunner-components vtag.cmake zkfacade zookeeper-client-common zookeeper-command-line-client zookeeper-server Always add to delayed responses (we remove instead if we find config in cache) This is to avoid a race where we might end up not adding to delayed responses nor subscribing to config if another request for the same config happens at the same time abi-check-plugin airlift-zstd ann_benchmark annotations application application-model bootstrap.sh build_settings.cmake bundle-plugin bundle-plugin-test client cloud-tenant-base cloud-tenant-base-dependencies-enforcer cloud-tenant-cd clustercontroller-apps clustercontroller-core clustercontroller-reindexer clustercontroller-utils cmake CMakeLists.txt Code-map.md Code-map.png component config config-application-package config-bundle config-class-plugin configd configdefinitions configgen config-lib config-model config-model-api config-model-fat config-provisioning config-proxy configserver configserver-flags configutil container container-apache-http-client-bundle container-core container-dependencies-enforcer container-dependency-versions container-dev container-disc container-documentapi container-messagebus container-onnxruntime container-search container-search-and-docproc container-spifly container-test CONTRIBUTING.md controller-api controller-server default_build_settings.cmake defaults dist dist.sh docproc docprocs document documentapi documentapi-dependencies documentgen-test empty.cpp ERRATA.md eval fat-model-dependencies fbench fileacquirer filedistribution flags fnet fsa functions.cmake GOVERNANCE.md hosted-api hosted-tenant-base hosted-zone-api http-client http-utils indexinglanguage integration jaxrs_utils jdisc-cloud-aws jdisc_core jdisc_core_test jdisc-security-filters jrt jrt_test LICENSE linguistics linguistics-components logd logforwarder logserver lowercasing_test maven-plugins messagebus messagebus_test metrics metrics-proxy model-evaluation model-integration node-admin node-repository NOTICES openai-client opennlp-linguistics orchestrator orchestrator-restapi OWNERS parent persistence pom.xml predicate-search predicate-search-core protocols provided-dependencies README-cmake.md README.md routing-generator screwdriver screwdriver.yaml searchcore searchlib searchsummary security-utils service-monitor slobrok socket_test standalone-container storage storageserver streamingvisitors tenant-cd-api tenant-cd-commons testutil TODO.md tsan-suppressions.txt valgrind-suppressions.txt vbench vdslib vdstestlib VERSION vespa-3party-bundles vespa-3party-jars vespa-application-maven-plugin vespa-athenz vespabase vespaclient vespaclient-container-plugin vespaclient-core vespaclient-java vespa-dependencies-enforcer vespa-documentgen-plugin vespa-enforcer-extensions vespa-feed-client vespa-feed-client-api vespa-feed-client-cli vespa_fsa vespajlib vespalib vespalog vespamalloc vespa-maven-plugin vespa-osgi-testrunner vespa_qrs vespa-testrunner-components vtag.cmake zkfacade zookeeper-client-common zookeeper-command-line-client zookeeper-server Add to cache only in one place abi-check-plugin airlift-zstd ann_benchmark annotations application application-model bootstrap.sh build_settings.cmake bundle-plugin bundle-plugin-test client cloud-tenant-base cloud-tenant-base-dependencies-enforcer cloud-tenant-cd clustercontroller-apps clustercontroller-core clustercontroller-reindexer clustercontroller-utils cmake CMakeLists.txt Code-map.md Code-map.png component config config-application-package config-bundle config-class-plugin configd configdefinitions configgen config-lib config-model config-model-api config-model-fat config-provisioning config-proxy configserver configserver-flags configutil container container-apache-http-client-bundle container-core container-dependencies-enforcer container-dependency-versions container-dev container-disc container-documentapi container-messagebus container-onnxruntime container-search container-search-and-docproc container-spifly container-test CONTRIBUTING.md controller-api controller-server default_build_settings.cmake defaults dist dist.sh docproc docprocs document documentapi documentapi-dependencies documentgen-test empty.cpp ERRATA.md eval fat-model-dependencies fbench fileacquirer filedistribution flags fnet fsa functions.cmake GOVERNANCE.md hosted-api hosted-tenant-base hosted-zone-api http-client http-utils indexinglanguage integration jaxrs_utils jdisc-cloud-aws jdisc_core jdisc_core_test jdisc-security-filters jrt jrt_test LICENSE linguistics linguistics-components logd logforwarder logserver lowercasing_test maven-plugins messagebus messagebus_test metrics metrics-proxy model-evaluation model-integration node-admin node-repository NOTICES openai-client opennlp-linguistics orchestrator orchestrator-restapi OWNERS parent persistence pom.xml predicate-search predicate-search-core protocols provided-dependencies README-cmake.md README.md routing-generator screwdriver screwdriver.yaml searchcore searchlib searchsummary security-utils service-monitor slobrok socket_test standalone-container storage storageserver streamingvisitors tenant-cd-api tenant-cd-commons testutil TODO.md tsan-suppressions.txt valgrind-suppressions.txt vbench vdslib vdstestlib VERSION vespa-3party-bundles vespa-3party-jars vespa-application-maven-plugin vespa-athenz vespabase vespaclient vespaclient-container-plugin vespaclient-core vespaclient-java vespa-dependencies-enforcer vespa-documentgen-plugin vespa-enforcer-extensions vespa-feed-client vespa-feed-client-api vespa-feed-client-cli vespa_fsa vespajlib vespalib vespalog vespamalloc vespa-maven-plugin vespa-osgi-testrunner vespa_qrs vespa-testrunner-components vtag.cmake zkfacade zookeeper-client-common zookeeper-command-line-client zookeeper-server Remove meaningless test",
  "aa048ca8f": "Rename _fastUpdateFeedView -> _fastAccessFeedView.",
  "942dad04d": "support gbdt forest optimizations with lazy parameters",
  "bd03497cb": "Merge pull request #1816 from yahoo/arnej/remove-mirror-cache",
  "779d17413": "Increase timeout in case of slow execution",
  "8ab536a36": "Revert 'Temporarily downgrade Jetty to evaluate performance degradation'",
  "6120c2f85": "Temporarily downgrade Jetty to evaluate performance degradation",
  "a6581f4e2": "Revert 'Temporarily downgrade Jetty to evaluate performance degradation'",
  "b033afde7": "Temporarily downgrade Jetty to evaluate performance degradation",
  "9bbc7e91e": "Also check the single item optimization too.",
  "58474e77c": "Refactoring abi-check-plugin airlift-zstd ann_benchmark annotations application application-model bootstrap.sh build_settings.cmake bundle-plugin bundle-plugin-test client cloud-tenant-base cloud-tenant-base-dependencies-enforcer cloud-tenant-cd clustercontroller-apps clustercontroller-core clustercontroller-reindexer clustercontroller-utils cmake CMakeLists.txt Code-map.md Code-map.png component config config-application-package config-bundle config-class-plugin configd configdefinitions configgen config-lib config-model config-model-api config-model-fat config-provisioning config-proxy configserver configserver-flags configutil container container-apache-http-client-bundle container-core container-dependencies-enforcer container-dependency-versions container-dev container-disc container-documentapi container-messagebus container-onnxruntime container-search container-search-and-docproc container-spifly container-test CONTRIBUTING.md controller-api controller-server default_build_settings.cmake defaults dist dist.sh docproc docprocs document documentapi documentapi-dependencies documentgen-test empty.cpp ERRATA.md eval fat-model-dependencies fbench fileacquirer filedistribution flags fnet fsa functions.cmake GOVERNANCE.md hosted-api hosted-tenant-base hosted-zone-api http-client http-utils indexinglanguage integration jaxrs_utils jdisc-cloud-aws jdisc_core jdisc_core_test jdisc-security-filters jrt jrt_test LICENSE linguistics linguistics-components logd logforwarder logserver lowercasing_test maven-plugins messagebus messagebus_test metrics metrics-proxy model-evaluation model-integration node-admin node-repository NOTICES openai-client opennlp-linguistics orchestrator orchestrator-restapi OWNERS parent persistence pom.xml predicate-search predicate-search-core protocols provided-dependencies README-cmake.md README.md routing-generator screwdriver screwdriver.yaml searchcore searchlib searchsummary security-utils service-monitor slobrok socket_test standalone-container storage storageserver streamingvisitors tenant-cd-api tenant-cd-commons testutil TODO.md tsan-suppressions.txt valgrind-suppressions.txt vbench vdslib vdstestlib VERSION vespa-3party-bundles vespa-3party-jars vespa-application-maven-plugin vespa-athenz vespabase vespaclient vespaclient-container-plugin vespaclient-core vespaclient-java vespa-dependencies-enforcer vespa-documentgen-plugin vespa-enforcer-extensions vespa-feed-client vespa-feed-client-api vespa-feed-client-cli vespa_fsa vespajlib vespalib vespalog vespamalloc vespa-maven-plugin vespa-osgi-testrunner vespa_qrs vespa-testrunner-components vtag.cmake zkfacade zookeeper-client-common zookeeper-command-line-client zookeeper-server Remove traces of diskcache mode and simplify startup now that only default mode is supported when starting config proxy abi-check-plugin airlift-zstd ann_benchmark annotations application application-model bootstrap.sh build_settings.cmake bundle-plugin bundle-plugin-test client cloud-tenant-base cloud-tenant-base-dependencies-enforcer cloud-tenant-cd clustercontroller-apps clustercontroller-core clustercontroller-reindexer clustercontroller-utils cmake CMakeLists.txt Code-map.md Code-map.png component config config-application-package config-bundle config-class-plugin configd configdefinitions configgen config-lib config-model config-model-api config-model-fat config-provisioning config-proxy configserver configserver-flags configutil container container-apache-http-client-bundle container-core container-dependencies-enforcer container-dependency-versions container-dev container-disc container-documentapi container-messagebus container-onnxruntime container-search container-search-and-docproc container-spifly container-test CONTRIBUTING.md controller-api controller-server default_build_settings.cmake defaults dist dist.sh docproc docprocs document documentapi documentapi-dependencies documentgen-test empty.cpp ERRATA.md eval fat-model-dependencies fbench fileacquirer filedistribution flags fnet fsa functions.cmake GOVERNANCE.md hosted-api hosted-tenant-base hosted-zone-api http-client http-utils indexinglanguage integration jaxrs_utils jdisc-cloud-aws jdisc_core jdisc_core_test jdisc-security-filters jrt jrt_test LICENSE linguistics linguistics-components logd logforwarder logserver lowercasing_test maven-plugins messagebus messagebus_test metrics metrics-proxy model-evaluation model-integration node-admin node-repository NOTICES openai-client opennlp-linguistics orchestrator orchestrator-restapi OWNERS parent persistence pom.xml predicate-search predicate-search-core protocols provided-dependencies README-cmake.md README.md routing-generator screwdriver screwdriver.yaml searchcore searchlib searchsummary security-utils service-monitor slobrok socket_test standalone-container storage storageserver streamingvisitors tenant-cd-api tenant-cd-commons testutil TODO.md tsan-suppressions.txt valgrind-suppressions.txt vbench vdslib vdstestlib VERSION vespa-3party-bundles vespa-3party-jars vespa-application-maven-plugin vespa-athenz vespabase vespaclient vespaclient-container-plugin vespaclient-core vespaclient-java vespa-dependencies-enforcer vespa-documentgen-plugin vespa-enforcer-extensions vespa-feed-client vespa-feed-client-api vespa-feed-client-cli vespa_fsa vespajlib vespalib vespalog vespamalloc vespa-maven-plugin vespa-osgi-testrunner vespa_qrs vespa-testrunner-components vtag.cmake zkfacade zookeeper-client-common zookeeper-command-line-client zookeeper-server Remove CacheManager now that we have only one type of cache abi-check-plugin airlift-zstd ann_benchmark annotations application application-model bootstrap.sh build_settings.cmake bundle-plugin bundle-plugin-test client cloud-tenant-base cloud-tenant-base-dependencies-enforcer cloud-tenant-cd clustercontroller-apps clustercontroller-core clustercontroller-reindexer clustercontroller-utils cmake CMakeLists.txt Code-map.md Code-map.png component config config-application-package config-bundle config-class-plugin configd configdefinitions configgen config-lib config-model config-model-api config-model-fat config-provisioning config-proxy configserver configserver-flags configutil container container-apache-http-client-bundle container-core container-dependencies-enforcer container-dependency-versions container-dev container-disc container-documentapi container-messagebus container-onnxruntime container-search container-search-and-docproc container-spifly container-test CONTRIBUTING.md controller-api controller-server default_build_settings.cmake defaults dist dist.sh docproc docprocs document documentapi documentapi-dependencies documentgen-test empty.cpp ERRATA.md eval fat-model-dependencies fbench fileacquirer filedistribution flags fnet fsa functions.cmake GOVERNANCE.md hosted-api hosted-tenant-base hosted-zone-api http-client http-utils indexinglanguage integration jaxrs_utils jdisc-cloud-aws jdisc_core jdisc_core_test jdisc-security-filters jrt jrt_test LICENSE linguistics linguistics-components logd logforwarder logserver lowercasing_test maven-plugins messagebus messagebus_test metrics metrics-proxy model-evaluation model-integration node-admin node-repository NOTICES openai-client opennlp-linguistics orchestrator orchestrator-restapi OWNERS parent persistence pom.xml predicate-search predicate-search-core protocols provided-dependencies README-cmake.md README.md routing-generator screwdriver screwdriver.yaml searchcore searchlib searchsummary security-utils service-monitor slobrok socket_test standalone-container storage storageserver streamingvisitors tenant-cd-api tenant-cd-commons testutil TODO.md tsan-suppressions.txt valgrind-suppressions.txt vbench vdslib vdstestlib VERSION vespa-3party-bundles vespa-3party-jars vespa-application-maven-plugin vespa-athenz vespabase vespaclient vespaclient-container-plugin vespaclient-core vespaclient-java vespa-dependencies-enforcer vespa-documentgen-plugin vespa-enforcer-extensions vespa-feed-client vespa-feed-client-api vespa-feed-client-cli vespa_fsa vespajlib vespalib vespalog vespamalloc vespa-maven-plugin vespa-osgi-testrunner vespa_qrs vespa-testrunner-components vtag.cmake zkfacade zookeeper-client-common zookeeper-command-line-client zookeeper-server Rename some classes",
  "44d6271ce": "Optimize objectclone with a general method cache and special handling of ArrayList",
  "e165bb304": "Merge pull request #1715 from yahoo/toregge/prepare-for-faster-lid-mapping-2",
  "b9643984b": "Prepare for faster lid mapping: - Remove unneeded reference in AddResult class.",
  "280da32f8": "Merge pull request #1707 from yahoo/toregge/prepare-for-faster-lid-mapping",
  "53c39ea97": "Prepare for faster lid mapping: - Adjust add method in unique store. - Wrap gid and (currently unused) lid in nested Reference class.",
  "88560cce0": "Revert accidental deoptimization.",
  "2cc2dce1b": "Prepare for wiring in reference attribute: - Add data type to attributes.def - Update attribute config conversion - Update attribute factory - Specify that reference attribute doesn't support fast update, docstore must be updated.",
  "e88a5705e": "Merge pull request #1627 from yahoo/mpolden/cache-active-acl",
  "f9a87058b": "Merge pull request #1507 from yahoo/balder/fix-slow-initrange-with-long-iterator",
  "3ddc12b47": "Merge pull request #1481 from yahoo/balder/faster-and-more-readable-getnextmessage",
  "eccdcea3d": "- Sample the time before message is created. - Use the same clock as is used by messagebus. - Allow for slow testnode by giving it 5s to complete something that should only take 1s.",
  "d010b8e98": "Merge pull request #1479 from yahoo/balder/use-method-cache-on-deconstruct-lookup",
  "8d075ce39": "Use a method cache in front of the 'deconstruct' method lookup",
  "2091f9f14": "Use compundname for faster processing and no need to validate non-indexed id= as long as they are ignored anyway.",
  "27cdc6fb1": "Merge pull request #1433 from yahoo/bratseth/tensor-optimizations",
  "d18a71769": "Assert fail fast for 401-Unauthorized and 403-Forbidden",
  "2f21a037e": "Increase default timeout budget (avoid unit test failing when slow node)",
  "6b716528f": "Avoid using deprecated compression method. LZ4_compress_withState -> LZ4_compress_fast_extState.",
  "5c55b1b26": "Avoid using deprecated compression method. LZ4_compress_withState -> LZ4_compress_fast_extState.",
  "18503431e": "Merge pull request #1357 from yahoo/balder/do-not-include-fastos-first",
  "120b42f1e": "Split iterating into subspaces for performance",
  "6a33e844b": "Do not include fastos.h in header files.",
  "ef031ed8d": "Do not include fastos.h in header files.",
  "6475fe524": "Do not include fastos.h",
  "cb50c6b71": "Do not include fastos.h in header files.",
  "817991c51": "Do not include fastos.h in header files.",
  "ffaa67c26": "Merge pull request #1340 from yahoo/balder/revert-accidental-disablinging-of-ccache",
  "2a85dc3fd": "Split in hash_xxx, array, lru, cache ++ in hpp files. To reduce clinon build",
  "d9b45214d": "Merge pull request #1334 from yahoo/revert-1328-balder/max-visit-performance-by-default",
  "be7fa6480": "Merge pull request #1328 from yahoo/balder/max-visit-performance-by-default",
  "cde1379e0": "Support subspace join optimization for indexed tensors",
  "11cfdf167": "Merge pull request #1211 from yahoo/bratseth/faster-tensor",
  "72188280d": "Use config for setting up array store instances with optimization for huge page size.",
  "63329e624": "Avoid many copies of destructor and wasted -O3 optimization.",
  "8823d3482": "Merge pull request #1103 from yahoo/revert-1102-revert-1096-balder/faster-concrete-docs",
  "0cda61be0": "Revert 'Revert 'Balder/faster concrete docs''",
  "7e782df82": "Merge pull request #1102 from yahoo/revert-1096-balder/faster-concrete-docs",
  "cf7dc869b": "Revert 'Balder/faster concrete docs'",
  "e6af0a305": "Merge pull request #1096 from yahoo/balder/faster-concrete-docs",
  "178e58e7d": "Add skeleton of class that samples hardware to derive info (e.g. check if disk is slow for sequential writes).",
  "851e047ba": "Merge pull request #1007 from yahoo/toregge/use-memory-buffer-for-attribute-save-if-disk-is-slow-rebased",
  "8e1372f83": "Merge pull request #994 from yahoo/balder/splitfile-should-not-require-fastos",
  "c05429053": "Only require fastos where you actually use it and link statically",
  "95a23496d": "Add dot product cases in conformance test and activate dot product optimization.",
  "271d3d754": "De-activate function compiler until optimization and unit tests are in place.",
  "96f63002e": "Merge pull request #893 from yahoo/freva/docker-test-performance-and-stability",
  "1e0fabd3d": "Made testDockerNetworking() twice as fast",
  "6187539e4": "Let compiler decide on optimization.",
  "acc939bcf": "Use std::vector where you do not need alternative allocation strategy. Do not use std::move on temporaries. compiler will use return value optimization or the move constructor anyway.",
  "3128e223b": "Also avoid mmaping medium large allocations during compression into cache.",
  "c5a3a57c0": "Run disk check schedule more often, but cache last result",
  "688c67e56": "Take retries into account as well for extermly slow clusters, that have experience failures.",
  "20961181a": "Replace the barely used SmallVector optimizations with std::vector and explicit reserve.",
  "c19c98075": "Merge pull request #669 from yahoo/dybdahl/fix-slow-close",
  "d56659524": "Do not wait forever in close, in some cases the queue will get drained too slowly.",
  "cc08d8f04": "Use a cache for loaded constant tensors.",
  "ddeaaa0e3": "Merge pull request #482 from yahoo/balder/add-visit-cache-2",
  "ffebbff39": "Add clarifying comment about which caches are expected to change.",
  "f60658069": "Allow slack of +-10 on cachesize as it is non-deterministic.",
  "8899cbaee": "Initial end to end visit cache skelton.",
  "2388fca6d": "Add the cache stats from the visit cache too.",
  "de7c7d7ed": "Give protected access to the cache guard for safe extensions.",
  "06f6b82d8": "Do not cache, empty results.",
  "a195f69a1": "Allow visitcache as default.",
  "990889058": "Add skeleton of a visit cache.",
  "b3778f77b": "Wire in a cacheAdapter so that visiting can fill the cache too.",
  "fcd8fdecd": "Allow visiting to read from the cache, but not fill it.",
  "77b658685": "Merge pull request #464 from yahoo/havardpe/tensor-cache",
  "1748eb6be": "added simple cache for constant values",
  "a62bf19ea": "More exclusion and inclusions for fasterxml.",
  "7436d9c97": "Merge pull request #373 from yahoo/arnej/retry-in-cache-test",
  "e521cb104": "Correct the cachedSize",
  "1b11f70b9": "Merge pull request #337 from yahoo/balder/use-fastaccess-retriever",
  "15158d927": "When using big indexes it seems like the memory used by the oldindex that was mapped in are still lying around in the buffercache. These is troublsome for linux memory management. So we tell them explicit that we do not need it anymore. We already do that in FileUtil::LoadedMmap::~LoadedMmap() { madvise(_mapBuffer, _mapSize, MADV_DONTNEED); munmap(_mapBuffer, _mapSize); }",
  "6339b4610": "Include fast_access_document_retriever.h",
  "8af787a74": "Merge pull request #334 from yahoo/balder/let-searchable-retriever-extend-fastaccess-retriever",
  "70a1add59": "Merge pull request #273 from yahoo/arnej/fix-exit-in-fastos-tests",
  "ec03bb7d9": "Merge pull request #263 from yahoo/arnej/split-fastos-thread-test",
  "07e47f92d": "Merge pull request #262 from yahoo/arnej/remove-fastos-setpriority",
  "5c3e66a9f": "remove SetPriority from fastos",
  "d13fd9f18": "Merge pull request #213 from yahoo/toregge/fix-attribute-postinglist-update-optimizations",
  "ab55ec5e7": "remove optimization that is handled at a higher level.",
  "a850bfd35": "Merge pull request #156 from yahoo/musum/log-fastresume_rejected_alert-as-debug",
  "0c4daa7d5": "Log fastresume_rejected_alert at debug level",
  "f5ff6ca23": "Link up .m2 and .ccache",
  "37515efa5": "Merge pull request #118 from yahoo/havardpe/make-slaveproc-test-run-faster",
  "6e08caa5e": "Merge pull request #52 from yahoo/arnej/fix-bundlecachedir-owner",
  "bb79d6447": "chown the bundlecachedir to 'yahoo' user",
  "c606bd250": "Ensure that fastos.h is included first",
  "eb9f3dc00": "Ensure that fastos.h is included first",
  "b8d1adf1c": "Make VALGRIND_UNIT_TESTS a cached variable :)",
  "df4ffdb22": "Ensure that fastos.h is included first",
  "51d19d5b3": "Ensure that fastos.h is included first",
  "a32335d7b": "Include fastos.h first.",
  "72fa046fd": "Merge pull request #2 from yahoo/aressem/readd-autoconf-h-in-fastos"
}, "vhr": {
  "": ""
}, "VideoPlayerManager": {
  "": ""
}, "ViewPagerCards": {
  "": ""
}, "ViewPagerIndicator": {
  "9cff69f": "Tiny optimization."
}, "ViewpagerTransition": {
  "69a67eb": "detail optimization"
}, "views-widgets-samples": {
  "": ""
}, "VirtualAPK": {
  "": ""
}, "VirtualApp": {
  "950df9d": "Opt: start app faster.",
  "5dfcfc6": "Fix: Loading UI slow bug.",
  "2290123": "Optimize: optimize performance. Fix: context_hub service. Fix: issue #269.",
  "f2f9f46": "BIG CHANGE: Cache the Package data so we can boot fast.",
  "185769d": "UI: optimize the performance.",
  "57e3f67": "Fix: Code cache setup.",
  "e1b03f8": "Fix : issue #14 Feature: scan app is faster now."
}, "VirtualXposed": {
  "587d03d": "Improve the performance of App list.",
  "7f7339d": "[VXP]: optimise the performance of create shortcut(reduce once creation of bitmap).",
  "950df9d": "Opt: start app faster.",
  "5dfcfc6": "Fix: Loading UI slow bug.",
  "2290123": "Optimize: optimize performance. Fix: context_hub service. Fix: issue #269.",
  "f2f9f46": "BIG CHANGE: Cache the Package data so we can boot fast.",
  "185769d": "UI: optimize the performance.",
  "57e3f67": "Fix: Code cache setup.",
  "e1b03f8": "Fix : issue #14 Feature: scan app is faster now."
}, "VitamioBundle": {
  "": ""
}, "vjtools": {
  "d48adf0": "Merge pull request #173 from vipshop/dependabot/maven/vjkit/com.fasterxml.jackson.core-jackson-databind-2.9.10.4",
  "35b75d4": "vjkit performanceUtil 继续简化代码改善性能",
  "ad11a51": "vjkit performanceUtil 支持JDK7，并小幅改善性能",
  "8786a8b": "Merge pull request #135 from natineprince/performance_utils"
}, "vlayout": {
  "8b94f2c": "Merge pull request #424 from alibaba/feature/performance_massdata",
  "1f6f8c8": "add performance monitor api"
}, "volley": {
  "bdc0e39": "Clean up cache initialization in AsyncRequestQueue. (#380)",
  "d0fb8de": "Implementations for rest of AsyncCache, tests for cache methods, still no thread safety yet (#350)",
  "cae1570": "Put implementation for async cache that uses callback method (#347)",
  "8a3a7ba": "Send request to network when cache entry parsing fails (#321)",
  "514eac8": "Re-initialize the cache if the directory was deleted. (#297)",
  "99d8ed8": "Reduce cache churn from large entries.",
  "cb1df92": "Use different cache keys for different methods. (#191)",
  "646d95c": "Skip uploading more noisy files to the cache.",
  "fff4246": "am bd7bfdd7: am ef3cafe1: (-s ours) am 2bffbe7e: Merge 'Stop logging slow requests outside of debug logs.'",
  "bd7bfdd": "am ef3cafe1: (-s ours) am 2bffbe7e: Merge 'Stop logging slow requests outside of debug logs.'",
  "c899a33": "am 4a1a74e5: am 2bffbe7e: Merge 'Stop logging slow requests outside of debug logs.'",
  "4a1a74e": "am 2bffbe7e: Merge 'Stop logging slow requests outside of debug logs.'",
  "ef3cafe": "am 2bffbe7e: Merge 'Stop logging slow requests outside of debug logs.'",
  "2bffbe7": "Merge 'Stop logging slow requests outside of debug logs.'",
  "3b4fb45": "Stop logging slow requests outside of debug logs.",
  "e367405": "am 564c635c: Merge 'Use a BufferedOutputStream to write cache entries.'",
  "564c635": "Merge 'Use a BufferedOutputStream to write cache entries.'",
  "19c4ec0": "Use a BufferedOutputStream to write cache entries.",
  "62a63fa": "am 8f9cb5e7: am 84a0ff18: am 1cd7f9e9: Merge 'Copy cache header for 304 response'",
  "8f9cb5e": "am 84a0ff18: am 1cd7f9e9: Merge 'Copy cache header for 304 response'",
  "c5df609": "am 8dabf9fd: am 1cd7f9e9: Merge 'Copy cache header for 304 response'",
  "8dabf9f": "am 1cd7f9e9: Merge 'Copy cache header for 304 response'",
  "84a0ff1": "am 1cd7f9e9: Merge 'Copy cache header for 304 response'",
  "1cd7f9e": "Merge 'Copy cache header for 304 response'",
  "19a4037": "Copy cache header for 304 response",
  "d038ae6": "am 7cee5709: Merge 'Improve DiskBasedCache initial scan performance'",
  "7cee570": "Merge 'Improve DiskBasedCache initial scan performance'",
  "aab3ca2": "Improve DiskBasedCache initial scan performance",
  "d36a10a": "am 1593ad9b: Merge 'Volley to create valid NetworkResponse object when cache is disabled'",
  "a2327f3": "am a0ef298f: am 1593ad9b: Merge 'Volley to create valid NetworkResponse object when cache is disabled'",
  "a0ef298": "am 1593ad9b: Merge 'Volley to create valid NetworkResponse object when cache is disabled'",
  "1593ad9": "Merge 'Volley to create valid NetworkResponse object when cache is disabled'",
  "c7e6423": "Volley to create valid NetworkResponse object when cache is disabled",
  "33e2590": "Merge 'Ensure that the cache folder exists'",
  "fc88bb5": "Ensure that the cache folder exists"
}, "walle": {
  "": ""
}, "web3j": {
  "8380827": "Don't depend on fasterxml in 'crypto' module",
  "a28a0a4": "UnixDomainSocket: fix slow, segmented response",
  "fb46eae": "Migrated to using cached thread pool for async calls to increase transaction throughput, as per https://github.com/web3j/web3j/issues/132.",
  "0176c72": "fixes an exception com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of org.web3j.protocol.core.methods.response.EthCompileSolidity$Code: no String-argument constructor/factory method to deserialize from String value ('0x6060604052346000575b60458060156000396000f3606060405260e060020a6000350463c6888fa18114601c575b6000565b346000576029600435603b565b60408051918252519081900360200190f35b600781025b91905056')",
  "b2198a3": "1. Fixed issue with contract deployment transactions being rejected due to empty to address field. 2. Added fast param to geth start script 3. Bumped version."
}, "WebCollector": {
  "": ""
}, "webmagic": {
  "7d091de": "Upgrade fastjson, jruby, slf4j.",
  "0fbf657": "update fastjson to 1.2.28 #489",
  "55f131e": "#380 update fastjson to 1.2.21",
  "7aaf837": "change logger to slf4j style for performance #84",
  "8b35d79": "Do not cache document in Selectable for selected Html element #73",
  "1148450": "update filecache to more useful",
  "a2d830f": "change serilizer to fastjson",
  "516ff33": "add failfast",
  "5c79550": "add offline cache and process"
}, "wechat": {
  "": ""
}, "WeChatLuckyMoney": {
  "": ""
}, "wgcloud": {
  "": ""
}, "wiremock": {
  "d945259": "Bump com.fasterxml.jackson:jackson-bom from 2.14.2 to 2.15.0 (#2159)",
  "bcc6914": "Merge pull request #1832 from wiremock/dependabot/gradle/com.fasterxml.jackson-jackson-bom-2.13.2",
  "da1604a": "Small performance improvement - ensure that the ObjectMapper used by Json is initialised on the main thread and inherited by worker threads. See #1569.",
  "c5334d9": "Exclude response dribble tests when running in CI as OSX runner seems to slow to allow meaningful assertion of timings",
  "278ab58": "Fixed #1375 - removed memoization of string value pattern matches, as this is severly detrimental to performance for some workloads and causes unbounded heap growth",
  "5146275": "Improved performance, particularly when requests go unmatched by memoizing match results and only calculating near misses once (originally this happened twice - once in the response renderer, once for logging)",
  "618d825": "Improved performance of JsonPath Handlebars helper by caching parsed documents and evaluated expressions",
  "92e2e10": "Optimised the XPath Handlebars helper's performance by caching parsed XML documents and evaluated XPath expressions",
  "e207c0f": "Improved performance of XPath Handlebars helper by caching the XML document builder and XPath objects",
  "c702844": "Fixed #1255 - added a configuration option to disable logging of request/responses to the notifier, for use in performance tests.",
  "ae591bd": "Documented template cache settings",
  "46d3faa": "Put DocumentBuilderFactory and DocumentBuilder in ThreadLocal cache (#1096)",
  "6f791e4": "Made max template cache entries configurable via the command line",
  "98e1cd5": "Added ability to limit the template cache size",
  "2e92e59": "Added response template caching for improved performance under load",
  "9b3a1ec": "Added a test case in support of template performance optimisation (only templating between first and last delimters)",
  "3cf0074": "For performance reason, don't try to parse XML value in MatchesJsonPathPattern (#1065)",
  "e07b0ce": "Fix CaseInsensitiveKey.hashCode() performance",
  "de922f8": "Added a performance test sub-project",
  "f12a4a4": "Added additional constructor to LoggedResponse, avoiding the need to encode then re-decode the body as base64 (and avoiding the associated performance penalty)",
  "4394028": "Switched base64 encoding library to better performing native Java 8 (http://java-performance.info/base64-encoding-and-decoding-performance/)",
  "ea62ba4": "Fixed #489 - performance bug caused by distance calculation happening on each equality match, whether or not near misses were calculated. Switched to a lazy MatchResult."
}, "wvp-GB28181-pro": {
  "dc67696": "兼容不规范的时间格式iso8601格式；升级fastjson版本",
  "97698ee": "Merge pull request #346 from TristingChen/log-optimization"
}, "xboot": {
  "": ""
}, "XChange": {
  "3411788b": "bump version.fasterxml",
  "f2857fa4": "Revert 'bump version.fasterxml and reformat pom'",
  "01c3e954": "bump version.fasterxml and reformat pom",
  "21de3c14": "Merge pull request #4575 from inforeachinc/conbase_orderbook_subscription_optimizations",
  "f7505cad": "Coinbase: order book subscription optimizations",
  "b2568ace": "Merge pull request #4574 from knowm/dependabot/maven/version.fasterxml-2.13.4",
  "9f4fd13f": "Bump version.fasterxml from 2.13.3 to 2.13.4",
  "b9dd5ec8": "Merge pull request #4488 from knowm/dependabot/maven/version.fasterxml-2.13.3",
  "26b49b27": "Bump version.fasterxml from 2.13.2 to 2.13.3",
  "82d8f483": "Merge pull request #4419 from knowm/dependabot/maven/version.fasterxml-2.13.2",
  "4af7bbd3": "Bump version.fasterxml from 2.13.1 to 2.13.2",
  "4e42ac72": "Bump version.fasterxml from 2.13.0 to 2.13.1 (#4366)",
  "61d7b69f": "Merge pull request #4252 from knowm/dependabot/maven/version.fasterxml-2.12.5",
  "bdadf000": "Bump version.fasterxml from 2.12.4 to 2.12.5",
  "625b73af": "Merge pull request #26 from mrmx/dependabot/maven/version.fasterxml-2.12.4",
  "1d188c16": "Merge pull request #4158 from knowm/dependabot/maven/version.fasterxml-2.12.4",
  "3f24abb0": "Bump version.fasterxml from 2.12.3 to 2.12.4",
  "6e0759d3": "Bump version.fasterxml from 2.12.3 to 2.12.4",
  "51ec3f12": "Merge branch 'dependabot/maven/version.fasterxml-2.12.3' into develop",
  "402ae41b": "Merge branch 'develop' into dependabot/maven/version.fasterxml-2.12.3",
  "93d44524": "Bump version.fasterxml from 2.11.3 to 2.12.3",
  "248229c1": "Merge pull request #3824 from knowm/dependabot/maven/version.fasterxml-2.12.0",
  "5997d5d4": "[HitBtc] OrderBook performance",
  "6850c469": "Bump version.fasterxml from 2.11.3 to 2.12.0",
  "fa7a1478": "Bump fastjson from 1.2.74 to 1.2.75 (#3795)",
  "0c55eac8": "Merge pull request #3754 from knowm/dependabot/maven/com.alibaba-fastjson-1.2.74",
  "9e524616": "Bump fastjson from 1.2.73 to 1.2.74",
  "110d15eb": "Merge pull request #3740 from knowm/dependabot/maven/version.fasterxml-2.11.3",
  "ecfcc24b": "Bump version.fasterxml from 2.11.2 to 2.11.3",
  "a6e06ba4": "[performance] By default create Exchange and ExchangeSpecification by Class, not by String for better performance (to avoid frequently using Class.forName)",
  "79bd5fc7": "adding optimization for coinbase currency pair code",
  "b6ed6d1d": "Merge pull request #3636 from knowm/dependabot/maven/version.fasterxml-2.11.2",
  "16a0e39a": "Bump version.fasterxml from 2.11.1 to 2.11.2",
  "caf8109d": "Merge pull request #3625 from knowm/dependabot/maven/com.alibaba-fastjson-1.2.73",
  "607b9d96": "[Bitmex] L2 25 only depth for performance, in an arg is supplied - accidental in previous checkin check the right field",
  "38cd5044": "Bump fastjson from 1.2.72 to 1.2.73",
  "1fc0b795": "Merge pull request #3576 from knowm/dependabot/maven/com.alibaba-fastjson-1.2.72",
  "5f405274": "Bump fastjson from 1.2.71 to 1.2.72",
  "eed1d65e": "Merge pull request #3574 from knowm/dependabot/maven/version.fasterxml-2.11.1",
  "f6764145": "Bump version.fasterxml from 2.11.0 to 2.11.1",
  "47b563a9": "Merge pull request #3561 from knowm/dependabot/maven/com.alibaba-fastjson-1.2.71",
  "f3482be5": "Bump fastjson from 1.2.70 to 1.2.71",
  "3a341ecd": "Merge pull request #3546 from knowm/dependabot/maven/com.alibaba-fastjson-1.2.70",
  "ae6d4f67": "Bump fastjson from 1.2.68 to 1.2.70",
  "12d91125": "Merge pull request #3532 from knowm/dependabot/maven/com.alibaba-fastjson-1.2.68",
  "894916ba": "Bump fastjson from 1.2.47 to 1.2.68",
  "5b08adb5": "Merge pull request #3499 from knowm/dependabot/maven/com.fasterxml.jackson.dataformat-jackson-dataformat-csv-2.11.0",
  "39ccd560": "Merge pull request #573 from bitrich-info/dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.4",
  "cfdfada0": "Merge branch 'develop' into dependabot/maven/com.fasterxml.jackson.core-jackson-databind-2.9.10.4",
  "c87044ff": "Merge pull request #3435 from knowm/dependabot/maven/com.fasterxml.jackson.dataformat-jackson-dataformat-csv-2.10.3",
  "68e02fb5": "Merge pull request #3357 from knowm/dependabot/maven/com.fasterxml.jackson.dataformat-jackson-dataformat-csv-2.10.2",
  "aa80cd30": "change of nonce factory to one that does not give invalid nonce if called too fast",
  "bf11ca8f": "[Kraken] review fix #3 This is not great, we get updates without CurrencyPair, so we have to let those thru, just in case they are for our subscription (would have to maintain order cache otherwise)",
  "c849e8d3": "[Kraken] review fix #3 This is not great, we get updates without CurrencyPair, so we have to let those thru, just in case they are for our subscription (would have to maintain order cache otherwise)",
  "8a79b1d6": "Merge pull request #3284 from knowm/dependabot/maven/com.fasterxml.jackson.dataformat-jackson-dataformat-csv-2.10.1",
  "6ff3527f": "Merge pull request #3250 from knowm/dependabot/maven/com.fasterxml.jackson.dataformat-jackson-dataformat-csv-2.10.0",
  "2286b5d2": "Revert '1)Adding verifyOrderBook method in order to be 100% sure that first bid is always lessThan first ask. I have encounter this issue with KrakenStreamingOrderbook when a big spike or very fast price change occured. 2)Adding Unit Tests in order to verify that verifyKrakenOrderbook method works as expected and KrakenStreamingOrderbook has no erros.'",
  "7fe348c4": "1)Adding verifyOrderBook method in order to be 100% sure that first bid is always lessThan first ask. I have encounter this issue with KrakenStreamingOrderbook when a big spike or very fast price change occured. 2)Adding Unit Tests in order to verify that verifyKrakenOrderbook method works as expected and KrakenStreamingOrderbook has no erros.",
  "b3d58061": "Merge pull request #3078 from knowm/dependabot/maven/com.fasterxml.jackson.dataformat-jackson-dataformat-csv-2.9.9",
  "20d32aab": "Performance improvements: added cached ObjectMapper, removed string->node->string->POJO conversion",
  "438f4f09": "Performance improvements: added cached ObjectMapper, removed string->node->string->POJO conversion",
  "6ab31b0a": "minor optimization: removed redundant map.put when element is already in the map",
  "c9ac37e8": "should be a faster regex",
  "af7d696b": "[resolves #1947] Version mixup with fasterxml-jackson",
  "e0367896": "Merge pull request #1310 from kennethjor/cache-delay-spelling",
  "7ef3b136": "Fixed spelling of cache_delay.",
  "5b62d07d": "Better performance on string concatentions",
  "1a52ac0b": "Better performance on string concatentions",
  "8930ac60": "implemented pacing violation check on mtgox cached market data"
}, "XCL-Charts": {
  "": ""
}, "xmall": {
  "": ""
}, "xManager": {
  "": ""
}, "xpay": {
  "": ""
}, "XPopup": {
  "": ""
}, "XposedInstaller": {
  "4d5ed5f": "Get rid of dialog after clearing the cache",
  "bdcfa9e": "Move repository DB away from the cache directory",
  "7571ad4": "Show a dialog if user clean app's cache",
  "8429d50": "Fix cache invalidation after download errors",
  "5913c1c": "Create /cache/recovery/boot before rebooting to recovery",
  "8721040": "Store Xposed-Installer-Recovery.zip in /cache/recovery"
}, "XRecyclerView": {
  "": ""
}, "XUI": {
  "": ""
}, "xUtils3": {
  "0efbccf": "为请求添加cacheSize参数",
  "89bebb7": "优化cachekey处理"
}, "xxl-job": {
  "4a0fe49": "Merge pull request #1105 from WEIZIBIN/fix_graceful_shutdown_unregister_fast",
  "3f8befe": "unregister fast"
}, "XXPermissions": {
  "": ""
}, "yanxuan-weex-demo": {
  "492fb1a": "[^] Introduce BindingX for optimization",
  "fe5e0ed": "[!] Introduce BindingX for optimization"
}, "YCAppTool": {
  "": ""
}, "YCSB": {
  "e6bd739": "[memcached] Fixes issue where fields are skipped when readallfields is false (Issue #1153).",
  "3805288": "[cassandra] Update CassandraCQLClient to use PreparedStatement for better performance (#1051)",
  "b0ff727": "[memcached] support binary protocol (#965)",
  "63956fb": "[cassandra] properly clear cached containers.",
  "4fe3a37": "[core accumulo couchbase memcached] Fixing squid:S1155 - Collection.isEmpty() should be used to test for emptiness",
  "2c3e45f": "Merge pull request #535 from mbrukman/memcached-remove-groupId",
  "f1661fd": "[memcached] Removed groupId (duplicates parent).",
  "956784f": "Merge pull request #518 from mbrukman/memcached",
  "d4b1d24": "[memcached] Added memcached binding.",
  "4b1d40f": "[jdbc] removed semicolons from cached statements",
  "bac8b69": "Cleaned up CRUD code for MongoDbClient to improve readability. Simplified insert CRUD code to always use insertMany even when batchSize == 1, as there is no performance penalty for this in the driver.",
  "dbd7d0b": "[infinispan] impl infinispan db with remote cache manager",
  "7ad4903": "- adding sample cache.xml which should be provided to GemFire cache server. - removing old README file",
  "c84a7c3": "Make HBase db test up to twice as fast"
}, "ysoserial": {
  "73c5d1d": "cache maven repo in travis builds"
}, "yudao-cloud": {
  "bb7c7ef": "- 重新 import fastjson"
}, "yuicompressor": {
  "c4f87f5": "speedup ScriptOrFnScope.munge: according to YourKit Java profiler this method spends most of the time in ArrayList.removeAll, switching to LinkedHashSet greatly improves performance",
  "a0ce1fa": "#169 use HashMap to improve performance",
  "ff0bde0": "And porting 0 length unary terms optimization to JS port",
  "86195c9": "Parameter parsing fix, when compressing multiple files, nomunge, preserve-semi and disable-optimizations options will be valid only for the first file",
  "b77aaa3": "Data url parsing optimizations, accounting for non-base64 encoded data also. Initial drop. Passes my extensive dataurl tests",
  "8358cd7": "[fix bug 2108063] Missed optimization + cleaned up code",
  "9316c8c": "[fix bug 2220141] Missed optimization",
  "1821e40": "[fix bug 1637148] Transforms obj['foo'] into obj.foo whenever possible, saving 3 bytes. Also, modified code for better performance.",
  "c75fbb9": "Added --preserve-strings option Disabled some buggy optimization"
}, "zaproxy": {
  "59859f6": "Merge pull request #7446 from thc202/scripts-cache-sync",
  "33328d3": "Merge pull request #7434 from thc202/sitestree/disable-cache",
  "937ee39": "Disable use of cached history references",
  "1a4e4ae": "Merge pull request #7432 from ricekot/sites-tree/clear-href-cache",
  "52ad5c4": "sites tree: Invalidate href cache on session open",
  "b7d7a9a": "Merge pull request #7017 from psiinon/itests/cache-rename",
  "8e7917f": "Merge pull request #5640 from thc202/db-cache-size",
  "3ae3c3e": "Increase DB cache size",
  "5244f8c": "Merge pull request #4553 from thc202/api-strict-no-cache",
  "6e49151": "Tweak API response cache directives",
  "c9acacd": "Merge pull request #3621 from thc202/history-cache-sync",
  "0a2505b": "Sync HistoryReference cache in ExtensionHistory",
  "2d44a36": "Merge pull request #3411 from thc202/clear-cached-certs",
  "6ae40ff": "Clear cached certs when setting Root CA cert",
  "567be00": "Merge pull request #2754 from thc202/dns-cache-ttl",
  "5142d34": "Change CustomScanDialog to not cache ScanPolicy, once closed",
  "9d553ad": "Add gitignore file for PlugIns directory that caches the JRE",
  "024a461": "Issue 1286 - Fuzzer seems to be slow",
  "dc48229": "Tidy up, removed the instance variable AlertPanel#rootTreePath, used to cache the root tree node path to expand it, since it's fast to recreate the path moreover it prevented the root tree node from being GC'ed sooner.",
  "eec4fc2": "Changed PopupMenuGenerateForm to use the cached HttpMessage data instead of reading the HttpMessage from database.",
  "43cec1f": "Changed ExtensionHistory to remove the cached history references otherwise they would be kept in memory longer than needed (until a new session was created or loaded).",
  "ee37e74": "Tidy up, removed the instance variable rootTreePath from SiteMapPanel, used to cache the root tree node path to expand it, since it's fast to recreate the path, moreover it prevented the root tree node from being GC'ed sooner.",
  "f73ef8e": "Added BoyerMoore component for a fast string searching algorithm. Put it inside zaproxy util package.",
  "25d5c30": "Some restructurings and optimizations for session management and authentication. Broken connection between HttpSession and WebSession to make easier handling of cookies by HttpState.",
  "3a11959": "HtmlParameter optimization. Added utils for extracting parameters.",
  "29fdb6d": "Changes for code and usage optimizations related to Shared UI Contexts for Context Properties Panels.",
  "05a82a6": "Change to use static ImageIcons. Not sure it actually im,proves performance, but it feels better!",
  "7085898": "Changes/fixes and optimizations related to the Spider Extension.",
  "b8287b8": "Changes/fixes and optimizations related to Http Sessions Extension.",
  "372508b": "Proper cleanup of duplicate Sessions. Added count of HTTP Messages matched with a session. Model refresh optimizations.",
  "a8d4e0d": "A series of Spider related small issue fixes and optimization. Added proper escaping of patterns for Domain Scope in Spider Options.",
  "77214d7": "A couple of other optimizations and bug fixes for Spider.",
  "bf7acb0": "Cleanup and optimizations for Spider, part 2. Added popup menus and implemented Spidering of Scope, Site, Subtree and URL.",
  "2b5ed4a": "Added support for forcing a new Http Session and creating new sessions. Added switching between session. Code optimizations for Sessions detection. On the dev_sessions branch.",
  "7876ecd": "load only some payload characters into WebSocket JTables (WebSocket panel, Fuzz panel) load full payload when message selected to be displayed in Request/Response panel first support for binary payloads: - use longvarbinary instead of longvarchar - use Object for WebSocketMessageDAO.payload that contains either String or byte[] optimized getRowCount() - use cache to avoid too many queries",
  "05dcad0": "Removed unused list of messages - not needed and can cache large responses.",
  "f5ee722": "Fixed some issues with illegal URIs and URIs with non ASCII characters. Memory usage optimizations. Fixed issue when crawling after a stop does not clear previous history. Added Wavsep tests for illegal + NonEscaped characters.",
  "be858fc": "exposed isBreakpoint() method from BreakpointMessageHandler via ExtensionBreakpoint usage in WebSocketListenerBreak to aid performance",
  "de8913e": "fixed problems that came up with Autobahn test suite do clean shutdown of WebSocket connection forward each frame separately instead of waiting for finished message for performance reasons fix continous read if given buffer is not full improved logging",
  "984ad90": "Changed to create the cached string from the charset in the meta tag in the body when no charset was previously set. Updated the regular expression to also match with XHTML.",
  "19e0783": "- added 10015 and 10016 id's for cache control and xss protection header checks - corrected cachecontrol for secure connection check - modified xss protection check class on if logical conditions",
  "ac61137": "Do you like SplashScreens... i prefer fast program startups, but well... Replaced the AboutWindow with a SplashScreen",
  "6848651": "made method static final and used StringBuilder for better performance"
}, "zeppelin": {
  "0209d0d": "Remove conda cache suffix (#4557)",
  "f6e8224": "[ZEPPELIN-5559] Add note cache",
  "6629db7": "[ZEPPELIN-5091]. No cache for downloading artifacts of flink.execution.packages",
  "0b1a394": "[ZEPPELIN-4090] Ipython queue performance",
  "839db5e": "ZEPPELIN-3707. In yarn cluster mode, zeppelin does not allow specifying additional artifacts to be uploaded via distributed cache",
  "4f95555": "ZEPPELIN-3072: Zeppelin UI becomes slow/unresponsive if there are too many notebooks",
  "164db07": "[ZEPPELIN-2512] Prevent slow note, interpreter search. (master, branch-0.7)",
  "96de730": "[ZEPPELIN-2410]: Using UUID from filename in registry cache dir inste…",
  "722ed82": "Prevent NPE on delete local module cache",
  "02323e2": "[ZEPPELIN-1229] Clear browser cache with version hashtag.",
  "8c087c1": "[ZEPPELIN-1673] Reduce CI log size and make it faster",
  "a3a2e4d": "[ ZEPPELIN-1559 ] Code Editor slow performance resolve of the many Notebooks",
  "36c9f1a": "Fix version of cachebust",
  "ea76ca9": "[Optimization] Code editor key binding event optimization.",
  "848dbd0": "[Zeppelin-1229] Add cache buster for zeppelin-web build",
  "21255e4": "no cache for chrome",
  "579933f": "fix line chart performance issue (https://github.com/novus/nvd3/issues/691)",
  "3c45ff2": "Modify Grunt to handle jquery-ui - and remove renaming of images for cache",
  "520cda3": "refractor updating notebook. alluxio angular bigquery bin build-tools cassandra conf dev Dockerfile docs elasticsearch examples file flink flink-cmd groovy hbase helium-dev influxdb java jdbc k8s kotlin LICENSE licenses livy markdown mongodb mvnw mvnw.cmd neo4j notebook NOTICE pom.xml python README.md rlang Roadmap.md scripts SECURITY-README.md shell spark spark-submit sparql STYLE.md submarine testing zeppelin-client zeppelin-client-examples zeppelin-common zeppelin-display zeppelin-distribution zeppelin-examples zeppelin-integration zeppelin-interpreter zeppelin-interpreter-integration zeppelin-interpreter-parent zeppelin-interpreter-shaded zeppelin-jupyter zeppelin-jupyter-interpreter zeppelin-jupyter-interpreter-shaded zeppelin-plugins zeppelin-server zeppelin-web zeppelin-web-angular zeppelin-zengine try to remove double for-loop as possible for performance alluxio angular bigquery bin build-tools cassandra conf dev Dockerfile docs elasticsearch examples file flink flink-cmd groovy hbase helium-dev influxdb java jdbc k8s kotlin LICENSE licenses livy markdown mongodb mvnw mvnw.cmd neo4j notebook NOTICE pom.xml python README.md rlang Roadmap.md scripts SECURITY-README.md shell spark spark-submit sparql STYLE.md submarine testing zeppelin-client zeppelin-client-examples zeppelin-common zeppelin-display zeppelin-distribution zeppelin-examples zeppelin-integration zeppelin-interpreter zeppelin-interpreter-integration zeppelin-interpreter-parent zeppelin-interpreter-shaded zeppelin-jupyter zeppelin-jupyter-interpreter zeppelin-jupyter-interpreter-shaded zeppelin-plugins zeppelin-server zeppelin-web zeppelin-web-angular zeppelin-zengine remove duplicated actions (move paragraph while deleting paragraph) alluxio angular bigquery bin build-tools cassandra conf dev Dockerfile docs elasticsearch examples file flink flink-cmd groovy hbase helium-dev influxdb java jdbc k8s kotlin LICENSE licenses livy markdown mongodb mvnw mvnw.cmd neo4j notebook NOTICE pom.xml python README.md rlang Roadmap.md scripts SECURITY-README.md shell spark spark-submit sparql STYLE.md submarine testing zeppelin-client zeppelin-client-examples zeppelin-common zeppelin-display zeppelin-distribution zeppelin-examples zeppelin-integration zeppelin-interpreter zeppelin-interpreter-integration zeppelin-interpreter-parent zeppelin-interpreter-shaded zeppelin-jupyter zeppelin-jupyter-interpreter zeppelin-jupyter-interpreter-shaded zeppelin-plugins zeppelin-server zeppelin-web zeppelin-web-angular zeppelin-zengine better readability",
  "8eda8d6": "Merge pull request #156 from NFLabs/improve_gui_performance",
  "9ea2cd5": "Merge pull request #147 from NFLabs/no-cache",
  "e064c09": "disable page cache",
  "ab5cdcd": "Merge pull request #37 from NFLabs/test/performance",
  "2e290cf": "Add performance test",
  "ef9fea6": "Add .cache to ignore"
}, "zfile": {
  "": ""
}, "zheng": {
  "123b8a9": "修复ehcache 依赖冲突",
  "5ec0f3c": "zheng-cms-rpc-service增加ehcache和redis配置",
  "87ece3e": "ehcache和redis配置文件移到独立运行模块下，不共享配置",
  "485901d": "更新fastjson版本",
  "301e6ed": "区分ehcache路径",
  "05e23dd": "zheng-upms-dao增加ehcache配置",
  "1a79a62": "统一ehcache名称",
  "f1a38be": "ehcache移到单独项目dao层",
  "a9feeff": "ehcache移到子模块，防止多模块共读同内存卡死",
  "4314a35": "service层使用ehcache",
  "34233e7": "dao层使用ehcache",
  "cccdac4": "集成 mybatis-ehcache",
  "011b475": "完善ehcache例子",
  "58e1b05": "service test去掉ehcache测试",
  "2de8d5e": "mybatis增加cache",
  "4faea5d": "修改ehcache配置文件",
  "0a4b5ba": "example for ehcache",
  "373b4fc": "add Ehcache",
  "d69274d": "add ehcache"
}, "zipkin": {
  "1ed21a0": "try to purge docker cache manually",
  "7d7a50d": "Don't cache on manual docker release",
  "ad4c006": "Revert 'try to purge docker cache manually'",
  "de74341": "try to purge docker cache manually",
  "aa0f9bb": "Improve performance of trace page (#2677)",
  "1f152a4": "Let Java copy arrays which it can sometimes do faster than manual loops. (#2591)",
  "09a441f": "Folds Buffer tree into UnsafeBuffer to improve performance (#2586)",
  "c219ee2": "zipkin-ui: fixed slow meaningless request in home page (#1916)",
  "6b8184a": "performance fixes: - DeduplicatingExecutor around writes to span_by_service, - 40k max queue length in cql driver, - durable_writes disabled (no commitlog on disk), - disable read repairs, - lower gc_grace to 3 hours (match hint window), - row cache span_by_service, - increase server-side speculative retries…",
  "788aad6": "Fixes issue typo on MySQL performance",
  "a129e3b": "Created index for zipkin_annotations, so DEPENDENCIES can run faster (#1471)",
  "04f4265": "apply basic size optimizations to js output (#1436)",
  "dd7d03a": "Improves thrift encoding performance by special-casing ascii (#1258)",
  "3dcb9bc": "Merge pull request #230 from openzipkin/cache-service-names",
  "5d91812": "Adds cache headers to /api/v1/services and /api/v1/spans",
  "fb9de61": "Merge pull request #207 from openzipkin/json-performance",
  "c91aecc": "Improves json codec performance by being more efficient with hex codec",
  "eee7db1": "Doubles performance of CountingTraceIdSampler while increasing precision",
  "a69877b": "Tweaks codec performance and adds benchmarks",
  "e7a0322": "Skip faster when test dependencies are missing",
  "c2d02eb": "Merge pull request #117 from openzipkin/cache-control",
  "dd0de78": "Updates to zipkin-ui 1.39, notably addressing cache concerns",
  "c061db3": "Fix handling of request.limit, which was being applied pre-filtering instead of post-filtering resulting in empty trace result sets. Now, we break from Zipkin API's guarantees of returning traces ordered by first span by ordering by first filtered span. In real-world usage, this should not cause any problems and makes sure the query is fast (query filters are better optimized than aggregation filters)."
}, "zookeeper": {
  "a692cba": "ZOOKEEPER-4289: Reduce the performance impact of Prometheus metrics",
  "c583a6e": "ZOOKEEPER-4275: Prevent unnecessary client connection retry caused by slow SASL login",
  "4d8caf9": "ZOOKEEPER-3756: Members slow to rejoin quorum using Kubernetes",
  "945167c": "ZOOKEEPER-3560: Add response cache to serve get children (2) requests.",
  "ef3649f": "ZOOKEEPER-3593: fix the default value of jute.maxbuffer in client side and an optimization for the documentation",
  "83940b1": "ZOOKEEPER-3457: Code optimization in QuorumCnxManager",
  "968f5f3": "ZOOKEEPER-3399: Remove logging in getGlobalOutstandingLimit for optimal performance.",
  "0b504de": "ZOOKEEPER-3218: Add min notification interval property for fast leader election",
  "9828685": "ZOOKEEPER-3180: Add response cache to improve the throughput of read …",
  "1ce2ca8": "ZOOKEEPER-3163: Use session map in the Netty to improve close session performance",
  "a2623a6": "ZOOKEEPER-3019: add metric for slow fsyncs count",
  "6380270": "ZOOKEEPER-2141 ACL cache in DataTree never removes entries (Adam Milne-Smith via camille)",
  "a3d2484": "ZOOKEEPER-2141. ACL cache in DataTree never removes entries (Adam Milne-Smith via camille)",
  "9a9d587": "ZOOKEEPER-2224: Four letter command hangs when network is slow (Arshad Mohammad via rakeshr)",
  "f73be2a": "ZOOKEEPER-1146. significant regression in client (c/python) performance. (phunt via mahadev)",
  "0082d79": "ZOOKEEPER-452. zookeeper performance graph should have percentage of reads rather than percentage of writes - zkperfRW-3.2.jpg (mahadev)",
  "0732e41": "ZOOKEEPER-440. update the performance documentation in forrest",
  "83cf0a9": "ZOOKEEPER-308. improve the atomic broadcast performance 3x. (breed via mahadev)",
  "f699c55": "commiting changes for getting rid of unsused vars in auth fast leader elec",
  "edc4bf7": "[ 1942451 ] build optimization: uptodate check on jute [ 1943392 ] Test environment changes: unit/func/perf/coverage test",
  "5141003": "Implemented a load generator to be used for integrity/performance testing",
  "344a307": "[ 1844561 ] fast sync between the leader and the follower."
}, "zuul": {
  "7928bc1": "use setup-java cache key (#1361)",
  "8eca6f2": "build(deps): bump actions/cache from 2.1.7 to 3",
  "3427478": "Merge pull request #1159 from Netflix/dependabot/gradle/com.fasterxml.jackson.core-jackson-databind-2.13.1",
  "f4f887d": "Merge pull request #1170 from Netflix/dependabot/gradle/com.fasterxml.jackson.core-jackson-core-2.13.1",
  "a6712d9": "build(deps): bump actions/cache from 2.1.6 to 2.1.7",
  "3dc601a": "Merge pull request #1071 from Netflix/dependabot/github_actions/actions/cache-2.1.6",
  "af8cf42": "Merge pull request #1123 from Netflix/dependabot/gradle/com.fasterxml.jackson.core-jackson-core-2.13.0",
  "d66a7c7": "Merge pull request #1096 from jfernandez/jose/slowfilter-metrics",
  "eac47cc": "build(deps): bump actions/cache from 2.1.4 to 2.1.6",
  "8825757": "build(deps): bump actions/cache from v2 to v2.1.4 (#1011)",
  "3851d63": "Force LB stats to use per server cache",
  "203d851": "zuul-core: add back in the plaintext cache avoidance for retries",
  "517e0c1": "zuul-core: always cache full bodies, regardless of SSL",
  "f81489c": "Dont cache perfmark tag",
  "9a44731": "CGW-121: Adding Access-Control-Max-Age header to the http header name cache.",
  "a56514c": "Perf optimization for the HttpUtils.stripMaliciousHeaderChars() method",
  "3d5137b": "Performance optimization for lazy-caching some expensive ops in HttpRequestMessageImpl for the original inbound instance",
  "3c6a8c6": "Make some more frequently used properties of SessionContext be first-class, as a performance optimization",
  "880006f": "Some more perf optimizations to HttpRequestMessageImpl.",
  "b421f32": "Changed HttpRequestMessageImp.parseCookies() to cache on first usage. And added a reParseCookies() method to allow forcibly replacing the cached cookies.",
  "9581d9f": "Added CORS headers to cache.",
  "6e026f2": "Added some more common http header names to the cache.",
  "d5e54eb": "Change Headers class to use the HttpHeaderNames cache rather than instanciating HeaderName instances directly.",
  "4dd944d": "Some perf optimization around header names, to reduce the cost of case-insensitive String comparison. - Added variants of all the methods on Headers class that allow using HeaderName instead of String. - Created a cache of HeaderNameS, already populated with some common http header names."
}, "zxing": {
  "75dbbb0": "Micro optimization to maybe help https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47419",
  "9b972bb": "Simplified code, improved memory usage and performance of the QR-Code minimal encoder. (#1465)",
  "78ccf23": "Dynamic request capping system for web app plus minor optimization",
  "459c019": "Plugin updates; misc code simplifications and optimizations",
  "8d12dc4": "Minor performance improvements to HybridBinarizer (#762)",
  "dfe4819": "Minor updates / optimization from inspection; minor plugin / dependency updates",
  "cd8d9f9": "Fix bad location of Android SDK cache",
  "c4c578f": "Preload bookmarks instead of holding open cursor to avoid concurrent modification; no longer that slow that it must be avoided on the UI thread",
  "c044a94": "Put optimization behind a profile as it won't currently work with JDK9",
  "b1f4b5a": "Try local-only Proguard optimization for core library",
  "7036acd": "make CI build faster",
  "5d3a52d": "Update other tests to reflect better performance",
  "6767168": "More optimizations plus some improved RSS expanded misdetection detection",
  "14b2eeb": "A few more small optimizations",
  "6352a42": "Codabar optimization",
  "ce6ed08": "Disable code/allocation optimization in Proguard as it seems to cause a VerifyError on CM10 (?)",
  "a7c40ab": "Add framework for adding code targeting API levels higher than min supported. Add simplified backport of BS+ code for handling front, rotated cameras, to simply let a front camera open for now. Not guaranteed to work. Adjust optimization to keep these classes. Don't yet take away the Market filter requiring rear camera.",
  "9f07c47": "Apparently some of the default disabled optimizations are only there for Donut",
  "a569f17": "improve profiled performance of C++ BitArray::get(). Closes issue 1101",
  "31cb655": "minor C++ optimizations",
  "c0f797c": "Prevented checking the reverse image preference on every scan to improve performance.",
  "2cd7504": "Issue 677, faster grayscale conversion from Wolfgang",
  "05582c4": "Replace Math.round() with simple workalike -- faster, and needed to work in JavaME",
  "2526ea8": "Reformat, and implement some performance optimization",
  "0f431db": "Removed dynamic allocation of new int[2] when searching for guard patterns to improve performance.",
  "e68b295": "Removed as many exceptions as possible from the C++ product readers to improve performance. There is no change in the number of images which pass the unit tests.",
  "ffb33d4": "Slight refinement to last change - a cached row which failed should throw an exception, not return NULL.",
  "6ede7ed": "[iphone] now decoders need to be injected into ZXingWidgetController to enhance performance when only a few readers are needed. One exc bad access bug solved. A few minor bugs remain in ScanTest. 1st status bar does not reappear when success of scan. this one should be easy to fix. 2nd ScanTest does not display the results when scan success for the first time, but only second time. This second bug is strange",
  "391626b": "Reinstate more optimization, but avoid disagreement with dex by properly disabling the controversial optimizations: field and method merging, mostly",
  "e779586": "Made a small performance tweak (about 1% faster).",
  "e913ff5": "Remove some redundant 'throws'; allocate more reasonably sized StringBuffers for performance",
  "fff6624": "SImplified optimization a bit and made it more aggressive.",
  "38f73bc": "Added an optimization to the Android client's LuminanceSource implementation, and removed manual array copies in favor of System.arraycopy().",
  "eb8b967": "Added the previous Android benchmark I've been using to track performance, as well as a new one which uses wider images and therefore twice as many pixels.",
  "b613112": "Rewrote BitMatrix to allow rectangular 2D arrays, and so that every row begins with a new int, which makes it fast to copy out rows into BitArrays. This will be the basis of the upcoming bitmap refactoring for 1D Readers.",
  "e19e9a8": "I moved a chunk of the histogram/black point code out of BaseMonochromeBitmapSource and into BlackPointEstimator which makes a lot more sense. Unfortunately I had to expose three new methods and touch a bunch of files. But I did manage to reuse an array on subsequent calls, which was being allocated on every row scanned, so that might be a bit faster. It will also be easier to convert this code to JNI in the future if we want to, and/or do more advanced thresholding.",
  "6d472ea": "Removed deprecation of 'cropping' constructor -- in the end replacing it introduced some non-trivial performance hit, not worth it",
  "7561941": "Tiny optimization to reverse()",
  "8b33966": "Some clever, perhaps too-clever optimization of masking code",
  "b24fbdd": "Tiny optimizations to boolean logic to avoid extra byte code and branches in semi-critical sections",
  "10a90bf": "Some formatting changes, and a few tiny optimizations",
  "36e9361": "Some formatting changes, and a few tiny optimizations",
  "fb840a5": "Did some optimization and cleanup.",
  "e9a29fb": "move to singleton ReaderException for a bit more performance",
  "002d80e": "Added note about dex's issue with post-optimization debug symbol table",
  "1dc7192": "Another round of optimization, focused on reusing arrays and small objects.",
  "6f6da9a": "moved ProGuard optimization into Android build file since it's the only way to fully optimize the final build product (inlining of key methods). Also always dump proguard results.",
  "de41926": "Wrote a benchmark activity for Android which reads images recursively from the SD card, decodes each 10 times, and prints the average time to decode in milliseconds. The UI is extremely minimal, as the results are written to the log, but this is a good start towards measuring our performance under Dalvik on a platform without floating point hardware. This should run fine on the emulator but I haven't tested it yet.",
  "45677f2": "Made calendar event parsing more robust, and also reject non-calendar contents a little faster.",
  "593128d": "Make optimization of core.jar as a library more conservative -- no shrinking, obfuscation",
  "6f7a348": "Adjust optimization options: make sure to actually exclude more unused code, but keep what Android client needs; this means tests have to run against unoptimized version",
  "14895cf": "Now use integer math in patternMatchVariance for performance, plus a few other similar style and speed tweaks",
  "7b2cafe": "Missed one place that needs to cache the luminance data.",
  "f5b5891": "Fix bad logic black point estimator, improving threshold estimation performance (and adjust some == to .equals())",
  "88afca0": "Unify UPC-A reader into EAN-13 reader since EAN-13 is a superset and we can take advantage of the commonality to improve performance.",
  "66ae9f7": "Added 'T' as a shortcut to toggle debug method tracing using android.os.Debug and traceview for analysis. The traces are written to /sdcard, which means the SD Card must not be mounted as a volume by USB at the time. Tracing can slow down decoding by a factor of 5 or more but gives very useful insights into where the time is going.",
  "e14defd": "Changed ProGuard settings so it will inline methods which use private members. This eliminates tens of thousands of function calls to BitArray.get() on a typical decode, and lots of other work as well. Overall we're roughly 20% faster by using ProGuard than turning it off.",
  "93db610": "Made the RGB to luminance approximation/optimization a little faster -- one less shift",
  "4473c00": "Restored a corrected Reed-Solomon optimization and fixed a small issue in black box test cases",
  "5f14283": "Undo optimization that seems to not be correct in all cases -- will have to evaluate again later",
  "c32827a": "More aggressive inlining, to inline some key methods like BitArray.get(), resulting in significant performance boost",
  "b88df41": "More aggressive ProGuard optimization",
  "7214289": "Oops, use 5 passes of optimization",
  "9f0cd86": "Small optimization to check ranges of bits set in BitArray in bulk",
  "20c4317": "Small tweaks to streamline performance and code, and changed row search pattern to search more broadly more quickly, which seems to slightly improve decode performance",
  "25d112c": "Implemented row sampling for histograms and tweaked the valley finding algorithm for better performance."
}, "zxing-android-embedded": {
  "c9de43f": "Minor optimization.",
  "2a0feb1": "Disable code/allocation optimization in Proguard as it seems to cause a VerifyError on CM10 (?)",
  "4e13006": "Add framework for adding code targeting API levels higher than min supported. Add simplified backport of BS+ code for handling front, rotated cameras, to simply let a front camera open for now. Not guaranteed to work. Adjust optimization to keep these classes. Don't yet take away the Market filter requiring rear camera.",
  "d8d3de0": "Apparently some of the default disabled optimizations are only there for Donut",
  "a2fab36": "Prevented checking the reverse image preference on every scan to improve performance.",
  "63648d3": "Reinstate more optimization, but avoid disagreement with dex by properly disabling the controversial optimizations: field and method merging, mostly",
  "1de48cd": "SImplified optimization a bit and made it more aggressive.",
  "29aa246": "Added an optimization to the Android client's LuminanceSource implementation, and removed manual array copies in favor of System.arraycopy().",
  "d0857d0": "I moved a chunk of the histogram/black point code out of BaseMonochromeBitmapSource and into BlackPointEstimator which makes a lot more sense. Unfortunately I had to expose three new methods and touch a bunch of files. But I did manage to reuse an array on subsequent calls, which was being allocated on every row scanned, so that might be a bit faster. It will also be easier to convert this code to JNI in the future if we want to, and/or do more advanced thresholding.",
  "8426b8e": "Added note about dex's issue with post-optimization debug symbol table",
  "1cf30db": "moved ProGuard optimization into Android build file since it's the only way to fully optimize the final build product (inlining of key methods). Also always dump proguard results.",
  "9c99690": "Fix bad logic black point estimator, improving threshold estimation performance (and adjust some == to .equals())",
  "38b2466": "Made the RGB to luminance approximation/optimization a little faster -- one less shift",
  "b29c148": "More aggressive inlining, to inline some key methods like BitArray.get(), resulting in significant performance boost",
  "3aa2895": "More aggressive ProGuard optimization",
  "84f1c60": "Oops, use 5 passes of optimization"
}}
